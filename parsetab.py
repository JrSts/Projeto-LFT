
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND AS ATRIBUICAO BREAK COMMA CONTINUE DECREMENTO DIFERENTE DIVIDE DIVIGUAL DO DOISP ELSE ELVIS FALSE FOR FUN ID IDENTIDADE IF IGUALDADE IN INCREMENTO IS LCHAVE LITERAL_STRING LPAREN MAIOR MAIORIGUAL MAISIGUAL MENOR MENORIGUAL MENOSIGUAL MINUS MOD MODIGUAL MULT MULTIGUAL NOT NOT_IN NOT_IS NULL NUMBER OR PLUS PONTOPONTO PV RCHAVE RETURN RPAREN SEMIDENTIDADE TRUE VAL VAR WHILE kotlinFile : functionDeclaration kotlinFile\n\t\t\t\t   | functionDeclaration  functionDeclaration : FUN ID functionValueParameters functionBody\n                            | FUN ID functionValueParameters DOISP type functionBody  functionValueParameters : LPAREN parameters RPAREN\n                                | LPAREN RPAREN  parameters : parameter\n                   | parameter COMMA parameters   parameter : ID DOISP type  type : parenthesizedType\n             | ID  parenthesizedType : LPAREN type RPAREN  functionBody : block\n                     | ATRIBUICAO expression  statements : statement\n                   | statement statements  statement : open_statement\n                  | closed_statement\n     open_statement : IF LPAREN expression RPAREN block\n                       | IF LPAREN expression RPAREN statement\n                       | IF LPAREN expression RPAREN block ELSE open_statement\n                       | IF LPAREN expression RPAREN closed_statement ELSE open_statement\n                       | FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement\n                       | WHILE LPAREN expression RPAREN open_statement\n                       | DO open_statement WHILE LPAREN expression RPAREN closed_statement : non_if_statement_block\n                        | IF LPAREN expression RPAREN block ELSE block\n                        | IF LPAREN expression RPAREN closed_statement ELSE block\n                        | IF LPAREN expression RPAREN block ELSE closed_statement\n                        | IF LPAREN expression RPAREN closed_statement ELSE closed_statement\n                        | FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement\n                        | WHILE LPAREN expression RPAREN closed_statement\n                        | DO closed_statement WHILE LPAREN expression RPAREN non_if_statement_block : FOR LPAREN genericVariableDeclaration IN expression RPAREN block\n                              | WHILE LPAREN expression RPAREN block\n                              | DO block WHILE LPAREN expression RPAREN\n                              | PV\n                              | propertyDeclarationStm\n                              | assignment\n                              | chamadaDeFuncao\n                              | jumpExpression assignment : ID ATRIBUICAO expression\n                  | ID assignmentAndOperator expression block : LCHAVE statements RCHAVE  propertyDeclarationStm : VAR genericVariableDeclaration ATRIBUICAO expression\n                               | VAL genericVariableDeclaration ATRIBUICAO expression\n chamadaDeFuncao : ID LPAREN RPAREN\n                        | ID LPAREN parametersFunction RPAREN  genericVariableDeclaration : multiVariableDeclaration\n                                   | variableDeclaration variableDeclaration : ID DOISP type\n                           | ID variableDeclarations : variableDeclaration\n                            | variableDeclaration COMMA variableDeclarations  multiVariableDeclaration : LPAREN variableDeclarations RPAREN\n                                 | LPAREN RPAREN  parametersFunction : primaryExpression\n                           | primaryExpression COMMA parametersFunction  expression : disjunction  disjunction : conjunction\n                    | disjunction  OR  conjunctionconjunction : equality\n                   | conjunction  AND  equality equality : comparison\n                 | equality equalityOperator comparison   comparison : infixOperation\n                   | infixOperation comparisonOperator infixOperation infixOperation : infixOperation inOperator elvisExpression\n                      | infixOperation isOperator type\n                      | elvisExpression  elvisExpression : rangeExpression\n                        | elvisExpression  ELVIS rangeExpression   rangeExpression : additiveExpression\n\t\t\t\t\t\t| rangeExpression PONTOPONTO additiveExpression   additiveExpression : multiplicativeExpression\n                           | additiveExpression  additiveOperator  multiplicativeExpression multiplicativeExpression : asExpression\n                                 | multiplicativeExpression  multiplicativeOperator asExpression  asExpression : unaryExpression\n                     | unaryExpression asOperator type  unaryExpression : unaryOperator primaryExpression\n                        | primaryExpression\n                        | primaryExpression postfixUnaryOperator\n                       postfixUnaryOperator : INCREMENTO\n                             | DECREMENTO  primaryExpression : NULL\n                          | TRUE\n                          | FALSE\n                          | NUMBER\n                          | LITERAL_STRING\n                          | ID\n                          | chamadaDeFuncao\n                          | parenthesizedExpression\n     jumpExpression : RETURN expression\n                       | CONTINUE\n                       | BREAK parenthesizedExpression : LPAREN expression RPAREN  assignmentAndOperator :  MAISIGUAL\n                               | MENOSIGUAL\n                               | MULTIGUAL\n                               | DIVIGUAL\n                               | MODIGUAL\t equalityOperator : DIFERENTE\n                         | IDENTIDADE\n                         | IGUALDADE\n                         | SEMIDENTIDADE\t comparisonOperator : MENOR\n                           | MAIOR\n                           | MENORIGUAL\n                           | MAIORIGUAL  inOperator : IN\n                   | NOT_IN isOperator : IS\n\t\t\t\t  | NOT_IS  additiveOperator : PLUS\n                         | MINUS\t multiplicativeOperator : MULT\n                               | DIVIDE\n                               | MOD  asOperator : AS\n                   | AS asOperator  unaryOperator : INCREMENTO\n                      | DECREMENTO\n                      | MINUS\n                      | PLUS\n                      | NOT'
    
_lr_action_items = {'FUN':([0,2,8,10,17,19,21,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,72,103,104,105,106,109,133,134,135,136,137,138,139,140,141,142,143,144,146,149,164,],[3,3,-3,-13,-11,-10,-14,-59,-60,-62,-64,-66,-70,-71,-73,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,-4,-81,-83,-84,-85,-44,-12,-61,-63,-65,-67,-68,-69,-72,-74,-76,-78,-80,-47,-97,-48,]),'$end':([1,2,4,8,10,17,19,21,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,72,103,104,105,106,109,133,134,135,136,137,138,139,140,141,142,143,144,146,149,164,],[0,-2,-1,-3,-13,-11,-10,-14,-59,-60,-62,-64,-66,-70,-71,-73,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,-4,-81,-83,-84,-85,-44,-12,-61,-63,-65,-67,-68,-69,-72,-74,-76,-78,-80,-47,-97,-48,]),'ID':([3,7,9,11,12,17,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,52,56,57,58,59,60,61,62,63,64,66,67,68,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,111,112,113,120,123,124,125,126,127,128,129,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,149,156,160,161,162,163,164,165,166,167,168,169,170,171,172,174,176,179,180,181,184,186,187,188,193,194,195,196,197,198,199,200,201,203,204,205,206,207,208,211,212,213,214,215,216,217,218,221,223,224,225,226,227,230,231,233,],[5,16,17,45,65,-11,-10,17,-59,-60,-62,-64,-66,-70,-71,-73,-75,-77,-79,45,-82,-122,-123,-124,-125,-126,-86,-87,-88,-89,-90,-91,-92,-93,45,65,-17,-18,65,-26,-37,-38,-39,-40,-41,121,121,45,-95,-96,16,17,45,45,45,-103,-104,-105,-106,45,45,17,-107,-108,-109,-110,-111,-112,-113,-114,45,45,45,-115,-116,45,-117,-118,-119,17,-120,-81,-83,-84,-85,45,-44,45,121,45,121,45,45,-98,-99,-100,-101,-102,-94,-12,-61,-63,-65,-67,-68,-69,-72,-74,-76,-78,-80,-121,-47,-97,45,17,45,-42,-43,-48,45,65,45,65,45,45,45,-45,121,-46,-19,-20,-18,65,-24,-32,-35,45,65,65,121,45,65,-25,-33,-36,-27,-21,-29,-30,-22,-28,-23,-31,-34,65,45,65,-19,-18,65,65,65,121,45,65,45,65,65,]),'LPAREN':([5,9,11,20,33,35,36,37,38,39,45,48,53,54,55,63,64,65,66,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,107,111,112,113,123,124,125,126,127,128,129,145,153,154,155,156,160,161,165,167,169,170,171,178,182,183,193,196,197,215,219,220,225,226,230,],[7,20,48,20,48,-122,-123,-124,-125,-126,107,48,111,112,113,120,120,107,48,20,48,48,48,-103,-104,-105,-106,48,48,20,-107,-108,-109,-110,-111,-112,-113,-114,48,48,48,-115,-116,48,-117,-118,-119,20,-120,48,48,120,48,48,48,-98,-99,-100,-101,-102,-121,169,170,171,48,20,48,48,48,48,48,48,193,196,197,48,120,48,48,225,226,120,48,48,]),'DOISP':([6,14,16,69,121,],[9,-6,71,-5,160,]),'ATRIBUICAO':([6,14,17,18,19,65,69,117,118,119,121,122,133,158,173,175,],[11,-6,-11,11,-10,123,-5,156,-49,-50,-52,161,-12,-56,-55,-51,]),'LCHAVE':([6,14,17,18,19,56,69,133,166,168,184,194,195,198,214,216,221,223,224,227,231,233,],[12,-6,-11,12,-10,12,-5,-12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'RPAREN':([7,13,15,17,19,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,73,103,104,105,106,107,108,120,121,131,132,133,134,135,136,137,138,139,140,141,142,143,144,146,147,148,149,150,152,157,159,164,175,177,185,189,190,191,192,202,210,222,229,232,],[14,69,-7,-11,-10,-59,-60,-62,-64,-66,-70,-71,-73,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,133,-81,-83,-84,-85,146,149,158,-52,-8,-9,-12,-61,-63,-65,-67,-68,-69,-72,-74,-76,-78,-80,-47,164,-57,-97,166,168,173,-53,-48,-51,-58,198,199,200,201,-54,214,216,227,231,233,]),'INCREMENTO':([11,34,40,41,42,43,44,45,46,47,48,66,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,92,93,94,95,96,97,98,99,100,111,113,123,124,125,126,127,128,129,146,149,156,161,164,167,169,170,171,193,197,215,226,230,],[35,105,-86,-87,-88,-89,-90,-91,-92,-93,35,35,35,35,35,-103,-104,-105,-106,35,35,-107,-108,-109,-110,-111,-112,35,35,35,-115,-116,35,-117,-118,-119,35,35,35,35,-98,-99,-100,-101,-102,-47,-97,35,35,-48,35,35,35,35,35,35,35,35,35,]),'DECREMENTO':([11,34,40,41,42,43,44,45,46,47,48,66,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,92,93,94,95,96,97,98,99,100,111,113,123,124,125,126,127,128,129,146,149,156,161,164,167,169,170,171,193,197,215,226,230,],[36,106,-86,-87,-88,-89,-90,-91,-92,-93,36,36,36,36,36,-103,-104,-105,-106,36,36,-107,-108,-109,-110,-111,-112,36,36,36,-115,-116,36,-117,-118,-119,36,36,36,36,-98,-99,-100,-101,-102,-47,-97,36,36,-48,36,36,36,36,36,36,36,36,36,]),'MINUS':([11,17,19,29,30,31,32,34,40,41,42,43,44,45,46,47,48,66,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,92,93,94,95,96,97,98,99,100,103,104,105,106,111,113,123,124,125,126,127,128,129,133,141,142,143,144,146,149,156,161,164,167,169,170,171,193,197,215,226,230,],[37,-11,-10,96,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,37,37,37,37,37,-103,-104,-105,-106,37,37,-107,-108,-109,-110,-111,-112,37,37,37,-115,-116,37,-117,-118,-119,-81,-83,-84,-85,37,37,37,37,-98,-99,-100,-101,-102,-12,96,-76,-78,-80,-47,-97,37,37,-48,37,37,37,37,37,37,37,37,37,]),'PLUS':([11,17,19,29,30,31,32,34,40,41,42,43,44,45,46,47,48,66,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,92,93,94,95,96,97,98,99,100,103,104,105,106,111,113,123,124,125,126,127,128,129,133,141,142,143,144,146,149,156,161,164,167,169,170,171,193,197,215,226,230,],[38,-11,-10,95,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,38,38,38,38,38,-103,-104,-105,-106,38,38,-107,-108,-109,-110,-111,-112,38,38,38,-115,-116,38,-117,-118,-119,-81,-83,-84,-85,38,38,38,38,-98,-99,-100,-101,-102,-12,95,-76,-78,-80,-47,-97,38,38,-48,38,38,38,38,38,38,38,38,38,]),'NOT':([11,48,66,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,92,93,94,95,96,97,98,99,100,111,113,123,124,125,126,127,128,129,156,161,167,169,170,171,193,197,215,226,230,],[39,39,39,39,39,39,-103,-104,-105,-106,39,39,-107,-108,-109,-110,-111,-112,39,39,39,-115,-116,39,-117,-118,-119,39,39,39,39,-98,-99,-100,-101,-102,39,39,39,39,39,39,39,39,39,39,39,]),'NULL':([11,33,35,36,37,38,39,48,66,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,92,93,94,95,96,97,98,99,100,107,111,113,123,124,125,126,127,128,129,156,161,165,167,169,170,171,193,197,215,226,230,],[40,40,-122,-123,-124,-125,-126,40,40,40,40,40,-103,-104,-105,-106,40,40,-107,-108,-109,-110,-111,-112,40,40,40,-115,-116,40,-117,-118,-119,40,40,40,40,40,-98,-99,-100,-101,-102,40,40,40,40,40,40,40,40,40,40,40,40,]),'TRUE':([11,33,35,36,37,38,39,48,66,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,92,93,94,95,96,97,98,99,100,107,111,113,123,124,125,126,127,128,129,156,161,165,167,169,170,171,193,197,215,226,230,],[41,41,-122,-123,-124,-125,-126,41,41,41,41,41,-103,-104,-105,-106,41,41,-107,-108,-109,-110,-111,-112,41,41,41,-115,-116,41,-117,-118,-119,41,41,41,41,41,-98,-99,-100,-101,-102,41,41,41,41,41,41,41,41,41,41,41,41,]),'FALSE':([11,33,35,36,37,38,39,48,66,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,92,93,94,95,96,97,98,99,100,107,111,113,123,124,125,126,127,128,129,156,161,165,167,169,170,171,193,197,215,226,230,],[42,42,-122,-123,-124,-125,-126,42,42,42,42,42,-103,-104,-105,-106,42,42,-107,-108,-109,-110,-111,-112,42,42,42,-115,-116,42,-117,-118,-119,42,42,42,42,42,-98,-99,-100,-101,-102,42,42,42,42,42,42,42,42,42,42,42,42,]),'NUMBER':([11,33,35,36,37,38,39,48,66,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,92,93,94,95,96,97,98,99,100,107,111,113,123,124,125,126,127,128,129,156,161,165,167,169,170,171,193,197,215,226,230,],[43,43,-122,-123,-124,-125,-126,43,43,43,43,43,-103,-104,-105,-106,43,43,-107,-108,-109,-110,-111,-112,43,43,43,-115,-116,43,-117,-118,-119,43,43,43,43,43,-98,-99,-100,-101,-102,43,43,43,43,43,43,43,43,43,43,43,43,]),'LITERAL_STRING':([11,33,35,36,37,38,39,48,66,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,92,93,94,95,96,97,98,99,100,107,111,113,123,124,125,126,127,128,129,156,161,165,167,169,170,171,193,197,215,226,230,],[44,44,-122,-123,-124,-125,-126,44,44,44,44,44,-103,-104,-105,-106,44,44,-107,-108,-109,-110,-111,-112,44,44,44,-115,-116,44,-117,-118,-119,44,44,44,44,44,-98,-99,-100,-101,-102,44,44,44,44,44,44,44,44,44,44,44,44,]),'IF':([12,17,19,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,50,51,52,56,57,58,59,60,61,62,67,68,103,104,105,106,109,130,133,134,135,136,137,138,139,140,141,142,143,144,146,149,162,163,164,166,168,172,176,179,180,181,184,186,187,188,194,195,198,199,200,201,203,204,205,206,207,208,211,212,213,214,216,217,218,221,223,224,227,231,233,],[53,-11,-10,-59,-60,-62,-64,-66,-70,-71,-73,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,53,-17,-18,53,-26,-37,-38,-39,-40,-41,-95,-96,-81,-83,-84,-85,-44,-94,-12,-61,-63,-65,-67,-68,-69,-72,-74,-76,-78,-80,-47,-97,-42,-43,-48,178,53,-45,-46,-19,-20,-18,178,-24,-32,-35,53,53,53,-25,-33,-36,-27,-21,-29,-30,-22,-28,-23,-31,-34,178,178,-19,-18,178,178,178,178,178,178,]),'FOR':([12,17,19,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,50,51,52,56,57,58,59,60,61,62,67,68,103,104,105,106,109,130,133,134,135,136,137,138,139,140,141,142,143,144,146,149,162,163,164,166,168,172,176,179,180,181,184,186,187,188,194,195,198,199,200,201,203,204,205,206,207,208,211,212,213,214,216,217,218,221,223,224,227,231,233,],[54,-11,-10,-59,-60,-62,-64,-66,-70,-71,-73,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,54,-17,-18,54,-26,-37,-38,-39,-40,-41,-95,-96,-81,-83,-84,-85,-44,-94,-12,-61,-63,-65,-67,-68,-69,-72,-74,-76,-78,-80,-47,-97,-42,-43,-48,182,54,-45,-46,-19,-20,-18,182,-24,-32,-35,54,54,54,-25,-33,-36,-27,-21,-29,-30,-22,-28,-23,-31,-34,219,182,-19,-18,182,182,182,182,182,182,]),'WHILE':([12,17,19,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,50,51,52,56,57,58,59,60,61,62,67,68,103,104,105,106,109,114,115,116,130,133,134,135,136,137,138,139,140,141,142,143,144,146,149,162,163,164,166,168,172,176,179,180,181,184,186,187,188,194,195,198,199,200,201,203,204,205,206,207,208,211,212,213,214,216,217,218,221,223,224,227,231,233,],[55,-11,-10,-59,-60,-62,-64,-66,-70,-71,-73,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,55,-17,-18,55,-26,-37,-38,-39,-40,-41,-95,-96,-81,-83,-84,-85,-44,153,154,155,-94,-12,-61,-63,-65,-67,-68,-69,-72,-74,-76,-78,-80,-47,-97,-42,-43,-48,183,55,-45,-46,-19,-20,-18,183,-24,-32,-35,55,55,55,-25,-33,-36,-27,-21,-29,-30,-22,-28,-23,-31,-34,220,183,-19,-18,183,183,183,183,183,183,]),'DO':([12,17,19,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,50,51,52,56,57,58,59,60,61,62,67,68,103,104,105,106,109,130,133,134,135,136,137,138,139,140,141,142,143,144,146,149,162,163,164,166,168,172,176,179,180,181,184,186,187,188,194,195,198,199,200,201,203,204,205,206,207,208,211,212,213,214,216,217,218,221,223,224,227,231,233,],[56,-11,-10,-59,-60,-62,-64,-66,-70,-71,-73,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,56,-17,-18,56,-26,-37,-38,-39,-40,-41,-95,-96,-81,-83,-84,-85,-44,-94,-12,-61,-63,-65,-67,-68,-69,-72,-74,-76,-78,-80,-47,-97,-42,-43,-48,184,56,-45,-46,-19,-20,-18,184,-24,-32,-35,56,56,56,-25,-33,-36,-27,-21,-29,-30,-22,-28,-23,-31,-34,221,184,-19,-18,184,184,184,184,184,184,]),'PV':([12,17,19,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,50,51,52,56,57,58,59,60,61,62,67,68,103,104,105,106,109,130,133,134,135,136,137,138,139,140,141,142,143,144,146,149,162,163,164,166,168,172,176,179,180,181,184,186,187,188,194,195,198,199,200,201,203,204,205,206,207,208,211,212,213,214,216,217,218,221,223,224,227,231,233,],[58,-11,-10,-59,-60,-62,-64,-66,-70,-71,-73,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,58,-17,-18,58,-26,-37,-38,-39,-40,-41,-95,-96,-81,-83,-84,-85,-44,-94,-12,-61,-63,-65,-67,-68,-69,-72,-74,-76,-78,-80,-47,-97,-42,-43,-48,58,58,-45,-46,-19,-20,-18,58,-24,-32,-35,58,58,58,-25,-33,-36,-27,-21,-29,-30,-22,-28,-23,-31,-34,58,58,-19,-18,58,58,58,58,58,58,]),'VAR':([12,17,19,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,50,51,52,56,57,58,59,60,61,62,67,68,103,104,105,106,109,130,133,134,135,136,137,138,139,140,141,142,143,144,146,149,162,163,164,166,168,172,176,179,180,181,184,186,187,188,194,195,198,199,200,201,203,204,205,206,207,208,211,212,213,214,216,217,218,221,223,224,227,231,233,],[63,-11,-10,-59,-60,-62,-64,-66,-70,-71,-73,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,63,-17,-18,63,-26,-37,-38,-39,-40,-41,-95,-96,-81,-83,-84,-85,-44,-94,-12,-61,-63,-65,-67,-68,-69,-72,-74,-76,-78,-80,-47,-97,-42,-43,-48,63,63,-45,-46,-19,-20,-18,63,-24,-32,-35,63,63,63,-25,-33,-36,-27,-21,-29,-30,-22,-28,-23,-31,-34,63,63,-19,-18,63,63,63,63,63,63,]),'VAL':([12,17,19,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,50,51,52,56,57,58,59,60,61,62,67,68,103,104,105,106,109,130,133,134,135,136,137,138,139,140,141,142,143,144,146,149,162,163,164,166,168,172,176,179,180,181,184,186,187,188,194,195,198,199,200,201,203,204,205,206,207,208,211,212,213,214,216,217,218,221,223,224,227,231,233,],[64,-11,-10,-59,-60,-62,-64,-66,-70,-71,-73,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,64,-17,-18,64,-26,-37,-38,-39,-40,-41,-95,-96,-81,-83,-84,-85,-44,-94,-12,-61,-63,-65,-67,-68,-69,-72,-74,-76,-78,-80,-47,-97,-42,-43,-48,64,64,-45,-46,-19,-20,-18,64,-24,-32,-35,64,64,64,-25,-33,-36,-27,-21,-29,-30,-22,-28,-23,-31,-34,64,64,-19,-18,64,64,64,64,64,64,]),'RETURN':([12,17,19,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,50,51,52,56,57,58,59,60,61,62,67,68,103,104,105,106,109,130,133,134,135,136,137,138,139,140,141,142,143,144,146,149,162,163,164,166,168,172,176,179,180,181,184,186,187,188,194,195,198,199,200,201,203,204,205,206,207,208,211,212,213,214,216,217,218,221,223,224,227,231,233,],[66,-11,-10,-59,-60,-62,-64,-66,-70,-71,-73,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,66,-17,-18,66,-26,-37,-38,-39,-40,-41,-95,-96,-81,-83,-84,-85,-44,-94,-12,-61,-63,-65,-67,-68,-69,-72,-74,-76,-78,-80,-47,-97,-42,-43,-48,66,66,-45,-46,-19,-20,-18,66,-24,-32,-35,66,66,66,-25,-33,-36,-27,-21,-29,-30,-22,-28,-23,-31,-34,66,66,-19,-18,66,66,66,66,66,66,]),'CONTINUE':([12,17,19,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,50,51,52,56,57,58,59,60,61,62,67,68,103,104,105,106,109,130,133,134,135,136,137,138,139,140,141,142,143,144,146,149,162,163,164,166,168,172,176,179,180,181,184,186,187,188,194,195,198,199,200,201,203,204,205,206,207,208,211,212,213,214,216,217,218,221,223,224,227,231,233,],[67,-11,-10,-59,-60,-62,-64,-66,-70,-71,-73,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,67,-17,-18,67,-26,-37,-38,-39,-40,-41,-95,-96,-81,-83,-84,-85,-44,-94,-12,-61,-63,-65,-67,-68,-69,-72,-74,-76,-78,-80,-47,-97,-42,-43,-48,67,67,-45,-46,-19,-20,-18,67,-24,-32,-35,67,67,67,-25,-33,-36,-27,-21,-29,-30,-22,-28,-23,-31,-34,67,67,-19,-18,67,67,67,67,67,67,]),'BREAK':([12,17,19,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,50,51,52,56,57,58,59,60,61,62,67,68,103,104,105,106,109,130,133,134,135,136,137,138,139,140,141,142,143,144,146,149,162,163,164,166,168,172,176,179,180,181,184,186,187,188,194,195,198,199,200,201,203,204,205,206,207,208,211,212,213,214,216,217,218,221,223,224,227,231,233,],[68,-11,-10,-59,-60,-62,-64,-66,-70,-71,-73,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,68,-17,-18,68,-26,-37,-38,-39,-40,-41,-95,-96,-81,-83,-84,-85,-44,-94,-12,-61,-63,-65,-67,-68,-69,-72,-74,-76,-78,-80,-47,-97,-42,-43,-48,68,68,-45,-46,-19,-20,-18,68,-24,-32,-35,68,68,68,-25,-33,-36,-27,-21,-29,-30,-22,-28,-23,-31,-34,68,68,-19,-18,68,68,68,68,68,68,]),'COMMA':([15,17,19,40,41,42,43,44,45,46,47,121,132,133,146,148,149,159,164,175,],[70,-11,-10,-86,-87,-88,-89,-90,-91,-92,-93,-52,-9,-12,-47,165,-97,174,-48,-51,]),'MENOR':([17,19,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,138,139,140,141,142,143,144,146,149,164,],[-11,-10,84,-70,-71,-73,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,-81,-83,-84,-85,-12,-68,-69,-72,-74,-76,-78,-80,-47,-97,-48,]),'MAIOR':([17,19,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,138,139,140,141,142,143,144,146,149,164,],[-11,-10,85,-70,-71,-73,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,-81,-83,-84,-85,-12,-68,-69,-72,-74,-76,-78,-80,-47,-97,-48,]),'MENORIGUAL':([17,19,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,138,139,140,141,142,143,144,146,149,164,],[-11,-10,86,-70,-71,-73,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,-81,-83,-84,-85,-12,-68,-69,-72,-74,-76,-78,-80,-47,-97,-48,]),'MAIORIGUAL':([17,19,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,138,139,140,141,142,143,144,146,149,164,],[-11,-10,87,-70,-71,-73,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,-81,-83,-84,-85,-12,-68,-69,-72,-74,-76,-78,-80,-47,-97,-48,]),'IN':([17,19,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,118,119,121,133,137,138,139,140,141,142,143,144,146,149,151,158,164,173,175,209,228,],[-11,-10,88,-70,-71,-73,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,-81,-83,-84,-85,-49,-50,-52,-12,88,-68,-69,-72,-74,-76,-78,-80,-47,-97,167,-56,-48,-55,-51,215,230,]),'NOT_IN':([17,19,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,137,138,139,140,141,142,143,144,146,149,164,],[-11,-10,89,-70,-71,-73,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,-81,-83,-84,-85,-12,89,-68,-69,-72,-74,-76,-78,-80,-47,-97,-48,]),'IS':([17,19,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,137,138,139,140,141,142,143,144,146,149,164,],[-11,-10,90,-70,-71,-73,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,-81,-83,-84,-85,-12,90,-68,-69,-72,-74,-76,-78,-80,-47,-97,-48,]),'NOT_IS':([17,19,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,137,138,139,140,141,142,143,144,146,149,164,],[-11,-10,91,-70,-71,-73,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,-81,-83,-84,-85,-12,91,-68,-69,-72,-74,-76,-78,-80,-47,-97,-48,]),'DIFERENTE':([17,19,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,135,136,137,138,139,140,141,142,143,144,146,149,164,],[-11,-10,77,-64,-66,-70,-71,-73,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,-81,-83,-84,-85,-12,77,-65,-67,-68,-69,-72,-74,-76,-78,-80,-47,-97,-48,]),'IDENTIDADE':([17,19,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,135,136,137,138,139,140,141,142,143,144,146,149,164,],[-11,-10,78,-64,-66,-70,-71,-73,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,-81,-83,-84,-85,-12,78,-65,-67,-68,-69,-72,-74,-76,-78,-80,-47,-97,-48,]),'IGUALDADE':([17,19,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,135,136,137,138,139,140,141,142,143,144,146,149,164,],[-11,-10,79,-64,-66,-70,-71,-73,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,-81,-83,-84,-85,-12,79,-65,-67,-68,-69,-72,-74,-76,-78,-80,-47,-97,-48,]),'SEMIDENTIDADE':([17,19,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,135,136,137,138,139,140,141,142,143,144,146,149,164,],[-11,-10,80,-64,-66,-70,-71,-73,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,-81,-83,-84,-85,-12,80,-65,-67,-68,-69,-72,-74,-76,-78,-80,-47,-97,-48,]),'AND':([17,19,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,134,135,136,137,138,139,140,141,142,143,144,146,149,164,],[-11,-10,75,-62,-64,-66,-70,-71,-73,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,-81,-83,-84,-85,-12,75,-63,-65,-67,-68,-69,-72,-74,-76,-78,-80,-47,-97,-48,]),'OR':([17,19,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,134,135,136,137,138,139,140,141,142,143,144,146,149,164,],[-11,-10,74,-60,-62,-64,-66,-70,-71,-73,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,-81,-83,-84,-85,-12,-61,-63,-65,-67,-68,-69,-72,-74,-76,-78,-80,-47,-97,-48,]),'RCHAVE':([17,19,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,49,50,51,52,57,58,59,60,61,62,67,68,103,104,105,106,109,110,130,133,134,135,136,137,138,139,140,141,142,143,144,146,149,162,163,164,172,176,179,180,181,186,187,188,199,200,201,203,204,205,206,207,208,211,212,213,217,218,],[-11,-10,-59,-60,-62,-64,-66,-70,-71,-73,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,109,-15,-17,-18,-26,-37,-38,-39,-40,-41,-95,-96,-81,-83,-84,-85,-44,-16,-94,-12,-61,-63,-65,-67,-68,-69,-72,-74,-76,-78,-80,-47,-97,-42,-43,-48,-45,-46,-19,-20,-18,-24,-32,-35,-25,-33,-36,-27,-21,-29,-30,-22,-28,-23,-31,-34,-19,-18,]),'ELSE':([17,19,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,57,58,59,60,61,62,67,68,103,104,105,106,109,130,133,134,135,136,137,138,139,140,141,142,143,144,146,149,162,163,164,172,176,179,181,187,188,200,201,203,205,206,208,212,213,217,218,],[-11,-10,-59,-60,-62,-64,-66,-70,-71,-73,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,-26,-37,-38,-39,-40,-41,-95,-96,-81,-83,-84,-85,-44,-94,-12,-61,-63,-65,-67,-68,-69,-72,-74,-76,-78,-80,-47,-97,-42,-43,-48,-45,-46,194,195,-32,-35,-33,-36,-27,-29,-30,-28,-31,-34,223,224,]),'MULT':([17,19,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,142,143,144,146,149,164,],[-11,-10,98,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,-81,-83,-84,-85,-12,98,-78,-80,-47,-97,-48,]),'DIVIDE':([17,19,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,142,143,144,146,149,164,],[-11,-10,99,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,-81,-83,-84,-85,-12,99,-78,-80,-47,-97,-48,]),'MOD':([17,19,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,142,143,144,146,149,164,],[-11,-10,100,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,-81,-83,-84,-85,-12,100,-78,-80,-47,-97,-48,]),'PONTOPONTO':([17,19,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,140,141,142,143,144,146,149,164,],[-11,-10,93,-73,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,-81,-83,-84,-85,-12,93,-74,-76,-78,-80,-47,-97,-48,]),'ELVIS':([17,19,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,138,140,141,142,143,144,146,149,164,],[-11,-10,92,-71,-73,-75,-77,-79,-82,-86,-87,-88,-89,-90,-91,-92,-93,-81,-83,-84,-85,-12,92,-72,-74,-76,-78,-80,-47,-97,-48,]),'AS':([32,34,40,41,42,43,44,45,46,47,102,103,104,105,106,146,149,164,],[102,-82,-86,-87,-88,-89,-90,-91,-92,-93,102,-81,-83,-84,-85,-47,-97,-48,]),'MAISIGUAL':([65,],[125,]),'MENOSIGUAL':([65,],[126,]),'MULTIGUAL':([65,],[127,]),'DIVIGUAL':([65,],[128,]),'MODIGUAL':([65,],[129,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'kotlinFile':([0,2,],[1,4,]),'functionDeclaration':([0,2,],[2,2,]),'functionValueParameters':([5,],[6,]),'functionBody':([6,18,],[8,72,]),'block':([6,18,56,166,168,184,194,195,198,214,216,221,223,224,227,231,233,],[10,10,116,179,188,116,203,208,213,217,188,116,203,208,213,188,213,]),'parameters':([7,70,],[13,131,]),'parameter':([7,70,],[15,15,]),'type':([9,20,71,83,101,160,],[18,73,132,139,144,175,]),'parenthesizedType':([9,20,71,83,101,160,],[19,19,19,19,19,19,]),'expression':([11,48,66,111,113,123,124,156,161,167,169,170,171,193,197,215,226,230,],[21,108,130,150,152,162,163,172,176,185,189,190,191,202,210,222,229,232,]),'disjunction':([11,48,66,111,113,123,124,156,161,167,169,170,171,193,197,215,226,230,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'conjunction':([11,48,66,74,111,113,123,124,156,161,167,169,170,171,193,197,215,226,230,],[23,23,23,134,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'equality':([11,48,66,74,75,111,113,123,124,156,161,167,169,170,171,193,197,215,226,230,],[24,24,24,24,135,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'comparison':([11,48,66,74,75,76,111,113,123,124,156,161,167,169,170,171,193,197,215,226,230,],[25,25,25,25,25,136,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'infixOperation':([11,48,66,74,75,76,81,111,113,123,124,156,161,167,169,170,171,193,197,215,226,230,],[26,26,26,26,26,26,137,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'elvisExpression':([11,48,66,74,75,76,81,82,111,113,123,124,156,161,167,169,170,171,193,197,215,226,230,],[27,27,27,27,27,27,27,138,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'rangeExpression':([11,48,66,74,75,76,81,82,92,111,113,123,124,156,161,167,169,170,171,193,197,215,226,230,],[28,28,28,28,28,28,28,28,140,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'additiveExpression':([11,48,66,74,75,76,81,82,92,93,111,113,123,124,156,161,167,169,170,171,193,197,215,226,230,],[29,29,29,29,29,29,29,29,29,141,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'multiplicativeExpression':([11,48,66,74,75,76,81,82,92,93,94,111,113,123,124,156,161,167,169,170,171,193,197,215,226,230,],[30,30,30,30,30,30,30,30,30,30,142,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'asExpression':([11,48,66,74,75,76,81,82,92,93,94,97,111,113,123,124,156,161,167,169,170,171,193,197,215,226,230,],[31,31,31,31,31,31,31,31,31,31,31,143,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'unaryExpression':([11,48,66,74,75,76,81,82,92,93,94,97,111,113,123,124,156,161,167,169,170,171,193,197,215,226,230,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'unaryOperator':([11,48,66,74,75,76,81,82,92,93,94,97,111,113,123,124,156,161,167,169,170,171,193,197,215,226,230,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'primaryExpression':([11,33,48,66,74,75,76,81,82,92,93,94,97,107,111,113,123,124,156,161,165,167,169,170,171,193,197,215,226,230,],[34,103,34,34,34,34,34,34,34,34,34,34,34,148,34,34,34,34,34,34,148,34,34,34,34,34,34,34,34,34,]),'chamadaDeFuncao':([11,12,33,48,50,56,66,74,75,76,81,82,92,93,94,97,107,111,113,123,124,156,161,165,166,167,168,169,170,171,184,193,194,195,197,198,214,215,216,221,223,224,226,227,230,231,233,],[46,61,46,46,61,61,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,61,46,61,46,46,46,61,46,61,61,46,61,61,46,61,61,61,61,46,61,46,61,61,]),'parenthesizedExpression':([11,33,48,66,74,75,76,81,82,92,93,94,97,107,111,113,123,124,156,161,165,167,169,170,171,193,197,215,226,230,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'statements':([12,50,],[49,110,]),'statement':([12,50,166,214,],[50,50,180,180,]),'open_statement':([12,50,56,166,168,184,194,195,198,214,216,221,223,224,227,231,233,],[51,51,114,51,186,114,204,207,211,51,186,114,204,207,211,186,211,]),'closed_statement':([12,50,56,166,168,184,194,195,198,214,216,221,223,224,227,231,233,],[52,52,115,181,187,115,205,206,212,218,187,115,205,206,212,187,212,]),'non_if_statement_block':([12,50,56,166,168,184,194,195,198,214,216,221,223,224,227,231,233,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'propertyDeclarationStm':([12,50,56,166,168,184,194,195,198,214,216,221,223,224,227,231,233,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'assignment':([12,50,56,166,168,184,194,195,198,214,216,221,223,224,227,231,233,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'jumpExpression':([12,50,56,166,168,184,194,195,198,214,216,221,223,224,227,231,233,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'equalityOperator':([24,135,],[76,76,]),'comparisonOperator':([26,],[81,]),'inOperator':([26,137,],[82,82,]),'isOperator':([26,137,],[83,83,]),'additiveOperator':([29,141,],[94,94,]),'multiplicativeOperator':([30,142,],[97,97,]),'asOperator':([32,102,],[101,145,]),'postfixUnaryOperator':([34,],[104,]),'genericVariableDeclaration':([63,64,112,196,225,],[117,122,151,209,228,]),'multiVariableDeclaration':([63,64,112,196,225,],[118,118,118,118,118,]),'variableDeclaration':([63,64,112,120,174,196,225,],[119,119,119,159,159,119,119,]),'assignmentAndOperator':([65,],[124,]),'parametersFunction':([107,165,],[147,177,]),'variableDeclarations':([120,174,],[157,192,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> kotlinFile","S'",1,None,None,None),
  ('kotlinFile -> functionDeclaration kotlinFile','kotlinFile',2,'p_kotlinFile','gramatica.py',12),
  ('kotlinFile -> functionDeclaration','kotlinFile',1,'p_kotlinFile','gramatica.py',13),
  ('functionDeclaration -> FUN ID functionValueParameters functionBody','functionDeclaration',4,'p_functionDeclaration','gramatica.py',21),
  ('functionDeclaration -> FUN ID functionValueParameters DOISP type functionBody','functionDeclaration',6,'p_functionDeclaration','gramatica.py',22),
  ('functionValueParameters -> LPAREN parameters RPAREN','functionValueParameters',3,'p_functionValueParameters','gramatica.py',30),
  ('functionValueParameters -> LPAREN RPAREN','functionValueParameters',2,'p_functionValueParameters','gramatica.py',31),
  ('parameters -> parameter','parameters',1,'p_parameters','gramatica.py',38),
  ('parameters -> parameter COMMA parameters','parameters',3,'p_parameters','gramatica.py',39),
  ('parameter -> ID DOISP type','parameter',3,'p_parameter','gramatica.py',47),
  ('type -> parenthesizedType','type',1,'p_type','gramatica.py',53),
  ('type -> ID','type',1,'p_type','gramatica.py',54),
  ('parenthesizedType -> LPAREN type RPAREN','parenthesizedType',3,'p_parenthesizedType','gramatica.py',59),
  ('functionBody -> block','functionBody',1,'p_functionBody','gramatica.py',64),
  ('functionBody -> ATRIBUICAO expression','functionBody',2,'p_functionBody','gramatica.py',65),
  ('statements -> statement','statements',1,'p_statements','gramatica.py',73),
  ('statements -> statement statements','statements',2,'p_statements','gramatica.py',74),
  ('statement -> open_statement','statement',1,'p_statement','gramatica.py',82),
  ('statement -> closed_statement','statement',1,'p_statement','gramatica.py',83),
  ('open_statement -> IF LPAREN expression RPAREN block','open_statement',5,'p_open_statement','gramatica.py',88),
  ('open_statement -> IF LPAREN expression RPAREN statement','open_statement',5,'p_open_statement','gramatica.py',89),
  ('open_statement -> IF LPAREN expression RPAREN block ELSE open_statement','open_statement',7,'p_open_statement','gramatica.py',90),
  ('open_statement -> IF LPAREN expression RPAREN closed_statement ELSE open_statement','open_statement',7,'p_open_statement','gramatica.py',91),
  ('open_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement','open_statement',7,'p_open_statement','gramatica.py',92),
  ('open_statement -> WHILE LPAREN expression RPAREN open_statement','open_statement',5,'p_open_statement','gramatica.py',93),
  ('open_statement -> DO open_statement WHILE LPAREN expression RPAREN','open_statement',6,'p_open_statement','gramatica.py',94),
  ('closed_statement -> non_if_statement_block','closed_statement',1,'p_closed_statement','gramatica.py',113),
  ('closed_statement -> IF LPAREN expression RPAREN block ELSE block','closed_statement',7,'p_closed_statement','gramatica.py',114),
  ('closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE block','closed_statement',7,'p_closed_statement','gramatica.py',115),
  ('closed_statement -> IF LPAREN expression RPAREN block ELSE closed_statement','closed_statement',7,'p_closed_statement','gramatica.py',116),
  ('closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE closed_statement','closed_statement',7,'p_closed_statement','gramatica.py',117),
  ('closed_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement','closed_statement',7,'p_closed_statement','gramatica.py',118),
  ('closed_statement -> WHILE LPAREN expression RPAREN closed_statement','closed_statement',5,'p_closed_statement','gramatica.py',119),
  ('closed_statement -> DO closed_statement WHILE LPAREN expression RPAREN','closed_statement',6,'p_closed_statement','gramatica.py',120),
  ('non_if_statement_block -> FOR LPAREN genericVariableDeclaration IN expression RPAREN block','non_if_statement_block',7,'p_non_if_statement','gramatica.py',141),
  ('non_if_statement_block -> WHILE LPAREN expression RPAREN block','non_if_statement_block',5,'p_non_if_statement','gramatica.py',142),
  ('non_if_statement_block -> DO block WHILE LPAREN expression RPAREN','non_if_statement_block',6,'p_non_if_statement','gramatica.py',143),
  ('non_if_statement_block -> PV','non_if_statement_block',1,'p_non_if_statement','gramatica.py',144),
  ('non_if_statement_block -> propertyDeclarationStm','non_if_statement_block',1,'p_non_if_statement','gramatica.py',145),
  ('non_if_statement_block -> assignment','non_if_statement_block',1,'p_non_if_statement','gramatica.py',146),
  ('non_if_statement_block -> chamadaDeFuncao','non_if_statement_block',1,'p_non_if_statement','gramatica.py',147),
  ('non_if_statement_block -> jumpExpression','non_if_statement_block',1,'p_non_if_statement','gramatica.py',148),
  ('assignment -> ID ATRIBUICAO expression','assignment',3,'p_assignment','gramatica.py',159),
  ('assignment -> ID assignmentAndOperator expression','assignment',3,'p_assignment','gramatica.py',160),
  ('block -> LCHAVE statements RCHAVE','block',3,'p_block','gramatica.py',167),
  ('propertyDeclarationStm -> VAR genericVariableDeclaration ATRIBUICAO expression','propertyDeclarationStm',4,'p_propertyDeclarationStm','gramatica.py',171),
  ('propertyDeclarationStm -> VAL genericVariableDeclaration ATRIBUICAO expression','propertyDeclarationStm',4,'p_propertyDeclarationStm','gramatica.py',172),
  ('chamadaDeFuncao -> ID LPAREN RPAREN','chamadaDeFuncao',3,'p_chamadaDeFuncao','gramatica.py',180),
  ('chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN','chamadaDeFuncao',4,'p_chamadaDeFuncao','gramatica.py',181),
  ('genericVariableDeclaration -> multiVariableDeclaration','genericVariableDeclaration',1,'p_genericVariableDeclaration','gramatica.py',188),
  ('genericVariableDeclaration -> variableDeclaration','genericVariableDeclaration',1,'p_genericVariableDeclaration','gramatica.py',189),
  ('variableDeclaration -> ID DOISP type','variableDeclaration',3,'p_variableDeclaration','gramatica.py',193),
  ('variableDeclaration -> ID','variableDeclaration',1,'p_variableDeclaration','gramatica.py',194),
  ('variableDeclarations -> variableDeclaration','variableDeclarations',1,'p_variableDeclarations','gramatica.py',201),
  ('variableDeclarations -> variableDeclaration COMMA variableDeclarations','variableDeclarations',3,'p_variableDeclarations','gramatica.py',202),
  ('multiVariableDeclaration -> LPAREN variableDeclarations RPAREN','multiVariableDeclaration',3,'p_multiVariableDeclaration','gramatica.py',209),
  ('multiVariableDeclaration -> LPAREN RPAREN','multiVariableDeclaration',2,'p_multiVariableDeclaration','gramatica.py',210),
  ('parametersFunction -> primaryExpression','parametersFunction',1,'p_parametersFunction','gramatica.py',217),
  ('parametersFunction -> primaryExpression COMMA parametersFunction','parametersFunction',3,'p_parametersFunction','gramatica.py',218),
  ('expression -> disjunction','expression',1,'p_expression','gramatica.py',226),
  ('disjunction -> conjunction','disjunction',1,'p_disjunction','gramatica.py',231),
  ('disjunction -> disjunction OR conjunction','disjunction',3,'p_disjunction','gramatica.py',232),
  ('conjunction -> equality','conjunction',1,'p_conjunction','gramatica.py',240),
  ('conjunction -> conjunction AND equality','conjunction',3,'p_conjunction','gramatica.py',241),
  ('equality -> comparison','equality',1,'p_equality','gramatica.py',249),
  ('equality -> equality equalityOperator comparison','equality',3,'p_equality','gramatica.py',250),
  ('comparison -> infixOperation','comparison',1,'p_comparison','gramatica.py',258),
  ('comparison -> infixOperation comparisonOperator infixOperation','comparison',3,'p_comparison','gramatica.py',259),
  ('infixOperation -> infixOperation inOperator elvisExpression','infixOperation',3,'p_infixOperation','gramatica.py',267),
  ('infixOperation -> infixOperation isOperator type','infixOperation',3,'p_infixOperation','gramatica.py',268),
  ('infixOperation -> elvisExpression','infixOperation',1,'p_infixOperation','gramatica.py',269),
  ('elvisExpression -> rangeExpression','elvisExpression',1,'p_elvisExpression','gramatica.py',278),
  ('elvisExpression -> elvisExpression ELVIS rangeExpression','elvisExpression',3,'p_elvisExpression','gramatica.py',279),
  ('rangeExpression -> additiveExpression','rangeExpression',1,'p_rangeExpression','gramatica.py',286),
  ('rangeExpression -> rangeExpression PONTOPONTO additiveExpression','rangeExpression',3,'p_rangeExpression','gramatica.py',287),
  ('additiveExpression -> multiplicativeExpression','additiveExpression',1,'p_additiveExpression','gramatica.py',295),
  ('additiveExpression -> additiveExpression additiveOperator multiplicativeExpression','additiveExpression',3,'p_additiveExpression','gramatica.py',296),
  ('multiplicativeExpression -> asExpression','multiplicativeExpression',1,'p_multiplicativeExpression','gramatica.py',304),
  ('multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression','multiplicativeExpression',3,'p_multiplicativeExpression','gramatica.py',305),
  ('asExpression -> unaryExpression','asExpression',1,'p_asExpression','gramatica.py',313),
  ('asExpression -> unaryExpression asOperator type','asExpression',3,'p_asExpression','gramatica.py',314),
  ('unaryExpression -> unaryOperator primaryExpression','unaryExpression',2,'p_unaryExpression','gramatica.py',322),
  ('unaryExpression -> primaryExpression','unaryExpression',1,'p_unaryExpression','gramatica.py',323),
  ('unaryExpression -> primaryExpression postfixUnaryOperator','unaryExpression',2,'p_unaryExpression','gramatica.py',324),
  ('postfixUnaryOperator -> INCREMENTO','postfixUnaryOperator',1,'p_postfixUnaryOperator','gramatica.py',334),
  ('postfixUnaryOperator -> DECREMENTO','postfixUnaryOperator',1,'p_postfixUnaryOperator','gramatica.py',335),
  ('primaryExpression -> NULL','primaryExpression',1,'p_primaryExpression','gramatica.py',340),
  ('primaryExpression -> TRUE','primaryExpression',1,'p_primaryExpression','gramatica.py',341),
  ('primaryExpression -> FALSE','primaryExpression',1,'p_primaryExpression','gramatica.py',342),
  ('primaryExpression -> NUMBER','primaryExpression',1,'p_primaryExpression','gramatica.py',343),
  ('primaryExpression -> LITERAL_STRING','primaryExpression',1,'p_primaryExpression','gramatica.py',344),
  ('primaryExpression -> ID','primaryExpression',1,'p_primaryExpression','gramatica.py',345),
  ('primaryExpression -> chamadaDeFuncao','primaryExpression',1,'p_primaryExpression','gramatica.py',346),
  ('primaryExpression -> parenthesizedExpression','primaryExpression',1,'p_primaryExpression','gramatica.py',347),
  ('jumpExpression -> RETURN expression','jumpExpression',2,'p_jumpExpression','gramatica.py',353),
  ('jumpExpression -> CONTINUE','jumpExpression',1,'p_jumpExpression','gramatica.py',354),
  ('jumpExpression -> BREAK','jumpExpression',1,'p_jumpExpression','gramatica.py',355),
  ('parenthesizedExpression -> LPAREN expression RPAREN','parenthesizedExpression',3,'p_parenthesizedExpression','gramatica.py',362),
  ('assignmentAndOperator -> MAISIGUAL','assignmentAndOperator',1,'p_assignmentAndOperator','gramatica.py',368),
  ('assignmentAndOperator -> MENOSIGUAL','assignmentAndOperator',1,'p_assignmentAndOperator','gramatica.py',369),
  ('assignmentAndOperator -> MULTIGUAL','assignmentAndOperator',1,'p_assignmentAndOperator','gramatica.py',370),
  ('assignmentAndOperator -> DIVIGUAL','assignmentAndOperator',1,'p_assignmentAndOperator','gramatica.py',371),
  ('assignmentAndOperator -> MODIGUAL','assignmentAndOperator',1,'p_assignmentAndOperator','gramatica.py',372),
  ('equalityOperator -> DIFERENTE','equalityOperator',1,'p_equalityOperator','gramatica.py',386),
  ('equalityOperator -> IDENTIDADE','equalityOperator',1,'p_equalityOperator','gramatica.py',387),
  ('equalityOperator -> IGUALDADE','equalityOperator',1,'p_equalityOperator','gramatica.py',388),
  ('equalityOperator -> SEMIDENTIDADE','equalityOperator',1,'p_equalityOperator','gramatica.py',389),
  ('comparisonOperator -> MENOR','comparisonOperator',1,'p_comparisonOperator','gramatica.py',401),
  ('comparisonOperator -> MAIOR','comparisonOperator',1,'p_comparisonOperator','gramatica.py',402),
  ('comparisonOperator -> MENORIGUAL','comparisonOperator',1,'p_comparisonOperator','gramatica.py',403),
  ('comparisonOperator -> MAIORIGUAL','comparisonOperator',1,'p_comparisonOperator','gramatica.py',404),
  ('inOperator -> IN','inOperator',1,'p_inOperator','gramatica.py',417),
  ('inOperator -> NOT_IN','inOperator',1,'p_inOperator','gramatica.py',418),
  ('isOperator -> IS','isOperator',1,'p_isOperator','gramatica.py',426),
  ('isOperator -> NOT_IS','isOperator',1,'p_isOperator','gramatica.py',427),
  ('additiveOperator -> PLUS','additiveOperator',1,'p_additiveOperator','gramatica.py',435),
  ('additiveOperator -> MINUS','additiveOperator',1,'p_additiveOperator','gramatica.py',436),
  ('multiplicativeOperator -> MULT','multiplicativeOperator',1,'p_multiplicativeOperator','gramatica.py',444),
  ('multiplicativeOperator -> DIVIDE','multiplicativeOperator',1,'p_multiplicativeOperator','gramatica.py',445),
  ('multiplicativeOperator -> MOD','multiplicativeOperator',1,'p_multiplicativeOperator','gramatica.py',446),
  ('asOperator -> AS','asOperator',1,'p_asOperator','gramatica.py',456),
  ('asOperator -> AS asOperator','asOperator',2,'p_asOperator','gramatica.py',457),
  ('unaryOperator -> INCREMENTO','unaryOperator',1,'p_unaryOperator','gramatica.py',464),
  ('unaryOperator -> DECREMENTO','unaryOperator',1,'p_unaryOperator','gramatica.py',465),
  ('unaryOperator -> MINUS','unaryOperator',1,'p_unaryOperator','gramatica.py',466),
  ('unaryOperator -> PLUS','unaryOperator',1,'p_unaryOperator','gramatica.py',467),
  ('unaryOperator -> NOT','unaryOperator',1,'p_unaryOperator','gramatica.py',468),
]
