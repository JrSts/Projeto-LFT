
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND AS ATRIBUICAO BREAK COMMA CONTINUE DECREMENTO DIFERENTE DIVIDE DIVIGUAL DO DOISP ELSE ELVIS FALSE FOR FUN ID IDENTIDADE IF IGUALDADE IN INCREMENTO IS LCHAVE LITERAL_STRING LPAREN MAIOR MAIORIGUAL MAISIGUAL MENOR MENORIGUAL MENOSIGUAL MINUS MOD MODIGUAL MULT MULTIGUAL NOT NOT_IN NOT_IS NULL NUMBER OR PLUS PONTOPONTO PV RCHAVE RETURN RPAREN SEMIDENTIDADE TRUE VAL VAR WHILE kotlinFile : functionDeclaration kotlinFile\n\t\t\t\t   | functionDeclaration  functionDeclaration : FUN ID functionValueParameters functionBody\n                            | FUN ID functionValueParameters DOISP type functionBody functionValueParameters : LPAREN parameters RPAREN\n                               | LPAREN RPAREN  parameters : parameter\n                    | parameter COMMA parameters   parameter : ID DOISP type\n                   | ID DOISP type ATRIBUICAO expression type :  parenthesizedType\n                | ID parenthesizedType : LPAREN type RPAREN  functionBody : block\n                     | ATRIBUICAO expression statements : statement\n                  | statement statements statement :    open_statement\n                   |  closed_statement\n    \n        open_statement : IF LPAREN expression RPAREN block\n                       | IF LPAREN expression RPAREN statement\n                       | IF LPAREN expression RPAREN block ELSE open_statement\n                       | IF LPAREN expression RPAREN closed_statement ELSE open_statement\n                       | FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement\n                       | WHILE LPAREN expression RPAREN open_statement\n                       | DO open_statement WHILE LPAREN expression RPAREN\n    closed_statement :  non_if_statement_block\n                       | IF LPAREN expression RPAREN block ELSE block\n                       | IF LPAREN expression RPAREN closed_statement ELSE block\n                       | IF LPAREN expression RPAREN block ELSE closed_statement\n                       | IF LPAREN expression RPAREN closed_statement ELSE closed_statement\n                       | FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement\n                       | WHILE LPAREN expression RPAREN closed_statement\n                       | DO closed_statement WHILE LPAREN expression RPARENnon_if_statement_block : FOR LPAREN genericVariableDeclaration IN expression RPAREN block\n                       | WHILE LPAREN expression RPAREN block\n                       | DO block WHILE LPAREN expression RPAREN\n                       | PV\n                       | propertyDeclarationStm\n                       | assignment\n                       | chamadaDeFuncao\n                       | jumpExpressionassignment : ID ATRIBUICAO expression\n                  | ID assignmentAndOperator expression block : LCHAVE statements RCHAVE  propertyDeclarationStm : VAR genericVariableDeclaration ATRIBUICAO expression\n                               | VAL genericVariableDeclaration ATRIBUICAO expression\n chamadaDeFuncao : ID LPAREN RPAREN\n                        | ID LPAREN parametersFunction RPAREN  genericVariableDeclaration : multiVariableDeclaration\n                                   | variableDeclaration variableDeclaration :  ID DOISP type\n                            | ID variableDeclarations : variableDeclaration\n                            | variableDeclaration COMMA variableDeclarations  multiVariableDeclaration : LPAREN variableDeclarations RPAREN\n                                | LPAREN RPAREN parametersFunction : primaryExpression\n                           | primaryExpression COMMA parametersFunction  expression : disjunction  disjunction : conjunction\n                     | disjunction  OR  conjunctionconjunction : equality\n                  | conjunction  AND  equality equality : comparison\n                  | equality equalityOperator comparison   comparison : infixOperation\n                     | infixOperation comparisonOperator infixOperation infixOperation :   infixOperation inOperator elvisExpression\n                        | infixOperation isOperator type\n                        | elvisExpression  elvisExpression : rangeExpression\n                          | elvisExpression  ELVIS rangeExpression   rangeExpression : additiveExpression\n\t\t\t\t\t\t| rangeExpression PONTOPONTO additiveExpression   additiveExpression : multiplicativeExpression\n                             | additiveExpression  additiveOperator  multiplicativeExpression multiplicativeExpression : asExpression\n                                  | multiplicativeExpression  multiplicativeOperator asExpression  asExpression : unaryExpression\n                       | unaryExpression asOperator type  unaryExpression : unaryOperator primaryExpression\n                       | primaryExpression\n                       | primaryExpression postfixUnaryOperator\n                       postfixUnaryOperator : INCREMENTO\n                             | DECREMENTO  primaryExpression : NULL\n                           | chamadaDeFuncao\n                           | TRUE\n                           | FALSE\n                           | NUMBER\n                           | LITERAL_STRING\n                           | ID\n                           | parenthesizedExpression\n     jumpExpression : RETURN expression\n                       | CONTINUE\n                       | BREAK parenthesizedExpression : LPAREN expression RPAREN  assignmentAndOperator :  MAISIGUAL\n                               | MENOSIGUAL\n                               | MULTIGUAL\n                               | DIVIGUAL\n                               | MODIGUAL\t equalityOperator : DIFERENTE\n                         | IDENTIDADE\n                         | IGUALDADE\n                         | SEMIDENTIDADE\t comparisonOperator : MENOR\n                           | MAIOR\n                           | MENORIGUAL\n                           | MAIORIGUAL  inOperator : IN\n                 | NOT_IN isOperator : IS\n\t\t\t\t| NOT_IS  additiveOperator : PLUS\n                         | MINUS\t multiplicativeOperator : MULT\n                                | DIVIDE\n                                | MOD  asOperator : AS\n                   | AS asOperator  unaryOperator : INCREMENTO\n                            | DECREMENTO\n                            | MINUS\n                            | PLUS\n                            | NOT'
    
_lr_action_items = {'FUN':([0,2,8,10,17,19,21,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,72,103,104,105,106,109,133,134,135,136,137,138,139,140,141,142,143,144,146,149,165,],[3,3,-3,-14,-12,-11,-15,-60,-61,-63,-65,-67,-71,-72,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,-4,-82,-84,-85,-86,-45,-13,-62,-64,-66,-68,-69,-70,-73,-75,-77,-79,-81,-48,-98,-49,]),'$end':([1,2,4,8,10,17,19,21,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,72,103,104,105,106,109,133,134,135,136,137,138,139,140,141,142,143,144,146,149,165,],[0,-2,-1,-3,-14,-12,-11,-15,-60,-61,-63,-65,-67,-71,-72,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,-4,-82,-84,-85,-86,-45,-13,-62,-64,-66,-68,-69,-70,-73,-75,-77,-79,-81,-48,-98,-49,]),'ID':([3,7,9,11,12,17,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,52,56,57,58,59,60,61,62,63,64,66,67,68,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,111,112,113,120,123,124,125,126,127,128,129,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,149,156,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,177,181,182,183,186,188,189,190,195,196,197,198,199,200,201,202,203,205,206,207,208,209,210,213,214,215,216,217,218,219,220,223,225,226,227,228,229,232,233,235,],[5,16,17,46,65,-12,-11,17,-60,-61,-63,-65,-67,-71,-72,-74,-76,-78,-80,46,-83,-123,-124,-125,-126,-127,-87,-88,-89,-90,-91,-92,-93,-94,46,65,-18,-19,65,-27,-38,-39,-40,-41,-42,121,121,46,-96,-97,16,17,46,46,46,-104,-105,-106,-107,46,46,17,-108,-109,-110,-111,-112,-113,-114,-115,46,46,46,-116,-117,46,-118,-119,-120,17,-121,-82,-84,-85,-86,46,-45,46,121,46,121,46,46,-99,-100,-101,-102,-103,-95,-13,-62,-64,-66,-68,-69,-70,-73,-75,-77,-79,-81,-122,-48,-98,46,17,46,-43,-44,46,-49,46,65,46,65,46,46,46,-46,121,-47,-20,-21,-19,65,-25,-33,-36,46,65,65,121,46,65,-26,-34,-37,-28,-22,-30,-31,-23,-29,-24,-32,-35,65,46,65,-20,-19,65,65,65,121,46,65,46,65,65,]),'LPAREN':([5,9,11,20,33,35,36,37,38,39,46,48,53,54,55,63,64,65,66,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,107,111,112,113,123,124,125,126,127,128,129,145,153,154,155,156,160,161,164,166,168,170,171,172,180,184,185,195,198,199,217,221,222,227,228,232,],[7,20,48,20,48,-123,-124,-125,-126,-127,107,48,111,112,113,120,120,107,48,20,48,48,48,-104,-105,-106,-107,48,48,20,-108,-109,-110,-111,-112,-113,-114,-115,48,48,48,-116,-117,48,-118,-119,-120,20,-121,48,48,120,48,48,48,-99,-100,-101,-102,-103,-122,170,171,172,48,20,48,48,48,48,48,48,48,195,198,199,48,120,48,48,227,228,120,48,48,]),'DOISP':([6,14,16,69,121,],[9,-6,71,-5,160,]),'ATRIBUICAO':([6,14,17,18,19,65,69,117,118,119,121,122,132,133,158,174,176,],[11,-6,-12,11,-11,123,-5,156,-50,-51,-53,161,164,-13,-57,-56,-52,]),'LCHAVE':([6,14,17,18,19,56,69,133,167,169,186,196,197,200,216,218,223,225,226,229,233,235,],[12,-6,-12,12,-11,12,-5,-13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'RPAREN':([7,13,15,17,19,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,73,103,104,105,106,107,108,120,121,131,132,133,134,135,136,137,138,139,140,141,142,143,144,146,147,148,149,150,152,157,159,165,176,178,179,187,191,192,193,194,204,212,224,231,234,],[14,69,-7,-12,-11,-60,-61,-63,-65,-67,-71,-72,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,133,-82,-84,-85,-86,146,149,158,-53,-8,-9,-13,-62,-64,-66,-68,-69,-70,-73,-75,-77,-79,-81,-48,165,-58,-98,167,169,174,-54,-49,-52,-10,-59,200,201,202,203,-55,216,218,229,233,235,]),'INCREMENTO':([11,34,40,41,42,43,44,45,46,47,48,66,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,92,93,94,95,96,97,98,99,100,111,113,123,124,125,126,127,128,129,146,149,156,161,164,165,168,170,171,172,195,199,217,228,232,],[35,105,-87,-88,-89,-90,-91,-92,-93,-94,35,35,35,35,35,-104,-105,-106,-107,35,35,-108,-109,-110,-111,-112,-113,35,35,35,-116,-117,35,-118,-119,-120,35,35,35,35,-99,-100,-101,-102,-103,-48,-98,35,35,35,-49,35,35,35,35,35,35,35,35,35,]),'DECREMENTO':([11,34,40,41,42,43,44,45,46,47,48,66,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,92,93,94,95,96,97,98,99,100,111,113,123,124,125,126,127,128,129,146,149,156,161,164,165,168,170,171,172,195,199,217,228,232,],[36,106,-87,-88,-89,-90,-91,-92,-93,-94,36,36,36,36,36,-104,-105,-106,-107,36,36,-108,-109,-110,-111,-112,-113,36,36,36,-116,-117,36,-118,-119,-120,36,36,36,36,-99,-100,-101,-102,-103,-48,-98,36,36,36,-49,36,36,36,36,36,36,36,36,36,]),'MINUS':([11,17,19,29,30,31,32,34,40,41,42,43,44,45,46,47,48,66,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,92,93,94,95,96,97,98,99,100,103,104,105,106,111,113,123,124,125,126,127,128,129,133,141,142,143,144,146,149,156,161,164,165,168,170,171,172,195,199,217,228,232,],[37,-12,-11,96,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,37,37,37,37,37,-104,-105,-106,-107,37,37,-108,-109,-110,-111,-112,-113,37,37,37,-116,-117,37,-118,-119,-120,-82,-84,-85,-86,37,37,37,37,-99,-100,-101,-102,-103,-13,96,-77,-79,-81,-48,-98,37,37,37,-49,37,37,37,37,37,37,37,37,37,]),'PLUS':([11,17,19,29,30,31,32,34,40,41,42,43,44,45,46,47,48,66,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,92,93,94,95,96,97,98,99,100,103,104,105,106,111,113,123,124,125,126,127,128,129,133,141,142,143,144,146,149,156,161,164,165,168,170,171,172,195,199,217,228,232,],[38,-12,-11,95,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,38,38,38,38,38,-104,-105,-106,-107,38,38,-108,-109,-110,-111,-112,-113,38,38,38,-116,-117,38,-118,-119,-120,-82,-84,-85,-86,38,38,38,38,-99,-100,-101,-102,-103,-13,95,-77,-79,-81,-48,-98,38,38,38,-49,38,38,38,38,38,38,38,38,38,]),'NOT':([11,48,66,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,92,93,94,95,96,97,98,99,100,111,113,123,124,125,126,127,128,129,156,161,164,168,170,171,172,195,199,217,228,232,],[39,39,39,39,39,39,-104,-105,-106,-107,39,39,-108,-109,-110,-111,-112,-113,39,39,39,-116,-117,39,-118,-119,-120,39,39,39,39,-99,-100,-101,-102,-103,39,39,39,39,39,39,39,39,39,39,39,39,]),'NULL':([11,33,35,36,37,38,39,48,66,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,92,93,94,95,96,97,98,99,100,107,111,113,123,124,125,126,127,128,129,156,161,164,166,168,170,171,172,195,199,217,228,232,],[40,40,-123,-124,-125,-126,-127,40,40,40,40,40,-104,-105,-106,-107,40,40,-108,-109,-110,-111,-112,-113,40,40,40,-116,-117,40,-118,-119,-120,40,40,40,40,40,-99,-100,-101,-102,-103,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'TRUE':([11,33,35,36,37,38,39,48,66,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,92,93,94,95,96,97,98,99,100,107,111,113,123,124,125,126,127,128,129,156,161,164,166,168,170,171,172,195,199,217,228,232,],[42,42,-123,-124,-125,-126,-127,42,42,42,42,42,-104,-105,-106,-107,42,42,-108,-109,-110,-111,-112,-113,42,42,42,-116,-117,42,-118,-119,-120,42,42,42,42,42,-99,-100,-101,-102,-103,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'FALSE':([11,33,35,36,37,38,39,48,66,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,92,93,94,95,96,97,98,99,100,107,111,113,123,124,125,126,127,128,129,156,161,164,166,168,170,171,172,195,199,217,228,232,],[43,43,-123,-124,-125,-126,-127,43,43,43,43,43,-104,-105,-106,-107,43,43,-108,-109,-110,-111,-112,-113,43,43,43,-116,-117,43,-118,-119,-120,43,43,43,43,43,-99,-100,-101,-102,-103,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'NUMBER':([11,33,35,36,37,38,39,48,66,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,92,93,94,95,96,97,98,99,100,107,111,113,123,124,125,126,127,128,129,156,161,164,166,168,170,171,172,195,199,217,228,232,],[44,44,-123,-124,-125,-126,-127,44,44,44,44,44,-104,-105,-106,-107,44,44,-108,-109,-110,-111,-112,-113,44,44,44,-116,-117,44,-118,-119,-120,44,44,44,44,44,-99,-100,-101,-102,-103,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'LITERAL_STRING':([11,33,35,36,37,38,39,48,66,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,92,93,94,95,96,97,98,99,100,107,111,113,123,124,125,126,127,128,129,156,161,164,166,168,170,171,172,195,199,217,228,232,],[45,45,-123,-124,-125,-126,-127,45,45,45,45,45,-104,-105,-106,-107,45,45,-108,-109,-110,-111,-112,-113,45,45,45,-116,-117,45,-118,-119,-120,45,45,45,45,45,-99,-100,-101,-102,-103,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'IF':([12,17,19,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,50,51,52,56,57,58,59,60,61,62,67,68,103,104,105,106,109,130,133,134,135,136,137,138,139,140,141,142,143,144,146,149,162,163,165,167,169,173,177,181,182,183,186,188,189,190,196,197,200,201,202,203,205,206,207,208,209,210,213,214,215,216,218,219,220,223,225,226,229,233,235,],[53,-12,-11,-60,-61,-63,-65,-67,-71,-72,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,53,-18,-19,53,-27,-38,-39,-40,-41,-42,-96,-97,-82,-84,-85,-86,-45,-95,-13,-62,-64,-66,-68,-69,-70,-73,-75,-77,-79,-81,-48,-98,-43,-44,-49,180,53,-46,-47,-20,-21,-19,180,-25,-33,-36,53,53,53,-26,-34,-37,-28,-22,-30,-31,-23,-29,-24,-32,-35,180,180,-20,-19,180,180,180,180,180,180,]),'FOR':([12,17,19,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,50,51,52,56,57,58,59,60,61,62,67,68,103,104,105,106,109,130,133,134,135,136,137,138,139,140,141,142,143,144,146,149,162,163,165,167,169,173,177,181,182,183,186,188,189,190,196,197,200,201,202,203,205,206,207,208,209,210,213,214,215,216,218,219,220,223,225,226,229,233,235,],[54,-12,-11,-60,-61,-63,-65,-67,-71,-72,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,54,-18,-19,54,-27,-38,-39,-40,-41,-42,-96,-97,-82,-84,-85,-86,-45,-95,-13,-62,-64,-66,-68,-69,-70,-73,-75,-77,-79,-81,-48,-98,-43,-44,-49,184,54,-46,-47,-20,-21,-19,184,-25,-33,-36,54,54,54,-26,-34,-37,-28,-22,-30,-31,-23,-29,-24,-32,-35,221,184,-20,-19,184,184,184,184,184,184,]),'WHILE':([12,17,19,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,50,51,52,56,57,58,59,60,61,62,67,68,103,104,105,106,109,114,115,116,130,133,134,135,136,137,138,139,140,141,142,143,144,146,149,162,163,165,167,169,173,177,181,182,183,186,188,189,190,196,197,200,201,202,203,205,206,207,208,209,210,213,214,215,216,218,219,220,223,225,226,229,233,235,],[55,-12,-11,-60,-61,-63,-65,-67,-71,-72,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,55,-18,-19,55,-27,-38,-39,-40,-41,-42,-96,-97,-82,-84,-85,-86,-45,153,154,155,-95,-13,-62,-64,-66,-68,-69,-70,-73,-75,-77,-79,-81,-48,-98,-43,-44,-49,185,55,-46,-47,-20,-21,-19,185,-25,-33,-36,55,55,55,-26,-34,-37,-28,-22,-30,-31,-23,-29,-24,-32,-35,222,185,-20,-19,185,185,185,185,185,185,]),'DO':([12,17,19,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,50,51,52,56,57,58,59,60,61,62,67,68,103,104,105,106,109,130,133,134,135,136,137,138,139,140,141,142,143,144,146,149,162,163,165,167,169,173,177,181,182,183,186,188,189,190,196,197,200,201,202,203,205,206,207,208,209,210,213,214,215,216,218,219,220,223,225,226,229,233,235,],[56,-12,-11,-60,-61,-63,-65,-67,-71,-72,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,56,-18,-19,56,-27,-38,-39,-40,-41,-42,-96,-97,-82,-84,-85,-86,-45,-95,-13,-62,-64,-66,-68,-69,-70,-73,-75,-77,-79,-81,-48,-98,-43,-44,-49,186,56,-46,-47,-20,-21,-19,186,-25,-33,-36,56,56,56,-26,-34,-37,-28,-22,-30,-31,-23,-29,-24,-32,-35,223,186,-20,-19,186,186,186,186,186,186,]),'PV':([12,17,19,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,50,51,52,56,57,58,59,60,61,62,67,68,103,104,105,106,109,130,133,134,135,136,137,138,139,140,141,142,143,144,146,149,162,163,165,167,169,173,177,181,182,183,186,188,189,190,196,197,200,201,202,203,205,206,207,208,209,210,213,214,215,216,218,219,220,223,225,226,229,233,235,],[58,-12,-11,-60,-61,-63,-65,-67,-71,-72,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,58,-18,-19,58,-27,-38,-39,-40,-41,-42,-96,-97,-82,-84,-85,-86,-45,-95,-13,-62,-64,-66,-68,-69,-70,-73,-75,-77,-79,-81,-48,-98,-43,-44,-49,58,58,-46,-47,-20,-21,-19,58,-25,-33,-36,58,58,58,-26,-34,-37,-28,-22,-30,-31,-23,-29,-24,-32,-35,58,58,-20,-19,58,58,58,58,58,58,]),'VAR':([12,17,19,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,50,51,52,56,57,58,59,60,61,62,67,68,103,104,105,106,109,130,133,134,135,136,137,138,139,140,141,142,143,144,146,149,162,163,165,167,169,173,177,181,182,183,186,188,189,190,196,197,200,201,202,203,205,206,207,208,209,210,213,214,215,216,218,219,220,223,225,226,229,233,235,],[63,-12,-11,-60,-61,-63,-65,-67,-71,-72,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,63,-18,-19,63,-27,-38,-39,-40,-41,-42,-96,-97,-82,-84,-85,-86,-45,-95,-13,-62,-64,-66,-68,-69,-70,-73,-75,-77,-79,-81,-48,-98,-43,-44,-49,63,63,-46,-47,-20,-21,-19,63,-25,-33,-36,63,63,63,-26,-34,-37,-28,-22,-30,-31,-23,-29,-24,-32,-35,63,63,-20,-19,63,63,63,63,63,63,]),'VAL':([12,17,19,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,50,51,52,56,57,58,59,60,61,62,67,68,103,104,105,106,109,130,133,134,135,136,137,138,139,140,141,142,143,144,146,149,162,163,165,167,169,173,177,181,182,183,186,188,189,190,196,197,200,201,202,203,205,206,207,208,209,210,213,214,215,216,218,219,220,223,225,226,229,233,235,],[64,-12,-11,-60,-61,-63,-65,-67,-71,-72,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,64,-18,-19,64,-27,-38,-39,-40,-41,-42,-96,-97,-82,-84,-85,-86,-45,-95,-13,-62,-64,-66,-68,-69,-70,-73,-75,-77,-79,-81,-48,-98,-43,-44,-49,64,64,-46,-47,-20,-21,-19,64,-25,-33,-36,64,64,64,-26,-34,-37,-28,-22,-30,-31,-23,-29,-24,-32,-35,64,64,-20,-19,64,64,64,64,64,64,]),'RETURN':([12,17,19,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,50,51,52,56,57,58,59,60,61,62,67,68,103,104,105,106,109,130,133,134,135,136,137,138,139,140,141,142,143,144,146,149,162,163,165,167,169,173,177,181,182,183,186,188,189,190,196,197,200,201,202,203,205,206,207,208,209,210,213,214,215,216,218,219,220,223,225,226,229,233,235,],[66,-12,-11,-60,-61,-63,-65,-67,-71,-72,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,66,-18,-19,66,-27,-38,-39,-40,-41,-42,-96,-97,-82,-84,-85,-86,-45,-95,-13,-62,-64,-66,-68,-69,-70,-73,-75,-77,-79,-81,-48,-98,-43,-44,-49,66,66,-46,-47,-20,-21,-19,66,-25,-33,-36,66,66,66,-26,-34,-37,-28,-22,-30,-31,-23,-29,-24,-32,-35,66,66,-20,-19,66,66,66,66,66,66,]),'CONTINUE':([12,17,19,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,50,51,52,56,57,58,59,60,61,62,67,68,103,104,105,106,109,130,133,134,135,136,137,138,139,140,141,142,143,144,146,149,162,163,165,167,169,173,177,181,182,183,186,188,189,190,196,197,200,201,202,203,205,206,207,208,209,210,213,214,215,216,218,219,220,223,225,226,229,233,235,],[67,-12,-11,-60,-61,-63,-65,-67,-71,-72,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,67,-18,-19,67,-27,-38,-39,-40,-41,-42,-96,-97,-82,-84,-85,-86,-45,-95,-13,-62,-64,-66,-68,-69,-70,-73,-75,-77,-79,-81,-48,-98,-43,-44,-49,67,67,-46,-47,-20,-21,-19,67,-25,-33,-36,67,67,67,-26,-34,-37,-28,-22,-30,-31,-23,-29,-24,-32,-35,67,67,-20,-19,67,67,67,67,67,67,]),'BREAK':([12,17,19,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,50,51,52,56,57,58,59,60,61,62,67,68,103,104,105,106,109,130,133,134,135,136,137,138,139,140,141,142,143,144,146,149,162,163,165,167,169,173,177,181,182,183,186,188,189,190,196,197,200,201,202,203,205,206,207,208,209,210,213,214,215,216,218,219,220,223,225,226,229,233,235,],[68,-12,-11,-60,-61,-63,-65,-67,-71,-72,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,68,-18,-19,68,-27,-38,-39,-40,-41,-42,-96,-97,-82,-84,-85,-86,-45,-95,-13,-62,-64,-66,-68,-69,-70,-73,-75,-77,-79,-81,-48,-98,-43,-44,-49,68,68,-46,-47,-20,-21,-19,68,-25,-33,-36,68,68,68,-26,-34,-37,-28,-22,-30,-31,-23,-29,-24,-32,-35,68,68,-20,-19,68,68,68,68,68,68,]),'COMMA':([15,17,19,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,121,132,133,134,135,136,137,138,139,140,141,142,143,144,146,148,149,159,165,176,178,],[70,-12,-11,-60,-61,-63,-65,-67,-71,-72,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,-82,-84,-85,-86,-53,-9,-13,-62,-64,-66,-68,-69,-70,-73,-75,-77,-79,-81,-48,166,-98,175,-49,-52,-10,]),'MENOR':([17,19,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,138,139,140,141,142,143,144,146,149,165,],[-12,-11,84,-71,-72,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,-82,-84,-85,-86,-13,-69,-70,-73,-75,-77,-79,-81,-48,-98,-49,]),'MAIOR':([17,19,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,138,139,140,141,142,143,144,146,149,165,],[-12,-11,85,-71,-72,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,-82,-84,-85,-86,-13,-69,-70,-73,-75,-77,-79,-81,-48,-98,-49,]),'MENORIGUAL':([17,19,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,138,139,140,141,142,143,144,146,149,165,],[-12,-11,86,-71,-72,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,-82,-84,-85,-86,-13,-69,-70,-73,-75,-77,-79,-81,-48,-98,-49,]),'MAIORIGUAL':([17,19,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,138,139,140,141,142,143,144,146,149,165,],[-12,-11,87,-71,-72,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,-82,-84,-85,-86,-13,-69,-70,-73,-75,-77,-79,-81,-48,-98,-49,]),'IN':([17,19,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,118,119,121,133,137,138,139,140,141,142,143,144,146,149,151,158,165,174,176,211,230,],[-12,-11,88,-71,-72,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,-82,-84,-85,-86,-50,-51,-53,-13,88,-69,-70,-73,-75,-77,-79,-81,-48,-98,168,-57,-49,-56,-52,217,232,]),'NOT_IN':([17,19,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,137,138,139,140,141,142,143,144,146,149,165,],[-12,-11,89,-71,-72,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,-82,-84,-85,-86,-13,89,-69,-70,-73,-75,-77,-79,-81,-48,-98,-49,]),'IS':([17,19,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,137,138,139,140,141,142,143,144,146,149,165,],[-12,-11,90,-71,-72,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,-82,-84,-85,-86,-13,90,-69,-70,-73,-75,-77,-79,-81,-48,-98,-49,]),'NOT_IS':([17,19,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,137,138,139,140,141,142,143,144,146,149,165,],[-12,-11,91,-71,-72,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,-82,-84,-85,-86,-13,91,-69,-70,-73,-75,-77,-79,-81,-48,-98,-49,]),'DIFERENTE':([17,19,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,135,136,137,138,139,140,141,142,143,144,146,149,165,],[-12,-11,77,-65,-67,-71,-72,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,-82,-84,-85,-86,-13,77,-66,-68,-69,-70,-73,-75,-77,-79,-81,-48,-98,-49,]),'IDENTIDADE':([17,19,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,135,136,137,138,139,140,141,142,143,144,146,149,165,],[-12,-11,78,-65,-67,-71,-72,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,-82,-84,-85,-86,-13,78,-66,-68,-69,-70,-73,-75,-77,-79,-81,-48,-98,-49,]),'IGUALDADE':([17,19,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,135,136,137,138,139,140,141,142,143,144,146,149,165,],[-12,-11,79,-65,-67,-71,-72,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,-82,-84,-85,-86,-13,79,-66,-68,-69,-70,-73,-75,-77,-79,-81,-48,-98,-49,]),'SEMIDENTIDADE':([17,19,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,135,136,137,138,139,140,141,142,143,144,146,149,165,],[-12,-11,80,-65,-67,-71,-72,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,-82,-84,-85,-86,-13,80,-66,-68,-69,-70,-73,-75,-77,-79,-81,-48,-98,-49,]),'AND':([17,19,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,134,135,136,137,138,139,140,141,142,143,144,146,149,165,],[-12,-11,75,-63,-65,-67,-71,-72,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,-82,-84,-85,-86,-13,75,-64,-66,-68,-69,-70,-73,-75,-77,-79,-81,-48,-98,-49,]),'OR':([17,19,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,134,135,136,137,138,139,140,141,142,143,144,146,149,165,],[-12,-11,74,-61,-63,-65,-67,-71,-72,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,-82,-84,-85,-86,-13,-62,-64,-66,-68,-69,-70,-73,-75,-77,-79,-81,-48,-98,-49,]),'RCHAVE':([17,19,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,49,50,51,52,57,58,59,60,61,62,67,68,103,104,105,106,109,110,130,133,134,135,136,137,138,139,140,141,142,143,144,146,149,162,163,165,173,177,181,182,183,188,189,190,201,202,203,205,206,207,208,209,210,213,214,215,219,220,],[-12,-11,-60,-61,-63,-65,-67,-71,-72,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,109,-16,-18,-19,-27,-38,-39,-40,-41,-42,-96,-97,-82,-84,-85,-86,-45,-17,-95,-13,-62,-64,-66,-68,-69,-70,-73,-75,-77,-79,-81,-48,-98,-43,-44,-49,-46,-47,-20,-21,-19,-25,-33,-36,-26,-34,-37,-28,-22,-30,-31,-23,-29,-24,-32,-35,-20,-19,]),'ELSE':([17,19,22,23,24,25,26,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,57,58,59,60,61,62,67,68,103,104,105,106,109,130,133,134,135,136,137,138,139,140,141,142,143,144,146,149,162,163,165,173,177,181,183,189,190,202,203,205,207,208,210,214,215,219,220,],[-12,-11,-60,-61,-63,-65,-67,-71,-72,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,-27,-38,-39,-40,-41,-42,-96,-97,-82,-84,-85,-86,-45,-95,-13,-62,-64,-66,-68,-69,-70,-73,-75,-77,-79,-81,-48,-98,-43,-44,-49,-46,-47,196,197,-33,-36,-34,-37,-28,-30,-31,-29,-32,-35,225,226,]),'MULT':([17,19,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,142,143,144,146,149,165,],[-12,-11,98,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,-82,-84,-85,-86,-13,98,-79,-81,-48,-98,-49,]),'DIVIDE':([17,19,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,142,143,144,146,149,165,],[-12,-11,99,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,-82,-84,-85,-86,-13,99,-79,-81,-48,-98,-49,]),'MOD':([17,19,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,142,143,144,146,149,165,],[-12,-11,100,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,-82,-84,-85,-86,-13,100,-79,-81,-48,-98,-49,]),'PONTOPONTO':([17,19,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,140,141,142,143,144,146,149,165,],[-12,-11,93,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,-82,-84,-85,-86,-13,93,-75,-77,-79,-81,-48,-98,-49,]),'ELVIS':([17,19,27,28,29,30,31,32,34,40,41,42,43,44,45,46,47,103,104,105,106,133,138,140,141,142,143,144,146,149,165,],[-12,-11,92,-72,-74,-76,-78,-80,-83,-87,-88,-89,-90,-91,-92,-93,-94,-82,-84,-85,-86,-13,92,-73,-75,-77,-79,-81,-48,-98,-49,]),'AS':([32,34,40,41,42,43,44,45,46,47,102,103,104,105,106,146,149,165,],[102,-83,-87,-88,-89,-90,-91,-92,-93,-94,102,-82,-84,-85,-86,-48,-98,-49,]),'MAISIGUAL':([65,],[125,]),'MENOSIGUAL':([65,],[126,]),'MULTIGUAL':([65,],[127,]),'DIVIGUAL':([65,],[128,]),'MODIGUAL':([65,],[129,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'kotlinFile':([0,2,],[1,4,]),'functionDeclaration':([0,2,],[2,2,]),'functionValueParameters':([5,],[6,]),'functionBody':([6,18,],[8,72,]),'block':([6,18,56,167,169,186,196,197,200,216,218,223,225,226,229,233,235,],[10,10,116,181,190,116,205,210,215,219,190,116,205,210,215,190,215,]),'parameters':([7,70,],[13,131,]),'parameter':([7,70,],[15,15,]),'type':([9,20,71,83,101,160,],[18,73,132,139,144,176,]),'parenthesizedType':([9,20,71,83,101,160,],[19,19,19,19,19,19,]),'expression':([11,48,66,111,113,123,124,156,161,164,168,170,171,172,195,199,217,228,232,],[21,108,130,150,152,162,163,173,177,178,187,191,192,193,204,212,224,231,234,]),'disjunction':([11,48,66,111,113,123,124,156,161,164,168,170,171,172,195,199,217,228,232,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'conjunction':([11,48,66,74,111,113,123,124,156,161,164,168,170,171,172,195,199,217,228,232,],[23,23,23,134,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'equality':([11,48,66,74,75,111,113,123,124,156,161,164,168,170,171,172,195,199,217,228,232,],[24,24,24,24,135,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'comparison':([11,48,66,74,75,76,111,113,123,124,156,161,164,168,170,171,172,195,199,217,228,232,],[25,25,25,25,25,136,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'infixOperation':([11,48,66,74,75,76,81,111,113,123,124,156,161,164,168,170,171,172,195,199,217,228,232,],[26,26,26,26,26,26,137,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'elvisExpression':([11,48,66,74,75,76,81,82,111,113,123,124,156,161,164,168,170,171,172,195,199,217,228,232,],[27,27,27,27,27,27,27,138,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'rangeExpression':([11,48,66,74,75,76,81,82,92,111,113,123,124,156,161,164,168,170,171,172,195,199,217,228,232,],[28,28,28,28,28,28,28,28,140,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'additiveExpression':([11,48,66,74,75,76,81,82,92,93,111,113,123,124,156,161,164,168,170,171,172,195,199,217,228,232,],[29,29,29,29,29,29,29,29,29,141,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'multiplicativeExpression':([11,48,66,74,75,76,81,82,92,93,94,111,113,123,124,156,161,164,168,170,171,172,195,199,217,228,232,],[30,30,30,30,30,30,30,30,30,30,142,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'asExpression':([11,48,66,74,75,76,81,82,92,93,94,97,111,113,123,124,156,161,164,168,170,171,172,195,199,217,228,232,],[31,31,31,31,31,31,31,31,31,31,31,143,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'unaryExpression':([11,48,66,74,75,76,81,82,92,93,94,97,111,113,123,124,156,161,164,168,170,171,172,195,199,217,228,232,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'unaryOperator':([11,48,66,74,75,76,81,82,92,93,94,97,111,113,123,124,156,161,164,168,170,171,172,195,199,217,228,232,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'primaryExpression':([11,33,48,66,74,75,76,81,82,92,93,94,97,107,111,113,123,124,156,161,164,166,168,170,171,172,195,199,217,228,232,],[34,103,34,34,34,34,34,34,34,34,34,34,34,148,34,34,34,34,34,34,34,148,34,34,34,34,34,34,34,34,34,]),'chamadaDeFuncao':([11,12,33,48,50,56,66,74,75,76,81,82,92,93,94,97,107,111,113,123,124,156,161,164,166,167,168,169,170,171,172,186,195,196,197,199,200,216,217,218,223,225,226,228,229,232,233,235,],[41,61,41,41,61,61,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,61,41,61,41,41,41,61,41,61,61,41,61,61,41,61,61,61,61,41,61,41,61,61,]),'parenthesizedExpression':([11,33,48,66,74,75,76,81,82,92,93,94,97,107,111,113,123,124,156,161,164,166,168,170,171,172,195,199,217,228,232,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'statements':([12,50,],[49,110,]),'statement':([12,50,167,216,],[50,50,182,182,]),'open_statement':([12,50,56,167,169,186,196,197,200,216,218,223,225,226,229,233,235,],[51,51,114,51,188,114,206,209,213,51,188,114,206,209,213,188,213,]),'closed_statement':([12,50,56,167,169,186,196,197,200,216,218,223,225,226,229,233,235,],[52,52,115,183,189,115,207,208,214,220,189,115,207,208,214,189,214,]),'non_if_statement_block':([12,50,56,167,169,186,196,197,200,216,218,223,225,226,229,233,235,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'propertyDeclarationStm':([12,50,56,167,169,186,196,197,200,216,218,223,225,226,229,233,235,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'assignment':([12,50,56,167,169,186,196,197,200,216,218,223,225,226,229,233,235,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'jumpExpression':([12,50,56,167,169,186,196,197,200,216,218,223,225,226,229,233,235,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'equalityOperator':([24,135,],[76,76,]),'comparisonOperator':([26,],[81,]),'inOperator':([26,137,],[82,82,]),'isOperator':([26,137,],[83,83,]),'additiveOperator':([29,141,],[94,94,]),'multiplicativeOperator':([30,142,],[97,97,]),'asOperator':([32,102,],[101,145,]),'postfixUnaryOperator':([34,],[104,]),'genericVariableDeclaration':([63,64,112,198,227,],[117,122,151,211,230,]),'multiVariableDeclaration':([63,64,112,198,227,],[118,118,118,118,118,]),'variableDeclaration':([63,64,112,120,175,198,227,],[119,119,119,159,159,119,119,]),'assignmentAndOperator':([65,],[124,]),'parametersFunction':([107,166,],[147,179,]),'variableDeclarations':([120,175,],[157,194,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> kotlinFile","S'",1,None,None,None),
  ('kotlinFile -> functionDeclaration kotlinFile','kotlinFile',2,'p_kotlinFile','gramatica.py',12),
  ('kotlinFile -> functionDeclaration','kotlinFile',1,'p_kotlinFile','gramatica.py',13),
  ('functionDeclaration -> FUN ID functionValueParameters functionBody','functionDeclaration',4,'p_functionDeclaration','gramatica.py',21),
  ('functionDeclaration -> FUN ID functionValueParameters DOISP type functionBody','functionDeclaration',6,'p_functionDeclaration','gramatica.py',22),
  ('functionValueParameters -> LPAREN parameters RPAREN','functionValueParameters',3,'p_functionValueParameters','gramatica.py',30),
  ('functionValueParameters -> LPAREN RPAREN','functionValueParameters',2,'p_functionValueParameters','gramatica.py',31),
  ('parameters -> parameter','parameters',1,'p_parameters','gramatica.py',38),
  ('parameters -> parameter COMMA parameters','parameters',3,'p_parameters','gramatica.py',39),
  ('parameter -> ID DOISP type','parameter',3,'p_parameter','gramatica.py',47),
  ('parameter -> ID DOISP type ATRIBUICAO expression','parameter',5,'p_parameter','gramatica.py',48),
  ('type -> parenthesizedType','type',1,'p_type','gramatica.py',52),
  ('type -> ID','type',1,'p_type','gramatica.py',53),
  ('parenthesizedType -> LPAREN type RPAREN','parenthesizedType',3,'p_parenthesizedType','gramatica.py',59),
  ('functionBody -> block','functionBody',1,'p_functionBody','gramatica.py',64),
  ('functionBody -> ATRIBUICAO expression','functionBody',2,'p_functionBody','gramatica.py',65),
  ('statements -> statement','statements',1,'p_statements','gramatica.py',73),
  ('statements -> statement statements','statements',2,'p_statements','gramatica.py',74),
  ('statement -> open_statement','statement',1,'p_statement','gramatica.py',82),
  ('statement -> closed_statement','statement',1,'p_statement','gramatica.py',83),
  ('open_statement -> IF LPAREN expression RPAREN block','open_statement',5,'p_open_statement','gramatica.py',89),
  ('open_statement -> IF LPAREN expression RPAREN statement','open_statement',5,'p_open_statement','gramatica.py',90),
  ('open_statement -> IF LPAREN expression RPAREN block ELSE open_statement','open_statement',7,'p_open_statement','gramatica.py',91),
  ('open_statement -> IF LPAREN expression RPAREN closed_statement ELSE open_statement','open_statement',7,'p_open_statement','gramatica.py',92),
  ('open_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement','open_statement',7,'p_open_statement','gramatica.py',93),
  ('open_statement -> WHILE LPAREN expression RPAREN open_statement','open_statement',5,'p_open_statement','gramatica.py',94),
  ('open_statement -> DO open_statement WHILE LPAREN expression RPAREN','open_statement',6,'p_open_statement','gramatica.py',95),
  ('closed_statement -> non_if_statement_block','closed_statement',1,'p_closed_statement','gramatica.py',100),
  ('closed_statement -> IF LPAREN expression RPAREN block ELSE block','closed_statement',7,'p_closed_statement','gramatica.py',101),
  ('closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE block','closed_statement',7,'p_closed_statement','gramatica.py',102),
  ('closed_statement -> IF LPAREN expression RPAREN block ELSE closed_statement','closed_statement',7,'p_closed_statement','gramatica.py',103),
  ('closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE closed_statement','closed_statement',7,'p_closed_statement','gramatica.py',104),
  ('closed_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement','closed_statement',7,'p_closed_statement','gramatica.py',105),
  ('closed_statement -> WHILE LPAREN expression RPAREN closed_statement','closed_statement',5,'p_closed_statement','gramatica.py',106),
  ('closed_statement -> DO closed_statement WHILE LPAREN expression RPAREN','closed_statement',6,'p_closed_statement','gramatica.py',107),
  ('non_if_statement_block -> FOR LPAREN genericVariableDeclaration IN expression RPAREN block','non_if_statement_block',7,'p_non_if_statement','gramatica.py',111),
  ('non_if_statement_block -> WHILE LPAREN expression RPAREN block','non_if_statement_block',5,'p_non_if_statement','gramatica.py',112),
  ('non_if_statement_block -> DO block WHILE LPAREN expression RPAREN','non_if_statement_block',6,'p_non_if_statement','gramatica.py',113),
  ('non_if_statement_block -> PV','non_if_statement_block',1,'p_non_if_statement','gramatica.py',114),
  ('non_if_statement_block -> propertyDeclarationStm','non_if_statement_block',1,'p_non_if_statement','gramatica.py',115),
  ('non_if_statement_block -> assignment','non_if_statement_block',1,'p_non_if_statement','gramatica.py',116),
  ('non_if_statement_block -> chamadaDeFuncao','non_if_statement_block',1,'p_non_if_statement','gramatica.py',117),
  ('non_if_statement_block -> jumpExpression','non_if_statement_block',1,'p_non_if_statement','gramatica.py',118),
  ('assignment -> ID ATRIBUICAO expression','assignment',3,'p_assignment','gramatica.py',122),
  ('assignment -> ID assignmentAndOperator expression','assignment',3,'p_assignment','gramatica.py',123),
  ('block -> LCHAVE statements RCHAVE','block',3,'p_block','gramatica.py',130),
  ('propertyDeclarationStm -> VAR genericVariableDeclaration ATRIBUICAO expression','propertyDeclarationStm',4,'p_propertyDeclarationStm','gramatica.py',134),
  ('propertyDeclarationStm -> VAL genericVariableDeclaration ATRIBUICAO expression','propertyDeclarationStm',4,'p_propertyDeclarationStm','gramatica.py',135),
  ('chamadaDeFuncao -> ID LPAREN RPAREN','chamadaDeFuncao',3,'p_chamadaDeFuncao','gramatica.py',143),
  ('chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN','chamadaDeFuncao',4,'p_chamadaDeFuncao','gramatica.py',144),
  ('genericVariableDeclaration -> multiVariableDeclaration','genericVariableDeclaration',1,'p_genericVariableDeclaration','gramatica.py',151),
  ('genericVariableDeclaration -> variableDeclaration','genericVariableDeclaration',1,'p_genericVariableDeclaration','gramatica.py',152),
  ('variableDeclaration -> ID DOISP type','variableDeclaration',3,'p_variableDeclaration','gramatica.py',159),
  ('variableDeclaration -> ID','variableDeclaration',1,'p_variableDeclaration','gramatica.py',160),
  ('variableDeclarations -> variableDeclaration','variableDeclarations',1,'p_variableDeclarations','gramatica.py',167),
  ('variableDeclarations -> variableDeclaration COMMA variableDeclarations','variableDeclarations',3,'p_variableDeclarations','gramatica.py',168),
  ('multiVariableDeclaration -> LPAREN variableDeclarations RPAREN','multiVariableDeclaration',3,'p_multiVariableDeclaration','gramatica.py',175),
  ('multiVariableDeclaration -> LPAREN RPAREN','multiVariableDeclaration',2,'p_multiVariableDeclaration','gramatica.py',176),
  ('parametersFunction -> primaryExpression','parametersFunction',1,'p_parametersFunction','gramatica.py',183),
  ('parametersFunction -> primaryExpression COMMA parametersFunction','parametersFunction',3,'p_parametersFunction','gramatica.py',184),
  ('expression -> disjunction','expression',1,'p_expression','gramatica.py',192),
  ('disjunction -> conjunction','disjunction',1,'p_disjunction','gramatica.py',197),
  ('disjunction -> disjunction OR conjunction','disjunction',3,'p_disjunction','gramatica.py',198),
  ('conjunction -> equality','conjunction',1,'p_conjunction','gramatica.py',206),
  ('conjunction -> conjunction AND equality','conjunction',3,'p_conjunction','gramatica.py',207),
  ('equality -> comparison','equality',1,'p_equality','gramatica.py',215),
  ('equality -> equality equalityOperator comparison','equality',3,'p_equality','gramatica.py',216),
  ('comparison -> infixOperation','comparison',1,'p_comparison','gramatica.py',224),
  ('comparison -> infixOperation comparisonOperator infixOperation','comparison',3,'p_comparison','gramatica.py',225),
  ('infixOperation -> infixOperation inOperator elvisExpression','infixOperation',3,'p_infixOperation','gramatica.py',233),
  ('infixOperation -> infixOperation isOperator type','infixOperation',3,'p_infixOperation','gramatica.py',234),
  ('infixOperation -> elvisExpression','infixOperation',1,'p_infixOperation','gramatica.py',235),
  ('elvisExpression -> rangeExpression','elvisExpression',1,'p_elvisExpression','gramatica.py',242),
  ('elvisExpression -> elvisExpression ELVIS rangeExpression','elvisExpression',3,'p_elvisExpression','gramatica.py',243),
  ('rangeExpression -> additiveExpression','rangeExpression',1,'p_rangeExpression','gramatica.py',250),
  ('rangeExpression -> rangeExpression PONTOPONTO additiveExpression','rangeExpression',3,'p_rangeExpression','gramatica.py',251),
  ('additiveExpression -> multiplicativeExpression','additiveExpression',1,'p_additiveExpression','gramatica.py',259),
  ('additiveExpression -> additiveExpression additiveOperator multiplicativeExpression','additiveExpression',3,'p_additiveExpression','gramatica.py',260),
  ('multiplicativeExpression -> asExpression','multiplicativeExpression',1,'p_multiplicativeExpression','gramatica.py',268),
  ('multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression','multiplicativeExpression',3,'p_multiplicativeExpression','gramatica.py',269),
  ('asExpression -> unaryExpression','asExpression',1,'p_asExpression','gramatica.py',277),
  ('asExpression -> unaryExpression asOperator type','asExpression',3,'p_asExpression','gramatica.py',278),
  ('unaryExpression -> unaryOperator primaryExpression','unaryExpression',2,'p_unaryExpression','gramatica.py',286),
  ('unaryExpression -> primaryExpression','unaryExpression',1,'p_unaryExpression','gramatica.py',287),
  ('unaryExpression -> primaryExpression postfixUnaryOperator','unaryExpression',2,'p_unaryExpression','gramatica.py',288),
  ('postfixUnaryOperator -> INCREMENTO','postfixUnaryOperator',1,'p_postfixUnaryOperator','gramatica.py',296),
  ('postfixUnaryOperator -> DECREMENTO','postfixUnaryOperator',1,'p_postfixUnaryOperator','gramatica.py',297),
  ('primaryExpression -> NULL','primaryExpression',1,'p_primaryExpression','gramatica.py',305),
  ('primaryExpression -> chamadaDeFuncao','primaryExpression',1,'p_primaryExpression','gramatica.py',306),
  ('primaryExpression -> TRUE','primaryExpression',1,'p_primaryExpression','gramatica.py',307),
  ('primaryExpression -> FALSE','primaryExpression',1,'p_primaryExpression','gramatica.py',308),
  ('primaryExpression -> NUMBER','primaryExpression',1,'p_primaryExpression','gramatica.py',309),
  ('primaryExpression -> LITERAL_STRING','primaryExpression',1,'p_primaryExpression','gramatica.py',310),
  ('primaryExpression -> ID','primaryExpression',1,'p_primaryExpression','gramatica.py',311),
  ('primaryExpression -> parenthesizedExpression','primaryExpression',1,'p_primaryExpression','gramatica.py',312),
  ('jumpExpression -> RETURN expression','jumpExpression',2,'p_jumpExpression','gramatica.py',319),
  ('jumpExpression -> CONTINUE','jumpExpression',1,'p_jumpExpression','gramatica.py',320),
  ('jumpExpression -> BREAK','jumpExpression',1,'p_jumpExpression','gramatica.py',321),
  ('parenthesizedExpression -> LPAREN expression RPAREN','parenthesizedExpression',3,'p_parenthesizedExpression','gramatica.py',325),
  ('assignmentAndOperator -> MAISIGUAL','assignmentAndOperator',1,'p_assignmentAndOperator','gramatica.py',331),
  ('assignmentAndOperator -> MENOSIGUAL','assignmentAndOperator',1,'p_assignmentAndOperator','gramatica.py',332),
  ('assignmentAndOperator -> MULTIGUAL','assignmentAndOperator',1,'p_assignmentAndOperator','gramatica.py',333),
  ('assignmentAndOperator -> DIVIGUAL','assignmentAndOperator',1,'p_assignmentAndOperator','gramatica.py',334),
  ('assignmentAndOperator -> MODIGUAL','assignmentAndOperator',1,'p_assignmentAndOperator','gramatica.py',335),
  ('equalityOperator -> DIFERENTE','equalityOperator',1,'p_equalityOperator','gramatica.py',349),
  ('equalityOperator -> IDENTIDADE','equalityOperator',1,'p_equalityOperator','gramatica.py',350),
  ('equalityOperator -> IGUALDADE','equalityOperator',1,'p_equalityOperator','gramatica.py',351),
  ('equalityOperator -> SEMIDENTIDADE','equalityOperator',1,'p_equalityOperator','gramatica.py',352),
  ('comparisonOperator -> MENOR','comparisonOperator',1,'p_comparisonOperator','gramatica.py',364),
  ('comparisonOperator -> MAIOR','comparisonOperator',1,'p_comparisonOperator','gramatica.py',365),
  ('comparisonOperator -> MENORIGUAL','comparisonOperator',1,'p_comparisonOperator','gramatica.py',366),
  ('comparisonOperator -> MAIORIGUAL','comparisonOperator',1,'p_comparisonOperator','gramatica.py',367),
  ('inOperator -> IN','inOperator',1,'p_inOperator','gramatica.py',380),
  ('inOperator -> NOT_IN','inOperator',1,'p_inOperator','gramatica.py',381),
  ('isOperator -> IS','isOperator',1,'p_isOperator','gramatica.py',389),
  ('isOperator -> NOT_IS','isOperator',1,'p_isOperator','gramatica.py',390),
  ('additiveOperator -> PLUS','additiveOperator',1,'p_additiveOperator','gramatica.py',398),
  ('additiveOperator -> MINUS','additiveOperator',1,'p_additiveOperator','gramatica.py',399),
  ('multiplicativeOperator -> MULT','multiplicativeOperator',1,'p_multiplicativeOperator','gramatica.py',407),
  ('multiplicativeOperator -> DIVIDE','multiplicativeOperator',1,'p_multiplicativeOperator','gramatica.py',408),
  ('multiplicativeOperator -> MOD','multiplicativeOperator',1,'p_multiplicativeOperator','gramatica.py',409),
  ('asOperator -> AS','asOperator',1,'p_asOperator','gramatica.py',419),
  ('asOperator -> AS asOperator','asOperator',2,'p_asOperator','gramatica.py',420),
  ('unaryOperator -> INCREMENTO','unaryOperator',1,'p_unaryOperator','gramatica.py',428),
  ('unaryOperator -> DECREMENTO','unaryOperator',1,'p_unaryOperator','gramatica.py',429),
  ('unaryOperator -> MINUS','unaryOperator',1,'p_unaryOperator','gramatica.py',430),
  ('unaryOperator -> PLUS','unaryOperator',1,'p_unaryOperator','gramatica.py',431),
  ('unaryOperator -> NOT','unaryOperator',1,'p_unaryOperator','gramatica.py',432),
]
