Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> kotlinFile
Rule 1     kotlinFile -> functionDeclaration kotlinFile
Rule 2     kotlinFile -> functionDeclaration
Rule 3     functionDeclaration -> FUN ID functionValueParameters functionBody
Rule 4     functionDeclaration -> FUN ID functionValueParameters DOISP type functionBody
Rule 5     functionValueParameters -> LPAREN parameters RPAREN
Rule 6     functionValueParameters -> LPAREN RPAREN
Rule 7     parameters -> parameter
Rule 8     parameters -> parameter COMMA parameters
Rule 9     parameter -> ID DOISP type
Rule 10    type -> parenthesizedType
Rule 11    type -> ID
Rule 12    parenthesizedType -> LPAREN type RPAREN
Rule 13    functionBody -> block
Rule 14    functionBody -> ATRIBUICAO expression
Rule 15    statements -> statement
Rule 16    statements -> statement statements
Rule 17    statement -> open_statement
Rule 18    statement -> closed_statement
Rule 19    open_statement -> IF LPAREN expression RPAREN block
Rule 20    open_statement -> IF LPAREN expression RPAREN statement
Rule 21    open_statement -> IF LPAREN expression RPAREN block ELSE open_statement
Rule 22    open_statement -> IF LPAREN expression RPAREN closed_statement ELSE open_statement
Rule 23    open_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement
Rule 24    open_statement -> WHILE LPAREN expression RPAREN open_statement
Rule 25    open_statement -> DO open_statement WHILE LPAREN expression RPAREN
Rule 26    closed_statement -> non_if_statement_block
Rule 27    closed_statement -> IF LPAREN expression RPAREN block ELSE block
Rule 28    closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE block
Rule 29    closed_statement -> IF LPAREN expression RPAREN block ELSE closed_statement
Rule 30    closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE closed_statement
Rule 31    closed_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement
Rule 32    closed_statement -> WHILE LPAREN expression RPAREN closed_statement
Rule 33    closed_statement -> DO closed_statement WHILE LPAREN expression RPAREN
Rule 34    non_if_statement_block -> FOR LPAREN genericVariableDeclaration IN expression RPAREN block
Rule 35    non_if_statement_block -> WHILE LPAREN expression RPAREN block
Rule 36    non_if_statement_block -> DO block WHILE LPAREN expression RPAREN
Rule 37    non_if_statement_block -> PV
Rule 38    non_if_statement_block -> propertyDeclarationStm
Rule 39    non_if_statement_block -> assignment
Rule 40    non_if_statement_block -> chamadaDeFuncao
Rule 41    non_if_statement_block -> jumpExpression
Rule 42    assignment -> ID ATRIBUICAO expression
Rule 43    assignment -> ID assignmentAndOperator expression
Rule 44    block -> LCHAVE statements RCHAVE
Rule 45    propertyDeclarationStm -> VAR genericVariableDeclaration ATRIBUICAO expression
Rule 46    propertyDeclarationStm -> VAL genericVariableDeclaration ATRIBUICAO expression
Rule 47    chamadaDeFuncao -> ID LPAREN RPAREN
Rule 48    chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN
Rule 49    genericVariableDeclaration -> multiVariableDeclaration
Rule 50    genericVariableDeclaration -> variableDeclaration
Rule 51    variableDeclaration -> ID DOISP type
Rule 52    variableDeclaration -> ID
Rule 53    variableDeclarations -> variableDeclaration
Rule 54    variableDeclarations -> variableDeclaration COMMA variableDeclarations
Rule 55    multiVariableDeclaration -> LPAREN variableDeclarations RPAREN
Rule 56    multiVariableDeclaration -> LPAREN RPAREN
Rule 57    parametersFunction -> primaryExpression
Rule 58    parametersFunction -> primaryExpression COMMA parametersFunction
Rule 59    expression -> disjunction
Rule 60    disjunction -> conjunction
Rule 61    disjunction -> disjunction OR conjunction
Rule 62    conjunction -> equality
Rule 63    conjunction -> conjunction AND equality
Rule 64    equality -> comparison
Rule 65    equality -> equality equalityOperator comparison
Rule 66    comparison -> infixOperation
Rule 67    comparison -> infixOperation comparisonOperator infixOperation
Rule 68    infixOperation -> infixOperation inOperator elvisExpression
Rule 69    infixOperation -> infixOperation isOperator type
Rule 70    infixOperation -> elvisExpression
Rule 71    elvisExpression -> rangeExpression
Rule 72    elvisExpression -> elvisExpression ELVIS rangeExpression
Rule 73    rangeExpression -> additiveExpression
Rule 74    rangeExpression -> rangeExpression PONTOPONTO additiveExpression
Rule 75    additiveExpression -> multiplicativeExpression
Rule 76    additiveExpression -> additiveExpression additiveOperator multiplicativeExpression
Rule 77    multiplicativeExpression -> asExpression
Rule 78    multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression
Rule 79    asExpression -> unaryExpression
Rule 80    asExpression -> unaryExpression asOperator type
Rule 81    unaryExpression -> unaryOperator primaryExpression
Rule 82    unaryExpression -> primaryExpression
Rule 83    unaryExpression -> primaryExpression postfixUnaryOperator
Rule 84    postfixUnaryOperator -> INCREMENTO
Rule 85    postfixUnaryOperator -> DECREMENTO
Rule 86    primaryExpression -> NULL
Rule 87    primaryExpression -> TRUE
Rule 88    primaryExpression -> FALSE
Rule 89    primaryExpression -> NUMBER
Rule 90    primaryExpression -> LITERAL_STRING
Rule 91    primaryExpression -> ID
Rule 92    primaryExpression -> chamadaDeFuncao
Rule 93    primaryExpression -> parenthesizedExpression
Rule 94    jumpExpression -> RETURN expression
Rule 95    jumpExpression -> CONTINUE
Rule 96    jumpExpression -> BREAK
Rule 97    parenthesizedExpression -> LPAREN expression RPAREN
Rule 98    assignmentAndOperator -> MAISIGUAL
Rule 99    assignmentAndOperator -> MENOSIGUAL
Rule 100   assignmentAndOperator -> MULTIGUAL
Rule 101   assignmentAndOperator -> DIVIGUAL
Rule 102   assignmentAndOperator -> MODIGUAL
Rule 103   equalityOperator -> DIFERENTE
Rule 104   equalityOperator -> IDENTIDADE
Rule 105   equalityOperator -> IGUALDADE
Rule 106   equalityOperator -> SEMIDENTIDADE
Rule 107   comparisonOperator -> MENOR
Rule 108   comparisonOperator -> MAIOR
Rule 109   comparisonOperator -> MENORIGUAL
Rule 110   comparisonOperator -> MAIORIGUAL
Rule 111   inOperator -> IN
Rule 112   inOperator -> NOT_IN
Rule 113   isOperator -> IS
Rule 114   isOperator -> NOT_IS
Rule 115   additiveOperator -> PLUS
Rule 116   additiveOperator -> MINUS
Rule 117   multiplicativeOperator -> MULT
Rule 118   multiplicativeOperator -> DIVIDE
Rule 119   multiplicativeOperator -> MOD
Rule 120   asOperator -> AS
Rule 121   asOperator -> AS asOperator
Rule 122   unaryOperator -> INCREMENTO
Rule 123   unaryOperator -> DECREMENTO
Rule 124   unaryOperator -> MINUS
Rule 125   unaryOperator -> PLUS
Rule 126   unaryOperator -> NOT

Terminals, with rules where they appear

AND                  : 63
AS                   : 120 121
ATRIBUICAO           : 14 42 45 46
BREAK                : 96
COMMA                : 8 54 58
CONTINUE             : 95
DECREMENTO           : 85 123
DIFERENTE            : 103
DIVIDE               : 118
DIVIGUAL             : 101
DO                   : 25 33 36
DOISP                : 4 9 51
ELSE                 : 21 22 27 28 29 30
ELVIS                : 72
FALSE                : 88
FOR                  : 23 31 34
FUN                  : 3 4
ID                   : 3 4 9 11 42 43 47 48 51 52 91
IDENTIDADE           : 104
IF                   : 19 20 21 22 27 28 29 30
IGUALDADE            : 105
IN                   : 23 31 34 111
INCREMENTO           : 84 122
IS                   : 113
LCHAVE               : 44
LITERAL_STRING       : 90
LPAREN               : 5 6 12 19 20 21 22 23 24 25 27 28 29 30 31 32 33 34 35 36 47 48 55 56 97
MAIOR                : 108
MAIORIGUAL           : 110
MAISIGUAL            : 98
MENOR                : 107
MENORIGUAL           : 109
MENOSIGUAL           : 99
MINUS                : 116 124
MOD                  : 119
MODIGUAL             : 102
MULT                 : 117
MULTIGUAL            : 100
NOT                  : 126
NOT_IN               : 112
NOT_IS               : 114
NULL                 : 86
NUMBER               : 89
OR                   : 61
PLUS                 : 115 125
PONTOPONTO           : 74
PV                   : 37
RCHAVE               : 44
RETURN               : 94
RPAREN               : 5 6 12 19 20 21 22 23 24 25 27 28 29 30 31 32 33 34 35 36 47 48 55 56 97
SEMIDENTIDADE        : 106
TRUE                 : 87
VAL                  : 46
VAR                  : 45
WHILE                : 24 25 32 33 35 36
error                : 

Nonterminals, with rules where they appear

additiveExpression   : 73 74 76
additiveOperator     : 76
asExpression         : 77 78
asOperator           : 80 121
assignment           : 39
assignmentAndOperator : 43
block                : 13 19 21 27 27 28 29 34 35 36
chamadaDeFuncao      : 40 92
closed_statement     : 18 22 28 29 30 30 31 32 33
comparison           : 64 65
comparisonOperator   : 67
conjunction          : 60 61 63
disjunction          : 59 61
elvisExpression      : 68 70 72
equality             : 62 63 65
equalityOperator     : 65
expression           : 14 19 20 21 22 23 24 25 27 28 29 30 31 32 33 34 35 36 42 43 45 46 94 97
functionBody         : 3 4
functionDeclaration  : 1 2
functionValueParameters : 3 4
genericVariableDeclaration : 23 31 34 45 46
inOperator           : 68
infixOperation       : 66 67 67 68 69
isOperator           : 69
jumpExpression       : 41
kotlinFile           : 1 0
multiVariableDeclaration : 49
multiplicativeExpression : 75 76 78
multiplicativeOperator : 78
non_if_statement_block : 26
open_statement       : 17 21 22 23 24 25
parameter            : 7 8
parameters           : 5 8
parametersFunction   : 48 58
parenthesizedExpression : 93
parenthesizedType    : 10
postfixUnaryOperator : 83
primaryExpression    : 57 58 81 82 83
propertyDeclarationStm : 38
rangeExpression      : 71 72 74
statement            : 15 16 20
statements           : 16 44
type                 : 4 9 12 51 69 80
unaryExpression      : 79 80
unaryOperator        : 81
variableDeclaration  : 50 53 54
variableDeclarations : 54 55

Parsing method: LALR

state 0

    (0) S' -> . kotlinFile
    (1) kotlinFile -> . functionDeclaration kotlinFile
    (2) kotlinFile -> . functionDeclaration
    (3) functionDeclaration -> . FUN ID functionValueParameters functionBody
    (4) functionDeclaration -> . FUN ID functionValueParameters DOISP type functionBody

    FUN             shift and go to state 3

    kotlinFile                     shift and go to state 1
    functionDeclaration            shift and go to state 2

state 1

    (0) S' -> kotlinFile .



state 2

    (1) kotlinFile -> functionDeclaration . kotlinFile
    (2) kotlinFile -> functionDeclaration .
    (1) kotlinFile -> . functionDeclaration kotlinFile
    (2) kotlinFile -> . functionDeclaration
    (3) functionDeclaration -> . FUN ID functionValueParameters functionBody
    (4) functionDeclaration -> . FUN ID functionValueParameters DOISP type functionBody

    $end            reduce using rule 2 (kotlinFile -> functionDeclaration .)
    FUN             shift and go to state 3

    functionDeclaration            shift and go to state 2
    kotlinFile                     shift and go to state 4

state 3

    (3) functionDeclaration -> FUN . ID functionValueParameters functionBody
    (4) functionDeclaration -> FUN . ID functionValueParameters DOISP type functionBody

    ID              shift and go to state 5


state 4

    (1) kotlinFile -> functionDeclaration kotlinFile .

    $end            reduce using rule 1 (kotlinFile -> functionDeclaration kotlinFile .)


state 5

    (3) functionDeclaration -> FUN ID . functionValueParameters functionBody
    (4) functionDeclaration -> FUN ID . functionValueParameters DOISP type functionBody
    (5) functionValueParameters -> . LPAREN parameters RPAREN
    (6) functionValueParameters -> . LPAREN RPAREN

    LPAREN          shift and go to state 7

    functionValueParameters        shift and go to state 6

state 6

    (3) functionDeclaration -> FUN ID functionValueParameters . functionBody
    (4) functionDeclaration -> FUN ID functionValueParameters . DOISP type functionBody
    (13) functionBody -> . block
    (14) functionBody -> . ATRIBUICAO expression
    (44) block -> . LCHAVE statements RCHAVE

    DOISP           shift and go to state 9
    ATRIBUICAO      shift and go to state 11
    LCHAVE          shift and go to state 12

    functionBody                   shift and go to state 8
    block                          shift and go to state 10

state 7

    (5) functionValueParameters -> LPAREN . parameters RPAREN
    (6) functionValueParameters -> LPAREN . RPAREN
    (7) parameters -> . parameter
    (8) parameters -> . parameter COMMA parameters
    (9) parameter -> . ID DOISP type

    RPAREN          shift and go to state 14
    ID              shift and go to state 16

    parameters                     shift and go to state 13
    parameter                      shift and go to state 15

state 8

    (3) functionDeclaration -> FUN ID functionValueParameters functionBody .

    FUN             reduce using rule 3 (functionDeclaration -> FUN ID functionValueParameters functionBody .)
    $end            reduce using rule 3 (functionDeclaration -> FUN ID functionValueParameters functionBody .)


state 9

    (4) functionDeclaration -> FUN ID functionValueParameters DOISP . type functionBody
    (10) type -> . parenthesizedType
    (11) type -> . ID
    (12) parenthesizedType -> . LPAREN type RPAREN

    ID              shift and go to state 17
    LPAREN          shift and go to state 20

    type                           shift and go to state 18
    parenthesizedType              shift and go to state 19

state 10

    (13) functionBody -> block .

    FUN             reduce using rule 13 (functionBody -> block .)
    $end            reduce using rule 13 (functionBody -> block .)


state 11

    (14) functionBody -> ATRIBUICAO . expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction
    (61) disjunction -> . disjunction OR conjunction
    (62) conjunction -> . equality
    (63) conjunction -> . conjunction AND equality
    (64) equality -> . comparison
    (65) equality -> . equality equalityOperator comparison
    (66) comparison -> . infixOperation
    (67) comparison -> . infixOperation comparisonOperator infixOperation
    (68) infixOperation -> . infixOperation inOperator elvisExpression
    (69) infixOperation -> . infixOperation isOperator type
    (70) infixOperation -> . elvisExpression
    (71) elvisExpression -> . rangeExpression
    (72) elvisExpression -> . elvisExpression ELVIS rangeExpression
    (73) rangeExpression -> . additiveExpression
    (74) rangeExpression -> . rangeExpression PONTOPONTO additiveExpression
    (75) additiveExpression -> . multiplicativeExpression
    (76) additiveExpression -> . additiveExpression additiveOperator multiplicativeExpression
    (77) multiplicativeExpression -> . asExpression
    (78) multiplicativeExpression -> . multiplicativeExpression multiplicativeOperator asExpression
    (79) asExpression -> . unaryExpression
    (80) asExpression -> . unaryExpression asOperator type
    (81) unaryExpression -> . unaryOperator primaryExpression
    (82) unaryExpression -> . primaryExpression
    (83) unaryExpression -> . primaryExpression postfixUnaryOperator
    (122) unaryOperator -> . INCREMENTO
    (123) unaryOperator -> . DECREMENTO
    (124) unaryOperator -> . MINUS
    (125) unaryOperator -> . PLUS
    (126) unaryOperator -> . NOT
    (86) primaryExpression -> . NULL
    (87) primaryExpression -> . TRUE
    (88) primaryExpression -> . FALSE
    (89) primaryExpression -> . NUMBER
    (90) primaryExpression -> . LITERAL_STRING
    (91) primaryExpression -> . ID
    (92) primaryExpression -> . chamadaDeFuncao
    (93) primaryExpression -> . parenthesizedExpression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (97) parenthesizedExpression -> . LPAREN expression RPAREN

    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38
    NOT             shift and go to state 39
    NULL            shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    NUMBER          shift and go to state 43
    LITERAL_STRING  shift and go to state 44
    ID              shift and go to state 45
    LPAREN          shift and go to state 48

    expression                     shift and go to state 21
    disjunction                    shift and go to state 22
    conjunction                    shift and go to state 23
    equality                       shift and go to state 24
    comparison                     shift and go to state 25
    infixOperation                 shift and go to state 26
    elvisExpression                shift and go to state 27
    rangeExpression                shift and go to state 28
    additiveExpression             shift and go to state 29
    multiplicativeExpression       shift and go to state 30
    asExpression                   shift and go to state 31
    unaryExpression                shift and go to state 32
    unaryOperator                  shift and go to state 33
    primaryExpression              shift and go to state 34
    chamadaDeFuncao                shift and go to state 46
    parenthesizedExpression        shift and go to state 47

state 12

    (44) block -> LCHAVE . statements RCHAVE
    (15) statements -> . statement
    (16) statements -> . statement statements
    (17) statement -> . open_statement
    (18) statement -> . closed_statement
    (19) open_statement -> . IF LPAREN expression RPAREN block
    (20) open_statement -> . IF LPAREN expression RPAREN statement
    (21) open_statement -> . IF LPAREN expression RPAREN block ELSE open_statement
    (22) open_statement -> . IF LPAREN expression RPAREN closed_statement ELSE open_statement
    (23) open_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement
    (24) open_statement -> . WHILE LPAREN expression RPAREN open_statement
    (25) open_statement -> . DO open_statement WHILE LPAREN expression RPAREN
    (26) closed_statement -> . non_if_statement_block
    (27) closed_statement -> . IF LPAREN expression RPAREN block ELSE block
    (28) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE block
    (29) closed_statement -> . IF LPAREN expression RPAREN block ELSE closed_statement
    (30) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE closed_statement
    (31) closed_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement
    (32) closed_statement -> . WHILE LPAREN expression RPAREN closed_statement
    (33) closed_statement -> . DO closed_statement WHILE LPAREN expression RPAREN
    (34) non_if_statement_block -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN block
    (35) non_if_statement_block -> . WHILE LPAREN expression RPAREN block
    (36) non_if_statement_block -> . DO block WHILE LPAREN expression RPAREN
    (37) non_if_statement_block -> . PV
    (38) non_if_statement_block -> . propertyDeclarationStm
    (39) non_if_statement_block -> . assignment
    (40) non_if_statement_block -> . chamadaDeFuncao
    (41) non_if_statement_block -> . jumpExpression
    (45) propertyDeclarationStm -> . VAR genericVariableDeclaration ATRIBUICAO expression
    (46) propertyDeclarationStm -> . VAL genericVariableDeclaration ATRIBUICAO expression
    (42) assignment -> . ID ATRIBUICAO expression
    (43) assignment -> . ID assignmentAndOperator expression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (94) jumpExpression -> . RETURN expression
    (95) jumpExpression -> . CONTINUE
    (96) jumpExpression -> . BREAK

    IF              shift and go to state 53
    FOR             shift and go to state 54
    WHILE           shift and go to state 55
    DO              shift and go to state 56
    PV              shift and go to state 58
    VAR             shift and go to state 63
    VAL             shift and go to state 64
    ID              shift and go to state 65
    RETURN          shift and go to state 66
    CONTINUE        shift and go to state 67
    BREAK           shift and go to state 68

    statements                     shift and go to state 49
    statement                      shift and go to state 50
    open_statement                 shift and go to state 51
    closed_statement               shift and go to state 52
    non_if_statement_block         shift and go to state 57
    propertyDeclarationStm         shift and go to state 59
    assignment                     shift and go to state 60
    chamadaDeFuncao                shift and go to state 61
    jumpExpression                 shift and go to state 62

state 13

    (5) functionValueParameters -> LPAREN parameters . RPAREN

    RPAREN          shift and go to state 69


state 14

    (6) functionValueParameters -> LPAREN RPAREN .

    DOISP           reduce using rule 6 (functionValueParameters -> LPAREN RPAREN .)
    ATRIBUICAO      reduce using rule 6 (functionValueParameters -> LPAREN RPAREN .)
    LCHAVE          reduce using rule 6 (functionValueParameters -> LPAREN RPAREN .)


state 15

    (7) parameters -> parameter .
    (8) parameters -> parameter . COMMA parameters

    RPAREN          reduce using rule 7 (parameters -> parameter .)
    COMMA           shift and go to state 70


state 16

    (9) parameter -> ID . DOISP type

    DOISP           shift and go to state 71


state 17

    (11) type -> ID .

    ATRIBUICAO      reduce using rule 11 (type -> ID .)
    LCHAVE          reduce using rule 11 (type -> ID .)
    RPAREN          reduce using rule 11 (type -> ID .)
    COMMA           reduce using rule 11 (type -> ID .)
    MENOR           reduce using rule 11 (type -> ID .)
    MAIOR           reduce using rule 11 (type -> ID .)
    MENORIGUAL      reduce using rule 11 (type -> ID .)
    MAIORIGUAL      reduce using rule 11 (type -> ID .)
    IN              reduce using rule 11 (type -> ID .)
    NOT_IN          reduce using rule 11 (type -> ID .)
    IS              reduce using rule 11 (type -> ID .)
    NOT_IS          reduce using rule 11 (type -> ID .)
    DIFERENTE       reduce using rule 11 (type -> ID .)
    IDENTIDADE      reduce using rule 11 (type -> ID .)
    IGUALDADE       reduce using rule 11 (type -> ID .)
    SEMIDENTIDADE   reduce using rule 11 (type -> ID .)
    AND             reduce using rule 11 (type -> ID .)
    OR              reduce using rule 11 (type -> ID .)
    FUN             reduce using rule 11 (type -> ID .)
    $end            reduce using rule 11 (type -> ID .)
    IF              reduce using rule 11 (type -> ID .)
    FOR             reduce using rule 11 (type -> ID .)
    WHILE           reduce using rule 11 (type -> ID .)
    DO              reduce using rule 11 (type -> ID .)
    PV              reduce using rule 11 (type -> ID .)
    VAR             reduce using rule 11 (type -> ID .)
    VAL             reduce using rule 11 (type -> ID .)
    ID              reduce using rule 11 (type -> ID .)
    RETURN          reduce using rule 11 (type -> ID .)
    CONTINUE        reduce using rule 11 (type -> ID .)
    BREAK           reduce using rule 11 (type -> ID .)
    RCHAVE          reduce using rule 11 (type -> ID .)
    ELSE            reduce using rule 11 (type -> ID .)
    MULT            reduce using rule 11 (type -> ID .)
    DIVIDE          reduce using rule 11 (type -> ID .)
    MOD             reduce using rule 11 (type -> ID .)
    PLUS            reduce using rule 11 (type -> ID .)
    MINUS           reduce using rule 11 (type -> ID .)
    PONTOPONTO      reduce using rule 11 (type -> ID .)
    ELVIS           reduce using rule 11 (type -> ID .)


state 18

    (4) functionDeclaration -> FUN ID functionValueParameters DOISP type . functionBody
    (13) functionBody -> . block
    (14) functionBody -> . ATRIBUICAO expression
    (44) block -> . LCHAVE statements RCHAVE

    ATRIBUICAO      shift and go to state 11
    LCHAVE          shift and go to state 12

    functionBody                   shift and go to state 72
    block                          shift and go to state 10

state 19

    (10) type -> parenthesizedType .

    ATRIBUICAO      reduce using rule 10 (type -> parenthesizedType .)
    LCHAVE          reduce using rule 10 (type -> parenthesizedType .)
    RPAREN          reduce using rule 10 (type -> parenthesizedType .)
    COMMA           reduce using rule 10 (type -> parenthesizedType .)
    MENOR           reduce using rule 10 (type -> parenthesizedType .)
    MAIOR           reduce using rule 10 (type -> parenthesizedType .)
    MENORIGUAL      reduce using rule 10 (type -> parenthesizedType .)
    MAIORIGUAL      reduce using rule 10 (type -> parenthesizedType .)
    IN              reduce using rule 10 (type -> parenthesizedType .)
    NOT_IN          reduce using rule 10 (type -> parenthesizedType .)
    IS              reduce using rule 10 (type -> parenthesizedType .)
    NOT_IS          reduce using rule 10 (type -> parenthesizedType .)
    DIFERENTE       reduce using rule 10 (type -> parenthesizedType .)
    IDENTIDADE      reduce using rule 10 (type -> parenthesizedType .)
    IGUALDADE       reduce using rule 10 (type -> parenthesizedType .)
    SEMIDENTIDADE   reduce using rule 10 (type -> parenthesizedType .)
    AND             reduce using rule 10 (type -> parenthesizedType .)
    OR              reduce using rule 10 (type -> parenthesizedType .)
    FUN             reduce using rule 10 (type -> parenthesizedType .)
    $end            reduce using rule 10 (type -> parenthesizedType .)
    IF              reduce using rule 10 (type -> parenthesizedType .)
    FOR             reduce using rule 10 (type -> parenthesizedType .)
    WHILE           reduce using rule 10 (type -> parenthesizedType .)
    DO              reduce using rule 10 (type -> parenthesizedType .)
    PV              reduce using rule 10 (type -> parenthesizedType .)
    VAR             reduce using rule 10 (type -> parenthesizedType .)
    VAL             reduce using rule 10 (type -> parenthesizedType .)
    ID              reduce using rule 10 (type -> parenthesizedType .)
    RETURN          reduce using rule 10 (type -> parenthesizedType .)
    CONTINUE        reduce using rule 10 (type -> parenthesizedType .)
    BREAK           reduce using rule 10 (type -> parenthesizedType .)
    RCHAVE          reduce using rule 10 (type -> parenthesizedType .)
    ELSE            reduce using rule 10 (type -> parenthesizedType .)
    MULT            reduce using rule 10 (type -> parenthesizedType .)
    DIVIDE          reduce using rule 10 (type -> parenthesizedType .)
    MOD             reduce using rule 10 (type -> parenthesizedType .)
    PLUS            reduce using rule 10 (type -> parenthesizedType .)
    MINUS           reduce using rule 10 (type -> parenthesizedType .)
    PONTOPONTO      reduce using rule 10 (type -> parenthesizedType .)
    ELVIS           reduce using rule 10 (type -> parenthesizedType .)


state 20

    (12) parenthesizedType -> LPAREN . type RPAREN
    (10) type -> . parenthesizedType
    (11) type -> . ID
    (12) parenthesizedType -> . LPAREN type RPAREN

    ID              shift and go to state 17
    LPAREN          shift and go to state 20

    type                           shift and go to state 73
    parenthesizedType              shift and go to state 19

state 21

    (14) functionBody -> ATRIBUICAO expression .

    FUN             reduce using rule 14 (functionBody -> ATRIBUICAO expression .)
    $end            reduce using rule 14 (functionBody -> ATRIBUICAO expression .)


state 22

    (59) expression -> disjunction .
    (61) disjunction -> disjunction . OR conjunction

    FUN             reduce using rule 59 (expression -> disjunction .)
    $end            reduce using rule 59 (expression -> disjunction .)
    RPAREN          reduce using rule 59 (expression -> disjunction .)
    IF              reduce using rule 59 (expression -> disjunction .)
    FOR             reduce using rule 59 (expression -> disjunction .)
    WHILE           reduce using rule 59 (expression -> disjunction .)
    DO              reduce using rule 59 (expression -> disjunction .)
    PV              reduce using rule 59 (expression -> disjunction .)
    VAR             reduce using rule 59 (expression -> disjunction .)
    VAL             reduce using rule 59 (expression -> disjunction .)
    ID              reduce using rule 59 (expression -> disjunction .)
    RETURN          reduce using rule 59 (expression -> disjunction .)
    CONTINUE        reduce using rule 59 (expression -> disjunction .)
    BREAK           reduce using rule 59 (expression -> disjunction .)
    RCHAVE          reduce using rule 59 (expression -> disjunction .)
    ELSE            reduce using rule 59 (expression -> disjunction .)
    OR              shift and go to state 74


state 23

    (60) disjunction -> conjunction .
    (63) conjunction -> conjunction . AND equality

    OR              reduce using rule 60 (disjunction -> conjunction .)
    FUN             reduce using rule 60 (disjunction -> conjunction .)
    $end            reduce using rule 60 (disjunction -> conjunction .)
    RPAREN          reduce using rule 60 (disjunction -> conjunction .)
    IF              reduce using rule 60 (disjunction -> conjunction .)
    FOR             reduce using rule 60 (disjunction -> conjunction .)
    WHILE           reduce using rule 60 (disjunction -> conjunction .)
    DO              reduce using rule 60 (disjunction -> conjunction .)
    PV              reduce using rule 60 (disjunction -> conjunction .)
    VAR             reduce using rule 60 (disjunction -> conjunction .)
    VAL             reduce using rule 60 (disjunction -> conjunction .)
    ID              reduce using rule 60 (disjunction -> conjunction .)
    RETURN          reduce using rule 60 (disjunction -> conjunction .)
    CONTINUE        reduce using rule 60 (disjunction -> conjunction .)
    BREAK           reduce using rule 60 (disjunction -> conjunction .)
    RCHAVE          reduce using rule 60 (disjunction -> conjunction .)
    ELSE            reduce using rule 60 (disjunction -> conjunction .)
    AND             shift and go to state 75


state 24

    (62) conjunction -> equality .
    (65) equality -> equality . equalityOperator comparison
    (103) equalityOperator -> . DIFERENTE
    (104) equalityOperator -> . IDENTIDADE
    (105) equalityOperator -> . IGUALDADE
    (106) equalityOperator -> . SEMIDENTIDADE

    AND             reduce using rule 62 (conjunction -> equality .)
    OR              reduce using rule 62 (conjunction -> equality .)
    FUN             reduce using rule 62 (conjunction -> equality .)
    $end            reduce using rule 62 (conjunction -> equality .)
    RPAREN          reduce using rule 62 (conjunction -> equality .)
    IF              reduce using rule 62 (conjunction -> equality .)
    FOR             reduce using rule 62 (conjunction -> equality .)
    WHILE           reduce using rule 62 (conjunction -> equality .)
    DO              reduce using rule 62 (conjunction -> equality .)
    PV              reduce using rule 62 (conjunction -> equality .)
    VAR             reduce using rule 62 (conjunction -> equality .)
    VAL             reduce using rule 62 (conjunction -> equality .)
    ID              reduce using rule 62 (conjunction -> equality .)
    RETURN          reduce using rule 62 (conjunction -> equality .)
    CONTINUE        reduce using rule 62 (conjunction -> equality .)
    BREAK           reduce using rule 62 (conjunction -> equality .)
    RCHAVE          reduce using rule 62 (conjunction -> equality .)
    ELSE            reduce using rule 62 (conjunction -> equality .)
    DIFERENTE       shift and go to state 77
    IDENTIDADE      shift and go to state 78
    IGUALDADE       shift and go to state 79
    SEMIDENTIDADE   shift and go to state 80

    equalityOperator               shift and go to state 76

state 25

    (64) equality -> comparison .

    DIFERENTE       reduce using rule 64 (equality -> comparison .)
    IDENTIDADE      reduce using rule 64 (equality -> comparison .)
    IGUALDADE       reduce using rule 64 (equality -> comparison .)
    SEMIDENTIDADE   reduce using rule 64 (equality -> comparison .)
    AND             reduce using rule 64 (equality -> comparison .)
    OR              reduce using rule 64 (equality -> comparison .)
    FUN             reduce using rule 64 (equality -> comparison .)
    $end            reduce using rule 64 (equality -> comparison .)
    RPAREN          reduce using rule 64 (equality -> comparison .)
    IF              reduce using rule 64 (equality -> comparison .)
    FOR             reduce using rule 64 (equality -> comparison .)
    WHILE           reduce using rule 64 (equality -> comparison .)
    DO              reduce using rule 64 (equality -> comparison .)
    PV              reduce using rule 64 (equality -> comparison .)
    VAR             reduce using rule 64 (equality -> comparison .)
    VAL             reduce using rule 64 (equality -> comparison .)
    ID              reduce using rule 64 (equality -> comparison .)
    RETURN          reduce using rule 64 (equality -> comparison .)
    CONTINUE        reduce using rule 64 (equality -> comparison .)
    BREAK           reduce using rule 64 (equality -> comparison .)
    RCHAVE          reduce using rule 64 (equality -> comparison .)
    ELSE            reduce using rule 64 (equality -> comparison .)


state 26

    (66) comparison -> infixOperation .
    (67) comparison -> infixOperation . comparisonOperator infixOperation
    (68) infixOperation -> infixOperation . inOperator elvisExpression
    (69) infixOperation -> infixOperation . isOperator type
    (107) comparisonOperator -> . MENOR
    (108) comparisonOperator -> . MAIOR
    (109) comparisonOperator -> . MENORIGUAL
    (110) comparisonOperator -> . MAIORIGUAL
    (111) inOperator -> . IN
    (112) inOperator -> . NOT_IN
    (113) isOperator -> . IS
    (114) isOperator -> . NOT_IS

    DIFERENTE       reduce using rule 66 (comparison -> infixOperation .)
    IDENTIDADE      reduce using rule 66 (comparison -> infixOperation .)
    IGUALDADE       reduce using rule 66 (comparison -> infixOperation .)
    SEMIDENTIDADE   reduce using rule 66 (comparison -> infixOperation .)
    AND             reduce using rule 66 (comparison -> infixOperation .)
    OR              reduce using rule 66 (comparison -> infixOperation .)
    FUN             reduce using rule 66 (comparison -> infixOperation .)
    $end            reduce using rule 66 (comparison -> infixOperation .)
    RPAREN          reduce using rule 66 (comparison -> infixOperation .)
    IF              reduce using rule 66 (comparison -> infixOperation .)
    FOR             reduce using rule 66 (comparison -> infixOperation .)
    WHILE           reduce using rule 66 (comparison -> infixOperation .)
    DO              reduce using rule 66 (comparison -> infixOperation .)
    PV              reduce using rule 66 (comparison -> infixOperation .)
    VAR             reduce using rule 66 (comparison -> infixOperation .)
    VAL             reduce using rule 66 (comparison -> infixOperation .)
    ID              reduce using rule 66 (comparison -> infixOperation .)
    RETURN          reduce using rule 66 (comparison -> infixOperation .)
    CONTINUE        reduce using rule 66 (comparison -> infixOperation .)
    BREAK           reduce using rule 66 (comparison -> infixOperation .)
    RCHAVE          reduce using rule 66 (comparison -> infixOperation .)
    ELSE            reduce using rule 66 (comparison -> infixOperation .)
    MENOR           shift and go to state 84
    MAIOR           shift and go to state 85
    MENORIGUAL      shift and go to state 86
    MAIORIGUAL      shift and go to state 87
    IN              shift and go to state 88
    NOT_IN          shift and go to state 89
    IS              shift and go to state 90
    NOT_IS          shift and go to state 91

    comparisonOperator             shift and go to state 81
    inOperator                     shift and go to state 82
    isOperator                     shift and go to state 83

state 27

    (70) infixOperation -> elvisExpression .
    (72) elvisExpression -> elvisExpression . ELVIS rangeExpression

    MENOR           reduce using rule 70 (infixOperation -> elvisExpression .)
    MAIOR           reduce using rule 70 (infixOperation -> elvisExpression .)
    MENORIGUAL      reduce using rule 70 (infixOperation -> elvisExpression .)
    MAIORIGUAL      reduce using rule 70 (infixOperation -> elvisExpression .)
    IN              reduce using rule 70 (infixOperation -> elvisExpression .)
    NOT_IN          reduce using rule 70 (infixOperation -> elvisExpression .)
    IS              reduce using rule 70 (infixOperation -> elvisExpression .)
    NOT_IS          reduce using rule 70 (infixOperation -> elvisExpression .)
    DIFERENTE       reduce using rule 70 (infixOperation -> elvisExpression .)
    IDENTIDADE      reduce using rule 70 (infixOperation -> elvisExpression .)
    IGUALDADE       reduce using rule 70 (infixOperation -> elvisExpression .)
    SEMIDENTIDADE   reduce using rule 70 (infixOperation -> elvisExpression .)
    AND             reduce using rule 70 (infixOperation -> elvisExpression .)
    OR              reduce using rule 70 (infixOperation -> elvisExpression .)
    FUN             reduce using rule 70 (infixOperation -> elvisExpression .)
    $end            reduce using rule 70 (infixOperation -> elvisExpression .)
    RPAREN          reduce using rule 70 (infixOperation -> elvisExpression .)
    IF              reduce using rule 70 (infixOperation -> elvisExpression .)
    FOR             reduce using rule 70 (infixOperation -> elvisExpression .)
    WHILE           reduce using rule 70 (infixOperation -> elvisExpression .)
    DO              reduce using rule 70 (infixOperation -> elvisExpression .)
    PV              reduce using rule 70 (infixOperation -> elvisExpression .)
    VAR             reduce using rule 70 (infixOperation -> elvisExpression .)
    VAL             reduce using rule 70 (infixOperation -> elvisExpression .)
    ID              reduce using rule 70 (infixOperation -> elvisExpression .)
    RETURN          reduce using rule 70 (infixOperation -> elvisExpression .)
    CONTINUE        reduce using rule 70 (infixOperation -> elvisExpression .)
    BREAK           reduce using rule 70 (infixOperation -> elvisExpression .)
    RCHAVE          reduce using rule 70 (infixOperation -> elvisExpression .)
    ELSE            reduce using rule 70 (infixOperation -> elvisExpression .)
    ELVIS           shift and go to state 92


state 28

    (71) elvisExpression -> rangeExpression .
    (74) rangeExpression -> rangeExpression . PONTOPONTO additiveExpression

    ELVIS           reduce using rule 71 (elvisExpression -> rangeExpression .)
    MENOR           reduce using rule 71 (elvisExpression -> rangeExpression .)
    MAIOR           reduce using rule 71 (elvisExpression -> rangeExpression .)
    MENORIGUAL      reduce using rule 71 (elvisExpression -> rangeExpression .)
    MAIORIGUAL      reduce using rule 71 (elvisExpression -> rangeExpression .)
    IN              reduce using rule 71 (elvisExpression -> rangeExpression .)
    NOT_IN          reduce using rule 71 (elvisExpression -> rangeExpression .)
    IS              reduce using rule 71 (elvisExpression -> rangeExpression .)
    NOT_IS          reduce using rule 71 (elvisExpression -> rangeExpression .)
    DIFERENTE       reduce using rule 71 (elvisExpression -> rangeExpression .)
    IDENTIDADE      reduce using rule 71 (elvisExpression -> rangeExpression .)
    IGUALDADE       reduce using rule 71 (elvisExpression -> rangeExpression .)
    SEMIDENTIDADE   reduce using rule 71 (elvisExpression -> rangeExpression .)
    AND             reduce using rule 71 (elvisExpression -> rangeExpression .)
    OR              reduce using rule 71 (elvisExpression -> rangeExpression .)
    FUN             reduce using rule 71 (elvisExpression -> rangeExpression .)
    $end            reduce using rule 71 (elvisExpression -> rangeExpression .)
    RPAREN          reduce using rule 71 (elvisExpression -> rangeExpression .)
    IF              reduce using rule 71 (elvisExpression -> rangeExpression .)
    FOR             reduce using rule 71 (elvisExpression -> rangeExpression .)
    WHILE           reduce using rule 71 (elvisExpression -> rangeExpression .)
    DO              reduce using rule 71 (elvisExpression -> rangeExpression .)
    PV              reduce using rule 71 (elvisExpression -> rangeExpression .)
    VAR             reduce using rule 71 (elvisExpression -> rangeExpression .)
    VAL             reduce using rule 71 (elvisExpression -> rangeExpression .)
    ID              reduce using rule 71 (elvisExpression -> rangeExpression .)
    RETURN          reduce using rule 71 (elvisExpression -> rangeExpression .)
    CONTINUE        reduce using rule 71 (elvisExpression -> rangeExpression .)
    BREAK           reduce using rule 71 (elvisExpression -> rangeExpression .)
    RCHAVE          reduce using rule 71 (elvisExpression -> rangeExpression .)
    ELSE            reduce using rule 71 (elvisExpression -> rangeExpression .)
    PONTOPONTO      shift and go to state 93


state 29

    (73) rangeExpression -> additiveExpression .
    (76) additiveExpression -> additiveExpression . additiveOperator multiplicativeExpression
    (115) additiveOperator -> . PLUS
    (116) additiveOperator -> . MINUS

    PONTOPONTO      reduce using rule 73 (rangeExpression -> additiveExpression .)
    ELVIS           reduce using rule 73 (rangeExpression -> additiveExpression .)
    MENOR           reduce using rule 73 (rangeExpression -> additiveExpression .)
    MAIOR           reduce using rule 73 (rangeExpression -> additiveExpression .)
    MENORIGUAL      reduce using rule 73 (rangeExpression -> additiveExpression .)
    MAIORIGUAL      reduce using rule 73 (rangeExpression -> additiveExpression .)
    IN              reduce using rule 73 (rangeExpression -> additiveExpression .)
    NOT_IN          reduce using rule 73 (rangeExpression -> additiveExpression .)
    IS              reduce using rule 73 (rangeExpression -> additiveExpression .)
    NOT_IS          reduce using rule 73 (rangeExpression -> additiveExpression .)
    DIFERENTE       reduce using rule 73 (rangeExpression -> additiveExpression .)
    IDENTIDADE      reduce using rule 73 (rangeExpression -> additiveExpression .)
    IGUALDADE       reduce using rule 73 (rangeExpression -> additiveExpression .)
    SEMIDENTIDADE   reduce using rule 73 (rangeExpression -> additiveExpression .)
    AND             reduce using rule 73 (rangeExpression -> additiveExpression .)
    OR              reduce using rule 73 (rangeExpression -> additiveExpression .)
    FUN             reduce using rule 73 (rangeExpression -> additiveExpression .)
    $end            reduce using rule 73 (rangeExpression -> additiveExpression .)
    RPAREN          reduce using rule 73 (rangeExpression -> additiveExpression .)
    IF              reduce using rule 73 (rangeExpression -> additiveExpression .)
    FOR             reduce using rule 73 (rangeExpression -> additiveExpression .)
    WHILE           reduce using rule 73 (rangeExpression -> additiveExpression .)
    DO              reduce using rule 73 (rangeExpression -> additiveExpression .)
    PV              reduce using rule 73 (rangeExpression -> additiveExpression .)
    VAR             reduce using rule 73 (rangeExpression -> additiveExpression .)
    VAL             reduce using rule 73 (rangeExpression -> additiveExpression .)
    ID              reduce using rule 73 (rangeExpression -> additiveExpression .)
    RETURN          reduce using rule 73 (rangeExpression -> additiveExpression .)
    CONTINUE        reduce using rule 73 (rangeExpression -> additiveExpression .)
    BREAK           reduce using rule 73 (rangeExpression -> additiveExpression .)
    RCHAVE          reduce using rule 73 (rangeExpression -> additiveExpression .)
    ELSE            reduce using rule 73 (rangeExpression -> additiveExpression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96

    additiveOperator               shift and go to state 94

state 30

    (75) additiveExpression -> multiplicativeExpression .
    (78) multiplicativeExpression -> multiplicativeExpression . multiplicativeOperator asExpression
    (117) multiplicativeOperator -> . MULT
    (118) multiplicativeOperator -> . DIVIDE
    (119) multiplicativeOperator -> . MOD

    PLUS            reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    MINUS           reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    PONTOPONTO      reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    ELVIS           reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    MENOR           reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    MAIOR           reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    MENORIGUAL      reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    MAIORIGUAL      reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    IN              reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    NOT_IN          reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    IS              reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    NOT_IS          reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    DIFERENTE       reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    IDENTIDADE      reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    IGUALDADE       reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    SEMIDENTIDADE   reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    AND             reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    OR              reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    FUN             reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    $end            reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    RPAREN          reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    IF              reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    FOR             reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    WHILE           reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    DO              reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    PV              reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    VAR             reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    VAL             reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    ID              reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    RETURN          reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    CONTINUE        reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    BREAK           reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    RCHAVE          reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    ELSE            reduce using rule 75 (additiveExpression -> multiplicativeExpression .)
    MULT            shift and go to state 98
    DIVIDE          shift and go to state 99
    MOD             shift and go to state 100

    multiplicativeOperator         shift and go to state 97

state 31

    (77) multiplicativeExpression -> asExpression .

    MULT            reduce using rule 77 (multiplicativeExpression -> asExpression .)
    DIVIDE          reduce using rule 77 (multiplicativeExpression -> asExpression .)
    MOD             reduce using rule 77 (multiplicativeExpression -> asExpression .)
    PLUS            reduce using rule 77 (multiplicativeExpression -> asExpression .)
    MINUS           reduce using rule 77 (multiplicativeExpression -> asExpression .)
    PONTOPONTO      reduce using rule 77 (multiplicativeExpression -> asExpression .)
    ELVIS           reduce using rule 77 (multiplicativeExpression -> asExpression .)
    MENOR           reduce using rule 77 (multiplicativeExpression -> asExpression .)
    MAIOR           reduce using rule 77 (multiplicativeExpression -> asExpression .)
    MENORIGUAL      reduce using rule 77 (multiplicativeExpression -> asExpression .)
    MAIORIGUAL      reduce using rule 77 (multiplicativeExpression -> asExpression .)
    IN              reduce using rule 77 (multiplicativeExpression -> asExpression .)
    NOT_IN          reduce using rule 77 (multiplicativeExpression -> asExpression .)
    IS              reduce using rule 77 (multiplicativeExpression -> asExpression .)
    NOT_IS          reduce using rule 77 (multiplicativeExpression -> asExpression .)
    DIFERENTE       reduce using rule 77 (multiplicativeExpression -> asExpression .)
    IDENTIDADE      reduce using rule 77 (multiplicativeExpression -> asExpression .)
    IGUALDADE       reduce using rule 77 (multiplicativeExpression -> asExpression .)
    SEMIDENTIDADE   reduce using rule 77 (multiplicativeExpression -> asExpression .)
    AND             reduce using rule 77 (multiplicativeExpression -> asExpression .)
    OR              reduce using rule 77 (multiplicativeExpression -> asExpression .)
    FUN             reduce using rule 77 (multiplicativeExpression -> asExpression .)
    $end            reduce using rule 77 (multiplicativeExpression -> asExpression .)
    RPAREN          reduce using rule 77 (multiplicativeExpression -> asExpression .)
    IF              reduce using rule 77 (multiplicativeExpression -> asExpression .)
    FOR             reduce using rule 77 (multiplicativeExpression -> asExpression .)
    WHILE           reduce using rule 77 (multiplicativeExpression -> asExpression .)
    DO              reduce using rule 77 (multiplicativeExpression -> asExpression .)
    PV              reduce using rule 77 (multiplicativeExpression -> asExpression .)
    VAR             reduce using rule 77 (multiplicativeExpression -> asExpression .)
    VAL             reduce using rule 77 (multiplicativeExpression -> asExpression .)
    ID              reduce using rule 77 (multiplicativeExpression -> asExpression .)
    RETURN          reduce using rule 77 (multiplicativeExpression -> asExpression .)
    CONTINUE        reduce using rule 77 (multiplicativeExpression -> asExpression .)
    BREAK           reduce using rule 77 (multiplicativeExpression -> asExpression .)
    RCHAVE          reduce using rule 77 (multiplicativeExpression -> asExpression .)
    ELSE            reduce using rule 77 (multiplicativeExpression -> asExpression .)


state 32

    (79) asExpression -> unaryExpression .
    (80) asExpression -> unaryExpression . asOperator type
    (120) asOperator -> . AS
    (121) asOperator -> . AS asOperator

    MULT            reduce using rule 79 (asExpression -> unaryExpression .)
    DIVIDE          reduce using rule 79 (asExpression -> unaryExpression .)
    MOD             reduce using rule 79 (asExpression -> unaryExpression .)
    PLUS            reduce using rule 79 (asExpression -> unaryExpression .)
    MINUS           reduce using rule 79 (asExpression -> unaryExpression .)
    PONTOPONTO      reduce using rule 79 (asExpression -> unaryExpression .)
    ELVIS           reduce using rule 79 (asExpression -> unaryExpression .)
    MENOR           reduce using rule 79 (asExpression -> unaryExpression .)
    MAIOR           reduce using rule 79 (asExpression -> unaryExpression .)
    MENORIGUAL      reduce using rule 79 (asExpression -> unaryExpression .)
    MAIORIGUAL      reduce using rule 79 (asExpression -> unaryExpression .)
    IN              reduce using rule 79 (asExpression -> unaryExpression .)
    NOT_IN          reduce using rule 79 (asExpression -> unaryExpression .)
    IS              reduce using rule 79 (asExpression -> unaryExpression .)
    NOT_IS          reduce using rule 79 (asExpression -> unaryExpression .)
    DIFERENTE       reduce using rule 79 (asExpression -> unaryExpression .)
    IDENTIDADE      reduce using rule 79 (asExpression -> unaryExpression .)
    IGUALDADE       reduce using rule 79 (asExpression -> unaryExpression .)
    SEMIDENTIDADE   reduce using rule 79 (asExpression -> unaryExpression .)
    AND             reduce using rule 79 (asExpression -> unaryExpression .)
    OR              reduce using rule 79 (asExpression -> unaryExpression .)
    FUN             reduce using rule 79 (asExpression -> unaryExpression .)
    $end            reduce using rule 79 (asExpression -> unaryExpression .)
    RPAREN          reduce using rule 79 (asExpression -> unaryExpression .)
    IF              reduce using rule 79 (asExpression -> unaryExpression .)
    FOR             reduce using rule 79 (asExpression -> unaryExpression .)
    WHILE           reduce using rule 79 (asExpression -> unaryExpression .)
    DO              reduce using rule 79 (asExpression -> unaryExpression .)
    PV              reduce using rule 79 (asExpression -> unaryExpression .)
    VAR             reduce using rule 79 (asExpression -> unaryExpression .)
    VAL             reduce using rule 79 (asExpression -> unaryExpression .)
    ID              reduce using rule 79 (asExpression -> unaryExpression .)
    RETURN          reduce using rule 79 (asExpression -> unaryExpression .)
    CONTINUE        reduce using rule 79 (asExpression -> unaryExpression .)
    BREAK           reduce using rule 79 (asExpression -> unaryExpression .)
    RCHAVE          reduce using rule 79 (asExpression -> unaryExpression .)
    ELSE            reduce using rule 79 (asExpression -> unaryExpression .)
    AS              shift and go to state 102

    asOperator                     shift and go to state 101

state 33

    (81) unaryExpression -> unaryOperator . primaryExpression
    (86) primaryExpression -> . NULL
    (87) primaryExpression -> . TRUE
    (88) primaryExpression -> . FALSE
    (89) primaryExpression -> . NUMBER
    (90) primaryExpression -> . LITERAL_STRING
    (91) primaryExpression -> . ID
    (92) primaryExpression -> . chamadaDeFuncao
    (93) primaryExpression -> . parenthesizedExpression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (97) parenthesizedExpression -> . LPAREN expression RPAREN

    NULL            shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    NUMBER          shift and go to state 43
    LITERAL_STRING  shift and go to state 44
    ID              shift and go to state 45
    LPAREN          shift and go to state 48

    primaryExpression              shift and go to state 103
    chamadaDeFuncao                shift and go to state 46
    parenthesizedExpression        shift and go to state 47

state 34

    (82) unaryExpression -> primaryExpression .
    (83) unaryExpression -> primaryExpression . postfixUnaryOperator
    (84) postfixUnaryOperator -> . INCREMENTO
    (85) postfixUnaryOperator -> . DECREMENTO

    AS              reduce using rule 82 (unaryExpression -> primaryExpression .)
    MULT            reduce using rule 82 (unaryExpression -> primaryExpression .)
    DIVIDE          reduce using rule 82 (unaryExpression -> primaryExpression .)
    MOD             reduce using rule 82 (unaryExpression -> primaryExpression .)
    PLUS            reduce using rule 82 (unaryExpression -> primaryExpression .)
    MINUS           reduce using rule 82 (unaryExpression -> primaryExpression .)
    PONTOPONTO      reduce using rule 82 (unaryExpression -> primaryExpression .)
    ELVIS           reduce using rule 82 (unaryExpression -> primaryExpression .)
    MENOR           reduce using rule 82 (unaryExpression -> primaryExpression .)
    MAIOR           reduce using rule 82 (unaryExpression -> primaryExpression .)
    MENORIGUAL      reduce using rule 82 (unaryExpression -> primaryExpression .)
    MAIORIGUAL      reduce using rule 82 (unaryExpression -> primaryExpression .)
    IN              reduce using rule 82 (unaryExpression -> primaryExpression .)
    NOT_IN          reduce using rule 82 (unaryExpression -> primaryExpression .)
    IS              reduce using rule 82 (unaryExpression -> primaryExpression .)
    NOT_IS          reduce using rule 82 (unaryExpression -> primaryExpression .)
    DIFERENTE       reduce using rule 82 (unaryExpression -> primaryExpression .)
    IDENTIDADE      reduce using rule 82 (unaryExpression -> primaryExpression .)
    IGUALDADE       reduce using rule 82 (unaryExpression -> primaryExpression .)
    SEMIDENTIDADE   reduce using rule 82 (unaryExpression -> primaryExpression .)
    AND             reduce using rule 82 (unaryExpression -> primaryExpression .)
    OR              reduce using rule 82 (unaryExpression -> primaryExpression .)
    FUN             reduce using rule 82 (unaryExpression -> primaryExpression .)
    $end            reduce using rule 82 (unaryExpression -> primaryExpression .)
    RPAREN          reduce using rule 82 (unaryExpression -> primaryExpression .)
    IF              reduce using rule 82 (unaryExpression -> primaryExpression .)
    FOR             reduce using rule 82 (unaryExpression -> primaryExpression .)
    WHILE           reduce using rule 82 (unaryExpression -> primaryExpression .)
    DO              reduce using rule 82 (unaryExpression -> primaryExpression .)
    PV              reduce using rule 82 (unaryExpression -> primaryExpression .)
    VAR             reduce using rule 82 (unaryExpression -> primaryExpression .)
    VAL             reduce using rule 82 (unaryExpression -> primaryExpression .)
    ID              reduce using rule 82 (unaryExpression -> primaryExpression .)
    RETURN          reduce using rule 82 (unaryExpression -> primaryExpression .)
    CONTINUE        reduce using rule 82 (unaryExpression -> primaryExpression .)
    BREAK           reduce using rule 82 (unaryExpression -> primaryExpression .)
    RCHAVE          reduce using rule 82 (unaryExpression -> primaryExpression .)
    ELSE            reduce using rule 82 (unaryExpression -> primaryExpression .)
    INCREMENTO      shift and go to state 105
    DECREMENTO      shift and go to state 106

    postfixUnaryOperator           shift and go to state 104

state 35

    (122) unaryOperator -> INCREMENTO .

    NULL            reduce using rule 122 (unaryOperator -> INCREMENTO .)
    TRUE            reduce using rule 122 (unaryOperator -> INCREMENTO .)
    FALSE           reduce using rule 122 (unaryOperator -> INCREMENTO .)
    NUMBER          reduce using rule 122 (unaryOperator -> INCREMENTO .)
    LITERAL_STRING  reduce using rule 122 (unaryOperator -> INCREMENTO .)
    ID              reduce using rule 122 (unaryOperator -> INCREMENTO .)
    LPAREN          reduce using rule 122 (unaryOperator -> INCREMENTO .)


state 36

    (123) unaryOperator -> DECREMENTO .

    NULL            reduce using rule 123 (unaryOperator -> DECREMENTO .)
    TRUE            reduce using rule 123 (unaryOperator -> DECREMENTO .)
    FALSE           reduce using rule 123 (unaryOperator -> DECREMENTO .)
    NUMBER          reduce using rule 123 (unaryOperator -> DECREMENTO .)
    LITERAL_STRING  reduce using rule 123 (unaryOperator -> DECREMENTO .)
    ID              reduce using rule 123 (unaryOperator -> DECREMENTO .)
    LPAREN          reduce using rule 123 (unaryOperator -> DECREMENTO .)


state 37

    (124) unaryOperator -> MINUS .

    NULL            reduce using rule 124 (unaryOperator -> MINUS .)
    TRUE            reduce using rule 124 (unaryOperator -> MINUS .)
    FALSE           reduce using rule 124 (unaryOperator -> MINUS .)
    NUMBER          reduce using rule 124 (unaryOperator -> MINUS .)
    LITERAL_STRING  reduce using rule 124 (unaryOperator -> MINUS .)
    ID              reduce using rule 124 (unaryOperator -> MINUS .)
    LPAREN          reduce using rule 124 (unaryOperator -> MINUS .)


state 38

    (125) unaryOperator -> PLUS .

    NULL            reduce using rule 125 (unaryOperator -> PLUS .)
    TRUE            reduce using rule 125 (unaryOperator -> PLUS .)
    FALSE           reduce using rule 125 (unaryOperator -> PLUS .)
    NUMBER          reduce using rule 125 (unaryOperator -> PLUS .)
    LITERAL_STRING  reduce using rule 125 (unaryOperator -> PLUS .)
    ID              reduce using rule 125 (unaryOperator -> PLUS .)
    LPAREN          reduce using rule 125 (unaryOperator -> PLUS .)


state 39

    (126) unaryOperator -> NOT .

    NULL            reduce using rule 126 (unaryOperator -> NOT .)
    TRUE            reduce using rule 126 (unaryOperator -> NOT .)
    FALSE           reduce using rule 126 (unaryOperator -> NOT .)
    NUMBER          reduce using rule 126 (unaryOperator -> NOT .)
    LITERAL_STRING  reduce using rule 126 (unaryOperator -> NOT .)
    ID              reduce using rule 126 (unaryOperator -> NOT .)
    LPAREN          reduce using rule 126 (unaryOperator -> NOT .)


state 40

    (86) primaryExpression -> NULL .

    INCREMENTO      reduce using rule 86 (primaryExpression -> NULL .)
    DECREMENTO      reduce using rule 86 (primaryExpression -> NULL .)
    AS              reduce using rule 86 (primaryExpression -> NULL .)
    MULT            reduce using rule 86 (primaryExpression -> NULL .)
    DIVIDE          reduce using rule 86 (primaryExpression -> NULL .)
    MOD             reduce using rule 86 (primaryExpression -> NULL .)
    PLUS            reduce using rule 86 (primaryExpression -> NULL .)
    MINUS           reduce using rule 86 (primaryExpression -> NULL .)
    PONTOPONTO      reduce using rule 86 (primaryExpression -> NULL .)
    ELVIS           reduce using rule 86 (primaryExpression -> NULL .)
    MENOR           reduce using rule 86 (primaryExpression -> NULL .)
    MAIOR           reduce using rule 86 (primaryExpression -> NULL .)
    MENORIGUAL      reduce using rule 86 (primaryExpression -> NULL .)
    MAIORIGUAL      reduce using rule 86 (primaryExpression -> NULL .)
    IN              reduce using rule 86 (primaryExpression -> NULL .)
    NOT_IN          reduce using rule 86 (primaryExpression -> NULL .)
    IS              reduce using rule 86 (primaryExpression -> NULL .)
    NOT_IS          reduce using rule 86 (primaryExpression -> NULL .)
    DIFERENTE       reduce using rule 86 (primaryExpression -> NULL .)
    IDENTIDADE      reduce using rule 86 (primaryExpression -> NULL .)
    IGUALDADE       reduce using rule 86 (primaryExpression -> NULL .)
    SEMIDENTIDADE   reduce using rule 86 (primaryExpression -> NULL .)
    AND             reduce using rule 86 (primaryExpression -> NULL .)
    OR              reduce using rule 86 (primaryExpression -> NULL .)
    FUN             reduce using rule 86 (primaryExpression -> NULL .)
    $end            reduce using rule 86 (primaryExpression -> NULL .)
    RPAREN          reduce using rule 86 (primaryExpression -> NULL .)
    IF              reduce using rule 86 (primaryExpression -> NULL .)
    FOR             reduce using rule 86 (primaryExpression -> NULL .)
    WHILE           reduce using rule 86 (primaryExpression -> NULL .)
    DO              reduce using rule 86 (primaryExpression -> NULL .)
    PV              reduce using rule 86 (primaryExpression -> NULL .)
    VAR             reduce using rule 86 (primaryExpression -> NULL .)
    VAL             reduce using rule 86 (primaryExpression -> NULL .)
    ID              reduce using rule 86 (primaryExpression -> NULL .)
    RETURN          reduce using rule 86 (primaryExpression -> NULL .)
    CONTINUE        reduce using rule 86 (primaryExpression -> NULL .)
    BREAK           reduce using rule 86 (primaryExpression -> NULL .)
    RCHAVE          reduce using rule 86 (primaryExpression -> NULL .)
    ELSE            reduce using rule 86 (primaryExpression -> NULL .)
    COMMA           reduce using rule 86 (primaryExpression -> NULL .)


state 41

    (87) primaryExpression -> TRUE .

    INCREMENTO      reduce using rule 87 (primaryExpression -> TRUE .)
    DECREMENTO      reduce using rule 87 (primaryExpression -> TRUE .)
    AS              reduce using rule 87 (primaryExpression -> TRUE .)
    MULT            reduce using rule 87 (primaryExpression -> TRUE .)
    DIVIDE          reduce using rule 87 (primaryExpression -> TRUE .)
    MOD             reduce using rule 87 (primaryExpression -> TRUE .)
    PLUS            reduce using rule 87 (primaryExpression -> TRUE .)
    MINUS           reduce using rule 87 (primaryExpression -> TRUE .)
    PONTOPONTO      reduce using rule 87 (primaryExpression -> TRUE .)
    ELVIS           reduce using rule 87 (primaryExpression -> TRUE .)
    MENOR           reduce using rule 87 (primaryExpression -> TRUE .)
    MAIOR           reduce using rule 87 (primaryExpression -> TRUE .)
    MENORIGUAL      reduce using rule 87 (primaryExpression -> TRUE .)
    MAIORIGUAL      reduce using rule 87 (primaryExpression -> TRUE .)
    IN              reduce using rule 87 (primaryExpression -> TRUE .)
    NOT_IN          reduce using rule 87 (primaryExpression -> TRUE .)
    IS              reduce using rule 87 (primaryExpression -> TRUE .)
    NOT_IS          reduce using rule 87 (primaryExpression -> TRUE .)
    DIFERENTE       reduce using rule 87 (primaryExpression -> TRUE .)
    IDENTIDADE      reduce using rule 87 (primaryExpression -> TRUE .)
    IGUALDADE       reduce using rule 87 (primaryExpression -> TRUE .)
    SEMIDENTIDADE   reduce using rule 87 (primaryExpression -> TRUE .)
    AND             reduce using rule 87 (primaryExpression -> TRUE .)
    OR              reduce using rule 87 (primaryExpression -> TRUE .)
    FUN             reduce using rule 87 (primaryExpression -> TRUE .)
    $end            reduce using rule 87 (primaryExpression -> TRUE .)
    RPAREN          reduce using rule 87 (primaryExpression -> TRUE .)
    IF              reduce using rule 87 (primaryExpression -> TRUE .)
    FOR             reduce using rule 87 (primaryExpression -> TRUE .)
    WHILE           reduce using rule 87 (primaryExpression -> TRUE .)
    DO              reduce using rule 87 (primaryExpression -> TRUE .)
    PV              reduce using rule 87 (primaryExpression -> TRUE .)
    VAR             reduce using rule 87 (primaryExpression -> TRUE .)
    VAL             reduce using rule 87 (primaryExpression -> TRUE .)
    ID              reduce using rule 87 (primaryExpression -> TRUE .)
    RETURN          reduce using rule 87 (primaryExpression -> TRUE .)
    CONTINUE        reduce using rule 87 (primaryExpression -> TRUE .)
    BREAK           reduce using rule 87 (primaryExpression -> TRUE .)
    RCHAVE          reduce using rule 87 (primaryExpression -> TRUE .)
    ELSE            reduce using rule 87 (primaryExpression -> TRUE .)
    COMMA           reduce using rule 87 (primaryExpression -> TRUE .)


state 42

    (88) primaryExpression -> FALSE .

    INCREMENTO      reduce using rule 88 (primaryExpression -> FALSE .)
    DECREMENTO      reduce using rule 88 (primaryExpression -> FALSE .)
    AS              reduce using rule 88 (primaryExpression -> FALSE .)
    MULT            reduce using rule 88 (primaryExpression -> FALSE .)
    DIVIDE          reduce using rule 88 (primaryExpression -> FALSE .)
    MOD             reduce using rule 88 (primaryExpression -> FALSE .)
    PLUS            reduce using rule 88 (primaryExpression -> FALSE .)
    MINUS           reduce using rule 88 (primaryExpression -> FALSE .)
    PONTOPONTO      reduce using rule 88 (primaryExpression -> FALSE .)
    ELVIS           reduce using rule 88 (primaryExpression -> FALSE .)
    MENOR           reduce using rule 88 (primaryExpression -> FALSE .)
    MAIOR           reduce using rule 88 (primaryExpression -> FALSE .)
    MENORIGUAL      reduce using rule 88 (primaryExpression -> FALSE .)
    MAIORIGUAL      reduce using rule 88 (primaryExpression -> FALSE .)
    IN              reduce using rule 88 (primaryExpression -> FALSE .)
    NOT_IN          reduce using rule 88 (primaryExpression -> FALSE .)
    IS              reduce using rule 88 (primaryExpression -> FALSE .)
    NOT_IS          reduce using rule 88 (primaryExpression -> FALSE .)
    DIFERENTE       reduce using rule 88 (primaryExpression -> FALSE .)
    IDENTIDADE      reduce using rule 88 (primaryExpression -> FALSE .)
    IGUALDADE       reduce using rule 88 (primaryExpression -> FALSE .)
    SEMIDENTIDADE   reduce using rule 88 (primaryExpression -> FALSE .)
    AND             reduce using rule 88 (primaryExpression -> FALSE .)
    OR              reduce using rule 88 (primaryExpression -> FALSE .)
    FUN             reduce using rule 88 (primaryExpression -> FALSE .)
    $end            reduce using rule 88 (primaryExpression -> FALSE .)
    RPAREN          reduce using rule 88 (primaryExpression -> FALSE .)
    IF              reduce using rule 88 (primaryExpression -> FALSE .)
    FOR             reduce using rule 88 (primaryExpression -> FALSE .)
    WHILE           reduce using rule 88 (primaryExpression -> FALSE .)
    DO              reduce using rule 88 (primaryExpression -> FALSE .)
    PV              reduce using rule 88 (primaryExpression -> FALSE .)
    VAR             reduce using rule 88 (primaryExpression -> FALSE .)
    VAL             reduce using rule 88 (primaryExpression -> FALSE .)
    ID              reduce using rule 88 (primaryExpression -> FALSE .)
    RETURN          reduce using rule 88 (primaryExpression -> FALSE .)
    CONTINUE        reduce using rule 88 (primaryExpression -> FALSE .)
    BREAK           reduce using rule 88 (primaryExpression -> FALSE .)
    RCHAVE          reduce using rule 88 (primaryExpression -> FALSE .)
    ELSE            reduce using rule 88 (primaryExpression -> FALSE .)
    COMMA           reduce using rule 88 (primaryExpression -> FALSE .)


state 43

    (89) primaryExpression -> NUMBER .

    INCREMENTO      reduce using rule 89 (primaryExpression -> NUMBER .)
    DECREMENTO      reduce using rule 89 (primaryExpression -> NUMBER .)
    AS              reduce using rule 89 (primaryExpression -> NUMBER .)
    MULT            reduce using rule 89 (primaryExpression -> NUMBER .)
    DIVIDE          reduce using rule 89 (primaryExpression -> NUMBER .)
    MOD             reduce using rule 89 (primaryExpression -> NUMBER .)
    PLUS            reduce using rule 89 (primaryExpression -> NUMBER .)
    MINUS           reduce using rule 89 (primaryExpression -> NUMBER .)
    PONTOPONTO      reduce using rule 89 (primaryExpression -> NUMBER .)
    ELVIS           reduce using rule 89 (primaryExpression -> NUMBER .)
    MENOR           reduce using rule 89 (primaryExpression -> NUMBER .)
    MAIOR           reduce using rule 89 (primaryExpression -> NUMBER .)
    MENORIGUAL      reduce using rule 89 (primaryExpression -> NUMBER .)
    MAIORIGUAL      reduce using rule 89 (primaryExpression -> NUMBER .)
    IN              reduce using rule 89 (primaryExpression -> NUMBER .)
    NOT_IN          reduce using rule 89 (primaryExpression -> NUMBER .)
    IS              reduce using rule 89 (primaryExpression -> NUMBER .)
    NOT_IS          reduce using rule 89 (primaryExpression -> NUMBER .)
    DIFERENTE       reduce using rule 89 (primaryExpression -> NUMBER .)
    IDENTIDADE      reduce using rule 89 (primaryExpression -> NUMBER .)
    IGUALDADE       reduce using rule 89 (primaryExpression -> NUMBER .)
    SEMIDENTIDADE   reduce using rule 89 (primaryExpression -> NUMBER .)
    AND             reduce using rule 89 (primaryExpression -> NUMBER .)
    OR              reduce using rule 89 (primaryExpression -> NUMBER .)
    FUN             reduce using rule 89 (primaryExpression -> NUMBER .)
    $end            reduce using rule 89 (primaryExpression -> NUMBER .)
    RPAREN          reduce using rule 89 (primaryExpression -> NUMBER .)
    IF              reduce using rule 89 (primaryExpression -> NUMBER .)
    FOR             reduce using rule 89 (primaryExpression -> NUMBER .)
    WHILE           reduce using rule 89 (primaryExpression -> NUMBER .)
    DO              reduce using rule 89 (primaryExpression -> NUMBER .)
    PV              reduce using rule 89 (primaryExpression -> NUMBER .)
    VAR             reduce using rule 89 (primaryExpression -> NUMBER .)
    VAL             reduce using rule 89 (primaryExpression -> NUMBER .)
    ID              reduce using rule 89 (primaryExpression -> NUMBER .)
    RETURN          reduce using rule 89 (primaryExpression -> NUMBER .)
    CONTINUE        reduce using rule 89 (primaryExpression -> NUMBER .)
    BREAK           reduce using rule 89 (primaryExpression -> NUMBER .)
    RCHAVE          reduce using rule 89 (primaryExpression -> NUMBER .)
    ELSE            reduce using rule 89 (primaryExpression -> NUMBER .)
    COMMA           reduce using rule 89 (primaryExpression -> NUMBER .)


state 44

    (90) primaryExpression -> LITERAL_STRING .

    INCREMENTO      reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    DECREMENTO      reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    AS              reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    MULT            reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    DIVIDE          reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    MOD             reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    PLUS            reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    MINUS           reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    PONTOPONTO      reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    ELVIS           reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    MENOR           reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    MAIOR           reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    MENORIGUAL      reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    MAIORIGUAL      reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    IN              reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    NOT_IN          reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    IS              reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    NOT_IS          reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    DIFERENTE       reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    IDENTIDADE      reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    IGUALDADE       reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    SEMIDENTIDADE   reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    AND             reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    OR              reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    FUN             reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    $end            reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    RPAREN          reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    IF              reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    FOR             reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    WHILE           reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    DO              reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    PV              reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    VAR             reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    VAL             reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    ID              reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    RETURN          reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    CONTINUE        reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    BREAK           reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    RCHAVE          reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    ELSE            reduce using rule 90 (primaryExpression -> LITERAL_STRING .)
    COMMA           reduce using rule 90 (primaryExpression -> LITERAL_STRING .)


state 45

    (91) primaryExpression -> ID .
    (47) chamadaDeFuncao -> ID . LPAREN RPAREN
    (48) chamadaDeFuncao -> ID . LPAREN parametersFunction RPAREN

    INCREMENTO      reduce using rule 91 (primaryExpression -> ID .)
    DECREMENTO      reduce using rule 91 (primaryExpression -> ID .)
    AS              reduce using rule 91 (primaryExpression -> ID .)
    MULT            reduce using rule 91 (primaryExpression -> ID .)
    DIVIDE          reduce using rule 91 (primaryExpression -> ID .)
    MOD             reduce using rule 91 (primaryExpression -> ID .)
    PLUS            reduce using rule 91 (primaryExpression -> ID .)
    MINUS           reduce using rule 91 (primaryExpression -> ID .)
    PONTOPONTO      reduce using rule 91 (primaryExpression -> ID .)
    ELVIS           reduce using rule 91 (primaryExpression -> ID .)
    MENOR           reduce using rule 91 (primaryExpression -> ID .)
    MAIOR           reduce using rule 91 (primaryExpression -> ID .)
    MENORIGUAL      reduce using rule 91 (primaryExpression -> ID .)
    MAIORIGUAL      reduce using rule 91 (primaryExpression -> ID .)
    IN              reduce using rule 91 (primaryExpression -> ID .)
    NOT_IN          reduce using rule 91 (primaryExpression -> ID .)
    IS              reduce using rule 91 (primaryExpression -> ID .)
    NOT_IS          reduce using rule 91 (primaryExpression -> ID .)
    DIFERENTE       reduce using rule 91 (primaryExpression -> ID .)
    IDENTIDADE      reduce using rule 91 (primaryExpression -> ID .)
    IGUALDADE       reduce using rule 91 (primaryExpression -> ID .)
    SEMIDENTIDADE   reduce using rule 91 (primaryExpression -> ID .)
    AND             reduce using rule 91 (primaryExpression -> ID .)
    OR              reduce using rule 91 (primaryExpression -> ID .)
    FUN             reduce using rule 91 (primaryExpression -> ID .)
    $end            reduce using rule 91 (primaryExpression -> ID .)
    RPAREN          reduce using rule 91 (primaryExpression -> ID .)
    IF              reduce using rule 91 (primaryExpression -> ID .)
    FOR             reduce using rule 91 (primaryExpression -> ID .)
    WHILE           reduce using rule 91 (primaryExpression -> ID .)
    DO              reduce using rule 91 (primaryExpression -> ID .)
    PV              reduce using rule 91 (primaryExpression -> ID .)
    VAR             reduce using rule 91 (primaryExpression -> ID .)
    VAL             reduce using rule 91 (primaryExpression -> ID .)
    ID              reduce using rule 91 (primaryExpression -> ID .)
    RETURN          reduce using rule 91 (primaryExpression -> ID .)
    CONTINUE        reduce using rule 91 (primaryExpression -> ID .)
    BREAK           reduce using rule 91 (primaryExpression -> ID .)
    RCHAVE          reduce using rule 91 (primaryExpression -> ID .)
    ELSE            reduce using rule 91 (primaryExpression -> ID .)
    COMMA           reduce using rule 91 (primaryExpression -> ID .)
    LPAREN          shift and go to state 107


state 46

    (92) primaryExpression -> chamadaDeFuncao .

    INCREMENTO      reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    DECREMENTO      reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    AS              reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    MULT            reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    DIVIDE          reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    MOD             reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    PLUS            reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    MINUS           reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    PONTOPONTO      reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    ELVIS           reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    MENOR           reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    MAIOR           reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    MENORIGUAL      reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    MAIORIGUAL      reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    IN              reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    NOT_IN          reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    IS              reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    NOT_IS          reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    DIFERENTE       reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    IDENTIDADE      reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    IGUALDADE       reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    SEMIDENTIDADE   reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    AND             reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    OR              reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    FUN             reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    $end            reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    RPAREN          reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    IF              reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    FOR             reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    WHILE           reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    DO              reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    PV              reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    VAR             reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    VAL             reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    ID              reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    RETURN          reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    CONTINUE        reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    BREAK           reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    RCHAVE          reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    ELSE            reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)
    COMMA           reduce using rule 92 (primaryExpression -> chamadaDeFuncao .)


state 47

    (93) primaryExpression -> parenthesizedExpression .

    INCREMENTO      reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    DECREMENTO      reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    AS              reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    MULT            reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    DIVIDE          reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    MOD             reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    PLUS            reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    MINUS           reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    PONTOPONTO      reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    ELVIS           reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    MENOR           reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    MAIOR           reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    MENORIGUAL      reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    MAIORIGUAL      reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    IN              reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    NOT_IN          reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    IS              reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    NOT_IS          reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    DIFERENTE       reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    IDENTIDADE      reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    IGUALDADE       reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    SEMIDENTIDADE   reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    AND             reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    OR              reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    FUN             reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    $end            reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    RPAREN          reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    IF              reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    FOR             reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    WHILE           reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    DO              reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    PV              reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    VAR             reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    VAL             reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    ID              reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    RETURN          reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    CONTINUE        reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    BREAK           reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    RCHAVE          reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    ELSE            reduce using rule 93 (primaryExpression -> parenthesizedExpression .)
    COMMA           reduce using rule 93 (primaryExpression -> parenthesizedExpression .)


state 48

    (97) parenthesizedExpression -> LPAREN . expression RPAREN
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction
    (61) disjunction -> . disjunction OR conjunction
    (62) conjunction -> . equality
    (63) conjunction -> . conjunction AND equality
    (64) equality -> . comparison
    (65) equality -> . equality equalityOperator comparison
    (66) comparison -> . infixOperation
    (67) comparison -> . infixOperation comparisonOperator infixOperation
    (68) infixOperation -> . infixOperation inOperator elvisExpression
    (69) infixOperation -> . infixOperation isOperator type
    (70) infixOperation -> . elvisExpression
    (71) elvisExpression -> . rangeExpression
    (72) elvisExpression -> . elvisExpression ELVIS rangeExpression
    (73) rangeExpression -> . additiveExpression
    (74) rangeExpression -> . rangeExpression PONTOPONTO additiveExpression
    (75) additiveExpression -> . multiplicativeExpression
    (76) additiveExpression -> . additiveExpression additiveOperator multiplicativeExpression
    (77) multiplicativeExpression -> . asExpression
    (78) multiplicativeExpression -> . multiplicativeExpression multiplicativeOperator asExpression
    (79) asExpression -> . unaryExpression
    (80) asExpression -> . unaryExpression asOperator type
    (81) unaryExpression -> . unaryOperator primaryExpression
    (82) unaryExpression -> . primaryExpression
    (83) unaryExpression -> . primaryExpression postfixUnaryOperator
    (122) unaryOperator -> . INCREMENTO
    (123) unaryOperator -> . DECREMENTO
    (124) unaryOperator -> . MINUS
    (125) unaryOperator -> . PLUS
    (126) unaryOperator -> . NOT
    (86) primaryExpression -> . NULL
    (87) primaryExpression -> . TRUE
    (88) primaryExpression -> . FALSE
    (89) primaryExpression -> . NUMBER
    (90) primaryExpression -> . LITERAL_STRING
    (91) primaryExpression -> . ID
    (92) primaryExpression -> . chamadaDeFuncao
    (93) primaryExpression -> . parenthesizedExpression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (97) parenthesizedExpression -> . LPAREN expression RPAREN

    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38
    NOT             shift and go to state 39
    NULL            shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    NUMBER          shift and go to state 43
    LITERAL_STRING  shift and go to state 44
    ID              shift and go to state 45
    LPAREN          shift and go to state 48

    expression                     shift and go to state 108
    disjunction                    shift and go to state 22
    conjunction                    shift and go to state 23
    equality                       shift and go to state 24
    comparison                     shift and go to state 25
    infixOperation                 shift and go to state 26
    elvisExpression                shift and go to state 27
    rangeExpression                shift and go to state 28
    additiveExpression             shift and go to state 29
    multiplicativeExpression       shift and go to state 30
    asExpression                   shift and go to state 31
    unaryExpression                shift and go to state 32
    unaryOperator                  shift and go to state 33
    primaryExpression              shift and go to state 34
    chamadaDeFuncao                shift and go to state 46
    parenthesizedExpression        shift and go to state 47

state 49

    (44) block -> LCHAVE statements . RCHAVE

    RCHAVE          shift and go to state 109


state 50

    (15) statements -> statement .
    (16) statements -> statement . statements
    (15) statements -> . statement
    (16) statements -> . statement statements
    (17) statement -> . open_statement
    (18) statement -> . closed_statement
    (19) open_statement -> . IF LPAREN expression RPAREN block
    (20) open_statement -> . IF LPAREN expression RPAREN statement
    (21) open_statement -> . IF LPAREN expression RPAREN block ELSE open_statement
    (22) open_statement -> . IF LPAREN expression RPAREN closed_statement ELSE open_statement
    (23) open_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement
    (24) open_statement -> . WHILE LPAREN expression RPAREN open_statement
    (25) open_statement -> . DO open_statement WHILE LPAREN expression RPAREN
    (26) closed_statement -> . non_if_statement_block
    (27) closed_statement -> . IF LPAREN expression RPAREN block ELSE block
    (28) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE block
    (29) closed_statement -> . IF LPAREN expression RPAREN block ELSE closed_statement
    (30) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE closed_statement
    (31) closed_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement
    (32) closed_statement -> . WHILE LPAREN expression RPAREN closed_statement
    (33) closed_statement -> . DO closed_statement WHILE LPAREN expression RPAREN
    (34) non_if_statement_block -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN block
    (35) non_if_statement_block -> . WHILE LPAREN expression RPAREN block
    (36) non_if_statement_block -> . DO block WHILE LPAREN expression RPAREN
    (37) non_if_statement_block -> . PV
    (38) non_if_statement_block -> . propertyDeclarationStm
    (39) non_if_statement_block -> . assignment
    (40) non_if_statement_block -> . chamadaDeFuncao
    (41) non_if_statement_block -> . jumpExpression
    (45) propertyDeclarationStm -> . VAR genericVariableDeclaration ATRIBUICAO expression
    (46) propertyDeclarationStm -> . VAL genericVariableDeclaration ATRIBUICAO expression
    (42) assignment -> . ID ATRIBUICAO expression
    (43) assignment -> . ID assignmentAndOperator expression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (94) jumpExpression -> . RETURN expression
    (95) jumpExpression -> . CONTINUE
    (96) jumpExpression -> . BREAK

    RCHAVE          reduce using rule 15 (statements -> statement .)
    IF              shift and go to state 53
    FOR             shift and go to state 54
    WHILE           shift and go to state 55
    DO              shift and go to state 56
    PV              shift and go to state 58
    VAR             shift and go to state 63
    VAL             shift and go to state 64
    ID              shift and go to state 65
    RETURN          shift and go to state 66
    CONTINUE        shift and go to state 67
    BREAK           shift and go to state 68

    statement                      shift and go to state 50
    statements                     shift and go to state 110
    open_statement                 shift and go to state 51
    closed_statement               shift and go to state 52
    non_if_statement_block         shift and go to state 57
    propertyDeclarationStm         shift and go to state 59
    assignment                     shift and go to state 60
    chamadaDeFuncao                shift and go to state 61
    jumpExpression                 shift and go to state 62

state 51

    (17) statement -> open_statement .

    IF              reduce using rule 17 (statement -> open_statement .)
    FOR             reduce using rule 17 (statement -> open_statement .)
    WHILE           reduce using rule 17 (statement -> open_statement .)
    DO              reduce using rule 17 (statement -> open_statement .)
    PV              reduce using rule 17 (statement -> open_statement .)
    VAR             reduce using rule 17 (statement -> open_statement .)
    VAL             reduce using rule 17 (statement -> open_statement .)
    ID              reduce using rule 17 (statement -> open_statement .)
    RETURN          reduce using rule 17 (statement -> open_statement .)
    CONTINUE        reduce using rule 17 (statement -> open_statement .)
    BREAK           reduce using rule 17 (statement -> open_statement .)
    RCHAVE          reduce using rule 17 (statement -> open_statement .)


state 52

    (18) statement -> closed_statement .

    IF              reduce using rule 18 (statement -> closed_statement .)
    FOR             reduce using rule 18 (statement -> closed_statement .)
    WHILE           reduce using rule 18 (statement -> closed_statement .)
    DO              reduce using rule 18 (statement -> closed_statement .)
    PV              reduce using rule 18 (statement -> closed_statement .)
    VAR             reduce using rule 18 (statement -> closed_statement .)
    VAL             reduce using rule 18 (statement -> closed_statement .)
    ID              reduce using rule 18 (statement -> closed_statement .)
    RETURN          reduce using rule 18 (statement -> closed_statement .)
    CONTINUE        reduce using rule 18 (statement -> closed_statement .)
    BREAK           reduce using rule 18 (statement -> closed_statement .)
    RCHAVE          reduce using rule 18 (statement -> closed_statement .)


state 53

    (19) open_statement -> IF . LPAREN expression RPAREN block
    (20) open_statement -> IF . LPAREN expression RPAREN statement
    (21) open_statement -> IF . LPAREN expression RPAREN block ELSE open_statement
    (22) open_statement -> IF . LPAREN expression RPAREN closed_statement ELSE open_statement
    (27) closed_statement -> IF . LPAREN expression RPAREN block ELSE block
    (28) closed_statement -> IF . LPAREN expression RPAREN closed_statement ELSE block
    (29) closed_statement -> IF . LPAREN expression RPAREN block ELSE closed_statement
    (30) closed_statement -> IF . LPAREN expression RPAREN closed_statement ELSE closed_statement

    LPAREN          shift and go to state 111


state 54

    (23) open_statement -> FOR . LPAREN genericVariableDeclaration IN expression RPAREN open_statement
    (31) closed_statement -> FOR . LPAREN genericVariableDeclaration IN expression RPAREN closed_statement
    (34) non_if_statement_block -> FOR . LPAREN genericVariableDeclaration IN expression RPAREN block

    LPAREN          shift and go to state 112


state 55

    (24) open_statement -> WHILE . LPAREN expression RPAREN open_statement
    (32) closed_statement -> WHILE . LPAREN expression RPAREN closed_statement
    (35) non_if_statement_block -> WHILE . LPAREN expression RPAREN block

    LPAREN          shift and go to state 113


state 56

    (25) open_statement -> DO . open_statement WHILE LPAREN expression RPAREN
    (33) closed_statement -> DO . closed_statement WHILE LPAREN expression RPAREN
    (36) non_if_statement_block -> DO . block WHILE LPAREN expression RPAREN
    (19) open_statement -> . IF LPAREN expression RPAREN block
    (20) open_statement -> . IF LPAREN expression RPAREN statement
    (21) open_statement -> . IF LPAREN expression RPAREN block ELSE open_statement
    (22) open_statement -> . IF LPAREN expression RPAREN closed_statement ELSE open_statement
    (23) open_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement
    (24) open_statement -> . WHILE LPAREN expression RPAREN open_statement
    (25) open_statement -> . DO open_statement WHILE LPAREN expression RPAREN
    (26) closed_statement -> . non_if_statement_block
    (27) closed_statement -> . IF LPAREN expression RPAREN block ELSE block
    (28) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE block
    (29) closed_statement -> . IF LPAREN expression RPAREN block ELSE closed_statement
    (30) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE closed_statement
    (31) closed_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement
    (32) closed_statement -> . WHILE LPAREN expression RPAREN closed_statement
    (33) closed_statement -> . DO closed_statement WHILE LPAREN expression RPAREN
    (44) block -> . LCHAVE statements RCHAVE
    (34) non_if_statement_block -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN block
    (35) non_if_statement_block -> . WHILE LPAREN expression RPAREN block
    (36) non_if_statement_block -> . DO block WHILE LPAREN expression RPAREN
    (37) non_if_statement_block -> . PV
    (38) non_if_statement_block -> . propertyDeclarationStm
    (39) non_if_statement_block -> . assignment
    (40) non_if_statement_block -> . chamadaDeFuncao
    (41) non_if_statement_block -> . jumpExpression
    (45) propertyDeclarationStm -> . VAR genericVariableDeclaration ATRIBUICAO expression
    (46) propertyDeclarationStm -> . VAL genericVariableDeclaration ATRIBUICAO expression
    (42) assignment -> . ID ATRIBUICAO expression
    (43) assignment -> . ID assignmentAndOperator expression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (94) jumpExpression -> . RETURN expression
    (95) jumpExpression -> . CONTINUE
    (96) jumpExpression -> . BREAK

    IF              shift and go to state 53
    FOR             shift and go to state 54
    WHILE           shift and go to state 55
    DO              shift and go to state 56
    LCHAVE          shift and go to state 12
    PV              shift and go to state 58
    VAR             shift and go to state 63
    VAL             shift and go to state 64
    ID              shift and go to state 65
    RETURN          shift and go to state 66
    CONTINUE        shift and go to state 67
    BREAK           shift and go to state 68

    open_statement                 shift and go to state 114
    closed_statement               shift and go to state 115
    block                          shift and go to state 116
    non_if_statement_block         shift and go to state 57
    propertyDeclarationStm         shift and go to state 59
    assignment                     shift and go to state 60
    chamadaDeFuncao                shift and go to state 61
    jumpExpression                 shift and go to state 62

state 57

    (26) closed_statement -> non_if_statement_block .

    IF              reduce using rule 26 (closed_statement -> non_if_statement_block .)
    FOR             reduce using rule 26 (closed_statement -> non_if_statement_block .)
    WHILE           reduce using rule 26 (closed_statement -> non_if_statement_block .)
    DO              reduce using rule 26 (closed_statement -> non_if_statement_block .)
    PV              reduce using rule 26 (closed_statement -> non_if_statement_block .)
    VAR             reduce using rule 26 (closed_statement -> non_if_statement_block .)
    VAL             reduce using rule 26 (closed_statement -> non_if_statement_block .)
    ID              reduce using rule 26 (closed_statement -> non_if_statement_block .)
    RETURN          reduce using rule 26 (closed_statement -> non_if_statement_block .)
    CONTINUE        reduce using rule 26 (closed_statement -> non_if_statement_block .)
    BREAK           reduce using rule 26 (closed_statement -> non_if_statement_block .)
    RCHAVE          reduce using rule 26 (closed_statement -> non_if_statement_block .)
    ELSE            reduce using rule 26 (closed_statement -> non_if_statement_block .)


state 58

    (37) non_if_statement_block -> PV .

    IF              reduce using rule 37 (non_if_statement_block -> PV .)
    FOR             reduce using rule 37 (non_if_statement_block -> PV .)
    WHILE           reduce using rule 37 (non_if_statement_block -> PV .)
    DO              reduce using rule 37 (non_if_statement_block -> PV .)
    PV              reduce using rule 37 (non_if_statement_block -> PV .)
    VAR             reduce using rule 37 (non_if_statement_block -> PV .)
    VAL             reduce using rule 37 (non_if_statement_block -> PV .)
    ID              reduce using rule 37 (non_if_statement_block -> PV .)
    RETURN          reduce using rule 37 (non_if_statement_block -> PV .)
    CONTINUE        reduce using rule 37 (non_if_statement_block -> PV .)
    BREAK           reduce using rule 37 (non_if_statement_block -> PV .)
    RCHAVE          reduce using rule 37 (non_if_statement_block -> PV .)
    ELSE            reduce using rule 37 (non_if_statement_block -> PV .)


state 59

    (38) non_if_statement_block -> propertyDeclarationStm .

    IF              reduce using rule 38 (non_if_statement_block -> propertyDeclarationStm .)
    FOR             reduce using rule 38 (non_if_statement_block -> propertyDeclarationStm .)
    WHILE           reduce using rule 38 (non_if_statement_block -> propertyDeclarationStm .)
    DO              reduce using rule 38 (non_if_statement_block -> propertyDeclarationStm .)
    PV              reduce using rule 38 (non_if_statement_block -> propertyDeclarationStm .)
    VAR             reduce using rule 38 (non_if_statement_block -> propertyDeclarationStm .)
    VAL             reduce using rule 38 (non_if_statement_block -> propertyDeclarationStm .)
    ID              reduce using rule 38 (non_if_statement_block -> propertyDeclarationStm .)
    RETURN          reduce using rule 38 (non_if_statement_block -> propertyDeclarationStm .)
    CONTINUE        reduce using rule 38 (non_if_statement_block -> propertyDeclarationStm .)
    BREAK           reduce using rule 38 (non_if_statement_block -> propertyDeclarationStm .)
    RCHAVE          reduce using rule 38 (non_if_statement_block -> propertyDeclarationStm .)
    ELSE            reduce using rule 38 (non_if_statement_block -> propertyDeclarationStm .)


state 60

    (39) non_if_statement_block -> assignment .

    IF              reduce using rule 39 (non_if_statement_block -> assignment .)
    FOR             reduce using rule 39 (non_if_statement_block -> assignment .)
    WHILE           reduce using rule 39 (non_if_statement_block -> assignment .)
    DO              reduce using rule 39 (non_if_statement_block -> assignment .)
    PV              reduce using rule 39 (non_if_statement_block -> assignment .)
    VAR             reduce using rule 39 (non_if_statement_block -> assignment .)
    VAL             reduce using rule 39 (non_if_statement_block -> assignment .)
    ID              reduce using rule 39 (non_if_statement_block -> assignment .)
    RETURN          reduce using rule 39 (non_if_statement_block -> assignment .)
    CONTINUE        reduce using rule 39 (non_if_statement_block -> assignment .)
    BREAK           reduce using rule 39 (non_if_statement_block -> assignment .)
    RCHAVE          reduce using rule 39 (non_if_statement_block -> assignment .)
    ELSE            reduce using rule 39 (non_if_statement_block -> assignment .)


state 61

    (40) non_if_statement_block -> chamadaDeFuncao .

    IF              reduce using rule 40 (non_if_statement_block -> chamadaDeFuncao .)
    FOR             reduce using rule 40 (non_if_statement_block -> chamadaDeFuncao .)
    WHILE           reduce using rule 40 (non_if_statement_block -> chamadaDeFuncao .)
    DO              reduce using rule 40 (non_if_statement_block -> chamadaDeFuncao .)
    PV              reduce using rule 40 (non_if_statement_block -> chamadaDeFuncao .)
    VAR             reduce using rule 40 (non_if_statement_block -> chamadaDeFuncao .)
    VAL             reduce using rule 40 (non_if_statement_block -> chamadaDeFuncao .)
    ID              reduce using rule 40 (non_if_statement_block -> chamadaDeFuncao .)
    RETURN          reduce using rule 40 (non_if_statement_block -> chamadaDeFuncao .)
    CONTINUE        reduce using rule 40 (non_if_statement_block -> chamadaDeFuncao .)
    BREAK           reduce using rule 40 (non_if_statement_block -> chamadaDeFuncao .)
    RCHAVE          reduce using rule 40 (non_if_statement_block -> chamadaDeFuncao .)
    ELSE            reduce using rule 40 (non_if_statement_block -> chamadaDeFuncao .)


state 62

    (41) non_if_statement_block -> jumpExpression .

    IF              reduce using rule 41 (non_if_statement_block -> jumpExpression .)
    FOR             reduce using rule 41 (non_if_statement_block -> jumpExpression .)
    WHILE           reduce using rule 41 (non_if_statement_block -> jumpExpression .)
    DO              reduce using rule 41 (non_if_statement_block -> jumpExpression .)
    PV              reduce using rule 41 (non_if_statement_block -> jumpExpression .)
    VAR             reduce using rule 41 (non_if_statement_block -> jumpExpression .)
    VAL             reduce using rule 41 (non_if_statement_block -> jumpExpression .)
    ID              reduce using rule 41 (non_if_statement_block -> jumpExpression .)
    RETURN          reduce using rule 41 (non_if_statement_block -> jumpExpression .)
    CONTINUE        reduce using rule 41 (non_if_statement_block -> jumpExpression .)
    BREAK           reduce using rule 41 (non_if_statement_block -> jumpExpression .)
    RCHAVE          reduce using rule 41 (non_if_statement_block -> jumpExpression .)
    ELSE            reduce using rule 41 (non_if_statement_block -> jumpExpression .)


state 63

    (45) propertyDeclarationStm -> VAR . genericVariableDeclaration ATRIBUICAO expression
    (49) genericVariableDeclaration -> . multiVariableDeclaration
    (50) genericVariableDeclaration -> . variableDeclaration
    (55) multiVariableDeclaration -> . LPAREN variableDeclarations RPAREN
    (56) multiVariableDeclaration -> . LPAREN RPAREN
    (51) variableDeclaration -> . ID DOISP type
    (52) variableDeclaration -> . ID

    LPAREN          shift and go to state 120
    ID              shift and go to state 121

    genericVariableDeclaration     shift and go to state 117
    multiVariableDeclaration       shift and go to state 118
    variableDeclaration            shift and go to state 119

state 64

    (46) propertyDeclarationStm -> VAL . genericVariableDeclaration ATRIBUICAO expression
    (49) genericVariableDeclaration -> . multiVariableDeclaration
    (50) genericVariableDeclaration -> . variableDeclaration
    (55) multiVariableDeclaration -> . LPAREN variableDeclarations RPAREN
    (56) multiVariableDeclaration -> . LPAREN RPAREN
    (51) variableDeclaration -> . ID DOISP type
    (52) variableDeclaration -> . ID

    LPAREN          shift and go to state 120
    ID              shift and go to state 121

    genericVariableDeclaration     shift and go to state 122
    multiVariableDeclaration       shift and go to state 118
    variableDeclaration            shift and go to state 119

state 65

    (42) assignment -> ID . ATRIBUICAO expression
    (43) assignment -> ID . assignmentAndOperator expression
    (47) chamadaDeFuncao -> ID . LPAREN RPAREN
    (48) chamadaDeFuncao -> ID . LPAREN parametersFunction RPAREN
    (98) assignmentAndOperator -> . MAISIGUAL
    (99) assignmentAndOperator -> . MENOSIGUAL
    (100) assignmentAndOperator -> . MULTIGUAL
    (101) assignmentAndOperator -> . DIVIGUAL
    (102) assignmentAndOperator -> . MODIGUAL

    ATRIBUICAO      shift and go to state 123
    LPAREN          shift and go to state 107
    MAISIGUAL       shift and go to state 125
    MENOSIGUAL      shift and go to state 126
    MULTIGUAL       shift and go to state 127
    DIVIGUAL        shift and go to state 128
    MODIGUAL        shift and go to state 129

    assignmentAndOperator          shift and go to state 124

state 66

    (94) jumpExpression -> RETURN . expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction
    (61) disjunction -> . disjunction OR conjunction
    (62) conjunction -> . equality
    (63) conjunction -> . conjunction AND equality
    (64) equality -> . comparison
    (65) equality -> . equality equalityOperator comparison
    (66) comparison -> . infixOperation
    (67) comparison -> . infixOperation comparisonOperator infixOperation
    (68) infixOperation -> . infixOperation inOperator elvisExpression
    (69) infixOperation -> . infixOperation isOperator type
    (70) infixOperation -> . elvisExpression
    (71) elvisExpression -> . rangeExpression
    (72) elvisExpression -> . elvisExpression ELVIS rangeExpression
    (73) rangeExpression -> . additiveExpression
    (74) rangeExpression -> . rangeExpression PONTOPONTO additiveExpression
    (75) additiveExpression -> . multiplicativeExpression
    (76) additiveExpression -> . additiveExpression additiveOperator multiplicativeExpression
    (77) multiplicativeExpression -> . asExpression
    (78) multiplicativeExpression -> . multiplicativeExpression multiplicativeOperator asExpression
    (79) asExpression -> . unaryExpression
    (80) asExpression -> . unaryExpression asOperator type
    (81) unaryExpression -> . unaryOperator primaryExpression
    (82) unaryExpression -> . primaryExpression
    (83) unaryExpression -> . primaryExpression postfixUnaryOperator
    (122) unaryOperator -> . INCREMENTO
    (123) unaryOperator -> . DECREMENTO
    (124) unaryOperator -> . MINUS
    (125) unaryOperator -> . PLUS
    (126) unaryOperator -> . NOT
    (86) primaryExpression -> . NULL
    (87) primaryExpression -> . TRUE
    (88) primaryExpression -> . FALSE
    (89) primaryExpression -> . NUMBER
    (90) primaryExpression -> . LITERAL_STRING
    (91) primaryExpression -> . ID
    (92) primaryExpression -> . chamadaDeFuncao
    (93) primaryExpression -> . parenthesizedExpression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (97) parenthesizedExpression -> . LPAREN expression RPAREN

    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38
    NOT             shift and go to state 39
    NULL            shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    NUMBER          shift and go to state 43
    LITERAL_STRING  shift and go to state 44
    ID              shift and go to state 45
    LPAREN          shift and go to state 48

    expression                     shift and go to state 130
    disjunction                    shift and go to state 22
    conjunction                    shift and go to state 23
    equality                       shift and go to state 24
    comparison                     shift and go to state 25
    infixOperation                 shift and go to state 26
    elvisExpression                shift and go to state 27
    rangeExpression                shift and go to state 28
    additiveExpression             shift and go to state 29
    multiplicativeExpression       shift and go to state 30
    asExpression                   shift and go to state 31
    unaryExpression                shift and go to state 32
    unaryOperator                  shift and go to state 33
    primaryExpression              shift and go to state 34
    chamadaDeFuncao                shift and go to state 46
    parenthesizedExpression        shift and go to state 47

state 67

    (95) jumpExpression -> CONTINUE .

    IF              reduce using rule 95 (jumpExpression -> CONTINUE .)
    FOR             reduce using rule 95 (jumpExpression -> CONTINUE .)
    WHILE           reduce using rule 95 (jumpExpression -> CONTINUE .)
    DO              reduce using rule 95 (jumpExpression -> CONTINUE .)
    PV              reduce using rule 95 (jumpExpression -> CONTINUE .)
    VAR             reduce using rule 95 (jumpExpression -> CONTINUE .)
    VAL             reduce using rule 95 (jumpExpression -> CONTINUE .)
    ID              reduce using rule 95 (jumpExpression -> CONTINUE .)
    RETURN          reduce using rule 95 (jumpExpression -> CONTINUE .)
    CONTINUE        reduce using rule 95 (jumpExpression -> CONTINUE .)
    BREAK           reduce using rule 95 (jumpExpression -> CONTINUE .)
    RCHAVE          reduce using rule 95 (jumpExpression -> CONTINUE .)
    ELSE            reduce using rule 95 (jumpExpression -> CONTINUE .)


state 68

    (96) jumpExpression -> BREAK .

    IF              reduce using rule 96 (jumpExpression -> BREAK .)
    FOR             reduce using rule 96 (jumpExpression -> BREAK .)
    WHILE           reduce using rule 96 (jumpExpression -> BREAK .)
    DO              reduce using rule 96 (jumpExpression -> BREAK .)
    PV              reduce using rule 96 (jumpExpression -> BREAK .)
    VAR             reduce using rule 96 (jumpExpression -> BREAK .)
    VAL             reduce using rule 96 (jumpExpression -> BREAK .)
    ID              reduce using rule 96 (jumpExpression -> BREAK .)
    RETURN          reduce using rule 96 (jumpExpression -> BREAK .)
    CONTINUE        reduce using rule 96 (jumpExpression -> BREAK .)
    BREAK           reduce using rule 96 (jumpExpression -> BREAK .)
    RCHAVE          reduce using rule 96 (jumpExpression -> BREAK .)
    ELSE            reduce using rule 96 (jumpExpression -> BREAK .)


state 69

    (5) functionValueParameters -> LPAREN parameters RPAREN .

    DOISP           reduce using rule 5 (functionValueParameters -> LPAREN parameters RPAREN .)
    ATRIBUICAO      reduce using rule 5 (functionValueParameters -> LPAREN parameters RPAREN .)
    LCHAVE          reduce using rule 5 (functionValueParameters -> LPAREN parameters RPAREN .)


state 70

    (8) parameters -> parameter COMMA . parameters
    (7) parameters -> . parameter
    (8) parameters -> . parameter COMMA parameters
    (9) parameter -> . ID DOISP type

    ID              shift and go to state 16

    parameter                      shift and go to state 15
    parameters                     shift and go to state 131

state 71

    (9) parameter -> ID DOISP . type
    (10) type -> . parenthesizedType
    (11) type -> . ID
    (12) parenthesizedType -> . LPAREN type RPAREN

    ID              shift and go to state 17
    LPAREN          shift and go to state 20

    type                           shift and go to state 132
    parenthesizedType              shift and go to state 19

state 72

    (4) functionDeclaration -> FUN ID functionValueParameters DOISP type functionBody .

    FUN             reduce using rule 4 (functionDeclaration -> FUN ID functionValueParameters DOISP type functionBody .)
    $end            reduce using rule 4 (functionDeclaration -> FUN ID functionValueParameters DOISP type functionBody .)


state 73

    (12) parenthesizedType -> LPAREN type . RPAREN

    RPAREN          shift and go to state 133


state 74

    (61) disjunction -> disjunction OR . conjunction
    (62) conjunction -> . equality
    (63) conjunction -> . conjunction AND equality
    (64) equality -> . comparison
    (65) equality -> . equality equalityOperator comparison
    (66) comparison -> . infixOperation
    (67) comparison -> . infixOperation comparisonOperator infixOperation
    (68) infixOperation -> . infixOperation inOperator elvisExpression
    (69) infixOperation -> . infixOperation isOperator type
    (70) infixOperation -> . elvisExpression
    (71) elvisExpression -> . rangeExpression
    (72) elvisExpression -> . elvisExpression ELVIS rangeExpression
    (73) rangeExpression -> . additiveExpression
    (74) rangeExpression -> . rangeExpression PONTOPONTO additiveExpression
    (75) additiveExpression -> . multiplicativeExpression
    (76) additiveExpression -> . additiveExpression additiveOperator multiplicativeExpression
    (77) multiplicativeExpression -> . asExpression
    (78) multiplicativeExpression -> . multiplicativeExpression multiplicativeOperator asExpression
    (79) asExpression -> . unaryExpression
    (80) asExpression -> . unaryExpression asOperator type
    (81) unaryExpression -> . unaryOperator primaryExpression
    (82) unaryExpression -> . primaryExpression
    (83) unaryExpression -> . primaryExpression postfixUnaryOperator
    (122) unaryOperator -> . INCREMENTO
    (123) unaryOperator -> . DECREMENTO
    (124) unaryOperator -> . MINUS
    (125) unaryOperator -> . PLUS
    (126) unaryOperator -> . NOT
    (86) primaryExpression -> . NULL
    (87) primaryExpression -> . TRUE
    (88) primaryExpression -> . FALSE
    (89) primaryExpression -> . NUMBER
    (90) primaryExpression -> . LITERAL_STRING
    (91) primaryExpression -> . ID
    (92) primaryExpression -> . chamadaDeFuncao
    (93) primaryExpression -> . parenthesizedExpression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (97) parenthesizedExpression -> . LPAREN expression RPAREN

    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38
    NOT             shift and go to state 39
    NULL            shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    NUMBER          shift and go to state 43
    LITERAL_STRING  shift and go to state 44
    ID              shift and go to state 45
    LPAREN          shift and go to state 48

    conjunction                    shift and go to state 134
    equality                       shift and go to state 24
    comparison                     shift and go to state 25
    infixOperation                 shift and go to state 26
    elvisExpression                shift and go to state 27
    rangeExpression                shift and go to state 28
    additiveExpression             shift and go to state 29
    multiplicativeExpression       shift and go to state 30
    asExpression                   shift and go to state 31
    unaryExpression                shift and go to state 32
    unaryOperator                  shift and go to state 33
    primaryExpression              shift and go to state 34
    chamadaDeFuncao                shift and go to state 46
    parenthesizedExpression        shift and go to state 47

state 75

    (63) conjunction -> conjunction AND . equality
    (64) equality -> . comparison
    (65) equality -> . equality equalityOperator comparison
    (66) comparison -> . infixOperation
    (67) comparison -> . infixOperation comparisonOperator infixOperation
    (68) infixOperation -> . infixOperation inOperator elvisExpression
    (69) infixOperation -> . infixOperation isOperator type
    (70) infixOperation -> . elvisExpression
    (71) elvisExpression -> . rangeExpression
    (72) elvisExpression -> . elvisExpression ELVIS rangeExpression
    (73) rangeExpression -> . additiveExpression
    (74) rangeExpression -> . rangeExpression PONTOPONTO additiveExpression
    (75) additiveExpression -> . multiplicativeExpression
    (76) additiveExpression -> . additiveExpression additiveOperator multiplicativeExpression
    (77) multiplicativeExpression -> . asExpression
    (78) multiplicativeExpression -> . multiplicativeExpression multiplicativeOperator asExpression
    (79) asExpression -> . unaryExpression
    (80) asExpression -> . unaryExpression asOperator type
    (81) unaryExpression -> . unaryOperator primaryExpression
    (82) unaryExpression -> . primaryExpression
    (83) unaryExpression -> . primaryExpression postfixUnaryOperator
    (122) unaryOperator -> . INCREMENTO
    (123) unaryOperator -> . DECREMENTO
    (124) unaryOperator -> . MINUS
    (125) unaryOperator -> . PLUS
    (126) unaryOperator -> . NOT
    (86) primaryExpression -> . NULL
    (87) primaryExpression -> . TRUE
    (88) primaryExpression -> . FALSE
    (89) primaryExpression -> . NUMBER
    (90) primaryExpression -> . LITERAL_STRING
    (91) primaryExpression -> . ID
    (92) primaryExpression -> . chamadaDeFuncao
    (93) primaryExpression -> . parenthesizedExpression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (97) parenthesizedExpression -> . LPAREN expression RPAREN

    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38
    NOT             shift and go to state 39
    NULL            shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    NUMBER          shift and go to state 43
    LITERAL_STRING  shift and go to state 44
    ID              shift and go to state 45
    LPAREN          shift and go to state 48

    equality                       shift and go to state 135
    comparison                     shift and go to state 25
    infixOperation                 shift and go to state 26
    elvisExpression                shift and go to state 27
    rangeExpression                shift and go to state 28
    additiveExpression             shift and go to state 29
    multiplicativeExpression       shift and go to state 30
    asExpression                   shift and go to state 31
    unaryExpression                shift and go to state 32
    unaryOperator                  shift and go to state 33
    primaryExpression              shift and go to state 34
    chamadaDeFuncao                shift and go to state 46
    parenthesizedExpression        shift and go to state 47

state 76

    (65) equality -> equality equalityOperator . comparison
    (66) comparison -> . infixOperation
    (67) comparison -> . infixOperation comparisonOperator infixOperation
    (68) infixOperation -> . infixOperation inOperator elvisExpression
    (69) infixOperation -> . infixOperation isOperator type
    (70) infixOperation -> . elvisExpression
    (71) elvisExpression -> . rangeExpression
    (72) elvisExpression -> . elvisExpression ELVIS rangeExpression
    (73) rangeExpression -> . additiveExpression
    (74) rangeExpression -> . rangeExpression PONTOPONTO additiveExpression
    (75) additiveExpression -> . multiplicativeExpression
    (76) additiveExpression -> . additiveExpression additiveOperator multiplicativeExpression
    (77) multiplicativeExpression -> . asExpression
    (78) multiplicativeExpression -> . multiplicativeExpression multiplicativeOperator asExpression
    (79) asExpression -> . unaryExpression
    (80) asExpression -> . unaryExpression asOperator type
    (81) unaryExpression -> . unaryOperator primaryExpression
    (82) unaryExpression -> . primaryExpression
    (83) unaryExpression -> . primaryExpression postfixUnaryOperator
    (122) unaryOperator -> . INCREMENTO
    (123) unaryOperator -> . DECREMENTO
    (124) unaryOperator -> . MINUS
    (125) unaryOperator -> . PLUS
    (126) unaryOperator -> . NOT
    (86) primaryExpression -> . NULL
    (87) primaryExpression -> . TRUE
    (88) primaryExpression -> . FALSE
    (89) primaryExpression -> . NUMBER
    (90) primaryExpression -> . LITERAL_STRING
    (91) primaryExpression -> . ID
    (92) primaryExpression -> . chamadaDeFuncao
    (93) primaryExpression -> . parenthesizedExpression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (97) parenthesizedExpression -> . LPAREN expression RPAREN

    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38
    NOT             shift and go to state 39
    NULL            shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    NUMBER          shift and go to state 43
    LITERAL_STRING  shift and go to state 44
    ID              shift and go to state 45
    LPAREN          shift and go to state 48

    comparison                     shift and go to state 136
    infixOperation                 shift and go to state 26
    elvisExpression                shift and go to state 27
    rangeExpression                shift and go to state 28
    additiveExpression             shift and go to state 29
    multiplicativeExpression       shift and go to state 30
    asExpression                   shift and go to state 31
    unaryExpression                shift and go to state 32
    unaryOperator                  shift and go to state 33
    primaryExpression              shift and go to state 34
    chamadaDeFuncao                shift and go to state 46
    parenthesizedExpression        shift and go to state 47

state 77

    (103) equalityOperator -> DIFERENTE .

    INCREMENTO      reduce using rule 103 (equalityOperator -> DIFERENTE .)
    DECREMENTO      reduce using rule 103 (equalityOperator -> DIFERENTE .)
    MINUS           reduce using rule 103 (equalityOperator -> DIFERENTE .)
    PLUS            reduce using rule 103 (equalityOperator -> DIFERENTE .)
    NOT             reduce using rule 103 (equalityOperator -> DIFERENTE .)
    NULL            reduce using rule 103 (equalityOperator -> DIFERENTE .)
    TRUE            reduce using rule 103 (equalityOperator -> DIFERENTE .)
    FALSE           reduce using rule 103 (equalityOperator -> DIFERENTE .)
    NUMBER          reduce using rule 103 (equalityOperator -> DIFERENTE .)
    LITERAL_STRING  reduce using rule 103 (equalityOperator -> DIFERENTE .)
    ID              reduce using rule 103 (equalityOperator -> DIFERENTE .)
    LPAREN          reduce using rule 103 (equalityOperator -> DIFERENTE .)


state 78

    (104) equalityOperator -> IDENTIDADE .

    INCREMENTO      reduce using rule 104 (equalityOperator -> IDENTIDADE .)
    DECREMENTO      reduce using rule 104 (equalityOperator -> IDENTIDADE .)
    MINUS           reduce using rule 104 (equalityOperator -> IDENTIDADE .)
    PLUS            reduce using rule 104 (equalityOperator -> IDENTIDADE .)
    NOT             reduce using rule 104 (equalityOperator -> IDENTIDADE .)
    NULL            reduce using rule 104 (equalityOperator -> IDENTIDADE .)
    TRUE            reduce using rule 104 (equalityOperator -> IDENTIDADE .)
    FALSE           reduce using rule 104 (equalityOperator -> IDENTIDADE .)
    NUMBER          reduce using rule 104 (equalityOperator -> IDENTIDADE .)
    LITERAL_STRING  reduce using rule 104 (equalityOperator -> IDENTIDADE .)
    ID              reduce using rule 104 (equalityOperator -> IDENTIDADE .)
    LPAREN          reduce using rule 104 (equalityOperator -> IDENTIDADE .)


state 79

    (105) equalityOperator -> IGUALDADE .

    INCREMENTO      reduce using rule 105 (equalityOperator -> IGUALDADE .)
    DECREMENTO      reduce using rule 105 (equalityOperator -> IGUALDADE .)
    MINUS           reduce using rule 105 (equalityOperator -> IGUALDADE .)
    PLUS            reduce using rule 105 (equalityOperator -> IGUALDADE .)
    NOT             reduce using rule 105 (equalityOperator -> IGUALDADE .)
    NULL            reduce using rule 105 (equalityOperator -> IGUALDADE .)
    TRUE            reduce using rule 105 (equalityOperator -> IGUALDADE .)
    FALSE           reduce using rule 105 (equalityOperator -> IGUALDADE .)
    NUMBER          reduce using rule 105 (equalityOperator -> IGUALDADE .)
    LITERAL_STRING  reduce using rule 105 (equalityOperator -> IGUALDADE .)
    ID              reduce using rule 105 (equalityOperator -> IGUALDADE .)
    LPAREN          reduce using rule 105 (equalityOperator -> IGUALDADE .)


state 80

    (106) equalityOperator -> SEMIDENTIDADE .

    INCREMENTO      reduce using rule 106 (equalityOperator -> SEMIDENTIDADE .)
    DECREMENTO      reduce using rule 106 (equalityOperator -> SEMIDENTIDADE .)
    MINUS           reduce using rule 106 (equalityOperator -> SEMIDENTIDADE .)
    PLUS            reduce using rule 106 (equalityOperator -> SEMIDENTIDADE .)
    NOT             reduce using rule 106 (equalityOperator -> SEMIDENTIDADE .)
    NULL            reduce using rule 106 (equalityOperator -> SEMIDENTIDADE .)
    TRUE            reduce using rule 106 (equalityOperator -> SEMIDENTIDADE .)
    FALSE           reduce using rule 106 (equalityOperator -> SEMIDENTIDADE .)
    NUMBER          reduce using rule 106 (equalityOperator -> SEMIDENTIDADE .)
    LITERAL_STRING  reduce using rule 106 (equalityOperator -> SEMIDENTIDADE .)
    ID              reduce using rule 106 (equalityOperator -> SEMIDENTIDADE .)
    LPAREN          reduce using rule 106 (equalityOperator -> SEMIDENTIDADE .)


state 81

    (67) comparison -> infixOperation comparisonOperator . infixOperation
    (68) infixOperation -> . infixOperation inOperator elvisExpression
    (69) infixOperation -> . infixOperation isOperator type
    (70) infixOperation -> . elvisExpression
    (71) elvisExpression -> . rangeExpression
    (72) elvisExpression -> . elvisExpression ELVIS rangeExpression
    (73) rangeExpression -> . additiveExpression
    (74) rangeExpression -> . rangeExpression PONTOPONTO additiveExpression
    (75) additiveExpression -> . multiplicativeExpression
    (76) additiveExpression -> . additiveExpression additiveOperator multiplicativeExpression
    (77) multiplicativeExpression -> . asExpression
    (78) multiplicativeExpression -> . multiplicativeExpression multiplicativeOperator asExpression
    (79) asExpression -> . unaryExpression
    (80) asExpression -> . unaryExpression asOperator type
    (81) unaryExpression -> . unaryOperator primaryExpression
    (82) unaryExpression -> . primaryExpression
    (83) unaryExpression -> . primaryExpression postfixUnaryOperator
    (122) unaryOperator -> . INCREMENTO
    (123) unaryOperator -> . DECREMENTO
    (124) unaryOperator -> . MINUS
    (125) unaryOperator -> . PLUS
    (126) unaryOperator -> . NOT
    (86) primaryExpression -> . NULL
    (87) primaryExpression -> . TRUE
    (88) primaryExpression -> . FALSE
    (89) primaryExpression -> . NUMBER
    (90) primaryExpression -> . LITERAL_STRING
    (91) primaryExpression -> . ID
    (92) primaryExpression -> . chamadaDeFuncao
    (93) primaryExpression -> . parenthesizedExpression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (97) parenthesizedExpression -> . LPAREN expression RPAREN

    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38
    NOT             shift and go to state 39
    NULL            shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    NUMBER          shift and go to state 43
    LITERAL_STRING  shift and go to state 44
    ID              shift and go to state 45
    LPAREN          shift and go to state 48

    infixOperation                 shift and go to state 137
    elvisExpression                shift and go to state 27
    rangeExpression                shift and go to state 28
    additiveExpression             shift and go to state 29
    multiplicativeExpression       shift and go to state 30
    asExpression                   shift and go to state 31
    unaryExpression                shift and go to state 32
    unaryOperator                  shift and go to state 33
    primaryExpression              shift and go to state 34
    chamadaDeFuncao                shift and go to state 46
    parenthesizedExpression        shift and go to state 47

state 82

    (68) infixOperation -> infixOperation inOperator . elvisExpression
    (71) elvisExpression -> . rangeExpression
    (72) elvisExpression -> . elvisExpression ELVIS rangeExpression
    (73) rangeExpression -> . additiveExpression
    (74) rangeExpression -> . rangeExpression PONTOPONTO additiveExpression
    (75) additiveExpression -> . multiplicativeExpression
    (76) additiveExpression -> . additiveExpression additiveOperator multiplicativeExpression
    (77) multiplicativeExpression -> . asExpression
    (78) multiplicativeExpression -> . multiplicativeExpression multiplicativeOperator asExpression
    (79) asExpression -> . unaryExpression
    (80) asExpression -> . unaryExpression asOperator type
    (81) unaryExpression -> . unaryOperator primaryExpression
    (82) unaryExpression -> . primaryExpression
    (83) unaryExpression -> . primaryExpression postfixUnaryOperator
    (122) unaryOperator -> . INCREMENTO
    (123) unaryOperator -> . DECREMENTO
    (124) unaryOperator -> . MINUS
    (125) unaryOperator -> . PLUS
    (126) unaryOperator -> . NOT
    (86) primaryExpression -> . NULL
    (87) primaryExpression -> . TRUE
    (88) primaryExpression -> . FALSE
    (89) primaryExpression -> . NUMBER
    (90) primaryExpression -> . LITERAL_STRING
    (91) primaryExpression -> . ID
    (92) primaryExpression -> . chamadaDeFuncao
    (93) primaryExpression -> . parenthesizedExpression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (97) parenthesizedExpression -> . LPAREN expression RPAREN

    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38
    NOT             shift and go to state 39
    NULL            shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    NUMBER          shift and go to state 43
    LITERAL_STRING  shift and go to state 44
    ID              shift and go to state 45
    LPAREN          shift and go to state 48

    elvisExpression                shift and go to state 138
    rangeExpression                shift and go to state 28
    additiveExpression             shift and go to state 29
    multiplicativeExpression       shift and go to state 30
    asExpression                   shift and go to state 31
    unaryExpression                shift and go to state 32
    unaryOperator                  shift and go to state 33
    primaryExpression              shift and go to state 34
    chamadaDeFuncao                shift and go to state 46
    parenthesizedExpression        shift and go to state 47

state 83

    (69) infixOperation -> infixOperation isOperator . type
    (10) type -> . parenthesizedType
    (11) type -> . ID
    (12) parenthesizedType -> . LPAREN type RPAREN

    ID              shift and go to state 17
    LPAREN          shift and go to state 20

    type                           shift and go to state 139
    parenthesizedType              shift and go to state 19

state 84

    (107) comparisonOperator -> MENOR .

    INCREMENTO      reduce using rule 107 (comparisonOperator -> MENOR .)
    DECREMENTO      reduce using rule 107 (comparisonOperator -> MENOR .)
    MINUS           reduce using rule 107 (comparisonOperator -> MENOR .)
    PLUS            reduce using rule 107 (comparisonOperator -> MENOR .)
    NOT             reduce using rule 107 (comparisonOperator -> MENOR .)
    NULL            reduce using rule 107 (comparisonOperator -> MENOR .)
    TRUE            reduce using rule 107 (comparisonOperator -> MENOR .)
    FALSE           reduce using rule 107 (comparisonOperator -> MENOR .)
    NUMBER          reduce using rule 107 (comparisonOperator -> MENOR .)
    LITERAL_STRING  reduce using rule 107 (comparisonOperator -> MENOR .)
    ID              reduce using rule 107 (comparisonOperator -> MENOR .)
    LPAREN          reduce using rule 107 (comparisonOperator -> MENOR .)


state 85

    (108) comparisonOperator -> MAIOR .

    INCREMENTO      reduce using rule 108 (comparisonOperator -> MAIOR .)
    DECREMENTO      reduce using rule 108 (comparisonOperator -> MAIOR .)
    MINUS           reduce using rule 108 (comparisonOperator -> MAIOR .)
    PLUS            reduce using rule 108 (comparisonOperator -> MAIOR .)
    NOT             reduce using rule 108 (comparisonOperator -> MAIOR .)
    NULL            reduce using rule 108 (comparisonOperator -> MAIOR .)
    TRUE            reduce using rule 108 (comparisonOperator -> MAIOR .)
    FALSE           reduce using rule 108 (comparisonOperator -> MAIOR .)
    NUMBER          reduce using rule 108 (comparisonOperator -> MAIOR .)
    LITERAL_STRING  reduce using rule 108 (comparisonOperator -> MAIOR .)
    ID              reduce using rule 108 (comparisonOperator -> MAIOR .)
    LPAREN          reduce using rule 108 (comparisonOperator -> MAIOR .)


state 86

    (109) comparisonOperator -> MENORIGUAL .

    INCREMENTO      reduce using rule 109 (comparisonOperator -> MENORIGUAL .)
    DECREMENTO      reduce using rule 109 (comparisonOperator -> MENORIGUAL .)
    MINUS           reduce using rule 109 (comparisonOperator -> MENORIGUAL .)
    PLUS            reduce using rule 109 (comparisonOperator -> MENORIGUAL .)
    NOT             reduce using rule 109 (comparisonOperator -> MENORIGUAL .)
    NULL            reduce using rule 109 (comparisonOperator -> MENORIGUAL .)
    TRUE            reduce using rule 109 (comparisonOperator -> MENORIGUAL .)
    FALSE           reduce using rule 109 (comparisonOperator -> MENORIGUAL .)
    NUMBER          reduce using rule 109 (comparisonOperator -> MENORIGUAL .)
    LITERAL_STRING  reduce using rule 109 (comparisonOperator -> MENORIGUAL .)
    ID              reduce using rule 109 (comparisonOperator -> MENORIGUAL .)
    LPAREN          reduce using rule 109 (comparisonOperator -> MENORIGUAL .)


state 87

    (110) comparisonOperator -> MAIORIGUAL .

    INCREMENTO      reduce using rule 110 (comparisonOperator -> MAIORIGUAL .)
    DECREMENTO      reduce using rule 110 (comparisonOperator -> MAIORIGUAL .)
    MINUS           reduce using rule 110 (comparisonOperator -> MAIORIGUAL .)
    PLUS            reduce using rule 110 (comparisonOperator -> MAIORIGUAL .)
    NOT             reduce using rule 110 (comparisonOperator -> MAIORIGUAL .)
    NULL            reduce using rule 110 (comparisonOperator -> MAIORIGUAL .)
    TRUE            reduce using rule 110 (comparisonOperator -> MAIORIGUAL .)
    FALSE           reduce using rule 110 (comparisonOperator -> MAIORIGUAL .)
    NUMBER          reduce using rule 110 (comparisonOperator -> MAIORIGUAL .)
    LITERAL_STRING  reduce using rule 110 (comparisonOperator -> MAIORIGUAL .)
    ID              reduce using rule 110 (comparisonOperator -> MAIORIGUAL .)
    LPAREN          reduce using rule 110 (comparisonOperator -> MAIORIGUAL .)


state 88

    (111) inOperator -> IN .

    INCREMENTO      reduce using rule 111 (inOperator -> IN .)
    DECREMENTO      reduce using rule 111 (inOperator -> IN .)
    MINUS           reduce using rule 111 (inOperator -> IN .)
    PLUS            reduce using rule 111 (inOperator -> IN .)
    NOT             reduce using rule 111 (inOperator -> IN .)
    NULL            reduce using rule 111 (inOperator -> IN .)
    TRUE            reduce using rule 111 (inOperator -> IN .)
    FALSE           reduce using rule 111 (inOperator -> IN .)
    NUMBER          reduce using rule 111 (inOperator -> IN .)
    LITERAL_STRING  reduce using rule 111 (inOperator -> IN .)
    ID              reduce using rule 111 (inOperator -> IN .)
    LPAREN          reduce using rule 111 (inOperator -> IN .)


state 89

    (112) inOperator -> NOT_IN .

    INCREMENTO      reduce using rule 112 (inOperator -> NOT_IN .)
    DECREMENTO      reduce using rule 112 (inOperator -> NOT_IN .)
    MINUS           reduce using rule 112 (inOperator -> NOT_IN .)
    PLUS            reduce using rule 112 (inOperator -> NOT_IN .)
    NOT             reduce using rule 112 (inOperator -> NOT_IN .)
    NULL            reduce using rule 112 (inOperator -> NOT_IN .)
    TRUE            reduce using rule 112 (inOperator -> NOT_IN .)
    FALSE           reduce using rule 112 (inOperator -> NOT_IN .)
    NUMBER          reduce using rule 112 (inOperator -> NOT_IN .)
    LITERAL_STRING  reduce using rule 112 (inOperator -> NOT_IN .)
    ID              reduce using rule 112 (inOperator -> NOT_IN .)
    LPAREN          reduce using rule 112 (inOperator -> NOT_IN .)


state 90

    (113) isOperator -> IS .

    ID              reduce using rule 113 (isOperator -> IS .)
    LPAREN          reduce using rule 113 (isOperator -> IS .)


state 91

    (114) isOperator -> NOT_IS .

    ID              reduce using rule 114 (isOperator -> NOT_IS .)
    LPAREN          reduce using rule 114 (isOperator -> NOT_IS .)


state 92

    (72) elvisExpression -> elvisExpression ELVIS . rangeExpression
    (73) rangeExpression -> . additiveExpression
    (74) rangeExpression -> . rangeExpression PONTOPONTO additiveExpression
    (75) additiveExpression -> . multiplicativeExpression
    (76) additiveExpression -> . additiveExpression additiveOperator multiplicativeExpression
    (77) multiplicativeExpression -> . asExpression
    (78) multiplicativeExpression -> . multiplicativeExpression multiplicativeOperator asExpression
    (79) asExpression -> . unaryExpression
    (80) asExpression -> . unaryExpression asOperator type
    (81) unaryExpression -> . unaryOperator primaryExpression
    (82) unaryExpression -> . primaryExpression
    (83) unaryExpression -> . primaryExpression postfixUnaryOperator
    (122) unaryOperator -> . INCREMENTO
    (123) unaryOperator -> . DECREMENTO
    (124) unaryOperator -> . MINUS
    (125) unaryOperator -> . PLUS
    (126) unaryOperator -> . NOT
    (86) primaryExpression -> . NULL
    (87) primaryExpression -> . TRUE
    (88) primaryExpression -> . FALSE
    (89) primaryExpression -> . NUMBER
    (90) primaryExpression -> . LITERAL_STRING
    (91) primaryExpression -> . ID
    (92) primaryExpression -> . chamadaDeFuncao
    (93) primaryExpression -> . parenthesizedExpression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (97) parenthesizedExpression -> . LPAREN expression RPAREN

    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38
    NOT             shift and go to state 39
    NULL            shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    NUMBER          shift and go to state 43
    LITERAL_STRING  shift and go to state 44
    ID              shift and go to state 45
    LPAREN          shift and go to state 48

    rangeExpression                shift and go to state 140
    additiveExpression             shift and go to state 29
    multiplicativeExpression       shift and go to state 30
    asExpression                   shift and go to state 31
    unaryExpression                shift and go to state 32
    unaryOperator                  shift and go to state 33
    primaryExpression              shift and go to state 34
    chamadaDeFuncao                shift and go to state 46
    parenthesizedExpression        shift and go to state 47

state 93

    (74) rangeExpression -> rangeExpression PONTOPONTO . additiveExpression
    (75) additiveExpression -> . multiplicativeExpression
    (76) additiveExpression -> . additiveExpression additiveOperator multiplicativeExpression
    (77) multiplicativeExpression -> . asExpression
    (78) multiplicativeExpression -> . multiplicativeExpression multiplicativeOperator asExpression
    (79) asExpression -> . unaryExpression
    (80) asExpression -> . unaryExpression asOperator type
    (81) unaryExpression -> . unaryOperator primaryExpression
    (82) unaryExpression -> . primaryExpression
    (83) unaryExpression -> . primaryExpression postfixUnaryOperator
    (122) unaryOperator -> . INCREMENTO
    (123) unaryOperator -> . DECREMENTO
    (124) unaryOperator -> . MINUS
    (125) unaryOperator -> . PLUS
    (126) unaryOperator -> . NOT
    (86) primaryExpression -> . NULL
    (87) primaryExpression -> . TRUE
    (88) primaryExpression -> . FALSE
    (89) primaryExpression -> . NUMBER
    (90) primaryExpression -> . LITERAL_STRING
    (91) primaryExpression -> . ID
    (92) primaryExpression -> . chamadaDeFuncao
    (93) primaryExpression -> . parenthesizedExpression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (97) parenthesizedExpression -> . LPAREN expression RPAREN

    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38
    NOT             shift and go to state 39
    NULL            shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    NUMBER          shift and go to state 43
    LITERAL_STRING  shift and go to state 44
    ID              shift and go to state 45
    LPAREN          shift and go to state 48

    additiveExpression             shift and go to state 141
    multiplicativeExpression       shift and go to state 30
    asExpression                   shift and go to state 31
    unaryExpression                shift and go to state 32
    unaryOperator                  shift and go to state 33
    primaryExpression              shift and go to state 34
    chamadaDeFuncao                shift and go to state 46
    parenthesizedExpression        shift and go to state 47

state 94

    (76) additiveExpression -> additiveExpression additiveOperator . multiplicativeExpression
    (77) multiplicativeExpression -> . asExpression
    (78) multiplicativeExpression -> . multiplicativeExpression multiplicativeOperator asExpression
    (79) asExpression -> . unaryExpression
    (80) asExpression -> . unaryExpression asOperator type
    (81) unaryExpression -> . unaryOperator primaryExpression
    (82) unaryExpression -> . primaryExpression
    (83) unaryExpression -> . primaryExpression postfixUnaryOperator
    (122) unaryOperator -> . INCREMENTO
    (123) unaryOperator -> . DECREMENTO
    (124) unaryOperator -> . MINUS
    (125) unaryOperator -> . PLUS
    (126) unaryOperator -> . NOT
    (86) primaryExpression -> . NULL
    (87) primaryExpression -> . TRUE
    (88) primaryExpression -> . FALSE
    (89) primaryExpression -> . NUMBER
    (90) primaryExpression -> . LITERAL_STRING
    (91) primaryExpression -> . ID
    (92) primaryExpression -> . chamadaDeFuncao
    (93) primaryExpression -> . parenthesizedExpression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (97) parenthesizedExpression -> . LPAREN expression RPAREN

    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38
    NOT             shift and go to state 39
    NULL            shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    NUMBER          shift and go to state 43
    LITERAL_STRING  shift and go to state 44
    ID              shift and go to state 45
    LPAREN          shift and go to state 48

    multiplicativeExpression       shift and go to state 142
    asExpression                   shift and go to state 31
    unaryExpression                shift and go to state 32
    unaryOperator                  shift and go to state 33
    primaryExpression              shift and go to state 34
    chamadaDeFuncao                shift and go to state 46
    parenthesizedExpression        shift and go to state 47

state 95

    (115) additiveOperator -> PLUS .

    INCREMENTO      reduce using rule 115 (additiveOperator -> PLUS .)
    DECREMENTO      reduce using rule 115 (additiveOperator -> PLUS .)
    MINUS           reduce using rule 115 (additiveOperator -> PLUS .)
    PLUS            reduce using rule 115 (additiveOperator -> PLUS .)
    NOT             reduce using rule 115 (additiveOperator -> PLUS .)
    NULL            reduce using rule 115 (additiveOperator -> PLUS .)
    TRUE            reduce using rule 115 (additiveOperator -> PLUS .)
    FALSE           reduce using rule 115 (additiveOperator -> PLUS .)
    NUMBER          reduce using rule 115 (additiveOperator -> PLUS .)
    LITERAL_STRING  reduce using rule 115 (additiveOperator -> PLUS .)
    ID              reduce using rule 115 (additiveOperator -> PLUS .)
    LPAREN          reduce using rule 115 (additiveOperator -> PLUS .)


state 96

    (116) additiveOperator -> MINUS .

    INCREMENTO      reduce using rule 116 (additiveOperator -> MINUS .)
    DECREMENTO      reduce using rule 116 (additiveOperator -> MINUS .)
    MINUS           reduce using rule 116 (additiveOperator -> MINUS .)
    PLUS            reduce using rule 116 (additiveOperator -> MINUS .)
    NOT             reduce using rule 116 (additiveOperator -> MINUS .)
    NULL            reduce using rule 116 (additiveOperator -> MINUS .)
    TRUE            reduce using rule 116 (additiveOperator -> MINUS .)
    FALSE           reduce using rule 116 (additiveOperator -> MINUS .)
    NUMBER          reduce using rule 116 (additiveOperator -> MINUS .)
    LITERAL_STRING  reduce using rule 116 (additiveOperator -> MINUS .)
    ID              reduce using rule 116 (additiveOperator -> MINUS .)
    LPAREN          reduce using rule 116 (additiveOperator -> MINUS .)


state 97

    (78) multiplicativeExpression -> multiplicativeExpression multiplicativeOperator . asExpression
    (79) asExpression -> . unaryExpression
    (80) asExpression -> . unaryExpression asOperator type
    (81) unaryExpression -> . unaryOperator primaryExpression
    (82) unaryExpression -> . primaryExpression
    (83) unaryExpression -> . primaryExpression postfixUnaryOperator
    (122) unaryOperator -> . INCREMENTO
    (123) unaryOperator -> . DECREMENTO
    (124) unaryOperator -> . MINUS
    (125) unaryOperator -> . PLUS
    (126) unaryOperator -> . NOT
    (86) primaryExpression -> . NULL
    (87) primaryExpression -> . TRUE
    (88) primaryExpression -> . FALSE
    (89) primaryExpression -> . NUMBER
    (90) primaryExpression -> . LITERAL_STRING
    (91) primaryExpression -> . ID
    (92) primaryExpression -> . chamadaDeFuncao
    (93) primaryExpression -> . parenthesizedExpression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (97) parenthesizedExpression -> . LPAREN expression RPAREN

    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38
    NOT             shift and go to state 39
    NULL            shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    NUMBER          shift and go to state 43
    LITERAL_STRING  shift and go to state 44
    ID              shift and go to state 45
    LPAREN          shift and go to state 48

    asExpression                   shift and go to state 143
    unaryExpression                shift and go to state 32
    unaryOperator                  shift and go to state 33
    primaryExpression              shift and go to state 34
    chamadaDeFuncao                shift and go to state 46
    parenthesizedExpression        shift and go to state 47

state 98

    (117) multiplicativeOperator -> MULT .

    INCREMENTO      reduce using rule 117 (multiplicativeOperator -> MULT .)
    DECREMENTO      reduce using rule 117 (multiplicativeOperator -> MULT .)
    MINUS           reduce using rule 117 (multiplicativeOperator -> MULT .)
    PLUS            reduce using rule 117 (multiplicativeOperator -> MULT .)
    NOT             reduce using rule 117 (multiplicativeOperator -> MULT .)
    NULL            reduce using rule 117 (multiplicativeOperator -> MULT .)
    TRUE            reduce using rule 117 (multiplicativeOperator -> MULT .)
    FALSE           reduce using rule 117 (multiplicativeOperator -> MULT .)
    NUMBER          reduce using rule 117 (multiplicativeOperator -> MULT .)
    LITERAL_STRING  reduce using rule 117 (multiplicativeOperator -> MULT .)
    ID              reduce using rule 117 (multiplicativeOperator -> MULT .)
    LPAREN          reduce using rule 117 (multiplicativeOperator -> MULT .)


state 99

    (118) multiplicativeOperator -> DIVIDE .

    INCREMENTO      reduce using rule 118 (multiplicativeOperator -> DIVIDE .)
    DECREMENTO      reduce using rule 118 (multiplicativeOperator -> DIVIDE .)
    MINUS           reduce using rule 118 (multiplicativeOperator -> DIVIDE .)
    PLUS            reduce using rule 118 (multiplicativeOperator -> DIVIDE .)
    NOT             reduce using rule 118 (multiplicativeOperator -> DIVIDE .)
    NULL            reduce using rule 118 (multiplicativeOperator -> DIVIDE .)
    TRUE            reduce using rule 118 (multiplicativeOperator -> DIVIDE .)
    FALSE           reduce using rule 118 (multiplicativeOperator -> DIVIDE .)
    NUMBER          reduce using rule 118 (multiplicativeOperator -> DIVIDE .)
    LITERAL_STRING  reduce using rule 118 (multiplicativeOperator -> DIVIDE .)
    ID              reduce using rule 118 (multiplicativeOperator -> DIVIDE .)
    LPAREN          reduce using rule 118 (multiplicativeOperator -> DIVIDE .)


state 100

    (119) multiplicativeOperator -> MOD .

    INCREMENTO      reduce using rule 119 (multiplicativeOperator -> MOD .)
    DECREMENTO      reduce using rule 119 (multiplicativeOperator -> MOD .)
    MINUS           reduce using rule 119 (multiplicativeOperator -> MOD .)
    PLUS            reduce using rule 119 (multiplicativeOperator -> MOD .)
    NOT             reduce using rule 119 (multiplicativeOperator -> MOD .)
    NULL            reduce using rule 119 (multiplicativeOperator -> MOD .)
    TRUE            reduce using rule 119 (multiplicativeOperator -> MOD .)
    FALSE           reduce using rule 119 (multiplicativeOperator -> MOD .)
    NUMBER          reduce using rule 119 (multiplicativeOperator -> MOD .)
    LITERAL_STRING  reduce using rule 119 (multiplicativeOperator -> MOD .)
    ID              reduce using rule 119 (multiplicativeOperator -> MOD .)
    LPAREN          reduce using rule 119 (multiplicativeOperator -> MOD .)


state 101

    (80) asExpression -> unaryExpression asOperator . type
    (10) type -> . parenthesizedType
    (11) type -> . ID
    (12) parenthesizedType -> . LPAREN type RPAREN

    ID              shift and go to state 17
    LPAREN          shift and go to state 20

    type                           shift and go to state 144
    parenthesizedType              shift and go to state 19

state 102

    (120) asOperator -> AS .
    (121) asOperator -> AS . asOperator
    (120) asOperator -> . AS
    (121) asOperator -> . AS asOperator

    ID              reduce using rule 120 (asOperator -> AS .)
    LPAREN          reduce using rule 120 (asOperator -> AS .)
    AS              shift and go to state 102

    asOperator                     shift and go to state 145

state 103

    (81) unaryExpression -> unaryOperator primaryExpression .

    AS              reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    MULT            reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    DIVIDE          reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    MOD             reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    PLUS            reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    MINUS           reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    PONTOPONTO      reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    ELVIS           reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    MENOR           reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    MAIOR           reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    MENORIGUAL      reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    MAIORIGUAL      reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    IN              reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    NOT_IN          reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    IS              reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    NOT_IS          reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    DIFERENTE       reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    IDENTIDADE      reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    IGUALDADE       reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    SEMIDENTIDADE   reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    AND             reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    OR              reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    FUN             reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    $end            reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    RPAREN          reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    IF              reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    FOR             reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    WHILE           reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    DO              reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    PV              reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    VAR             reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    VAL             reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    ID              reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    RETURN          reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    CONTINUE        reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    BREAK           reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    RCHAVE          reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)
    ELSE            reduce using rule 81 (unaryExpression -> unaryOperator primaryExpression .)


state 104

    (83) unaryExpression -> primaryExpression postfixUnaryOperator .

    AS              reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    MULT            reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    DIVIDE          reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    MOD             reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    PLUS            reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    MINUS           reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    PONTOPONTO      reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    ELVIS           reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    MENOR           reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    MAIOR           reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    MENORIGUAL      reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    MAIORIGUAL      reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    IN              reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    NOT_IN          reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    IS              reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    NOT_IS          reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    DIFERENTE       reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    IDENTIDADE      reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    IGUALDADE       reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    SEMIDENTIDADE   reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    AND             reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    OR              reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    FUN             reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    $end            reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    RPAREN          reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    IF              reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    FOR             reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    WHILE           reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    DO              reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    PV              reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    VAR             reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    VAL             reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    ID              reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    RETURN          reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    CONTINUE        reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    BREAK           reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    RCHAVE          reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)
    ELSE            reduce using rule 83 (unaryExpression -> primaryExpression postfixUnaryOperator .)


state 105

    (84) postfixUnaryOperator -> INCREMENTO .

    AS              reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    MULT            reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    DIVIDE          reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    MOD             reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    PLUS            reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    MINUS           reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    PONTOPONTO      reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    ELVIS           reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    MENOR           reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    MAIOR           reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    MENORIGUAL      reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    MAIORIGUAL      reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    IN              reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    NOT_IN          reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    IS              reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    NOT_IS          reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    DIFERENTE       reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    IDENTIDADE      reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    IGUALDADE       reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    SEMIDENTIDADE   reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    AND             reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    OR              reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    FUN             reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    $end            reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    RPAREN          reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    IF              reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    FOR             reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    WHILE           reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    DO              reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    PV              reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    VAR             reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    VAL             reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    ID              reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    RETURN          reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    CONTINUE        reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    BREAK           reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    RCHAVE          reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)
    ELSE            reduce using rule 84 (postfixUnaryOperator -> INCREMENTO .)


state 106

    (85) postfixUnaryOperator -> DECREMENTO .

    AS              reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    MULT            reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    DIVIDE          reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    MOD             reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    PLUS            reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    MINUS           reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    PONTOPONTO      reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    ELVIS           reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    MENOR           reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    MAIOR           reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    MENORIGUAL      reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    MAIORIGUAL      reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    IN              reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    NOT_IN          reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    IS              reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    NOT_IS          reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    DIFERENTE       reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    IDENTIDADE      reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    IGUALDADE       reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    SEMIDENTIDADE   reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    AND             reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    OR              reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    FUN             reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    $end            reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    RPAREN          reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    IF              reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    FOR             reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    WHILE           reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    DO              reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    PV              reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    VAR             reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    VAL             reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    ID              reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    RETURN          reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    CONTINUE        reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    BREAK           reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    RCHAVE          reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)
    ELSE            reduce using rule 85 (postfixUnaryOperator -> DECREMENTO .)


state 107

    (47) chamadaDeFuncao -> ID LPAREN . RPAREN
    (48) chamadaDeFuncao -> ID LPAREN . parametersFunction RPAREN
    (57) parametersFunction -> . primaryExpression
    (58) parametersFunction -> . primaryExpression COMMA parametersFunction
    (86) primaryExpression -> . NULL
    (87) primaryExpression -> . TRUE
    (88) primaryExpression -> . FALSE
    (89) primaryExpression -> . NUMBER
    (90) primaryExpression -> . LITERAL_STRING
    (91) primaryExpression -> . ID
    (92) primaryExpression -> . chamadaDeFuncao
    (93) primaryExpression -> . parenthesizedExpression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (97) parenthesizedExpression -> . LPAREN expression RPAREN

    RPAREN          shift and go to state 146
    NULL            shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    NUMBER          shift and go to state 43
    LITERAL_STRING  shift and go to state 44
    ID              shift and go to state 45
    LPAREN          shift and go to state 48

    parametersFunction             shift and go to state 147
    primaryExpression              shift and go to state 148
    chamadaDeFuncao                shift and go to state 46
    parenthesizedExpression        shift and go to state 47

state 108

    (97) parenthesizedExpression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 149


state 109

    (44) block -> LCHAVE statements RCHAVE .

    FUN             reduce using rule 44 (block -> LCHAVE statements RCHAVE .)
    $end            reduce using rule 44 (block -> LCHAVE statements RCHAVE .)
    WHILE           reduce using rule 44 (block -> LCHAVE statements RCHAVE .)
    ELSE            reduce using rule 44 (block -> LCHAVE statements RCHAVE .)
    IF              reduce using rule 44 (block -> LCHAVE statements RCHAVE .)
    FOR             reduce using rule 44 (block -> LCHAVE statements RCHAVE .)
    DO              reduce using rule 44 (block -> LCHAVE statements RCHAVE .)
    PV              reduce using rule 44 (block -> LCHAVE statements RCHAVE .)
    VAR             reduce using rule 44 (block -> LCHAVE statements RCHAVE .)
    VAL             reduce using rule 44 (block -> LCHAVE statements RCHAVE .)
    ID              reduce using rule 44 (block -> LCHAVE statements RCHAVE .)
    RETURN          reduce using rule 44 (block -> LCHAVE statements RCHAVE .)
    CONTINUE        reduce using rule 44 (block -> LCHAVE statements RCHAVE .)
    BREAK           reduce using rule 44 (block -> LCHAVE statements RCHAVE .)
    RCHAVE          reduce using rule 44 (block -> LCHAVE statements RCHAVE .)


state 110

    (16) statements -> statement statements .

    RCHAVE          reduce using rule 16 (statements -> statement statements .)


state 111

    (19) open_statement -> IF LPAREN . expression RPAREN block
    (20) open_statement -> IF LPAREN . expression RPAREN statement
    (21) open_statement -> IF LPAREN . expression RPAREN block ELSE open_statement
    (22) open_statement -> IF LPAREN . expression RPAREN closed_statement ELSE open_statement
    (27) closed_statement -> IF LPAREN . expression RPAREN block ELSE block
    (28) closed_statement -> IF LPAREN . expression RPAREN closed_statement ELSE block
    (29) closed_statement -> IF LPAREN . expression RPAREN block ELSE closed_statement
    (30) closed_statement -> IF LPAREN . expression RPAREN closed_statement ELSE closed_statement
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction
    (61) disjunction -> . disjunction OR conjunction
    (62) conjunction -> . equality
    (63) conjunction -> . conjunction AND equality
    (64) equality -> . comparison
    (65) equality -> . equality equalityOperator comparison
    (66) comparison -> . infixOperation
    (67) comparison -> . infixOperation comparisonOperator infixOperation
    (68) infixOperation -> . infixOperation inOperator elvisExpression
    (69) infixOperation -> . infixOperation isOperator type
    (70) infixOperation -> . elvisExpression
    (71) elvisExpression -> . rangeExpression
    (72) elvisExpression -> . elvisExpression ELVIS rangeExpression
    (73) rangeExpression -> . additiveExpression
    (74) rangeExpression -> . rangeExpression PONTOPONTO additiveExpression
    (75) additiveExpression -> . multiplicativeExpression
    (76) additiveExpression -> . additiveExpression additiveOperator multiplicativeExpression
    (77) multiplicativeExpression -> . asExpression
    (78) multiplicativeExpression -> . multiplicativeExpression multiplicativeOperator asExpression
    (79) asExpression -> . unaryExpression
    (80) asExpression -> . unaryExpression asOperator type
    (81) unaryExpression -> . unaryOperator primaryExpression
    (82) unaryExpression -> . primaryExpression
    (83) unaryExpression -> . primaryExpression postfixUnaryOperator
    (122) unaryOperator -> . INCREMENTO
    (123) unaryOperator -> . DECREMENTO
    (124) unaryOperator -> . MINUS
    (125) unaryOperator -> . PLUS
    (126) unaryOperator -> . NOT
    (86) primaryExpression -> . NULL
    (87) primaryExpression -> . TRUE
    (88) primaryExpression -> . FALSE
    (89) primaryExpression -> . NUMBER
    (90) primaryExpression -> . LITERAL_STRING
    (91) primaryExpression -> . ID
    (92) primaryExpression -> . chamadaDeFuncao
    (93) primaryExpression -> . parenthesizedExpression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (97) parenthesizedExpression -> . LPAREN expression RPAREN

    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38
    NOT             shift and go to state 39
    NULL            shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    NUMBER          shift and go to state 43
    LITERAL_STRING  shift and go to state 44
    ID              shift and go to state 45
    LPAREN          shift and go to state 48

    expression                     shift and go to state 150
    disjunction                    shift and go to state 22
    conjunction                    shift and go to state 23
    equality                       shift and go to state 24
    comparison                     shift and go to state 25
    infixOperation                 shift and go to state 26
    elvisExpression                shift and go to state 27
    rangeExpression                shift and go to state 28
    additiveExpression             shift and go to state 29
    multiplicativeExpression       shift and go to state 30
    asExpression                   shift and go to state 31
    unaryExpression                shift and go to state 32
    unaryOperator                  shift and go to state 33
    primaryExpression              shift and go to state 34
    chamadaDeFuncao                shift and go to state 46
    parenthesizedExpression        shift and go to state 47

state 112

    (23) open_statement -> FOR LPAREN . genericVariableDeclaration IN expression RPAREN open_statement
    (31) closed_statement -> FOR LPAREN . genericVariableDeclaration IN expression RPAREN closed_statement
    (34) non_if_statement_block -> FOR LPAREN . genericVariableDeclaration IN expression RPAREN block
    (49) genericVariableDeclaration -> . multiVariableDeclaration
    (50) genericVariableDeclaration -> . variableDeclaration
    (55) multiVariableDeclaration -> . LPAREN variableDeclarations RPAREN
    (56) multiVariableDeclaration -> . LPAREN RPAREN
    (51) variableDeclaration -> . ID DOISP type
    (52) variableDeclaration -> . ID

    LPAREN          shift and go to state 120
    ID              shift and go to state 121

    genericVariableDeclaration     shift and go to state 151
    multiVariableDeclaration       shift and go to state 118
    variableDeclaration            shift and go to state 119

state 113

    (24) open_statement -> WHILE LPAREN . expression RPAREN open_statement
    (32) closed_statement -> WHILE LPAREN . expression RPAREN closed_statement
    (35) non_if_statement_block -> WHILE LPAREN . expression RPAREN block
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction
    (61) disjunction -> . disjunction OR conjunction
    (62) conjunction -> . equality
    (63) conjunction -> . conjunction AND equality
    (64) equality -> . comparison
    (65) equality -> . equality equalityOperator comparison
    (66) comparison -> . infixOperation
    (67) comparison -> . infixOperation comparisonOperator infixOperation
    (68) infixOperation -> . infixOperation inOperator elvisExpression
    (69) infixOperation -> . infixOperation isOperator type
    (70) infixOperation -> . elvisExpression
    (71) elvisExpression -> . rangeExpression
    (72) elvisExpression -> . elvisExpression ELVIS rangeExpression
    (73) rangeExpression -> . additiveExpression
    (74) rangeExpression -> . rangeExpression PONTOPONTO additiveExpression
    (75) additiveExpression -> . multiplicativeExpression
    (76) additiveExpression -> . additiveExpression additiveOperator multiplicativeExpression
    (77) multiplicativeExpression -> . asExpression
    (78) multiplicativeExpression -> . multiplicativeExpression multiplicativeOperator asExpression
    (79) asExpression -> . unaryExpression
    (80) asExpression -> . unaryExpression asOperator type
    (81) unaryExpression -> . unaryOperator primaryExpression
    (82) unaryExpression -> . primaryExpression
    (83) unaryExpression -> . primaryExpression postfixUnaryOperator
    (122) unaryOperator -> . INCREMENTO
    (123) unaryOperator -> . DECREMENTO
    (124) unaryOperator -> . MINUS
    (125) unaryOperator -> . PLUS
    (126) unaryOperator -> . NOT
    (86) primaryExpression -> . NULL
    (87) primaryExpression -> . TRUE
    (88) primaryExpression -> . FALSE
    (89) primaryExpression -> . NUMBER
    (90) primaryExpression -> . LITERAL_STRING
    (91) primaryExpression -> . ID
    (92) primaryExpression -> . chamadaDeFuncao
    (93) primaryExpression -> . parenthesizedExpression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (97) parenthesizedExpression -> . LPAREN expression RPAREN

    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38
    NOT             shift and go to state 39
    NULL            shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    NUMBER          shift and go to state 43
    LITERAL_STRING  shift and go to state 44
    ID              shift and go to state 45
    LPAREN          shift and go to state 48

    expression                     shift and go to state 152
    disjunction                    shift and go to state 22
    conjunction                    shift and go to state 23
    equality                       shift and go to state 24
    comparison                     shift and go to state 25
    infixOperation                 shift and go to state 26
    elvisExpression                shift and go to state 27
    rangeExpression                shift and go to state 28
    additiveExpression             shift and go to state 29
    multiplicativeExpression       shift and go to state 30
    asExpression                   shift and go to state 31
    unaryExpression                shift and go to state 32
    unaryOperator                  shift and go to state 33
    primaryExpression              shift and go to state 34
    chamadaDeFuncao                shift and go to state 46
    parenthesizedExpression        shift and go to state 47

state 114

    (25) open_statement -> DO open_statement . WHILE LPAREN expression RPAREN

    WHILE           shift and go to state 153


state 115

    (33) closed_statement -> DO closed_statement . WHILE LPAREN expression RPAREN

    WHILE           shift and go to state 154


state 116

    (36) non_if_statement_block -> DO block . WHILE LPAREN expression RPAREN

    WHILE           shift and go to state 155


state 117

    (45) propertyDeclarationStm -> VAR genericVariableDeclaration . ATRIBUICAO expression

    ATRIBUICAO      shift and go to state 156


state 118

    (49) genericVariableDeclaration -> multiVariableDeclaration .

    ATRIBUICAO      reduce using rule 49 (genericVariableDeclaration -> multiVariableDeclaration .)
    IN              reduce using rule 49 (genericVariableDeclaration -> multiVariableDeclaration .)


state 119

    (50) genericVariableDeclaration -> variableDeclaration .

    ATRIBUICAO      reduce using rule 50 (genericVariableDeclaration -> variableDeclaration .)
    IN              reduce using rule 50 (genericVariableDeclaration -> variableDeclaration .)


state 120

    (55) multiVariableDeclaration -> LPAREN . variableDeclarations RPAREN
    (56) multiVariableDeclaration -> LPAREN . RPAREN
    (53) variableDeclarations -> . variableDeclaration
    (54) variableDeclarations -> . variableDeclaration COMMA variableDeclarations
    (51) variableDeclaration -> . ID DOISP type
    (52) variableDeclaration -> . ID

    RPAREN          shift and go to state 158
    ID              shift and go to state 121

    variableDeclarations           shift and go to state 157
    variableDeclaration            shift and go to state 159

state 121

    (51) variableDeclaration -> ID . DOISP type
    (52) variableDeclaration -> ID .

    DOISP           shift and go to state 160
    ATRIBUICAO      reduce using rule 52 (variableDeclaration -> ID .)
    IN              reduce using rule 52 (variableDeclaration -> ID .)
    COMMA           reduce using rule 52 (variableDeclaration -> ID .)
    RPAREN          reduce using rule 52 (variableDeclaration -> ID .)


state 122

    (46) propertyDeclarationStm -> VAL genericVariableDeclaration . ATRIBUICAO expression

    ATRIBUICAO      shift and go to state 161


state 123

    (42) assignment -> ID ATRIBUICAO . expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction
    (61) disjunction -> . disjunction OR conjunction
    (62) conjunction -> . equality
    (63) conjunction -> . conjunction AND equality
    (64) equality -> . comparison
    (65) equality -> . equality equalityOperator comparison
    (66) comparison -> . infixOperation
    (67) comparison -> . infixOperation comparisonOperator infixOperation
    (68) infixOperation -> . infixOperation inOperator elvisExpression
    (69) infixOperation -> . infixOperation isOperator type
    (70) infixOperation -> . elvisExpression
    (71) elvisExpression -> . rangeExpression
    (72) elvisExpression -> . elvisExpression ELVIS rangeExpression
    (73) rangeExpression -> . additiveExpression
    (74) rangeExpression -> . rangeExpression PONTOPONTO additiveExpression
    (75) additiveExpression -> . multiplicativeExpression
    (76) additiveExpression -> . additiveExpression additiveOperator multiplicativeExpression
    (77) multiplicativeExpression -> . asExpression
    (78) multiplicativeExpression -> . multiplicativeExpression multiplicativeOperator asExpression
    (79) asExpression -> . unaryExpression
    (80) asExpression -> . unaryExpression asOperator type
    (81) unaryExpression -> . unaryOperator primaryExpression
    (82) unaryExpression -> . primaryExpression
    (83) unaryExpression -> . primaryExpression postfixUnaryOperator
    (122) unaryOperator -> . INCREMENTO
    (123) unaryOperator -> . DECREMENTO
    (124) unaryOperator -> . MINUS
    (125) unaryOperator -> . PLUS
    (126) unaryOperator -> . NOT
    (86) primaryExpression -> . NULL
    (87) primaryExpression -> . TRUE
    (88) primaryExpression -> . FALSE
    (89) primaryExpression -> . NUMBER
    (90) primaryExpression -> . LITERAL_STRING
    (91) primaryExpression -> . ID
    (92) primaryExpression -> . chamadaDeFuncao
    (93) primaryExpression -> . parenthesizedExpression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (97) parenthesizedExpression -> . LPAREN expression RPAREN

    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38
    NOT             shift and go to state 39
    NULL            shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    NUMBER          shift and go to state 43
    LITERAL_STRING  shift and go to state 44
    ID              shift and go to state 45
    LPAREN          shift and go to state 48

    expression                     shift and go to state 162
    disjunction                    shift and go to state 22
    conjunction                    shift and go to state 23
    equality                       shift and go to state 24
    comparison                     shift and go to state 25
    infixOperation                 shift and go to state 26
    elvisExpression                shift and go to state 27
    rangeExpression                shift and go to state 28
    additiveExpression             shift and go to state 29
    multiplicativeExpression       shift and go to state 30
    asExpression                   shift and go to state 31
    unaryExpression                shift and go to state 32
    unaryOperator                  shift and go to state 33
    primaryExpression              shift and go to state 34
    chamadaDeFuncao                shift and go to state 46
    parenthesizedExpression        shift and go to state 47

state 124

    (43) assignment -> ID assignmentAndOperator . expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction
    (61) disjunction -> . disjunction OR conjunction
    (62) conjunction -> . equality
    (63) conjunction -> . conjunction AND equality
    (64) equality -> . comparison
    (65) equality -> . equality equalityOperator comparison
    (66) comparison -> . infixOperation
    (67) comparison -> . infixOperation comparisonOperator infixOperation
    (68) infixOperation -> . infixOperation inOperator elvisExpression
    (69) infixOperation -> . infixOperation isOperator type
    (70) infixOperation -> . elvisExpression
    (71) elvisExpression -> . rangeExpression
    (72) elvisExpression -> . elvisExpression ELVIS rangeExpression
    (73) rangeExpression -> . additiveExpression
    (74) rangeExpression -> . rangeExpression PONTOPONTO additiveExpression
    (75) additiveExpression -> . multiplicativeExpression
    (76) additiveExpression -> . additiveExpression additiveOperator multiplicativeExpression
    (77) multiplicativeExpression -> . asExpression
    (78) multiplicativeExpression -> . multiplicativeExpression multiplicativeOperator asExpression
    (79) asExpression -> . unaryExpression
    (80) asExpression -> . unaryExpression asOperator type
    (81) unaryExpression -> . unaryOperator primaryExpression
    (82) unaryExpression -> . primaryExpression
    (83) unaryExpression -> . primaryExpression postfixUnaryOperator
    (122) unaryOperator -> . INCREMENTO
    (123) unaryOperator -> . DECREMENTO
    (124) unaryOperator -> . MINUS
    (125) unaryOperator -> . PLUS
    (126) unaryOperator -> . NOT
    (86) primaryExpression -> . NULL
    (87) primaryExpression -> . TRUE
    (88) primaryExpression -> . FALSE
    (89) primaryExpression -> . NUMBER
    (90) primaryExpression -> . LITERAL_STRING
    (91) primaryExpression -> . ID
    (92) primaryExpression -> . chamadaDeFuncao
    (93) primaryExpression -> . parenthesizedExpression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (97) parenthesizedExpression -> . LPAREN expression RPAREN

    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38
    NOT             shift and go to state 39
    NULL            shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    NUMBER          shift and go to state 43
    LITERAL_STRING  shift and go to state 44
    ID              shift and go to state 45
    LPAREN          shift and go to state 48

    expression                     shift and go to state 163
    disjunction                    shift and go to state 22
    conjunction                    shift and go to state 23
    equality                       shift and go to state 24
    comparison                     shift and go to state 25
    infixOperation                 shift and go to state 26
    elvisExpression                shift and go to state 27
    rangeExpression                shift and go to state 28
    additiveExpression             shift and go to state 29
    multiplicativeExpression       shift and go to state 30
    asExpression                   shift and go to state 31
    unaryExpression                shift and go to state 32
    unaryOperator                  shift and go to state 33
    primaryExpression              shift and go to state 34
    chamadaDeFuncao                shift and go to state 46
    parenthesizedExpression        shift and go to state 47

state 125

    (98) assignmentAndOperator -> MAISIGUAL .

    INCREMENTO      reduce using rule 98 (assignmentAndOperator -> MAISIGUAL .)
    DECREMENTO      reduce using rule 98 (assignmentAndOperator -> MAISIGUAL .)
    MINUS           reduce using rule 98 (assignmentAndOperator -> MAISIGUAL .)
    PLUS            reduce using rule 98 (assignmentAndOperator -> MAISIGUAL .)
    NOT             reduce using rule 98 (assignmentAndOperator -> MAISIGUAL .)
    NULL            reduce using rule 98 (assignmentAndOperator -> MAISIGUAL .)
    TRUE            reduce using rule 98 (assignmentAndOperator -> MAISIGUAL .)
    FALSE           reduce using rule 98 (assignmentAndOperator -> MAISIGUAL .)
    NUMBER          reduce using rule 98 (assignmentAndOperator -> MAISIGUAL .)
    LITERAL_STRING  reduce using rule 98 (assignmentAndOperator -> MAISIGUAL .)
    ID              reduce using rule 98 (assignmentAndOperator -> MAISIGUAL .)
    LPAREN          reduce using rule 98 (assignmentAndOperator -> MAISIGUAL .)


state 126

    (99) assignmentAndOperator -> MENOSIGUAL .

    INCREMENTO      reduce using rule 99 (assignmentAndOperator -> MENOSIGUAL .)
    DECREMENTO      reduce using rule 99 (assignmentAndOperator -> MENOSIGUAL .)
    MINUS           reduce using rule 99 (assignmentAndOperator -> MENOSIGUAL .)
    PLUS            reduce using rule 99 (assignmentAndOperator -> MENOSIGUAL .)
    NOT             reduce using rule 99 (assignmentAndOperator -> MENOSIGUAL .)
    NULL            reduce using rule 99 (assignmentAndOperator -> MENOSIGUAL .)
    TRUE            reduce using rule 99 (assignmentAndOperator -> MENOSIGUAL .)
    FALSE           reduce using rule 99 (assignmentAndOperator -> MENOSIGUAL .)
    NUMBER          reduce using rule 99 (assignmentAndOperator -> MENOSIGUAL .)
    LITERAL_STRING  reduce using rule 99 (assignmentAndOperator -> MENOSIGUAL .)
    ID              reduce using rule 99 (assignmentAndOperator -> MENOSIGUAL .)
    LPAREN          reduce using rule 99 (assignmentAndOperator -> MENOSIGUAL .)


state 127

    (100) assignmentAndOperator -> MULTIGUAL .

    INCREMENTO      reduce using rule 100 (assignmentAndOperator -> MULTIGUAL .)
    DECREMENTO      reduce using rule 100 (assignmentAndOperator -> MULTIGUAL .)
    MINUS           reduce using rule 100 (assignmentAndOperator -> MULTIGUAL .)
    PLUS            reduce using rule 100 (assignmentAndOperator -> MULTIGUAL .)
    NOT             reduce using rule 100 (assignmentAndOperator -> MULTIGUAL .)
    NULL            reduce using rule 100 (assignmentAndOperator -> MULTIGUAL .)
    TRUE            reduce using rule 100 (assignmentAndOperator -> MULTIGUAL .)
    FALSE           reduce using rule 100 (assignmentAndOperator -> MULTIGUAL .)
    NUMBER          reduce using rule 100 (assignmentAndOperator -> MULTIGUAL .)
    LITERAL_STRING  reduce using rule 100 (assignmentAndOperator -> MULTIGUAL .)
    ID              reduce using rule 100 (assignmentAndOperator -> MULTIGUAL .)
    LPAREN          reduce using rule 100 (assignmentAndOperator -> MULTIGUAL .)


state 128

    (101) assignmentAndOperator -> DIVIGUAL .

    INCREMENTO      reduce using rule 101 (assignmentAndOperator -> DIVIGUAL .)
    DECREMENTO      reduce using rule 101 (assignmentAndOperator -> DIVIGUAL .)
    MINUS           reduce using rule 101 (assignmentAndOperator -> DIVIGUAL .)
    PLUS            reduce using rule 101 (assignmentAndOperator -> DIVIGUAL .)
    NOT             reduce using rule 101 (assignmentAndOperator -> DIVIGUAL .)
    NULL            reduce using rule 101 (assignmentAndOperator -> DIVIGUAL .)
    TRUE            reduce using rule 101 (assignmentAndOperator -> DIVIGUAL .)
    FALSE           reduce using rule 101 (assignmentAndOperator -> DIVIGUAL .)
    NUMBER          reduce using rule 101 (assignmentAndOperator -> DIVIGUAL .)
    LITERAL_STRING  reduce using rule 101 (assignmentAndOperator -> DIVIGUAL .)
    ID              reduce using rule 101 (assignmentAndOperator -> DIVIGUAL .)
    LPAREN          reduce using rule 101 (assignmentAndOperator -> DIVIGUAL .)


state 129

    (102) assignmentAndOperator -> MODIGUAL .

    INCREMENTO      reduce using rule 102 (assignmentAndOperator -> MODIGUAL .)
    DECREMENTO      reduce using rule 102 (assignmentAndOperator -> MODIGUAL .)
    MINUS           reduce using rule 102 (assignmentAndOperator -> MODIGUAL .)
    PLUS            reduce using rule 102 (assignmentAndOperator -> MODIGUAL .)
    NOT             reduce using rule 102 (assignmentAndOperator -> MODIGUAL .)
    NULL            reduce using rule 102 (assignmentAndOperator -> MODIGUAL .)
    TRUE            reduce using rule 102 (assignmentAndOperator -> MODIGUAL .)
    FALSE           reduce using rule 102 (assignmentAndOperator -> MODIGUAL .)
    NUMBER          reduce using rule 102 (assignmentAndOperator -> MODIGUAL .)
    LITERAL_STRING  reduce using rule 102 (assignmentAndOperator -> MODIGUAL .)
    ID              reduce using rule 102 (assignmentAndOperator -> MODIGUAL .)
    LPAREN          reduce using rule 102 (assignmentAndOperator -> MODIGUAL .)


state 130

    (94) jumpExpression -> RETURN expression .

    IF              reduce using rule 94 (jumpExpression -> RETURN expression .)
    FOR             reduce using rule 94 (jumpExpression -> RETURN expression .)
    WHILE           reduce using rule 94 (jumpExpression -> RETURN expression .)
    DO              reduce using rule 94 (jumpExpression -> RETURN expression .)
    PV              reduce using rule 94 (jumpExpression -> RETURN expression .)
    VAR             reduce using rule 94 (jumpExpression -> RETURN expression .)
    VAL             reduce using rule 94 (jumpExpression -> RETURN expression .)
    ID              reduce using rule 94 (jumpExpression -> RETURN expression .)
    RETURN          reduce using rule 94 (jumpExpression -> RETURN expression .)
    CONTINUE        reduce using rule 94 (jumpExpression -> RETURN expression .)
    BREAK           reduce using rule 94 (jumpExpression -> RETURN expression .)
    RCHAVE          reduce using rule 94 (jumpExpression -> RETURN expression .)
    ELSE            reduce using rule 94 (jumpExpression -> RETURN expression .)


state 131

    (8) parameters -> parameter COMMA parameters .

    RPAREN          reduce using rule 8 (parameters -> parameter COMMA parameters .)


state 132

    (9) parameter -> ID DOISP type .

    COMMA           reduce using rule 9 (parameter -> ID DOISP type .)
    RPAREN          reduce using rule 9 (parameter -> ID DOISP type .)


state 133

    (12) parenthesizedType -> LPAREN type RPAREN .

    ATRIBUICAO      reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    LCHAVE          reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    RPAREN          reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    COMMA           reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    MENOR           reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    MAIOR           reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    MENORIGUAL      reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    MAIORIGUAL      reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    IN              reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    NOT_IN          reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    IS              reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    NOT_IS          reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    DIFERENTE       reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    IDENTIDADE      reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    IGUALDADE       reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    SEMIDENTIDADE   reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    AND             reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    OR              reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    FUN             reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    $end            reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    IF              reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    FOR             reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    WHILE           reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    DO              reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    PV              reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    VAR             reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    VAL             reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    ID              reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    RETURN          reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    CONTINUE        reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    BREAK           reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    RCHAVE          reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    ELSE            reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    MULT            reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    DIVIDE          reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    MOD             reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    PLUS            reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    MINUS           reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    PONTOPONTO      reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)
    ELVIS           reduce using rule 12 (parenthesizedType -> LPAREN type RPAREN .)


state 134

    (61) disjunction -> disjunction OR conjunction .
    (63) conjunction -> conjunction . AND equality

    OR              reduce using rule 61 (disjunction -> disjunction OR conjunction .)
    FUN             reduce using rule 61 (disjunction -> disjunction OR conjunction .)
    $end            reduce using rule 61 (disjunction -> disjunction OR conjunction .)
    RPAREN          reduce using rule 61 (disjunction -> disjunction OR conjunction .)
    IF              reduce using rule 61 (disjunction -> disjunction OR conjunction .)
    FOR             reduce using rule 61 (disjunction -> disjunction OR conjunction .)
    WHILE           reduce using rule 61 (disjunction -> disjunction OR conjunction .)
    DO              reduce using rule 61 (disjunction -> disjunction OR conjunction .)
    PV              reduce using rule 61 (disjunction -> disjunction OR conjunction .)
    VAR             reduce using rule 61 (disjunction -> disjunction OR conjunction .)
    VAL             reduce using rule 61 (disjunction -> disjunction OR conjunction .)
    ID              reduce using rule 61 (disjunction -> disjunction OR conjunction .)
    RETURN          reduce using rule 61 (disjunction -> disjunction OR conjunction .)
    CONTINUE        reduce using rule 61 (disjunction -> disjunction OR conjunction .)
    BREAK           reduce using rule 61 (disjunction -> disjunction OR conjunction .)
    RCHAVE          reduce using rule 61 (disjunction -> disjunction OR conjunction .)
    ELSE            reduce using rule 61 (disjunction -> disjunction OR conjunction .)
    AND             shift and go to state 75


state 135

    (63) conjunction -> conjunction AND equality .
    (65) equality -> equality . equalityOperator comparison
    (103) equalityOperator -> . DIFERENTE
    (104) equalityOperator -> . IDENTIDADE
    (105) equalityOperator -> . IGUALDADE
    (106) equalityOperator -> . SEMIDENTIDADE

    AND             reduce using rule 63 (conjunction -> conjunction AND equality .)
    OR              reduce using rule 63 (conjunction -> conjunction AND equality .)
    FUN             reduce using rule 63 (conjunction -> conjunction AND equality .)
    $end            reduce using rule 63 (conjunction -> conjunction AND equality .)
    RPAREN          reduce using rule 63 (conjunction -> conjunction AND equality .)
    IF              reduce using rule 63 (conjunction -> conjunction AND equality .)
    FOR             reduce using rule 63 (conjunction -> conjunction AND equality .)
    WHILE           reduce using rule 63 (conjunction -> conjunction AND equality .)
    DO              reduce using rule 63 (conjunction -> conjunction AND equality .)
    PV              reduce using rule 63 (conjunction -> conjunction AND equality .)
    VAR             reduce using rule 63 (conjunction -> conjunction AND equality .)
    VAL             reduce using rule 63 (conjunction -> conjunction AND equality .)
    ID              reduce using rule 63 (conjunction -> conjunction AND equality .)
    RETURN          reduce using rule 63 (conjunction -> conjunction AND equality .)
    CONTINUE        reduce using rule 63 (conjunction -> conjunction AND equality .)
    BREAK           reduce using rule 63 (conjunction -> conjunction AND equality .)
    RCHAVE          reduce using rule 63 (conjunction -> conjunction AND equality .)
    ELSE            reduce using rule 63 (conjunction -> conjunction AND equality .)
    DIFERENTE       shift and go to state 77
    IDENTIDADE      shift and go to state 78
    IGUALDADE       shift and go to state 79
    SEMIDENTIDADE   shift and go to state 80

    equalityOperator               shift and go to state 76

state 136

    (65) equality -> equality equalityOperator comparison .

    DIFERENTE       reduce using rule 65 (equality -> equality equalityOperator comparison .)
    IDENTIDADE      reduce using rule 65 (equality -> equality equalityOperator comparison .)
    IGUALDADE       reduce using rule 65 (equality -> equality equalityOperator comparison .)
    SEMIDENTIDADE   reduce using rule 65 (equality -> equality equalityOperator comparison .)
    AND             reduce using rule 65 (equality -> equality equalityOperator comparison .)
    OR              reduce using rule 65 (equality -> equality equalityOperator comparison .)
    FUN             reduce using rule 65 (equality -> equality equalityOperator comparison .)
    $end            reduce using rule 65 (equality -> equality equalityOperator comparison .)
    RPAREN          reduce using rule 65 (equality -> equality equalityOperator comparison .)
    IF              reduce using rule 65 (equality -> equality equalityOperator comparison .)
    FOR             reduce using rule 65 (equality -> equality equalityOperator comparison .)
    WHILE           reduce using rule 65 (equality -> equality equalityOperator comparison .)
    DO              reduce using rule 65 (equality -> equality equalityOperator comparison .)
    PV              reduce using rule 65 (equality -> equality equalityOperator comparison .)
    VAR             reduce using rule 65 (equality -> equality equalityOperator comparison .)
    VAL             reduce using rule 65 (equality -> equality equalityOperator comparison .)
    ID              reduce using rule 65 (equality -> equality equalityOperator comparison .)
    RETURN          reduce using rule 65 (equality -> equality equalityOperator comparison .)
    CONTINUE        reduce using rule 65 (equality -> equality equalityOperator comparison .)
    BREAK           reduce using rule 65 (equality -> equality equalityOperator comparison .)
    RCHAVE          reduce using rule 65 (equality -> equality equalityOperator comparison .)
    ELSE            reduce using rule 65 (equality -> equality equalityOperator comparison .)


state 137

    (67) comparison -> infixOperation comparisonOperator infixOperation .
    (68) infixOperation -> infixOperation . inOperator elvisExpression
    (69) infixOperation -> infixOperation . isOperator type
    (111) inOperator -> . IN
    (112) inOperator -> . NOT_IN
    (113) isOperator -> . IS
    (114) isOperator -> . NOT_IS

    DIFERENTE       reduce using rule 67 (comparison -> infixOperation comparisonOperator infixOperation .)
    IDENTIDADE      reduce using rule 67 (comparison -> infixOperation comparisonOperator infixOperation .)
    IGUALDADE       reduce using rule 67 (comparison -> infixOperation comparisonOperator infixOperation .)
    SEMIDENTIDADE   reduce using rule 67 (comparison -> infixOperation comparisonOperator infixOperation .)
    AND             reduce using rule 67 (comparison -> infixOperation comparisonOperator infixOperation .)
    OR              reduce using rule 67 (comparison -> infixOperation comparisonOperator infixOperation .)
    FUN             reduce using rule 67 (comparison -> infixOperation comparisonOperator infixOperation .)
    $end            reduce using rule 67 (comparison -> infixOperation comparisonOperator infixOperation .)
    RPAREN          reduce using rule 67 (comparison -> infixOperation comparisonOperator infixOperation .)
    IF              reduce using rule 67 (comparison -> infixOperation comparisonOperator infixOperation .)
    FOR             reduce using rule 67 (comparison -> infixOperation comparisonOperator infixOperation .)
    WHILE           reduce using rule 67 (comparison -> infixOperation comparisonOperator infixOperation .)
    DO              reduce using rule 67 (comparison -> infixOperation comparisonOperator infixOperation .)
    PV              reduce using rule 67 (comparison -> infixOperation comparisonOperator infixOperation .)
    VAR             reduce using rule 67 (comparison -> infixOperation comparisonOperator infixOperation .)
    VAL             reduce using rule 67 (comparison -> infixOperation comparisonOperator infixOperation .)
    ID              reduce using rule 67 (comparison -> infixOperation comparisonOperator infixOperation .)
    RETURN          reduce using rule 67 (comparison -> infixOperation comparisonOperator infixOperation .)
    CONTINUE        reduce using rule 67 (comparison -> infixOperation comparisonOperator infixOperation .)
    BREAK           reduce using rule 67 (comparison -> infixOperation comparisonOperator infixOperation .)
    RCHAVE          reduce using rule 67 (comparison -> infixOperation comparisonOperator infixOperation .)
    ELSE            reduce using rule 67 (comparison -> infixOperation comparisonOperator infixOperation .)
    IN              shift and go to state 88
    NOT_IN          shift and go to state 89
    IS              shift and go to state 90
    NOT_IS          shift and go to state 91

    inOperator                     shift and go to state 82
    isOperator                     shift and go to state 83

state 138

    (68) infixOperation -> infixOperation inOperator elvisExpression .
    (72) elvisExpression -> elvisExpression . ELVIS rangeExpression

    MENOR           reduce using rule 68 (infixOperation -> infixOperation inOperator elvisExpression .)
    MAIOR           reduce using rule 68 (infixOperation -> infixOperation inOperator elvisExpression .)
    MENORIGUAL      reduce using rule 68 (infixOperation -> infixOperation inOperator elvisExpression .)
    MAIORIGUAL      reduce using rule 68 (infixOperation -> infixOperation inOperator elvisExpression .)
    IN              reduce using rule 68 (infixOperation -> infixOperation inOperator elvisExpression .)
    NOT_IN          reduce using rule 68 (infixOperation -> infixOperation inOperator elvisExpression .)
    IS              reduce using rule 68 (infixOperation -> infixOperation inOperator elvisExpression .)
    NOT_IS          reduce using rule 68 (infixOperation -> infixOperation inOperator elvisExpression .)
    DIFERENTE       reduce using rule 68 (infixOperation -> infixOperation inOperator elvisExpression .)
    IDENTIDADE      reduce using rule 68 (infixOperation -> infixOperation inOperator elvisExpression .)
    IGUALDADE       reduce using rule 68 (infixOperation -> infixOperation inOperator elvisExpression .)
    SEMIDENTIDADE   reduce using rule 68 (infixOperation -> infixOperation inOperator elvisExpression .)
    AND             reduce using rule 68 (infixOperation -> infixOperation inOperator elvisExpression .)
    OR              reduce using rule 68 (infixOperation -> infixOperation inOperator elvisExpression .)
    FUN             reduce using rule 68 (infixOperation -> infixOperation inOperator elvisExpression .)
    $end            reduce using rule 68 (infixOperation -> infixOperation inOperator elvisExpression .)
    RPAREN          reduce using rule 68 (infixOperation -> infixOperation inOperator elvisExpression .)
    IF              reduce using rule 68 (infixOperation -> infixOperation inOperator elvisExpression .)
    FOR             reduce using rule 68 (infixOperation -> infixOperation inOperator elvisExpression .)
    WHILE           reduce using rule 68 (infixOperation -> infixOperation inOperator elvisExpression .)
    DO              reduce using rule 68 (infixOperation -> infixOperation inOperator elvisExpression .)
    PV              reduce using rule 68 (infixOperation -> infixOperation inOperator elvisExpression .)
    VAR             reduce using rule 68 (infixOperation -> infixOperation inOperator elvisExpression .)
    VAL             reduce using rule 68 (infixOperation -> infixOperation inOperator elvisExpression .)
    ID              reduce using rule 68 (infixOperation -> infixOperation inOperator elvisExpression .)
    RETURN          reduce using rule 68 (infixOperation -> infixOperation inOperator elvisExpression .)
    CONTINUE        reduce using rule 68 (infixOperation -> infixOperation inOperator elvisExpression .)
    BREAK           reduce using rule 68 (infixOperation -> infixOperation inOperator elvisExpression .)
    RCHAVE          reduce using rule 68 (infixOperation -> infixOperation inOperator elvisExpression .)
    ELSE            reduce using rule 68 (infixOperation -> infixOperation inOperator elvisExpression .)
    ELVIS           shift and go to state 92


state 139

    (69) infixOperation -> infixOperation isOperator type .

    MENOR           reduce using rule 69 (infixOperation -> infixOperation isOperator type .)
    MAIOR           reduce using rule 69 (infixOperation -> infixOperation isOperator type .)
    MENORIGUAL      reduce using rule 69 (infixOperation -> infixOperation isOperator type .)
    MAIORIGUAL      reduce using rule 69 (infixOperation -> infixOperation isOperator type .)
    IN              reduce using rule 69 (infixOperation -> infixOperation isOperator type .)
    NOT_IN          reduce using rule 69 (infixOperation -> infixOperation isOperator type .)
    IS              reduce using rule 69 (infixOperation -> infixOperation isOperator type .)
    NOT_IS          reduce using rule 69 (infixOperation -> infixOperation isOperator type .)
    DIFERENTE       reduce using rule 69 (infixOperation -> infixOperation isOperator type .)
    IDENTIDADE      reduce using rule 69 (infixOperation -> infixOperation isOperator type .)
    IGUALDADE       reduce using rule 69 (infixOperation -> infixOperation isOperator type .)
    SEMIDENTIDADE   reduce using rule 69 (infixOperation -> infixOperation isOperator type .)
    AND             reduce using rule 69 (infixOperation -> infixOperation isOperator type .)
    OR              reduce using rule 69 (infixOperation -> infixOperation isOperator type .)
    FUN             reduce using rule 69 (infixOperation -> infixOperation isOperator type .)
    $end            reduce using rule 69 (infixOperation -> infixOperation isOperator type .)
    RPAREN          reduce using rule 69 (infixOperation -> infixOperation isOperator type .)
    IF              reduce using rule 69 (infixOperation -> infixOperation isOperator type .)
    FOR             reduce using rule 69 (infixOperation -> infixOperation isOperator type .)
    WHILE           reduce using rule 69 (infixOperation -> infixOperation isOperator type .)
    DO              reduce using rule 69 (infixOperation -> infixOperation isOperator type .)
    PV              reduce using rule 69 (infixOperation -> infixOperation isOperator type .)
    VAR             reduce using rule 69 (infixOperation -> infixOperation isOperator type .)
    VAL             reduce using rule 69 (infixOperation -> infixOperation isOperator type .)
    ID              reduce using rule 69 (infixOperation -> infixOperation isOperator type .)
    RETURN          reduce using rule 69 (infixOperation -> infixOperation isOperator type .)
    CONTINUE        reduce using rule 69 (infixOperation -> infixOperation isOperator type .)
    BREAK           reduce using rule 69 (infixOperation -> infixOperation isOperator type .)
    RCHAVE          reduce using rule 69 (infixOperation -> infixOperation isOperator type .)
    ELSE            reduce using rule 69 (infixOperation -> infixOperation isOperator type .)


state 140

    (72) elvisExpression -> elvisExpression ELVIS rangeExpression .
    (74) rangeExpression -> rangeExpression . PONTOPONTO additiveExpression

    ELVIS           reduce using rule 72 (elvisExpression -> elvisExpression ELVIS rangeExpression .)
    MENOR           reduce using rule 72 (elvisExpression -> elvisExpression ELVIS rangeExpression .)
    MAIOR           reduce using rule 72 (elvisExpression -> elvisExpression ELVIS rangeExpression .)
    MENORIGUAL      reduce using rule 72 (elvisExpression -> elvisExpression ELVIS rangeExpression .)
    MAIORIGUAL      reduce using rule 72 (elvisExpression -> elvisExpression ELVIS rangeExpression .)
    IN              reduce using rule 72 (elvisExpression -> elvisExpression ELVIS rangeExpression .)
    NOT_IN          reduce using rule 72 (elvisExpression -> elvisExpression ELVIS rangeExpression .)
    IS              reduce using rule 72 (elvisExpression -> elvisExpression ELVIS rangeExpression .)
    NOT_IS          reduce using rule 72 (elvisExpression -> elvisExpression ELVIS rangeExpression .)
    DIFERENTE       reduce using rule 72 (elvisExpression -> elvisExpression ELVIS rangeExpression .)
    IDENTIDADE      reduce using rule 72 (elvisExpression -> elvisExpression ELVIS rangeExpression .)
    IGUALDADE       reduce using rule 72 (elvisExpression -> elvisExpression ELVIS rangeExpression .)
    SEMIDENTIDADE   reduce using rule 72 (elvisExpression -> elvisExpression ELVIS rangeExpression .)
    AND             reduce using rule 72 (elvisExpression -> elvisExpression ELVIS rangeExpression .)
    OR              reduce using rule 72 (elvisExpression -> elvisExpression ELVIS rangeExpression .)
    FUN             reduce using rule 72 (elvisExpression -> elvisExpression ELVIS rangeExpression .)
    $end            reduce using rule 72 (elvisExpression -> elvisExpression ELVIS rangeExpression .)
    RPAREN          reduce using rule 72 (elvisExpression -> elvisExpression ELVIS rangeExpression .)
    IF              reduce using rule 72 (elvisExpression -> elvisExpression ELVIS rangeExpression .)
    FOR             reduce using rule 72 (elvisExpression -> elvisExpression ELVIS rangeExpression .)
    WHILE           reduce using rule 72 (elvisExpression -> elvisExpression ELVIS rangeExpression .)
    DO              reduce using rule 72 (elvisExpression -> elvisExpression ELVIS rangeExpression .)
    PV              reduce using rule 72 (elvisExpression -> elvisExpression ELVIS rangeExpression .)
    VAR             reduce using rule 72 (elvisExpression -> elvisExpression ELVIS rangeExpression .)
    VAL             reduce using rule 72 (elvisExpression -> elvisExpression ELVIS rangeExpression .)
    ID              reduce using rule 72 (elvisExpression -> elvisExpression ELVIS rangeExpression .)
    RETURN          reduce using rule 72 (elvisExpression -> elvisExpression ELVIS rangeExpression .)
    CONTINUE        reduce using rule 72 (elvisExpression -> elvisExpression ELVIS rangeExpression .)
    BREAK           reduce using rule 72 (elvisExpression -> elvisExpression ELVIS rangeExpression .)
    RCHAVE          reduce using rule 72 (elvisExpression -> elvisExpression ELVIS rangeExpression .)
    ELSE            reduce using rule 72 (elvisExpression -> elvisExpression ELVIS rangeExpression .)
    PONTOPONTO      shift and go to state 93


state 141

    (74) rangeExpression -> rangeExpression PONTOPONTO additiveExpression .
    (76) additiveExpression -> additiveExpression . additiveOperator multiplicativeExpression
    (115) additiveOperator -> . PLUS
    (116) additiveOperator -> . MINUS

    PONTOPONTO      reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    ELVIS           reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    MENOR           reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    MAIOR           reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    MENORIGUAL      reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    MAIORIGUAL      reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    IN              reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    NOT_IN          reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    IS              reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    NOT_IS          reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    DIFERENTE       reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    IDENTIDADE      reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    IGUALDADE       reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    SEMIDENTIDADE   reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    AND             reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    OR              reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    FUN             reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    $end            reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    RPAREN          reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    IF              reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    FOR             reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    WHILE           reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    DO              reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    PV              reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    VAR             reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    VAL             reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    ID              reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    RETURN          reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    CONTINUE        reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    BREAK           reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    RCHAVE          reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    ELSE            reduce using rule 74 (rangeExpression -> rangeExpression PONTOPONTO additiveExpression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96

    additiveOperator               shift and go to state 94

state 142

    (76) additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .
    (78) multiplicativeExpression -> multiplicativeExpression . multiplicativeOperator asExpression
    (117) multiplicativeOperator -> . MULT
    (118) multiplicativeOperator -> . DIVIDE
    (119) multiplicativeOperator -> . MOD

    PLUS            reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    MINUS           reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    PONTOPONTO      reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    ELVIS           reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    MENOR           reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    MAIOR           reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    MENORIGUAL      reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    MAIORIGUAL      reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    IN              reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    NOT_IN          reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    IS              reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    NOT_IS          reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    DIFERENTE       reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    IDENTIDADE      reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    IGUALDADE       reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    SEMIDENTIDADE   reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    AND             reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    OR              reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    FUN             reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    $end            reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    RPAREN          reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    IF              reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    FOR             reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    WHILE           reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    DO              reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    PV              reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    VAR             reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    VAL             reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    ID              reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    RETURN          reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    CONTINUE        reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    BREAK           reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    RCHAVE          reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    ELSE            reduce using rule 76 (additiveExpression -> additiveExpression additiveOperator multiplicativeExpression .)
    MULT            shift and go to state 98
    DIVIDE          shift and go to state 99
    MOD             shift and go to state 100

    multiplicativeOperator         shift and go to state 97

state 143

    (78) multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .

    MULT            reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    DIVIDE          reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    MOD             reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    PLUS            reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    MINUS           reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    PONTOPONTO      reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    ELVIS           reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    MENOR           reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    MAIOR           reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    MENORIGUAL      reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    MAIORIGUAL      reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    IN              reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    NOT_IN          reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    IS              reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    NOT_IS          reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    DIFERENTE       reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    IDENTIDADE      reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    IGUALDADE       reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    SEMIDENTIDADE   reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    AND             reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    OR              reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    FUN             reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    $end            reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    RPAREN          reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    IF              reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    FOR             reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    WHILE           reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    DO              reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    PV              reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    VAR             reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    VAL             reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    ID              reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    RETURN          reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    CONTINUE        reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    BREAK           reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    RCHAVE          reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)
    ELSE            reduce using rule 78 (multiplicativeExpression -> multiplicativeExpression multiplicativeOperator asExpression .)


state 144

    (80) asExpression -> unaryExpression asOperator type .

    MULT            reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    DIVIDE          reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    MOD             reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    PLUS            reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    MINUS           reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    PONTOPONTO      reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    ELVIS           reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    MENOR           reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    MAIOR           reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    MENORIGUAL      reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    MAIORIGUAL      reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    IN              reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    NOT_IN          reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    IS              reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    NOT_IS          reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    DIFERENTE       reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    IDENTIDADE      reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    IGUALDADE       reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    SEMIDENTIDADE   reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    AND             reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    OR              reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    FUN             reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    $end            reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    RPAREN          reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    IF              reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    FOR             reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    WHILE           reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    DO              reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    PV              reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    VAR             reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    VAL             reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    ID              reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    RETURN          reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    CONTINUE        reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    BREAK           reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    RCHAVE          reduce using rule 80 (asExpression -> unaryExpression asOperator type .)
    ELSE            reduce using rule 80 (asExpression -> unaryExpression asOperator type .)


state 145

    (121) asOperator -> AS asOperator .

    ID              reduce using rule 121 (asOperator -> AS asOperator .)
    LPAREN          reduce using rule 121 (asOperator -> AS asOperator .)


state 146

    (47) chamadaDeFuncao -> ID LPAREN RPAREN .

    INCREMENTO      reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    DECREMENTO      reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    AS              reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    MULT            reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    MOD             reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    PONTOPONTO      reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    ELVIS           reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    MENOR           reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    MAIOR           reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    MENORIGUAL      reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    MAIORIGUAL      reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    IN              reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    NOT_IN          reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    IS              reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    NOT_IS          reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    DIFERENTE       reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    IDENTIDADE      reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    IGUALDADE       reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    SEMIDENTIDADE   reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    AND             reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    OR              reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    FUN             reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    $end            reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    IF              reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    FOR             reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    WHILE           reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    DO              reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    PV              reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    VAR             reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    VAL             reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    ID              reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    RETURN          reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    CONTINUE        reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    BREAK           reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    RCHAVE          reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 47 (chamadaDeFuncao -> ID LPAREN RPAREN .)


state 147

    (48) chamadaDeFuncao -> ID LPAREN parametersFunction . RPAREN

    RPAREN          shift and go to state 164


state 148

    (57) parametersFunction -> primaryExpression .
    (58) parametersFunction -> primaryExpression . COMMA parametersFunction

    RPAREN          reduce using rule 57 (parametersFunction -> primaryExpression .)
    COMMA           shift and go to state 165


state 149

    (97) parenthesizedExpression -> LPAREN expression RPAREN .

    INCREMENTO      reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DECREMENTO      reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    AS              reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MULT            reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    PONTOPONTO      reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    ELVIS           reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MENOR           reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MAIOR           reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MENORIGUAL      reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MAIORIGUAL      reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IN              reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NOT_IN          reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IS              reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NOT_IS          reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DIFERENTE       reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IDENTIDADE      reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IGUALDADE       reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    SEMIDENTIDADE   reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    AND             reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    OR              reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    FUN             reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    $end            reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IF              reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DO              reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    PV              reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    VAL             reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    ID              reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RCHAVE          reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 97 (parenthesizedExpression -> LPAREN expression RPAREN .)


state 150

    (19) open_statement -> IF LPAREN expression . RPAREN block
    (20) open_statement -> IF LPAREN expression . RPAREN statement
    (21) open_statement -> IF LPAREN expression . RPAREN block ELSE open_statement
    (22) open_statement -> IF LPAREN expression . RPAREN closed_statement ELSE open_statement
    (27) closed_statement -> IF LPAREN expression . RPAREN block ELSE block
    (28) closed_statement -> IF LPAREN expression . RPAREN closed_statement ELSE block
    (29) closed_statement -> IF LPAREN expression . RPAREN block ELSE closed_statement
    (30) closed_statement -> IF LPAREN expression . RPAREN closed_statement ELSE closed_statement

    RPAREN          shift and go to state 166


state 151

    (23) open_statement -> FOR LPAREN genericVariableDeclaration . IN expression RPAREN open_statement
    (31) closed_statement -> FOR LPAREN genericVariableDeclaration . IN expression RPAREN closed_statement
    (34) non_if_statement_block -> FOR LPAREN genericVariableDeclaration . IN expression RPAREN block

    IN              shift and go to state 167


state 152

    (24) open_statement -> WHILE LPAREN expression . RPAREN open_statement
    (32) closed_statement -> WHILE LPAREN expression . RPAREN closed_statement
    (35) non_if_statement_block -> WHILE LPAREN expression . RPAREN block

    RPAREN          shift and go to state 168


state 153

    (25) open_statement -> DO open_statement WHILE . LPAREN expression RPAREN

    LPAREN          shift and go to state 169


state 154

    (33) closed_statement -> DO closed_statement WHILE . LPAREN expression RPAREN

    LPAREN          shift and go to state 170


state 155

    (36) non_if_statement_block -> DO block WHILE . LPAREN expression RPAREN

    LPAREN          shift and go to state 171


state 156

    (45) propertyDeclarationStm -> VAR genericVariableDeclaration ATRIBUICAO . expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction
    (61) disjunction -> . disjunction OR conjunction
    (62) conjunction -> . equality
    (63) conjunction -> . conjunction AND equality
    (64) equality -> . comparison
    (65) equality -> . equality equalityOperator comparison
    (66) comparison -> . infixOperation
    (67) comparison -> . infixOperation comparisonOperator infixOperation
    (68) infixOperation -> . infixOperation inOperator elvisExpression
    (69) infixOperation -> . infixOperation isOperator type
    (70) infixOperation -> . elvisExpression
    (71) elvisExpression -> . rangeExpression
    (72) elvisExpression -> . elvisExpression ELVIS rangeExpression
    (73) rangeExpression -> . additiveExpression
    (74) rangeExpression -> . rangeExpression PONTOPONTO additiveExpression
    (75) additiveExpression -> . multiplicativeExpression
    (76) additiveExpression -> . additiveExpression additiveOperator multiplicativeExpression
    (77) multiplicativeExpression -> . asExpression
    (78) multiplicativeExpression -> . multiplicativeExpression multiplicativeOperator asExpression
    (79) asExpression -> . unaryExpression
    (80) asExpression -> . unaryExpression asOperator type
    (81) unaryExpression -> . unaryOperator primaryExpression
    (82) unaryExpression -> . primaryExpression
    (83) unaryExpression -> . primaryExpression postfixUnaryOperator
    (122) unaryOperator -> . INCREMENTO
    (123) unaryOperator -> . DECREMENTO
    (124) unaryOperator -> . MINUS
    (125) unaryOperator -> . PLUS
    (126) unaryOperator -> . NOT
    (86) primaryExpression -> . NULL
    (87) primaryExpression -> . TRUE
    (88) primaryExpression -> . FALSE
    (89) primaryExpression -> . NUMBER
    (90) primaryExpression -> . LITERAL_STRING
    (91) primaryExpression -> . ID
    (92) primaryExpression -> . chamadaDeFuncao
    (93) primaryExpression -> . parenthesizedExpression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (97) parenthesizedExpression -> . LPAREN expression RPAREN

    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38
    NOT             shift and go to state 39
    NULL            shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    NUMBER          shift and go to state 43
    LITERAL_STRING  shift and go to state 44
    ID              shift and go to state 45
    LPAREN          shift and go to state 48

    expression                     shift and go to state 172
    disjunction                    shift and go to state 22
    conjunction                    shift and go to state 23
    equality                       shift and go to state 24
    comparison                     shift and go to state 25
    infixOperation                 shift and go to state 26
    elvisExpression                shift and go to state 27
    rangeExpression                shift and go to state 28
    additiveExpression             shift and go to state 29
    multiplicativeExpression       shift and go to state 30
    asExpression                   shift and go to state 31
    unaryExpression                shift and go to state 32
    unaryOperator                  shift and go to state 33
    primaryExpression              shift and go to state 34
    chamadaDeFuncao                shift and go to state 46
    parenthesizedExpression        shift and go to state 47

state 157

    (55) multiVariableDeclaration -> LPAREN variableDeclarations . RPAREN

    RPAREN          shift and go to state 173


state 158

    (56) multiVariableDeclaration -> LPAREN RPAREN .

    ATRIBUICAO      reduce using rule 56 (multiVariableDeclaration -> LPAREN RPAREN .)
    IN              reduce using rule 56 (multiVariableDeclaration -> LPAREN RPAREN .)


state 159

    (53) variableDeclarations -> variableDeclaration .
    (54) variableDeclarations -> variableDeclaration . COMMA variableDeclarations

    RPAREN          reduce using rule 53 (variableDeclarations -> variableDeclaration .)
    COMMA           shift and go to state 174


state 160

    (51) variableDeclaration -> ID DOISP . type
    (10) type -> . parenthesizedType
    (11) type -> . ID
    (12) parenthesizedType -> . LPAREN type RPAREN

    ID              shift and go to state 17
    LPAREN          shift and go to state 20

    type                           shift and go to state 175
    parenthesizedType              shift and go to state 19

state 161

    (46) propertyDeclarationStm -> VAL genericVariableDeclaration ATRIBUICAO . expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction
    (61) disjunction -> . disjunction OR conjunction
    (62) conjunction -> . equality
    (63) conjunction -> . conjunction AND equality
    (64) equality -> . comparison
    (65) equality -> . equality equalityOperator comparison
    (66) comparison -> . infixOperation
    (67) comparison -> . infixOperation comparisonOperator infixOperation
    (68) infixOperation -> . infixOperation inOperator elvisExpression
    (69) infixOperation -> . infixOperation isOperator type
    (70) infixOperation -> . elvisExpression
    (71) elvisExpression -> . rangeExpression
    (72) elvisExpression -> . elvisExpression ELVIS rangeExpression
    (73) rangeExpression -> . additiveExpression
    (74) rangeExpression -> . rangeExpression PONTOPONTO additiveExpression
    (75) additiveExpression -> . multiplicativeExpression
    (76) additiveExpression -> . additiveExpression additiveOperator multiplicativeExpression
    (77) multiplicativeExpression -> . asExpression
    (78) multiplicativeExpression -> . multiplicativeExpression multiplicativeOperator asExpression
    (79) asExpression -> . unaryExpression
    (80) asExpression -> . unaryExpression asOperator type
    (81) unaryExpression -> . unaryOperator primaryExpression
    (82) unaryExpression -> . primaryExpression
    (83) unaryExpression -> . primaryExpression postfixUnaryOperator
    (122) unaryOperator -> . INCREMENTO
    (123) unaryOperator -> . DECREMENTO
    (124) unaryOperator -> . MINUS
    (125) unaryOperator -> . PLUS
    (126) unaryOperator -> . NOT
    (86) primaryExpression -> . NULL
    (87) primaryExpression -> . TRUE
    (88) primaryExpression -> . FALSE
    (89) primaryExpression -> . NUMBER
    (90) primaryExpression -> . LITERAL_STRING
    (91) primaryExpression -> . ID
    (92) primaryExpression -> . chamadaDeFuncao
    (93) primaryExpression -> . parenthesizedExpression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (97) parenthesizedExpression -> . LPAREN expression RPAREN

    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38
    NOT             shift and go to state 39
    NULL            shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    NUMBER          shift and go to state 43
    LITERAL_STRING  shift and go to state 44
    ID              shift and go to state 45
    LPAREN          shift and go to state 48

    expression                     shift and go to state 176
    disjunction                    shift and go to state 22
    conjunction                    shift and go to state 23
    equality                       shift and go to state 24
    comparison                     shift and go to state 25
    infixOperation                 shift and go to state 26
    elvisExpression                shift and go to state 27
    rangeExpression                shift and go to state 28
    additiveExpression             shift and go to state 29
    multiplicativeExpression       shift and go to state 30
    asExpression                   shift and go to state 31
    unaryExpression                shift and go to state 32
    unaryOperator                  shift and go to state 33
    primaryExpression              shift and go to state 34
    chamadaDeFuncao                shift and go to state 46
    parenthesizedExpression        shift and go to state 47

state 162

    (42) assignment -> ID ATRIBUICAO expression .

    IF              reduce using rule 42 (assignment -> ID ATRIBUICAO expression .)
    FOR             reduce using rule 42 (assignment -> ID ATRIBUICAO expression .)
    WHILE           reduce using rule 42 (assignment -> ID ATRIBUICAO expression .)
    DO              reduce using rule 42 (assignment -> ID ATRIBUICAO expression .)
    PV              reduce using rule 42 (assignment -> ID ATRIBUICAO expression .)
    VAR             reduce using rule 42 (assignment -> ID ATRIBUICAO expression .)
    VAL             reduce using rule 42 (assignment -> ID ATRIBUICAO expression .)
    ID              reduce using rule 42 (assignment -> ID ATRIBUICAO expression .)
    RETURN          reduce using rule 42 (assignment -> ID ATRIBUICAO expression .)
    CONTINUE        reduce using rule 42 (assignment -> ID ATRIBUICAO expression .)
    BREAK           reduce using rule 42 (assignment -> ID ATRIBUICAO expression .)
    RCHAVE          reduce using rule 42 (assignment -> ID ATRIBUICAO expression .)
    ELSE            reduce using rule 42 (assignment -> ID ATRIBUICAO expression .)


state 163

    (43) assignment -> ID assignmentAndOperator expression .

    IF              reduce using rule 43 (assignment -> ID assignmentAndOperator expression .)
    FOR             reduce using rule 43 (assignment -> ID assignmentAndOperator expression .)
    WHILE           reduce using rule 43 (assignment -> ID assignmentAndOperator expression .)
    DO              reduce using rule 43 (assignment -> ID assignmentAndOperator expression .)
    PV              reduce using rule 43 (assignment -> ID assignmentAndOperator expression .)
    VAR             reduce using rule 43 (assignment -> ID assignmentAndOperator expression .)
    VAL             reduce using rule 43 (assignment -> ID assignmentAndOperator expression .)
    ID              reduce using rule 43 (assignment -> ID assignmentAndOperator expression .)
    RETURN          reduce using rule 43 (assignment -> ID assignmentAndOperator expression .)
    CONTINUE        reduce using rule 43 (assignment -> ID assignmentAndOperator expression .)
    BREAK           reduce using rule 43 (assignment -> ID assignmentAndOperator expression .)
    RCHAVE          reduce using rule 43 (assignment -> ID assignmentAndOperator expression .)
    ELSE            reduce using rule 43 (assignment -> ID assignmentAndOperator expression .)


state 164

    (48) chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .

    INCREMENTO      reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    DECREMENTO      reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    AS              reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    MULT            reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    DIVIDE          reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    MOD             reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    PLUS            reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    MINUS           reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    PONTOPONTO      reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    ELVIS           reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    MENOR           reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    MAIOR           reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    MENORIGUAL      reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    MAIORIGUAL      reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    IN              reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    NOT_IN          reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    IS              reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    NOT_IS          reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    DIFERENTE       reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    IDENTIDADE      reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    IGUALDADE       reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    SEMIDENTIDADE   reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    AND             reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    OR              reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    FUN             reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    $end            reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    IF              reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    FOR             reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    WHILE           reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    DO              reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    PV              reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    VAR             reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    VAL             reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    ID              reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    RETURN          reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    CONTINUE        reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    BREAK           reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    RCHAVE          reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    RPAREN          reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    ELSE            reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    COMMA           reduce using rule 48 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)


state 165

    (58) parametersFunction -> primaryExpression COMMA . parametersFunction
    (57) parametersFunction -> . primaryExpression
    (58) parametersFunction -> . primaryExpression COMMA parametersFunction
    (86) primaryExpression -> . NULL
    (87) primaryExpression -> . TRUE
    (88) primaryExpression -> . FALSE
    (89) primaryExpression -> . NUMBER
    (90) primaryExpression -> . LITERAL_STRING
    (91) primaryExpression -> . ID
    (92) primaryExpression -> . chamadaDeFuncao
    (93) primaryExpression -> . parenthesizedExpression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (97) parenthesizedExpression -> . LPAREN expression RPAREN

    NULL            shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    NUMBER          shift and go to state 43
    LITERAL_STRING  shift and go to state 44
    ID              shift and go to state 45
    LPAREN          shift and go to state 48

    primaryExpression              shift and go to state 148
    parametersFunction             shift and go to state 177
    chamadaDeFuncao                shift and go to state 46
    parenthesizedExpression        shift and go to state 47

state 166

    (19) open_statement -> IF LPAREN expression RPAREN . block
    (20) open_statement -> IF LPAREN expression RPAREN . statement
    (21) open_statement -> IF LPAREN expression RPAREN . block ELSE open_statement
    (22) open_statement -> IF LPAREN expression RPAREN . closed_statement ELSE open_statement
    (27) closed_statement -> IF LPAREN expression RPAREN . block ELSE block
    (28) closed_statement -> IF LPAREN expression RPAREN . closed_statement ELSE block
    (29) closed_statement -> IF LPAREN expression RPAREN . block ELSE closed_statement
    (30) closed_statement -> IF LPAREN expression RPAREN . closed_statement ELSE closed_statement
    (44) block -> . LCHAVE statements RCHAVE
    (17) statement -> . open_statement
    (18) statement -> . closed_statement
    (26) closed_statement -> . non_if_statement_block
    (27) closed_statement -> . IF LPAREN expression RPAREN block ELSE block
    (28) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE block
    (29) closed_statement -> . IF LPAREN expression RPAREN block ELSE closed_statement
    (30) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE closed_statement
    (31) closed_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement
    (32) closed_statement -> . WHILE LPAREN expression RPAREN closed_statement
    (33) closed_statement -> . DO closed_statement WHILE LPAREN expression RPAREN
    (19) open_statement -> . IF LPAREN expression RPAREN block
    (20) open_statement -> . IF LPAREN expression RPAREN statement
    (21) open_statement -> . IF LPAREN expression RPAREN block ELSE open_statement
    (22) open_statement -> . IF LPAREN expression RPAREN closed_statement ELSE open_statement
    (23) open_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement
    (24) open_statement -> . WHILE LPAREN expression RPAREN open_statement
    (25) open_statement -> . DO open_statement WHILE LPAREN expression RPAREN
    (34) non_if_statement_block -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN block
    (35) non_if_statement_block -> . WHILE LPAREN expression RPAREN block
    (36) non_if_statement_block -> . DO block WHILE LPAREN expression RPAREN
    (37) non_if_statement_block -> . PV
    (38) non_if_statement_block -> . propertyDeclarationStm
    (39) non_if_statement_block -> . assignment
    (40) non_if_statement_block -> . chamadaDeFuncao
    (41) non_if_statement_block -> . jumpExpression
    (45) propertyDeclarationStm -> . VAR genericVariableDeclaration ATRIBUICAO expression
    (46) propertyDeclarationStm -> . VAL genericVariableDeclaration ATRIBUICAO expression
    (42) assignment -> . ID ATRIBUICAO expression
    (43) assignment -> . ID assignmentAndOperator expression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (94) jumpExpression -> . RETURN expression
    (95) jumpExpression -> . CONTINUE
    (96) jumpExpression -> . BREAK

    LCHAVE          shift and go to state 12
    IF              shift and go to state 178
    FOR             shift and go to state 182
    WHILE           shift and go to state 183
    DO              shift and go to state 184
    PV              shift and go to state 58
    VAR             shift and go to state 63
    VAL             shift and go to state 64
    ID              shift and go to state 65
    RETURN          shift and go to state 66
    CONTINUE        shift and go to state 67
    BREAK           shift and go to state 68

    block                          shift and go to state 179
    statement                      shift and go to state 180
    open_statement                 shift and go to state 51
    closed_statement               shift and go to state 181
    non_if_statement_block         shift and go to state 57
    propertyDeclarationStm         shift and go to state 59
    assignment                     shift and go to state 60
    chamadaDeFuncao                shift and go to state 61
    jumpExpression                 shift and go to state 62

state 167

    (23) open_statement -> FOR LPAREN genericVariableDeclaration IN . expression RPAREN open_statement
    (31) closed_statement -> FOR LPAREN genericVariableDeclaration IN . expression RPAREN closed_statement
    (34) non_if_statement_block -> FOR LPAREN genericVariableDeclaration IN . expression RPAREN block
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction
    (61) disjunction -> . disjunction OR conjunction
    (62) conjunction -> . equality
    (63) conjunction -> . conjunction AND equality
    (64) equality -> . comparison
    (65) equality -> . equality equalityOperator comparison
    (66) comparison -> . infixOperation
    (67) comparison -> . infixOperation comparisonOperator infixOperation
    (68) infixOperation -> . infixOperation inOperator elvisExpression
    (69) infixOperation -> . infixOperation isOperator type
    (70) infixOperation -> . elvisExpression
    (71) elvisExpression -> . rangeExpression
    (72) elvisExpression -> . elvisExpression ELVIS rangeExpression
    (73) rangeExpression -> . additiveExpression
    (74) rangeExpression -> . rangeExpression PONTOPONTO additiveExpression
    (75) additiveExpression -> . multiplicativeExpression
    (76) additiveExpression -> . additiveExpression additiveOperator multiplicativeExpression
    (77) multiplicativeExpression -> . asExpression
    (78) multiplicativeExpression -> . multiplicativeExpression multiplicativeOperator asExpression
    (79) asExpression -> . unaryExpression
    (80) asExpression -> . unaryExpression asOperator type
    (81) unaryExpression -> . unaryOperator primaryExpression
    (82) unaryExpression -> . primaryExpression
    (83) unaryExpression -> . primaryExpression postfixUnaryOperator
    (122) unaryOperator -> . INCREMENTO
    (123) unaryOperator -> . DECREMENTO
    (124) unaryOperator -> . MINUS
    (125) unaryOperator -> . PLUS
    (126) unaryOperator -> . NOT
    (86) primaryExpression -> . NULL
    (87) primaryExpression -> . TRUE
    (88) primaryExpression -> . FALSE
    (89) primaryExpression -> . NUMBER
    (90) primaryExpression -> . LITERAL_STRING
    (91) primaryExpression -> . ID
    (92) primaryExpression -> . chamadaDeFuncao
    (93) primaryExpression -> . parenthesizedExpression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (97) parenthesizedExpression -> . LPAREN expression RPAREN

    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38
    NOT             shift and go to state 39
    NULL            shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    NUMBER          shift and go to state 43
    LITERAL_STRING  shift and go to state 44
    ID              shift and go to state 45
    LPAREN          shift and go to state 48

    expression                     shift and go to state 185
    disjunction                    shift and go to state 22
    conjunction                    shift and go to state 23
    equality                       shift and go to state 24
    comparison                     shift and go to state 25
    infixOperation                 shift and go to state 26
    elvisExpression                shift and go to state 27
    rangeExpression                shift and go to state 28
    additiveExpression             shift and go to state 29
    multiplicativeExpression       shift and go to state 30
    asExpression                   shift and go to state 31
    unaryExpression                shift and go to state 32
    unaryOperator                  shift and go to state 33
    primaryExpression              shift and go to state 34
    chamadaDeFuncao                shift and go to state 46
    parenthesizedExpression        shift and go to state 47

state 168

    (24) open_statement -> WHILE LPAREN expression RPAREN . open_statement
    (32) closed_statement -> WHILE LPAREN expression RPAREN . closed_statement
    (35) non_if_statement_block -> WHILE LPAREN expression RPAREN . block
    (19) open_statement -> . IF LPAREN expression RPAREN block
    (20) open_statement -> . IF LPAREN expression RPAREN statement
    (21) open_statement -> . IF LPAREN expression RPAREN block ELSE open_statement
    (22) open_statement -> . IF LPAREN expression RPAREN closed_statement ELSE open_statement
    (23) open_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement
    (24) open_statement -> . WHILE LPAREN expression RPAREN open_statement
    (25) open_statement -> . DO open_statement WHILE LPAREN expression RPAREN
    (26) closed_statement -> . non_if_statement_block
    (27) closed_statement -> . IF LPAREN expression RPAREN block ELSE block
    (28) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE block
    (29) closed_statement -> . IF LPAREN expression RPAREN block ELSE closed_statement
    (30) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE closed_statement
    (31) closed_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement
    (32) closed_statement -> . WHILE LPAREN expression RPAREN closed_statement
    (33) closed_statement -> . DO closed_statement WHILE LPAREN expression RPAREN
    (44) block -> . LCHAVE statements RCHAVE
    (34) non_if_statement_block -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN block
    (35) non_if_statement_block -> . WHILE LPAREN expression RPAREN block
    (36) non_if_statement_block -> . DO block WHILE LPAREN expression RPAREN
    (37) non_if_statement_block -> . PV
    (38) non_if_statement_block -> . propertyDeclarationStm
    (39) non_if_statement_block -> . assignment
    (40) non_if_statement_block -> . chamadaDeFuncao
    (41) non_if_statement_block -> . jumpExpression
    (45) propertyDeclarationStm -> . VAR genericVariableDeclaration ATRIBUICAO expression
    (46) propertyDeclarationStm -> . VAL genericVariableDeclaration ATRIBUICAO expression
    (42) assignment -> . ID ATRIBUICAO expression
    (43) assignment -> . ID assignmentAndOperator expression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (94) jumpExpression -> . RETURN expression
    (95) jumpExpression -> . CONTINUE
    (96) jumpExpression -> . BREAK

    IF              shift and go to state 53
    FOR             shift and go to state 54
    WHILE           shift and go to state 55
    DO              shift and go to state 56
    LCHAVE          shift and go to state 12
    PV              shift and go to state 58
    VAR             shift and go to state 63
    VAL             shift and go to state 64
    ID              shift and go to state 65
    RETURN          shift and go to state 66
    CONTINUE        shift and go to state 67
    BREAK           shift and go to state 68

    open_statement                 shift and go to state 186
    closed_statement               shift and go to state 187
    block                          shift and go to state 188
    non_if_statement_block         shift and go to state 57
    propertyDeclarationStm         shift and go to state 59
    assignment                     shift and go to state 60
    chamadaDeFuncao                shift and go to state 61
    jumpExpression                 shift and go to state 62

state 169

    (25) open_statement -> DO open_statement WHILE LPAREN . expression RPAREN
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction
    (61) disjunction -> . disjunction OR conjunction
    (62) conjunction -> . equality
    (63) conjunction -> . conjunction AND equality
    (64) equality -> . comparison
    (65) equality -> . equality equalityOperator comparison
    (66) comparison -> . infixOperation
    (67) comparison -> . infixOperation comparisonOperator infixOperation
    (68) infixOperation -> . infixOperation inOperator elvisExpression
    (69) infixOperation -> . infixOperation isOperator type
    (70) infixOperation -> . elvisExpression
    (71) elvisExpression -> . rangeExpression
    (72) elvisExpression -> . elvisExpression ELVIS rangeExpression
    (73) rangeExpression -> . additiveExpression
    (74) rangeExpression -> . rangeExpression PONTOPONTO additiveExpression
    (75) additiveExpression -> . multiplicativeExpression
    (76) additiveExpression -> . additiveExpression additiveOperator multiplicativeExpression
    (77) multiplicativeExpression -> . asExpression
    (78) multiplicativeExpression -> . multiplicativeExpression multiplicativeOperator asExpression
    (79) asExpression -> . unaryExpression
    (80) asExpression -> . unaryExpression asOperator type
    (81) unaryExpression -> . unaryOperator primaryExpression
    (82) unaryExpression -> . primaryExpression
    (83) unaryExpression -> . primaryExpression postfixUnaryOperator
    (122) unaryOperator -> . INCREMENTO
    (123) unaryOperator -> . DECREMENTO
    (124) unaryOperator -> . MINUS
    (125) unaryOperator -> . PLUS
    (126) unaryOperator -> . NOT
    (86) primaryExpression -> . NULL
    (87) primaryExpression -> . TRUE
    (88) primaryExpression -> . FALSE
    (89) primaryExpression -> . NUMBER
    (90) primaryExpression -> . LITERAL_STRING
    (91) primaryExpression -> . ID
    (92) primaryExpression -> . chamadaDeFuncao
    (93) primaryExpression -> . parenthesizedExpression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (97) parenthesizedExpression -> . LPAREN expression RPAREN

    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38
    NOT             shift and go to state 39
    NULL            shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    NUMBER          shift and go to state 43
    LITERAL_STRING  shift and go to state 44
    ID              shift and go to state 45
    LPAREN          shift and go to state 48

    expression                     shift and go to state 189
    disjunction                    shift and go to state 22
    conjunction                    shift and go to state 23
    equality                       shift and go to state 24
    comparison                     shift and go to state 25
    infixOperation                 shift and go to state 26
    elvisExpression                shift and go to state 27
    rangeExpression                shift and go to state 28
    additiveExpression             shift and go to state 29
    multiplicativeExpression       shift and go to state 30
    asExpression                   shift and go to state 31
    unaryExpression                shift and go to state 32
    unaryOperator                  shift and go to state 33
    primaryExpression              shift and go to state 34
    chamadaDeFuncao                shift and go to state 46
    parenthesizedExpression        shift and go to state 47

state 170

    (33) closed_statement -> DO closed_statement WHILE LPAREN . expression RPAREN
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction
    (61) disjunction -> . disjunction OR conjunction
    (62) conjunction -> . equality
    (63) conjunction -> . conjunction AND equality
    (64) equality -> . comparison
    (65) equality -> . equality equalityOperator comparison
    (66) comparison -> . infixOperation
    (67) comparison -> . infixOperation comparisonOperator infixOperation
    (68) infixOperation -> . infixOperation inOperator elvisExpression
    (69) infixOperation -> . infixOperation isOperator type
    (70) infixOperation -> . elvisExpression
    (71) elvisExpression -> . rangeExpression
    (72) elvisExpression -> . elvisExpression ELVIS rangeExpression
    (73) rangeExpression -> . additiveExpression
    (74) rangeExpression -> . rangeExpression PONTOPONTO additiveExpression
    (75) additiveExpression -> . multiplicativeExpression
    (76) additiveExpression -> . additiveExpression additiveOperator multiplicativeExpression
    (77) multiplicativeExpression -> . asExpression
    (78) multiplicativeExpression -> . multiplicativeExpression multiplicativeOperator asExpression
    (79) asExpression -> . unaryExpression
    (80) asExpression -> . unaryExpression asOperator type
    (81) unaryExpression -> . unaryOperator primaryExpression
    (82) unaryExpression -> . primaryExpression
    (83) unaryExpression -> . primaryExpression postfixUnaryOperator
    (122) unaryOperator -> . INCREMENTO
    (123) unaryOperator -> . DECREMENTO
    (124) unaryOperator -> . MINUS
    (125) unaryOperator -> . PLUS
    (126) unaryOperator -> . NOT
    (86) primaryExpression -> . NULL
    (87) primaryExpression -> . TRUE
    (88) primaryExpression -> . FALSE
    (89) primaryExpression -> . NUMBER
    (90) primaryExpression -> . LITERAL_STRING
    (91) primaryExpression -> . ID
    (92) primaryExpression -> . chamadaDeFuncao
    (93) primaryExpression -> . parenthesizedExpression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (97) parenthesizedExpression -> . LPAREN expression RPAREN

    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38
    NOT             shift and go to state 39
    NULL            shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    NUMBER          shift and go to state 43
    LITERAL_STRING  shift and go to state 44
    ID              shift and go to state 45
    LPAREN          shift and go to state 48

    expression                     shift and go to state 190
    disjunction                    shift and go to state 22
    conjunction                    shift and go to state 23
    equality                       shift and go to state 24
    comparison                     shift and go to state 25
    infixOperation                 shift and go to state 26
    elvisExpression                shift and go to state 27
    rangeExpression                shift and go to state 28
    additiveExpression             shift and go to state 29
    multiplicativeExpression       shift and go to state 30
    asExpression                   shift and go to state 31
    unaryExpression                shift and go to state 32
    unaryOperator                  shift and go to state 33
    primaryExpression              shift and go to state 34
    chamadaDeFuncao                shift and go to state 46
    parenthesizedExpression        shift and go to state 47

state 171

    (36) non_if_statement_block -> DO block WHILE LPAREN . expression RPAREN
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction
    (61) disjunction -> . disjunction OR conjunction
    (62) conjunction -> . equality
    (63) conjunction -> . conjunction AND equality
    (64) equality -> . comparison
    (65) equality -> . equality equalityOperator comparison
    (66) comparison -> . infixOperation
    (67) comparison -> . infixOperation comparisonOperator infixOperation
    (68) infixOperation -> . infixOperation inOperator elvisExpression
    (69) infixOperation -> . infixOperation isOperator type
    (70) infixOperation -> . elvisExpression
    (71) elvisExpression -> . rangeExpression
    (72) elvisExpression -> . elvisExpression ELVIS rangeExpression
    (73) rangeExpression -> . additiveExpression
    (74) rangeExpression -> . rangeExpression PONTOPONTO additiveExpression
    (75) additiveExpression -> . multiplicativeExpression
    (76) additiveExpression -> . additiveExpression additiveOperator multiplicativeExpression
    (77) multiplicativeExpression -> . asExpression
    (78) multiplicativeExpression -> . multiplicativeExpression multiplicativeOperator asExpression
    (79) asExpression -> . unaryExpression
    (80) asExpression -> . unaryExpression asOperator type
    (81) unaryExpression -> . unaryOperator primaryExpression
    (82) unaryExpression -> . primaryExpression
    (83) unaryExpression -> . primaryExpression postfixUnaryOperator
    (122) unaryOperator -> . INCREMENTO
    (123) unaryOperator -> . DECREMENTO
    (124) unaryOperator -> . MINUS
    (125) unaryOperator -> . PLUS
    (126) unaryOperator -> . NOT
    (86) primaryExpression -> . NULL
    (87) primaryExpression -> . TRUE
    (88) primaryExpression -> . FALSE
    (89) primaryExpression -> . NUMBER
    (90) primaryExpression -> . LITERAL_STRING
    (91) primaryExpression -> . ID
    (92) primaryExpression -> . chamadaDeFuncao
    (93) primaryExpression -> . parenthesizedExpression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (97) parenthesizedExpression -> . LPAREN expression RPAREN

    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38
    NOT             shift and go to state 39
    NULL            shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    NUMBER          shift and go to state 43
    LITERAL_STRING  shift and go to state 44
    ID              shift and go to state 45
    LPAREN          shift and go to state 48

    expression                     shift and go to state 191
    disjunction                    shift and go to state 22
    conjunction                    shift and go to state 23
    equality                       shift and go to state 24
    comparison                     shift and go to state 25
    infixOperation                 shift and go to state 26
    elvisExpression                shift and go to state 27
    rangeExpression                shift and go to state 28
    additiveExpression             shift and go to state 29
    multiplicativeExpression       shift and go to state 30
    asExpression                   shift and go to state 31
    unaryExpression                shift and go to state 32
    unaryOperator                  shift and go to state 33
    primaryExpression              shift and go to state 34
    chamadaDeFuncao                shift and go to state 46
    parenthesizedExpression        shift and go to state 47

state 172

    (45) propertyDeclarationStm -> VAR genericVariableDeclaration ATRIBUICAO expression .

    IF              reduce using rule 45 (propertyDeclarationStm -> VAR genericVariableDeclaration ATRIBUICAO expression .)
    FOR             reduce using rule 45 (propertyDeclarationStm -> VAR genericVariableDeclaration ATRIBUICAO expression .)
    WHILE           reduce using rule 45 (propertyDeclarationStm -> VAR genericVariableDeclaration ATRIBUICAO expression .)
    DO              reduce using rule 45 (propertyDeclarationStm -> VAR genericVariableDeclaration ATRIBUICAO expression .)
    PV              reduce using rule 45 (propertyDeclarationStm -> VAR genericVariableDeclaration ATRIBUICAO expression .)
    VAR             reduce using rule 45 (propertyDeclarationStm -> VAR genericVariableDeclaration ATRIBUICAO expression .)
    VAL             reduce using rule 45 (propertyDeclarationStm -> VAR genericVariableDeclaration ATRIBUICAO expression .)
    ID              reduce using rule 45 (propertyDeclarationStm -> VAR genericVariableDeclaration ATRIBUICAO expression .)
    RETURN          reduce using rule 45 (propertyDeclarationStm -> VAR genericVariableDeclaration ATRIBUICAO expression .)
    CONTINUE        reduce using rule 45 (propertyDeclarationStm -> VAR genericVariableDeclaration ATRIBUICAO expression .)
    BREAK           reduce using rule 45 (propertyDeclarationStm -> VAR genericVariableDeclaration ATRIBUICAO expression .)
    RCHAVE          reduce using rule 45 (propertyDeclarationStm -> VAR genericVariableDeclaration ATRIBUICAO expression .)
    ELSE            reduce using rule 45 (propertyDeclarationStm -> VAR genericVariableDeclaration ATRIBUICAO expression .)


state 173

    (55) multiVariableDeclaration -> LPAREN variableDeclarations RPAREN .

    ATRIBUICAO      reduce using rule 55 (multiVariableDeclaration -> LPAREN variableDeclarations RPAREN .)
    IN              reduce using rule 55 (multiVariableDeclaration -> LPAREN variableDeclarations RPAREN .)


state 174

    (54) variableDeclarations -> variableDeclaration COMMA . variableDeclarations
    (53) variableDeclarations -> . variableDeclaration
    (54) variableDeclarations -> . variableDeclaration COMMA variableDeclarations
    (51) variableDeclaration -> . ID DOISP type
    (52) variableDeclaration -> . ID

    ID              shift and go to state 121

    variableDeclaration            shift and go to state 159
    variableDeclarations           shift and go to state 192

state 175

    (51) variableDeclaration -> ID DOISP type .

    ATRIBUICAO      reduce using rule 51 (variableDeclaration -> ID DOISP type .)
    IN              reduce using rule 51 (variableDeclaration -> ID DOISP type .)
    COMMA           reduce using rule 51 (variableDeclaration -> ID DOISP type .)
    RPAREN          reduce using rule 51 (variableDeclaration -> ID DOISP type .)


state 176

    (46) propertyDeclarationStm -> VAL genericVariableDeclaration ATRIBUICAO expression .

    IF              reduce using rule 46 (propertyDeclarationStm -> VAL genericVariableDeclaration ATRIBUICAO expression .)
    FOR             reduce using rule 46 (propertyDeclarationStm -> VAL genericVariableDeclaration ATRIBUICAO expression .)
    WHILE           reduce using rule 46 (propertyDeclarationStm -> VAL genericVariableDeclaration ATRIBUICAO expression .)
    DO              reduce using rule 46 (propertyDeclarationStm -> VAL genericVariableDeclaration ATRIBUICAO expression .)
    PV              reduce using rule 46 (propertyDeclarationStm -> VAL genericVariableDeclaration ATRIBUICAO expression .)
    VAR             reduce using rule 46 (propertyDeclarationStm -> VAL genericVariableDeclaration ATRIBUICAO expression .)
    VAL             reduce using rule 46 (propertyDeclarationStm -> VAL genericVariableDeclaration ATRIBUICAO expression .)
    ID              reduce using rule 46 (propertyDeclarationStm -> VAL genericVariableDeclaration ATRIBUICAO expression .)
    RETURN          reduce using rule 46 (propertyDeclarationStm -> VAL genericVariableDeclaration ATRIBUICAO expression .)
    CONTINUE        reduce using rule 46 (propertyDeclarationStm -> VAL genericVariableDeclaration ATRIBUICAO expression .)
    BREAK           reduce using rule 46 (propertyDeclarationStm -> VAL genericVariableDeclaration ATRIBUICAO expression .)
    RCHAVE          reduce using rule 46 (propertyDeclarationStm -> VAL genericVariableDeclaration ATRIBUICAO expression .)
    ELSE            reduce using rule 46 (propertyDeclarationStm -> VAL genericVariableDeclaration ATRIBUICAO expression .)


state 177

    (58) parametersFunction -> primaryExpression COMMA parametersFunction .

    RPAREN          reduce using rule 58 (parametersFunction -> primaryExpression COMMA parametersFunction .)


state 178

    (27) closed_statement -> IF . LPAREN expression RPAREN block ELSE block
    (28) closed_statement -> IF . LPAREN expression RPAREN closed_statement ELSE block
    (29) closed_statement -> IF . LPAREN expression RPAREN block ELSE closed_statement
    (30) closed_statement -> IF . LPAREN expression RPAREN closed_statement ELSE closed_statement
    (19) open_statement -> IF . LPAREN expression RPAREN block
    (20) open_statement -> IF . LPAREN expression RPAREN statement
    (21) open_statement -> IF . LPAREN expression RPAREN block ELSE open_statement
    (22) open_statement -> IF . LPAREN expression RPAREN closed_statement ELSE open_statement

    LPAREN          shift and go to state 193


state 179

    (19) open_statement -> IF LPAREN expression RPAREN block .
    (21) open_statement -> IF LPAREN expression RPAREN block . ELSE open_statement
    (27) closed_statement -> IF LPAREN expression RPAREN block . ELSE block
    (29) closed_statement -> IF LPAREN expression RPAREN block . ELSE closed_statement

    IF              reduce using rule 19 (open_statement -> IF LPAREN expression RPAREN block .)
    FOR             reduce using rule 19 (open_statement -> IF LPAREN expression RPAREN block .)
    WHILE           reduce using rule 19 (open_statement -> IF LPAREN expression RPAREN block .)
    DO              reduce using rule 19 (open_statement -> IF LPAREN expression RPAREN block .)
    PV              reduce using rule 19 (open_statement -> IF LPAREN expression RPAREN block .)
    VAR             reduce using rule 19 (open_statement -> IF LPAREN expression RPAREN block .)
    VAL             reduce using rule 19 (open_statement -> IF LPAREN expression RPAREN block .)
    ID              reduce using rule 19 (open_statement -> IF LPAREN expression RPAREN block .)
    RETURN          reduce using rule 19 (open_statement -> IF LPAREN expression RPAREN block .)
    CONTINUE        reduce using rule 19 (open_statement -> IF LPAREN expression RPAREN block .)
    BREAK           reduce using rule 19 (open_statement -> IF LPAREN expression RPAREN block .)
    RCHAVE          reduce using rule 19 (open_statement -> IF LPAREN expression RPAREN block .)
    ELSE            shift and go to state 194


state 180

    (20) open_statement -> IF LPAREN expression RPAREN statement .

    IF              reduce using rule 20 (open_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 20 (open_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 20 (open_statement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 20 (open_statement -> IF LPAREN expression RPAREN statement .)
    PV              reduce using rule 20 (open_statement -> IF LPAREN expression RPAREN statement .)
    VAR             reduce using rule 20 (open_statement -> IF LPAREN expression RPAREN statement .)
    VAL             reduce using rule 20 (open_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 20 (open_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 20 (open_statement -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 20 (open_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 20 (open_statement -> IF LPAREN expression RPAREN statement .)
    RCHAVE          reduce using rule 20 (open_statement -> IF LPAREN expression RPAREN statement .)


state 181

    (22) open_statement -> IF LPAREN expression RPAREN closed_statement . ELSE open_statement
    (28) closed_statement -> IF LPAREN expression RPAREN closed_statement . ELSE block
    (30) closed_statement -> IF LPAREN expression RPAREN closed_statement . ELSE closed_statement
    (18) statement -> closed_statement .

    ELSE            shift and go to state 195
    IF              reduce using rule 18 (statement -> closed_statement .)
    FOR             reduce using rule 18 (statement -> closed_statement .)
    WHILE           reduce using rule 18 (statement -> closed_statement .)
    DO              reduce using rule 18 (statement -> closed_statement .)
    PV              reduce using rule 18 (statement -> closed_statement .)
    VAR             reduce using rule 18 (statement -> closed_statement .)
    VAL             reduce using rule 18 (statement -> closed_statement .)
    ID              reduce using rule 18 (statement -> closed_statement .)
    RETURN          reduce using rule 18 (statement -> closed_statement .)
    CONTINUE        reduce using rule 18 (statement -> closed_statement .)
    BREAK           reduce using rule 18 (statement -> closed_statement .)
    RCHAVE          reduce using rule 18 (statement -> closed_statement .)


state 182

    (31) closed_statement -> FOR . LPAREN genericVariableDeclaration IN expression RPAREN closed_statement
    (23) open_statement -> FOR . LPAREN genericVariableDeclaration IN expression RPAREN open_statement
    (34) non_if_statement_block -> FOR . LPAREN genericVariableDeclaration IN expression RPAREN block

    LPAREN          shift and go to state 196


state 183

    (32) closed_statement -> WHILE . LPAREN expression RPAREN closed_statement
    (24) open_statement -> WHILE . LPAREN expression RPAREN open_statement
    (35) non_if_statement_block -> WHILE . LPAREN expression RPAREN block

    LPAREN          shift and go to state 197


state 184

    (33) closed_statement -> DO . closed_statement WHILE LPAREN expression RPAREN
    (25) open_statement -> DO . open_statement WHILE LPAREN expression RPAREN
    (36) non_if_statement_block -> DO . block WHILE LPAREN expression RPAREN
    (26) closed_statement -> . non_if_statement_block
    (27) closed_statement -> . IF LPAREN expression RPAREN block ELSE block
    (28) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE block
    (29) closed_statement -> . IF LPAREN expression RPAREN block ELSE closed_statement
    (30) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE closed_statement
    (31) closed_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement
    (32) closed_statement -> . WHILE LPAREN expression RPAREN closed_statement
    (33) closed_statement -> . DO closed_statement WHILE LPAREN expression RPAREN
    (19) open_statement -> . IF LPAREN expression RPAREN block
    (20) open_statement -> . IF LPAREN expression RPAREN statement
    (21) open_statement -> . IF LPAREN expression RPAREN block ELSE open_statement
    (22) open_statement -> . IF LPAREN expression RPAREN closed_statement ELSE open_statement
    (23) open_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement
    (24) open_statement -> . WHILE LPAREN expression RPAREN open_statement
    (25) open_statement -> . DO open_statement WHILE LPAREN expression RPAREN
    (44) block -> . LCHAVE statements RCHAVE
    (34) non_if_statement_block -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN block
    (35) non_if_statement_block -> . WHILE LPAREN expression RPAREN block
    (36) non_if_statement_block -> . DO block WHILE LPAREN expression RPAREN
    (37) non_if_statement_block -> . PV
    (38) non_if_statement_block -> . propertyDeclarationStm
    (39) non_if_statement_block -> . assignment
    (40) non_if_statement_block -> . chamadaDeFuncao
    (41) non_if_statement_block -> . jumpExpression
    (45) propertyDeclarationStm -> . VAR genericVariableDeclaration ATRIBUICAO expression
    (46) propertyDeclarationStm -> . VAL genericVariableDeclaration ATRIBUICAO expression
    (42) assignment -> . ID ATRIBUICAO expression
    (43) assignment -> . ID assignmentAndOperator expression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (94) jumpExpression -> . RETURN expression
    (95) jumpExpression -> . CONTINUE
    (96) jumpExpression -> . BREAK

    IF              shift and go to state 178
    FOR             shift and go to state 182
    WHILE           shift and go to state 183
    DO              shift and go to state 184
    LCHAVE          shift and go to state 12
    PV              shift and go to state 58
    VAR             shift and go to state 63
    VAL             shift and go to state 64
    ID              shift and go to state 65
    RETURN          shift and go to state 66
    CONTINUE        shift and go to state 67
    BREAK           shift and go to state 68

    closed_statement               shift and go to state 115
    open_statement                 shift and go to state 114
    block                          shift and go to state 116
    non_if_statement_block         shift and go to state 57
    propertyDeclarationStm         shift and go to state 59
    assignment                     shift and go to state 60
    chamadaDeFuncao                shift and go to state 61
    jumpExpression                 shift and go to state 62

state 185

    (23) open_statement -> FOR LPAREN genericVariableDeclaration IN expression . RPAREN open_statement
    (31) closed_statement -> FOR LPAREN genericVariableDeclaration IN expression . RPAREN closed_statement
    (34) non_if_statement_block -> FOR LPAREN genericVariableDeclaration IN expression . RPAREN block

    RPAREN          shift and go to state 198


state 186

    (24) open_statement -> WHILE LPAREN expression RPAREN open_statement .

    IF              reduce using rule 24 (open_statement -> WHILE LPAREN expression RPAREN open_statement .)
    FOR             reduce using rule 24 (open_statement -> WHILE LPAREN expression RPAREN open_statement .)
    WHILE           reduce using rule 24 (open_statement -> WHILE LPAREN expression RPAREN open_statement .)
    DO              reduce using rule 24 (open_statement -> WHILE LPAREN expression RPAREN open_statement .)
    PV              reduce using rule 24 (open_statement -> WHILE LPAREN expression RPAREN open_statement .)
    VAR             reduce using rule 24 (open_statement -> WHILE LPAREN expression RPAREN open_statement .)
    VAL             reduce using rule 24 (open_statement -> WHILE LPAREN expression RPAREN open_statement .)
    ID              reduce using rule 24 (open_statement -> WHILE LPAREN expression RPAREN open_statement .)
    RETURN          reduce using rule 24 (open_statement -> WHILE LPAREN expression RPAREN open_statement .)
    CONTINUE        reduce using rule 24 (open_statement -> WHILE LPAREN expression RPAREN open_statement .)
    BREAK           reduce using rule 24 (open_statement -> WHILE LPAREN expression RPAREN open_statement .)
    RCHAVE          reduce using rule 24 (open_statement -> WHILE LPAREN expression RPAREN open_statement .)


state 187

    (32) closed_statement -> WHILE LPAREN expression RPAREN closed_statement .

    IF              reduce using rule 32 (closed_statement -> WHILE LPAREN expression RPAREN closed_statement .)
    FOR             reduce using rule 32 (closed_statement -> WHILE LPAREN expression RPAREN closed_statement .)
    WHILE           reduce using rule 32 (closed_statement -> WHILE LPAREN expression RPAREN closed_statement .)
    DO              reduce using rule 32 (closed_statement -> WHILE LPAREN expression RPAREN closed_statement .)
    PV              reduce using rule 32 (closed_statement -> WHILE LPAREN expression RPAREN closed_statement .)
    VAR             reduce using rule 32 (closed_statement -> WHILE LPAREN expression RPAREN closed_statement .)
    VAL             reduce using rule 32 (closed_statement -> WHILE LPAREN expression RPAREN closed_statement .)
    ID              reduce using rule 32 (closed_statement -> WHILE LPAREN expression RPAREN closed_statement .)
    RETURN          reduce using rule 32 (closed_statement -> WHILE LPAREN expression RPAREN closed_statement .)
    CONTINUE        reduce using rule 32 (closed_statement -> WHILE LPAREN expression RPAREN closed_statement .)
    BREAK           reduce using rule 32 (closed_statement -> WHILE LPAREN expression RPAREN closed_statement .)
    RCHAVE          reduce using rule 32 (closed_statement -> WHILE LPAREN expression RPAREN closed_statement .)
    ELSE            reduce using rule 32 (closed_statement -> WHILE LPAREN expression RPAREN closed_statement .)


state 188

    (35) non_if_statement_block -> WHILE LPAREN expression RPAREN block .

    IF              reduce using rule 35 (non_if_statement_block -> WHILE LPAREN expression RPAREN block .)
    FOR             reduce using rule 35 (non_if_statement_block -> WHILE LPAREN expression RPAREN block .)
    WHILE           reduce using rule 35 (non_if_statement_block -> WHILE LPAREN expression RPAREN block .)
    DO              reduce using rule 35 (non_if_statement_block -> WHILE LPAREN expression RPAREN block .)
    PV              reduce using rule 35 (non_if_statement_block -> WHILE LPAREN expression RPAREN block .)
    VAR             reduce using rule 35 (non_if_statement_block -> WHILE LPAREN expression RPAREN block .)
    VAL             reduce using rule 35 (non_if_statement_block -> WHILE LPAREN expression RPAREN block .)
    ID              reduce using rule 35 (non_if_statement_block -> WHILE LPAREN expression RPAREN block .)
    RETURN          reduce using rule 35 (non_if_statement_block -> WHILE LPAREN expression RPAREN block .)
    CONTINUE        reduce using rule 35 (non_if_statement_block -> WHILE LPAREN expression RPAREN block .)
    BREAK           reduce using rule 35 (non_if_statement_block -> WHILE LPAREN expression RPAREN block .)
    RCHAVE          reduce using rule 35 (non_if_statement_block -> WHILE LPAREN expression RPAREN block .)
    ELSE            reduce using rule 35 (non_if_statement_block -> WHILE LPAREN expression RPAREN block .)


state 189

    (25) open_statement -> DO open_statement WHILE LPAREN expression . RPAREN

    RPAREN          shift and go to state 199


state 190

    (33) closed_statement -> DO closed_statement WHILE LPAREN expression . RPAREN

    RPAREN          shift and go to state 200


state 191

    (36) non_if_statement_block -> DO block WHILE LPAREN expression . RPAREN

    RPAREN          shift and go to state 201


state 192

    (54) variableDeclarations -> variableDeclaration COMMA variableDeclarations .

    RPAREN          reduce using rule 54 (variableDeclarations -> variableDeclaration COMMA variableDeclarations .)


state 193

    (27) closed_statement -> IF LPAREN . expression RPAREN block ELSE block
    (28) closed_statement -> IF LPAREN . expression RPAREN closed_statement ELSE block
    (29) closed_statement -> IF LPAREN . expression RPAREN block ELSE closed_statement
    (30) closed_statement -> IF LPAREN . expression RPAREN closed_statement ELSE closed_statement
    (19) open_statement -> IF LPAREN . expression RPAREN block
    (20) open_statement -> IF LPAREN . expression RPAREN statement
    (21) open_statement -> IF LPAREN . expression RPAREN block ELSE open_statement
    (22) open_statement -> IF LPAREN . expression RPAREN closed_statement ELSE open_statement
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction
    (61) disjunction -> . disjunction OR conjunction
    (62) conjunction -> . equality
    (63) conjunction -> . conjunction AND equality
    (64) equality -> . comparison
    (65) equality -> . equality equalityOperator comparison
    (66) comparison -> . infixOperation
    (67) comparison -> . infixOperation comparisonOperator infixOperation
    (68) infixOperation -> . infixOperation inOperator elvisExpression
    (69) infixOperation -> . infixOperation isOperator type
    (70) infixOperation -> . elvisExpression
    (71) elvisExpression -> . rangeExpression
    (72) elvisExpression -> . elvisExpression ELVIS rangeExpression
    (73) rangeExpression -> . additiveExpression
    (74) rangeExpression -> . rangeExpression PONTOPONTO additiveExpression
    (75) additiveExpression -> . multiplicativeExpression
    (76) additiveExpression -> . additiveExpression additiveOperator multiplicativeExpression
    (77) multiplicativeExpression -> . asExpression
    (78) multiplicativeExpression -> . multiplicativeExpression multiplicativeOperator asExpression
    (79) asExpression -> . unaryExpression
    (80) asExpression -> . unaryExpression asOperator type
    (81) unaryExpression -> . unaryOperator primaryExpression
    (82) unaryExpression -> . primaryExpression
    (83) unaryExpression -> . primaryExpression postfixUnaryOperator
    (122) unaryOperator -> . INCREMENTO
    (123) unaryOperator -> . DECREMENTO
    (124) unaryOperator -> . MINUS
    (125) unaryOperator -> . PLUS
    (126) unaryOperator -> . NOT
    (86) primaryExpression -> . NULL
    (87) primaryExpression -> . TRUE
    (88) primaryExpression -> . FALSE
    (89) primaryExpression -> . NUMBER
    (90) primaryExpression -> . LITERAL_STRING
    (91) primaryExpression -> . ID
    (92) primaryExpression -> . chamadaDeFuncao
    (93) primaryExpression -> . parenthesizedExpression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (97) parenthesizedExpression -> . LPAREN expression RPAREN

    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38
    NOT             shift and go to state 39
    NULL            shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    NUMBER          shift and go to state 43
    LITERAL_STRING  shift and go to state 44
    ID              shift and go to state 45
    LPAREN          shift and go to state 48

    expression                     shift and go to state 202
    disjunction                    shift and go to state 22
    conjunction                    shift and go to state 23
    equality                       shift and go to state 24
    comparison                     shift and go to state 25
    infixOperation                 shift and go to state 26
    elvisExpression                shift and go to state 27
    rangeExpression                shift and go to state 28
    additiveExpression             shift and go to state 29
    multiplicativeExpression       shift and go to state 30
    asExpression                   shift and go to state 31
    unaryExpression                shift and go to state 32
    unaryOperator                  shift and go to state 33
    primaryExpression              shift and go to state 34
    chamadaDeFuncao                shift and go to state 46
    parenthesizedExpression        shift and go to state 47

state 194

    (21) open_statement -> IF LPAREN expression RPAREN block ELSE . open_statement
    (27) closed_statement -> IF LPAREN expression RPAREN block ELSE . block
    (29) closed_statement -> IF LPAREN expression RPAREN block ELSE . closed_statement
    (19) open_statement -> . IF LPAREN expression RPAREN block
    (20) open_statement -> . IF LPAREN expression RPAREN statement
    (21) open_statement -> . IF LPAREN expression RPAREN block ELSE open_statement
    (22) open_statement -> . IF LPAREN expression RPAREN closed_statement ELSE open_statement
    (23) open_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement
    (24) open_statement -> . WHILE LPAREN expression RPAREN open_statement
    (25) open_statement -> . DO open_statement WHILE LPAREN expression RPAREN
    (44) block -> . LCHAVE statements RCHAVE
    (26) closed_statement -> . non_if_statement_block
    (27) closed_statement -> . IF LPAREN expression RPAREN block ELSE block
    (28) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE block
    (29) closed_statement -> . IF LPAREN expression RPAREN block ELSE closed_statement
    (30) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE closed_statement
    (31) closed_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement
    (32) closed_statement -> . WHILE LPAREN expression RPAREN closed_statement
    (33) closed_statement -> . DO closed_statement WHILE LPAREN expression RPAREN
    (34) non_if_statement_block -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN block
    (35) non_if_statement_block -> . WHILE LPAREN expression RPAREN block
    (36) non_if_statement_block -> . DO block WHILE LPAREN expression RPAREN
    (37) non_if_statement_block -> . PV
    (38) non_if_statement_block -> . propertyDeclarationStm
    (39) non_if_statement_block -> . assignment
    (40) non_if_statement_block -> . chamadaDeFuncao
    (41) non_if_statement_block -> . jumpExpression
    (45) propertyDeclarationStm -> . VAR genericVariableDeclaration ATRIBUICAO expression
    (46) propertyDeclarationStm -> . VAL genericVariableDeclaration ATRIBUICAO expression
    (42) assignment -> . ID ATRIBUICAO expression
    (43) assignment -> . ID assignmentAndOperator expression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (94) jumpExpression -> . RETURN expression
    (95) jumpExpression -> . CONTINUE
    (96) jumpExpression -> . BREAK

    IF              shift and go to state 53
    FOR             shift and go to state 54
    WHILE           shift and go to state 55
    DO              shift and go to state 56
    LCHAVE          shift and go to state 12
    PV              shift and go to state 58
    VAR             shift and go to state 63
    VAL             shift and go to state 64
    ID              shift and go to state 65
    RETURN          shift and go to state 66
    CONTINUE        shift and go to state 67
    BREAK           shift and go to state 68

    block                          shift and go to state 203
    open_statement                 shift and go to state 204
    closed_statement               shift and go to state 205
    non_if_statement_block         shift and go to state 57
    propertyDeclarationStm         shift and go to state 59
    assignment                     shift and go to state 60
    chamadaDeFuncao                shift and go to state 61
    jumpExpression                 shift and go to state 62

state 195

    (22) open_statement -> IF LPAREN expression RPAREN closed_statement ELSE . open_statement
    (28) closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE . block
    (30) closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE . closed_statement
    (19) open_statement -> . IF LPAREN expression RPAREN block
    (20) open_statement -> . IF LPAREN expression RPAREN statement
    (21) open_statement -> . IF LPAREN expression RPAREN block ELSE open_statement
    (22) open_statement -> . IF LPAREN expression RPAREN closed_statement ELSE open_statement
    (23) open_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement
    (24) open_statement -> . WHILE LPAREN expression RPAREN open_statement
    (25) open_statement -> . DO open_statement WHILE LPAREN expression RPAREN
    (44) block -> . LCHAVE statements RCHAVE
    (26) closed_statement -> . non_if_statement_block
    (27) closed_statement -> . IF LPAREN expression RPAREN block ELSE block
    (28) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE block
    (29) closed_statement -> . IF LPAREN expression RPAREN block ELSE closed_statement
    (30) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE closed_statement
    (31) closed_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement
    (32) closed_statement -> . WHILE LPAREN expression RPAREN closed_statement
    (33) closed_statement -> . DO closed_statement WHILE LPAREN expression RPAREN
    (34) non_if_statement_block -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN block
    (35) non_if_statement_block -> . WHILE LPAREN expression RPAREN block
    (36) non_if_statement_block -> . DO block WHILE LPAREN expression RPAREN
    (37) non_if_statement_block -> . PV
    (38) non_if_statement_block -> . propertyDeclarationStm
    (39) non_if_statement_block -> . assignment
    (40) non_if_statement_block -> . chamadaDeFuncao
    (41) non_if_statement_block -> . jumpExpression
    (45) propertyDeclarationStm -> . VAR genericVariableDeclaration ATRIBUICAO expression
    (46) propertyDeclarationStm -> . VAL genericVariableDeclaration ATRIBUICAO expression
    (42) assignment -> . ID ATRIBUICAO expression
    (43) assignment -> . ID assignmentAndOperator expression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (94) jumpExpression -> . RETURN expression
    (95) jumpExpression -> . CONTINUE
    (96) jumpExpression -> . BREAK

    IF              shift and go to state 53
    FOR             shift and go to state 54
    WHILE           shift and go to state 55
    DO              shift and go to state 56
    LCHAVE          shift and go to state 12
    PV              shift and go to state 58
    VAR             shift and go to state 63
    VAL             shift and go to state 64
    ID              shift and go to state 65
    RETURN          shift and go to state 66
    CONTINUE        shift and go to state 67
    BREAK           shift and go to state 68

    closed_statement               shift and go to state 206
    open_statement                 shift and go to state 207
    block                          shift and go to state 208
    non_if_statement_block         shift and go to state 57
    propertyDeclarationStm         shift and go to state 59
    assignment                     shift and go to state 60
    chamadaDeFuncao                shift and go to state 61
    jumpExpression                 shift and go to state 62

state 196

    (31) closed_statement -> FOR LPAREN . genericVariableDeclaration IN expression RPAREN closed_statement
    (23) open_statement -> FOR LPAREN . genericVariableDeclaration IN expression RPAREN open_statement
    (34) non_if_statement_block -> FOR LPAREN . genericVariableDeclaration IN expression RPAREN block
    (49) genericVariableDeclaration -> . multiVariableDeclaration
    (50) genericVariableDeclaration -> . variableDeclaration
    (55) multiVariableDeclaration -> . LPAREN variableDeclarations RPAREN
    (56) multiVariableDeclaration -> . LPAREN RPAREN
    (51) variableDeclaration -> . ID DOISP type
    (52) variableDeclaration -> . ID

    LPAREN          shift and go to state 120
    ID              shift and go to state 121

    genericVariableDeclaration     shift and go to state 209
    multiVariableDeclaration       shift and go to state 118
    variableDeclaration            shift and go to state 119

state 197

    (32) closed_statement -> WHILE LPAREN . expression RPAREN closed_statement
    (24) open_statement -> WHILE LPAREN . expression RPAREN open_statement
    (35) non_if_statement_block -> WHILE LPAREN . expression RPAREN block
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction
    (61) disjunction -> . disjunction OR conjunction
    (62) conjunction -> . equality
    (63) conjunction -> . conjunction AND equality
    (64) equality -> . comparison
    (65) equality -> . equality equalityOperator comparison
    (66) comparison -> . infixOperation
    (67) comparison -> . infixOperation comparisonOperator infixOperation
    (68) infixOperation -> . infixOperation inOperator elvisExpression
    (69) infixOperation -> . infixOperation isOperator type
    (70) infixOperation -> . elvisExpression
    (71) elvisExpression -> . rangeExpression
    (72) elvisExpression -> . elvisExpression ELVIS rangeExpression
    (73) rangeExpression -> . additiveExpression
    (74) rangeExpression -> . rangeExpression PONTOPONTO additiveExpression
    (75) additiveExpression -> . multiplicativeExpression
    (76) additiveExpression -> . additiveExpression additiveOperator multiplicativeExpression
    (77) multiplicativeExpression -> . asExpression
    (78) multiplicativeExpression -> . multiplicativeExpression multiplicativeOperator asExpression
    (79) asExpression -> . unaryExpression
    (80) asExpression -> . unaryExpression asOperator type
    (81) unaryExpression -> . unaryOperator primaryExpression
    (82) unaryExpression -> . primaryExpression
    (83) unaryExpression -> . primaryExpression postfixUnaryOperator
    (122) unaryOperator -> . INCREMENTO
    (123) unaryOperator -> . DECREMENTO
    (124) unaryOperator -> . MINUS
    (125) unaryOperator -> . PLUS
    (126) unaryOperator -> . NOT
    (86) primaryExpression -> . NULL
    (87) primaryExpression -> . TRUE
    (88) primaryExpression -> . FALSE
    (89) primaryExpression -> . NUMBER
    (90) primaryExpression -> . LITERAL_STRING
    (91) primaryExpression -> . ID
    (92) primaryExpression -> . chamadaDeFuncao
    (93) primaryExpression -> . parenthesizedExpression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (97) parenthesizedExpression -> . LPAREN expression RPAREN

    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38
    NOT             shift and go to state 39
    NULL            shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    NUMBER          shift and go to state 43
    LITERAL_STRING  shift and go to state 44
    ID              shift and go to state 45
    LPAREN          shift and go to state 48

    expression                     shift and go to state 210
    disjunction                    shift and go to state 22
    conjunction                    shift and go to state 23
    equality                       shift and go to state 24
    comparison                     shift and go to state 25
    infixOperation                 shift and go to state 26
    elvisExpression                shift and go to state 27
    rangeExpression                shift and go to state 28
    additiveExpression             shift and go to state 29
    multiplicativeExpression       shift and go to state 30
    asExpression                   shift and go to state 31
    unaryExpression                shift and go to state 32
    unaryOperator                  shift and go to state 33
    primaryExpression              shift and go to state 34
    chamadaDeFuncao                shift and go to state 46
    parenthesizedExpression        shift and go to state 47

state 198

    (23) open_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN . open_statement
    (31) closed_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN . closed_statement
    (34) non_if_statement_block -> FOR LPAREN genericVariableDeclaration IN expression RPAREN . block
    (19) open_statement -> . IF LPAREN expression RPAREN block
    (20) open_statement -> . IF LPAREN expression RPAREN statement
    (21) open_statement -> . IF LPAREN expression RPAREN block ELSE open_statement
    (22) open_statement -> . IF LPAREN expression RPAREN closed_statement ELSE open_statement
    (23) open_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement
    (24) open_statement -> . WHILE LPAREN expression RPAREN open_statement
    (25) open_statement -> . DO open_statement WHILE LPAREN expression RPAREN
    (26) closed_statement -> . non_if_statement_block
    (27) closed_statement -> . IF LPAREN expression RPAREN block ELSE block
    (28) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE block
    (29) closed_statement -> . IF LPAREN expression RPAREN block ELSE closed_statement
    (30) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE closed_statement
    (31) closed_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement
    (32) closed_statement -> . WHILE LPAREN expression RPAREN closed_statement
    (33) closed_statement -> . DO closed_statement WHILE LPAREN expression RPAREN
    (44) block -> . LCHAVE statements RCHAVE
    (34) non_if_statement_block -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN block
    (35) non_if_statement_block -> . WHILE LPAREN expression RPAREN block
    (36) non_if_statement_block -> . DO block WHILE LPAREN expression RPAREN
    (37) non_if_statement_block -> . PV
    (38) non_if_statement_block -> . propertyDeclarationStm
    (39) non_if_statement_block -> . assignment
    (40) non_if_statement_block -> . chamadaDeFuncao
    (41) non_if_statement_block -> . jumpExpression
    (45) propertyDeclarationStm -> . VAR genericVariableDeclaration ATRIBUICAO expression
    (46) propertyDeclarationStm -> . VAL genericVariableDeclaration ATRIBUICAO expression
    (42) assignment -> . ID ATRIBUICAO expression
    (43) assignment -> . ID assignmentAndOperator expression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (94) jumpExpression -> . RETURN expression
    (95) jumpExpression -> . CONTINUE
    (96) jumpExpression -> . BREAK

    IF              shift and go to state 53
    FOR             shift and go to state 54
    WHILE           shift and go to state 55
    DO              shift and go to state 56
    LCHAVE          shift and go to state 12
    PV              shift and go to state 58
    VAR             shift and go to state 63
    VAL             shift and go to state 64
    ID              shift and go to state 65
    RETURN          shift and go to state 66
    CONTINUE        shift and go to state 67
    BREAK           shift and go to state 68

    open_statement                 shift and go to state 211
    closed_statement               shift and go to state 212
    block                          shift and go to state 213
    non_if_statement_block         shift and go to state 57
    propertyDeclarationStm         shift and go to state 59
    assignment                     shift and go to state 60
    chamadaDeFuncao                shift and go to state 61
    jumpExpression                 shift and go to state 62

state 199

    (25) open_statement -> DO open_statement WHILE LPAREN expression RPAREN .

    IF              reduce using rule 25 (open_statement -> DO open_statement WHILE LPAREN expression RPAREN .)
    FOR             reduce using rule 25 (open_statement -> DO open_statement WHILE LPAREN expression RPAREN .)
    WHILE           reduce using rule 25 (open_statement -> DO open_statement WHILE LPAREN expression RPAREN .)
    DO              reduce using rule 25 (open_statement -> DO open_statement WHILE LPAREN expression RPAREN .)
    PV              reduce using rule 25 (open_statement -> DO open_statement WHILE LPAREN expression RPAREN .)
    VAR             reduce using rule 25 (open_statement -> DO open_statement WHILE LPAREN expression RPAREN .)
    VAL             reduce using rule 25 (open_statement -> DO open_statement WHILE LPAREN expression RPAREN .)
    ID              reduce using rule 25 (open_statement -> DO open_statement WHILE LPAREN expression RPAREN .)
    RETURN          reduce using rule 25 (open_statement -> DO open_statement WHILE LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 25 (open_statement -> DO open_statement WHILE LPAREN expression RPAREN .)
    BREAK           reduce using rule 25 (open_statement -> DO open_statement WHILE LPAREN expression RPAREN .)
    RCHAVE          reduce using rule 25 (open_statement -> DO open_statement WHILE LPAREN expression RPAREN .)


state 200

    (33) closed_statement -> DO closed_statement WHILE LPAREN expression RPAREN .

    IF              reduce using rule 33 (closed_statement -> DO closed_statement WHILE LPAREN expression RPAREN .)
    FOR             reduce using rule 33 (closed_statement -> DO closed_statement WHILE LPAREN expression RPAREN .)
    WHILE           reduce using rule 33 (closed_statement -> DO closed_statement WHILE LPAREN expression RPAREN .)
    DO              reduce using rule 33 (closed_statement -> DO closed_statement WHILE LPAREN expression RPAREN .)
    PV              reduce using rule 33 (closed_statement -> DO closed_statement WHILE LPAREN expression RPAREN .)
    VAR             reduce using rule 33 (closed_statement -> DO closed_statement WHILE LPAREN expression RPAREN .)
    VAL             reduce using rule 33 (closed_statement -> DO closed_statement WHILE LPAREN expression RPAREN .)
    ID              reduce using rule 33 (closed_statement -> DO closed_statement WHILE LPAREN expression RPAREN .)
    RETURN          reduce using rule 33 (closed_statement -> DO closed_statement WHILE LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 33 (closed_statement -> DO closed_statement WHILE LPAREN expression RPAREN .)
    BREAK           reduce using rule 33 (closed_statement -> DO closed_statement WHILE LPAREN expression RPAREN .)
    RCHAVE          reduce using rule 33 (closed_statement -> DO closed_statement WHILE LPAREN expression RPAREN .)
    ELSE            reduce using rule 33 (closed_statement -> DO closed_statement WHILE LPAREN expression RPAREN .)


state 201

    (36) non_if_statement_block -> DO block WHILE LPAREN expression RPAREN .

    IF              reduce using rule 36 (non_if_statement_block -> DO block WHILE LPAREN expression RPAREN .)
    FOR             reduce using rule 36 (non_if_statement_block -> DO block WHILE LPAREN expression RPAREN .)
    WHILE           reduce using rule 36 (non_if_statement_block -> DO block WHILE LPAREN expression RPAREN .)
    DO              reduce using rule 36 (non_if_statement_block -> DO block WHILE LPAREN expression RPAREN .)
    PV              reduce using rule 36 (non_if_statement_block -> DO block WHILE LPAREN expression RPAREN .)
    VAR             reduce using rule 36 (non_if_statement_block -> DO block WHILE LPAREN expression RPAREN .)
    VAL             reduce using rule 36 (non_if_statement_block -> DO block WHILE LPAREN expression RPAREN .)
    ID              reduce using rule 36 (non_if_statement_block -> DO block WHILE LPAREN expression RPAREN .)
    RETURN          reduce using rule 36 (non_if_statement_block -> DO block WHILE LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 36 (non_if_statement_block -> DO block WHILE LPAREN expression RPAREN .)
    BREAK           reduce using rule 36 (non_if_statement_block -> DO block WHILE LPAREN expression RPAREN .)
    RCHAVE          reduce using rule 36 (non_if_statement_block -> DO block WHILE LPAREN expression RPAREN .)
    ELSE            reduce using rule 36 (non_if_statement_block -> DO block WHILE LPAREN expression RPAREN .)


state 202

    (27) closed_statement -> IF LPAREN expression . RPAREN block ELSE block
    (28) closed_statement -> IF LPAREN expression . RPAREN closed_statement ELSE block
    (29) closed_statement -> IF LPAREN expression . RPAREN block ELSE closed_statement
    (30) closed_statement -> IF LPAREN expression . RPAREN closed_statement ELSE closed_statement
    (19) open_statement -> IF LPAREN expression . RPAREN block
    (20) open_statement -> IF LPAREN expression . RPAREN statement
    (21) open_statement -> IF LPAREN expression . RPAREN block ELSE open_statement
    (22) open_statement -> IF LPAREN expression . RPAREN closed_statement ELSE open_statement

    RPAREN          shift and go to state 214


state 203

    (27) closed_statement -> IF LPAREN expression RPAREN block ELSE block .

    IF              reduce using rule 27 (closed_statement -> IF LPAREN expression RPAREN block ELSE block .)
    FOR             reduce using rule 27 (closed_statement -> IF LPAREN expression RPAREN block ELSE block .)
    WHILE           reduce using rule 27 (closed_statement -> IF LPAREN expression RPAREN block ELSE block .)
    DO              reduce using rule 27 (closed_statement -> IF LPAREN expression RPAREN block ELSE block .)
    PV              reduce using rule 27 (closed_statement -> IF LPAREN expression RPAREN block ELSE block .)
    VAR             reduce using rule 27 (closed_statement -> IF LPAREN expression RPAREN block ELSE block .)
    VAL             reduce using rule 27 (closed_statement -> IF LPAREN expression RPAREN block ELSE block .)
    ID              reduce using rule 27 (closed_statement -> IF LPAREN expression RPAREN block ELSE block .)
    RETURN          reduce using rule 27 (closed_statement -> IF LPAREN expression RPAREN block ELSE block .)
    CONTINUE        reduce using rule 27 (closed_statement -> IF LPAREN expression RPAREN block ELSE block .)
    BREAK           reduce using rule 27 (closed_statement -> IF LPAREN expression RPAREN block ELSE block .)
    RCHAVE          reduce using rule 27 (closed_statement -> IF LPAREN expression RPAREN block ELSE block .)
    ELSE            reduce using rule 27 (closed_statement -> IF LPAREN expression RPAREN block ELSE block .)


state 204

    (21) open_statement -> IF LPAREN expression RPAREN block ELSE open_statement .

    IF              reduce using rule 21 (open_statement -> IF LPAREN expression RPAREN block ELSE open_statement .)
    FOR             reduce using rule 21 (open_statement -> IF LPAREN expression RPAREN block ELSE open_statement .)
    WHILE           reduce using rule 21 (open_statement -> IF LPAREN expression RPAREN block ELSE open_statement .)
    DO              reduce using rule 21 (open_statement -> IF LPAREN expression RPAREN block ELSE open_statement .)
    PV              reduce using rule 21 (open_statement -> IF LPAREN expression RPAREN block ELSE open_statement .)
    VAR             reduce using rule 21 (open_statement -> IF LPAREN expression RPAREN block ELSE open_statement .)
    VAL             reduce using rule 21 (open_statement -> IF LPAREN expression RPAREN block ELSE open_statement .)
    ID              reduce using rule 21 (open_statement -> IF LPAREN expression RPAREN block ELSE open_statement .)
    RETURN          reduce using rule 21 (open_statement -> IF LPAREN expression RPAREN block ELSE open_statement .)
    CONTINUE        reduce using rule 21 (open_statement -> IF LPAREN expression RPAREN block ELSE open_statement .)
    BREAK           reduce using rule 21 (open_statement -> IF LPAREN expression RPAREN block ELSE open_statement .)
    RCHAVE          reduce using rule 21 (open_statement -> IF LPAREN expression RPAREN block ELSE open_statement .)


state 205

    (29) closed_statement -> IF LPAREN expression RPAREN block ELSE closed_statement .

    IF              reduce using rule 29 (closed_statement -> IF LPAREN expression RPAREN block ELSE closed_statement .)
    FOR             reduce using rule 29 (closed_statement -> IF LPAREN expression RPAREN block ELSE closed_statement .)
    WHILE           reduce using rule 29 (closed_statement -> IF LPAREN expression RPAREN block ELSE closed_statement .)
    DO              reduce using rule 29 (closed_statement -> IF LPAREN expression RPAREN block ELSE closed_statement .)
    PV              reduce using rule 29 (closed_statement -> IF LPAREN expression RPAREN block ELSE closed_statement .)
    VAR             reduce using rule 29 (closed_statement -> IF LPAREN expression RPAREN block ELSE closed_statement .)
    VAL             reduce using rule 29 (closed_statement -> IF LPAREN expression RPAREN block ELSE closed_statement .)
    ID              reduce using rule 29 (closed_statement -> IF LPAREN expression RPAREN block ELSE closed_statement .)
    RETURN          reduce using rule 29 (closed_statement -> IF LPAREN expression RPAREN block ELSE closed_statement .)
    CONTINUE        reduce using rule 29 (closed_statement -> IF LPAREN expression RPAREN block ELSE closed_statement .)
    BREAK           reduce using rule 29 (closed_statement -> IF LPAREN expression RPAREN block ELSE closed_statement .)
    RCHAVE          reduce using rule 29 (closed_statement -> IF LPAREN expression RPAREN block ELSE closed_statement .)
    ELSE            reduce using rule 29 (closed_statement -> IF LPAREN expression RPAREN block ELSE closed_statement .)


state 206

    (30) closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE closed_statement .

    IF              reduce using rule 30 (closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE closed_statement .)
    FOR             reduce using rule 30 (closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE closed_statement .)
    WHILE           reduce using rule 30 (closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE closed_statement .)
    DO              reduce using rule 30 (closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE closed_statement .)
    PV              reduce using rule 30 (closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE closed_statement .)
    VAR             reduce using rule 30 (closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE closed_statement .)
    VAL             reduce using rule 30 (closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE closed_statement .)
    ID              reduce using rule 30 (closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE closed_statement .)
    RETURN          reduce using rule 30 (closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE closed_statement .)
    CONTINUE        reduce using rule 30 (closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE closed_statement .)
    BREAK           reduce using rule 30 (closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE closed_statement .)
    RCHAVE          reduce using rule 30 (closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE closed_statement .)
    ELSE            reduce using rule 30 (closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE closed_statement .)


state 207

    (22) open_statement -> IF LPAREN expression RPAREN closed_statement ELSE open_statement .

    IF              reduce using rule 22 (open_statement -> IF LPAREN expression RPAREN closed_statement ELSE open_statement .)
    FOR             reduce using rule 22 (open_statement -> IF LPAREN expression RPAREN closed_statement ELSE open_statement .)
    WHILE           reduce using rule 22 (open_statement -> IF LPAREN expression RPAREN closed_statement ELSE open_statement .)
    DO              reduce using rule 22 (open_statement -> IF LPAREN expression RPAREN closed_statement ELSE open_statement .)
    PV              reduce using rule 22 (open_statement -> IF LPAREN expression RPAREN closed_statement ELSE open_statement .)
    VAR             reduce using rule 22 (open_statement -> IF LPAREN expression RPAREN closed_statement ELSE open_statement .)
    VAL             reduce using rule 22 (open_statement -> IF LPAREN expression RPAREN closed_statement ELSE open_statement .)
    ID              reduce using rule 22 (open_statement -> IF LPAREN expression RPAREN closed_statement ELSE open_statement .)
    RETURN          reduce using rule 22 (open_statement -> IF LPAREN expression RPAREN closed_statement ELSE open_statement .)
    CONTINUE        reduce using rule 22 (open_statement -> IF LPAREN expression RPAREN closed_statement ELSE open_statement .)
    BREAK           reduce using rule 22 (open_statement -> IF LPAREN expression RPAREN closed_statement ELSE open_statement .)
    RCHAVE          reduce using rule 22 (open_statement -> IF LPAREN expression RPAREN closed_statement ELSE open_statement .)


state 208

    (28) closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE block .

    IF              reduce using rule 28 (closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE block .)
    FOR             reduce using rule 28 (closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE block .)
    WHILE           reduce using rule 28 (closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE block .)
    DO              reduce using rule 28 (closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE block .)
    PV              reduce using rule 28 (closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE block .)
    VAR             reduce using rule 28 (closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE block .)
    VAL             reduce using rule 28 (closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE block .)
    ID              reduce using rule 28 (closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE block .)
    RETURN          reduce using rule 28 (closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE block .)
    CONTINUE        reduce using rule 28 (closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE block .)
    BREAK           reduce using rule 28 (closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE block .)
    RCHAVE          reduce using rule 28 (closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE block .)
    ELSE            reduce using rule 28 (closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE block .)


state 209

    (31) closed_statement -> FOR LPAREN genericVariableDeclaration . IN expression RPAREN closed_statement
    (23) open_statement -> FOR LPAREN genericVariableDeclaration . IN expression RPAREN open_statement
    (34) non_if_statement_block -> FOR LPAREN genericVariableDeclaration . IN expression RPAREN block

    IN              shift and go to state 215


state 210

    (32) closed_statement -> WHILE LPAREN expression . RPAREN closed_statement
    (24) open_statement -> WHILE LPAREN expression . RPAREN open_statement
    (35) non_if_statement_block -> WHILE LPAREN expression . RPAREN block

    RPAREN          shift and go to state 216


state 211

    (23) open_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement .

    IF              reduce using rule 23 (open_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement .)
    FOR             reduce using rule 23 (open_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement .)
    WHILE           reduce using rule 23 (open_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement .)
    DO              reduce using rule 23 (open_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement .)
    PV              reduce using rule 23 (open_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement .)
    VAR             reduce using rule 23 (open_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement .)
    VAL             reduce using rule 23 (open_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement .)
    ID              reduce using rule 23 (open_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement .)
    RETURN          reduce using rule 23 (open_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement .)
    CONTINUE        reduce using rule 23 (open_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement .)
    BREAK           reduce using rule 23 (open_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement .)
    RCHAVE          reduce using rule 23 (open_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement .)


state 212

    (31) closed_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement .

    IF              reduce using rule 31 (closed_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement .)
    FOR             reduce using rule 31 (closed_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement .)
    WHILE           reduce using rule 31 (closed_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement .)
    DO              reduce using rule 31 (closed_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement .)
    PV              reduce using rule 31 (closed_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement .)
    VAR             reduce using rule 31 (closed_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement .)
    VAL             reduce using rule 31 (closed_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement .)
    ID              reduce using rule 31 (closed_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement .)
    RETURN          reduce using rule 31 (closed_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement .)
    CONTINUE        reduce using rule 31 (closed_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement .)
    BREAK           reduce using rule 31 (closed_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement .)
    RCHAVE          reduce using rule 31 (closed_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement .)
    ELSE            reduce using rule 31 (closed_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement .)


state 213

    (34) non_if_statement_block -> FOR LPAREN genericVariableDeclaration IN expression RPAREN block .

    IF              reduce using rule 34 (non_if_statement_block -> FOR LPAREN genericVariableDeclaration IN expression RPAREN block .)
    FOR             reduce using rule 34 (non_if_statement_block -> FOR LPAREN genericVariableDeclaration IN expression RPAREN block .)
    WHILE           reduce using rule 34 (non_if_statement_block -> FOR LPAREN genericVariableDeclaration IN expression RPAREN block .)
    DO              reduce using rule 34 (non_if_statement_block -> FOR LPAREN genericVariableDeclaration IN expression RPAREN block .)
    PV              reduce using rule 34 (non_if_statement_block -> FOR LPAREN genericVariableDeclaration IN expression RPAREN block .)
    VAR             reduce using rule 34 (non_if_statement_block -> FOR LPAREN genericVariableDeclaration IN expression RPAREN block .)
    VAL             reduce using rule 34 (non_if_statement_block -> FOR LPAREN genericVariableDeclaration IN expression RPAREN block .)
    ID              reduce using rule 34 (non_if_statement_block -> FOR LPAREN genericVariableDeclaration IN expression RPAREN block .)
    RETURN          reduce using rule 34 (non_if_statement_block -> FOR LPAREN genericVariableDeclaration IN expression RPAREN block .)
    CONTINUE        reduce using rule 34 (non_if_statement_block -> FOR LPAREN genericVariableDeclaration IN expression RPAREN block .)
    BREAK           reduce using rule 34 (non_if_statement_block -> FOR LPAREN genericVariableDeclaration IN expression RPAREN block .)
    RCHAVE          reduce using rule 34 (non_if_statement_block -> FOR LPAREN genericVariableDeclaration IN expression RPAREN block .)
    ELSE            reduce using rule 34 (non_if_statement_block -> FOR LPAREN genericVariableDeclaration IN expression RPAREN block .)


state 214

    (27) closed_statement -> IF LPAREN expression RPAREN . block ELSE block
    (28) closed_statement -> IF LPAREN expression RPAREN . closed_statement ELSE block
    (29) closed_statement -> IF LPAREN expression RPAREN . block ELSE closed_statement
    (30) closed_statement -> IF LPAREN expression RPAREN . closed_statement ELSE closed_statement
    (19) open_statement -> IF LPAREN expression RPAREN . block
    (20) open_statement -> IF LPAREN expression RPAREN . statement
    (21) open_statement -> IF LPAREN expression RPAREN . block ELSE open_statement
    (22) open_statement -> IF LPAREN expression RPAREN . closed_statement ELSE open_statement
    (44) block -> . LCHAVE statements RCHAVE
    (26) closed_statement -> . non_if_statement_block
    (27) closed_statement -> . IF LPAREN expression RPAREN block ELSE block
    (28) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE block
    (29) closed_statement -> . IF LPAREN expression RPAREN block ELSE closed_statement
    (30) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE closed_statement
    (31) closed_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement
    (32) closed_statement -> . WHILE LPAREN expression RPAREN closed_statement
    (33) closed_statement -> . DO closed_statement WHILE LPAREN expression RPAREN
    (17) statement -> . open_statement
    (18) statement -> . closed_statement
    (34) non_if_statement_block -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN block
    (35) non_if_statement_block -> . WHILE LPAREN expression RPAREN block
    (36) non_if_statement_block -> . DO block WHILE LPAREN expression RPAREN
    (37) non_if_statement_block -> . PV
    (38) non_if_statement_block -> . propertyDeclarationStm
    (39) non_if_statement_block -> . assignment
    (40) non_if_statement_block -> . chamadaDeFuncao
    (41) non_if_statement_block -> . jumpExpression
    (19) open_statement -> . IF LPAREN expression RPAREN block
    (20) open_statement -> . IF LPAREN expression RPAREN statement
    (21) open_statement -> . IF LPAREN expression RPAREN block ELSE open_statement
    (22) open_statement -> . IF LPAREN expression RPAREN closed_statement ELSE open_statement
    (23) open_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement
    (24) open_statement -> . WHILE LPAREN expression RPAREN open_statement
    (25) open_statement -> . DO open_statement WHILE LPAREN expression RPAREN
    (45) propertyDeclarationStm -> . VAR genericVariableDeclaration ATRIBUICAO expression
    (46) propertyDeclarationStm -> . VAL genericVariableDeclaration ATRIBUICAO expression
    (42) assignment -> . ID ATRIBUICAO expression
    (43) assignment -> . ID assignmentAndOperator expression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (94) jumpExpression -> . RETURN expression
    (95) jumpExpression -> . CONTINUE
    (96) jumpExpression -> . BREAK

    LCHAVE          shift and go to state 12
    IF              shift and go to state 178
    FOR             shift and go to state 219
    WHILE           shift and go to state 220
    DO              shift and go to state 221
    PV              shift and go to state 58
    VAR             shift and go to state 63
    VAL             shift and go to state 64
    ID              shift and go to state 65
    RETURN          shift and go to state 66
    CONTINUE        shift and go to state 67
    BREAK           shift and go to state 68

    block                          shift and go to state 217
    closed_statement               shift and go to state 218
    statement                      shift and go to state 180
    open_statement                 shift and go to state 51
    non_if_statement_block         shift and go to state 57
    propertyDeclarationStm         shift and go to state 59
    assignment                     shift and go to state 60
    chamadaDeFuncao                shift and go to state 61
    jumpExpression                 shift and go to state 62

state 215

    (31) closed_statement -> FOR LPAREN genericVariableDeclaration IN . expression RPAREN closed_statement
    (23) open_statement -> FOR LPAREN genericVariableDeclaration IN . expression RPAREN open_statement
    (34) non_if_statement_block -> FOR LPAREN genericVariableDeclaration IN . expression RPAREN block
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction
    (61) disjunction -> . disjunction OR conjunction
    (62) conjunction -> . equality
    (63) conjunction -> . conjunction AND equality
    (64) equality -> . comparison
    (65) equality -> . equality equalityOperator comparison
    (66) comparison -> . infixOperation
    (67) comparison -> . infixOperation comparisonOperator infixOperation
    (68) infixOperation -> . infixOperation inOperator elvisExpression
    (69) infixOperation -> . infixOperation isOperator type
    (70) infixOperation -> . elvisExpression
    (71) elvisExpression -> . rangeExpression
    (72) elvisExpression -> . elvisExpression ELVIS rangeExpression
    (73) rangeExpression -> . additiveExpression
    (74) rangeExpression -> . rangeExpression PONTOPONTO additiveExpression
    (75) additiveExpression -> . multiplicativeExpression
    (76) additiveExpression -> . additiveExpression additiveOperator multiplicativeExpression
    (77) multiplicativeExpression -> . asExpression
    (78) multiplicativeExpression -> . multiplicativeExpression multiplicativeOperator asExpression
    (79) asExpression -> . unaryExpression
    (80) asExpression -> . unaryExpression asOperator type
    (81) unaryExpression -> . unaryOperator primaryExpression
    (82) unaryExpression -> . primaryExpression
    (83) unaryExpression -> . primaryExpression postfixUnaryOperator
    (122) unaryOperator -> . INCREMENTO
    (123) unaryOperator -> . DECREMENTO
    (124) unaryOperator -> . MINUS
    (125) unaryOperator -> . PLUS
    (126) unaryOperator -> . NOT
    (86) primaryExpression -> . NULL
    (87) primaryExpression -> . TRUE
    (88) primaryExpression -> . FALSE
    (89) primaryExpression -> . NUMBER
    (90) primaryExpression -> . LITERAL_STRING
    (91) primaryExpression -> . ID
    (92) primaryExpression -> . chamadaDeFuncao
    (93) primaryExpression -> . parenthesizedExpression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (97) parenthesizedExpression -> . LPAREN expression RPAREN

    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38
    NOT             shift and go to state 39
    NULL            shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    NUMBER          shift and go to state 43
    LITERAL_STRING  shift and go to state 44
    ID              shift and go to state 45
    LPAREN          shift and go to state 48

    expression                     shift and go to state 222
    disjunction                    shift and go to state 22
    conjunction                    shift and go to state 23
    equality                       shift and go to state 24
    comparison                     shift and go to state 25
    infixOperation                 shift and go to state 26
    elvisExpression                shift and go to state 27
    rangeExpression                shift and go to state 28
    additiveExpression             shift and go to state 29
    multiplicativeExpression       shift and go to state 30
    asExpression                   shift and go to state 31
    unaryExpression                shift and go to state 32
    unaryOperator                  shift and go to state 33
    primaryExpression              shift and go to state 34
    chamadaDeFuncao                shift and go to state 46
    parenthesizedExpression        shift and go to state 47

state 216

    (32) closed_statement -> WHILE LPAREN expression RPAREN . closed_statement
    (24) open_statement -> WHILE LPAREN expression RPAREN . open_statement
    (35) non_if_statement_block -> WHILE LPAREN expression RPAREN . block
    (26) closed_statement -> . non_if_statement_block
    (27) closed_statement -> . IF LPAREN expression RPAREN block ELSE block
    (28) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE block
    (29) closed_statement -> . IF LPAREN expression RPAREN block ELSE closed_statement
    (30) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE closed_statement
    (31) closed_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement
    (32) closed_statement -> . WHILE LPAREN expression RPAREN closed_statement
    (33) closed_statement -> . DO closed_statement WHILE LPAREN expression RPAREN
    (19) open_statement -> . IF LPAREN expression RPAREN block
    (20) open_statement -> . IF LPAREN expression RPAREN statement
    (21) open_statement -> . IF LPAREN expression RPAREN block ELSE open_statement
    (22) open_statement -> . IF LPAREN expression RPAREN closed_statement ELSE open_statement
    (23) open_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement
    (24) open_statement -> . WHILE LPAREN expression RPAREN open_statement
    (25) open_statement -> . DO open_statement WHILE LPAREN expression RPAREN
    (44) block -> . LCHAVE statements RCHAVE
    (34) non_if_statement_block -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN block
    (35) non_if_statement_block -> . WHILE LPAREN expression RPAREN block
    (36) non_if_statement_block -> . DO block WHILE LPAREN expression RPAREN
    (37) non_if_statement_block -> . PV
    (38) non_if_statement_block -> . propertyDeclarationStm
    (39) non_if_statement_block -> . assignment
    (40) non_if_statement_block -> . chamadaDeFuncao
    (41) non_if_statement_block -> . jumpExpression
    (45) propertyDeclarationStm -> . VAR genericVariableDeclaration ATRIBUICAO expression
    (46) propertyDeclarationStm -> . VAL genericVariableDeclaration ATRIBUICAO expression
    (42) assignment -> . ID ATRIBUICAO expression
    (43) assignment -> . ID assignmentAndOperator expression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (94) jumpExpression -> . RETURN expression
    (95) jumpExpression -> . CONTINUE
    (96) jumpExpression -> . BREAK

    IF              shift and go to state 178
    FOR             shift and go to state 182
    WHILE           shift and go to state 183
    DO              shift and go to state 184
    LCHAVE          shift and go to state 12
    PV              shift and go to state 58
    VAR             shift and go to state 63
    VAL             shift and go to state 64
    ID              shift and go to state 65
    RETURN          shift and go to state 66
    CONTINUE        shift and go to state 67
    BREAK           shift and go to state 68

    closed_statement               shift and go to state 187
    open_statement                 shift and go to state 186
    block                          shift and go to state 188
    non_if_statement_block         shift and go to state 57
    propertyDeclarationStm         shift and go to state 59
    assignment                     shift and go to state 60
    chamadaDeFuncao                shift and go to state 61
    jumpExpression                 shift and go to state 62

state 217

    (27) closed_statement -> IF LPAREN expression RPAREN block . ELSE block
    (29) closed_statement -> IF LPAREN expression RPAREN block . ELSE closed_statement
    (19) open_statement -> IF LPAREN expression RPAREN block .
    (21) open_statement -> IF LPAREN expression RPAREN block . ELSE open_statement

    ELSE            shift and go to state 223
    IF              reduce using rule 19 (open_statement -> IF LPAREN expression RPAREN block .)
    FOR             reduce using rule 19 (open_statement -> IF LPAREN expression RPAREN block .)
    WHILE           reduce using rule 19 (open_statement -> IF LPAREN expression RPAREN block .)
    DO              reduce using rule 19 (open_statement -> IF LPAREN expression RPAREN block .)
    PV              reduce using rule 19 (open_statement -> IF LPAREN expression RPAREN block .)
    VAR             reduce using rule 19 (open_statement -> IF LPAREN expression RPAREN block .)
    VAL             reduce using rule 19 (open_statement -> IF LPAREN expression RPAREN block .)
    ID              reduce using rule 19 (open_statement -> IF LPAREN expression RPAREN block .)
    RETURN          reduce using rule 19 (open_statement -> IF LPAREN expression RPAREN block .)
    CONTINUE        reduce using rule 19 (open_statement -> IF LPAREN expression RPAREN block .)
    BREAK           reduce using rule 19 (open_statement -> IF LPAREN expression RPAREN block .)
    RCHAVE          reduce using rule 19 (open_statement -> IF LPAREN expression RPAREN block .)


state 218

    (28) closed_statement -> IF LPAREN expression RPAREN closed_statement . ELSE block
    (30) closed_statement -> IF LPAREN expression RPAREN closed_statement . ELSE closed_statement
    (22) open_statement -> IF LPAREN expression RPAREN closed_statement . ELSE open_statement
    (18) statement -> closed_statement .

    ELSE            shift and go to state 224
    IF              reduce using rule 18 (statement -> closed_statement .)
    FOR             reduce using rule 18 (statement -> closed_statement .)
    WHILE           reduce using rule 18 (statement -> closed_statement .)
    DO              reduce using rule 18 (statement -> closed_statement .)
    PV              reduce using rule 18 (statement -> closed_statement .)
    VAR             reduce using rule 18 (statement -> closed_statement .)
    VAL             reduce using rule 18 (statement -> closed_statement .)
    ID              reduce using rule 18 (statement -> closed_statement .)
    RETURN          reduce using rule 18 (statement -> closed_statement .)
    CONTINUE        reduce using rule 18 (statement -> closed_statement .)
    BREAK           reduce using rule 18 (statement -> closed_statement .)
    RCHAVE          reduce using rule 18 (statement -> closed_statement .)


state 219

    (31) closed_statement -> FOR . LPAREN genericVariableDeclaration IN expression RPAREN closed_statement
    (34) non_if_statement_block -> FOR . LPAREN genericVariableDeclaration IN expression RPAREN block
    (23) open_statement -> FOR . LPAREN genericVariableDeclaration IN expression RPAREN open_statement

    LPAREN          shift and go to state 225


state 220

    (32) closed_statement -> WHILE . LPAREN expression RPAREN closed_statement
    (35) non_if_statement_block -> WHILE . LPAREN expression RPAREN block
    (24) open_statement -> WHILE . LPAREN expression RPAREN open_statement

    LPAREN          shift and go to state 226


state 221

    (33) closed_statement -> DO . closed_statement WHILE LPAREN expression RPAREN
    (36) non_if_statement_block -> DO . block WHILE LPAREN expression RPAREN
    (25) open_statement -> DO . open_statement WHILE LPAREN expression RPAREN
    (26) closed_statement -> . non_if_statement_block
    (27) closed_statement -> . IF LPAREN expression RPAREN block ELSE block
    (28) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE block
    (29) closed_statement -> . IF LPAREN expression RPAREN block ELSE closed_statement
    (30) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE closed_statement
    (31) closed_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement
    (32) closed_statement -> . WHILE LPAREN expression RPAREN closed_statement
    (33) closed_statement -> . DO closed_statement WHILE LPAREN expression RPAREN
    (44) block -> . LCHAVE statements RCHAVE
    (19) open_statement -> . IF LPAREN expression RPAREN block
    (20) open_statement -> . IF LPAREN expression RPAREN statement
    (21) open_statement -> . IF LPAREN expression RPAREN block ELSE open_statement
    (22) open_statement -> . IF LPAREN expression RPAREN closed_statement ELSE open_statement
    (23) open_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement
    (24) open_statement -> . WHILE LPAREN expression RPAREN open_statement
    (25) open_statement -> . DO open_statement WHILE LPAREN expression RPAREN
    (34) non_if_statement_block -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN block
    (35) non_if_statement_block -> . WHILE LPAREN expression RPAREN block
    (36) non_if_statement_block -> . DO block WHILE LPAREN expression RPAREN
    (37) non_if_statement_block -> . PV
    (38) non_if_statement_block -> . propertyDeclarationStm
    (39) non_if_statement_block -> . assignment
    (40) non_if_statement_block -> . chamadaDeFuncao
    (41) non_if_statement_block -> . jumpExpression
    (45) propertyDeclarationStm -> . VAR genericVariableDeclaration ATRIBUICAO expression
    (46) propertyDeclarationStm -> . VAL genericVariableDeclaration ATRIBUICAO expression
    (42) assignment -> . ID ATRIBUICAO expression
    (43) assignment -> . ID assignmentAndOperator expression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (94) jumpExpression -> . RETURN expression
    (95) jumpExpression -> . CONTINUE
    (96) jumpExpression -> . BREAK

    IF              shift and go to state 178
    FOR             shift and go to state 182
    WHILE           shift and go to state 183
    DO              shift and go to state 184
    LCHAVE          shift and go to state 12
    PV              shift and go to state 58
    VAR             shift and go to state 63
    VAL             shift and go to state 64
    ID              shift and go to state 65
    RETURN          shift and go to state 66
    CONTINUE        shift and go to state 67
    BREAK           shift and go to state 68

    closed_statement               shift and go to state 115
    block                          shift and go to state 116
    open_statement                 shift and go to state 114
    non_if_statement_block         shift and go to state 57
    propertyDeclarationStm         shift and go to state 59
    assignment                     shift and go to state 60
    chamadaDeFuncao                shift and go to state 61
    jumpExpression                 shift and go to state 62

state 222

    (31) closed_statement -> FOR LPAREN genericVariableDeclaration IN expression . RPAREN closed_statement
    (23) open_statement -> FOR LPAREN genericVariableDeclaration IN expression . RPAREN open_statement
    (34) non_if_statement_block -> FOR LPAREN genericVariableDeclaration IN expression . RPAREN block

    RPAREN          shift and go to state 227


state 223

    (27) closed_statement -> IF LPAREN expression RPAREN block ELSE . block
    (29) closed_statement -> IF LPAREN expression RPAREN block ELSE . closed_statement
    (21) open_statement -> IF LPAREN expression RPAREN block ELSE . open_statement
    (44) block -> . LCHAVE statements RCHAVE
    (26) closed_statement -> . non_if_statement_block
    (27) closed_statement -> . IF LPAREN expression RPAREN block ELSE block
    (28) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE block
    (29) closed_statement -> . IF LPAREN expression RPAREN block ELSE closed_statement
    (30) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE closed_statement
    (31) closed_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement
    (32) closed_statement -> . WHILE LPAREN expression RPAREN closed_statement
    (33) closed_statement -> . DO closed_statement WHILE LPAREN expression RPAREN
    (19) open_statement -> . IF LPAREN expression RPAREN block
    (20) open_statement -> . IF LPAREN expression RPAREN statement
    (21) open_statement -> . IF LPAREN expression RPAREN block ELSE open_statement
    (22) open_statement -> . IF LPAREN expression RPAREN closed_statement ELSE open_statement
    (23) open_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement
    (24) open_statement -> . WHILE LPAREN expression RPAREN open_statement
    (25) open_statement -> . DO open_statement WHILE LPAREN expression RPAREN
    (34) non_if_statement_block -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN block
    (35) non_if_statement_block -> . WHILE LPAREN expression RPAREN block
    (36) non_if_statement_block -> . DO block WHILE LPAREN expression RPAREN
    (37) non_if_statement_block -> . PV
    (38) non_if_statement_block -> . propertyDeclarationStm
    (39) non_if_statement_block -> . assignment
    (40) non_if_statement_block -> . chamadaDeFuncao
    (41) non_if_statement_block -> . jumpExpression
    (45) propertyDeclarationStm -> . VAR genericVariableDeclaration ATRIBUICAO expression
    (46) propertyDeclarationStm -> . VAL genericVariableDeclaration ATRIBUICAO expression
    (42) assignment -> . ID ATRIBUICAO expression
    (43) assignment -> . ID assignmentAndOperator expression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (94) jumpExpression -> . RETURN expression
    (95) jumpExpression -> . CONTINUE
    (96) jumpExpression -> . BREAK

    LCHAVE          shift and go to state 12
    IF              shift and go to state 178
    FOR             shift and go to state 182
    WHILE           shift and go to state 183
    DO              shift and go to state 184
    PV              shift and go to state 58
    VAR             shift and go to state 63
    VAL             shift and go to state 64
    ID              shift and go to state 65
    RETURN          shift and go to state 66
    CONTINUE        shift and go to state 67
    BREAK           shift and go to state 68

    block                          shift and go to state 203
    closed_statement               shift and go to state 205
    open_statement                 shift and go to state 204
    non_if_statement_block         shift and go to state 57
    propertyDeclarationStm         shift and go to state 59
    assignment                     shift and go to state 60
    chamadaDeFuncao                shift and go to state 61
    jumpExpression                 shift and go to state 62

state 224

    (28) closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE . block
    (30) closed_statement -> IF LPAREN expression RPAREN closed_statement ELSE . closed_statement
    (22) open_statement -> IF LPAREN expression RPAREN closed_statement ELSE . open_statement
    (44) block -> . LCHAVE statements RCHAVE
    (26) closed_statement -> . non_if_statement_block
    (27) closed_statement -> . IF LPAREN expression RPAREN block ELSE block
    (28) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE block
    (29) closed_statement -> . IF LPAREN expression RPAREN block ELSE closed_statement
    (30) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE closed_statement
    (31) closed_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement
    (32) closed_statement -> . WHILE LPAREN expression RPAREN closed_statement
    (33) closed_statement -> . DO closed_statement WHILE LPAREN expression RPAREN
    (19) open_statement -> . IF LPAREN expression RPAREN block
    (20) open_statement -> . IF LPAREN expression RPAREN statement
    (21) open_statement -> . IF LPAREN expression RPAREN block ELSE open_statement
    (22) open_statement -> . IF LPAREN expression RPAREN closed_statement ELSE open_statement
    (23) open_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement
    (24) open_statement -> . WHILE LPAREN expression RPAREN open_statement
    (25) open_statement -> . DO open_statement WHILE LPAREN expression RPAREN
    (34) non_if_statement_block -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN block
    (35) non_if_statement_block -> . WHILE LPAREN expression RPAREN block
    (36) non_if_statement_block -> . DO block WHILE LPAREN expression RPAREN
    (37) non_if_statement_block -> . PV
    (38) non_if_statement_block -> . propertyDeclarationStm
    (39) non_if_statement_block -> . assignment
    (40) non_if_statement_block -> . chamadaDeFuncao
    (41) non_if_statement_block -> . jumpExpression
    (45) propertyDeclarationStm -> . VAR genericVariableDeclaration ATRIBUICAO expression
    (46) propertyDeclarationStm -> . VAL genericVariableDeclaration ATRIBUICAO expression
    (42) assignment -> . ID ATRIBUICAO expression
    (43) assignment -> . ID assignmentAndOperator expression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (94) jumpExpression -> . RETURN expression
    (95) jumpExpression -> . CONTINUE
    (96) jumpExpression -> . BREAK

    LCHAVE          shift and go to state 12
    IF              shift and go to state 178
    FOR             shift and go to state 182
    WHILE           shift and go to state 183
    DO              shift and go to state 184
    PV              shift and go to state 58
    VAR             shift and go to state 63
    VAL             shift and go to state 64
    ID              shift and go to state 65
    RETURN          shift and go to state 66
    CONTINUE        shift and go to state 67
    BREAK           shift and go to state 68

    closed_statement               shift and go to state 206
    block                          shift and go to state 208
    open_statement                 shift and go to state 207
    non_if_statement_block         shift and go to state 57
    propertyDeclarationStm         shift and go to state 59
    assignment                     shift and go to state 60
    chamadaDeFuncao                shift and go to state 61
    jumpExpression                 shift and go to state 62

state 225

    (31) closed_statement -> FOR LPAREN . genericVariableDeclaration IN expression RPAREN closed_statement
    (34) non_if_statement_block -> FOR LPAREN . genericVariableDeclaration IN expression RPAREN block
    (23) open_statement -> FOR LPAREN . genericVariableDeclaration IN expression RPAREN open_statement
    (49) genericVariableDeclaration -> . multiVariableDeclaration
    (50) genericVariableDeclaration -> . variableDeclaration
    (55) multiVariableDeclaration -> . LPAREN variableDeclarations RPAREN
    (56) multiVariableDeclaration -> . LPAREN RPAREN
    (51) variableDeclaration -> . ID DOISP type
    (52) variableDeclaration -> . ID

    LPAREN          shift and go to state 120
    ID              shift and go to state 121

    genericVariableDeclaration     shift and go to state 228
    multiVariableDeclaration       shift and go to state 118
    variableDeclaration            shift and go to state 119

state 226

    (32) closed_statement -> WHILE LPAREN . expression RPAREN closed_statement
    (35) non_if_statement_block -> WHILE LPAREN . expression RPAREN block
    (24) open_statement -> WHILE LPAREN . expression RPAREN open_statement
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction
    (61) disjunction -> . disjunction OR conjunction
    (62) conjunction -> . equality
    (63) conjunction -> . conjunction AND equality
    (64) equality -> . comparison
    (65) equality -> . equality equalityOperator comparison
    (66) comparison -> . infixOperation
    (67) comparison -> . infixOperation comparisonOperator infixOperation
    (68) infixOperation -> . infixOperation inOperator elvisExpression
    (69) infixOperation -> . infixOperation isOperator type
    (70) infixOperation -> . elvisExpression
    (71) elvisExpression -> . rangeExpression
    (72) elvisExpression -> . elvisExpression ELVIS rangeExpression
    (73) rangeExpression -> . additiveExpression
    (74) rangeExpression -> . rangeExpression PONTOPONTO additiveExpression
    (75) additiveExpression -> . multiplicativeExpression
    (76) additiveExpression -> . additiveExpression additiveOperator multiplicativeExpression
    (77) multiplicativeExpression -> . asExpression
    (78) multiplicativeExpression -> . multiplicativeExpression multiplicativeOperator asExpression
    (79) asExpression -> . unaryExpression
    (80) asExpression -> . unaryExpression asOperator type
    (81) unaryExpression -> . unaryOperator primaryExpression
    (82) unaryExpression -> . primaryExpression
    (83) unaryExpression -> . primaryExpression postfixUnaryOperator
    (122) unaryOperator -> . INCREMENTO
    (123) unaryOperator -> . DECREMENTO
    (124) unaryOperator -> . MINUS
    (125) unaryOperator -> . PLUS
    (126) unaryOperator -> . NOT
    (86) primaryExpression -> . NULL
    (87) primaryExpression -> . TRUE
    (88) primaryExpression -> . FALSE
    (89) primaryExpression -> . NUMBER
    (90) primaryExpression -> . LITERAL_STRING
    (91) primaryExpression -> . ID
    (92) primaryExpression -> . chamadaDeFuncao
    (93) primaryExpression -> . parenthesizedExpression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (97) parenthesizedExpression -> . LPAREN expression RPAREN

    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38
    NOT             shift and go to state 39
    NULL            shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    NUMBER          shift and go to state 43
    LITERAL_STRING  shift and go to state 44
    ID              shift and go to state 45
    LPAREN          shift and go to state 48

    expression                     shift and go to state 229
    disjunction                    shift and go to state 22
    conjunction                    shift and go to state 23
    equality                       shift and go to state 24
    comparison                     shift and go to state 25
    infixOperation                 shift and go to state 26
    elvisExpression                shift and go to state 27
    rangeExpression                shift and go to state 28
    additiveExpression             shift and go to state 29
    multiplicativeExpression       shift and go to state 30
    asExpression                   shift and go to state 31
    unaryExpression                shift and go to state 32
    unaryOperator                  shift and go to state 33
    primaryExpression              shift and go to state 34
    chamadaDeFuncao                shift and go to state 46
    parenthesizedExpression        shift and go to state 47

state 227

    (31) closed_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN . closed_statement
    (23) open_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN . open_statement
    (34) non_if_statement_block -> FOR LPAREN genericVariableDeclaration IN expression RPAREN . block
    (26) closed_statement -> . non_if_statement_block
    (27) closed_statement -> . IF LPAREN expression RPAREN block ELSE block
    (28) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE block
    (29) closed_statement -> . IF LPAREN expression RPAREN block ELSE closed_statement
    (30) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE closed_statement
    (31) closed_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement
    (32) closed_statement -> . WHILE LPAREN expression RPAREN closed_statement
    (33) closed_statement -> . DO closed_statement WHILE LPAREN expression RPAREN
    (19) open_statement -> . IF LPAREN expression RPAREN block
    (20) open_statement -> . IF LPAREN expression RPAREN statement
    (21) open_statement -> . IF LPAREN expression RPAREN block ELSE open_statement
    (22) open_statement -> . IF LPAREN expression RPAREN closed_statement ELSE open_statement
    (23) open_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement
    (24) open_statement -> . WHILE LPAREN expression RPAREN open_statement
    (25) open_statement -> . DO open_statement WHILE LPAREN expression RPAREN
    (44) block -> . LCHAVE statements RCHAVE
    (34) non_if_statement_block -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN block
    (35) non_if_statement_block -> . WHILE LPAREN expression RPAREN block
    (36) non_if_statement_block -> . DO block WHILE LPAREN expression RPAREN
    (37) non_if_statement_block -> . PV
    (38) non_if_statement_block -> . propertyDeclarationStm
    (39) non_if_statement_block -> . assignment
    (40) non_if_statement_block -> . chamadaDeFuncao
    (41) non_if_statement_block -> . jumpExpression
    (45) propertyDeclarationStm -> . VAR genericVariableDeclaration ATRIBUICAO expression
    (46) propertyDeclarationStm -> . VAL genericVariableDeclaration ATRIBUICAO expression
    (42) assignment -> . ID ATRIBUICAO expression
    (43) assignment -> . ID assignmentAndOperator expression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (94) jumpExpression -> . RETURN expression
    (95) jumpExpression -> . CONTINUE
    (96) jumpExpression -> . BREAK

    IF              shift and go to state 178
    FOR             shift and go to state 182
    WHILE           shift and go to state 183
    DO              shift and go to state 184
    LCHAVE          shift and go to state 12
    PV              shift and go to state 58
    VAR             shift and go to state 63
    VAL             shift and go to state 64
    ID              shift and go to state 65
    RETURN          shift and go to state 66
    CONTINUE        shift and go to state 67
    BREAK           shift and go to state 68

    closed_statement               shift and go to state 212
    open_statement                 shift and go to state 211
    block                          shift and go to state 213
    non_if_statement_block         shift and go to state 57
    propertyDeclarationStm         shift and go to state 59
    assignment                     shift and go to state 60
    chamadaDeFuncao                shift and go to state 61
    jumpExpression                 shift and go to state 62

state 228

    (31) closed_statement -> FOR LPAREN genericVariableDeclaration . IN expression RPAREN closed_statement
    (34) non_if_statement_block -> FOR LPAREN genericVariableDeclaration . IN expression RPAREN block
    (23) open_statement -> FOR LPAREN genericVariableDeclaration . IN expression RPAREN open_statement

    IN              shift and go to state 230


state 229

    (32) closed_statement -> WHILE LPAREN expression . RPAREN closed_statement
    (35) non_if_statement_block -> WHILE LPAREN expression . RPAREN block
    (24) open_statement -> WHILE LPAREN expression . RPAREN open_statement

    RPAREN          shift and go to state 231


state 230

    (31) closed_statement -> FOR LPAREN genericVariableDeclaration IN . expression RPAREN closed_statement
    (34) non_if_statement_block -> FOR LPAREN genericVariableDeclaration IN . expression RPAREN block
    (23) open_statement -> FOR LPAREN genericVariableDeclaration IN . expression RPAREN open_statement
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction
    (61) disjunction -> . disjunction OR conjunction
    (62) conjunction -> . equality
    (63) conjunction -> . conjunction AND equality
    (64) equality -> . comparison
    (65) equality -> . equality equalityOperator comparison
    (66) comparison -> . infixOperation
    (67) comparison -> . infixOperation comparisonOperator infixOperation
    (68) infixOperation -> . infixOperation inOperator elvisExpression
    (69) infixOperation -> . infixOperation isOperator type
    (70) infixOperation -> . elvisExpression
    (71) elvisExpression -> . rangeExpression
    (72) elvisExpression -> . elvisExpression ELVIS rangeExpression
    (73) rangeExpression -> . additiveExpression
    (74) rangeExpression -> . rangeExpression PONTOPONTO additiveExpression
    (75) additiveExpression -> . multiplicativeExpression
    (76) additiveExpression -> . additiveExpression additiveOperator multiplicativeExpression
    (77) multiplicativeExpression -> . asExpression
    (78) multiplicativeExpression -> . multiplicativeExpression multiplicativeOperator asExpression
    (79) asExpression -> . unaryExpression
    (80) asExpression -> . unaryExpression asOperator type
    (81) unaryExpression -> . unaryOperator primaryExpression
    (82) unaryExpression -> . primaryExpression
    (83) unaryExpression -> . primaryExpression postfixUnaryOperator
    (122) unaryOperator -> . INCREMENTO
    (123) unaryOperator -> . DECREMENTO
    (124) unaryOperator -> . MINUS
    (125) unaryOperator -> . PLUS
    (126) unaryOperator -> . NOT
    (86) primaryExpression -> . NULL
    (87) primaryExpression -> . TRUE
    (88) primaryExpression -> . FALSE
    (89) primaryExpression -> . NUMBER
    (90) primaryExpression -> . LITERAL_STRING
    (91) primaryExpression -> . ID
    (92) primaryExpression -> . chamadaDeFuncao
    (93) primaryExpression -> . parenthesizedExpression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (97) parenthesizedExpression -> . LPAREN expression RPAREN

    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38
    NOT             shift and go to state 39
    NULL            shift and go to state 40
    TRUE            shift and go to state 41
    FALSE           shift and go to state 42
    NUMBER          shift and go to state 43
    LITERAL_STRING  shift and go to state 44
    ID              shift and go to state 45
    LPAREN          shift and go to state 48

    expression                     shift and go to state 232
    disjunction                    shift and go to state 22
    conjunction                    shift and go to state 23
    equality                       shift and go to state 24
    comparison                     shift and go to state 25
    infixOperation                 shift and go to state 26
    elvisExpression                shift and go to state 27
    rangeExpression                shift and go to state 28
    additiveExpression             shift and go to state 29
    multiplicativeExpression       shift and go to state 30
    asExpression                   shift and go to state 31
    unaryExpression                shift and go to state 32
    unaryOperator                  shift and go to state 33
    primaryExpression              shift and go to state 34
    chamadaDeFuncao                shift and go to state 46
    parenthesizedExpression        shift and go to state 47

state 231

    (32) closed_statement -> WHILE LPAREN expression RPAREN . closed_statement
    (35) non_if_statement_block -> WHILE LPAREN expression RPAREN . block
    (24) open_statement -> WHILE LPAREN expression RPAREN . open_statement
    (26) closed_statement -> . non_if_statement_block
    (27) closed_statement -> . IF LPAREN expression RPAREN block ELSE block
    (28) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE block
    (29) closed_statement -> . IF LPAREN expression RPAREN block ELSE closed_statement
    (30) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE closed_statement
    (31) closed_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement
    (32) closed_statement -> . WHILE LPAREN expression RPAREN closed_statement
    (33) closed_statement -> . DO closed_statement WHILE LPAREN expression RPAREN
    (44) block -> . LCHAVE statements RCHAVE
    (19) open_statement -> . IF LPAREN expression RPAREN block
    (20) open_statement -> . IF LPAREN expression RPAREN statement
    (21) open_statement -> . IF LPAREN expression RPAREN block ELSE open_statement
    (22) open_statement -> . IF LPAREN expression RPAREN closed_statement ELSE open_statement
    (23) open_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement
    (24) open_statement -> . WHILE LPAREN expression RPAREN open_statement
    (25) open_statement -> . DO open_statement WHILE LPAREN expression RPAREN
    (34) non_if_statement_block -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN block
    (35) non_if_statement_block -> . WHILE LPAREN expression RPAREN block
    (36) non_if_statement_block -> . DO block WHILE LPAREN expression RPAREN
    (37) non_if_statement_block -> . PV
    (38) non_if_statement_block -> . propertyDeclarationStm
    (39) non_if_statement_block -> . assignment
    (40) non_if_statement_block -> . chamadaDeFuncao
    (41) non_if_statement_block -> . jumpExpression
    (45) propertyDeclarationStm -> . VAR genericVariableDeclaration ATRIBUICAO expression
    (46) propertyDeclarationStm -> . VAL genericVariableDeclaration ATRIBUICAO expression
    (42) assignment -> . ID ATRIBUICAO expression
    (43) assignment -> . ID assignmentAndOperator expression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (94) jumpExpression -> . RETURN expression
    (95) jumpExpression -> . CONTINUE
    (96) jumpExpression -> . BREAK

    IF              shift and go to state 178
    FOR             shift and go to state 182
    WHILE           shift and go to state 183
    DO              shift and go to state 184
    LCHAVE          shift and go to state 12
    PV              shift and go to state 58
    VAR             shift and go to state 63
    VAL             shift and go to state 64
    ID              shift and go to state 65
    RETURN          shift and go to state 66
    CONTINUE        shift and go to state 67
    BREAK           shift and go to state 68

    closed_statement               shift and go to state 187
    block                          shift and go to state 188
    open_statement                 shift and go to state 186
    non_if_statement_block         shift and go to state 57
    propertyDeclarationStm         shift and go to state 59
    assignment                     shift and go to state 60
    chamadaDeFuncao                shift and go to state 61
    jumpExpression                 shift and go to state 62

state 232

    (31) closed_statement -> FOR LPAREN genericVariableDeclaration IN expression . RPAREN closed_statement
    (34) non_if_statement_block -> FOR LPAREN genericVariableDeclaration IN expression . RPAREN block
    (23) open_statement -> FOR LPAREN genericVariableDeclaration IN expression . RPAREN open_statement

    RPAREN          shift and go to state 233


state 233

    (31) closed_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN . closed_statement
    (34) non_if_statement_block -> FOR LPAREN genericVariableDeclaration IN expression RPAREN . block
    (23) open_statement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN . open_statement
    (26) closed_statement -> . non_if_statement_block
    (27) closed_statement -> . IF LPAREN expression RPAREN block ELSE block
    (28) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE block
    (29) closed_statement -> . IF LPAREN expression RPAREN block ELSE closed_statement
    (30) closed_statement -> . IF LPAREN expression RPAREN closed_statement ELSE closed_statement
    (31) closed_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN closed_statement
    (32) closed_statement -> . WHILE LPAREN expression RPAREN closed_statement
    (33) closed_statement -> . DO closed_statement WHILE LPAREN expression RPAREN
    (44) block -> . LCHAVE statements RCHAVE
    (19) open_statement -> . IF LPAREN expression RPAREN block
    (20) open_statement -> . IF LPAREN expression RPAREN statement
    (21) open_statement -> . IF LPAREN expression RPAREN block ELSE open_statement
    (22) open_statement -> . IF LPAREN expression RPAREN closed_statement ELSE open_statement
    (23) open_statement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN open_statement
    (24) open_statement -> . WHILE LPAREN expression RPAREN open_statement
    (25) open_statement -> . DO open_statement WHILE LPAREN expression RPAREN
    (34) non_if_statement_block -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN block
    (35) non_if_statement_block -> . WHILE LPAREN expression RPAREN block
    (36) non_if_statement_block -> . DO block WHILE LPAREN expression RPAREN
    (37) non_if_statement_block -> . PV
    (38) non_if_statement_block -> . propertyDeclarationStm
    (39) non_if_statement_block -> . assignment
    (40) non_if_statement_block -> . chamadaDeFuncao
    (41) non_if_statement_block -> . jumpExpression
    (45) propertyDeclarationStm -> . VAR genericVariableDeclaration ATRIBUICAO expression
    (46) propertyDeclarationStm -> . VAL genericVariableDeclaration ATRIBUICAO expression
    (42) assignment -> . ID ATRIBUICAO expression
    (43) assignment -> . ID assignmentAndOperator expression
    (47) chamadaDeFuncao -> . ID LPAREN RPAREN
    (48) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (94) jumpExpression -> . RETURN expression
    (95) jumpExpression -> . CONTINUE
    (96) jumpExpression -> . BREAK

    IF              shift and go to state 178
    FOR             shift and go to state 182
    WHILE           shift and go to state 183
    DO              shift and go to state 184
    LCHAVE          shift and go to state 12
    PV              shift and go to state 58
    VAR             shift and go to state 63
    VAL             shift and go to state 64
    ID              shift and go to state 65
    RETURN          shift and go to state 66
    CONTINUE        shift and go to state 67
    BREAK           shift and go to state 68

    closed_statement               shift and go to state 212
    block                          shift and go to state 213
    open_statement                 shift and go to state 211
    non_if_statement_block         shift and go to state 57
    propertyDeclarationStm         shift and go to state 59
    assignment                     shift and go to state 60
    chamadaDeFuncao                shift and go to state 61
    jumpExpression                 shift and go to state 62
