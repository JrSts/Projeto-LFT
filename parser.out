Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOLEAN
    CHAR
    DOUBLE
    FLOAT
    INT
    STRING

Grammar

Rule 0     S' -> kotlinFile
Rule 1     kotlinFile -> functionDeclaration kotlinFile
Rule 2     kotlinFile -> functionDeclaration
Rule 3     optionalType -> DOISP type
Rule 4     optionalType -> <empty>
Rule 5     optionalBlock -> block
Rule 6     optionalBlock -> <empty>
Rule 7     functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock
Rule 8     optionalPv -> PV
Rule 9     optionalPv -> <empty>
Rule 10    genericVariableDeclaration -> multiVariableDeclaration
Rule 11    genericVariableDeclaration -> variableDeclaration
Rule 12    expression -> disjunction
Rule 13    varOrVal -> VAR
Rule 14    varOrVal -> VAL
Rule 15    optionalTypeParameters -> typeParameters
Rule 16    optionalTypeParameters -> <empty>
Rule 17    propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
Rule 18    typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR
Rule 19    typeParametersRecursive -> COMMA typeParameter
Rule 20    typeParametersRecursive -> COMMA typeParameter typeParametersRecursive
Rule 21    optionalCOMMA -> COMMA
Rule 22    optionalCOMMA -> <empty>
Rule 23    typeParameter -> simpleIdentifier
Rule 24    typeParameter -> simpleIdentifier DOISP type
Rule 25    functionBody -> block
Rule 26    functionBody -> ATRIBUICAO expression
Rule 27    functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN
Rule 28    functionValueParameters -> LPAREN RPAREN
Rule 29    functionValueParametersRecursive -> functionValueParameter optionalCOMMA
Rule 30    functionValueParametersRecursive -> functionValueParameter COMMA functionValueParametersRecursive
Rule 31    functionValueParameter -> parameter ATRIBUICAO expression
Rule 32    functionValueParameter -> parameter
Rule 33    variableDeclaration -> simpleIdentifier DOISP type
Rule 34    variableDeclaration -> simpleIdentifier
Rule 35    multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive RPAREN
Rule 36    multiVariableDeclaration -> LPAREN RPAREN
Rule 37    multiVariableDeclarationRecursive -> variableDeclaration
Rule 38    multiVariableDeclarationRecursive -> variableDeclaration COMMA multiVariableDeclarationRecursive
Rule 39    parameter -> simpleIdentifier DOISP type
Rule 40    type -> optionalTypeModifiers optype
Rule 41    optionalTypeModifiers -> typeModifiers
Rule 42    optionalTypeModifiers -> <empty>
Rule 43    optype -> parenthesizedType
Rule 44    optype -> functionType
Rule 45    optype -> userType
Rule 46    typeModifiers -> typeModifier
Rule 47    typeModifiers -> typeModifier typeModifiers
Rule 48    typeModifier -> SUSPEND
Rule 49    typeProjectionModifier -> varianceModifier
Rule 50    varianceModifier -> IN
Rule 51    varianceModifier -> OUT
Rule 52    userType -> simpleUserType
Rule 53    simpleUserType -> simpleIdentifier typeArguments
Rule 54    simpleUserType -> simpleIdentifier
Rule 55    typeProjection -> typeProjectionModifiers type
Rule 56    typeProjection -> type
Rule 57    typeProjectionModifiers -> typeProjection
Rule 58    typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers
Rule 59    functionType -> receiverType PONTO functionTypeParameters SETA type
Rule 60    functionType -> functionTypeParameters SETA type
Rule 61    optionalParameterOrType -> parameter
Rule 62    optionalParameterOrType -> type
Rule 63    optionalParameterOrType -> <empty>
Rule 64    parameterOrTypeRecursive -> COMMA optionalParameterOrType
Rule 65    parameterOrTypeRecursive -> COMMA optionalParameterOrType parameterOrTypeRecursive
Rule 66    parameterOrTypeRecursive -> <empty>
Rule 67    functionTypeParameters -> LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
Rule 68    parenthesizedType -> LPAREN type RPAREN
Rule 69    receiverType -> typeModifier parenthesizedType
Rule 70    statements -> statement
Rule 71    statements -> statement statements
Rule 72    statement -> functionDeclaration
Rule 73    statement -> assignment
Rule 74    statement -> loopStatement
Rule 75    statement -> expression
Rule 76    statement -> propertyDeclaration
Rule 77    controlStructureBody -> block
Rule 78    controlStructureBody -> statement
Rule 79    block -> LCHAVE statements RCHAVE
Rule 80    loopStatement -> forStatement
Rule 81    loopStatement -> whileStatement
Rule 82    loopStatement -> doWhileStatement
Rule 83    optionalControlStructureBody -> controlStructureBody
Rule 84    optionalControlStructureBody -> <empty>
Rule 85    forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody
Rule 86    whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody
Rule 87    whileStatement -> WHILE LPAREN expression RPAREN PV
Rule 88    doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN
Rule 89    doWhileStatement -> DO WHILE LPAREN expression RPAREN
Rule 90    assignment -> directlyAssignableExpression ATRIBUICAO expression
Rule 91    assignment -> assignableExpression assignmentAndOperator expression
Rule 92    disjunction -> conjunction
Rule 93    disjunction -> conjunction OR disjunction
Rule 94    conjunction -> equality
Rule 95    conjunction -> equality AND conjunction
Rule 96    equality -> comparison
Rule 97    equality -> comparison equalityOperator equality
Rule 98    comparison -> infixOperation
Rule 99    comparison -> infixOperation comparisonOperator infixOperation
Rule 100   infixOperation -> elvisExpression infixOperationRecursive
Rule 101   infixOperation -> elvisExpression
Rule 102   infixOperationRecursive -> inOrIs elvisOrType
Rule 103   infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive
Rule 104   inOrIs -> inOperator
Rule 105   inOrIs -> isOperator
Rule 106   elvisOrType -> elvisExpression
Rule 107   elvisOrType -> type
Rule 108   elvisExpression -> infixFunctionCall
Rule 109   elvisExpression -> infixFunctionCall ELVIS elvisExpression
Rule 110   infixFunctionCall -> rangeExpression
Rule 111   infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall
Rule 112   rangeExpression -> additiveExpression
Rule 113   rangeExpression -> additiveExpression PONTOPONTO rangeExpression
Rule 114   additiveExpression -> multiplicativeExpression
Rule 115   additiveExpression -> multiplicativeExpression additiveOperator additiveExpression
Rule 116   multiplicativeExpression -> asExpression
Rule 117   multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression
Rule 118   asExpression -> prefixUnaryExpression
Rule 119   asExpression -> prefixUnaryExpression asOperator type
Rule 120   prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression
Rule 121   prefixUnaryExpression -> postfixUnaryExpression
Rule 122   unaryPrefix -> label
Rule 123   unaryPrefix -> prefixUnaryOperator
Rule 124   prefixUnaryExpressionRecursive -> unaryPrefix
Rule 125   prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive
Rule 126   label -> simpleIdentifier
Rule 127   postfixUnaryExpressionRecursive -> postfixUnarySuffix
Rule 128   postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive
Rule 129   postfixUnaryExpression -> primaryExpression
Rule 130   postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive
Rule 131   postfixUnarySuffix -> postfixUnaryOperator
Rule 132   postfixUnarySuffix -> typeArguments
Rule 133   postfixUnarySuffix -> callSuffix
Rule 134   postfixUnarySuffix -> indexingSuffix
Rule 135   postfixUnarySuffix -> navigationSuffix
Rule 136   directlyAssignableExpression -> postfixUnaryExpression assignableSuffix
Rule 137   directlyAssignableExpression -> simpleIdentifier
Rule 138   directlyAssignableExpression -> parenthesizedDirectlyAssignableExpression
Rule 139   parenthesizedDirectlyAssignableExpression -> LPAREN directlyAssignableExpression RPAREN
Rule 140   assignableExpression -> prefixUnaryExpression
Rule 141   assignableExpression -> parenthesizedAssignableExpression
Rule 142   parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN
Rule 143   assignableSuffix -> typeArguments
Rule 144   assignableSuffix -> indexingSuffix
Rule 145   assignableSuffix -> navigationSuffix
Rule 146   indexingSuffix -> LCCT indexingSuffixRecursive RCCT
Rule 147   indexingSuffix -> LCCT RCCT
Rule 148   indexingSuffixRecursive -> expression
Rule 149   indexingSuffixRecursive -> expression COMMA indexingSuffixRecursive
Rule 150   navigationSuffix -> memberAccessOperator simpleIdentifier CLASS
Rule 151   navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS
Rule 152   callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda
Rule 153   callSuffix -> optionalTypeArguments optionalValueArguments
Rule 154   optionalTypeArguments -> typeArguments
Rule 155   optionalTypeArguments -> <empty>
Rule 156   optionalValueArguments -> valueArguments
Rule 157   optionalValueArguments -> <empty>
Rule 158   annotatedLambda -> lambdaLiteral
Rule 159   typeArguments -> MENOR typeArgumentsRecursive MAIOR
Rule 160   typeArguments -> MENOR MAIOR
Rule 161   typeArgumentsRecursive -> typeProjection
Rule 162   typeArgumentsRecursive -> typeProjection COMMA typeArgumentsRecursive
Rule 163   valueArgumentsRecursive -> valueArgument
Rule 164   valueArgumentsRecursive -> valueArgument COMMA valueArgumentsRecursive
Rule 165   valueArguments -> LPAREN RPAREN
Rule 166   valueArguments -> LPAREN valueArgumentsRecursive RPAREN
Rule 167   valueArgument -> simpleIdentifier ATRIBUICAO MULT expression
Rule 168   valueArgument -> simpleIdentifier ATRIBUICAO expression
Rule 169   valueArgument -> expression
Rule 170   primaryExpression -> parenthesizedExpression
Rule 171   primaryExpression -> simpleIdentifier
Rule 172   primaryExpression -> LITERAL_STRING
Rule 173   primaryExpression -> callableReference
Rule 174   primaryExpression -> functionLiteral
Rule 175   primaryExpression -> collectionLiteral
Rule 176   primaryExpression -> ifExpression
Rule 177   primaryExpression -> jumpExpression
Rule 178   parenthesizedExpression -> LPAREN expression RPAREN
Rule 179   collectionLiteral -> LCCT collectionLiteralRecursive RCCT
Rule 180   collectionLiteral -> LCCT RCCT
Rule 181   collectionLiteralRecursive -> expression
Rule 182   collectionLiteralRecursive -> expression COMMA collectionLiteralRecursive
Rule 183   parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN
Rule 184   parametersWithOptionalType -> LPAREN RPAREN
Rule 185   parametersWithOptionalTypeRecursive -> parameterWithOptionalType
Rule 186   parametersWithOptionalTypeRecursive -> parameterWithOptionalType COMMA parametersWithOptionalTypeRecursive COMMA
Rule 187   parameterWithOptionalType -> optionalParameterModifiers simpleIdentifier optionalType
Rule 188   optionalParameterModifiers -> parameterModifiers
Rule 189   optionalParameterModifiers -> <empty>
Rule 190   parameterModifiers -> VARARG
Rule 191   parameterModifiers -> NOINLINE
Rule 192   parameterModifiers -> CROSSINLINE
Rule 193   lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE
Rule 194   optionsLambdaLiteral -> statements
Rule 195   optionsLambdaLiteral -> lambdaParameters SETA statements
Rule 196   optionsLambdaLiteral -> SETA statements
Rule 197   lambdaParameters -> lambdaParameter
Rule 198   lambdaParameters -> lambdaParameter COMMA lambdaParameters
Rule 199   lambdaParameter -> variableDeclaration
Rule 200   lambdaParameter -> multiVariableDeclaration optionalType
Rule 201   optionalTypePonto -> type PONTO
Rule 202   optionalTypePonto -> <empty>
Rule 203   optionalTypeConstraints -> typeConstraints
Rule 204   optionalTypeConstraints -> <empty>
Rule 205   optionalFunctionBody -> functionBody
Rule 206   optionalFunctionBody -> <empty>
Rule 207   anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
Rule 208   functionLiteral -> lambdaLiteral
Rule 209   functionLiteral -> anonymousFunction
Rule 210   typeConstraints -> simpleIdentifier DOISP type
Rule 211   ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV
Rule 212   ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
Rule 213   controlStructureBodyOrPV -> controlStructureBody
Rule 214   controlStructureBodyOrPV -> PV
Rule 215   optionalPV -> PV
Rule 216   optionalPV -> <empty>
Rule 217   jumpExpression -> RETURN expression
Rule 218   jumpExpression -> RETURN_AT expression
Rule 219   jumpExpression -> expression
Rule 220   jumpExpression -> CONTINUE
Rule 221   jumpExpression -> CONTINUE_AT
Rule 222   jumpExpression -> BREAK
Rule 223   jumpExpression -> BREAK_AT
Rule 224   callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass
Rule 225   optionalReceiverType -> receiverType
Rule 226   optionalReceiverType -> <empty>
Rule 227   simpleIdentifierOrClass -> simpleIdentifier
Rule 228   simpleIdentifierOrClass -> CLASS
Rule 229   assignmentAndOperator -> MAISIGUAL
Rule 230   assignmentAndOperator -> MENOSIGUAL
Rule 231   assignmentAndOperator -> MULTIGUAL
Rule 232   assignmentAndOperator -> DIVIGUAL
Rule 233   assignmentAndOperator -> MODIGUAL
Rule 234   equalityOperator -> DIFERENTE
Rule 235   equalityOperator -> IDENTIDADE
Rule 236   equalityOperator -> IGUALDADE
Rule 237   equalityOperator -> SEMIDENTIDADE
Rule 238   comparisonOperator -> MENOR
Rule 239   comparisonOperator -> MAIOR
Rule 240   comparisonOperator -> MENORIGUAL
Rule 241   comparisonOperator -> MAIORIGUAL
Rule 242   inOperator -> IN
Rule 243   inOperator -> NOT_IN
Rule 244   isOperator -> IS
Rule 245   isOperator -> NOT_IS
Rule 246   additiveOperator -> PLUS
Rule 247   additiveOperator -> MINUS
Rule 248   multiplicativeOperator -> MULT
Rule 249   multiplicativeOperator -> DIVIDE
Rule 250   multiplicativeOperator -> MOD
Rule 251   asOperator -> AS
Rule 252   asOperator -> AS asOperator
Rule 253   prefixUnaryOperator -> INCREMENTO
Rule 254   prefixUnaryOperator -> DECREMENTO
Rule 255   prefixUnaryOperator -> MINUS
Rule 256   prefixUnaryOperator -> PLUS
Rule 257   prefixUnaryOperator -> NOT
Rule 258   postfixUnaryOperator -> INCREMENTO
Rule 259   postfixUnaryOperator -> DECREMENTO
Rule 260   memberAccessOperator -> safeNav
Rule 261   memberAccessOperator -> COLONCOLON
Rule 262   safeNav -> PONTO
Rule 263   simpleIdentifier -> ID
Rule 264   simpleIdentifier -> CROSSINLINE
Rule 265   simpleIdentifier -> IMPORT
Rule 266   simpleIdentifier -> INIT
Rule 267   simpleIdentifier -> NOINLINE
Rule 268   simpleIdentifier -> OUT
Rule 269   simpleIdentifier -> VARARG
Rule 270   simpleIdentifier -> WHERE
Rule 271   simpleIdentifier -> OBJECT
Rule 272   simpleIdentifier -> CONST
Rule 273   simpleIdentifier -> CONSTRUCTOR
Rule 274   simpleIdentifier -> EOF
Rule 275   simpleIdentifier -> FALSE
Rule 276   simpleIdentifier -> FUNCTION
Rule 277   simpleIdentifier -> NULL
Rule 278   simpleIdentifier -> NULLABLE
Rule 279   simpleIdentifier -> NUMBER
Rule 280   simpleIdentifier -> OPERATOR
Rule 281   simpleIdentifier -> SMARTCAST
Rule 282   simpleIdentifier -> THIS
Rule 283   simpleIdentifier -> TRUE
Rule 284   simpleIdentifier -> VAL
Rule 285   simpleIdentifier -> VAR
Rule 286   simpleIdentifier -> WHEN
Rule 287   simpleIdentifier -> LONG
Rule 288   simpleIdentifier -> ARRAY

Terminals, with rules where they appear

AND                  : 95
ARRAY                : 288
AS                   : 251 252
ATRIBUICAO           : 17 26 31 90 167 168
BOOLEAN              : 
BREAK                : 222
BREAK_AT             : 223
CHAR                 : 
CLASS                : 150 151 228
COLONCOLON           : 224 261
COMMA                : 19 20 21 30 38 64 65 149 162 164 182 186 186 198
CONST                : 272
CONSTRUCTOR          : 273
CONTINUE             : 220
CONTINUE_AT          : 221
CROSSINLINE          : 192 264
DECREMENTO           : 254 259
DIFERENTE            : 234
DIVIDE               : 249
DIVIGUAL             : 232
DO                   : 88 89
DOISP                : 3 24 33 39 210
DOUBLE               : 
ELSE                 : 212
ELVIS                : 109
EOF                  : 274
FALSE                : 275
FLOAT                : 
FOR                  : 85
FUN                  : 7 207
FUNCTION             : 276
ID                   : 263
IDENTIDADE           : 235
IF                   : 211 212
IGUALDADE            : 236
IMPORT               : 265
IN                   : 50 85 242
INCREMENTO           : 253 258
INIT                 : 266
INT                  : 
IS                   : 244
LCCT                 : 146 147 179 180
LCHAVE               : 79 193
LITERAL_STRING       : 172
LONG                 : 287
LPAREN               : 27 28 35 36 67 68 85 86 87 88 89 139 142 165 166 178 183 184 211 212
MAIOR                : 18 159 160 239
MAIORIGUAL           : 241
MAISIGUAL            : 229
MENOR                : 18 159 160 238
MENORIGUAL           : 240
MENOSIGUAL           : 230
MINUS                : 247 255
MOD                  : 250
MODIGUAL             : 233
MULT                 : 167 248
MULTIGUAL            : 231
NOINLINE             : 191 267
NOT                  : 257
NOT_IN               : 243
NOT_IS               : 245
NULL                 : 277
NULLABLE             : 278
NUMBER               : 279
OBJECT               : 271
OPERATOR             : 280
OR                   : 93
OUT                  : 51 268
PLUS                 : 246 256
PONTO                : 59 201 262
PONTOPONTO           : 113
PV                   : 8 87 214 215
RCCT                 : 146 147 179 180
RCHAVE               : 79 193
RETURN               : 217
RETURN_AT            : 218
RPAREN               : 27 28 35 36 67 68 85 86 87 88 89 139 142 165 166 178 183 184 211 212
SEMIDENTIDADE        : 237
SETA                 : 59 60 195 196
SMARTCAST            : 281
STRING               : 
SUSPEND              : 48
THIS                 : 282
TRUE                 : 283
VAL                  : 14 284
VAR                  : 13 285
VARARG               : 190 269
WHEN                 : 286
WHERE                : 270
WHILE                : 86 87 88 89
error                : 

Nonterminals, with rules where they appear

additiveExpression   : 112 113 115
additiveOperator     : 115
annotatedLambda      : 152
anonymousFunction    : 209
asExpression         : 116 117
asOperator           : 119 252
assignableExpression : 91 142
assignableSuffix     : 136
assignment           : 73
assignmentAndOperator : 91
block                : 5 25 77
callSuffix           : 133
callableReference    : 173
collectionLiteral    : 175
collectionLiteralRecursive : 179 182
comparison           : 96 97
comparisonOperator   : 99
conjunction          : 92 93 95
controlStructureBody : 83 86 88 213
controlStructureBodyOrPV : 211 212
directlyAssignableExpression : 90 139
disjunction          : 12 93
doWhileStatement     : 82
elvisExpression      : 100 101 106 109
elvisOrType          : 102 103
equality             : 94 95 97
equalityOperator     : 97
expression           : 17 26 31 75 85 86 87 88 89 90 91 148 149 167 168 169 178 181 182 211 212 217 218 219
forStatement         : 80
functionBody         : 205
functionDeclaration  : 1 2 72
functionLiteral      : 174
functionType         : 44
functionTypeParameters : 59 60
functionValueParameter : 29 30
functionValueParameters : 7
functionValueParametersRecursive : 27 30
genericVariableDeclaration : 17 85
ifExpression         : 176
inOperator           : 104
inOrIs               : 102 103
indexingSuffix       : 134 144
indexingSuffixRecursive : 146 149
infixFunctionCall    : 108 109 111
infixOperation       : 98 99 99
infixOperationRecursive : 100 103
isOperator           : 105
jumpExpression       : 177
kotlinFile           : 1 0
label                : 122
lambdaLiteral        : 158 208
lambdaParameter      : 197 198
lambdaParameters     : 195 198
loopStatement        : 74
memberAccessOperator : 150 151
multiVariableDeclaration : 10 200
multiVariableDeclarationRecursive : 35 38
multiplicativeExpression : 114 115 117
multiplicativeOperator : 117
navigationSuffix     : 135 145
optionalBlock        : 7
optionalCOMMA        : 18 29 67
optionalControlStructureBody : 85 212
optionalFunctionBody : 207
optionalPV           : 212
optionalParameterModifiers : 187
optionalParameterOrType : 64 65 67
optionalPv           : 17
optionalReceiverType : 224
optionalType         : 7 187 200 207
optionalTypeArguments : 152 153
optionalTypeConstraints : 207
optionalTypeModifiers : 40
optionalTypeParameters : 17
optionalTypePonto    : 207
optionalValueArguments : 152 153
optionsLambdaLiteral : 193
optype               : 40
parameter            : 31 32 61
parameterModifiers   : 188
parameterOrTypeRecursive : 65 67
parameterWithOptionalType : 185 186
parametersWithOptionalType : 207
parametersWithOptionalTypeRecursive : 183 186
parenthesizedAssignableExpression : 141
parenthesizedDirectlyAssignableExpression : 138
parenthesizedExpression : 151 170
parenthesizedType    : 43 69
postfixUnaryExpression : 120 121 136
postfixUnaryExpressionRecursive : 128 130
postfixUnaryOperator : 131
postfixUnarySuffix   : 127 128
prefixUnaryExpression : 118 119 140
prefixUnaryExpressionRecursive : 120 125
prefixUnaryOperator  : 123
primaryExpression    : 129 130
propertyDeclaration  : 76
rangeExpression      : 110 111 113
receiverType         : 59 225
safeNav              : 260
simpleIdentifier     : 7 23 24 33 34 39 53 54 111 126 137 150 167 168 171 187 210 227
simpleIdentifierOrClass : 224
simpleUserType       : 52
statement            : 70 71 78
statements           : 71 79 194 195 196
type                 : 3 24 33 39 55 56 59 60 62 68 107 119 201 210
typeArguments        : 53 132 143 154
typeArgumentsRecursive : 159 162
typeConstraints      : 203
typeModifier         : 46 47 69
typeModifiers        : 41 47
typeParameter        : 18 19 20
typeParameters       : 15
typeParametersRecursive : 18 20
typeProjection       : 57 161 162
typeProjectionModifier : 58
typeProjectionModifiers : 55 58
unaryPrefix          : 124 125
userType             : 45
valueArgument        : 163 164
valueArguments       : 156
valueArgumentsRecursive : 164 166
varOrVal             : 17
variableDeclaration  : 11 37 38 199
varianceModifier     : 49
whileStatement       : 81

Parsing method: LALR

state 0

    (0) S' -> . kotlinFile
    (1) kotlinFile -> . functionDeclaration kotlinFile
    (2) kotlinFile -> . functionDeclaration
    (7) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock

    FUN             shift and go to state 3

    kotlinFile                     shift and go to state 1
    functionDeclaration            shift and go to state 2

state 1

    (0) S' -> kotlinFile .



state 2

    (1) kotlinFile -> functionDeclaration . kotlinFile
    (2) kotlinFile -> functionDeclaration .
    (1) kotlinFile -> . functionDeclaration kotlinFile
    (2) kotlinFile -> . functionDeclaration
    (7) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock

    $end            reduce using rule 2 (kotlinFile -> functionDeclaration .)
    FUN             shift and go to state 3

    functionDeclaration            shift and go to state 2
    kotlinFile                     shift and go to state 4

state 3

    (7) functionDeclaration -> FUN . simpleIdentifier functionValueParameters optionalType optionalBlock
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

    simpleIdentifier               shift and go to state 5

state 4

    (1) kotlinFile -> functionDeclaration kotlinFile .

    $end            reduce using rule 1 (kotlinFile -> functionDeclaration kotlinFile .)


state 5

    (7) functionDeclaration -> FUN simpleIdentifier . functionValueParameters optionalType optionalBlock
    (27) functionValueParameters -> . LPAREN functionValueParametersRecursive RPAREN
    (28) functionValueParameters -> . LPAREN RPAREN

    LPAREN          shift and go to state 33

    functionValueParameters        shift and go to state 32

state 6

    (263) simpleIdentifier -> ID .

    LPAREN          reduce using rule 263 (simpleIdentifier -> ID .)
    DOISP           reduce using rule 263 (simpleIdentifier -> ID .)
    ATRIBUICAO      reduce using rule 263 (simpleIdentifier -> ID .)
    INCREMENTO      reduce using rule 263 (simpleIdentifier -> ID .)
    DECREMENTO      reduce using rule 263 (simpleIdentifier -> ID .)
    MENOR           reduce using rule 263 (simpleIdentifier -> ID .)
    LCCT            reduce using rule 263 (simpleIdentifier -> ID .)
    COLONCOLON      reduce using rule 263 (simpleIdentifier -> ID .)
    PONTO           reduce using rule 263 (simpleIdentifier -> ID .)
    RCHAVE          reduce using rule 263 (simpleIdentifier -> ID .)
    AS              reduce using rule 263 (simpleIdentifier -> ID .)
    MAISIGUAL       reduce using rule 263 (simpleIdentifier -> ID .)
    MENOSIGUAL      reduce using rule 263 (simpleIdentifier -> ID .)
    MULTIGUAL       reduce using rule 263 (simpleIdentifier -> ID .)
    DIVIGUAL        reduce using rule 263 (simpleIdentifier -> ID .)
    MODIGUAL        reduce using rule 263 (simpleIdentifier -> ID .)
    MULT            reduce using rule 263 (simpleIdentifier -> ID .)
    DIVIDE          reduce using rule 263 (simpleIdentifier -> ID .)
    MOD             reduce using rule 263 (simpleIdentifier -> ID .)
    PLUS            reduce using rule 263 (simpleIdentifier -> ID .)
    MINUS           reduce using rule 263 (simpleIdentifier -> ID .)
    PONTOPONTO      reduce using rule 263 (simpleIdentifier -> ID .)
    ID              reduce using rule 263 (simpleIdentifier -> ID .)
    CROSSINLINE     reduce using rule 263 (simpleIdentifier -> ID .)
    IMPORT          reduce using rule 263 (simpleIdentifier -> ID .)
    INIT            reduce using rule 263 (simpleIdentifier -> ID .)
    NOINLINE        reduce using rule 263 (simpleIdentifier -> ID .)
    OUT             reduce using rule 263 (simpleIdentifier -> ID .)
    VARARG          reduce using rule 263 (simpleIdentifier -> ID .)
    WHERE           reduce using rule 263 (simpleIdentifier -> ID .)
    OBJECT          reduce using rule 263 (simpleIdentifier -> ID .)
    CONST           reduce using rule 263 (simpleIdentifier -> ID .)
    CONSTRUCTOR     reduce using rule 263 (simpleIdentifier -> ID .)
    EOF             reduce using rule 263 (simpleIdentifier -> ID .)
    FALSE           reduce using rule 263 (simpleIdentifier -> ID .)
    FUNCTION        reduce using rule 263 (simpleIdentifier -> ID .)
    NULL            reduce using rule 263 (simpleIdentifier -> ID .)
    NULLABLE        reduce using rule 263 (simpleIdentifier -> ID .)
    NUMBER          reduce using rule 263 (simpleIdentifier -> ID .)
    OPERATOR        reduce using rule 263 (simpleIdentifier -> ID .)
    SMARTCAST       reduce using rule 263 (simpleIdentifier -> ID .)
    THIS            reduce using rule 263 (simpleIdentifier -> ID .)
    TRUE            reduce using rule 263 (simpleIdentifier -> ID .)
    VAL             reduce using rule 263 (simpleIdentifier -> ID .)
    VAR             reduce using rule 263 (simpleIdentifier -> ID .)
    WHEN            reduce using rule 263 (simpleIdentifier -> ID .)
    LONG            reduce using rule 263 (simpleIdentifier -> ID .)
    ARRAY           reduce using rule 263 (simpleIdentifier -> ID .)
    ELVIS           reduce using rule 263 (simpleIdentifier -> ID .)
    IN              reduce using rule 263 (simpleIdentifier -> ID .)
    NOT_IN          reduce using rule 263 (simpleIdentifier -> ID .)
    IS              reduce using rule 263 (simpleIdentifier -> ID .)
    NOT_IS          reduce using rule 263 (simpleIdentifier -> ID .)
    MAIOR           reduce using rule 263 (simpleIdentifier -> ID .)
    MENORIGUAL      reduce using rule 263 (simpleIdentifier -> ID .)
    MAIORIGUAL      reduce using rule 263 (simpleIdentifier -> ID .)
    DIFERENTE       reduce using rule 263 (simpleIdentifier -> ID .)
    IDENTIDADE      reduce using rule 263 (simpleIdentifier -> ID .)
    IGUALDADE       reduce using rule 263 (simpleIdentifier -> ID .)
    SEMIDENTIDADE   reduce using rule 263 (simpleIdentifier -> ID .)
    AND             reduce using rule 263 (simpleIdentifier -> ID .)
    OR              reduce using rule 263 (simpleIdentifier -> ID .)
    FUN             reduce using rule 263 (simpleIdentifier -> ID .)
    FOR             reduce using rule 263 (simpleIdentifier -> ID .)
    WHILE           reduce using rule 263 (simpleIdentifier -> ID .)
    DO              reduce using rule 263 (simpleIdentifier -> ID .)
    LITERAL_STRING  reduce using rule 263 (simpleIdentifier -> ID .)
    IF              reduce using rule 263 (simpleIdentifier -> ID .)
    RETURN          reduce using rule 263 (simpleIdentifier -> ID .)
    RETURN_AT       reduce using rule 263 (simpleIdentifier -> ID .)
    CONTINUE        reduce using rule 263 (simpleIdentifier -> ID .)
    CONTINUE_AT     reduce using rule 263 (simpleIdentifier -> ID .)
    BREAK           reduce using rule 263 (simpleIdentifier -> ID .)
    BREAK_AT        reduce using rule 263 (simpleIdentifier -> ID .)
    NOT             reduce using rule 263 (simpleIdentifier -> ID .)
    SUSPEND         reduce using rule 263 (simpleIdentifier -> ID .)
    LCHAVE          reduce using rule 263 (simpleIdentifier -> ID .)
    $end            reduce using rule 263 (simpleIdentifier -> ID .)
    COMMA           reduce using rule 263 (simpleIdentifier -> ID .)
    RPAREN          reduce using rule 263 (simpleIdentifier -> ID .)
    RCCT            reduce using rule 263 (simpleIdentifier -> ID .)
    PV              reduce using rule 263 (simpleIdentifier -> ID .)
    ELSE            reduce using rule 263 (simpleIdentifier -> ID .)
    SETA            reduce using rule 263 (simpleIdentifier -> ID .)
    CLASS           reduce using rule 263 (simpleIdentifier -> ID .)


state 7

    (264) simpleIdentifier -> CROSSINLINE .

    LPAREN          reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    DOISP           reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    ATRIBUICAO      reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    INCREMENTO      reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    DECREMENTO      reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    MENOR           reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    LCCT            reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    COLONCOLON      reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    PONTO           reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    RCHAVE          reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    AS              reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    MAISIGUAL       reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    MENOSIGUAL      reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    MULTIGUAL       reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    DIVIGUAL        reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    MODIGUAL        reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    MULT            reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    DIVIDE          reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    MOD             reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    PLUS            reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    MINUS           reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    PONTOPONTO      reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    ID              reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    CROSSINLINE     reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    IMPORT          reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    INIT            reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    NOINLINE        reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    OUT             reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    VARARG          reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    WHERE           reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    OBJECT          reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    CONST           reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    CONSTRUCTOR     reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    EOF             reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    FALSE           reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    FUNCTION        reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    NULL            reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    NULLABLE        reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    NUMBER          reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    OPERATOR        reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    SMARTCAST       reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    THIS            reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    TRUE            reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    VAL             reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    VAR             reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    WHEN            reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    LONG            reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    ARRAY           reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    ELVIS           reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    IN              reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    NOT_IN          reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    IS              reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    NOT_IS          reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    MAIOR           reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    MENORIGUAL      reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    MAIORIGUAL      reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    DIFERENTE       reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    IDENTIDADE      reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    IGUALDADE       reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    SEMIDENTIDADE   reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    AND             reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    OR              reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    FUN             reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    FOR             reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    WHILE           reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    DO              reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    LITERAL_STRING  reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    IF              reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    RETURN          reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    RETURN_AT       reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    CONTINUE        reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    CONTINUE_AT     reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    BREAK           reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    BREAK_AT        reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    NOT             reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    SUSPEND         reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    LCHAVE          reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    $end            reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    COMMA           reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    RPAREN          reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    RCCT            reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    PV              reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    ELSE            reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    SETA            reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)
    CLASS           reduce using rule 264 (simpleIdentifier -> CROSSINLINE .)


state 8

    (265) simpleIdentifier -> IMPORT .

    LPAREN          reduce using rule 265 (simpleIdentifier -> IMPORT .)
    DOISP           reduce using rule 265 (simpleIdentifier -> IMPORT .)
    ATRIBUICAO      reduce using rule 265 (simpleIdentifier -> IMPORT .)
    INCREMENTO      reduce using rule 265 (simpleIdentifier -> IMPORT .)
    DECREMENTO      reduce using rule 265 (simpleIdentifier -> IMPORT .)
    MENOR           reduce using rule 265 (simpleIdentifier -> IMPORT .)
    LCCT            reduce using rule 265 (simpleIdentifier -> IMPORT .)
    COLONCOLON      reduce using rule 265 (simpleIdentifier -> IMPORT .)
    PONTO           reduce using rule 265 (simpleIdentifier -> IMPORT .)
    RCHAVE          reduce using rule 265 (simpleIdentifier -> IMPORT .)
    AS              reduce using rule 265 (simpleIdentifier -> IMPORT .)
    MAISIGUAL       reduce using rule 265 (simpleIdentifier -> IMPORT .)
    MENOSIGUAL      reduce using rule 265 (simpleIdentifier -> IMPORT .)
    MULTIGUAL       reduce using rule 265 (simpleIdentifier -> IMPORT .)
    DIVIGUAL        reduce using rule 265 (simpleIdentifier -> IMPORT .)
    MODIGUAL        reduce using rule 265 (simpleIdentifier -> IMPORT .)
    MULT            reduce using rule 265 (simpleIdentifier -> IMPORT .)
    DIVIDE          reduce using rule 265 (simpleIdentifier -> IMPORT .)
    MOD             reduce using rule 265 (simpleIdentifier -> IMPORT .)
    PLUS            reduce using rule 265 (simpleIdentifier -> IMPORT .)
    MINUS           reduce using rule 265 (simpleIdentifier -> IMPORT .)
    PONTOPONTO      reduce using rule 265 (simpleIdentifier -> IMPORT .)
    ID              reduce using rule 265 (simpleIdentifier -> IMPORT .)
    CROSSINLINE     reduce using rule 265 (simpleIdentifier -> IMPORT .)
    IMPORT          reduce using rule 265 (simpleIdentifier -> IMPORT .)
    INIT            reduce using rule 265 (simpleIdentifier -> IMPORT .)
    NOINLINE        reduce using rule 265 (simpleIdentifier -> IMPORT .)
    OUT             reduce using rule 265 (simpleIdentifier -> IMPORT .)
    VARARG          reduce using rule 265 (simpleIdentifier -> IMPORT .)
    WHERE           reduce using rule 265 (simpleIdentifier -> IMPORT .)
    OBJECT          reduce using rule 265 (simpleIdentifier -> IMPORT .)
    CONST           reduce using rule 265 (simpleIdentifier -> IMPORT .)
    CONSTRUCTOR     reduce using rule 265 (simpleIdentifier -> IMPORT .)
    EOF             reduce using rule 265 (simpleIdentifier -> IMPORT .)
    FALSE           reduce using rule 265 (simpleIdentifier -> IMPORT .)
    FUNCTION        reduce using rule 265 (simpleIdentifier -> IMPORT .)
    NULL            reduce using rule 265 (simpleIdentifier -> IMPORT .)
    NULLABLE        reduce using rule 265 (simpleIdentifier -> IMPORT .)
    NUMBER          reduce using rule 265 (simpleIdentifier -> IMPORT .)
    OPERATOR        reduce using rule 265 (simpleIdentifier -> IMPORT .)
    SMARTCAST       reduce using rule 265 (simpleIdentifier -> IMPORT .)
    THIS            reduce using rule 265 (simpleIdentifier -> IMPORT .)
    TRUE            reduce using rule 265 (simpleIdentifier -> IMPORT .)
    VAL             reduce using rule 265 (simpleIdentifier -> IMPORT .)
    VAR             reduce using rule 265 (simpleIdentifier -> IMPORT .)
    WHEN            reduce using rule 265 (simpleIdentifier -> IMPORT .)
    LONG            reduce using rule 265 (simpleIdentifier -> IMPORT .)
    ARRAY           reduce using rule 265 (simpleIdentifier -> IMPORT .)
    ELVIS           reduce using rule 265 (simpleIdentifier -> IMPORT .)
    IN              reduce using rule 265 (simpleIdentifier -> IMPORT .)
    NOT_IN          reduce using rule 265 (simpleIdentifier -> IMPORT .)
    IS              reduce using rule 265 (simpleIdentifier -> IMPORT .)
    NOT_IS          reduce using rule 265 (simpleIdentifier -> IMPORT .)
    MAIOR           reduce using rule 265 (simpleIdentifier -> IMPORT .)
    MENORIGUAL      reduce using rule 265 (simpleIdentifier -> IMPORT .)
    MAIORIGUAL      reduce using rule 265 (simpleIdentifier -> IMPORT .)
    DIFERENTE       reduce using rule 265 (simpleIdentifier -> IMPORT .)
    IDENTIDADE      reduce using rule 265 (simpleIdentifier -> IMPORT .)
    IGUALDADE       reduce using rule 265 (simpleIdentifier -> IMPORT .)
    SEMIDENTIDADE   reduce using rule 265 (simpleIdentifier -> IMPORT .)
    AND             reduce using rule 265 (simpleIdentifier -> IMPORT .)
    OR              reduce using rule 265 (simpleIdentifier -> IMPORT .)
    FUN             reduce using rule 265 (simpleIdentifier -> IMPORT .)
    FOR             reduce using rule 265 (simpleIdentifier -> IMPORT .)
    WHILE           reduce using rule 265 (simpleIdentifier -> IMPORT .)
    DO              reduce using rule 265 (simpleIdentifier -> IMPORT .)
    LITERAL_STRING  reduce using rule 265 (simpleIdentifier -> IMPORT .)
    IF              reduce using rule 265 (simpleIdentifier -> IMPORT .)
    RETURN          reduce using rule 265 (simpleIdentifier -> IMPORT .)
    RETURN_AT       reduce using rule 265 (simpleIdentifier -> IMPORT .)
    CONTINUE        reduce using rule 265 (simpleIdentifier -> IMPORT .)
    CONTINUE_AT     reduce using rule 265 (simpleIdentifier -> IMPORT .)
    BREAK           reduce using rule 265 (simpleIdentifier -> IMPORT .)
    BREAK_AT        reduce using rule 265 (simpleIdentifier -> IMPORT .)
    NOT             reduce using rule 265 (simpleIdentifier -> IMPORT .)
    SUSPEND         reduce using rule 265 (simpleIdentifier -> IMPORT .)
    LCHAVE          reduce using rule 265 (simpleIdentifier -> IMPORT .)
    $end            reduce using rule 265 (simpleIdentifier -> IMPORT .)
    COMMA           reduce using rule 265 (simpleIdentifier -> IMPORT .)
    RPAREN          reduce using rule 265 (simpleIdentifier -> IMPORT .)
    RCCT            reduce using rule 265 (simpleIdentifier -> IMPORT .)
    PV              reduce using rule 265 (simpleIdentifier -> IMPORT .)
    ELSE            reduce using rule 265 (simpleIdentifier -> IMPORT .)
    SETA            reduce using rule 265 (simpleIdentifier -> IMPORT .)
    CLASS           reduce using rule 265 (simpleIdentifier -> IMPORT .)


state 9

    (266) simpleIdentifier -> INIT .

    LPAREN          reduce using rule 266 (simpleIdentifier -> INIT .)
    DOISP           reduce using rule 266 (simpleIdentifier -> INIT .)
    ATRIBUICAO      reduce using rule 266 (simpleIdentifier -> INIT .)
    INCREMENTO      reduce using rule 266 (simpleIdentifier -> INIT .)
    DECREMENTO      reduce using rule 266 (simpleIdentifier -> INIT .)
    MENOR           reduce using rule 266 (simpleIdentifier -> INIT .)
    LCCT            reduce using rule 266 (simpleIdentifier -> INIT .)
    COLONCOLON      reduce using rule 266 (simpleIdentifier -> INIT .)
    PONTO           reduce using rule 266 (simpleIdentifier -> INIT .)
    RCHAVE          reduce using rule 266 (simpleIdentifier -> INIT .)
    AS              reduce using rule 266 (simpleIdentifier -> INIT .)
    MAISIGUAL       reduce using rule 266 (simpleIdentifier -> INIT .)
    MENOSIGUAL      reduce using rule 266 (simpleIdentifier -> INIT .)
    MULTIGUAL       reduce using rule 266 (simpleIdentifier -> INIT .)
    DIVIGUAL        reduce using rule 266 (simpleIdentifier -> INIT .)
    MODIGUAL        reduce using rule 266 (simpleIdentifier -> INIT .)
    MULT            reduce using rule 266 (simpleIdentifier -> INIT .)
    DIVIDE          reduce using rule 266 (simpleIdentifier -> INIT .)
    MOD             reduce using rule 266 (simpleIdentifier -> INIT .)
    PLUS            reduce using rule 266 (simpleIdentifier -> INIT .)
    MINUS           reduce using rule 266 (simpleIdentifier -> INIT .)
    PONTOPONTO      reduce using rule 266 (simpleIdentifier -> INIT .)
    ID              reduce using rule 266 (simpleIdentifier -> INIT .)
    CROSSINLINE     reduce using rule 266 (simpleIdentifier -> INIT .)
    IMPORT          reduce using rule 266 (simpleIdentifier -> INIT .)
    INIT            reduce using rule 266 (simpleIdentifier -> INIT .)
    NOINLINE        reduce using rule 266 (simpleIdentifier -> INIT .)
    OUT             reduce using rule 266 (simpleIdentifier -> INIT .)
    VARARG          reduce using rule 266 (simpleIdentifier -> INIT .)
    WHERE           reduce using rule 266 (simpleIdentifier -> INIT .)
    OBJECT          reduce using rule 266 (simpleIdentifier -> INIT .)
    CONST           reduce using rule 266 (simpleIdentifier -> INIT .)
    CONSTRUCTOR     reduce using rule 266 (simpleIdentifier -> INIT .)
    EOF             reduce using rule 266 (simpleIdentifier -> INIT .)
    FALSE           reduce using rule 266 (simpleIdentifier -> INIT .)
    FUNCTION        reduce using rule 266 (simpleIdentifier -> INIT .)
    NULL            reduce using rule 266 (simpleIdentifier -> INIT .)
    NULLABLE        reduce using rule 266 (simpleIdentifier -> INIT .)
    NUMBER          reduce using rule 266 (simpleIdentifier -> INIT .)
    OPERATOR        reduce using rule 266 (simpleIdentifier -> INIT .)
    SMARTCAST       reduce using rule 266 (simpleIdentifier -> INIT .)
    THIS            reduce using rule 266 (simpleIdentifier -> INIT .)
    TRUE            reduce using rule 266 (simpleIdentifier -> INIT .)
    VAL             reduce using rule 266 (simpleIdentifier -> INIT .)
    VAR             reduce using rule 266 (simpleIdentifier -> INIT .)
    WHEN            reduce using rule 266 (simpleIdentifier -> INIT .)
    LONG            reduce using rule 266 (simpleIdentifier -> INIT .)
    ARRAY           reduce using rule 266 (simpleIdentifier -> INIT .)
    ELVIS           reduce using rule 266 (simpleIdentifier -> INIT .)
    IN              reduce using rule 266 (simpleIdentifier -> INIT .)
    NOT_IN          reduce using rule 266 (simpleIdentifier -> INIT .)
    IS              reduce using rule 266 (simpleIdentifier -> INIT .)
    NOT_IS          reduce using rule 266 (simpleIdentifier -> INIT .)
    MAIOR           reduce using rule 266 (simpleIdentifier -> INIT .)
    MENORIGUAL      reduce using rule 266 (simpleIdentifier -> INIT .)
    MAIORIGUAL      reduce using rule 266 (simpleIdentifier -> INIT .)
    DIFERENTE       reduce using rule 266 (simpleIdentifier -> INIT .)
    IDENTIDADE      reduce using rule 266 (simpleIdentifier -> INIT .)
    IGUALDADE       reduce using rule 266 (simpleIdentifier -> INIT .)
    SEMIDENTIDADE   reduce using rule 266 (simpleIdentifier -> INIT .)
    AND             reduce using rule 266 (simpleIdentifier -> INIT .)
    OR              reduce using rule 266 (simpleIdentifier -> INIT .)
    FUN             reduce using rule 266 (simpleIdentifier -> INIT .)
    FOR             reduce using rule 266 (simpleIdentifier -> INIT .)
    WHILE           reduce using rule 266 (simpleIdentifier -> INIT .)
    DO              reduce using rule 266 (simpleIdentifier -> INIT .)
    LITERAL_STRING  reduce using rule 266 (simpleIdentifier -> INIT .)
    IF              reduce using rule 266 (simpleIdentifier -> INIT .)
    RETURN          reduce using rule 266 (simpleIdentifier -> INIT .)
    RETURN_AT       reduce using rule 266 (simpleIdentifier -> INIT .)
    CONTINUE        reduce using rule 266 (simpleIdentifier -> INIT .)
    CONTINUE_AT     reduce using rule 266 (simpleIdentifier -> INIT .)
    BREAK           reduce using rule 266 (simpleIdentifier -> INIT .)
    BREAK_AT        reduce using rule 266 (simpleIdentifier -> INIT .)
    NOT             reduce using rule 266 (simpleIdentifier -> INIT .)
    SUSPEND         reduce using rule 266 (simpleIdentifier -> INIT .)
    LCHAVE          reduce using rule 266 (simpleIdentifier -> INIT .)
    $end            reduce using rule 266 (simpleIdentifier -> INIT .)
    COMMA           reduce using rule 266 (simpleIdentifier -> INIT .)
    RPAREN          reduce using rule 266 (simpleIdentifier -> INIT .)
    RCCT            reduce using rule 266 (simpleIdentifier -> INIT .)
    PV              reduce using rule 266 (simpleIdentifier -> INIT .)
    ELSE            reduce using rule 266 (simpleIdentifier -> INIT .)
    SETA            reduce using rule 266 (simpleIdentifier -> INIT .)
    CLASS           reduce using rule 266 (simpleIdentifier -> INIT .)


state 10

    (267) simpleIdentifier -> NOINLINE .

    LPAREN          reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    DOISP           reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    ATRIBUICAO      reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    INCREMENTO      reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    DECREMENTO      reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    MENOR           reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    LCCT            reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    COLONCOLON      reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    PONTO           reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    RCHAVE          reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    AS              reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    MAISIGUAL       reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    MENOSIGUAL      reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    MULTIGUAL       reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    DIVIGUAL        reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    MODIGUAL        reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    MULT            reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    DIVIDE          reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    MOD             reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    PLUS            reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    MINUS           reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    PONTOPONTO      reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    ID              reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    CROSSINLINE     reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    IMPORT          reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    INIT            reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    NOINLINE        reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    OUT             reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    VARARG          reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    WHERE           reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    OBJECT          reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    CONST           reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    CONSTRUCTOR     reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    EOF             reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    FALSE           reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    FUNCTION        reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    NULL            reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    NULLABLE        reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    NUMBER          reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    OPERATOR        reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    SMARTCAST       reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    THIS            reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    TRUE            reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    VAL             reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    VAR             reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    WHEN            reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    LONG            reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    ARRAY           reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    ELVIS           reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    IN              reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    NOT_IN          reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    IS              reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    NOT_IS          reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    MAIOR           reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    MENORIGUAL      reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    MAIORIGUAL      reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    DIFERENTE       reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    IDENTIDADE      reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    IGUALDADE       reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    SEMIDENTIDADE   reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    AND             reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    OR              reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    FUN             reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    FOR             reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    WHILE           reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    DO              reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    LITERAL_STRING  reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    IF              reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    RETURN          reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    RETURN_AT       reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    CONTINUE        reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    CONTINUE_AT     reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    BREAK           reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    BREAK_AT        reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    NOT             reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    SUSPEND         reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    LCHAVE          reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    $end            reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    COMMA           reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    RPAREN          reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    RCCT            reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    PV              reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    ELSE            reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    SETA            reduce using rule 267 (simpleIdentifier -> NOINLINE .)
    CLASS           reduce using rule 267 (simpleIdentifier -> NOINLINE .)


state 11

    (268) simpleIdentifier -> OUT .

    LPAREN          reduce using rule 268 (simpleIdentifier -> OUT .)
    DOISP           reduce using rule 268 (simpleIdentifier -> OUT .)
    ATRIBUICAO      reduce using rule 268 (simpleIdentifier -> OUT .)
    INCREMENTO      reduce using rule 268 (simpleIdentifier -> OUT .)
    DECREMENTO      reduce using rule 268 (simpleIdentifier -> OUT .)
    MENOR           reduce using rule 268 (simpleIdentifier -> OUT .)
    LCCT            reduce using rule 268 (simpleIdentifier -> OUT .)
    COLONCOLON      reduce using rule 268 (simpleIdentifier -> OUT .)
    PONTO           reduce using rule 268 (simpleIdentifier -> OUT .)
    RCHAVE          reduce using rule 268 (simpleIdentifier -> OUT .)
    AS              reduce using rule 268 (simpleIdentifier -> OUT .)
    MAISIGUAL       reduce using rule 268 (simpleIdentifier -> OUT .)
    MENOSIGUAL      reduce using rule 268 (simpleIdentifier -> OUT .)
    MULTIGUAL       reduce using rule 268 (simpleIdentifier -> OUT .)
    DIVIGUAL        reduce using rule 268 (simpleIdentifier -> OUT .)
    MODIGUAL        reduce using rule 268 (simpleIdentifier -> OUT .)
    MULT            reduce using rule 268 (simpleIdentifier -> OUT .)
    DIVIDE          reduce using rule 268 (simpleIdentifier -> OUT .)
    MOD             reduce using rule 268 (simpleIdentifier -> OUT .)
    PLUS            reduce using rule 268 (simpleIdentifier -> OUT .)
    MINUS           reduce using rule 268 (simpleIdentifier -> OUT .)
    PONTOPONTO      reduce using rule 268 (simpleIdentifier -> OUT .)
    ID              reduce using rule 268 (simpleIdentifier -> OUT .)
    CROSSINLINE     reduce using rule 268 (simpleIdentifier -> OUT .)
    IMPORT          reduce using rule 268 (simpleIdentifier -> OUT .)
    INIT            reduce using rule 268 (simpleIdentifier -> OUT .)
    NOINLINE        reduce using rule 268 (simpleIdentifier -> OUT .)
    OUT             reduce using rule 268 (simpleIdentifier -> OUT .)
    VARARG          reduce using rule 268 (simpleIdentifier -> OUT .)
    WHERE           reduce using rule 268 (simpleIdentifier -> OUT .)
    OBJECT          reduce using rule 268 (simpleIdentifier -> OUT .)
    CONST           reduce using rule 268 (simpleIdentifier -> OUT .)
    CONSTRUCTOR     reduce using rule 268 (simpleIdentifier -> OUT .)
    EOF             reduce using rule 268 (simpleIdentifier -> OUT .)
    FALSE           reduce using rule 268 (simpleIdentifier -> OUT .)
    FUNCTION        reduce using rule 268 (simpleIdentifier -> OUT .)
    NULL            reduce using rule 268 (simpleIdentifier -> OUT .)
    NULLABLE        reduce using rule 268 (simpleIdentifier -> OUT .)
    NUMBER          reduce using rule 268 (simpleIdentifier -> OUT .)
    OPERATOR        reduce using rule 268 (simpleIdentifier -> OUT .)
    SMARTCAST       reduce using rule 268 (simpleIdentifier -> OUT .)
    THIS            reduce using rule 268 (simpleIdentifier -> OUT .)
    TRUE            reduce using rule 268 (simpleIdentifier -> OUT .)
    VAL             reduce using rule 268 (simpleIdentifier -> OUT .)
    VAR             reduce using rule 268 (simpleIdentifier -> OUT .)
    WHEN            reduce using rule 268 (simpleIdentifier -> OUT .)
    LONG            reduce using rule 268 (simpleIdentifier -> OUT .)
    ARRAY           reduce using rule 268 (simpleIdentifier -> OUT .)
    ELVIS           reduce using rule 268 (simpleIdentifier -> OUT .)
    IN              reduce using rule 268 (simpleIdentifier -> OUT .)
    NOT_IN          reduce using rule 268 (simpleIdentifier -> OUT .)
    IS              reduce using rule 268 (simpleIdentifier -> OUT .)
    NOT_IS          reduce using rule 268 (simpleIdentifier -> OUT .)
    MAIOR           reduce using rule 268 (simpleIdentifier -> OUT .)
    MENORIGUAL      reduce using rule 268 (simpleIdentifier -> OUT .)
    MAIORIGUAL      reduce using rule 268 (simpleIdentifier -> OUT .)
    DIFERENTE       reduce using rule 268 (simpleIdentifier -> OUT .)
    IDENTIDADE      reduce using rule 268 (simpleIdentifier -> OUT .)
    IGUALDADE       reduce using rule 268 (simpleIdentifier -> OUT .)
    SEMIDENTIDADE   reduce using rule 268 (simpleIdentifier -> OUT .)
    AND             reduce using rule 268 (simpleIdentifier -> OUT .)
    OR              reduce using rule 268 (simpleIdentifier -> OUT .)
    FUN             reduce using rule 268 (simpleIdentifier -> OUT .)
    FOR             reduce using rule 268 (simpleIdentifier -> OUT .)
    WHILE           reduce using rule 268 (simpleIdentifier -> OUT .)
    DO              reduce using rule 268 (simpleIdentifier -> OUT .)
    LITERAL_STRING  reduce using rule 268 (simpleIdentifier -> OUT .)
    IF              reduce using rule 268 (simpleIdentifier -> OUT .)
    RETURN          reduce using rule 268 (simpleIdentifier -> OUT .)
    RETURN_AT       reduce using rule 268 (simpleIdentifier -> OUT .)
    CONTINUE        reduce using rule 268 (simpleIdentifier -> OUT .)
    CONTINUE_AT     reduce using rule 268 (simpleIdentifier -> OUT .)
    BREAK           reduce using rule 268 (simpleIdentifier -> OUT .)
    BREAK_AT        reduce using rule 268 (simpleIdentifier -> OUT .)
    NOT             reduce using rule 268 (simpleIdentifier -> OUT .)
    SUSPEND         reduce using rule 268 (simpleIdentifier -> OUT .)
    LCHAVE          reduce using rule 268 (simpleIdentifier -> OUT .)
    $end            reduce using rule 268 (simpleIdentifier -> OUT .)
    COMMA           reduce using rule 268 (simpleIdentifier -> OUT .)
    RPAREN          reduce using rule 268 (simpleIdentifier -> OUT .)
    RCCT            reduce using rule 268 (simpleIdentifier -> OUT .)
    PV              reduce using rule 268 (simpleIdentifier -> OUT .)
    ELSE            reduce using rule 268 (simpleIdentifier -> OUT .)
    SETA            reduce using rule 268 (simpleIdentifier -> OUT .)
    CLASS           reduce using rule 268 (simpleIdentifier -> OUT .)


state 12

    (269) simpleIdentifier -> VARARG .

    LPAREN          reduce using rule 269 (simpleIdentifier -> VARARG .)
    DOISP           reduce using rule 269 (simpleIdentifier -> VARARG .)
    ATRIBUICAO      reduce using rule 269 (simpleIdentifier -> VARARG .)
    INCREMENTO      reduce using rule 269 (simpleIdentifier -> VARARG .)
    DECREMENTO      reduce using rule 269 (simpleIdentifier -> VARARG .)
    MENOR           reduce using rule 269 (simpleIdentifier -> VARARG .)
    LCCT            reduce using rule 269 (simpleIdentifier -> VARARG .)
    COLONCOLON      reduce using rule 269 (simpleIdentifier -> VARARG .)
    PONTO           reduce using rule 269 (simpleIdentifier -> VARARG .)
    RCHAVE          reduce using rule 269 (simpleIdentifier -> VARARG .)
    AS              reduce using rule 269 (simpleIdentifier -> VARARG .)
    MAISIGUAL       reduce using rule 269 (simpleIdentifier -> VARARG .)
    MENOSIGUAL      reduce using rule 269 (simpleIdentifier -> VARARG .)
    MULTIGUAL       reduce using rule 269 (simpleIdentifier -> VARARG .)
    DIVIGUAL        reduce using rule 269 (simpleIdentifier -> VARARG .)
    MODIGUAL        reduce using rule 269 (simpleIdentifier -> VARARG .)
    MULT            reduce using rule 269 (simpleIdentifier -> VARARG .)
    DIVIDE          reduce using rule 269 (simpleIdentifier -> VARARG .)
    MOD             reduce using rule 269 (simpleIdentifier -> VARARG .)
    PLUS            reduce using rule 269 (simpleIdentifier -> VARARG .)
    MINUS           reduce using rule 269 (simpleIdentifier -> VARARG .)
    PONTOPONTO      reduce using rule 269 (simpleIdentifier -> VARARG .)
    ID              reduce using rule 269 (simpleIdentifier -> VARARG .)
    CROSSINLINE     reduce using rule 269 (simpleIdentifier -> VARARG .)
    IMPORT          reduce using rule 269 (simpleIdentifier -> VARARG .)
    INIT            reduce using rule 269 (simpleIdentifier -> VARARG .)
    NOINLINE        reduce using rule 269 (simpleIdentifier -> VARARG .)
    OUT             reduce using rule 269 (simpleIdentifier -> VARARG .)
    VARARG          reduce using rule 269 (simpleIdentifier -> VARARG .)
    WHERE           reduce using rule 269 (simpleIdentifier -> VARARG .)
    OBJECT          reduce using rule 269 (simpleIdentifier -> VARARG .)
    CONST           reduce using rule 269 (simpleIdentifier -> VARARG .)
    CONSTRUCTOR     reduce using rule 269 (simpleIdentifier -> VARARG .)
    EOF             reduce using rule 269 (simpleIdentifier -> VARARG .)
    FALSE           reduce using rule 269 (simpleIdentifier -> VARARG .)
    FUNCTION        reduce using rule 269 (simpleIdentifier -> VARARG .)
    NULL            reduce using rule 269 (simpleIdentifier -> VARARG .)
    NULLABLE        reduce using rule 269 (simpleIdentifier -> VARARG .)
    NUMBER          reduce using rule 269 (simpleIdentifier -> VARARG .)
    OPERATOR        reduce using rule 269 (simpleIdentifier -> VARARG .)
    SMARTCAST       reduce using rule 269 (simpleIdentifier -> VARARG .)
    THIS            reduce using rule 269 (simpleIdentifier -> VARARG .)
    TRUE            reduce using rule 269 (simpleIdentifier -> VARARG .)
    VAL             reduce using rule 269 (simpleIdentifier -> VARARG .)
    VAR             reduce using rule 269 (simpleIdentifier -> VARARG .)
    WHEN            reduce using rule 269 (simpleIdentifier -> VARARG .)
    LONG            reduce using rule 269 (simpleIdentifier -> VARARG .)
    ARRAY           reduce using rule 269 (simpleIdentifier -> VARARG .)
    ELVIS           reduce using rule 269 (simpleIdentifier -> VARARG .)
    IN              reduce using rule 269 (simpleIdentifier -> VARARG .)
    NOT_IN          reduce using rule 269 (simpleIdentifier -> VARARG .)
    IS              reduce using rule 269 (simpleIdentifier -> VARARG .)
    NOT_IS          reduce using rule 269 (simpleIdentifier -> VARARG .)
    MAIOR           reduce using rule 269 (simpleIdentifier -> VARARG .)
    MENORIGUAL      reduce using rule 269 (simpleIdentifier -> VARARG .)
    MAIORIGUAL      reduce using rule 269 (simpleIdentifier -> VARARG .)
    DIFERENTE       reduce using rule 269 (simpleIdentifier -> VARARG .)
    IDENTIDADE      reduce using rule 269 (simpleIdentifier -> VARARG .)
    IGUALDADE       reduce using rule 269 (simpleIdentifier -> VARARG .)
    SEMIDENTIDADE   reduce using rule 269 (simpleIdentifier -> VARARG .)
    AND             reduce using rule 269 (simpleIdentifier -> VARARG .)
    OR              reduce using rule 269 (simpleIdentifier -> VARARG .)
    FUN             reduce using rule 269 (simpleIdentifier -> VARARG .)
    FOR             reduce using rule 269 (simpleIdentifier -> VARARG .)
    WHILE           reduce using rule 269 (simpleIdentifier -> VARARG .)
    DO              reduce using rule 269 (simpleIdentifier -> VARARG .)
    LITERAL_STRING  reduce using rule 269 (simpleIdentifier -> VARARG .)
    IF              reduce using rule 269 (simpleIdentifier -> VARARG .)
    RETURN          reduce using rule 269 (simpleIdentifier -> VARARG .)
    RETURN_AT       reduce using rule 269 (simpleIdentifier -> VARARG .)
    CONTINUE        reduce using rule 269 (simpleIdentifier -> VARARG .)
    CONTINUE_AT     reduce using rule 269 (simpleIdentifier -> VARARG .)
    BREAK           reduce using rule 269 (simpleIdentifier -> VARARG .)
    BREAK_AT        reduce using rule 269 (simpleIdentifier -> VARARG .)
    NOT             reduce using rule 269 (simpleIdentifier -> VARARG .)
    SUSPEND         reduce using rule 269 (simpleIdentifier -> VARARG .)
    LCHAVE          reduce using rule 269 (simpleIdentifier -> VARARG .)
    $end            reduce using rule 269 (simpleIdentifier -> VARARG .)
    COMMA           reduce using rule 269 (simpleIdentifier -> VARARG .)
    RPAREN          reduce using rule 269 (simpleIdentifier -> VARARG .)
    RCCT            reduce using rule 269 (simpleIdentifier -> VARARG .)
    PV              reduce using rule 269 (simpleIdentifier -> VARARG .)
    ELSE            reduce using rule 269 (simpleIdentifier -> VARARG .)
    SETA            reduce using rule 269 (simpleIdentifier -> VARARG .)
    CLASS           reduce using rule 269 (simpleIdentifier -> VARARG .)


state 13

    (270) simpleIdentifier -> WHERE .

    LPAREN          reduce using rule 270 (simpleIdentifier -> WHERE .)
    DOISP           reduce using rule 270 (simpleIdentifier -> WHERE .)
    ATRIBUICAO      reduce using rule 270 (simpleIdentifier -> WHERE .)
    INCREMENTO      reduce using rule 270 (simpleIdentifier -> WHERE .)
    DECREMENTO      reduce using rule 270 (simpleIdentifier -> WHERE .)
    MENOR           reduce using rule 270 (simpleIdentifier -> WHERE .)
    LCCT            reduce using rule 270 (simpleIdentifier -> WHERE .)
    COLONCOLON      reduce using rule 270 (simpleIdentifier -> WHERE .)
    PONTO           reduce using rule 270 (simpleIdentifier -> WHERE .)
    RCHAVE          reduce using rule 270 (simpleIdentifier -> WHERE .)
    AS              reduce using rule 270 (simpleIdentifier -> WHERE .)
    MAISIGUAL       reduce using rule 270 (simpleIdentifier -> WHERE .)
    MENOSIGUAL      reduce using rule 270 (simpleIdentifier -> WHERE .)
    MULTIGUAL       reduce using rule 270 (simpleIdentifier -> WHERE .)
    DIVIGUAL        reduce using rule 270 (simpleIdentifier -> WHERE .)
    MODIGUAL        reduce using rule 270 (simpleIdentifier -> WHERE .)
    MULT            reduce using rule 270 (simpleIdentifier -> WHERE .)
    DIVIDE          reduce using rule 270 (simpleIdentifier -> WHERE .)
    MOD             reduce using rule 270 (simpleIdentifier -> WHERE .)
    PLUS            reduce using rule 270 (simpleIdentifier -> WHERE .)
    MINUS           reduce using rule 270 (simpleIdentifier -> WHERE .)
    PONTOPONTO      reduce using rule 270 (simpleIdentifier -> WHERE .)
    ID              reduce using rule 270 (simpleIdentifier -> WHERE .)
    CROSSINLINE     reduce using rule 270 (simpleIdentifier -> WHERE .)
    IMPORT          reduce using rule 270 (simpleIdentifier -> WHERE .)
    INIT            reduce using rule 270 (simpleIdentifier -> WHERE .)
    NOINLINE        reduce using rule 270 (simpleIdentifier -> WHERE .)
    OUT             reduce using rule 270 (simpleIdentifier -> WHERE .)
    VARARG          reduce using rule 270 (simpleIdentifier -> WHERE .)
    WHERE           reduce using rule 270 (simpleIdentifier -> WHERE .)
    OBJECT          reduce using rule 270 (simpleIdentifier -> WHERE .)
    CONST           reduce using rule 270 (simpleIdentifier -> WHERE .)
    CONSTRUCTOR     reduce using rule 270 (simpleIdentifier -> WHERE .)
    EOF             reduce using rule 270 (simpleIdentifier -> WHERE .)
    FALSE           reduce using rule 270 (simpleIdentifier -> WHERE .)
    FUNCTION        reduce using rule 270 (simpleIdentifier -> WHERE .)
    NULL            reduce using rule 270 (simpleIdentifier -> WHERE .)
    NULLABLE        reduce using rule 270 (simpleIdentifier -> WHERE .)
    NUMBER          reduce using rule 270 (simpleIdentifier -> WHERE .)
    OPERATOR        reduce using rule 270 (simpleIdentifier -> WHERE .)
    SMARTCAST       reduce using rule 270 (simpleIdentifier -> WHERE .)
    THIS            reduce using rule 270 (simpleIdentifier -> WHERE .)
    TRUE            reduce using rule 270 (simpleIdentifier -> WHERE .)
    VAL             reduce using rule 270 (simpleIdentifier -> WHERE .)
    VAR             reduce using rule 270 (simpleIdentifier -> WHERE .)
    WHEN            reduce using rule 270 (simpleIdentifier -> WHERE .)
    LONG            reduce using rule 270 (simpleIdentifier -> WHERE .)
    ARRAY           reduce using rule 270 (simpleIdentifier -> WHERE .)
    ELVIS           reduce using rule 270 (simpleIdentifier -> WHERE .)
    IN              reduce using rule 270 (simpleIdentifier -> WHERE .)
    NOT_IN          reduce using rule 270 (simpleIdentifier -> WHERE .)
    IS              reduce using rule 270 (simpleIdentifier -> WHERE .)
    NOT_IS          reduce using rule 270 (simpleIdentifier -> WHERE .)
    MAIOR           reduce using rule 270 (simpleIdentifier -> WHERE .)
    MENORIGUAL      reduce using rule 270 (simpleIdentifier -> WHERE .)
    MAIORIGUAL      reduce using rule 270 (simpleIdentifier -> WHERE .)
    DIFERENTE       reduce using rule 270 (simpleIdentifier -> WHERE .)
    IDENTIDADE      reduce using rule 270 (simpleIdentifier -> WHERE .)
    IGUALDADE       reduce using rule 270 (simpleIdentifier -> WHERE .)
    SEMIDENTIDADE   reduce using rule 270 (simpleIdentifier -> WHERE .)
    AND             reduce using rule 270 (simpleIdentifier -> WHERE .)
    OR              reduce using rule 270 (simpleIdentifier -> WHERE .)
    FUN             reduce using rule 270 (simpleIdentifier -> WHERE .)
    FOR             reduce using rule 270 (simpleIdentifier -> WHERE .)
    WHILE           reduce using rule 270 (simpleIdentifier -> WHERE .)
    DO              reduce using rule 270 (simpleIdentifier -> WHERE .)
    LITERAL_STRING  reduce using rule 270 (simpleIdentifier -> WHERE .)
    IF              reduce using rule 270 (simpleIdentifier -> WHERE .)
    RETURN          reduce using rule 270 (simpleIdentifier -> WHERE .)
    RETURN_AT       reduce using rule 270 (simpleIdentifier -> WHERE .)
    CONTINUE        reduce using rule 270 (simpleIdentifier -> WHERE .)
    CONTINUE_AT     reduce using rule 270 (simpleIdentifier -> WHERE .)
    BREAK           reduce using rule 270 (simpleIdentifier -> WHERE .)
    BREAK_AT        reduce using rule 270 (simpleIdentifier -> WHERE .)
    NOT             reduce using rule 270 (simpleIdentifier -> WHERE .)
    SUSPEND         reduce using rule 270 (simpleIdentifier -> WHERE .)
    LCHAVE          reduce using rule 270 (simpleIdentifier -> WHERE .)
    $end            reduce using rule 270 (simpleIdentifier -> WHERE .)
    COMMA           reduce using rule 270 (simpleIdentifier -> WHERE .)
    RPAREN          reduce using rule 270 (simpleIdentifier -> WHERE .)
    RCCT            reduce using rule 270 (simpleIdentifier -> WHERE .)
    PV              reduce using rule 270 (simpleIdentifier -> WHERE .)
    ELSE            reduce using rule 270 (simpleIdentifier -> WHERE .)
    SETA            reduce using rule 270 (simpleIdentifier -> WHERE .)
    CLASS           reduce using rule 270 (simpleIdentifier -> WHERE .)


state 14

    (271) simpleIdentifier -> OBJECT .

    LPAREN          reduce using rule 271 (simpleIdentifier -> OBJECT .)
    DOISP           reduce using rule 271 (simpleIdentifier -> OBJECT .)
    ATRIBUICAO      reduce using rule 271 (simpleIdentifier -> OBJECT .)
    INCREMENTO      reduce using rule 271 (simpleIdentifier -> OBJECT .)
    DECREMENTO      reduce using rule 271 (simpleIdentifier -> OBJECT .)
    MENOR           reduce using rule 271 (simpleIdentifier -> OBJECT .)
    LCCT            reduce using rule 271 (simpleIdentifier -> OBJECT .)
    COLONCOLON      reduce using rule 271 (simpleIdentifier -> OBJECT .)
    PONTO           reduce using rule 271 (simpleIdentifier -> OBJECT .)
    RCHAVE          reduce using rule 271 (simpleIdentifier -> OBJECT .)
    AS              reduce using rule 271 (simpleIdentifier -> OBJECT .)
    MAISIGUAL       reduce using rule 271 (simpleIdentifier -> OBJECT .)
    MENOSIGUAL      reduce using rule 271 (simpleIdentifier -> OBJECT .)
    MULTIGUAL       reduce using rule 271 (simpleIdentifier -> OBJECT .)
    DIVIGUAL        reduce using rule 271 (simpleIdentifier -> OBJECT .)
    MODIGUAL        reduce using rule 271 (simpleIdentifier -> OBJECT .)
    MULT            reduce using rule 271 (simpleIdentifier -> OBJECT .)
    DIVIDE          reduce using rule 271 (simpleIdentifier -> OBJECT .)
    MOD             reduce using rule 271 (simpleIdentifier -> OBJECT .)
    PLUS            reduce using rule 271 (simpleIdentifier -> OBJECT .)
    MINUS           reduce using rule 271 (simpleIdentifier -> OBJECT .)
    PONTOPONTO      reduce using rule 271 (simpleIdentifier -> OBJECT .)
    ID              reduce using rule 271 (simpleIdentifier -> OBJECT .)
    CROSSINLINE     reduce using rule 271 (simpleIdentifier -> OBJECT .)
    IMPORT          reduce using rule 271 (simpleIdentifier -> OBJECT .)
    INIT            reduce using rule 271 (simpleIdentifier -> OBJECT .)
    NOINLINE        reduce using rule 271 (simpleIdentifier -> OBJECT .)
    OUT             reduce using rule 271 (simpleIdentifier -> OBJECT .)
    VARARG          reduce using rule 271 (simpleIdentifier -> OBJECT .)
    WHERE           reduce using rule 271 (simpleIdentifier -> OBJECT .)
    OBJECT          reduce using rule 271 (simpleIdentifier -> OBJECT .)
    CONST           reduce using rule 271 (simpleIdentifier -> OBJECT .)
    CONSTRUCTOR     reduce using rule 271 (simpleIdentifier -> OBJECT .)
    EOF             reduce using rule 271 (simpleIdentifier -> OBJECT .)
    FALSE           reduce using rule 271 (simpleIdentifier -> OBJECT .)
    FUNCTION        reduce using rule 271 (simpleIdentifier -> OBJECT .)
    NULL            reduce using rule 271 (simpleIdentifier -> OBJECT .)
    NULLABLE        reduce using rule 271 (simpleIdentifier -> OBJECT .)
    NUMBER          reduce using rule 271 (simpleIdentifier -> OBJECT .)
    OPERATOR        reduce using rule 271 (simpleIdentifier -> OBJECT .)
    SMARTCAST       reduce using rule 271 (simpleIdentifier -> OBJECT .)
    THIS            reduce using rule 271 (simpleIdentifier -> OBJECT .)
    TRUE            reduce using rule 271 (simpleIdentifier -> OBJECT .)
    VAL             reduce using rule 271 (simpleIdentifier -> OBJECT .)
    VAR             reduce using rule 271 (simpleIdentifier -> OBJECT .)
    WHEN            reduce using rule 271 (simpleIdentifier -> OBJECT .)
    LONG            reduce using rule 271 (simpleIdentifier -> OBJECT .)
    ARRAY           reduce using rule 271 (simpleIdentifier -> OBJECT .)
    ELVIS           reduce using rule 271 (simpleIdentifier -> OBJECT .)
    IN              reduce using rule 271 (simpleIdentifier -> OBJECT .)
    NOT_IN          reduce using rule 271 (simpleIdentifier -> OBJECT .)
    IS              reduce using rule 271 (simpleIdentifier -> OBJECT .)
    NOT_IS          reduce using rule 271 (simpleIdentifier -> OBJECT .)
    MAIOR           reduce using rule 271 (simpleIdentifier -> OBJECT .)
    MENORIGUAL      reduce using rule 271 (simpleIdentifier -> OBJECT .)
    MAIORIGUAL      reduce using rule 271 (simpleIdentifier -> OBJECT .)
    DIFERENTE       reduce using rule 271 (simpleIdentifier -> OBJECT .)
    IDENTIDADE      reduce using rule 271 (simpleIdentifier -> OBJECT .)
    IGUALDADE       reduce using rule 271 (simpleIdentifier -> OBJECT .)
    SEMIDENTIDADE   reduce using rule 271 (simpleIdentifier -> OBJECT .)
    AND             reduce using rule 271 (simpleIdentifier -> OBJECT .)
    OR              reduce using rule 271 (simpleIdentifier -> OBJECT .)
    FUN             reduce using rule 271 (simpleIdentifier -> OBJECT .)
    FOR             reduce using rule 271 (simpleIdentifier -> OBJECT .)
    WHILE           reduce using rule 271 (simpleIdentifier -> OBJECT .)
    DO              reduce using rule 271 (simpleIdentifier -> OBJECT .)
    LITERAL_STRING  reduce using rule 271 (simpleIdentifier -> OBJECT .)
    IF              reduce using rule 271 (simpleIdentifier -> OBJECT .)
    RETURN          reduce using rule 271 (simpleIdentifier -> OBJECT .)
    RETURN_AT       reduce using rule 271 (simpleIdentifier -> OBJECT .)
    CONTINUE        reduce using rule 271 (simpleIdentifier -> OBJECT .)
    CONTINUE_AT     reduce using rule 271 (simpleIdentifier -> OBJECT .)
    BREAK           reduce using rule 271 (simpleIdentifier -> OBJECT .)
    BREAK_AT        reduce using rule 271 (simpleIdentifier -> OBJECT .)
    NOT             reduce using rule 271 (simpleIdentifier -> OBJECT .)
    SUSPEND         reduce using rule 271 (simpleIdentifier -> OBJECT .)
    LCHAVE          reduce using rule 271 (simpleIdentifier -> OBJECT .)
    $end            reduce using rule 271 (simpleIdentifier -> OBJECT .)
    COMMA           reduce using rule 271 (simpleIdentifier -> OBJECT .)
    RPAREN          reduce using rule 271 (simpleIdentifier -> OBJECT .)
    RCCT            reduce using rule 271 (simpleIdentifier -> OBJECT .)
    PV              reduce using rule 271 (simpleIdentifier -> OBJECT .)
    ELSE            reduce using rule 271 (simpleIdentifier -> OBJECT .)
    SETA            reduce using rule 271 (simpleIdentifier -> OBJECT .)
    CLASS           reduce using rule 271 (simpleIdentifier -> OBJECT .)


state 15

    (272) simpleIdentifier -> CONST .

    LPAREN          reduce using rule 272 (simpleIdentifier -> CONST .)
    DOISP           reduce using rule 272 (simpleIdentifier -> CONST .)
    ATRIBUICAO      reduce using rule 272 (simpleIdentifier -> CONST .)
    INCREMENTO      reduce using rule 272 (simpleIdentifier -> CONST .)
    DECREMENTO      reduce using rule 272 (simpleIdentifier -> CONST .)
    MENOR           reduce using rule 272 (simpleIdentifier -> CONST .)
    LCCT            reduce using rule 272 (simpleIdentifier -> CONST .)
    COLONCOLON      reduce using rule 272 (simpleIdentifier -> CONST .)
    PONTO           reduce using rule 272 (simpleIdentifier -> CONST .)
    RCHAVE          reduce using rule 272 (simpleIdentifier -> CONST .)
    AS              reduce using rule 272 (simpleIdentifier -> CONST .)
    MAISIGUAL       reduce using rule 272 (simpleIdentifier -> CONST .)
    MENOSIGUAL      reduce using rule 272 (simpleIdentifier -> CONST .)
    MULTIGUAL       reduce using rule 272 (simpleIdentifier -> CONST .)
    DIVIGUAL        reduce using rule 272 (simpleIdentifier -> CONST .)
    MODIGUAL        reduce using rule 272 (simpleIdentifier -> CONST .)
    MULT            reduce using rule 272 (simpleIdentifier -> CONST .)
    DIVIDE          reduce using rule 272 (simpleIdentifier -> CONST .)
    MOD             reduce using rule 272 (simpleIdentifier -> CONST .)
    PLUS            reduce using rule 272 (simpleIdentifier -> CONST .)
    MINUS           reduce using rule 272 (simpleIdentifier -> CONST .)
    PONTOPONTO      reduce using rule 272 (simpleIdentifier -> CONST .)
    ID              reduce using rule 272 (simpleIdentifier -> CONST .)
    CROSSINLINE     reduce using rule 272 (simpleIdentifier -> CONST .)
    IMPORT          reduce using rule 272 (simpleIdentifier -> CONST .)
    INIT            reduce using rule 272 (simpleIdentifier -> CONST .)
    NOINLINE        reduce using rule 272 (simpleIdentifier -> CONST .)
    OUT             reduce using rule 272 (simpleIdentifier -> CONST .)
    VARARG          reduce using rule 272 (simpleIdentifier -> CONST .)
    WHERE           reduce using rule 272 (simpleIdentifier -> CONST .)
    OBJECT          reduce using rule 272 (simpleIdentifier -> CONST .)
    CONST           reduce using rule 272 (simpleIdentifier -> CONST .)
    CONSTRUCTOR     reduce using rule 272 (simpleIdentifier -> CONST .)
    EOF             reduce using rule 272 (simpleIdentifier -> CONST .)
    FALSE           reduce using rule 272 (simpleIdentifier -> CONST .)
    FUNCTION        reduce using rule 272 (simpleIdentifier -> CONST .)
    NULL            reduce using rule 272 (simpleIdentifier -> CONST .)
    NULLABLE        reduce using rule 272 (simpleIdentifier -> CONST .)
    NUMBER          reduce using rule 272 (simpleIdentifier -> CONST .)
    OPERATOR        reduce using rule 272 (simpleIdentifier -> CONST .)
    SMARTCAST       reduce using rule 272 (simpleIdentifier -> CONST .)
    THIS            reduce using rule 272 (simpleIdentifier -> CONST .)
    TRUE            reduce using rule 272 (simpleIdentifier -> CONST .)
    VAL             reduce using rule 272 (simpleIdentifier -> CONST .)
    VAR             reduce using rule 272 (simpleIdentifier -> CONST .)
    WHEN            reduce using rule 272 (simpleIdentifier -> CONST .)
    LONG            reduce using rule 272 (simpleIdentifier -> CONST .)
    ARRAY           reduce using rule 272 (simpleIdentifier -> CONST .)
    ELVIS           reduce using rule 272 (simpleIdentifier -> CONST .)
    IN              reduce using rule 272 (simpleIdentifier -> CONST .)
    NOT_IN          reduce using rule 272 (simpleIdentifier -> CONST .)
    IS              reduce using rule 272 (simpleIdentifier -> CONST .)
    NOT_IS          reduce using rule 272 (simpleIdentifier -> CONST .)
    MAIOR           reduce using rule 272 (simpleIdentifier -> CONST .)
    MENORIGUAL      reduce using rule 272 (simpleIdentifier -> CONST .)
    MAIORIGUAL      reduce using rule 272 (simpleIdentifier -> CONST .)
    DIFERENTE       reduce using rule 272 (simpleIdentifier -> CONST .)
    IDENTIDADE      reduce using rule 272 (simpleIdentifier -> CONST .)
    IGUALDADE       reduce using rule 272 (simpleIdentifier -> CONST .)
    SEMIDENTIDADE   reduce using rule 272 (simpleIdentifier -> CONST .)
    AND             reduce using rule 272 (simpleIdentifier -> CONST .)
    OR              reduce using rule 272 (simpleIdentifier -> CONST .)
    FUN             reduce using rule 272 (simpleIdentifier -> CONST .)
    FOR             reduce using rule 272 (simpleIdentifier -> CONST .)
    WHILE           reduce using rule 272 (simpleIdentifier -> CONST .)
    DO              reduce using rule 272 (simpleIdentifier -> CONST .)
    LITERAL_STRING  reduce using rule 272 (simpleIdentifier -> CONST .)
    IF              reduce using rule 272 (simpleIdentifier -> CONST .)
    RETURN          reduce using rule 272 (simpleIdentifier -> CONST .)
    RETURN_AT       reduce using rule 272 (simpleIdentifier -> CONST .)
    CONTINUE        reduce using rule 272 (simpleIdentifier -> CONST .)
    CONTINUE_AT     reduce using rule 272 (simpleIdentifier -> CONST .)
    BREAK           reduce using rule 272 (simpleIdentifier -> CONST .)
    BREAK_AT        reduce using rule 272 (simpleIdentifier -> CONST .)
    NOT             reduce using rule 272 (simpleIdentifier -> CONST .)
    SUSPEND         reduce using rule 272 (simpleIdentifier -> CONST .)
    LCHAVE          reduce using rule 272 (simpleIdentifier -> CONST .)
    $end            reduce using rule 272 (simpleIdentifier -> CONST .)
    COMMA           reduce using rule 272 (simpleIdentifier -> CONST .)
    RPAREN          reduce using rule 272 (simpleIdentifier -> CONST .)
    RCCT            reduce using rule 272 (simpleIdentifier -> CONST .)
    PV              reduce using rule 272 (simpleIdentifier -> CONST .)
    ELSE            reduce using rule 272 (simpleIdentifier -> CONST .)
    SETA            reduce using rule 272 (simpleIdentifier -> CONST .)
    CLASS           reduce using rule 272 (simpleIdentifier -> CONST .)


state 16

    (273) simpleIdentifier -> CONSTRUCTOR .

    LPAREN          reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    DOISP           reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    ATRIBUICAO      reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    INCREMENTO      reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    DECREMENTO      reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    MENOR           reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    LCCT            reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    COLONCOLON      reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    PONTO           reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    RCHAVE          reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    AS              reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    MAISIGUAL       reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    MENOSIGUAL      reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    MULTIGUAL       reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    DIVIGUAL        reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    MODIGUAL        reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    MULT            reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    DIVIDE          reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    MOD             reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    PLUS            reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    MINUS           reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    PONTOPONTO      reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    ID              reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    CROSSINLINE     reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    IMPORT          reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    INIT            reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    NOINLINE        reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    OUT             reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    VARARG          reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    WHERE           reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    OBJECT          reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    CONST           reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    CONSTRUCTOR     reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    EOF             reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    FALSE           reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    FUNCTION        reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    NULL            reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    NULLABLE        reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    NUMBER          reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    OPERATOR        reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    SMARTCAST       reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    THIS            reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    TRUE            reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    VAL             reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    VAR             reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    WHEN            reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    LONG            reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    ARRAY           reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    ELVIS           reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    IN              reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    NOT_IN          reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    IS              reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    NOT_IS          reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    MAIOR           reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    MENORIGUAL      reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    MAIORIGUAL      reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    DIFERENTE       reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    IDENTIDADE      reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    IGUALDADE       reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    SEMIDENTIDADE   reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    AND             reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    OR              reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    FUN             reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    FOR             reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    WHILE           reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    DO              reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    LITERAL_STRING  reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    IF              reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    RETURN          reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    RETURN_AT       reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    CONTINUE        reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    CONTINUE_AT     reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    BREAK           reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    BREAK_AT        reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    NOT             reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    SUSPEND         reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    LCHAVE          reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    $end            reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    COMMA           reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    RPAREN          reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    RCCT            reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    PV              reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    ELSE            reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    SETA            reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)
    CLASS           reduce using rule 273 (simpleIdentifier -> CONSTRUCTOR .)


state 17

    (274) simpleIdentifier -> EOF .

    LPAREN          reduce using rule 274 (simpleIdentifier -> EOF .)
    DOISP           reduce using rule 274 (simpleIdentifier -> EOF .)
    ATRIBUICAO      reduce using rule 274 (simpleIdentifier -> EOF .)
    INCREMENTO      reduce using rule 274 (simpleIdentifier -> EOF .)
    DECREMENTO      reduce using rule 274 (simpleIdentifier -> EOF .)
    MENOR           reduce using rule 274 (simpleIdentifier -> EOF .)
    LCCT            reduce using rule 274 (simpleIdentifier -> EOF .)
    COLONCOLON      reduce using rule 274 (simpleIdentifier -> EOF .)
    PONTO           reduce using rule 274 (simpleIdentifier -> EOF .)
    RCHAVE          reduce using rule 274 (simpleIdentifier -> EOF .)
    AS              reduce using rule 274 (simpleIdentifier -> EOF .)
    MAISIGUAL       reduce using rule 274 (simpleIdentifier -> EOF .)
    MENOSIGUAL      reduce using rule 274 (simpleIdentifier -> EOF .)
    MULTIGUAL       reduce using rule 274 (simpleIdentifier -> EOF .)
    DIVIGUAL        reduce using rule 274 (simpleIdentifier -> EOF .)
    MODIGUAL        reduce using rule 274 (simpleIdentifier -> EOF .)
    MULT            reduce using rule 274 (simpleIdentifier -> EOF .)
    DIVIDE          reduce using rule 274 (simpleIdentifier -> EOF .)
    MOD             reduce using rule 274 (simpleIdentifier -> EOF .)
    PLUS            reduce using rule 274 (simpleIdentifier -> EOF .)
    MINUS           reduce using rule 274 (simpleIdentifier -> EOF .)
    PONTOPONTO      reduce using rule 274 (simpleIdentifier -> EOF .)
    ID              reduce using rule 274 (simpleIdentifier -> EOF .)
    CROSSINLINE     reduce using rule 274 (simpleIdentifier -> EOF .)
    IMPORT          reduce using rule 274 (simpleIdentifier -> EOF .)
    INIT            reduce using rule 274 (simpleIdentifier -> EOF .)
    NOINLINE        reduce using rule 274 (simpleIdentifier -> EOF .)
    OUT             reduce using rule 274 (simpleIdentifier -> EOF .)
    VARARG          reduce using rule 274 (simpleIdentifier -> EOF .)
    WHERE           reduce using rule 274 (simpleIdentifier -> EOF .)
    OBJECT          reduce using rule 274 (simpleIdentifier -> EOF .)
    CONST           reduce using rule 274 (simpleIdentifier -> EOF .)
    CONSTRUCTOR     reduce using rule 274 (simpleIdentifier -> EOF .)
    EOF             reduce using rule 274 (simpleIdentifier -> EOF .)
    FALSE           reduce using rule 274 (simpleIdentifier -> EOF .)
    FUNCTION        reduce using rule 274 (simpleIdentifier -> EOF .)
    NULL            reduce using rule 274 (simpleIdentifier -> EOF .)
    NULLABLE        reduce using rule 274 (simpleIdentifier -> EOF .)
    NUMBER          reduce using rule 274 (simpleIdentifier -> EOF .)
    OPERATOR        reduce using rule 274 (simpleIdentifier -> EOF .)
    SMARTCAST       reduce using rule 274 (simpleIdentifier -> EOF .)
    THIS            reduce using rule 274 (simpleIdentifier -> EOF .)
    TRUE            reduce using rule 274 (simpleIdentifier -> EOF .)
    VAL             reduce using rule 274 (simpleIdentifier -> EOF .)
    VAR             reduce using rule 274 (simpleIdentifier -> EOF .)
    WHEN            reduce using rule 274 (simpleIdentifier -> EOF .)
    LONG            reduce using rule 274 (simpleIdentifier -> EOF .)
    ARRAY           reduce using rule 274 (simpleIdentifier -> EOF .)
    ELVIS           reduce using rule 274 (simpleIdentifier -> EOF .)
    IN              reduce using rule 274 (simpleIdentifier -> EOF .)
    NOT_IN          reduce using rule 274 (simpleIdentifier -> EOF .)
    IS              reduce using rule 274 (simpleIdentifier -> EOF .)
    NOT_IS          reduce using rule 274 (simpleIdentifier -> EOF .)
    MAIOR           reduce using rule 274 (simpleIdentifier -> EOF .)
    MENORIGUAL      reduce using rule 274 (simpleIdentifier -> EOF .)
    MAIORIGUAL      reduce using rule 274 (simpleIdentifier -> EOF .)
    DIFERENTE       reduce using rule 274 (simpleIdentifier -> EOF .)
    IDENTIDADE      reduce using rule 274 (simpleIdentifier -> EOF .)
    IGUALDADE       reduce using rule 274 (simpleIdentifier -> EOF .)
    SEMIDENTIDADE   reduce using rule 274 (simpleIdentifier -> EOF .)
    AND             reduce using rule 274 (simpleIdentifier -> EOF .)
    OR              reduce using rule 274 (simpleIdentifier -> EOF .)
    FUN             reduce using rule 274 (simpleIdentifier -> EOF .)
    FOR             reduce using rule 274 (simpleIdentifier -> EOF .)
    WHILE           reduce using rule 274 (simpleIdentifier -> EOF .)
    DO              reduce using rule 274 (simpleIdentifier -> EOF .)
    LITERAL_STRING  reduce using rule 274 (simpleIdentifier -> EOF .)
    IF              reduce using rule 274 (simpleIdentifier -> EOF .)
    RETURN          reduce using rule 274 (simpleIdentifier -> EOF .)
    RETURN_AT       reduce using rule 274 (simpleIdentifier -> EOF .)
    CONTINUE        reduce using rule 274 (simpleIdentifier -> EOF .)
    CONTINUE_AT     reduce using rule 274 (simpleIdentifier -> EOF .)
    BREAK           reduce using rule 274 (simpleIdentifier -> EOF .)
    BREAK_AT        reduce using rule 274 (simpleIdentifier -> EOF .)
    NOT             reduce using rule 274 (simpleIdentifier -> EOF .)
    SUSPEND         reduce using rule 274 (simpleIdentifier -> EOF .)
    LCHAVE          reduce using rule 274 (simpleIdentifier -> EOF .)
    $end            reduce using rule 274 (simpleIdentifier -> EOF .)
    COMMA           reduce using rule 274 (simpleIdentifier -> EOF .)
    RPAREN          reduce using rule 274 (simpleIdentifier -> EOF .)
    RCCT            reduce using rule 274 (simpleIdentifier -> EOF .)
    PV              reduce using rule 274 (simpleIdentifier -> EOF .)
    ELSE            reduce using rule 274 (simpleIdentifier -> EOF .)
    SETA            reduce using rule 274 (simpleIdentifier -> EOF .)
    CLASS           reduce using rule 274 (simpleIdentifier -> EOF .)


state 18

    (275) simpleIdentifier -> FALSE .

    LPAREN          reduce using rule 275 (simpleIdentifier -> FALSE .)
    DOISP           reduce using rule 275 (simpleIdentifier -> FALSE .)
    ATRIBUICAO      reduce using rule 275 (simpleIdentifier -> FALSE .)
    INCREMENTO      reduce using rule 275 (simpleIdentifier -> FALSE .)
    DECREMENTO      reduce using rule 275 (simpleIdentifier -> FALSE .)
    MENOR           reduce using rule 275 (simpleIdentifier -> FALSE .)
    LCCT            reduce using rule 275 (simpleIdentifier -> FALSE .)
    COLONCOLON      reduce using rule 275 (simpleIdentifier -> FALSE .)
    PONTO           reduce using rule 275 (simpleIdentifier -> FALSE .)
    RCHAVE          reduce using rule 275 (simpleIdentifier -> FALSE .)
    AS              reduce using rule 275 (simpleIdentifier -> FALSE .)
    MAISIGUAL       reduce using rule 275 (simpleIdentifier -> FALSE .)
    MENOSIGUAL      reduce using rule 275 (simpleIdentifier -> FALSE .)
    MULTIGUAL       reduce using rule 275 (simpleIdentifier -> FALSE .)
    DIVIGUAL        reduce using rule 275 (simpleIdentifier -> FALSE .)
    MODIGUAL        reduce using rule 275 (simpleIdentifier -> FALSE .)
    MULT            reduce using rule 275 (simpleIdentifier -> FALSE .)
    DIVIDE          reduce using rule 275 (simpleIdentifier -> FALSE .)
    MOD             reduce using rule 275 (simpleIdentifier -> FALSE .)
    PLUS            reduce using rule 275 (simpleIdentifier -> FALSE .)
    MINUS           reduce using rule 275 (simpleIdentifier -> FALSE .)
    PONTOPONTO      reduce using rule 275 (simpleIdentifier -> FALSE .)
    ID              reduce using rule 275 (simpleIdentifier -> FALSE .)
    CROSSINLINE     reduce using rule 275 (simpleIdentifier -> FALSE .)
    IMPORT          reduce using rule 275 (simpleIdentifier -> FALSE .)
    INIT            reduce using rule 275 (simpleIdentifier -> FALSE .)
    NOINLINE        reduce using rule 275 (simpleIdentifier -> FALSE .)
    OUT             reduce using rule 275 (simpleIdentifier -> FALSE .)
    VARARG          reduce using rule 275 (simpleIdentifier -> FALSE .)
    WHERE           reduce using rule 275 (simpleIdentifier -> FALSE .)
    OBJECT          reduce using rule 275 (simpleIdentifier -> FALSE .)
    CONST           reduce using rule 275 (simpleIdentifier -> FALSE .)
    CONSTRUCTOR     reduce using rule 275 (simpleIdentifier -> FALSE .)
    EOF             reduce using rule 275 (simpleIdentifier -> FALSE .)
    FALSE           reduce using rule 275 (simpleIdentifier -> FALSE .)
    FUNCTION        reduce using rule 275 (simpleIdentifier -> FALSE .)
    NULL            reduce using rule 275 (simpleIdentifier -> FALSE .)
    NULLABLE        reduce using rule 275 (simpleIdentifier -> FALSE .)
    NUMBER          reduce using rule 275 (simpleIdentifier -> FALSE .)
    OPERATOR        reduce using rule 275 (simpleIdentifier -> FALSE .)
    SMARTCAST       reduce using rule 275 (simpleIdentifier -> FALSE .)
    THIS            reduce using rule 275 (simpleIdentifier -> FALSE .)
    TRUE            reduce using rule 275 (simpleIdentifier -> FALSE .)
    VAL             reduce using rule 275 (simpleIdentifier -> FALSE .)
    VAR             reduce using rule 275 (simpleIdentifier -> FALSE .)
    WHEN            reduce using rule 275 (simpleIdentifier -> FALSE .)
    LONG            reduce using rule 275 (simpleIdentifier -> FALSE .)
    ARRAY           reduce using rule 275 (simpleIdentifier -> FALSE .)
    ELVIS           reduce using rule 275 (simpleIdentifier -> FALSE .)
    IN              reduce using rule 275 (simpleIdentifier -> FALSE .)
    NOT_IN          reduce using rule 275 (simpleIdentifier -> FALSE .)
    IS              reduce using rule 275 (simpleIdentifier -> FALSE .)
    NOT_IS          reduce using rule 275 (simpleIdentifier -> FALSE .)
    MAIOR           reduce using rule 275 (simpleIdentifier -> FALSE .)
    MENORIGUAL      reduce using rule 275 (simpleIdentifier -> FALSE .)
    MAIORIGUAL      reduce using rule 275 (simpleIdentifier -> FALSE .)
    DIFERENTE       reduce using rule 275 (simpleIdentifier -> FALSE .)
    IDENTIDADE      reduce using rule 275 (simpleIdentifier -> FALSE .)
    IGUALDADE       reduce using rule 275 (simpleIdentifier -> FALSE .)
    SEMIDENTIDADE   reduce using rule 275 (simpleIdentifier -> FALSE .)
    AND             reduce using rule 275 (simpleIdentifier -> FALSE .)
    OR              reduce using rule 275 (simpleIdentifier -> FALSE .)
    FUN             reduce using rule 275 (simpleIdentifier -> FALSE .)
    FOR             reduce using rule 275 (simpleIdentifier -> FALSE .)
    WHILE           reduce using rule 275 (simpleIdentifier -> FALSE .)
    DO              reduce using rule 275 (simpleIdentifier -> FALSE .)
    LITERAL_STRING  reduce using rule 275 (simpleIdentifier -> FALSE .)
    IF              reduce using rule 275 (simpleIdentifier -> FALSE .)
    RETURN          reduce using rule 275 (simpleIdentifier -> FALSE .)
    RETURN_AT       reduce using rule 275 (simpleIdentifier -> FALSE .)
    CONTINUE        reduce using rule 275 (simpleIdentifier -> FALSE .)
    CONTINUE_AT     reduce using rule 275 (simpleIdentifier -> FALSE .)
    BREAK           reduce using rule 275 (simpleIdentifier -> FALSE .)
    BREAK_AT        reduce using rule 275 (simpleIdentifier -> FALSE .)
    NOT             reduce using rule 275 (simpleIdentifier -> FALSE .)
    SUSPEND         reduce using rule 275 (simpleIdentifier -> FALSE .)
    LCHAVE          reduce using rule 275 (simpleIdentifier -> FALSE .)
    $end            reduce using rule 275 (simpleIdentifier -> FALSE .)
    COMMA           reduce using rule 275 (simpleIdentifier -> FALSE .)
    RPAREN          reduce using rule 275 (simpleIdentifier -> FALSE .)
    RCCT            reduce using rule 275 (simpleIdentifier -> FALSE .)
    PV              reduce using rule 275 (simpleIdentifier -> FALSE .)
    ELSE            reduce using rule 275 (simpleIdentifier -> FALSE .)
    SETA            reduce using rule 275 (simpleIdentifier -> FALSE .)
    CLASS           reduce using rule 275 (simpleIdentifier -> FALSE .)


state 19

    (276) simpleIdentifier -> FUNCTION .

    LPAREN          reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    DOISP           reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    ATRIBUICAO      reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    INCREMENTO      reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    DECREMENTO      reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    MENOR           reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    LCCT            reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    COLONCOLON      reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    PONTO           reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    RCHAVE          reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    AS              reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    MAISIGUAL       reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    MENOSIGUAL      reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    MULTIGUAL       reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    DIVIGUAL        reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    MODIGUAL        reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    MULT            reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    DIVIDE          reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    MOD             reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    PLUS            reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    MINUS           reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    PONTOPONTO      reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    ID              reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    CROSSINLINE     reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    IMPORT          reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    INIT            reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    NOINLINE        reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    OUT             reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    VARARG          reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    WHERE           reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    OBJECT          reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    CONST           reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    CONSTRUCTOR     reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    EOF             reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    FALSE           reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    FUNCTION        reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    NULL            reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    NULLABLE        reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    NUMBER          reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    OPERATOR        reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    SMARTCAST       reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    THIS            reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    TRUE            reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    VAL             reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    VAR             reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    WHEN            reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    LONG            reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    ARRAY           reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    ELVIS           reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    IN              reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    NOT_IN          reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    IS              reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    NOT_IS          reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    MAIOR           reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    MENORIGUAL      reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    MAIORIGUAL      reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    DIFERENTE       reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    IDENTIDADE      reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    IGUALDADE       reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    SEMIDENTIDADE   reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    AND             reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    OR              reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    FUN             reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    FOR             reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    WHILE           reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    DO              reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    LITERAL_STRING  reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    IF              reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    RETURN          reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    RETURN_AT       reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    CONTINUE        reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    CONTINUE_AT     reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    BREAK           reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    BREAK_AT        reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    NOT             reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    SUSPEND         reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    LCHAVE          reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    $end            reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    COMMA           reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    RPAREN          reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    RCCT            reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    PV              reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    ELSE            reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    SETA            reduce using rule 276 (simpleIdentifier -> FUNCTION .)
    CLASS           reduce using rule 276 (simpleIdentifier -> FUNCTION .)


state 20

    (277) simpleIdentifier -> NULL .

    LPAREN          reduce using rule 277 (simpleIdentifier -> NULL .)
    DOISP           reduce using rule 277 (simpleIdentifier -> NULL .)
    ATRIBUICAO      reduce using rule 277 (simpleIdentifier -> NULL .)
    INCREMENTO      reduce using rule 277 (simpleIdentifier -> NULL .)
    DECREMENTO      reduce using rule 277 (simpleIdentifier -> NULL .)
    MENOR           reduce using rule 277 (simpleIdentifier -> NULL .)
    LCCT            reduce using rule 277 (simpleIdentifier -> NULL .)
    COLONCOLON      reduce using rule 277 (simpleIdentifier -> NULL .)
    PONTO           reduce using rule 277 (simpleIdentifier -> NULL .)
    RCHAVE          reduce using rule 277 (simpleIdentifier -> NULL .)
    AS              reduce using rule 277 (simpleIdentifier -> NULL .)
    MAISIGUAL       reduce using rule 277 (simpleIdentifier -> NULL .)
    MENOSIGUAL      reduce using rule 277 (simpleIdentifier -> NULL .)
    MULTIGUAL       reduce using rule 277 (simpleIdentifier -> NULL .)
    DIVIGUAL        reduce using rule 277 (simpleIdentifier -> NULL .)
    MODIGUAL        reduce using rule 277 (simpleIdentifier -> NULL .)
    MULT            reduce using rule 277 (simpleIdentifier -> NULL .)
    DIVIDE          reduce using rule 277 (simpleIdentifier -> NULL .)
    MOD             reduce using rule 277 (simpleIdentifier -> NULL .)
    PLUS            reduce using rule 277 (simpleIdentifier -> NULL .)
    MINUS           reduce using rule 277 (simpleIdentifier -> NULL .)
    PONTOPONTO      reduce using rule 277 (simpleIdentifier -> NULL .)
    ID              reduce using rule 277 (simpleIdentifier -> NULL .)
    CROSSINLINE     reduce using rule 277 (simpleIdentifier -> NULL .)
    IMPORT          reduce using rule 277 (simpleIdentifier -> NULL .)
    INIT            reduce using rule 277 (simpleIdentifier -> NULL .)
    NOINLINE        reduce using rule 277 (simpleIdentifier -> NULL .)
    OUT             reduce using rule 277 (simpleIdentifier -> NULL .)
    VARARG          reduce using rule 277 (simpleIdentifier -> NULL .)
    WHERE           reduce using rule 277 (simpleIdentifier -> NULL .)
    OBJECT          reduce using rule 277 (simpleIdentifier -> NULL .)
    CONST           reduce using rule 277 (simpleIdentifier -> NULL .)
    CONSTRUCTOR     reduce using rule 277 (simpleIdentifier -> NULL .)
    EOF             reduce using rule 277 (simpleIdentifier -> NULL .)
    FALSE           reduce using rule 277 (simpleIdentifier -> NULL .)
    FUNCTION        reduce using rule 277 (simpleIdentifier -> NULL .)
    NULL            reduce using rule 277 (simpleIdentifier -> NULL .)
    NULLABLE        reduce using rule 277 (simpleIdentifier -> NULL .)
    NUMBER          reduce using rule 277 (simpleIdentifier -> NULL .)
    OPERATOR        reduce using rule 277 (simpleIdentifier -> NULL .)
    SMARTCAST       reduce using rule 277 (simpleIdentifier -> NULL .)
    THIS            reduce using rule 277 (simpleIdentifier -> NULL .)
    TRUE            reduce using rule 277 (simpleIdentifier -> NULL .)
    VAL             reduce using rule 277 (simpleIdentifier -> NULL .)
    VAR             reduce using rule 277 (simpleIdentifier -> NULL .)
    WHEN            reduce using rule 277 (simpleIdentifier -> NULL .)
    LONG            reduce using rule 277 (simpleIdentifier -> NULL .)
    ARRAY           reduce using rule 277 (simpleIdentifier -> NULL .)
    ELVIS           reduce using rule 277 (simpleIdentifier -> NULL .)
    IN              reduce using rule 277 (simpleIdentifier -> NULL .)
    NOT_IN          reduce using rule 277 (simpleIdentifier -> NULL .)
    IS              reduce using rule 277 (simpleIdentifier -> NULL .)
    NOT_IS          reduce using rule 277 (simpleIdentifier -> NULL .)
    MAIOR           reduce using rule 277 (simpleIdentifier -> NULL .)
    MENORIGUAL      reduce using rule 277 (simpleIdentifier -> NULL .)
    MAIORIGUAL      reduce using rule 277 (simpleIdentifier -> NULL .)
    DIFERENTE       reduce using rule 277 (simpleIdentifier -> NULL .)
    IDENTIDADE      reduce using rule 277 (simpleIdentifier -> NULL .)
    IGUALDADE       reduce using rule 277 (simpleIdentifier -> NULL .)
    SEMIDENTIDADE   reduce using rule 277 (simpleIdentifier -> NULL .)
    AND             reduce using rule 277 (simpleIdentifier -> NULL .)
    OR              reduce using rule 277 (simpleIdentifier -> NULL .)
    FUN             reduce using rule 277 (simpleIdentifier -> NULL .)
    FOR             reduce using rule 277 (simpleIdentifier -> NULL .)
    WHILE           reduce using rule 277 (simpleIdentifier -> NULL .)
    DO              reduce using rule 277 (simpleIdentifier -> NULL .)
    LITERAL_STRING  reduce using rule 277 (simpleIdentifier -> NULL .)
    IF              reduce using rule 277 (simpleIdentifier -> NULL .)
    RETURN          reduce using rule 277 (simpleIdentifier -> NULL .)
    RETURN_AT       reduce using rule 277 (simpleIdentifier -> NULL .)
    CONTINUE        reduce using rule 277 (simpleIdentifier -> NULL .)
    CONTINUE_AT     reduce using rule 277 (simpleIdentifier -> NULL .)
    BREAK           reduce using rule 277 (simpleIdentifier -> NULL .)
    BREAK_AT        reduce using rule 277 (simpleIdentifier -> NULL .)
    NOT             reduce using rule 277 (simpleIdentifier -> NULL .)
    SUSPEND         reduce using rule 277 (simpleIdentifier -> NULL .)
    LCHAVE          reduce using rule 277 (simpleIdentifier -> NULL .)
    $end            reduce using rule 277 (simpleIdentifier -> NULL .)
    COMMA           reduce using rule 277 (simpleIdentifier -> NULL .)
    RPAREN          reduce using rule 277 (simpleIdentifier -> NULL .)
    RCCT            reduce using rule 277 (simpleIdentifier -> NULL .)
    PV              reduce using rule 277 (simpleIdentifier -> NULL .)
    ELSE            reduce using rule 277 (simpleIdentifier -> NULL .)
    SETA            reduce using rule 277 (simpleIdentifier -> NULL .)
    CLASS           reduce using rule 277 (simpleIdentifier -> NULL .)


state 21

    (278) simpleIdentifier -> NULLABLE .

    LPAREN          reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    DOISP           reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    ATRIBUICAO      reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    INCREMENTO      reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    DECREMENTO      reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    MENOR           reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    LCCT            reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    COLONCOLON      reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    PONTO           reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    RCHAVE          reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    AS              reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    MAISIGUAL       reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    MENOSIGUAL      reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    MULTIGUAL       reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    DIVIGUAL        reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    MODIGUAL        reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    MULT            reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    DIVIDE          reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    MOD             reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    PLUS            reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    MINUS           reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    PONTOPONTO      reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    ID              reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    CROSSINLINE     reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    IMPORT          reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    INIT            reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    NOINLINE        reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    OUT             reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    VARARG          reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    WHERE           reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    OBJECT          reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    CONST           reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    CONSTRUCTOR     reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    EOF             reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    FALSE           reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    FUNCTION        reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    NULL            reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    NULLABLE        reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    NUMBER          reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    OPERATOR        reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    SMARTCAST       reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    THIS            reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    TRUE            reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    VAL             reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    VAR             reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    WHEN            reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    LONG            reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    ARRAY           reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    ELVIS           reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    IN              reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    NOT_IN          reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    IS              reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    NOT_IS          reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    MAIOR           reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    MENORIGUAL      reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    MAIORIGUAL      reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    DIFERENTE       reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    IDENTIDADE      reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    IGUALDADE       reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    SEMIDENTIDADE   reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    AND             reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    OR              reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    FUN             reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    FOR             reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    WHILE           reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    DO              reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    LITERAL_STRING  reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    IF              reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    RETURN          reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    RETURN_AT       reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    CONTINUE        reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    CONTINUE_AT     reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    BREAK           reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    BREAK_AT        reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    NOT             reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    SUSPEND         reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    LCHAVE          reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    $end            reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    COMMA           reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    RPAREN          reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    RCCT            reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    PV              reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    ELSE            reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    SETA            reduce using rule 278 (simpleIdentifier -> NULLABLE .)
    CLASS           reduce using rule 278 (simpleIdentifier -> NULLABLE .)


state 22

    (279) simpleIdentifier -> NUMBER .

    LPAREN          reduce using rule 279 (simpleIdentifier -> NUMBER .)
    DOISP           reduce using rule 279 (simpleIdentifier -> NUMBER .)
    ATRIBUICAO      reduce using rule 279 (simpleIdentifier -> NUMBER .)
    INCREMENTO      reduce using rule 279 (simpleIdentifier -> NUMBER .)
    DECREMENTO      reduce using rule 279 (simpleIdentifier -> NUMBER .)
    MENOR           reduce using rule 279 (simpleIdentifier -> NUMBER .)
    LCCT            reduce using rule 279 (simpleIdentifier -> NUMBER .)
    COLONCOLON      reduce using rule 279 (simpleIdentifier -> NUMBER .)
    PONTO           reduce using rule 279 (simpleIdentifier -> NUMBER .)
    RCHAVE          reduce using rule 279 (simpleIdentifier -> NUMBER .)
    AS              reduce using rule 279 (simpleIdentifier -> NUMBER .)
    MAISIGUAL       reduce using rule 279 (simpleIdentifier -> NUMBER .)
    MENOSIGUAL      reduce using rule 279 (simpleIdentifier -> NUMBER .)
    MULTIGUAL       reduce using rule 279 (simpleIdentifier -> NUMBER .)
    DIVIGUAL        reduce using rule 279 (simpleIdentifier -> NUMBER .)
    MODIGUAL        reduce using rule 279 (simpleIdentifier -> NUMBER .)
    MULT            reduce using rule 279 (simpleIdentifier -> NUMBER .)
    DIVIDE          reduce using rule 279 (simpleIdentifier -> NUMBER .)
    MOD             reduce using rule 279 (simpleIdentifier -> NUMBER .)
    PLUS            reduce using rule 279 (simpleIdentifier -> NUMBER .)
    MINUS           reduce using rule 279 (simpleIdentifier -> NUMBER .)
    PONTOPONTO      reduce using rule 279 (simpleIdentifier -> NUMBER .)
    ID              reduce using rule 279 (simpleIdentifier -> NUMBER .)
    CROSSINLINE     reduce using rule 279 (simpleIdentifier -> NUMBER .)
    IMPORT          reduce using rule 279 (simpleIdentifier -> NUMBER .)
    INIT            reduce using rule 279 (simpleIdentifier -> NUMBER .)
    NOINLINE        reduce using rule 279 (simpleIdentifier -> NUMBER .)
    OUT             reduce using rule 279 (simpleIdentifier -> NUMBER .)
    VARARG          reduce using rule 279 (simpleIdentifier -> NUMBER .)
    WHERE           reduce using rule 279 (simpleIdentifier -> NUMBER .)
    OBJECT          reduce using rule 279 (simpleIdentifier -> NUMBER .)
    CONST           reduce using rule 279 (simpleIdentifier -> NUMBER .)
    CONSTRUCTOR     reduce using rule 279 (simpleIdentifier -> NUMBER .)
    EOF             reduce using rule 279 (simpleIdentifier -> NUMBER .)
    FALSE           reduce using rule 279 (simpleIdentifier -> NUMBER .)
    FUNCTION        reduce using rule 279 (simpleIdentifier -> NUMBER .)
    NULL            reduce using rule 279 (simpleIdentifier -> NUMBER .)
    NULLABLE        reduce using rule 279 (simpleIdentifier -> NUMBER .)
    NUMBER          reduce using rule 279 (simpleIdentifier -> NUMBER .)
    OPERATOR        reduce using rule 279 (simpleIdentifier -> NUMBER .)
    SMARTCAST       reduce using rule 279 (simpleIdentifier -> NUMBER .)
    THIS            reduce using rule 279 (simpleIdentifier -> NUMBER .)
    TRUE            reduce using rule 279 (simpleIdentifier -> NUMBER .)
    VAL             reduce using rule 279 (simpleIdentifier -> NUMBER .)
    VAR             reduce using rule 279 (simpleIdentifier -> NUMBER .)
    WHEN            reduce using rule 279 (simpleIdentifier -> NUMBER .)
    LONG            reduce using rule 279 (simpleIdentifier -> NUMBER .)
    ARRAY           reduce using rule 279 (simpleIdentifier -> NUMBER .)
    ELVIS           reduce using rule 279 (simpleIdentifier -> NUMBER .)
    IN              reduce using rule 279 (simpleIdentifier -> NUMBER .)
    NOT_IN          reduce using rule 279 (simpleIdentifier -> NUMBER .)
    IS              reduce using rule 279 (simpleIdentifier -> NUMBER .)
    NOT_IS          reduce using rule 279 (simpleIdentifier -> NUMBER .)
    MAIOR           reduce using rule 279 (simpleIdentifier -> NUMBER .)
    MENORIGUAL      reduce using rule 279 (simpleIdentifier -> NUMBER .)
    MAIORIGUAL      reduce using rule 279 (simpleIdentifier -> NUMBER .)
    DIFERENTE       reduce using rule 279 (simpleIdentifier -> NUMBER .)
    IDENTIDADE      reduce using rule 279 (simpleIdentifier -> NUMBER .)
    IGUALDADE       reduce using rule 279 (simpleIdentifier -> NUMBER .)
    SEMIDENTIDADE   reduce using rule 279 (simpleIdentifier -> NUMBER .)
    AND             reduce using rule 279 (simpleIdentifier -> NUMBER .)
    OR              reduce using rule 279 (simpleIdentifier -> NUMBER .)
    FUN             reduce using rule 279 (simpleIdentifier -> NUMBER .)
    FOR             reduce using rule 279 (simpleIdentifier -> NUMBER .)
    WHILE           reduce using rule 279 (simpleIdentifier -> NUMBER .)
    DO              reduce using rule 279 (simpleIdentifier -> NUMBER .)
    LITERAL_STRING  reduce using rule 279 (simpleIdentifier -> NUMBER .)
    IF              reduce using rule 279 (simpleIdentifier -> NUMBER .)
    RETURN          reduce using rule 279 (simpleIdentifier -> NUMBER .)
    RETURN_AT       reduce using rule 279 (simpleIdentifier -> NUMBER .)
    CONTINUE        reduce using rule 279 (simpleIdentifier -> NUMBER .)
    CONTINUE_AT     reduce using rule 279 (simpleIdentifier -> NUMBER .)
    BREAK           reduce using rule 279 (simpleIdentifier -> NUMBER .)
    BREAK_AT        reduce using rule 279 (simpleIdentifier -> NUMBER .)
    NOT             reduce using rule 279 (simpleIdentifier -> NUMBER .)
    SUSPEND         reduce using rule 279 (simpleIdentifier -> NUMBER .)
    LCHAVE          reduce using rule 279 (simpleIdentifier -> NUMBER .)
    $end            reduce using rule 279 (simpleIdentifier -> NUMBER .)
    COMMA           reduce using rule 279 (simpleIdentifier -> NUMBER .)
    RPAREN          reduce using rule 279 (simpleIdentifier -> NUMBER .)
    RCCT            reduce using rule 279 (simpleIdentifier -> NUMBER .)
    PV              reduce using rule 279 (simpleIdentifier -> NUMBER .)
    ELSE            reduce using rule 279 (simpleIdentifier -> NUMBER .)
    SETA            reduce using rule 279 (simpleIdentifier -> NUMBER .)
    CLASS           reduce using rule 279 (simpleIdentifier -> NUMBER .)


state 23

    (280) simpleIdentifier -> OPERATOR .

    LPAREN          reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    DOISP           reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    ATRIBUICAO      reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    INCREMENTO      reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    DECREMENTO      reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    MENOR           reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    LCCT            reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    COLONCOLON      reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    PONTO           reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    RCHAVE          reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    AS              reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    MAISIGUAL       reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    MENOSIGUAL      reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    MULTIGUAL       reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    DIVIGUAL        reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    MODIGUAL        reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    MULT            reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    DIVIDE          reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    MOD             reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    PLUS            reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    MINUS           reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    PONTOPONTO      reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    ID              reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    CROSSINLINE     reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    IMPORT          reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    INIT            reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    NOINLINE        reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    OUT             reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    VARARG          reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    WHERE           reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    OBJECT          reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    CONST           reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    CONSTRUCTOR     reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    EOF             reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    FALSE           reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    FUNCTION        reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    NULL            reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    NULLABLE        reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    NUMBER          reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    OPERATOR        reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    SMARTCAST       reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    THIS            reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    TRUE            reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    VAL             reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    VAR             reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    WHEN            reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    LONG            reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    ARRAY           reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    ELVIS           reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    IN              reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    NOT_IN          reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    IS              reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    NOT_IS          reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    MAIOR           reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    MENORIGUAL      reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    MAIORIGUAL      reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    DIFERENTE       reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    IDENTIDADE      reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    IGUALDADE       reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    SEMIDENTIDADE   reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    AND             reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    OR              reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    FUN             reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    FOR             reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    WHILE           reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    DO              reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    LITERAL_STRING  reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    IF              reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    RETURN          reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    RETURN_AT       reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    CONTINUE        reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    CONTINUE_AT     reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    BREAK           reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    BREAK_AT        reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    NOT             reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    SUSPEND         reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    LCHAVE          reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    $end            reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    COMMA           reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    RPAREN          reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    RCCT            reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    PV              reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    ELSE            reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    SETA            reduce using rule 280 (simpleIdentifier -> OPERATOR .)
    CLASS           reduce using rule 280 (simpleIdentifier -> OPERATOR .)


state 24

    (281) simpleIdentifier -> SMARTCAST .

    LPAREN          reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    DOISP           reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    ATRIBUICAO      reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    INCREMENTO      reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    DECREMENTO      reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    MENOR           reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    LCCT            reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    COLONCOLON      reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    PONTO           reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    RCHAVE          reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    AS              reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    MAISIGUAL       reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    MENOSIGUAL      reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    MULTIGUAL       reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    DIVIGUAL        reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    MODIGUAL        reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    MULT            reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    DIVIDE          reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    MOD             reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    PLUS            reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    MINUS           reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    PONTOPONTO      reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    ID              reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    CROSSINLINE     reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    IMPORT          reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    INIT            reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    NOINLINE        reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    OUT             reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    VARARG          reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    WHERE           reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    OBJECT          reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    CONST           reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    CONSTRUCTOR     reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    EOF             reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    FALSE           reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    FUNCTION        reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    NULL            reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    NULLABLE        reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    NUMBER          reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    OPERATOR        reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    SMARTCAST       reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    THIS            reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    TRUE            reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    VAL             reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    VAR             reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    WHEN            reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    LONG            reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    ARRAY           reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    ELVIS           reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    IN              reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    NOT_IN          reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    IS              reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    NOT_IS          reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    MAIOR           reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    MENORIGUAL      reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    MAIORIGUAL      reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    DIFERENTE       reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    IDENTIDADE      reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    IGUALDADE       reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    SEMIDENTIDADE   reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    AND             reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    OR              reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    FUN             reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    FOR             reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    WHILE           reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    DO              reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    LITERAL_STRING  reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    IF              reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    RETURN          reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    RETURN_AT       reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    CONTINUE        reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    CONTINUE_AT     reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    BREAK           reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    BREAK_AT        reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    NOT             reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    SUSPEND         reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    LCHAVE          reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    $end            reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    COMMA           reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    RPAREN          reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    RCCT            reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    PV              reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    ELSE            reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    SETA            reduce using rule 281 (simpleIdentifier -> SMARTCAST .)
    CLASS           reduce using rule 281 (simpleIdentifier -> SMARTCAST .)


state 25

    (282) simpleIdentifier -> THIS .

    LPAREN          reduce using rule 282 (simpleIdentifier -> THIS .)
    DOISP           reduce using rule 282 (simpleIdentifier -> THIS .)
    ATRIBUICAO      reduce using rule 282 (simpleIdentifier -> THIS .)
    INCREMENTO      reduce using rule 282 (simpleIdentifier -> THIS .)
    DECREMENTO      reduce using rule 282 (simpleIdentifier -> THIS .)
    MENOR           reduce using rule 282 (simpleIdentifier -> THIS .)
    LCCT            reduce using rule 282 (simpleIdentifier -> THIS .)
    COLONCOLON      reduce using rule 282 (simpleIdentifier -> THIS .)
    PONTO           reduce using rule 282 (simpleIdentifier -> THIS .)
    RCHAVE          reduce using rule 282 (simpleIdentifier -> THIS .)
    AS              reduce using rule 282 (simpleIdentifier -> THIS .)
    MAISIGUAL       reduce using rule 282 (simpleIdentifier -> THIS .)
    MENOSIGUAL      reduce using rule 282 (simpleIdentifier -> THIS .)
    MULTIGUAL       reduce using rule 282 (simpleIdentifier -> THIS .)
    DIVIGUAL        reduce using rule 282 (simpleIdentifier -> THIS .)
    MODIGUAL        reduce using rule 282 (simpleIdentifier -> THIS .)
    MULT            reduce using rule 282 (simpleIdentifier -> THIS .)
    DIVIDE          reduce using rule 282 (simpleIdentifier -> THIS .)
    MOD             reduce using rule 282 (simpleIdentifier -> THIS .)
    PLUS            reduce using rule 282 (simpleIdentifier -> THIS .)
    MINUS           reduce using rule 282 (simpleIdentifier -> THIS .)
    PONTOPONTO      reduce using rule 282 (simpleIdentifier -> THIS .)
    ID              reduce using rule 282 (simpleIdentifier -> THIS .)
    CROSSINLINE     reduce using rule 282 (simpleIdentifier -> THIS .)
    IMPORT          reduce using rule 282 (simpleIdentifier -> THIS .)
    INIT            reduce using rule 282 (simpleIdentifier -> THIS .)
    NOINLINE        reduce using rule 282 (simpleIdentifier -> THIS .)
    OUT             reduce using rule 282 (simpleIdentifier -> THIS .)
    VARARG          reduce using rule 282 (simpleIdentifier -> THIS .)
    WHERE           reduce using rule 282 (simpleIdentifier -> THIS .)
    OBJECT          reduce using rule 282 (simpleIdentifier -> THIS .)
    CONST           reduce using rule 282 (simpleIdentifier -> THIS .)
    CONSTRUCTOR     reduce using rule 282 (simpleIdentifier -> THIS .)
    EOF             reduce using rule 282 (simpleIdentifier -> THIS .)
    FALSE           reduce using rule 282 (simpleIdentifier -> THIS .)
    FUNCTION        reduce using rule 282 (simpleIdentifier -> THIS .)
    NULL            reduce using rule 282 (simpleIdentifier -> THIS .)
    NULLABLE        reduce using rule 282 (simpleIdentifier -> THIS .)
    NUMBER          reduce using rule 282 (simpleIdentifier -> THIS .)
    OPERATOR        reduce using rule 282 (simpleIdentifier -> THIS .)
    SMARTCAST       reduce using rule 282 (simpleIdentifier -> THIS .)
    THIS            reduce using rule 282 (simpleIdentifier -> THIS .)
    TRUE            reduce using rule 282 (simpleIdentifier -> THIS .)
    VAL             reduce using rule 282 (simpleIdentifier -> THIS .)
    VAR             reduce using rule 282 (simpleIdentifier -> THIS .)
    WHEN            reduce using rule 282 (simpleIdentifier -> THIS .)
    LONG            reduce using rule 282 (simpleIdentifier -> THIS .)
    ARRAY           reduce using rule 282 (simpleIdentifier -> THIS .)
    ELVIS           reduce using rule 282 (simpleIdentifier -> THIS .)
    IN              reduce using rule 282 (simpleIdentifier -> THIS .)
    NOT_IN          reduce using rule 282 (simpleIdentifier -> THIS .)
    IS              reduce using rule 282 (simpleIdentifier -> THIS .)
    NOT_IS          reduce using rule 282 (simpleIdentifier -> THIS .)
    MAIOR           reduce using rule 282 (simpleIdentifier -> THIS .)
    MENORIGUAL      reduce using rule 282 (simpleIdentifier -> THIS .)
    MAIORIGUAL      reduce using rule 282 (simpleIdentifier -> THIS .)
    DIFERENTE       reduce using rule 282 (simpleIdentifier -> THIS .)
    IDENTIDADE      reduce using rule 282 (simpleIdentifier -> THIS .)
    IGUALDADE       reduce using rule 282 (simpleIdentifier -> THIS .)
    SEMIDENTIDADE   reduce using rule 282 (simpleIdentifier -> THIS .)
    AND             reduce using rule 282 (simpleIdentifier -> THIS .)
    OR              reduce using rule 282 (simpleIdentifier -> THIS .)
    FUN             reduce using rule 282 (simpleIdentifier -> THIS .)
    FOR             reduce using rule 282 (simpleIdentifier -> THIS .)
    WHILE           reduce using rule 282 (simpleIdentifier -> THIS .)
    DO              reduce using rule 282 (simpleIdentifier -> THIS .)
    LITERAL_STRING  reduce using rule 282 (simpleIdentifier -> THIS .)
    IF              reduce using rule 282 (simpleIdentifier -> THIS .)
    RETURN          reduce using rule 282 (simpleIdentifier -> THIS .)
    RETURN_AT       reduce using rule 282 (simpleIdentifier -> THIS .)
    CONTINUE        reduce using rule 282 (simpleIdentifier -> THIS .)
    CONTINUE_AT     reduce using rule 282 (simpleIdentifier -> THIS .)
    BREAK           reduce using rule 282 (simpleIdentifier -> THIS .)
    BREAK_AT        reduce using rule 282 (simpleIdentifier -> THIS .)
    NOT             reduce using rule 282 (simpleIdentifier -> THIS .)
    SUSPEND         reduce using rule 282 (simpleIdentifier -> THIS .)
    LCHAVE          reduce using rule 282 (simpleIdentifier -> THIS .)
    $end            reduce using rule 282 (simpleIdentifier -> THIS .)
    COMMA           reduce using rule 282 (simpleIdentifier -> THIS .)
    RPAREN          reduce using rule 282 (simpleIdentifier -> THIS .)
    RCCT            reduce using rule 282 (simpleIdentifier -> THIS .)
    PV              reduce using rule 282 (simpleIdentifier -> THIS .)
    ELSE            reduce using rule 282 (simpleIdentifier -> THIS .)
    SETA            reduce using rule 282 (simpleIdentifier -> THIS .)
    CLASS           reduce using rule 282 (simpleIdentifier -> THIS .)


state 26

    (283) simpleIdentifier -> TRUE .

    LPAREN          reduce using rule 283 (simpleIdentifier -> TRUE .)
    DOISP           reduce using rule 283 (simpleIdentifier -> TRUE .)
    ATRIBUICAO      reduce using rule 283 (simpleIdentifier -> TRUE .)
    INCREMENTO      reduce using rule 283 (simpleIdentifier -> TRUE .)
    DECREMENTO      reduce using rule 283 (simpleIdentifier -> TRUE .)
    MENOR           reduce using rule 283 (simpleIdentifier -> TRUE .)
    LCCT            reduce using rule 283 (simpleIdentifier -> TRUE .)
    COLONCOLON      reduce using rule 283 (simpleIdentifier -> TRUE .)
    PONTO           reduce using rule 283 (simpleIdentifier -> TRUE .)
    RCHAVE          reduce using rule 283 (simpleIdentifier -> TRUE .)
    AS              reduce using rule 283 (simpleIdentifier -> TRUE .)
    MAISIGUAL       reduce using rule 283 (simpleIdentifier -> TRUE .)
    MENOSIGUAL      reduce using rule 283 (simpleIdentifier -> TRUE .)
    MULTIGUAL       reduce using rule 283 (simpleIdentifier -> TRUE .)
    DIVIGUAL        reduce using rule 283 (simpleIdentifier -> TRUE .)
    MODIGUAL        reduce using rule 283 (simpleIdentifier -> TRUE .)
    MULT            reduce using rule 283 (simpleIdentifier -> TRUE .)
    DIVIDE          reduce using rule 283 (simpleIdentifier -> TRUE .)
    MOD             reduce using rule 283 (simpleIdentifier -> TRUE .)
    PLUS            reduce using rule 283 (simpleIdentifier -> TRUE .)
    MINUS           reduce using rule 283 (simpleIdentifier -> TRUE .)
    PONTOPONTO      reduce using rule 283 (simpleIdentifier -> TRUE .)
    ID              reduce using rule 283 (simpleIdentifier -> TRUE .)
    CROSSINLINE     reduce using rule 283 (simpleIdentifier -> TRUE .)
    IMPORT          reduce using rule 283 (simpleIdentifier -> TRUE .)
    INIT            reduce using rule 283 (simpleIdentifier -> TRUE .)
    NOINLINE        reduce using rule 283 (simpleIdentifier -> TRUE .)
    OUT             reduce using rule 283 (simpleIdentifier -> TRUE .)
    VARARG          reduce using rule 283 (simpleIdentifier -> TRUE .)
    WHERE           reduce using rule 283 (simpleIdentifier -> TRUE .)
    OBJECT          reduce using rule 283 (simpleIdentifier -> TRUE .)
    CONST           reduce using rule 283 (simpleIdentifier -> TRUE .)
    CONSTRUCTOR     reduce using rule 283 (simpleIdentifier -> TRUE .)
    EOF             reduce using rule 283 (simpleIdentifier -> TRUE .)
    FALSE           reduce using rule 283 (simpleIdentifier -> TRUE .)
    FUNCTION        reduce using rule 283 (simpleIdentifier -> TRUE .)
    NULL            reduce using rule 283 (simpleIdentifier -> TRUE .)
    NULLABLE        reduce using rule 283 (simpleIdentifier -> TRUE .)
    NUMBER          reduce using rule 283 (simpleIdentifier -> TRUE .)
    OPERATOR        reduce using rule 283 (simpleIdentifier -> TRUE .)
    SMARTCAST       reduce using rule 283 (simpleIdentifier -> TRUE .)
    THIS            reduce using rule 283 (simpleIdentifier -> TRUE .)
    TRUE            reduce using rule 283 (simpleIdentifier -> TRUE .)
    VAL             reduce using rule 283 (simpleIdentifier -> TRUE .)
    VAR             reduce using rule 283 (simpleIdentifier -> TRUE .)
    WHEN            reduce using rule 283 (simpleIdentifier -> TRUE .)
    LONG            reduce using rule 283 (simpleIdentifier -> TRUE .)
    ARRAY           reduce using rule 283 (simpleIdentifier -> TRUE .)
    ELVIS           reduce using rule 283 (simpleIdentifier -> TRUE .)
    IN              reduce using rule 283 (simpleIdentifier -> TRUE .)
    NOT_IN          reduce using rule 283 (simpleIdentifier -> TRUE .)
    IS              reduce using rule 283 (simpleIdentifier -> TRUE .)
    NOT_IS          reduce using rule 283 (simpleIdentifier -> TRUE .)
    MAIOR           reduce using rule 283 (simpleIdentifier -> TRUE .)
    MENORIGUAL      reduce using rule 283 (simpleIdentifier -> TRUE .)
    MAIORIGUAL      reduce using rule 283 (simpleIdentifier -> TRUE .)
    DIFERENTE       reduce using rule 283 (simpleIdentifier -> TRUE .)
    IDENTIDADE      reduce using rule 283 (simpleIdentifier -> TRUE .)
    IGUALDADE       reduce using rule 283 (simpleIdentifier -> TRUE .)
    SEMIDENTIDADE   reduce using rule 283 (simpleIdentifier -> TRUE .)
    AND             reduce using rule 283 (simpleIdentifier -> TRUE .)
    OR              reduce using rule 283 (simpleIdentifier -> TRUE .)
    FUN             reduce using rule 283 (simpleIdentifier -> TRUE .)
    FOR             reduce using rule 283 (simpleIdentifier -> TRUE .)
    WHILE           reduce using rule 283 (simpleIdentifier -> TRUE .)
    DO              reduce using rule 283 (simpleIdentifier -> TRUE .)
    LITERAL_STRING  reduce using rule 283 (simpleIdentifier -> TRUE .)
    IF              reduce using rule 283 (simpleIdentifier -> TRUE .)
    RETURN          reduce using rule 283 (simpleIdentifier -> TRUE .)
    RETURN_AT       reduce using rule 283 (simpleIdentifier -> TRUE .)
    CONTINUE        reduce using rule 283 (simpleIdentifier -> TRUE .)
    CONTINUE_AT     reduce using rule 283 (simpleIdentifier -> TRUE .)
    BREAK           reduce using rule 283 (simpleIdentifier -> TRUE .)
    BREAK_AT        reduce using rule 283 (simpleIdentifier -> TRUE .)
    NOT             reduce using rule 283 (simpleIdentifier -> TRUE .)
    SUSPEND         reduce using rule 283 (simpleIdentifier -> TRUE .)
    LCHAVE          reduce using rule 283 (simpleIdentifier -> TRUE .)
    $end            reduce using rule 283 (simpleIdentifier -> TRUE .)
    COMMA           reduce using rule 283 (simpleIdentifier -> TRUE .)
    RPAREN          reduce using rule 283 (simpleIdentifier -> TRUE .)
    RCCT            reduce using rule 283 (simpleIdentifier -> TRUE .)
    PV              reduce using rule 283 (simpleIdentifier -> TRUE .)
    ELSE            reduce using rule 283 (simpleIdentifier -> TRUE .)
    SETA            reduce using rule 283 (simpleIdentifier -> TRUE .)
    CLASS           reduce using rule 283 (simpleIdentifier -> TRUE .)


state 27

    (284) simpleIdentifier -> VAL .

    LPAREN          reduce using rule 284 (simpleIdentifier -> VAL .)
    DOISP           reduce using rule 284 (simpleIdentifier -> VAL .)
    MENOR           reduce using rule 284 (simpleIdentifier -> VAL .)
    LCHAVE          reduce using rule 284 (simpleIdentifier -> VAL .)
    FUN             reduce using rule 284 (simpleIdentifier -> VAL .)
    $end            reduce using rule 284 (simpleIdentifier -> VAL .)
    FOR             reduce using rule 284 (simpleIdentifier -> VAL .)
    WHILE           reduce using rule 284 (simpleIdentifier -> VAL .)
    DO              reduce using rule 284 (simpleIdentifier -> VAL .)
    VAR             reduce using rule 284 (simpleIdentifier -> VAL .)
    VAL             reduce using rule 284 (simpleIdentifier -> VAL .)
    ID              reduce using rule 284 (simpleIdentifier -> VAL .)
    CROSSINLINE     reduce using rule 284 (simpleIdentifier -> VAL .)
    IMPORT          reduce using rule 284 (simpleIdentifier -> VAL .)
    INIT            reduce using rule 284 (simpleIdentifier -> VAL .)
    NOINLINE        reduce using rule 284 (simpleIdentifier -> VAL .)
    OUT             reduce using rule 284 (simpleIdentifier -> VAL .)
    VARARG          reduce using rule 284 (simpleIdentifier -> VAL .)
    WHERE           reduce using rule 284 (simpleIdentifier -> VAL .)
    OBJECT          reduce using rule 284 (simpleIdentifier -> VAL .)
    CONST           reduce using rule 284 (simpleIdentifier -> VAL .)
    CONSTRUCTOR     reduce using rule 284 (simpleIdentifier -> VAL .)
    EOF             reduce using rule 284 (simpleIdentifier -> VAL .)
    FALSE           reduce using rule 284 (simpleIdentifier -> VAL .)
    FUNCTION        reduce using rule 284 (simpleIdentifier -> VAL .)
    NULL            reduce using rule 284 (simpleIdentifier -> VAL .)
    NULLABLE        reduce using rule 284 (simpleIdentifier -> VAL .)
    NUMBER          reduce using rule 284 (simpleIdentifier -> VAL .)
    OPERATOR        reduce using rule 284 (simpleIdentifier -> VAL .)
    SMARTCAST       reduce using rule 284 (simpleIdentifier -> VAL .)
    THIS            reduce using rule 284 (simpleIdentifier -> VAL .)
    TRUE            reduce using rule 284 (simpleIdentifier -> VAL .)
    WHEN            reduce using rule 284 (simpleIdentifier -> VAL .)
    LONG            reduce using rule 284 (simpleIdentifier -> VAL .)
    ARRAY           reduce using rule 284 (simpleIdentifier -> VAL .)
    LITERAL_STRING  reduce using rule 284 (simpleIdentifier -> VAL .)
    LCCT            reduce using rule 284 (simpleIdentifier -> VAL .)
    IF              reduce using rule 284 (simpleIdentifier -> VAL .)
    RETURN          reduce using rule 284 (simpleIdentifier -> VAL .)
    RETURN_AT       reduce using rule 284 (simpleIdentifier -> VAL .)
    CONTINUE        reduce using rule 284 (simpleIdentifier -> VAL .)
    CONTINUE_AT     reduce using rule 284 (simpleIdentifier -> VAL .)
    BREAK           reduce using rule 284 (simpleIdentifier -> VAL .)
    BREAK_AT        reduce using rule 284 (simpleIdentifier -> VAL .)
    RCHAVE          reduce using rule 284 (simpleIdentifier -> VAL .)
    INCREMENTO      reduce using rule 284 (simpleIdentifier -> VAL .)
    DECREMENTO      reduce using rule 284 (simpleIdentifier -> VAL .)
    MINUS           reduce using rule 284 (simpleIdentifier -> VAL .)
    PLUS            reduce using rule 284 (simpleIdentifier -> VAL .)
    NOT             reduce using rule 284 (simpleIdentifier -> VAL .)
    SUSPEND         reduce using rule 284 (simpleIdentifier -> VAL .)
    COLONCOLON      reduce using rule 284 (simpleIdentifier -> VAL .)
    PONTO           reduce using rule 284 (simpleIdentifier -> VAL .)
    AS              reduce using rule 284 (simpleIdentifier -> VAL .)
    MAISIGUAL       reduce using rule 284 (simpleIdentifier -> VAL .)
    MENOSIGUAL      reduce using rule 284 (simpleIdentifier -> VAL .)
    MULTIGUAL       reduce using rule 284 (simpleIdentifier -> VAL .)
    DIVIGUAL        reduce using rule 284 (simpleIdentifier -> VAL .)
    MODIGUAL        reduce using rule 284 (simpleIdentifier -> VAL .)
    MULT            reduce using rule 284 (simpleIdentifier -> VAL .)
    DIVIDE          reduce using rule 284 (simpleIdentifier -> VAL .)
    MOD             reduce using rule 284 (simpleIdentifier -> VAL .)
    PONTOPONTO      reduce using rule 284 (simpleIdentifier -> VAL .)
    ELVIS           reduce using rule 284 (simpleIdentifier -> VAL .)
    IN              reduce using rule 284 (simpleIdentifier -> VAL .)
    NOT_IN          reduce using rule 284 (simpleIdentifier -> VAL .)
    IS              reduce using rule 284 (simpleIdentifier -> VAL .)
    NOT_IS          reduce using rule 284 (simpleIdentifier -> VAL .)
    MAIOR           reduce using rule 284 (simpleIdentifier -> VAL .)
    MENORIGUAL      reduce using rule 284 (simpleIdentifier -> VAL .)
    MAIORIGUAL      reduce using rule 284 (simpleIdentifier -> VAL .)
    DIFERENTE       reduce using rule 284 (simpleIdentifier -> VAL .)
    IDENTIDADE      reduce using rule 284 (simpleIdentifier -> VAL .)
    IGUALDADE       reduce using rule 284 (simpleIdentifier -> VAL .)
    SEMIDENTIDADE   reduce using rule 284 (simpleIdentifier -> VAL .)
    AND             reduce using rule 284 (simpleIdentifier -> VAL .)
    OR              reduce using rule 284 (simpleIdentifier -> VAL .)
    COMMA           reduce using rule 284 (simpleIdentifier -> VAL .)
    RPAREN          reduce using rule 284 (simpleIdentifier -> VAL .)
    RCCT            reduce using rule 284 (simpleIdentifier -> VAL .)
    PV              reduce using rule 284 (simpleIdentifier -> VAL .)
    ELSE            reduce using rule 284 (simpleIdentifier -> VAL .)
    SETA            reduce using rule 284 (simpleIdentifier -> VAL .)
    ATRIBUICAO      reduce using rule 284 (simpleIdentifier -> VAL .)
    CLASS           reduce using rule 284 (simpleIdentifier -> VAL .)


state 28

    (285) simpleIdentifier -> VAR .

    LPAREN          reduce using rule 285 (simpleIdentifier -> VAR .)
    DOISP           reduce using rule 285 (simpleIdentifier -> VAR .)
    MENOR           reduce using rule 285 (simpleIdentifier -> VAR .)
    LCHAVE          reduce using rule 285 (simpleIdentifier -> VAR .)
    FUN             reduce using rule 285 (simpleIdentifier -> VAR .)
    $end            reduce using rule 285 (simpleIdentifier -> VAR .)
    FOR             reduce using rule 285 (simpleIdentifier -> VAR .)
    WHILE           reduce using rule 285 (simpleIdentifier -> VAR .)
    DO              reduce using rule 285 (simpleIdentifier -> VAR .)
    VAR             reduce using rule 285 (simpleIdentifier -> VAR .)
    VAL             reduce using rule 285 (simpleIdentifier -> VAR .)
    ID              reduce using rule 285 (simpleIdentifier -> VAR .)
    CROSSINLINE     reduce using rule 285 (simpleIdentifier -> VAR .)
    IMPORT          reduce using rule 285 (simpleIdentifier -> VAR .)
    INIT            reduce using rule 285 (simpleIdentifier -> VAR .)
    NOINLINE        reduce using rule 285 (simpleIdentifier -> VAR .)
    OUT             reduce using rule 285 (simpleIdentifier -> VAR .)
    VARARG          reduce using rule 285 (simpleIdentifier -> VAR .)
    WHERE           reduce using rule 285 (simpleIdentifier -> VAR .)
    OBJECT          reduce using rule 285 (simpleIdentifier -> VAR .)
    CONST           reduce using rule 285 (simpleIdentifier -> VAR .)
    CONSTRUCTOR     reduce using rule 285 (simpleIdentifier -> VAR .)
    EOF             reduce using rule 285 (simpleIdentifier -> VAR .)
    FALSE           reduce using rule 285 (simpleIdentifier -> VAR .)
    FUNCTION        reduce using rule 285 (simpleIdentifier -> VAR .)
    NULL            reduce using rule 285 (simpleIdentifier -> VAR .)
    NULLABLE        reduce using rule 285 (simpleIdentifier -> VAR .)
    NUMBER          reduce using rule 285 (simpleIdentifier -> VAR .)
    OPERATOR        reduce using rule 285 (simpleIdentifier -> VAR .)
    SMARTCAST       reduce using rule 285 (simpleIdentifier -> VAR .)
    THIS            reduce using rule 285 (simpleIdentifier -> VAR .)
    TRUE            reduce using rule 285 (simpleIdentifier -> VAR .)
    WHEN            reduce using rule 285 (simpleIdentifier -> VAR .)
    LONG            reduce using rule 285 (simpleIdentifier -> VAR .)
    ARRAY           reduce using rule 285 (simpleIdentifier -> VAR .)
    LITERAL_STRING  reduce using rule 285 (simpleIdentifier -> VAR .)
    LCCT            reduce using rule 285 (simpleIdentifier -> VAR .)
    IF              reduce using rule 285 (simpleIdentifier -> VAR .)
    RETURN          reduce using rule 285 (simpleIdentifier -> VAR .)
    RETURN_AT       reduce using rule 285 (simpleIdentifier -> VAR .)
    CONTINUE        reduce using rule 285 (simpleIdentifier -> VAR .)
    CONTINUE_AT     reduce using rule 285 (simpleIdentifier -> VAR .)
    BREAK           reduce using rule 285 (simpleIdentifier -> VAR .)
    BREAK_AT        reduce using rule 285 (simpleIdentifier -> VAR .)
    RCHAVE          reduce using rule 285 (simpleIdentifier -> VAR .)
    INCREMENTO      reduce using rule 285 (simpleIdentifier -> VAR .)
    DECREMENTO      reduce using rule 285 (simpleIdentifier -> VAR .)
    MINUS           reduce using rule 285 (simpleIdentifier -> VAR .)
    PLUS            reduce using rule 285 (simpleIdentifier -> VAR .)
    NOT             reduce using rule 285 (simpleIdentifier -> VAR .)
    SUSPEND         reduce using rule 285 (simpleIdentifier -> VAR .)
    COLONCOLON      reduce using rule 285 (simpleIdentifier -> VAR .)
    PONTO           reduce using rule 285 (simpleIdentifier -> VAR .)
    AS              reduce using rule 285 (simpleIdentifier -> VAR .)
    MAISIGUAL       reduce using rule 285 (simpleIdentifier -> VAR .)
    MENOSIGUAL      reduce using rule 285 (simpleIdentifier -> VAR .)
    MULTIGUAL       reduce using rule 285 (simpleIdentifier -> VAR .)
    DIVIGUAL        reduce using rule 285 (simpleIdentifier -> VAR .)
    MODIGUAL        reduce using rule 285 (simpleIdentifier -> VAR .)
    MULT            reduce using rule 285 (simpleIdentifier -> VAR .)
    DIVIDE          reduce using rule 285 (simpleIdentifier -> VAR .)
    MOD             reduce using rule 285 (simpleIdentifier -> VAR .)
    PONTOPONTO      reduce using rule 285 (simpleIdentifier -> VAR .)
    ELVIS           reduce using rule 285 (simpleIdentifier -> VAR .)
    IN              reduce using rule 285 (simpleIdentifier -> VAR .)
    NOT_IN          reduce using rule 285 (simpleIdentifier -> VAR .)
    IS              reduce using rule 285 (simpleIdentifier -> VAR .)
    NOT_IS          reduce using rule 285 (simpleIdentifier -> VAR .)
    MAIOR           reduce using rule 285 (simpleIdentifier -> VAR .)
    MENORIGUAL      reduce using rule 285 (simpleIdentifier -> VAR .)
    MAIORIGUAL      reduce using rule 285 (simpleIdentifier -> VAR .)
    DIFERENTE       reduce using rule 285 (simpleIdentifier -> VAR .)
    IDENTIDADE      reduce using rule 285 (simpleIdentifier -> VAR .)
    IGUALDADE       reduce using rule 285 (simpleIdentifier -> VAR .)
    SEMIDENTIDADE   reduce using rule 285 (simpleIdentifier -> VAR .)
    AND             reduce using rule 285 (simpleIdentifier -> VAR .)
    OR              reduce using rule 285 (simpleIdentifier -> VAR .)
    COMMA           reduce using rule 285 (simpleIdentifier -> VAR .)
    RPAREN          reduce using rule 285 (simpleIdentifier -> VAR .)
    RCCT            reduce using rule 285 (simpleIdentifier -> VAR .)
    PV              reduce using rule 285 (simpleIdentifier -> VAR .)
    ELSE            reduce using rule 285 (simpleIdentifier -> VAR .)
    SETA            reduce using rule 285 (simpleIdentifier -> VAR .)
    ATRIBUICAO      reduce using rule 285 (simpleIdentifier -> VAR .)
    CLASS           reduce using rule 285 (simpleIdentifier -> VAR .)


state 29

    (286) simpleIdentifier -> WHEN .

    LPAREN          reduce using rule 286 (simpleIdentifier -> WHEN .)
    DOISP           reduce using rule 286 (simpleIdentifier -> WHEN .)
    ATRIBUICAO      reduce using rule 286 (simpleIdentifier -> WHEN .)
    INCREMENTO      reduce using rule 286 (simpleIdentifier -> WHEN .)
    DECREMENTO      reduce using rule 286 (simpleIdentifier -> WHEN .)
    MENOR           reduce using rule 286 (simpleIdentifier -> WHEN .)
    LCCT            reduce using rule 286 (simpleIdentifier -> WHEN .)
    COLONCOLON      reduce using rule 286 (simpleIdentifier -> WHEN .)
    PONTO           reduce using rule 286 (simpleIdentifier -> WHEN .)
    RCHAVE          reduce using rule 286 (simpleIdentifier -> WHEN .)
    AS              reduce using rule 286 (simpleIdentifier -> WHEN .)
    MAISIGUAL       reduce using rule 286 (simpleIdentifier -> WHEN .)
    MENOSIGUAL      reduce using rule 286 (simpleIdentifier -> WHEN .)
    MULTIGUAL       reduce using rule 286 (simpleIdentifier -> WHEN .)
    DIVIGUAL        reduce using rule 286 (simpleIdentifier -> WHEN .)
    MODIGUAL        reduce using rule 286 (simpleIdentifier -> WHEN .)
    MULT            reduce using rule 286 (simpleIdentifier -> WHEN .)
    DIVIDE          reduce using rule 286 (simpleIdentifier -> WHEN .)
    MOD             reduce using rule 286 (simpleIdentifier -> WHEN .)
    PLUS            reduce using rule 286 (simpleIdentifier -> WHEN .)
    MINUS           reduce using rule 286 (simpleIdentifier -> WHEN .)
    PONTOPONTO      reduce using rule 286 (simpleIdentifier -> WHEN .)
    ID              reduce using rule 286 (simpleIdentifier -> WHEN .)
    CROSSINLINE     reduce using rule 286 (simpleIdentifier -> WHEN .)
    IMPORT          reduce using rule 286 (simpleIdentifier -> WHEN .)
    INIT            reduce using rule 286 (simpleIdentifier -> WHEN .)
    NOINLINE        reduce using rule 286 (simpleIdentifier -> WHEN .)
    OUT             reduce using rule 286 (simpleIdentifier -> WHEN .)
    VARARG          reduce using rule 286 (simpleIdentifier -> WHEN .)
    WHERE           reduce using rule 286 (simpleIdentifier -> WHEN .)
    OBJECT          reduce using rule 286 (simpleIdentifier -> WHEN .)
    CONST           reduce using rule 286 (simpleIdentifier -> WHEN .)
    CONSTRUCTOR     reduce using rule 286 (simpleIdentifier -> WHEN .)
    EOF             reduce using rule 286 (simpleIdentifier -> WHEN .)
    FALSE           reduce using rule 286 (simpleIdentifier -> WHEN .)
    FUNCTION        reduce using rule 286 (simpleIdentifier -> WHEN .)
    NULL            reduce using rule 286 (simpleIdentifier -> WHEN .)
    NULLABLE        reduce using rule 286 (simpleIdentifier -> WHEN .)
    NUMBER          reduce using rule 286 (simpleIdentifier -> WHEN .)
    OPERATOR        reduce using rule 286 (simpleIdentifier -> WHEN .)
    SMARTCAST       reduce using rule 286 (simpleIdentifier -> WHEN .)
    THIS            reduce using rule 286 (simpleIdentifier -> WHEN .)
    TRUE            reduce using rule 286 (simpleIdentifier -> WHEN .)
    VAL             reduce using rule 286 (simpleIdentifier -> WHEN .)
    VAR             reduce using rule 286 (simpleIdentifier -> WHEN .)
    WHEN            reduce using rule 286 (simpleIdentifier -> WHEN .)
    LONG            reduce using rule 286 (simpleIdentifier -> WHEN .)
    ARRAY           reduce using rule 286 (simpleIdentifier -> WHEN .)
    ELVIS           reduce using rule 286 (simpleIdentifier -> WHEN .)
    IN              reduce using rule 286 (simpleIdentifier -> WHEN .)
    NOT_IN          reduce using rule 286 (simpleIdentifier -> WHEN .)
    IS              reduce using rule 286 (simpleIdentifier -> WHEN .)
    NOT_IS          reduce using rule 286 (simpleIdentifier -> WHEN .)
    MAIOR           reduce using rule 286 (simpleIdentifier -> WHEN .)
    MENORIGUAL      reduce using rule 286 (simpleIdentifier -> WHEN .)
    MAIORIGUAL      reduce using rule 286 (simpleIdentifier -> WHEN .)
    DIFERENTE       reduce using rule 286 (simpleIdentifier -> WHEN .)
    IDENTIDADE      reduce using rule 286 (simpleIdentifier -> WHEN .)
    IGUALDADE       reduce using rule 286 (simpleIdentifier -> WHEN .)
    SEMIDENTIDADE   reduce using rule 286 (simpleIdentifier -> WHEN .)
    AND             reduce using rule 286 (simpleIdentifier -> WHEN .)
    OR              reduce using rule 286 (simpleIdentifier -> WHEN .)
    FUN             reduce using rule 286 (simpleIdentifier -> WHEN .)
    FOR             reduce using rule 286 (simpleIdentifier -> WHEN .)
    WHILE           reduce using rule 286 (simpleIdentifier -> WHEN .)
    DO              reduce using rule 286 (simpleIdentifier -> WHEN .)
    LITERAL_STRING  reduce using rule 286 (simpleIdentifier -> WHEN .)
    IF              reduce using rule 286 (simpleIdentifier -> WHEN .)
    RETURN          reduce using rule 286 (simpleIdentifier -> WHEN .)
    RETURN_AT       reduce using rule 286 (simpleIdentifier -> WHEN .)
    CONTINUE        reduce using rule 286 (simpleIdentifier -> WHEN .)
    CONTINUE_AT     reduce using rule 286 (simpleIdentifier -> WHEN .)
    BREAK           reduce using rule 286 (simpleIdentifier -> WHEN .)
    BREAK_AT        reduce using rule 286 (simpleIdentifier -> WHEN .)
    NOT             reduce using rule 286 (simpleIdentifier -> WHEN .)
    SUSPEND         reduce using rule 286 (simpleIdentifier -> WHEN .)
    LCHAVE          reduce using rule 286 (simpleIdentifier -> WHEN .)
    $end            reduce using rule 286 (simpleIdentifier -> WHEN .)
    COMMA           reduce using rule 286 (simpleIdentifier -> WHEN .)
    RPAREN          reduce using rule 286 (simpleIdentifier -> WHEN .)
    RCCT            reduce using rule 286 (simpleIdentifier -> WHEN .)
    PV              reduce using rule 286 (simpleIdentifier -> WHEN .)
    ELSE            reduce using rule 286 (simpleIdentifier -> WHEN .)
    SETA            reduce using rule 286 (simpleIdentifier -> WHEN .)
    CLASS           reduce using rule 286 (simpleIdentifier -> WHEN .)


state 30

    (287) simpleIdentifier -> LONG .

    LPAREN          reduce using rule 287 (simpleIdentifier -> LONG .)
    DOISP           reduce using rule 287 (simpleIdentifier -> LONG .)
    ATRIBUICAO      reduce using rule 287 (simpleIdentifier -> LONG .)
    INCREMENTO      reduce using rule 287 (simpleIdentifier -> LONG .)
    DECREMENTO      reduce using rule 287 (simpleIdentifier -> LONG .)
    MENOR           reduce using rule 287 (simpleIdentifier -> LONG .)
    LCCT            reduce using rule 287 (simpleIdentifier -> LONG .)
    COLONCOLON      reduce using rule 287 (simpleIdentifier -> LONG .)
    PONTO           reduce using rule 287 (simpleIdentifier -> LONG .)
    RCHAVE          reduce using rule 287 (simpleIdentifier -> LONG .)
    AS              reduce using rule 287 (simpleIdentifier -> LONG .)
    MAISIGUAL       reduce using rule 287 (simpleIdentifier -> LONG .)
    MENOSIGUAL      reduce using rule 287 (simpleIdentifier -> LONG .)
    MULTIGUAL       reduce using rule 287 (simpleIdentifier -> LONG .)
    DIVIGUAL        reduce using rule 287 (simpleIdentifier -> LONG .)
    MODIGUAL        reduce using rule 287 (simpleIdentifier -> LONG .)
    MULT            reduce using rule 287 (simpleIdentifier -> LONG .)
    DIVIDE          reduce using rule 287 (simpleIdentifier -> LONG .)
    MOD             reduce using rule 287 (simpleIdentifier -> LONG .)
    PLUS            reduce using rule 287 (simpleIdentifier -> LONG .)
    MINUS           reduce using rule 287 (simpleIdentifier -> LONG .)
    PONTOPONTO      reduce using rule 287 (simpleIdentifier -> LONG .)
    ID              reduce using rule 287 (simpleIdentifier -> LONG .)
    CROSSINLINE     reduce using rule 287 (simpleIdentifier -> LONG .)
    IMPORT          reduce using rule 287 (simpleIdentifier -> LONG .)
    INIT            reduce using rule 287 (simpleIdentifier -> LONG .)
    NOINLINE        reduce using rule 287 (simpleIdentifier -> LONG .)
    OUT             reduce using rule 287 (simpleIdentifier -> LONG .)
    VARARG          reduce using rule 287 (simpleIdentifier -> LONG .)
    WHERE           reduce using rule 287 (simpleIdentifier -> LONG .)
    OBJECT          reduce using rule 287 (simpleIdentifier -> LONG .)
    CONST           reduce using rule 287 (simpleIdentifier -> LONG .)
    CONSTRUCTOR     reduce using rule 287 (simpleIdentifier -> LONG .)
    EOF             reduce using rule 287 (simpleIdentifier -> LONG .)
    FALSE           reduce using rule 287 (simpleIdentifier -> LONG .)
    FUNCTION        reduce using rule 287 (simpleIdentifier -> LONG .)
    NULL            reduce using rule 287 (simpleIdentifier -> LONG .)
    NULLABLE        reduce using rule 287 (simpleIdentifier -> LONG .)
    NUMBER          reduce using rule 287 (simpleIdentifier -> LONG .)
    OPERATOR        reduce using rule 287 (simpleIdentifier -> LONG .)
    SMARTCAST       reduce using rule 287 (simpleIdentifier -> LONG .)
    THIS            reduce using rule 287 (simpleIdentifier -> LONG .)
    TRUE            reduce using rule 287 (simpleIdentifier -> LONG .)
    VAL             reduce using rule 287 (simpleIdentifier -> LONG .)
    VAR             reduce using rule 287 (simpleIdentifier -> LONG .)
    WHEN            reduce using rule 287 (simpleIdentifier -> LONG .)
    LONG            reduce using rule 287 (simpleIdentifier -> LONG .)
    ARRAY           reduce using rule 287 (simpleIdentifier -> LONG .)
    ELVIS           reduce using rule 287 (simpleIdentifier -> LONG .)
    IN              reduce using rule 287 (simpleIdentifier -> LONG .)
    NOT_IN          reduce using rule 287 (simpleIdentifier -> LONG .)
    IS              reduce using rule 287 (simpleIdentifier -> LONG .)
    NOT_IS          reduce using rule 287 (simpleIdentifier -> LONG .)
    MAIOR           reduce using rule 287 (simpleIdentifier -> LONG .)
    MENORIGUAL      reduce using rule 287 (simpleIdentifier -> LONG .)
    MAIORIGUAL      reduce using rule 287 (simpleIdentifier -> LONG .)
    DIFERENTE       reduce using rule 287 (simpleIdentifier -> LONG .)
    IDENTIDADE      reduce using rule 287 (simpleIdentifier -> LONG .)
    IGUALDADE       reduce using rule 287 (simpleIdentifier -> LONG .)
    SEMIDENTIDADE   reduce using rule 287 (simpleIdentifier -> LONG .)
    AND             reduce using rule 287 (simpleIdentifier -> LONG .)
    OR              reduce using rule 287 (simpleIdentifier -> LONG .)
    FUN             reduce using rule 287 (simpleIdentifier -> LONG .)
    FOR             reduce using rule 287 (simpleIdentifier -> LONG .)
    WHILE           reduce using rule 287 (simpleIdentifier -> LONG .)
    DO              reduce using rule 287 (simpleIdentifier -> LONG .)
    LITERAL_STRING  reduce using rule 287 (simpleIdentifier -> LONG .)
    IF              reduce using rule 287 (simpleIdentifier -> LONG .)
    RETURN          reduce using rule 287 (simpleIdentifier -> LONG .)
    RETURN_AT       reduce using rule 287 (simpleIdentifier -> LONG .)
    CONTINUE        reduce using rule 287 (simpleIdentifier -> LONG .)
    CONTINUE_AT     reduce using rule 287 (simpleIdentifier -> LONG .)
    BREAK           reduce using rule 287 (simpleIdentifier -> LONG .)
    BREAK_AT        reduce using rule 287 (simpleIdentifier -> LONG .)
    NOT             reduce using rule 287 (simpleIdentifier -> LONG .)
    SUSPEND         reduce using rule 287 (simpleIdentifier -> LONG .)
    LCHAVE          reduce using rule 287 (simpleIdentifier -> LONG .)
    $end            reduce using rule 287 (simpleIdentifier -> LONG .)
    COMMA           reduce using rule 287 (simpleIdentifier -> LONG .)
    RPAREN          reduce using rule 287 (simpleIdentifier -> LONG .)
    RCCT            reduce using rule 287 (simpleIdentifier -> LONG .)
    PV              reduce using rule 287 (simpleIdentifier -> LONG .)
    ELSE            reduce using rule 287 (simpleIdentifier -> LONG .)
    SETA            reduce using rule 287 (simpleIdentifier -> LONG .)
    CLASS           reduce using rule 287 (simpleIdentifier -> LONG .)


state 31

    (288) simpleIdentifier -> ARRAY .

    LPAREN          reduce using rule 288 (simpleIdentifier -> ARRAY .)
    DOISP           reduce using rule 288 (simpleIdentifier -> ARRAY .)
    ATRIBUICAO      reduce using rule 288 (simpleIdentifier -> ARRAY .)
    INCREMENTO      reduce using rule 288 (simpleIdentifier -> ARRAY .)
    DECREMENTO      reduce using rule 288 (simpleIdentifier -> ARRAY .)
    MENOR           reduce using rule 288 (simpleIdentifier -> ARRAY .)
    LCCT            reduce using rule 288 (simpleIdentifier -> ARRAY .)
    COLONCOLON      reduce using rule 288 (simpleIdentifier -> ARRAY .)
    PONTO           reduce using rule 288 (simpleIdentifier -> ARRAY .)
    RCHAVE          reduce using rule 288 (simpleIdentifier -> ARRAY .)
    AS              reduce using rule 288 (simpleIdentifier -> ARRAY .)
    MAISIGUAL       reduce using rule 288 (simpleIdentifier -> ARRAY .)
    MENOSIGUAL      reduce using rule 288 (simpleIdentifier -> ARRAY .)
    MULTIGUAL       reduce using rule 288 (simpleIdentifier -> ARRAY .)
    DIVIGUAL        reduce using rule 288 (simpleIdentifier -> ARRAY .)
    MODIGUAL        reduce using rule 288 (simpleIdentifier -> ARRAY .)
    MULT            reduce using rule 288 (simpleIdentifier -> ARRAY .)
    DIVIDE          reduce using rule 288 (simpleIdentifier -> ARRAY .)
    MOD             reduce using rule 288 (simpleIdentifier -> ARRAY .)
    PLUS            reduce using rule 288 (simpleIdentifier -> ARRAY .)
    MINUS           reduce using rule 288 (simpleIdentifier -> ARRAY .)
    PONTOPONTO      reduce using rule 288 (simpleIdentifier -> ARRAY .)
    ID              reduce using rule 288 (simpleIdentifier -> ARRAY .)
    CROSSINLINE     reduce using rule 288 (simpleIdentifier -> ARRAY .)
    IMPORT          reduce using rule 288 (simpleIdentifier -> ARRAY .)
    INIT            reduce using rule 288 (simpleIdentifier -> ARRAY .)
    NOINLINE        reduce using rule 288 (simpleIdentifier -> ARRAY .)
    OUT             reduce using rule 288 (simpleIdentifier -> ARRAY .)
    VARARG          reduce using rule 288 (simpleIdentifier -> ARRAY .)
    WHERE           reduce using rule 288 (simpleIdentifier -> ARRAY .)
    OBJECT          reduce using rule 288 (simpleIdentifier -> ARRAY .)
    CONST           reduce using rule 288 (simpleIdentifier -> ARRAY .)
    CONSTRUCTOR     reduce using rule 288 (simpleIdentifier -> ARRAY .)
    EOF             reduce using rule 288 (simpleIdentifier -> ARRAY .)
    FALSE           reduce using rule 288 (simpleIdentifier -> ARRAY .)
    FUNCTION        reduce using rule 288 (simpleIdentifier -> ARRAY .)
    NULL            reduce using rule 288 (simpleIdentifier -> ARRAY .)
    NULLABLE        reduce using rule 288 (simpleIdentifier -> ARRAY .)
    NUMBER          reduce using rule 288 (simpleIdentifier -> ARRAY .)
    OPERATOR        reduce using rule 288 (simpleIdentifier -> ARRAY .)
    SMARTCAST       reduce using rule 288 (simpleIdentifier -> ARRAY .)
    THIS            reduce using rule 288 (simpleIdentifier -> ARRAY .)
    TRUE            reduce using rule 288 (simpleIdentifier -> ARRAY .)
    VAL             reduce using rule 288 (simpleIdentifier -> ARRAY .)
    VAR             reduce using rule 288 (simpleIdentifier -> ARRAY .)
    WHEN            reduce using rule 288 (simpleIdentifier -> ARRAY .)
    LONG            reduce using rule 288 (simpleIdentifier -> ARRAY .)
    ARRAY           reduce using rule 288 (simpleIdentifier -> ARRAY .)
    ELVIS           reduce using rule 288 (simpleIdentifier -> ARRAY .)
    IN              reduce using rule 288 (simpleIdentifier -> ARRAY .)
    NOT_IN          reduce using rule 288 (simpleIdentifier -> ARRAY .)
    IS              reduce using rule 288 (simpleIdentifier -> ARRAY .)
    NOT_IS          reduce using rule 288 (simpleIdentifier -> ARRAY .)
    MAIOR           reduce using rule 288 (simpleIdentifier -> ARRAY .)
    MENORIGUAL      reduce using rule 288 (simpleIdentifier -> ARRAY .)
    MAIORIGUAL      reduce using rule 288 (simpleIdentifier -> ARRAY .)
    DIFERENTE       reduce using rule 288 (simpleIdentifier -> ARRAY .)
    IDENTIDADE      reduce using rule 288 (simpleIdentifier -> ARRAY .)
    IGUALDADE       reduce using rule 288 (simpleIdentifier -> ARRAY .)
    SEMIDENTIDADE   reduce using rule 288 (simpleIdentifier -> ARRAY .)
    AND             reduce using rule 288 (simpleIdentifier -> ARRAY .)
    OR              reduce using rule 288 (simpleIdentifier -> ARRAY .)
    FUN             reduce using rule 288 (simpleIdentifier -> ARRAY .)
    FOR             reduce using rule 288 (simpleIdentifier -> ARRAY .)
    WHILE           reduce using rule 288 (simpleIdentifier -> ARRAY .)
    DO              reduce using rule 288 (simpleIdentifier -> ARRAY .)
    LITERAL_STRING  reduce using rule 288 (simpleIdentifier -> ARRAY .)
    IF              reduce using rule 288 (simpleIdentifier -> ARRAY .)
    RETURN          reduce using rule 288 (simpleIdentifier -> ARRAY .)
    RETURN_AT       reduce using rule 288 (simpleIdentifier -> ARRAY .)
    CONTINUE        reduce using rule 288 (simpleIdentifier -> ARRAY .)
    CONTINUE_AT     reduce using rule 288 (simpleIdentifier -> ARRAY .)
    BREAK           reduce using rule 288 (simpleIdentifier -> ARRAY .)
    BREAK_AT        reduce using rule 288 (simpleIdentifier -> ARRAY .)
    NOT             reduce using rule 288 (simpleIdentifier -> ARRAY .)
    SUSPEND         reduce using rule 288 (simpleIdentifier -> ARRAY .)
    LCHAVE          reduce using rule 288 (simpleIdentifier -> ARRAY .)
    $end            reduce using rule 288 (simpleIdentifier -> ARRAY .)
    COMMA           reduce using rule 288 (simpleIdentifier -> ARRAY .)
    RPAREN          reduce using rule 288 (simpleIdentifier -> ARRAY .)
    RCCT            reduce using rule 288 (simpleIdentifier -> ARRAY .)
    PV              reduce using rule 288 (simpleIdentifier -> ARRAY .)
    ELSE            reduce using rule 288 (simpleIdentifier -> ARRAY .)
    SETA            reduce using rule 288 (simpleIdentifier -> ARRAY .)
    CLASS           reduce using rule 288 (simpleIdentifier -> ARRAY .)


state 32

    (7) functionDeclaration -> FUN simpleIdentifier functionValueParameters . optionalType optionalBlock
    (3) optionalType -> . DOISP type
    (4) optionalType -> .

    DOISP           shift and go to state 35
    LCHAVE          reduce using rule 4 (optionalType -> .)
    FUN             reduce using rule 4 (optionalType -> .)
    $end            reduce using rule 4 (optionalType -> .)
    FOR             reduce using rule 4 (optionalType -> .)
    WHILE           reduce using rule 4 (optionalType -> .)
    DO              reduce using rule 4 (optionalType -> .)
    VAR             reduce using rule 4 (optionalType -> .)
    VAL             reduce using rule 4 (optionalType -> .)
    ID              reduce using rule 4 (optionalType -> .)
    CROSSINLINE     reduce using rule 4 (optionalType -> .)
    IMPORT          reduce using rule 4 (optionalType -> .)
    INIT            reduce using rule 4 (optionalType -> .)
    NOINLINE        reduce using rule 4 (optionalType -> .)
    OUT             reduce using rule 4 (optionalType -> .)
    VARARG          reduce using rule 4 (optionalType -> .)
    WHERE           reduce using rule 4 (optionalType -> .)
    OBJECT          reduce using rule 4 (optionalType -> .)
    CONST           reduce using rule 4 (optionalType -> .)
    CONSTRUCTOR     reduce using rule 4 (optionalType -> .)
    EOF             reduce using rule 4 (optionalType -> .)
    FALSE           reduce using rule 4 (optionalType -> .)
    FUNCTION        reduce using rule 4 (optionalType -> .)
    NULL            reduce using rule 4 (optionalType -> .)
    NULLABLE        reduce using rule 4 (optionalType -> .)
    NUMBER          reduce using rule 4 (optionalType -> .)
    OPERATOR        reduce using rule 4 (optionalType -> .)
    SMARTCAST       reduce using rule 4 (optionalType -> .)
    THIS            reduce using rule 4 (optionalType -> .)
    TRUE            reduce using rule 4 (optionalType -> .)
    WHEN            reduce using rule 4 (optionalType -> .)
    LONG            reduce using rule 4 (optionalType -> .)
    ARRAY           reduce using rule 4 (optionalType -> .)
    LPAREN          reduce using rule 4 (optionalType -> .)
    LITERAL_STRING  reduce using rule 4 (optionalType -> .)
    LCCT            reduce using rule 4 (optionalType -> .)
    IF              reduce using rule 4 (optionalType -> .)
    RETURN          reduce using rule 4 (optionalType -> .)
    RETURN_AT       reduce using rule 4 (optionalType -> .)
    CONTINUE        reduce using rule 4 (optionalType -> .)
    CONTINUE_AT     reduce using rule 4 (optionalType -> .)
    BREAK           reduce using rule 4 (optionalType -> .)
    BREAK_AT        reduce using rule 4 (optionalType -> .)
    RCHAVE          reduce using rule 4 (optionalType -> .)
    INCREMENTO      reduce using rule 4 (optionalType -> .)
    DECREMENTO      reduce using rule 4 (optionalType -> .)
    MINUS           reduce using rule 4 (optionalType -> .)
    PLUS            reduce using rule 4 (optionalType -> .)
    NOT             reduce using rule 4 (optionalType -> .)
    SUSPEND         reduce using rule 4 (optionalType -> .)
    COLONCOLON      reduce using rule 4 (optionalType -> .)
    MENOR           reduce using rule 4 (optionalType -> .)
    PONTO           reduce using rule 4 (optionalType -> .)
    AS              reduce using rule 4 (optionalType -> .)
    MAISIGUAL       reduce using rule 4 (optionalType -> .)
    MENOSIGUAL      reduce using rule 4 (optionalType -> .)
    MULTIGUAL       reduce using rule 4 (optionalType -> .)
    DIVIGUAL        reduce using rule 4 (optionalType -> .)
    MODIGUAL        reduce using rule 4 (optionalType -> .)
    MULT            reduce using rule 4 (optionalType -> .)
    DIVIDE          reduce using rule 4 (optionalType -> .)
    MOD             reduce using rule 4 (optionalType -> .)
    PONTOPONTO      reduce using rule 4 (optionalType -> .)
    ELVIS           reduce using rule 4 (optionalType -> .)
    IN              reduce using rule 4 (optionalType -> .)
    NOT_IN          reduce using rule 4 (optionalType -> .)
    IS              reduce using rule 4 (optionalType -> .)
    NOT_IS          reduce using rule 4 (optionalType -> .)
    MAIOR           reduce using rule 4 (optionalType -> .)
    MENORIGUAL      reduce using rule 4 (optionalType -> .)
    MAIORIGUAL      reduce using rule 4 (optionalType -> .)
    DIFERENTE       reduce using rule 4 (optionalType -> .)
    IDENTIDADE      reduce using rule 4 (optionalType -> .)
    IGUALDADE       reduce using rule 4 (optionalType -> .)
    SEMIDENTIDADE   reduce using rule 4 (optionalType -> .)
    AND             reduce using rule 4 (optionalType -> .)
    OR              reduce using rule 4 (optionalType -> .)
    COMMA           reduce using rule 4 (optionalType -> .)
    RPAREN          reduce using rule 4 (optionalType -> .)
    RCCT            reduce using rule 4 (optionalType -> .)
    PV              reduce using rule 4 (optionalType -> .)
    ELSE            reduce using rule 4 (optionalType -> .)

    optionalType                   shift and go to state 34

state 33

    (27) functionValueParameters -> LPAREN . functionValueParametersRecursive RPAREN
    (28) functionValueParameters -> LPAREN . RPAREN
    (29) functionValueParametersRecursive -> . functionValueParameter optionalCOMMA
    (30) functionValueParametersRecursive -> . functionValueParameter COMMA functionValueParametersRecursive
    (31) functionValueParameter -> . parameter ATRIBUICAO expression
    (32) functionValueParameter -> . parameter
    (39) parameter -> . simpleIdentifier DOISP type
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY

    RPAREN          shift and go to state 37
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

    functionValueParametersRecursive shift and go to state 36
    functionValueParameter         shift and go to state 38
    parameter                      shift and go to state 39
    simpleIdentifier               shift and go to state 40

state 34

    (7) functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType . optionalBlock
    (5) optionalBlock -> . block
    (6) optionalBlock -> .
    (79) block -> . LCHAVE statements RCHAVE

  ! shift/reduce conflict for LCHAVE resolved as shift
    FUN             reduce using rule 6 (optionalBlock -> .)
    $end            reduce using rule 6 (optionalBlock -> .)
    FOR             reduce using rule 6 (optionalBlock -> .)
    WHILE           reduce using rule 6 (optionalBlock -> .)
    DO              reduce using rule 6 (optionalBlock -> .)
    VAR             reduce using rule 6 (optionalBlock -> .)
    VAL             reduce using rule 6 (optionalBlock -> .)
    ID              reduce using rule 6 (optionalBlock -> .)
    CROSSINLINE     reduce using rule 6 (optionalBlock -> .)
    IMPORT          reduce using rule 6 (optionalBlock -> .)
    INIT            reduce using rule 6 (optionalBlock -> .)
    NOINLINE        reduce using rule 6 (optionalBlock -> .)
    OUT             reduce using rule 6 (optionalBlock -> .)
    VARARG          reduce using rule 6 (optionalBlock -> .)
    WHERE           reduce using rule 6 (optionalBlock -> .)
    OBJECT          reduce using rule 6 (optionalBlock -> .)
    CONST           reduce using rule 6 (optionalBlock -> .)
    CONSTRUCTOR     reduce using rule 6 (optionalBlock -> .)
    EOF             reduce using rule 6 (optionalBlock -> .)
    FALSE           reduce using rule 6 (optionalBlock -> .)
    FUNCTION        reduce using rule 6 (optionalBlock -> .)
    NULL            reduce using rule 6 (optionalBlock -> .)
    NULLABLE        reduce using rule 6 (optionalBlock -> .)
    NUMBER          reduce using rule 6 (optionalBlock -> .)
    OPERATOR        reduce using rule 6 (optionalBlock -> .)
    SMARTCAST       reduce using rule 6 (optionalBlock -> .)
    THIS            reduce using rule 6 (optionalBlock -> .)
    TRUE            reduce using rule 6 (optionalBlock -> .)
    WHEN            reduce using rule 6 (optionalBlock -> .)
    LONG            reduce using rule 6 (optionalBlock -> .)
    ARRAY           reduce using rule 6 (optionalBlock -> .)
    LPAREN          reduce using rule 6 (optionalBlock -> .)
    LITERAL_STRING  reduce using rule 6 (optionalBlock -> .)
    LCCT            reduce using rule 6 (optionalBlock -> .)
    IF              reduce using rule 6 (optionalBlock -> .)
    RETURN          reduce using rule 6 (optionalBlock -> .)
    RETURN_AT       reduce using rule 6 (optionalBlock -> .)
    CONTINUE        reduce using rule 6 (optionalBlock -> .)
    CONTINUE_AT     reduce using rule 6 (optionalBlock -> .)
    BREAK           reduce using rule 6 (optionalBlock -> .)
    BREAK_AT        reduce using rule 6 (optionalBlock -> .)
    RCHAVE          reduce using rule 6 (optionalBlock -> .)
    INCREMENTO      reduce using rule 6 (optionalBlock -> .)
    DECREMENTO      reduce using rule 6 (optionalBlock -> .)
    MINUS           reduce using rule 6 (optionalBlock -> .)
    PLUS            reduce using rule 6 (optionalBlock -> .)
    NOT             reduce using rule 6 (optionalBlock -> .)
    SUSPEND         reduce using rule 6 (optionalBlock -> .)
    COLONCOLON      reduce using rule 6 (optionalBlock -> .)
    MENOR           reduce using rule 6 (optionalBlock -> .)
    PONTO           reduce using rule 6 (optionalBlock -> .)
    AS              reduce using rule 6 (optionalBlock -> .)
    MAISIGUAL       reduce using rule 6 (optionalBlock -> .)
    MENOSIGUAL      reduce using rule 6 (optionalBlock -> .)
    MULTIGUAL       reduce using rule 6 (optionalBlock -> .)
    DIVIGUAL        reduce using rule 6 (optionalBlock -> .)
    MODIGUAL        reduce using rule 6 (optionalBlock -> .)
    MULT            reduce using rule 6 (optionalBlock -> .)
    DIVIDE          reduce using rule 6 (optionalBlock -> .)
    MOD             reduce using rule 6 (optionalBlock -> .)
    PONTOPONTO      reduce using rule 6 (optionalBlock -> .)
    ELVIS           reduce using rule 6 (optionalBlock -> .)
    IN              reduce using rule 6 (optionalBlock -> .)
    NOT_IN          reduce using rule 6 (optionalBlock -> .)
    IS              reduce using rule 6 (optionalBlock -> .)
    NOT_IS          reduce using rule 6 (optionalBlock -> .)
    MAIOR           reduce using rule 6 (optionalBlock -> .)
    MENORIGUAL      reduce using rule 6 (optionalBlock -> .)
    MAIORIGUAL      reduce using rule 6 (optionalBlock -> .)
    DIFERENTE       reduce using rule 6 (optionalBlock -> .)
    IDENTIDADE      reduce using rule 6 (optionalBlock -> .)
    IGUALDADE       reduce using rule 6 (optionalBlock -> .)
    SEMIDENTIDADE   reduce using rule 6 (optionalBlock -> .)
    AND             reduce using rule 6 (optionalBlock -> .)
    OR              reduce using rule 6 (optionalBlock -> .)
    COMMA           reduce using rule 6 (optionalBlock -> .)
    RPAREN          reduce using rule 6 (optionalBlock -> .)
    RCCT            reduce using rule 6 (optionalBlock -> .)
    PV              reduce using rule 6 (optionalBlock -> .)
    ELSE            reduce using rule 6 (optionalBlock -> .)
    LCHAVE          shift and go to state 43

  ! LCHAVE          [ reduce using rule 6 (optionalBlock -> .) ]

    optionalBlock                  shift and go to state 41
    block                          shift and go to state 42

state 35

    (3) optionalType -> DOISP . type
    (40) type -> . optionalTypeModifiers optype
    (41) optionalTypeModifiers -> . typeModifiers
    (42) optionalTypeModifiers -> .
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (48) typeModifier -> . SUSPEND

  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 42 (optionalTypeModifiers -> .)
    ID              reduce using rule 42 (optionalTypeModifiers -> .)
    CROSSINLINE     reduce using rule 42 (optionalTypeModifiers -> .)
    IMPORT          reduce using rule 42 (optionalTypeModifiers -> .)
    INIT            reduce using rule 42 (optionalTypeModifiers -> .)
    NOINLINE        reduce using rule 42 (optionalTypeModifiers -> .)
    OUT             reduce using rule 42 (optionalTypeModifiers -> .)
    VARARG          reduce using rule 42 (optionalTypeModifiers -> .)
    WHERE           reduce using rule 42 (optionalTypeModifiers -> .)
    OBJECT          reduce using rule 42 (optionalTypeModifiers -> .)
    CONST           reduce using rule 42 (optionalTypeModifiers -> .)
    CONSTRUCTOR     reduce using rule 42 (optionalTypeModifiers -> .)
    EOF             reduce using rule 42 (optionalTypeModifiers -> .)
    FALSE           reduce using rule 42 (optionalTypeModifiers -> .)
    FUNCTION        reduce using rule 42 (optionalTypeModifiers -> .)
    NULL            reduce using rule 42 (optionalTypeModifiers -> .)
    NULLABLE        reduce using rule 42 (optionalTypeModifiers -> .)
    NUMBER          reduce using rule 42 (optionalTypeModifiers -> .)
    OPERATOR        reduce using rule 42 (optionalTypeModifiers -> .)
    SMARTCAST       reduce using rule 42 (optionalTypeModifiers -> .)
    THIS            reduce using rule 42 (optionalTypeModifiers -> .)
    TRUE            reduce using rule 42 (optionalTypeModifiers -> .)
    VAL             reduce using rule 42 (optionalTypeModifiers -> .)
    VAR             reduce using rule 42 (optionalTypeModifiers -> .)
    WHEN            reduce using rule 42 (optionalTypeModifiers -> .)
    LONG            reduce using rule 42 (optionalTypeModifiers -> .)
    ARRAY           reduce using rule 42 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 42 (optionalTypeModifiers -> .) ]

    type                           shift and go to state 44
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 36

    (27) functionValueParameters -> LPAREN functionValueParametersRecursive . RPAREN

    RPAREN          shift and go to state 49


state 37

    (28) functionValueParameters -> LPAREN RPAREN .

    DOISP           reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    LCHAVE          reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    FUN             reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    $end            reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    FOR             reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    WHILE           reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    DO              reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    VAR             reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    VAL             reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    ID              reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    CROSSINLINE     reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    IMPORT          reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    INIT            reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    NOINLINE        reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    OUT             reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    VARARG          reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    WHERE           reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    OBJECT          reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    CONST           reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    CONSTRUCTOR     reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    EOF             reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    FALSE           reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    FUNCTION        reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    NULL            reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    NULLABLE        reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    NUMBER          reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    OPERATOR        reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    SMARTCAST       reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    THIS            reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    TRUE            reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    WHEN            reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    LONG            reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    ARRAY           reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    LPAREN          reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    LITERAL_STRING  reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    LCCT            reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    IF              reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    RETURN          reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    RETURN_AT       reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    CONTINUE        reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    CONTINUE_AT     reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    BREAK           reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    BREAK_AT        reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    RCHAVE          reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    INCREMENTO      reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    DECREMENTO      reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    MINUS           reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    PLUS            reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    NOT             reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    SUSPEND         reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    COLONCOLON      reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    MENOR           reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    PONTO           reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    AS              reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    MAISIGUAL       reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    MENOSIGUAL      reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    MULTIGUAL       reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    DIVIGUAL        reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    MODIGUAL        reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    MULT            reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    MOD             reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    PONTOPONTO      reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    ELVIS           reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    IN              reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    NOT_IN          reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    IS              reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    NOT_IS          reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    MAIOR           reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    MENORIGUAL      reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    MAIORIGUAL      reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    DIFERENTE       reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    IDENTIDADE      reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    IGUALDADE       reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    SEMIDENTIDADE   reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    AND             reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    OR              reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    COMMA           reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    RPAREN          reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    RCCT            reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    PV              reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    ELSE            reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)


state 38

    (29) functionValueParametersRecursive -> functionValueParameter . optionalCOMMA
    (30) functionValueParametersRecursive -> functionValueParameter . COMMA functionValueParametersRecursive
    (21) optionalCOMMA -> . COMMA
    (22) optionalCOMMA -> .

    COMMA           shift and go to state 51
    RPAREN          reduce using rule 22 (optionalCOMMA -> .)

    optionalCOMMA                  shift and go to state 50

state 39

    (31) functionValueParameter -> parameter . ATRIBUICAO expression
    (32) functionValueParameter -> parameter .

    ATRIBUICAO      shift and go to state 52
    COMMA           reduce using rule 32 (functionValueParameter -> parameter .)
    RPAREN          reduce using rule 32 (functionValueParameter -> parameter .)


state 40

    (39) parameter -> simpleIdentifier . DOISP type

    DOISP           shift and go to state 53


state 41

    (7) functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .

    FUN             reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    $end            reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    FOR             reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    WHILE           reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    DO              reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    VAR             reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    VAL             reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    ID              reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    CROSSINLINE     reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    IMPORT          reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    INIT            reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    NOINLINE        reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    OUT             reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    VARARG          reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    WHERE           reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    OBJECT          reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    CONST           reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    CONSTRUCTOR     reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    EOF             reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    FALSE           reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    FUNCTION        reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    NULL            reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    NULLABLE        reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    NUMBER          reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    OPERATOR        reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    SMARTCAST       reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    THIS            reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    TRUE            reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    WHEN            reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    LONG            reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    ARRAY           reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    LPAREN          reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    LITERAL_STRING  reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    LCCT            reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    IF              reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    RETURN          reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    RETURN_AT       reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    CONTINUE        reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    CONTINUE_AT     reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    BREAK           reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    BREAK_AT        reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    RCHAVE          reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    INCREMENTO      reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    DECREMENTO      reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MINUS           reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    PLUS            reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    NOT             reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    SUSPEND         reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    COLONCOLON      reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    LCHAVE          reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MENOR           reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    PONTO           reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    AS              reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MAISIGUAL       reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MENOSIGUAL      reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MULTIGUAL       reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    DIVIGUAL        reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MODIGUAL        reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MULT            reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    DIVIDE          reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MOD             reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    PONTOPONTO      reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    ELVIS           reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    IN              reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    NOT_IN          reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    IS              reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    NOT_IS          reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MAIOR           reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MENORIGUAL      reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MAIORIGUAL      reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    DIFERENTE       reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    IDENTIDADE      reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    IGUALDADE       reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    SEMIDENTIDADE   reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    AND             reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    OR              reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    COMMA           reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    RPAREN          reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    RCCT            reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    PV              reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    ELSE            reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)


state 42

    (5) optionalBlock -> block .

    FUN             reduce using rule 5 (optionalBlock -> block .)
    $end            reduce using rule 5 (optionalBlock -> block .)
    FOR             reduce using rule 5 (optionalBlock -> block .)
    WHILE           reduce using rule 5 (optionalBlock -> block .)
    DO              reduce using rule 5 (optionalBlock -> block .)
    VAR             reduce using rule 5 (optionalBlock -> block .)
    VAL             reduce using rule 5 (optionalBlock -> block .)
    ID              reduce using rule 5 (optionalBlock -> block .)
    CROSSINLINE     reduce using rule 5 (optionalBlock -> block .)
    IMPORT          reduce using rule 5 (optionalBlock -> block .)
    INIT            reduce using rule 5 (optionalBlock -> block .)
    NOINLINE        reduce using rule 5 (optionalBlock -> block .)
    OUT             reduce using rule 5 (optionalBlock -> block .)
    VARARG          reduce using rule 5 (optionalBlock -> block .)
    WHERE           reduce using rule 5 (optionalBlock -> block .)
    OBJECT          reduce using rule 5 (optionalBlock -> block .)
    CONST           reduce using rule 5 (optionalBlock -> block .)
    CONSTRUCTOR     reduce using rule 5 (optionalBlock -> block .)
    EOF             reduce using rule 5 (optionalBlock -> block .)
    FALSE           reduce using rule 5 (optionalBlock -> block .)
    FUNCTION        reduce using rule 5 (optionalBlock -> block .)
    NULL            reduce using rule 5 (optionalBlock -> block .)
    NULLABLE        reduce using rule 5 (optionalBlock -> block .)
    NUMBER          reduce using rule 5 (optionalBlock -> block .)
    OPERATOR        reduce using rule 5 (optionalBlock -> block .)
    SMARTCAST       reduce using rule 5 (optionalBlock -> block .)
    THIS            reduce using rule 5 (optionalBlock -> block .)
    TRUE            reduce using rule 5 (optionalBlock -> block .)
    WHEN            reduce using rule 5 (optionalBlock -> block .)
    LONG            reduce using rule 5 (optionalBlock -> block .)
    ARRAY           reduce using rule 5 (optionalBlock -> block .)
    LPAREN          reduce using rule 5 (optionalBlock -> block .)
    LITERAL_STRING  reduce using rule 5 (optionalBlock -> block .)
    LCCT            reduce using rule 5 (optionalBlock -> block .)
    IF              reduce using rule 5 (optionalBlock -> block .)
    RETURN          reduce using rule 5 (optionalBlock -> block .)
    RETURN_AT       reduce using rule 5 (optionalBlock -> block .)
    CONTINUE        reduce using rule 5 (optionalBlock -> block .)
    CONTINUE_AT     reduce using rule 5 (optionalBlock -> block .)
    BREAK           reduce using rule 5 (optionalBlock -> block .)
    BREAK_AT        reduce using rule 5 (optionalBlock -> block .)
    RCHAVE          reduce using rule 5 (optionalBlock -> block .)
    INCREMENTO      reduce using rule 5 (optionalBlock -> block .)
    DECREMENTO      reduce using rule 5 (optionalBlock -> block .)
    MINUS           reduce using rule 5 (optionalBlock -> block .)
    PLUS            reduce using rule 5 (optionalBlock -> block .)
    NOT             reduce using rule 5 (optionalBlock -> block .)
    SUSPEND         reduce using rule 5 (optionalBlock -> block .)
    COLONCOLON      reduce using rule 5 (optionalBlock -> block .)
    LCHAVE          reduce using rule 5 (optionalBlock -> block .)
    MENOR           reduce using rule 5 (optionalBlock -> block .)
    PONTO           reduce using rule 5 (optionalBlock -> block .)
    AS              reduce using rule 5 (optionalBlock -> block .)
    MAISIGUAL       reduce using rule 5 (optionalBlock -> block .)
    MENOSIGUAL      reduce using rule 5 (optionalBlock -> block .)
    MULTIGUAL       reduce using rule 5 (optionalBlock -> block .)
    DIVIGUAL        reduce using rule 5 (optionalBlock -> block .)
    MODIGUAL        reduce using rule 5 (optionalBlock -> block .)
    MULT            reduce using rule 5 (optionalBlock -> block .)
    DIVIDE          reduce using rule 5 (optionalBlock -> block .)
    MOD             reduce using rule 5 (optionalBlock -> block .)
    PONTOPONTO      reduce using rule 5 (optionalBlock -> block .)
    ELVIS           reduce using rule 5 (optionalBlock -> block .)
    IN              reduce using rule 5 (optionalBlock -> block .)
    NOT_IN          reduce using rule 5 (optionalBlock -> block .)
    IS              reduce using rule 5 (optionalBlock -> block .)
    NOT_IS          reduce using rule 5 (optionalBlock -> block .)
    MAIOR           reduce using rule 5 (optionalBlock -> block .)
    MENORIGUAL      reduce using rule 5 (optionalBlock -> block .)
    MAIORIGUAL      reduce using rule 5 (optionalBlock -> block .)
    DIFERENTE       reduce using rule 5 (optionalBlock -> block .)
    IDENTIDADE      reduce using rule 5 (optionalBlock -> block .)
    IGUALDADE       reduce using rule 5 (optionalBlock -> block .)
    SEMIDENTIDADE   reduce using rule 5 (optionalBlock -> block .)
    AND             reduce using rule 5 (optionalBlock -> block .)
    OR              reduce using rule 5 (optionalBlock -> block .)
    COMMA           reduce using rule 5 (optionalBlock -> block .)
    RPAREN          reduce using rule 5 (optionalBlock -> block .)
    RCCT            reduce using rule 5 (optionalBlock -> block .)
    PV              reduce using rule 5 (optionalBlock -> block .)
    ELSE            reduce using rule 5 (optionalBlock -> block .)


state 43

    (79) block -> LCHAVE . statements RCHAVE
    (70) statements -> . statement
    (71) statements -> . statement statements
    (72) statement -> . functionDeclaration
    (73) statement -> . assignment
    (74) statement -> . loopStatement
    (75) statement -> . expression
    (76) statement -> . propertyDeclaration
    (7) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (90) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (91) assignment -> . assignableExpression assignmentAndOperator expression
    (80) loopStatement -> . forStatement
    (81) loopStatement -> . whileStatement
    (82) loopStatement -> . doWhileStatement
    (12) expression -> . disjunction
    (17) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (136) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (137) directlyAssignableExpression -> . simpleIdentifier
    (138) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (140) assignableExpression -> . prefixUnaryExpression
    (141) assignableExpression -> . parenthesizedAssignableExpression
    (85) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody
    (86) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (87) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (88) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (89) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (13) varOrVal -> . VAR
    (14) varOrVal -> . VAL
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (139) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (142) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (69) receiverType -> . typeModifier parenthesizedType
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (48) typeModifier -> . SUSPEND
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type

    FUN             shift and go to state 62
    FOR             shift and go to state 75
    WHILE           shift and go to state 77
    DO              shift and go to state 78
    VAR             shift and go to state 80
    VAL             shift and go to state 81
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 76
    LITERAL_STRING  shift and go to state 86
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    SUSPEND         shift and go to state 48

    statements                     shift and go to state 54
    statement                      shift and go to state 56
    functionDeclaration            shift and go to state 57
    assignment                     shift and go to state 58
    loopStatement                  shift and go to state 59
    expression                     shift and go to state 60
    propertyDeclaration            shift and go to state 61
    simpleIdentifier               shift and go to state 63
    directlyAssignableExpression   shift and go to state 64
    assignableExpression           shift and go to state 65
    forStatement                   shift and go to state 66
    whileStatement                 shift and go to state 67
    doWhileStatement               shift and go to state 68
    disjunction                    shift and go to state 69
    varOrVal                       shift and go to state 70
    postfixUnaryExpression         shift and go to state 71
    parenthesizedDirectlyAssignableExpression shift and go to state 72
    prefixUnaryExpression          shift and go to state 73
    parenthesizedAssignableExpression shift and go to state 74
    conjunction                    shift and go to state 79
    primaryExpression              shift and go to state 82
    prefixUnaryExpressionRecursive shift and go to state 83
    equality                       shift and go to state 84
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    unaryPrefix                    shift and go to state 92
    comparison                     shift and go to state 93
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    infixOperation                 shift and go to state 107
    receiverType                   shift and go to state 108
    elvisExpression                shift and go to state 114
    typeModifier                   shift and go to state 115
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120

state 44

    (3) optionalType -> DOISP type .

    LCHAVE          reduce using rule 3 (optionalType -> DOISP type .)
    FUN             reduce using rule 3 (optionalType -> DOISP type .)
    $end            reduce using rule 3 (optionalType -> DOISP type .)
    FOR             reduce using rule 3 (optionalType -> DOISP type .)
    WHILE           reduce using rule 3 (optionalType -> DOISP type .)
    DO              reduce using rule 3 (optionalType -> DOISP type .)
    VAR             reduce using rule 3 (optionalType -> DOISP type .)
    VAL             reduce using rule 3 (optionalType -> DOISP type .)
    ID              reduce using rule 3 (optionalType -> DOISP type .)
    CROSSINLINE     reduce using rule 3 (optionalType -> DOISP type .)
    IMPORT          reduce using rule 3 (optionalType -> DOISP type .)
    INIT            reduce using rule 3 (optionalType -> DOISP type .)
    NOINLINE        reduce using rule 3 (optionalType -> DOISP type .)
    OUT             reduce using rule 3 (optionalType -> DOISP type .)
    VARARG          reduce using rule 3 (optionalType -> DOISP type .)
    WHERE           reduce using rule 3 (optionalType -> DOISP type .)
    OBJECT          reduce using rule 3 (optionalType -> DOISP type .)
    CONST           reduce using rule 3 (optionalType -> DOISP type .)
    CONSTRUCTOR     reduce using rule 3 (optionalType -> DOISP type .)
    EOF             reduce using rule 3 (optionalType -> DOISP type .)
    FALSE           reduce using rule 3 (optionalType -> DOISP type .)
    FUNCTION        reduce using rule 3 (optionalType -> DOISP type .)
    NULL            reduce using rule 3 (optionalType -> DOISP type .)
    NULLABLE        reduce using rule 3 (optionalType -> DOISP type .)
    NUMBER          reduce using rule 3 (optionalType -> DOISP type .)
    OPERATOR        reduce using rule 3 (optionalType -> DOISP type .)
    SMARTCAST       reduce using rule 3 (optionalType -> DOISP type .)
    THIS            reduce using rule 3 (optionalType -> DOISP type .)
    TRUE            reduce using rule 3 (optionalType -> DOISP type .)
    WHEN            reduce using rule 3 (optionalType -> DOISP type .)
    LONG            reduce using rule 3 (optionalType -> DOISP type .)
    ARRAY           reduce using rule 3 (optionalType -> DOISP type .)
    LPAREN          reduce using rule 3 (optionalType -> DOISP type .)
    LITERAL_STRING  reduce using rule 3 (optionalType -> DOISP type .)
    LCCT            reduce using rule 3 (optionalType -> DOISP type .)
    IF              reduce using rule 3 (optionalType -> DOISP type .)
    RETURN          reduce using rule 3 (optionalType -> DOISP type .)
    RETURN_AT       reduce using rule 3 (optionalType -> DOISP type .)
    CONTINUE        reduce using rule 3 (optionalType -> DOISP type .)
    CONTINUE_AT     reduce using rule 3 (optionalType -> DOISP type .)
    BREAK           reduce using rule 3 (optionalType -> DOISP type .)
    BREAK_AT        reduce using rule 3 (optionalType -> DOISP type .)
    RCHAVE          reduce using rule 3 (optionalType -> DOISP type .)
    INCREMENTO      reduce using rule 3 (optionalType -> DOISP type .)
    DECREMENTO      reduce using rule 3 (optionalType -> DOISP type .)
    MINUS           reduce using rule 3 (optionalType -> DOISP type .)
    PLUS            reduce using rule 3 (optionalType -> DOISP type .)
    NOT             reduce using rule 3 (optionalType -> DOISP type .)
    SUSPEND         reduce using rule 3 (optionalType -> DOISP type .)
    COLONCOLON      reduce using rule 3 (optionalType -> DOISP type .)
    MENOR           reduce using rule 3 (optionalType -> DOISP type .)
    PONTO           reduce using rule 3 (optionalType -> DOISP type .)
    AS              reduce using rule 3 (optionalType -> DOISP type .)
    MAISIGUAL       reduce using rule 3 (optionalType -> DOISP type .)
    MENOSIGUAL      reduce using rule 3 (optionalType -> DOISP type .)
    MULTIGUAL       reduce using rule 3 (optionalType -> DOISP type .)
    DIVIGUAL        reduce using rule 3 (optionalType -> DOISP type .)
    MODIGUAL        reduce using rule 3 (optionalType -> DOISP type .)
    MULT            reduce using rule 3 (optionalType -> DOISP type .)
    DIVIDE          reduce using rule 3 (optionalType -> DOISP type .)
    MOD             reduce using rule 3 (optionalType -> DOISP type .)
    PONTOPONTO      reduce using rule 3 (optionalType -> DOISP type .)
    ELVIS           reduce using rule 3 (optionalType -> DOISP type .)
    IN              reduce using rule 3 (optionalType -> DOISP type .)
    NOT_IN          reduce using rule 3 (optionalType -> DOISP type .)
    IS              reduce using rule 3 (optionalType -> DOISP type .)
    NOT_IS          reduce using rule 3 (optionalType -> DOISP type .)
    MAIOR           reduce using rule 3 (optionalType -> DOISP type .)
    MENORIGUAL      reduce using rule 3 (optionalType -> DOISP type .)
    MAIORIGUAL      reduce using rule 3 (optionalType -> DOISP type .)
    DIFERENTE       reduce using rule 3 (optionalType -> DOISP type .)
    IDENTIDADE      reduce using rule 3 (optionalType -> DOISP type .)
    IGUALDADE       reduce using rule 3 (optionalType -> DOISP type .)
    SEMIDENTIDADE   reduce using rule 3 (optionalType -> DOISP type .)
    AND             reduce using rule 3 (optionalType -> DOISP type .)
    OR              reduce using rule 3 (optionalType -> DOISP type .)
    COMMA           reduce using rule 3 (optionalType -> DOISP type .)
    RPAREN          reduce using rule 3 (optionalType -> DOISP type .)
    RCCT            reduce using rule 3 (optionalType -> DOISP type .)
    PV              reduce using rule 3 (optionalType -> DOISP type .)
    ELSE            reduce using rule 3 (optionalType -> DOISP type .)
    SETA            reduce using rule 3 (optionalType -> DOISP type .)
    ATRIBUICAO      reduce using rule 3 (optionalType -> DOISP type .)


state 45

    (40) type -> optionalTypeModifiers . optype
    (43) optype -> . parenthesizedType
    (44) optype -> . functionType
    (45) optype -> . userType
    (68) parenthesizedType -> . LPAREN type RPAREN
    (59) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (60) functionType -> . functionTypeParameters SETA type
    (52) userType -> . simpleUserType
    (69) receiverType -> . typeModifier parenthesizedType
    (67) functionTypeParameters -> . LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
    (53) simpleUserType -> . simpleIdentifier typeArguments
    (54) simpleUserType -> . simpleIdentifier
    (48) typeModifier -> . SUSPEND
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY

    LPAREN          shift and go to state 125
    SUSPEND         shift and go to state 48
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

    optype                         shift and go to state 121
    parenthesizedType              shift and go to state 122
    functionType                   shift and go to state 123
    userType                       shift and go to state 124
    receiverType                   shift and go to state 126
    functionTypeParameters         shift and go to state 127
    simpleUserType                 shift and go to state 128
    typeModifier                   shift and go to state 115
    simpleIdentifier               shift and go to state 129

state 46

    (41) optionalTypeModifiers -> typeModifiers .

    LPAREN          reduce using rule 41 (optionalTypeModifiers -> typeModifiers .)
    SUSPEND         reduce using rule 41 (optionalTypeModifiers -> typeModifiers .)
    ID              reduce using rule 41 (optionalTypeModifiers -> typeModifiers .)
    CROSSINLINE     reduce using rule 41 (optionalTypeModifiers -> typeModifiers .)
    IMPORT          reduce using rule 41 (optionalTypeModifiers -> typeModifiers .)
    INIT            reduce using rule 41 (optionalTypeModifiers -> typeModifiers .)
    NOINLINE        reduce using rule 41 (optionalTypeModifiers -> typeModifiers .)
    OUT             reduce using rule 41 (optionalTypeModifiers -> typeModifiers .)
    VARARG          reduce using rule 41 (optionalTypeModifiers -> typeModifiers .)
    WHERE           reduce using rule 41 (optionalTypeModifiers -> typeModifiers .)
    OBJECT          reduce using rule 41 (optionalTypeModifiers -> typeModifiers .)
    CONST           reduce using rule 41 (optionalTypeModifiers -> typeModifiers .)
    CONSTRUCTOR     reduce using rule 41 (optionalTypeModifiers -> typeModifiers .)
    EOF             reduce using rule 41 (optionalTypeModifiers -> typeModifiers .)
    FALSE           reduce using rule 41 (optionalTypeModifiers -> typeModifiers .)
    FUNCTION        reduce using rule 41 (optionalTypeModifiers -> typeModifiers .)
    NULL            reduce using rule 41 (optionalTypeModifiers -> typeModifiers .)
    NULLABLE        reduce using rule 41 (optionalTypeModifiers -> typeModifiers .)
    NUMBER          reduce using rule 41 (optionalTypeModifiers -> typeModifiers .)
    OPERATOR        reduce using rule 41 (optionalTypeModifiers -> typeModifiers .)
    SMARTCAST       reduce using rule 41 (optionalTypeModifiers -> typeModifiers .)
    THIS            reduce using rule 41 (optionalTypeModifiers -> typeModifiers .)
    TRUE            reduce using rule 41 (optionalTypeModifiers -> typeModifiers .)
    VAL             reduce using rule 41 (optionalTypeModifiers -> typeModifiers .)
    VAR             reduce using rule 41 (optionalTypeModifiers -> typeModifiers .)
    WHEN            reduce using rule 41 (optionalTypeModifiers -> typeModifiers .)
    LONG            reduce using rule 41 (optionalTypeModifiers -> typeModifiers .)
    ARRAY           reduce using rule 41 (optionalTypeModifiers -> typeModifiers .)


state 47

    (46) typeModifiers -> typeModifier .
    (47) typeModifiers -> typeModifier . typeModifiers
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (48) typeModifier -> . SUSPEND

  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 46 (typeModifiers -> typeModifier .)
    ID              reduce using rule 46 (typeModifiers -> typeModifier .)
    CROSSINLINE     reduce using rule 46 (typeModifiers -> typeModifier .)
    IMPORT          reduce using rule 46 (typeModifiers -> typeModifier .)
    INIT            reduce using rule 46 (typeModifiers -> typeModifier .)
    NOINLINE        reduce using rule 46 (typeModifiers -> typeModifier .)
    OUT             reduce using rule 46 (typeModifiers -> typeModifier .)
    VARARG          reduce using rule 46 (typeModifiers -> typeModifier .)
    WHERE           reduce using rule 46 (typeModifiers -> typeModifier .)
    OBJECT          reduce using rule 46 (typeModifiers -> typeModifier .)
    CONST           reduce using rule 46 (typeModifiers -> typeModifier .)
    CONSTRUCTOR     reduce using rule 46 (typeModifiers -> typeModifier .)
    EOF             reduce using rule 46 (typeModifiers -> typeModifier .)
    FALSE           reduce using rule 46 (typeModifiers -> typeModifier .)
    FUNCTION        reduce using rule 46 (typeModifiers -> typeModifier .)
    NULL            reduce using rule 46 (typeModifiers -> typeModifier .)
    NULLABLE        reduce using rule 46 (typeModifiers -> typeModifier .)
    NUMBER          reduce using rule 46 (typeModifiers -> typeModifier .)
    OPERATOR        reduce using rule 46 (typeModifiers -> typeModifier .)
    SMARTCAST       reduce using rule 46 (typeModifiers -> typeModifier .)
    THIS            reduce using rule 46 (typeModifiers -> typeModifier .)
    TRUE            reduce using rule 46 (typeModifiers -> typeModifier .)
    VAL             reduce using rule 46 (typeModifiers -> typeModifier .)
    VAR             reduce using rule 46 (typeModifiers -> typeModifier .)
    WHEN            reduce using rule 46 (typeModifiers -> typeModifier .)
    LONG            reduce using rule 46 (typeModifiers -> typeModifier .)
    ARRAY           reduce using rule 46 (typeModifiers -> typeModifier .)
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 46 (typeModifiers -> typeModifier .) ]

    typeModifier                   shift and go to state 47
    typeModifiers                  shift and go to state 130

state 48

    (48) typeModifier -> SUSPEND .

    SUSPEND         reduce using rule 48 (typeModifier -> SUSPEND .)
    LPAREN          reduce using rule 48 (typeModifier -> SUSPEND .)
    ID              reduce using rule 48 (typeModifier -> SUSPEND .)
    CROSSINLINE     reduce using rule 48 (typeModifier -> SUSPEND .)
    IMPORT          reduce using rule 48 (typeModifier -> SUSPEND .)
    INIT            reduce using rule 48 (typeModifier -> SUSPEND .)
    NOINLINE        reduce using rule 48 (typeModifier -> SUSPEND .)
    OUT             reduce using rule 48 (typeModifier -> SUSPEND .)
    VARARG          reduce using rule 48 (typeModifier -> SUSPEND .)
    WHERE           reduce using rule 48 (typeModifier -> SUSPEND .)
    OBJECT          reduce using rule 48 (typeModifier -> SUSPEND .)
    CONST           reduce using rule 48 (typeModifier -> SUSPEND .)
    CONSTRUCTOR     reduce using rule 48 (typeModifier -> SUSPEND .)
    EOF             reduce using rule 48 (typeModifier -> SUSPEND .)
    FALSE           reduce using rule 48 (typeModifier -> SUSPEND .)
    FUNCTION        reduce using rule 48 (typeModifier -> SUSPEND .)
    NULL            reduce using rule 48 (typeModifier -> SUSPEND .)
    NULLABLE        reduce using rule 48 (typeModifier -> SUSPEND .)
    NUMBER          reduce using rule 48 (typeModifier -> SUSPEND .)
    OPERATOR        reduce using rule 48 (typeModifier -> SUSPEND .)
    SMARTCAST       reduce using rule 48 (typeModifier -> SUSPEND .)
    THIS            reduce using rule 48 (typeModifier -> SUSPEND .)
    TRUE            reduce using rule 48 (typeModifier -> SUSPEND .)
    VAL             reduce using rule 48 (typeModifier -> SUSPEND .)
    VAR             reduce using rule 48 (typeModifier -> SUSPEND .)
    WHEN            reduce using rule 48 (typeModifier -> SUSPEND .)
    LONG            reduce using rule 48 (typeModifier -> SUSPEND .)
    ARRAY           reduce using rule 48 (typeModifier -> SUSPEND .)


state 49

    (27) functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .

    DOISP           reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    LCHAVE          reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    FUN             reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    $end            reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    FOR             reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    WHILE           reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    DO              reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    VAR             reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    VAL             reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    ID              reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    CROSSINLINE     reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    IMPORT          reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    INIT            reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    NOINLINE        reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    OUT             reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    VARARG          reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    WHERE           reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    OBJECT          reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    CONST           reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    CONSTRUCTOR     reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    EOF             reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    FALSE           reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    FUNCTION        reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    NULL            reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    NULLABLE        reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    NUMBER          reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    OPERATOR        reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    SMARTCAST       reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    THIS            reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    TRUE            reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    WHEN            reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    LONG            reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    ARRAY           reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    LPAREN          reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    LITERAL_STRING  reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    LCCT            reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    IF              reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    RETURN          reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    RETURN_AT       reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    CONTINUE        reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    CONTINUE_AT     reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    BREAK           reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    BREAK_AT        reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    RCHAVE          reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    INCREMENTO      reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    DECREMENTO      reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MINUS           reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    PLUS            reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    NOT             reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    SUSPEND         reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    COLONCOLON      reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MENOR           reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    PONTO           reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    AS              reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MAISIGUAL       reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MENOSIGUAL      reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MULTIGUAL       reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    DIVIGUAL        reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MODIGUAL        reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MULT            reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    DIVIDE          reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MOD             reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    PONTOPONTO      reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    ELVIS           reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    IN              reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    NOT_IN          reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    IS              reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    NOT_IS          reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MAIOR           reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MENORIGUAL      reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MAIORIGUAL      reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    DIFERENTE       reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    IDENTIDADE      reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    IGUALDADE       reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    SEMIDENTIDADE   reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    AND             reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    OR              reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    COMMA           reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    RPAREN          reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    RCCT            reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    PV              reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    ELSE            reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)


state 50

    (29) functionValueParametersRecursive -> functionValueParameter optionalCOMMA .

    RPAREN          reduce using rule 29 (functionValueParametersRecursive -> functionValueParameter optionalCOMMA .)


state 51

    (30) functionValueParametersRecursive -> functionValueParameter COMMA . functionValueParametersRecursive
    (21) optionalCOMMA -> COMMA .
    (29) functionValueParametersRecursive -> . functionValueParameter optionalCOMMA
    (30) functionValueParametersRecursive -> . functionValueParameter COMMA functionValueParametersRecursive
    (31) functionValueParameter -> . parameter ATRIBUICAO expression
    (32) functionValueParameter -> . parameter
    (39) parameter -> . simpleIdentifier DOISP type
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY

    RPAREN          reduce using rule 21 (optionalCOMMA -> COMMA .)
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

    functionValueParameter         shift and go to state 38
    functionValueParametersRecursive shift and go to state 131
    parameter                      shift and go to state 39
    simpleIdentifier               shift and go to state 40

state 52

    (31) functionValueParameter -> parameter ATRIBUICAO . expression
    (12) expression -> . disjunction
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 86
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 136
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 132
    disjunction                    shift and go to state 69
    conjunction                    shift and go to state 79
    equality                       shift and go to state 84
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 107
    elvisExpression                shift and go to state 114
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    simpleIdentifier               shift and go to state 133
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120
    prefixUnaryExpression          shift and go to state 134
    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 135
    unaryPrefix                    shift and go to state 92
    primaryExpression              shift and go to state 82
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    typeModifier                   shift and go to state 115

state 53

    (39) parameter -> simpleIdentifier DOISP . type
    (40) type -> . optionalTypeModifiers optype
    (41) optionalTypeModifiers -> . typeModifiers
    (42) optionalTypeModifiers -> .
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (48) typeModifier -> . SUSPEND

  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 42 (optionalTypeModifiers -> .)
    ID              reduce using rule 42 (optionalTypeModifiers -> .)
    CROSSINLINE     reduce using rule 42 (optionalTypeModifiers -> .)
    IMPORT          reduce using rule 42 (optionalTypeModifiers -> .)
    INIT            reduce using rule 42 (optionalTypeModifiers -> .)
    NOINLINE        reduce using rule 42 (optionalTypeModifiers -> .)
    OUT             reduce using rule 42 (optionalTypeModifiers -> .)
    VARARG          reduce using rule 42 (optionalTypeModifiers -> .)
    WHERE           reduce using rule 42 (optionalTypeModifiers -> .)
    OBJECT          reduce using rule 42 (optionalTypeModifiers -> .)
    CONST           reduce using rule 42 (optionalTypeModifiers -> .)
    CONSTRUCTOR     reduce using rule 42 (optionalTypeModifiers -> .)
    EOF             reduce using rule 42 (optionalTypeModifiers -> .)
    FALSE           reduce using rule 42 (optionalTypeModifiers -> .)
    FUNCTION        reduce using rule 42 (optionalTypeModifiers -> .)
    NULL            reduce using rule 42 (optionalTypeModifiers -> .)
    NULLABLE        reduce using rule 42 (optionalTypeModifiers -> .)
    NUMBER          reduce using rule 42 (optionalTypeModifiers -> .)
    OPERATOR        reduce using rule 42 (optionalTypeModifiers -> .)
    SMARTCAST       reduce using rule 42 (optionalTypeModifiers -> .)
    THIS            reduce using rule 42 (optionalTypeModifiers -> .)
    TRUE            reduce using rule 42 (optionalTypeModifiers -> .)
    VAL             reduce using rule 42 (optionalTypeModifiers -> .)
    VAR             reduce using rule 42 (optionalTypeModifiers -> .)
    WHEN            reduce using rule 42 (optionalTypeModifiers -> .)
    LONG            reduce using rule 42 (optionalTypeModifiers -> .)
    ARRAY           reduce using rule 42 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 42 (optionalTypeModifiers -> .) ]

    type                           shift and go to state 138
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 54

    (79) block -> LCHAVE statements . RCHAVE

    RCHAVE          shift and go to state 139


state 55

    (193) lambdaLiteral -> RCHAVE . optionsLambdaLiteral LCHAVE
    (194) optionsLambdaLiteral -> . statements
    (195) optionsLambdaLiteral -> . lambdaParameters SETA statements
    (196) optionsLambdaLiteral -> . SETA statements
    (70) statements -> . statement
    (71) statements -> . statement statements
    (197) lambdaParameters -> . lambdaParameter
    (198) lambdaParameters -> . lambdaParameter COMMA lambdaParameters
    (72) statement -> . functionDeclaration
    (73) statement -> . assignment
    (74) statement -> . loopStatement
    (75) statement -> . expression
    (76) statement -> . propertyDeclaration
    (199) lambdaParameter -> . variableDeclaration
    (200) lambdaParameter -> . multiVariableDeclaration optionalType
    (7) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (90) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (91) assignment -> . assignableExpression assignmentAndOperator expression
    (80) loopStatement -> . forStatement
    (81) loopStatement -> . whileStatement
    (82) loopStatement -> . doWhileStatement
    (12) expression -> . disjunction
    (17) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (33) variableDeclaration -> . simpleIdentifier DOISP type
    (34) variableDeclaration -> . simpleIdentifier
    (35) multiVariableDeclaration -> . LPAREN multiVariableDeclarationRecursive RPAREN
    (36) multiVariableDeclaration -> . LPAREN RPAREN
    (136) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (137) directlyAssignableExpression -> . simpleIdentifier
    (138) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (140) assignableExpression -> . prefixUnaryExpression
    (141) assignableExpression -> . parenthesizedAssignableExpression
    (85) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody
    (86) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (87) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (88) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (89) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (13) varOrVal -> . VAR
    (14) varOrVal -> . VAL
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (139) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (142) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (69) receiverType -> . typeModifier parenthesizedType
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (48) typeModifier -> . SUSPEND
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type

    SETA            shift and go to state 143
    FUN             shift and go to state 62
    LPAREN          shift and go to state 148
    FOR             shift and go to state 75
    WHILE           shift and go to state 77
    DO              shift and go to state 78
    VAR             shift and go to state 80
    VAL             shift and go to state 81
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LITERAL_STRING  shift and go to state 86
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    SUSPEND         shift and go to state 48

    optionsLambdaLiteral           shift and go to state 140
    statements                     shift and go to state 141
    lambdaParameters               shift and go to state 142
    statement                      shift and go to state 56
    lambdaParameter                shift and go to state 144
    functionDeclaration            shift and go to state 57
    assignment                     shift and go to state 58
    loopStatement                  shift and go to state 59
    expression                     shift and go to state 60
    propertyDeclaration            shift and go to state 61
    variableDeclaration            shift and go to state 145
    multiVariableDeclaration       shift and go to state 146
    simpleIdentifier               shift and go to state 147
    directlyAssignableExpression   shift and go to state 64
    assignableExpression           shift and go to state 65
    forStatement                   shift and go to state 66
    whileStatement                 shift and go to state 67
    doWhileStatement               shift and go to state 68
    disjunction                    shift and go to state 69
    varOrVal                       shift and go to state 70
    postfixUnaryExpression         shift and go to state 71
    parenthesizedDirectlyAssignableExpression shift and go to state 72
    prefixUnaryExpression          shift and go to state 73
    parenthesizedAssignableExpression shift and go to state 74
    conjunction                    shift and go to state 79
    primaryExpression              shift and go to state 82
    prefixUnaryExpressionRecursive shift and go to state 83
    equality                       shift and go to state 84
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    unaryPrefix                    shift and go to state 92
    comparison                     shift and go to state 93
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    infixOperation                 shift and go to state 107
    receiverType                   shift and go to state 108
    elvisExpression                shift and go to state 114
    typeModifier                   shift and go to state 115
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120

state 56

    (70) statements -> statement .
    (71) statements -> statement . statements
    (70) statements -> . statement
    (71) statements -> . statement statements
    (72) statement -> . functionDeclaration
    (73) statement -> . assignment
    (74) statement -> . loopStatement
    (75) statement -> . expression
    (76) statement -> . propertyDeclaration
    (7) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (90) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (91) assignment -> . assignableExpression assignmentAndOperator expression
    (80) loopStatement -> . forStatement
    (81) loopStatement -> . whileStatement
    (82) loopStatement -> . doWhileStatement
    (12) expression -> . disjunction
    (17) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (136) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (137) directlyAssignableExpression -> . simpleIdentifier
    (138) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (140) assignableExpression -> . prefixUnaryExpression
    (141) assignableExpression -> . parenthesizedAssignableExpression
    (85) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody
    (86) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (87) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (88) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (89) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (13) varOrVal -> . VAR
    (14) varOrVal -> . VAL
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (139) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (142) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (69) receiverType -> . typeModifier parenthesizedType
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (48) typeModifier -> . SUSPEND
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type

  ! shift/reduce conflict for RCHAVE resolved as shift
    LCHAVE          reduce using rule 70 (statements -> statement .)
    FUN             shift and go to state 62
    FOR             shift and go to state 75
    WHILE           shift and go to state 77
    DO              shift and go to state 78
    VAR             shift and go to state 80
    VAL             shift and go to state 81
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 76
    LITERAL_STRING  shift and go to state 86
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    SUSPEND         shift and go to state 48

  ! RCHAVE          [ reduce using rule 70 (statements -> statement .) ]

    statement                      shift and go to state 56
    statements                     shift and go to state 149
    functionDeclaration            shift and go to state 57
    assignment                     shift and go to state 58
    loopStatement                  shift and go to state 59
    expression                     shift and go to state 60
    propertyDeclaration            shift and go to state 61
    simpleIdentifier               shift and go to state 63
    directlyAssignableExpression   shift and go to state 64
    assignableExpression           shift and go to state 65
    forStatement                   shift and go to state 66
    whileStatement                 shift and go to state 67
    doWhileStatement               shift and go to state 68
    disjunction                    shift and go to state 69
    varOrVal                       shift and go to state 70
    postfixUnaryExpression         shift and go to state 71
    parenthesizedDirectlyAssignableExpression shift and go to state 72
    prefixUnaryExpression          shift and go to state 73
    parenthesizedAssignableExpression shift and go to state 74
    conjunction                    shift and go to state 79
    primaryExpression              shift and go to state 82
    prefixUnaryExpressionRecursive shift and go to state 83
    equality                       shift and go to state 84
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    unaryPrefix                    shift and go to state 92
    comparison                     shift and go to state 93
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    infixOperation                 shift and go to state 107
    receiverType                   shift and go to state 108
    elvisExpression                shift and go to state 114
    typeModifier                   shift and go to state 115
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120

state 57

    (72) statement -> functionDeclaration .

    FUN             reduce using rule 72 (statement -> functionDeclaration .)
    FOR             reduce using rule 72 (statement -> functionDeclaration .)
    WHILE           reduce using rule 72 (statement -> functionDeclaration .)
    DO              reduce using rule 72 (statement -> functionDeclaration .)
    VAR             reduce using rule 72 (statement -> functionDeclaration .)
    VAL             reduce using rule 72 (statement -> functionDeclaration .)
    ID              reduce using rule 72 (statement -> functionDeclaration .)
    CROSSINLINE     reduce using rule 72 (statement -> functionDeclaration .)
    IMPORT          reduce using rule 72 (statement -> functionDeclaration .)
    INIT            reduce using rule 72 (statement -> functionDeclaration .)
    NOINLINE        reduce using rule 72 (statement -> functionDeclaration .)
    OUT             reduce using rule 72 (statement -> functionDeclaration .)
    VARARG          reduce using rule 72 (statement -> functionDeclaration .)
    WHERE           reduce using rule 72 (statement -> functionDeclaration .)
    OBJECT          reduce using rule 72 (statement -> functionDeclaration .)
    CONST           reduce using rule 72 (statement -> functionDeclaration .)
    CONSTRUCTOR     reduce using rule 72 (statement -> functionDeclaration .)
    EOF             reduce using rule 72 (statement -> functionDeclaration .)
    FALSE           reduce using rule 72 (statement -> functionDeclaration .)
    FUNCTION        reduce using rule 72 (statement -> functionDeclaration .)
    NULL            reduce using rule 72 (statement -> functionDeclaration .)
    NULLABLE        reduce using rule 72 (statement -> functionDeclaration .)
    NUMBER          reduce using rule 72 (statement -> functionDeclaration .)
    OPERATOR        reduce using rule 72 (statement -> functionDeclaration .)
    SMARTCAST       reduce using rule 72 (statement -> functionDeclaration .)
    THIS            reduce using rule 72 (statement -> functionDeclaration .)
    TRUE            reduce using rule 72 (statement -> functionDeclaration .)
    WHEN            reduce using rule 72 (statement -> functionDeclaration .)
    LONG            reduce using rule 72 (statement -> functionDeclaration .)
    ARRAY           reduce using rule 72 (statement -> functionDeclaration .)
    LPAREN          reduce using rule 72 (statement -> functionDeclaration .)
    LITERAL_STRING  reduce using rule 72 (statement -> functionDeclaration .)
    LCCT            reduce using rule 72 (statement -> functionDeclaration .)
    IF              reduce using rule 72 (statement -> functionDeclaration .)
    RETURN          reduce using rule 72 (statement -> functionDeclaration .)
    RETURN_AT       reduce using rule 72 (statement -> functionDeclaration .)
    CONTINUE        reduce using rule 72 (statement -> functionDeclaration .)
    CONTINUE_AT     reduce using rule 72 (statement -> functionDeclaration .)
    BREAK           reduce using rule 72 (statement -> functionDeclaration .)
    BREAK_AT        reduce using rule 72 (statement -> functionDeclaration .)
    RCHAVE          reduce using rule 72 (statement -> functionDeclaration .)
    INCREMENTO      reduce using rule 72 (statement -> functionDeclaration .)
    DECREMENTO      reduce using rule 72 (statement -> functionDeclaration .)
    MINUS           reduce using rule 72 (statement -> functionDeclaration .)
    PLUS            reduce using rule 72 (statement -> functionDeclaration .)
    NOT             reduce using rule 72 (statement -> functionDeclaration .)
    SUSPEND         reduce using rule 72 (statement -> functionDeclaration .)
    COLONCOLON      reduce using rule 72 (statement -> functionDeclaration .)
    LCHAVE          reduce using rule 72 (statement -> functionDeclaration .)
    MENOR           reduce using rule 72 (statement -> functionDeclaration .)
    PONTO           reduce using rule 72 (statement -> functionDeclaration .)
    AS              reduce using rule 72 (statement -> functionDeclaration .)
    MAISIGUAL       reduce using rule 72 (statement -> functionDeclaration .)
    MENOSIGUAL      reduce using rule 72 (statement -> functionDeclaration .)
    MULTIGUAL       reduce using rule 72 (statement -> functionDeclaration .)
    DIVIGUAL        reduce using rule 72 (statement -> functionDeclaration .)
    MODIGUAL        reduce using rule 72 (statement -> functionDeclaration .)
    MULT            reduce using rule 72 (statement -> functionDeclaration .)
    DIVIDE          reduce using rule 72 (statement -> functionDeclaration .)
    MOD             reduce using rule 72 (statement -> functionDeclaration .)
    PONTOPONTO      reduce using rule 72 (statement -> functionDeclaration .)
    ELVIS           reduce using rule 72 (statement -> functionDeclaration .)
    IN              reduce using rule 72 (statement -> functionDeclaration .)
    NOT_IN          reduce using rule 72 (statement -> functionDeclaration .)
    IS              reduce using rule 72 (statement -> functionDeclaration .)
    NOT_IS          reduce using rule 72 (statement -> functionDeclaration .)
    MAIOR           reduce using rule 72 (statement -> functionDeclaration .)
    MENORIGUAL      reduce using rule 72 (statement -> functionDeclaration .)
    MAIORIGUAL      reduce using rule 72 (statement -> functionDeclaration .)
    DIFERENTE       reduce using rule 72 (statement -> functionDeclaration .)
    IDENTIDADE      reduce using rule 72 (statement -> functionDeclaration .)
    IGUALDADE       reduce using rule 72 (statement -> functionDeclaration .)
    SEMIDENTIDADE   reduce using rule 72 (statement -> functionDeclaration .)
    AND             reduce using rule 72 (statement -> functionDeclaration .)
    OR              reduce using rule 72 (statement -> functionDeclaration .)
    COMMA           reduce using rule 72 (statement -> functionDeclaration .)
    RPAREN          reduce using rule 72 (statement -> functionDeclaration .)
    RCCT            reduce using rule 72 (statement -> functionDeclaration .)
    PV              reduce using rule 72 (statement -> functionDeclaration .)
    ELSE            reduce using rule 72 (statement -> functionDeclaration .)


state 58

    (73) statement -> assignment .

    FUN             reduce using rule 73 (statement -> assignment .)
    FOR             reduce using rule 73 (statement -> assignment .)
    WHILE           reduce using rule 73 (statement -> assignment .)
    DO              reduce using rule 73 (statement -> assignment .)
    VAR             reduce using rule 73 (statement -> assignment .)
    VAL             reduce using rule 73 (statement -> assignment .)
    ID              reduce using rule 73 (statement -> assignment .)
    CROSSINLINE     reduce using rule 73 (statement -> assignment .)
    IMPORT          reduce using rule 73 (statement -> assignment .)
    INIT            reduce using rule 73 (statement -> assignment .)
    NOINLINE        reduce using rule 73 (statement -> assignment .)
    OUT             reduce using rule 73 (statement -> assignment .)
    VARARG          reduce using rule 73 (statement -> assignment .)
    WHERE           reduce using rule 73 (statement -> assignment .)
    OBJECT          reduce using rule 73 (statement -> assignment .)
    CONST           reduce using rule 73 (statement -> assignment .)
    CONSTRUCTOR     reduce using rule 73 (statement -> assignment .)
    EOF             reduce using rule 73 (statement -> assignment .)
    FALSE           reduce using rule 73 (statement -> assignment .)
    FUNCTION        reduce using rule 73 (statement -> assignment .)
    NULL            reduce using rule 73 (statement -> assignment .)
    NULLABLE        reduce using rule 73 (statement -> assignment .)
    NUMBER          reduce using rule 73 (statement -> assignment .)
    OPERATOR        reduce using rule 73 (statement -> assignment .)
    SMARTCAST       reduce using rule 73 (statement -> assignment .)
    THIS            reduce using rule 73 (statement -> assignment .)
    TRUE            reduce using rule 73 (statement -> assignment .)
    WHEN            reduce using rule 73 (statement -> assignment .)
    LONG            reduce using rule 73 (statement -> assignment .)
    ARRAY           reduce using rule 73 (statement -> assignment .)
    LPAREN          reduce using rule 73 (statement -> assignment .)
    LITERAL_STRING  reduce using rule 73 (statement -> assignment .)
    LCCT            reduce using rule 73 (statement -> assignment .)
    IF              reduce using rule 73 (statement -> assignment .)
    RETURN          reduce using rule 73 (statement -> assignment .)
    RETURN_AT       reduce using rule 73 (statement -> assignment .)
    CONTINUE        reduce using rule 73 (statement -> assignment .)
    CONTINUE_AT     reduce using rule 73 (statement -> assignment .)
    BREAK           reduce using rule 73 (statement -> assignment .)
    BREAK_AT        reduce using rule 73 (statement -> assignment .)
    RCHAVE          reduce using rule 73 (statement -> assignment .)
    INCREMENTO      reduce using rule 73 (statement -> assignment .)
    DECREMENTO      reduce using rule 73 (statement -> assignment .)
    MINUS           reduce using rule 73 (statement -> assignment .)
    PLUS            reduce using rule 73 (statement -> assignment .)
    NOT             reduce using rule 73 (statement -> assignment .)
    SUSPEND         reduce using rule 73 (statement -> assignment .)
    COLONCOLON      reduce using rule 73 (statement -> assignment .)
    LCHAVE          reduce using rule 73 (statement -> assignment .)
    MENOR           reduce using rule 73 (statement -> assignment .)
    PONTO           reduce using rule 73 (statement -> assignment .)
    AS              reduce using rule 73 (statement -> assignment .)
    MAISIGUAL       reduce using rule 73 (statement -> assignment .)
    MENOSIGUAL      reduce using rule 73 (statement -> assignment .)
    MULTIGUAL       reduce using rule 73 (statement -> assignment .)
    DIVIGUAL        reduce using rule 73 (statement -> assignment .)
    MODIGUAL        reduce using rule 73 (statement -> assignment .)
    MULT            reduce using rule 73 (statement -> assignment .)
    DIVIDE          reduce using rule 73 (statement -> assignment .)
    MOD             reduce using rule 73 (statement -> assignment .)
    PONTOPONTO      reduce using rule 73 (statement -> assignment .)
    ELVIS           reduce using rule 73 (statement -> assignment .)
    IN              reduce using rule 73 (statement -> assignment .)
    NOT_IN          reduce using rule 73 (statement -> assignment .)
    IS              reduce using rule 73 (statement -> assignment .)
    NOT_IS          reduce using rule 73 (statement -> assignment .)
    MAIOR           reduce using rule 73 (statement -> assignment .)
    MENORIGUAL      reduce using rule 73 (statement -> assignment .)
    MAIORIGUAL      reduce using rule 73 (statement -> assignment .)
    DIFERENTE       reduce using rule 73 (statement -> assignment .)
    IDENTIDADE      reduce using rule 73 (statement -> assignment .)
    IGUALDADE       reduce using rule 73 (statement -> assignment .)
    SEMIDENTIDADE   reduce using rule 73 (statement -> assignment .)
    AND             reduce using rule 73 (statement -> assignment .)
    OR              reduce using rule 73 (statement -> assignment .)
    COMMA           reduce using rule 73 (statement -> assignment .)
    RPAREN          reduce using rule 73 (statement -> assignment .)
    RCCT            reduce using rule 73 (statement -> assignment .)
    PV              reduce using rule 73 (statement -> assignment .)
    ELSE            reduce using rule 73 (statement -> assignment .)


state 59

    (74) statement -> loopStatement .

    FUN             reduce using rule 74 (statement -> loopStatement .)
    FOR             reduce using rule 74 (statement -> loopStatement .)
    WHILE           reduce using rule 74 (statement -> loopStatement .)
    DO              reduce using rule 74 (statement -> loopStatement .)
    VAR             reduce using rule 74 (statement -> loopStatement .)
    VAL             reduce using rule 74 (statement -> loopStatement .)
    ID              reduce using rule 74 (statement -> loopStatement .)
    CROSSINLINE     reduce using rule 74 (statement -> loopStatement .)
    IMPORT          reduce using rule 74 (statement -> loopStatement .)
    INIT            reduce using rule 74 (statement -> loopStatement .)
    NOINLINE        reduce using rule 74 (statement -> loopStatement .)
    OUT             reduce using rule 74 (statement -> loopStatement .)
    VARARG          reduce using rule 74 (statement -> loopStatement .)
    WHERE           reduce using rule 74 (statement -> loopStatement .)
    OBJECT          reduce using rule 74 (statement -> loopStatement .)
    CONST           reduce using rule 74 (statement -> loopStatement .)
    CONSTRUCTOR     reduce using rule 74 (statement -> loopStatement .)
    EOF             reduce using rule 74 (statement -> loopStatement .)
    FALSE           reduce using rule 74 (statement -> loopStatement .)
    FUNCTION        reduce using rule 74 (statement -> loopStatement .)
    NULL            reduce using rule 74 (statement -> loopStatement .)
    NULLABLE        reduce using rule 74 (statement -> loopStatement .)
    NUMBER          reduce using rule 74 (statement -> loopStatement .)
    OPERATOR        reduce using rule 74 (statement -> loopStatement .)
    SMARTCAST       reduce using rule 74 (statement -> loopStatement .)
    THIS            reduce using rule 74 (statement -> loopStatement .)
    TRUE            reduce using rule 74 (statement -> loopStatement .)
    WHEN            reduce using rule 74 (statement -> loopStatement .)
    LONG            reduce using rule 74 (statement -> loopStatement .)
    ARRAY           reduce using rule 74 (statement -> loopStatement .)
    LPAREN          reduce using rule 74 (statement -> loopStatement .)
    LITERAL_STRING  reduce using rule 74 (statement -> loopStatement .)
    LCCT            reduce using rule 74 (statement -> loopStatement .)
    IF              reduce using rule 74 (statement -> loopStatement .)
    RETURN          reduce using rule 74 (statement -> loopStatement .)
    RETURN_AT       reduce using rule 74 (statement -> loopStatement .)
    CONTINUE        reduce using rule 74 (statement -> loopStatement .)
    CONTINUE_AT     reduce using rule 74 (statement -> loopStatement .)
    BREAK           reduce using rule 74 (statement -> loopStatement .)
    BREAK_AT        reduce using rule 74 (statement -> loopStatement .)
    RCHAVE          reduce using rule 74 (statement -> loopStatement .)
    INCREMENTO      reduce using rule 74 (statement -> loopStatement .)
    DECREMENTO      reduce using rule 74 (statement -> loopStatement .)
    MINUS           reduce using rule 74 (statement -> loopStatement .)
    PLUS            reduce using rule 74 (statement -> loopStatement .)
    NOT             reduce using rule 74 (statement -> loopStatement .)
    SUSPEND         reduce using rule 74 (statement -> loopStatement .)
    COLONCOLON      reduce using rule 74 (statement -> loopStatement .)
    LCHAVE          reduce using rule 74 (statement -> loopStatement .)
    MENOR           reduce using rule 74 (statement -> loopStatement .)
    PONTO           reduce using rule 74 (statement -> loopStatement .)
    AS              reduce using rule 74 (statement -> loopStatement .)
    MAISIGUAL       reduce using rule 74 (statement -> loopStatement .)
    MENOSIGUAL      reduce using rule 74 (statement -> loopStatement .)
    MULTIGUAL       reduce using rule 74 (statement -> loopStatement .)
    DIVIGUAL        reduce using rule 74 (statement -> loopStatement .)
    MODIGUAL        reduce using rule 74 (statement -> loopStatement .)
    MULT            reduce using rule 74 (statement -> loopStatement .)
    DIVIDE          reduce using rule 74 (statement -> loopStatement .)
    MOD             reduce using rule 74 (statement -> loopStatement .)
    PONTOPONTO      reduce using rule 74 (statement -> loopStatement .)
    ELVIS           reduce using rule 74 (statement -> loopStatement .)
    IN              reduce using rule 74 (statement -> loopStatement .)
    NOT_IN          reduce using rule 74 (statement -> loopStatement .)
    IS              reduce using rule 74 (statement -> loopStatement .)
    NOT_IS          reduce using rule 74 (statement -> loopStatement .)
    MAIOR           reduce using rule 74 (statement -> loopStatement .)
    MENORIGUAL      reduce using rule 74 (statement -> loopStatement .)
    MAIORIGUAL      reduce using rule 74 (statement -> loopStatement .)
    DIFERENTE       reduce using rule 74 (statement -> loopStatement .)
    IDENTIDADE      reduce using rule 74 (statement -> loopStatement .)
    IGUALDADE       reduce using rule 74 (statement -> loopStatement .)
    SEMIDENTIDADE   reduce using rule 74 (statement -> loopStatement .)
    AND             reduce using rule 74 (statement -> loopStatement .)
    OR              reduce using rule 74 (statement -> loopStatement .)
    COMMA           reduce using rule 74 (statement -> loopStatement .)
    RPAREN          reduce using rule 74 (statement -> loopStatement .)
    RCCT            reduce using rule 74 (statement -> loopStatement .)
    PV              reduce using rule 74 (statement -> loopStatement .)
    ELSE            reduce using rule 74 (statement -> loopStatement .)


state 60

    (75) statement -> expression .
    (219) jumpExpression -> expression .

  ! reduce/reduce conflict for INCREMENTO resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for MENOR resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for LCCT resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for PONTO resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for AS resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for MULT resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for MOD resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for ID resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for INIT resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for OUT resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for VARARG resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for WHERE resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for CONST resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for EOF resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for FALSE resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for NULL resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for THIS resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for TRUE resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for VAL resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for VAR resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for WHEN resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for LONG resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for IN resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for IS resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for AND resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for OR resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for FUN resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for FOR resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for DO resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for IF resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for RETURN resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for BREAK resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for NOT resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for RCCT resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for PV resolved using rule 75 (statement -> expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 75 (statement -> expression .)
    FUN             reduce using rule 75 (statement -> expression .)
    FOR             reduce using rule 75 (statement -> expression .)
    WHILE           reduce using rule 75 (statement -> expression .)
    DO              reduce using rule 75 (statement -> expression .)
    VAR             reduce using rule 75 (statement -> expression .)
    VAL             reduce using rule 75 (statement -> expression .)
    ID              reduce using rule 75 (statement -> expression .)
    CROSSINLINE     reduce using rule 75 (statement -> expression .)
    IMPORT          reduce using rule 75 (statement -> expression .)
    INIT            reduce using rule 75 (statement -> expression .)
    NOINLINE        reduce using rule 75 (statement -> expression .)
    OUT             reduce using rule 75 (statement -> expression .)
    VARARG          reduce using rule 75 (statement -> expression .)
    WHERE           reduce using rule 75 (statement -> expression .)
    OBJECT          reduce using rule 75 (statement -> expression .)
    CONST           reduce using rule 75 (statement -> expression .)
    CONSTRUCTOR     reduce using rule 75 (statement -> expression .)
    EOF             reduce using rule 75 (statement -> expression .)
    FALSE           reduce using rule 75 (statement -> expression .)
    FUNCTION        reduce using rule 75 (statement -> expression .)
    NULL            reduce using rule 75 (statement -> expression .)
    NULLABLE        reduce using rule 75 (statement -> expression .)
    NUMBER          reduce using rule 75 (statement -> expression .)
    OPERATOR        reduce using rule 75 (statement -> expression .)
    SMARTCAST       reduce using rule 75 (statement -> expression .)
    THIS            reduce using rule 75 (statement -> expression .)
    TRUE            reduce using rule 75 (statement -> expression .)
    WHEN            reduce using rule 75 (statement -> expression .)
    LONG            reduce using rule 75 (statement -> expression .)
    ARRAY           reduce using rule 75 (statement -> expression .)
    LPAREN          reduce using rule 75 (statement -> expression .)
    LITERAL_STRING  reduce using rule 75 (statement -> expression .)
    LCCT            reduce using rule 75 (statement -> expression .)
    IF              reduce using rule 75 (statement -> expression .)
    RETURN          reduce using rule 75 (statement -> expression .)
    RETURN_AT       reduce using rule 75 (statement -> expression .)
    CONTINUE        reduce using rule 75 (statement -> expression .)
    CONTINUE_AT     reduce using rule 75 (statement -> expression .)
    BREAK           reduce using rule 75 (statement -> expression .)
    BREAK_AT        reduce using rule 75 (statement -> expression .)
    RCHAVE          reduce using rule 75 (statement -> expression .)
    INCREMENTO      reduce using rule 75 (statement -> expression .)
    DECREMENTO      reduce using rule 75 (statement -> expression .)
    MINUS           reduce using rule 75 (statement -> expression .)
    PLUS            reduce using rule 75 (statement -> expression .)
    NOT             reduce using rule 75 (statement -> expression .)
    SUSPEND         reduce using rule 75 (statement -> expression .)
    COLONCOLON      reduce using rule 75 (statement -> expression .)
    LCHAVE          reduce using rule 75 (statement -> expression .)
    MENOR           reduce using rule 75 (statement -> expression .)
    PONTO           reduce using rule 75 (statement -> expression .)
    AS              reduce using rule 75 (statement -> expression .)
    MAISIGUAL       reduce using rule 75 (statement -> expression .)
    MENOSIGUAL      reduce using rule 75 (statement -> expression .)
    MULTIGUAL       reduce using rule 75 (statement -> expression .)
    DIVIGUAL        reduce using rule 75 (statement -> expression .)
    MODIGUAL        reduce using rule 75 (statement -> expression .)
    MULT            reduce using rule 75 (statement -> expression .)
    DIVIDE          reduce using rule 75 (statement -> expression .)
    MOD             reduce using rule 75 (statement -> expression .)
    PONTOPONTO      reduce using rule 75 (statement -> expression .)
    ELVIS           reduce using rule 75 (statement -> expression .)
    IN              reduce using rule 75 (statement -> expression .)
    NOT_IN          reduce using rule 75 (statement -> expression .)
    IS              reduce using rule 75 (statement -> expression .)
    NOT_IS          reduce using rule 75 (statement -> expression .)
    MAIOR           reduce using rule 75 (statement -> expression .)
    MENORIGUAL      reduce using rule 75 (statement -> expression .)
    MAIORIGUAL      reduce using rule 75 (statement -> expression .)
    DIFERENTE       reduce using rule 75 (statement -> expression .)
    IDENTIDADE      reduce using rule 75 (statement -> expression .)
    IGUALDADE       reduce using rule 75 (statement -> expression .)
    SEMIDENTIDADE   reduce using rule 75 (statement -> expression .)
    AND             reduce using rule 75 (statement -> expression .)
    OR              reduce using rule 75 (statement -> expression .)
    COMMA           reduce using rule 75 (statement -> expression .)
    RPAREN          reduce using rule 75 (statement -> expression .)
    RCCT            reduce using rule 75 (statement -> expression .)
    PV              reduce using rule 75 (statement -> expression .)
    ELSE            reduce using rule 75 (statement -> expression .)

  ! INCREMENTO      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DECREMENTO      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MENOR           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LCCT            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! COLONCOLON      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! PONTO           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LPAREN          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RCHAVE          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! AS              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MAISIGUAL       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MENOSIGUAL      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MULTIGUAL       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DIVIGUAL        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MODIGUAL        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MULT            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DIVIDE          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MOD             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! PLUS            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MINUS           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! PONTOPONTO      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! ID              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CROSSINLINE     [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IMPORT          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! INIT            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NOINLINE        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! OUT             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! VARARG          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! WHERE           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! OBJECT          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CONST           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CONSTRUCTOR     [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! EOF             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! FALSE           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! FUNCTION        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NULL            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NULLABLE        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NUMBER          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! OPERATOR        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! SMARTCAST       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! THIS            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! TRUE            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! VAL             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! VAR             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! WHEN            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LONG            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! ARRAY           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! ELVIS           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IN              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NOT_IN          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IS              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NOT_IS          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MAIOR           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MENORIGUAL      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MAIORIGUAL      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DIFERENTE       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IDENTIDADE      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IGUALDADE       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! AND             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! OR              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! FUN             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! FOR             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! WHILE           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DO              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LITERAL_STRING  [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IF              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RETURN          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RETURN_AT       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CONTINUE        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CONTINUE_AT     [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! BREAK           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! BREAK_AT        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NOT             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! SUSPEND         [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LCHAVE          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! COMMA           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RCCT            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! PV              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! ELSE            [ reduce using rule 219 (jumpExpression -> expression .) ]


state 61

    (76) statement -> propertyDeclaration .

    FUN             reduce using rule 76 (statement -> propertyDeclaration .)
    FOR             reduce using rule 76 (statement -> propertyDeclaration .)
    WHILE           reduce using rule 76 (statement -> propertyDeclaration .)
    DO              reduce using rule 76 (statement -> propertyDeclaration .)
    VAR             reduce using rule 76 (statement -> propertyDeclaration .)
    VAL             reduce using rule 76 (statement -> propertyDeclaration .)
    ID              reduce using rule 76 (statement -> propertyDeclaration .)
    CROSSINLINE     reduce using rule 76 (statement -> propertyDeclaration .)
    IMPORT          reduce using rule 76 (statement -> propertyDeclaration .)
    INIT            reduce using rule 76 (statement -> propertyDeclaration .)
    NOINLINE        reduce using rule 76 (statement -> propertyDeclaration .)
    OUT             reduce using rule 76 (statement -> propertyDeclaration .)
    VARARG          reduce using rule 76 (statement -> propertyDeclaration .)
    WHERE           reduce using rule 76 (statement -> propertyDeclaration .)
    OBJECT          reduce using rule 76 (statement -> propertyDeclaration .)
    CONST           reduce using rule 76 (statement -> propertyDeclaration .)
    CONSTRUCTOR     reduce using rule 76 (statement -> propertyDeclaration .)
    EOF             reduce using rule 76 (statement -> propertyDeclaration .)
    FALSE           reduce using rule 76 (statement -> propertyDeclaration .)
    FUNCTION        reduce using rule 76 (statement -> propertyDeclaration .)
    NULL            reduce using rule 76 (statement -> propertyDeclaration .)
    NULLABLE        reduce using rule 76 (statement -> propertyDeclaration .)
    NUMBER          reduce using rule 76 (statement -> propertyDeclaration .)
    OPERATOR        reduce using rule 76 (statement -> propertyDeclaration .)
    SMARTCAST       reduce using rule 76 (statement -> propertyDeclaration .)
    THIS            reduce using rule 76 (statement -> propertyDeclaration .)
    TRUE            reduce using rule 76 (statement -> propertyDeclaration .)
    WHEN            reduce using rule 76 (statement -> propertyDeclaration .)
    LONG            reduce using rule 76 (statement -> propertyDeclaration .)
    ARRAY           reduce using rule 76 (statement -> propertyDeclaration .)
    LPAREN          reduce using rule 76 (statement -> propertyDeclaration .)
    LITERAL_STRING  reduce using rule 76 (statement -> propertyDeclaration .)
    LCCT            reduce using rule 76 (statement -> propertyDeclaration .)
    IF              reduce using rule 76 (statement -> propertyDeclaration .)
    RETURN          reduce using rule 76 (statement -> propertyDeclaration .)
    RETURN_AT       reduce using rule 76 (statement -> propertyDeclaration .)
    CONTINUE        reduce using rule 76 (statement -> propertyDeclaration .)
    CONTINUE_AT     reduce using rule 76 (statement -> propertyDeclaration .)
    BREAK           reduce using rule 76 (statement -> propertyDeclaration .)
    BREAK_AT        reduce using rule 76 (statement -> propertyDeclaration .)
    RCHAVE          reduce using rule 76 (statement -> propertyDeclaration .)
    INCREMENTO      reduce using rule 76 (statement -> propertyDeclaration .)
    DECREMENTO      reduce using rule 76 (statement -> propertyDeclaration .)
    MINUS           reduce using rule 76 (statement -> propertyDeclaration .)
    PLUS            reduce using rule 76 (statement -> propertyDeclaration .)
    NOT             reduce using rule 76 (statement -> propertyDeclaration .)
    SUSPEND         reduce using rule 76 (statement -> propertyDeclaration .)
    COLONCOLON      reduce using rule 76 (statement -> propertyDeclaration .)
    LCHAVE          reduce using rule 76 (statement -> propertyDeclaration .)
    MENOR           reduce using rule 76 (statement -> propertyDeclaration .)
    PONTO           reduce using rule 76 (statement -> propertyDeclaration .)
    AS              reduce using rule 76 (statement -> propertyDeclaration .)
    MAISIGUAL       reduce using rule 76 (statement -> propertyDeclaration .)
    MENOSIGUAL      reduce using rule 76 (statement -> propertyDeclaration .)
    MULTIGUAL       reduce using rule 76 (statement -> propertyDeclaration .)
    DIVIGUAL        reduce using rule 76 (statement -> propertyDeclaration .)
    MODIGUAL        reduce using rule 76 (statement -> propertyDeclaration .)
    MULT            reduce using rule 76 (statement -> propertyDeclaration .)
    DIVIDE          reduce using rule 76 (statement -> propertyDeclaration .)
    MOD             reduce using rule 76 (statement -> propertyDeclaration .)
    PONTOPONTO      reduce using rule 76 (statement -> propertyDeclaration .)
    ELVIS           reduce using rule 76 (statement -> propertyDeclaration .)
    IN              reduce using rule 76 (statement -> propertyDeclaration .)
    NOT_IN          reduce using rule 76 (statement -> propertyDeclaration .)
    IS              reduce using rule 76 (statement -> propertyDeclaration .)
    NOT_IS          reduce using rule 76 (statement -> propertyDeclaration .)
    MAIOR           reduce using rule 76 (statement -> propertyDeclaration .)
    MENORIGUAL      reduce using rule 76 (statement -> propertyDeclaration .)
    MAIORIGUAL      reduce using rule 76 (statement -> propertyDeclaration .)
    DIFERENTE       reduce using rule 76 (statement -> propertyDeclaration .)
    IDENTIDADE      reduce using rule 76 (statement -> propertyDeclaration .)
    IGUALDADE       reduce using rule 76 (statement -> propertyDeclaration .)
    SEMIDENTIDADE   reduce using rule 76 (statement -> propertyDeclaration .)
    AND             reduce using rule 76 (statement -> propertyDeclaration .)
    OR              reduce using rule 76 (statement -> propertyDeclaration .)
    COMMA           reduce using rule 76 (statement -> propertyDeclaration .)
    RPAREN          reduce using rule 76 (statement -> propertyDeclaration .)
    RCCT            reduce using rule 76 (statement -> propertyDeclaration .)
    PV              reduce using rule 76 (statement -> propertyDeclaration .)
    ELSE            reduce using rule 76 (statement -> propertyDeclaration .)


state 62

    (7) functionDeclaration -> FUN . simpleIdentifier functionValueParameters optionalType optionalBlock
    (207) anonymousFunction -> FUN . optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (201) optionalTypePonto -> . type PONTO
    (202) optionalTypePonto -> .
    (40) type -> . optionalTypeModifiers optype
    (41) optionalTypeModifiers -> . typeModifiers
    (42) optionalTypeModifiers -> .
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (48) typeModifier -> . SUSPEND

  ! reduce/reduce conflict for LPAREN resolved using rule 42 (optionalTypeModifiers -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          reduce using rule 42 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! LPAREN          [ reduce using rule 202 (optionalTypePonto -> .) ]
  ! SUSPEND         [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! ID              [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! CROSSINLINE     [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! IMPORT          [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! INIT            [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! NOINLINE        [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! OUT             [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! VARARG          [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! WHERE           [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! OBJECT          [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! CONST           [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! CONSTRUCTOR     [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! EOF             [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! FALSE           [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! FUNCTION        [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! NULL            [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! NULLABLE        [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! NUMBER          [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! OPERATOR        [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! SMARTCAST       [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! THIS            [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! TRUE            [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! VAL             [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! VAR             [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! WHEN            [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! LONG            [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! ARRAY           [ reduce using rule 42 (optionalTypeModifiers -> .) ]

    simpleIdentifier               shift and go to state 5
    optionalTypePonto              shift and go to state 150
    type                           shift and go to state 151
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 63

    (137) directlyAssignableExpression -> simpleIdentifier .
    (171) primaryExpression -> simpleIdentifier .
    (126) label -> simpleIdentifier .

  ! reduce/reduce conflict for RPAREN resolved using rule 137 (directlyAssignableExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NOT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OBJECT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONST resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for EOF resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FALSE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NULL resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NUMBER resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for THIS resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for TRUE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VAL resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VAR resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHEN resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LONG resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ARRAY resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IF resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FUN resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 126 (label -> simpleIdentifier .)
    ATRIBUICAO      reduce using rule 137 (directlyAssignableExpression -> simpleIdentifier .)
    RPAREN          reduce using rule 137 (directlyAssignableExpression -> simpleIdentifier .)
    MENOR           reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    PONTO           reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    AS              reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MAISIGUAL       reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MENOSIGUAL      reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MODIGUAL        reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MULT            reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    DIVIDE          reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MOD             reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    ELVIS           reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    IN              reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    NOT_IN          reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    IS              reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    NOT_IS          reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MAIOR           reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    DIFERENTE       reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    IGUALDADE       reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    AND             reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    OR              reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    FOR             reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    WHILE           reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    DO              reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    LCHAVE          reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    COMMA           reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    RCCT            reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    PV              reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    ELSE            reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    INCREMENTO      reduce using rule 126 (label -> simpleIdentifier .)
    DECREMENTO      reduce using rule 126 (label -> simpleIdentifier .)
    MINUS           reduce using rule 126 (label -> simpleIdentifier .)
    PLUS            reduce using rule 126 (label -> simpleIdentifier .)
    NOT             reduce using rule 126 (label -> simpleIdentifier .)
    ID              reduce using rule 126 (label -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 126 (label -> simpleIdentifier .)
    IMPORT          reduce using rule 126 (label -> simpleIdentifier .)
    INIT            reduce using rule 126 (label -> simpleIdentifier .)
    NOINLINE        reduce using rule 126 (label -> simpleIdentifier .)
    OUT             reduce using rule 126 (label -> simpleIdentifier .)
    VARARG          reduce using rule 126 (label -> simpleIdentifier .)
    WHERE           reduce using rule 126 (label -> simpleIdentifier .)
    OBJECT          reduce using rule 126 (label -> simpleIdentifier .)
    CONST           reduce using rule 126 (label -> simpleIdentifier .)
    CONSTRUCTOR     reduce using rule 126 (label -> simpleIdentifier .)
    EOF             reduce using rule 126 (label -> simpleIdentifier .)
    FALSE           reduce using rule 126 (label -> simpleIdentifier .)
    FUNCTION        reduce using rule 126 (label -> simpleIdentifier .)
    NULL            reduce using rule 126 (label -> simpleIdentifier .)
    NULLABLE        reduce using rule 126 (label -> simpleIdentifier .)
    NUMBER          reduce using rule 126 (label -> simpleIdentifier .)
    OPERATOR        reduce using rule 126 (label -> simpleIdentifier .)
    SMARTCAST       reduce using rule 126 (label -> simpleIdentifier .)
    THIS            reduce using rule 126 (label -> simpleIdentifier .)
    TRUE            reduce using rule 126 (label -> simpleIdentifier .)
    VAL             reduce using rule 126 (label -> simpleIdentifier .)
    VAR             reduce using rule 126 (label -> simpleIdentifier .)
    WHEN            reduce using rule 126 (label -> simpleIdentifier .)
    LONG            reduce using rule 126 (label -> simpleIdentifier .)
    ARRAY           reduce using rule 126 (label -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 126 (label -> simpleIdentifier .)
    LPAREN          reduce using rule 126 (label -> simpleIdentifier .)
    LCCT            reduce using rule 126 (label -> simpleIdentifier .)
    IF              reduce using rule 126 (label -> simpleIdentifier .)
    RETURN          reduce using rule 126 (label -> simpleIdentifier .)
    RETURN_AT       reduce using rule 126 (label -> simpleIdentifier .)
    CONTINUE        reduce using rule 126 (label -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 126 (label -> simpleIdentifier .)
    BREAK           reduce using rule 126 (label -> simpleIdentifier .)
    BREAK_AT        reduce using rule 126 (label -> simpleIdentifier .)
    RCHAVE          reduce using rule 126 (label -> simpleIdentifier .)
    FUN             reduce using rule 126 (label -> simpleIdentifier .)
    SUSPEND         reduce using rule 126 (label -> simpleIdentifier .)
    COLONCOLON      reduce using rule 126 (label -> simpleIdentifier .)

  ! INCREMENTO      [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! RCHAVE          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! PLUS            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! OBJECT          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! CONST           [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! CONSTRUCTOR     [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! EOF             [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! FALSE           [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! FUNCTION        [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! NULL            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! NULLABLE        [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! NUMBER          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! OPERATOR        [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! SMARTCAST       [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! THIS            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! TRUE            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! VAL             [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! VAR             [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! WHEN            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! LONG            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! ARRAY           [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! FUN             [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! LITERAL_STRING  [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! IF              [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! RETURN          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! RETURN_AT       [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! CONTINUE        [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! CONTINUE_AT     [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! BREAK           [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! BREAK_AT        [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! NOT             [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! SUSPEND         [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! RPAREN          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]


state 64

    (90) assignment -> directlyAssignableExpression . ATRIBUICAO expression

    ATRIBUICAO      shift and go to state 152


state 65

    (91) assignment -> assignableExpression . assignmentAndOperator expression
    (229) assignmentAndOperator -> . MAISIGUAL
    (230) assignmentAndOperator -> . MENOSIGUAL
    (231) assignmentAndOperator -> . MULTIGUAL
    (232) assignmentAndOperator -> . DIVIGUAL
    (233) assignmentAndOperator -> . MODIGUAL

    MAISIGUAL       shift and go to state 154
    MENOSIGUAL      shift and go to state 155
    MULTIGUAL       shift and go to state 156
    DIVIGUAL        shift and go to state 157
    MODIGUAL        shift and go to state 158

    assignmentAndOperator          shift and go to state 153

state 66

    (80) loopStatement -> forStatement .

    FUN             reduce using rule 80 (loopStatement -> forStatement .)
    FOR             reduce using rule 80 (loopStatement -> forStatement .)
    WHILE           reduce using rule 80 (loopStatement -> forStatement .)
    DO              reduce using rule 80 (loopStatement -> forStatement .)
    VAR             reduce using rule 80 (loopStatement -> forStatement .)
    VAL             reduce using rule 80 (loopStatement -> forStatement .)
    ID              reduce using rule 80 (loopStatement -> forStatement .)
    CROSSINLINE     reduce using rule 80 (loopStatement -> forStatement .)
    IMPORT          reduce using rule 80 (loopStatement -> forStatement .)
    INIT            reduce using rule 80 (loopStatement -> forStatement .)
    NOINLINE        reduce using rule 80 (loopStatement -> forStatement .)
    OUT             reduce using rule 80 (loopStatement -> forStatement .)
    VARARG          reduce using rule 80 (loopStatement -> forStatement .)
    WHERE           reduce using rule 80 (loopStatement -> forStatement .)
    OBJECT          reduce using rule 80 (loopStatement -> forStatement .)
    CONST           reduce using rule 80 (loopStatement -> forStatement .)
    CONSTRUCTOR     reduce using rule 80 (loopStatement -> forStatement .)
    EOF             reduce using rule 80 (loopStatement -> forStatement .)
    FALSE           reduce using rule 80 (loopStatement -> forStatement .)
    FUNCTION        reduce using rule 80 (loopStatement -> forStatement .)
    NULL            reduce using rule 80 (loopStatement -> forStatement .)
    NULLABLE        reduce using rule 80 (loopStatement -> forStatement .)
    NUMBER          reduce using rule 80 (loopStatement -> forStatement .)
    OPERATOR        reduce using rule 80 (loopStatement -> forStatement .)
    SMARTCAST       reduce using rule 80 (loopStatement -> forStatement .)
    THIS            reduce using rule 80 (loopStatement -> forStatement .)
    TRUE            reduce using rule 80 (loopStatement -> forStatement .)
    WHEN            reduce using rule 80 (loopStatement -> forStatement .)
    LONG            reduce using rule 80 (loopStatement -> forStatement .)
    ARRAY           reduce using rule 80 (loopStatement -> forStatement .)
    LPAREN          reduce using rule 80 (loopStatement -> forStatement .)
    LITERAL_STRING  reduce using rule 80 (loopStatement -> forStatement .)
    LCCT            reduce using rule 80 (loopStatement -> forStatement .)
    IF              reduce using rule 80 (loopStatement -> forStatement .)
    RETURN          reduce using rule 80 (loopStatement -> forStatement .)
    RETURN_AT       reduce using rule 80 (loopStatement -> forStatement .)
    CONTINUE        reduce using rule 80 (loopStatement -> forStatement .)
    CONTINUE_AT     reduce using rule 80 (loopStatement -> forStatement .)
    BREAK           reduce using rule 80 (loopStatement -> forStatement .)
    BREAK_AT        reduce using rule 80 (loopStatement -> forStatement .)
    RCHAVE          reduce using rule 80 (loopStatement -> forStatement .)
    INCREMENTO      reduce using rule 80 (loopStatement -> forStatement .)
    DECREMENTO      reduce using rule 80 (loopStatement -> forStatement .)
    MINUS           reduce using rule 80 (loopStatement -> forStatement .)
    PLUS            reduce using rule 80 (loopStatement -> forStatement .)
    NOT             reduce using rule 80 (loopStatement -> forStatement .)
    SUSPEND         reduce using rule 80 (loopStatement -> forStatement .)
    COLONCOLON      reduce using rule 80 (loopStatement -> forStatement .)
    LCHAVE          reduce using rule 80 (loopStatement -> forStatement .)
    MENOR           reduce using rule 80 (loopStatement -> forStatement .)
    PONTO           reduce using rule 80 (loopStatement -> forStatement .)
    AS              reduce using rule 80 (loopStatement -> forStatement .)
    MAISIGUAL       reduce using rule 80 (loopStatement -> forStatement .)
    MENOSIGUAL      reduce using rule 80 (loopStatement -> forStatement .)
    MULTIGUAL       reduce using rule 80 (loopStatement -> forStatement .)
    DIVIGUAL        reduce using rule 80 (loopStatement -> forStatement .)
    MODIGUAL        reduce using rule 80 (loopStatement -> forStatement .)
    MULT            reduce using rule 80 (loopStatement -> forStatement .)
    DIVIDE          reduce using rule 80 (loopStatement -> forStatement .)
    MOD             reduce using rule 80 (loopStatement -> forStatement .)
    PONTOPONTO      reduce using rule 80 (loopStatement -> forStatement .)
    ELVIS           reduce using rule 80 (loopStatement -> forStatement .)
    IN              reduce using rule 80 (loopStatement -> forStatement .)
    NOT_IN          reduce using rule 80 (loopStatement -> forStatement .)
    IS              reduce using rule 80 (loopStatement -> forStatement .)
    NOT_IS          reduce using rule 80 (loopStatement -> forStatement .)
    MAIOR           reduce using rule 80 (loopStatement -> forStatement .)
    MENORIGUAL      reduce using rule 80 (loopStatement -> forStatement .)
    MAIORIGUAL      reduce using rule 80 (loopStatement -> forStatement .)
    DIFERENTE       reduce using rule 80 (loopStatement -> forStatement .)
    IDENTIDADE      reduce using rule 80 (loopStatement -> forStatement .)
    IGUALDADE       reduce using rule 80 (loopStatement -> forStatement .)
    SEMIDENTIDADE   reduce using rule 80 (loopStatement -> forStatement .)
    AND             reduce using rule 80 (loopStatement -> forStatement .)
    OR              reduce using rule 80 (loopStatement -> forStatement .)
    COMMA           reduce using rule 80 (loopStatement -> forStatement .)
    RPAREN          reduce using rule 80 (loopStatement -> forStatement .)
    RCCT            reduce using rule 80 (loopStatement -> forStatement .)
    PV              reduce using rule 80 (loopStatement -> forStatement .)
    ELSE            reduce using rule 80 (loopStatement -> forStatement .)


state 67

    (81) loopStatement -> whileStatement .

    FUN             reduce using rule 81 (loopStatement -> whileStatement .)
    FOR             reduce using rule 81 (loopStatement -> whileStatement .)
    WHILE           reduce using rule 81 (loopStatement -> whileStatement .)
    DO              reduce using rule 81 (loopStatement -> whileStatement .)
    VAR             reduce using rule 81 (loopStatement -> whileStatement .)
    VAL             reduce using rule 81 (loopStatement -> whileStatement .)
    ID              reduce using rule 81 (loopStatement -> whileStatement .)
    CROSSINLINE     reduce using rule 81 (loopStatement -> whileStatement .)
    IMPORT          reduce using rule 81 (loopStatement -> whileStatement .)
    INIT            reduce using rule 81 (loopStatement -> whileStatement .)
    NOINLINE        reduce using rule 81 (loopStatement -> whileStatement .)
    OUT             reduce using rule 81 (loopStatement -> whileStatement .)
    VARARG          reduce using rule 81 (loopStatement -> whileStatement .)
    WHERE           reduce using rule 81 (loopStatement -> whileStatement .)
    OBJECT          reduce using rule 81 (loopStatement -> whileStatement .)
    CONST           reduce using rule 81 (loopStatement -> whileStatement .)
    CONSTRUCTOR     reduce using rule 81 (loopStatement -> whileStatement .)
    EOF             reduce using rule 81 (loopStatement -> whileStatement .)
    FALSE           reduce using rule 81 (loopStatement -> whileStatement .)
    FUNCTION        reduce using rule 81 (loopStatement -> whileStatement .)
    NULL            reduce using rule 81 (loopStatement -> whileStatement .)
    NULLABLE        reduce using rule 81 (loopStatement -> whileStatement .)
    NUMBER          reduce using rule 81 (loopStatement -> whileStatement .)
    OPERATOR        reduce using rule 81 (loopStatement -> whileStatement .)
    SMARTCAST       reduce using rule 81 (loopStatement -> whileStatement .)
    THIS            reduce using rule 81 (loopStatement -> whileStatement .)
    TRUE            reduce using rule 81 (loopStatement -> whileStatement .)
    WHEN            reduce using rule 81 (loopStatement -> whileStatement .)
    LONG            reduce using rule 81 (loopStatement -> whileStatement .)
    ARRAY           reduce using rule 81 (loopStatement -> whileStatement .)
    LPAREN          reduce using rule 81 (loopStatement -> whileStatement .)
    LITERAL_STRING  reduce using rule 81 (loopStatement -> whileStatement .)
    LCCT            reduce using rule 81 (loopStatement -> whileStatement .)
    IF              reduce using rule 81 (loopStatement -> whileStatement .)
    RETURN          reduce using rule 81 (loopStatement -> whileStatement .)
    RETURN_AT       reduce using rule 81 (loopStatement -> whileStatement .)
    CONTINUE        reduce using rule 81 (loopStatement -> whileStatement .)
    CONTINUE_AT     reduce using rule 81 (loopStatement -> whileStatement .)
    BREAK           reduce using rule 81 (loopStatement -> whileStatement .)
    BREAK_AT        reduce using rule 81 (loopStatement -> whileStatement .)
    RCHAVE          reduce using rule 81 (loopStatement -> whileStatement .)
    INCREMENTO      reduce using rule 81 (loopStatement -> whileStatement .)
    DECREMENTO      reduce using rule 81 (loopStatement -> whileStatement .)
    MINUS           reduce using rule 81 (loopStatement -> whileStatement .)
    PLUS            reduce using rule 81 (loopStatement -> whileStatement .)
    NOT             reduce using rule 81 (loopStatement -> whileStatement .)
    SUSPEND         reduce using rule 81 (loopStatement -> whileStatement .)
    COLONCOLON      reduce using rule 81 (loopStatement -> whileStatement .)
    LCHAVE          reduce using rule 81 (loopStatement -> whileStatement .)
    MENOR           reduce using rule 81 (loopStatement -> whileStatement .)
    PONTO           reduce using rule 81 (loopStatement -> whileStatement .)
    AS              reduce using rule 81 (loopStatement -> whileStatement .)
    MAISIGUAL       reduce using rule 81 (loopStatement -> whileStatement .)
    MENOSIGUAL      reduce using rule 81 (loopStatement -> whileStatement .)
    MULTIGUAL       reduce using rule 81 (loopStatement -> whileStatement .)
    DIVIGUAL        reduce using rule 81 (loopStatement -> whileStatement .)
    MODIGUAL        reduce using rule 81 (loopStatement -> whileStatement .)
    MULT            reduce using rule 81 (loopStatement -> whileStatement .)
    DIVIDE          reduce using rule 81 (loopStatement -> whileStatement .)
    MOD             reduce using rule 81 (loopStatement -> whileStatement .)
    PONTOPONTO      reduce using rule 81 (loopStatement -> whileStatement .)
    ELVIS           reduce using rule 81 (loopStatement -> whileStatement .)
    IN              reduce using rule 81 (loopStatement -> whileStatement .)
    NOT_IN          reduce using rule 81 (loopStatement -> whileStatement .)
    IS              reduce using rule 81 (loopStatement -> whileStatement .)
    NOT_IS          reduce using rule 81 (loopStatement -> whileStatement .)
    MAIOR           reduce using rule 81 (loopStatement -> whileStatement .)
    MENORIGUAL      reduce using rule 81 (loopStatement -> whileStatement .)
    MAIORIGUAL      reduce using rule 81 (loopStatement -> whileStatement .)
    DIFERENTE       reduce using rule 81 (loopStatement -> whileStatement .)
    IDENTIDADE      reduce using rule 81 (loopStatement -> whileStatement .)
    IGUALDADE       reduce using rule 81 (loopStatement -> whileStatement .)
    SEMIDENTIDADE   reduce using rule 81 (loopStatement -> whileStatement .)
    AND             reduce using rule 81 (loopStatement -> whileStatement .)
    OR              reduce using rule 81 (loopStatement -> whileStatement .)
    COMMA           reduce using rule 81 (loopStatement -> whileStatement .)
    RPAREN          reduce using rule 81 (loopStatement -> whileStatement .)
    RCCT            reduce using rule 81 (loopStatement -> whileStatement .)
    PV              reduce using rule 81 (loopStatement -> whileStatement .)
    ELSE            reduce using rule 81 (loopStatement -> whileStatement .)


state 68

    (82) loopStatement -> doWhileStatement .

    FUN             reduce using rule 82 (loopStatement -> doWhileStatement .)
    FOR             reduce using rule 82 (loopStatement -> doWhileStatement .)
    WHILE           reduce using rule 82 (loopStatement -> doWhileStatement .)
    DO              reduce using rule 82 (loopStatement -> doWhileStatement .)
    VAR             reduce using rule 82 (loopStatement -> doWhileStatement .)
    VAL             reduce using rule 82 (loopStatement -> doWhileStatement .)
    ID              reduce using rule 82 (loopStatement -> doWhileStatement .)
    CROSSINLINE     reduce using rule 82 (loopStatement -> doWhileStatement .)
    IMPORT          reduce using rule 82 (loopStatement -> doWhileStatement .)
    INIT            reduce using rule 82 (loopStatement -> doWhileStatement .)
    NOINLINE        reduce using rule 82 (loopStatement -> doWhileStatement .)
    OUT             reduce using rule 82 (loopStatement -> doWhileStatement .)
    VARARG          reduce using rule 82 (loopStatement -> doWhileStatement .)
    WHERE           reduce using rule 82 (loopStatement -> doWhileStatement .)
    OBJECT          reduce using rule 82 (loopStatement -> doWhileStatement .)
    CONST           reduce using rule 82 (loopStatement -> doWhileStatement .)
    CONSTRUCTOR     reduce using rule 82 (loopStatement -> doWhileStatement .)
    EOF             reduce using rule 82 (loopStatement -> doWhileStatement .)
    FALSE           reduce using rule 82 (loopStatement -> doWhileStatement .)
    FUNCTION        reduce using rule 82 (loopStatement -> doWhileStatement .)
    NULL            reduce using rule 82 (loopStatement -> doWhileStatement .)
    NULLABLE        reduce using rule 82 (loopStatement -> doWhileStatement .)
    NUMBER          reduce using rule 82 (loopStatement -> doWhileStatement .)
    OPERATOR        reduce using rule 82 (loopStatement -> doWhileStatement .)
    SMARTCAST       reduce using rule 82 (loopStatement -> doWhileStatement .)
    THIS            reduce using rule 82 (loopStatement -> doWhileStatement .)
    TRUE            reduce using rule 82 (loopStatement -> doWhileStatement .)
    WHEN            reduce using rule 82 (loopStatement -> doWhileStatement .)
    LONG            reduce using rule 82 (loopStatement -> doWhileStatement .)
    ARRAY           reduce using rule 82 (loopStatement -> doWhileStatement .)
    LPAREN          reduce using rule 82 (loopStatement -> doWhileStatement .)
    LITERAL_STRING  reduce using rule 82 (loopStatement -> doWhileStatement .)
    LCCT            reduce using rule 82 (loopStatement -> doWhileStatement .)
    IF              reduce using rule 82 (loopStatement -> doWhileStatement .)
    RETURN          reduce using rule 82 (loopStatement -> doWhileStatement .)
    RETURN_AT       reduce using rule 82 (loopStatement -> doWhileStatement .)
    CONTINUE        reduce using rule 82 (loopStatement -> doWhileStatement .)
    CONTINUE_AT     reduce using rule 82 (loopStatement -> doWhileStatement .)
    BREAK           reduce using rule 82 (loopStatement -> doWhileStatement .)
    BREAK_AT        reduce using rule 82 (loopStatement -> doWhileStatement .)
    RCHAVE          reduce using rule 82 (loopStatement -> doWhileStatement .)
    INCREMENTO      reduce using rule 82 (loopStatement -> doWhileStatement .)
    DECREMENTO      reduce using rule 82 (loopStatement -> doWhileStatement .)
    MINUS           reduce using rule 82 (loopStatement -> doWhileStatement .)
    PLUS            reduce using rule 82 (loopStatement -> doWhileStatement .)
    NOT             reduce using rule 82 (loopStatement -> doWhileStatement .)
    SUSPEND         reduce using rule 82 (loopStatement -> doWhileStatement .)
    COLONCOLON      reduce using rule 82 (loopStatement -> doWhileStatement .)
    LCHAVE          reduce using rule 82 (loopStatement -> doWhileStatement .)
    MENOR           reduce using rule 82 (loopStatement -> doWhileStatement .)
    PONTO           reduce using rule 82 (loopStatement -> doWhileStatement .)
    AS              reduce using rule 82 (loopStatement -> doWhileStatement .)
    MAISIGUAL       reduce using rule 82 (loopStatement -> doWhileStatement .)
    MENOSIGUAL      reduce using rule 82 (loopStatement -> doWhileStatement .)
    MULTIGUAL       reduce using rule 82 (loopStatement -> doWhileStatement .)
    DIVIGUAL        reduce using rule 82 (loopStatement -> doWhileStatement .)
    MODIGUAL        reduce using rule 82 (loopStatement -> doWhileStatement .)
    MULT            reduce using rule 82 (loopStatement -> doWhileStatement .)
    DIVIDE          reduce using rule 82 (loopStatement -> doWhileStatement .)
    MOD             reduce using rule 82 (loopStatement -> doWhileStatement .)
    PONTOPONTO      reduce using rule 82 (loopStatement -> doWhileStatement .)
    ELVIS           reduce using rule 82 (loopStatement -> doWhileStatement .)
    IN              reduce using rule 82 (loopStatement -> doWhileStatement .)
    NOT_IN          reduce using rule 82 (loopStatement -> doWhileStatement .)
    IS              reduce using rule 82 (loopStatement -> doWhileStatement .)
    NOT_IS          reduce using rule 82 (loopStatement -> doWhileStatement .)
    MAIOR           reduce using rule 82 (loopStatement -> doWhileStatement .)
    MENORIGUAL      reduce using rule 82 (loopStatement -> doWhileStatement .)
    MAIORIGUAL      reduce using rule 82 (loopStatement -> doWhileStatement .)
    DIFERENTE       reduce using rule 82 (loopStatement -> doWhileStatement .)
    IDENTIDADE      reduce using rule 82 (loopStatement -> doWhileStatement .)
    IGUALDADE       reduce using rule 82 (loopStatement -> doWhileStatement .)
    SEMIDENTIDADE   reduce using rule 82 (loopStatement -> doWhileStatement .)
    AND             reduce using rule 82 (loopStatement -> doWhileStatement .)
    OR              reduce using rule 82 (loopStatement -> doWhileStatement .)
    COMMA           reduce using rule 82 (loopStatement -> doWhileStatement .)
    RPAREN          reduce using rule 82 (loopStatement -> doWhileStatement .)
    RCCT            reduce using rule 82 (loopStatement -> doWhileStatement .)
    PV              reduce using rule 82 (loopStatement -> doWhileStatement .)
    ELSE            reduce using rule 82 (loopStatement -> doWhileStatement .)


state 69

    (12) expression -> disjunction .

    INCREMENTO      reduce using rule 12 (expression -> disjunction .)
    DECREMENTO      reduce using rule 12 (expression -> disjunction .)
    MENOR           reduce using rule 12 (expression -> disjunction .)
    LCCT            reduce using rule 12 (expression -> disjunction .)
    COLONCOLON      reduce using rule 12 (expression -> disjunction .)
    PONTO           reduce using rule 12 (expression -> disjunction .)
    LPAREN          reduce using rule 12 (expression -> disjunction .)
    RCHAVE          reduce using rule 12 (expression -> disjunction .)
    AS              reduce using rule 12 (expression -> disjunction .)
    MAISIGUAL       reduce using rule 12 (expression -> disjunction .)
    MENOSIGUAL      reduce using rule 12 (expression -> disjunction .)
    MULTIGUAL       reduce using rule 12 (expression -> disjunction .)
    DIVIGUAL        reduce using rule 12 (expression -> disjunction .)
    MODIGUAL        reduce using rule 12 (expression -> disjunction .)
    MULT            reduce using rule 12 (expression -> disjunction .)
    DIVIDE          reduce using rule 12 (expression -> disjunction .)
    MOD             reduce using rule 12 (expression -> disjunction .)
    PLUS            reduce using rule 12 (expression -> disjunction .)
    MINUS           reduce using rule 12 (expression -> disjunction .)
    PONTOPONTO      reduce using rule 12 (expression -> disjunction .)
    ID              reduce using rule 12 (expression -> disjunction .)
    CROSSINLINE     reduce using rule 12 (expression -> disjunction .)
    IMPORT          reduce using rule 12 (expression -> disjunction .)
    INIT            reduce using rule 12 (expression -> disjunction .)
    NOINLINE        reduce using rule 12 (expression -> disjunction .)
    OUT             reduce using rule 12 (expression -> disjunction .)
    VARARG          reduce using rule 12 (expression -> disjunction .)
    WHERE           reduce using rule 12 (expression -> disjunction .)
    OBJECT          reduce using rule 12 (expression -> disjunction .)
    CONST           reduce using rule 12 (expression -> disjunction .)
    CONSTRUCTOR     reduce using rule 12 (expression -> disjunction .)
    EOF             reduce using rule 12 (expression -> disjunction .)
    FALSE           reduce using rule 12 (expression -> disjunction .)
    FUNCTION        reduce using rule 12 (expression -> disjunction .)
    NULL            reduce using rule 12 (expression -> disjunction .)
    NULLABLE        reduce using rule 12 (expression -> disjunction .)
    NUMBER          reduce using rule 12 (expression -> disjunction .)
    OPERATOR        reduce using rule 12 (expression -> disjunction .)
    SMARTCAST       reduce using rule 12 (expression -> disjunction .)
    THIS            reduce using rule 12 (expression -> disjunction .)
    TRUE            reduce using rule 12 (expression -> disjunction .)
    VAL             reduce using rule 12 (expression -> disjunction .)
    VAR             reduce using rule 12 (expression -> disjunction .)
    WHEN            reduce using rule 12 (expression -> disjunction .)
    LONG            reduce using rule 12 (expression -> disjunction .)
    ARRAY           reduce using rule 12 (expression -> disjunction .)
    ELVIS           reduce using rule 12 (expression -> disjunction .)
    IN              reduce using rule 12 (expression -> disjunction .)
    NOT_IN          reduce using rule 12 (expression -> disjunction .)
    IS              reduce using rule 12 (expression -> disjunction .)
    NOT_IS          reduce using rule 12 (expression -> disjunction .)
    MAIOR           reduce using rule 12 (expression -> disjunction .)
    MENORIGUAL      reduce using rule 12 (expression -> disjunction .)
    MAIORIGUAL      reduce using rule 12 (expression -> disjunction .)
    DIFERENTE       reduce using rule 12 (expression -> disjunction .)
    IDENTIDADE      reduce using rule 12 (expression -> disjunction .)
    IGUALDADE       reduce using rule 12 (expression -> disjunction .)
    SEMIDENTIDADE   reduce using rule 12 (expression -> disjunction .)
    AND             reduce using rule 12 (expression -> disjunction .)
    OR              reduce using rule 12 (expression -> disjunction .)
    FUN             reduce using rule 12 (expression -> disjunction .)
    FOR             reduce using rule 12 (expression -> disjunction .)
    WHILE           reduce using rule 12 (expression -> disjunction .)
    DO              reduce using rule 12 (expression -> disjunction .)
    LITERAL_STRING  reduce using rule 12 (expression -> disjunction .)
    IF              reduce using rule 12 (expression -> disjunction .)
    RETURN          reduce using rule 12 (expression -> disjunction .)
    RETURN_AT       reduce using rule 12 (expression -> disjunction .)
    CONTINUE        reduce using rule 12 (expression -> disjunction .)
    CONTINUE_AT     reduce using rule 12 (expression -> disjunction .)
    BREAK           reduce using rule 12 (expression -> disjunction .)
    BREAK_AT        reduce using rule 12 (expression -> disjunction .)
    NOT             reduce using rule 12 (expression -> disjunction .)
    SUSPEND         reduce using rule 12 (expression -> disjunction .)
    COMMA           reduce using rule 12 (expression -> disjunction .)
    RPAREN          reduce using rule 12 (expression -> disjunction .)
    LCHAVE          reduce using rule 12 (expression -> disjunction .)
    RCCT            reduce using rule 12 (expression -> disjunction .)
    PV              reduce using rule 12 (expression -> disjunction .)
    ELSE            reduce using rule 12 (expression -> disjunction .)


state 70

    (17) propertyDeclaration -> varOrVal . optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (15) optionalTypeParameters -> . typeParameters
    (16) optionalTypeParameters -> .
    (18) typeParameters -> . MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR

    LPAREN          reduce using rule 16 (optionalTypeParameters -> .)
    ID              reduce using rule 16 (optionalTypeParameters -> .)
    CROSSINLINE     reduce using rule 16 (optionalTypeParameters -> .)
    IMPORT          reduce using rule 16 (optionalTypeParameters -> .)
    INIT            reduce using rule 16 (optionalTypeParameters -> .)
    NOINLINE        reduce using rule 16 (optionalTypeParameters -> .)
    OUT             reduce using rule 16 (optionalTypeParameters -> .)
    VARARG          reduce using rule 16 (optionalTypeParameters -> .)
    WHERE           reduce using rule 16 (optionalTypeParameters -> .)
    OBJECT          reduce using rule 16 (optionalTypeParameters -> .)
    CONST           reduce using rule 16 (optionalTypeParameters -> .)
    CONSTRUCTOR     reduce using rule 16 (optionalTypeParameters -> .)
    EOF             reduce using rule 16 (optionalTypeParameters -> .)
    FALSE           reduce using rule 16 (optionalTypeParameters -> .)
    FUNCTION        reduce using rule 16 (optionalTypeParameters -> .)
    NULL            reduce using rule 16 (optionalTypeParameters -> .)
    NULLABLE        reduce using rule 16 (optionalTypeParameters -> .)
    NUMBER          reduce using rule 16 (optionalTypeParameters -> .)
    OPERATOR        reduce using rule 16 (optionalTypeParameters -> .)
    SMARTCAST       reduce using rule 16 (optionalTypeParameters -> .)
    THIS            reduce using rule 16 (optionalTypeParameters -> .)
    TRUE            reduce using rule 16 (optionalTypeParameters -> .)
    VAL             reduce using rule 16 (optionalTypeParameters -> .)
    VAR             reduce using rule 16 (optionalTypeParameters -> .)
    WHEN            reduce using rule 16 (optionalTypeParameters -> .)
    LONG            reduce using rule 16 (optionalTypeParameters -> .)
    ARRAY           reduce using rule 16 (optionalTypeParameters -> .)
    MENOR           shift and go to state 161

    optionalTypeParameters         shift and go to state 159
    typeParameters                 shift and go to state 160

state 71

    (136) directlyAssignableExpression -> postfixUnaryExpression . assignableSuffix
    (121) prefixUnaryExpression -> postfixUnaryExpression .
    (143) assignableSuffix -> . typeArguments
    (144) assignableSuffix -> . indexingSuffix
    (145) assignableSuffix -> . navigationSuffix
    (159) typeArguments -> . MENOR typeArgumentsRecursive MAIOR
    (160) typeArguments -> . MENOR MAIOR
    (146) indexingSuffix -> . LCCT indexingSuffixRecursive RCCT
    (147) indexingSuffix -> . LCCT RCCT
    (150) navigationSuffix -> . memberAccessOperator simpleIdentifier CLASS
    (151) navigationSuffix -> . memberAccessOperator parenthesizedExpression CLASS
    (260) memberAccessOperator -> . safeNav
    (261) memberAccessOperator -> . COLONCOLON
    (262) safeNav -> . PONTO

  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for COLONCOLON resolved as shift
  ! shift/reduce conflict for PONTO resolved as shift
    INCREMENTO      reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    DECREMENTO      reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    LPAREN          reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    RCHAVE          reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    AS              reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    MAISIGUAL       reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    MENOSIGUAL      reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    MULTIGUAL       reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    DIVIGUAL        reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    MODIGUAL        reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    MULT            reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    DIVIDE          reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    MOD             reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    PLUS            reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    MINUS           reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    PONTOPONTO      reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    ID              reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    CROSSINLINE     reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    IMPORT          reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    INIT            reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOINLINE        reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    OUT             reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    VARARG          reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    WHERE           reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    OBJECT          reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONST           reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONSTRUCTOR     reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    EOF             reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    FALSE           reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    FUNCTION        reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    NULL            reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    NULLABLE        reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    NUMBER          reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    OPERATOR        reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    SMARTCAST       reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    THIS            reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    TRUE            reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    VAL             reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    VAR             reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    WHEN            reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    LONG            reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    ARRAY           reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    ELVIS           reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    IN              reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOT_IN          reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    IS              reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOT_IS          reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    MAIOR           reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    MENORIGUAL      reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    MAIORIGUAL      reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    DIFERENTE       reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    IDENTIDADE      reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    IGUALDADE       reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    SEMIDENTIDADE   reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    AND             reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    OR              reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    FUN             reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    FOR             reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    WHILE           reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    DO              reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    LITERAL_STRING  reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    IF              reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    RETURN          reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    RETURN_AT       reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONTINUE        reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONTINUE_AT     reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    BREAK           reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    BREAK_AT        reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOT             reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    SUSPEND         reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    LCHAVE          reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    RPAREN          reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    COMMA           reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    RCCT            reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    PV              reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    ELSE            reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    MENOR           shift and go to state 166
    LCCT            shift and go to state 167
    COLONCOLON      shift and go to state 170
    PONTO           shift and go to state 171

  ! MENOR           [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! LCCT            [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! COLONCOLON      [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! PONTO           [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]

    assignableSuffix               shift and go to state 162
    typeArguments                  shift and go to state 163
    indexingSuffix                 shift and go to state 164
    navigationSuffix               shift and go to state 165
    memberAccessOperator           shift and go to state 168
    safeNav                        shift and go to state 169

state 72

    (138) directlyAssignableExpression -> parenthesizedDirectlyAssignableExpression .

    ATRIBUICAO      reduce using rule 138 (directlyAssignableExpression -> parenthesizedDirectlyAssignableExpression .)
    RPAREN          reduce using rule 138 (directlyAssignableExpression -> parenthesizedDirectlyAssignableExpression .)


state 73

    (140) assignableExpression -> prefixUnaryExpression .
    (118) asExpression -> prefixUnaryExpression .
    (119) asExpression -> prefixUnaryExpression . asOperator type
    (251) asOperator -> . AS
    (252) asOperator -> . AS asOperator

  ! reduce/reduce conflict for MAISIGUAL resolved using rule 118 (asExpression -> prefixUnaryExpression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 118 (asExpression -> prefixUnaryExpression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 118 (asExpression -> prefixUnaryExpression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 118 (asExpression -> prefixUnaryExpression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 118 (asExpression -> prefixUnaryExpression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 118 (asExpression -> prefixUnaryExpression .)
  ! shift/reduce conflict for AS resolved as shift
    INCREMENTO      reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    DECREMENTO      reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    MENOR           reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    LCCT            reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    COLONCOLON      reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    PONTO           reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    LPAREN          reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    RCHAVE          reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    MAISIGUAL       reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    MENOSIGUAL      reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    MULTIGUAL       reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    DIVIGUAL        reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    MODIGUAL        reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    MULT            reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    DIVIDE          reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    MOD             reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    PLUS            reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    MINUS           reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    PONTOPONTO      reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    ID              reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    CROSSINLINE     reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    IMPORT          reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    INIT            reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    NOINLINE        reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    OUT             reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    VARARG          reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    WHERE           reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    OBJECT          reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    CONST           reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    CONSTRUCTOR     reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    EOF             reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    FALSE           reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    FUNCTION        reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    NULL            reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    NULLABLE        reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    NUMBER          reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    OPERATOR        reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    SMARTCAST       reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    THIS            reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    TRUE            reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    VAL             reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    VAR             reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    WHEN            reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    LONG            reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    ARRAY           reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    ELVIS           reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    IN              reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    NOT_IN          reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    IS              reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    NOT_IS          reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    MAIOR           reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    MENORIGUAL      reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    MAIORIGUAL      reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    DIFERENTE       reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    IDENTIDADE      reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    IGUALDADE       reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    SEMIDENTIDADE   reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    AND             reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    OR              reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    FUN             reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    FOR             reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    WHILE           reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    DO              reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    LITERAL_STRING  reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    IF              reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    RETURN          reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    RETURN_AT       reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    CONTINUE        reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    CONTINUE_AT     reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    BREAK           reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    BREAK_AT        reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    NOT             reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    SUSPEND         reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    LCHAVE          reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    RPAREN          reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    COMMA           reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    RCCT            reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    PV              reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    ELSE            reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    AS              shift and go to state 173

  ! MAISIGUAL       [ reduce using rule 140 (assignableExpression -> prefixUnaryExpression .) ]
  ! MENOSIGUAL      [ reduce using rule 140 (assignableExpression -> prefixUnaryExpression .) ]
  ! MULTIGUAL       [ reduce using rule 140 (assignableExpression -> prefixUnaryExpression .) ]
  ! DIVIGUAL        [ reduce using rule 140 (assignableExpression -> prefixUnaryExpression .) ]
  ! MODIGUAL        [ reduce using rule 140 (assignableExpression -> prefixUnaryExpression .) ]
  ! RPAREN          [ reduce using rule 140 (assignableExpression -> prefixUnaryExpression .) ]
  ! AS              [ reduce using rule 118 (asExpression -> prefixUnaryExpression .) ]

    asOperator                     shift and go to state 172

state 74

    (141) assignableExpression -> parenthesizedAssignableExpression .

    MAISIGUAL       reduce using rule 141 (assignableExpression -> parenthesizedAssignableExpression .)
    MENOSIGUAL      reduce using rule 141 (assignableExpression -> parenthesizedAssignableExpression .)
    MULTIGUAL       reduce using rule 141 (assignableExpression -> parenthesizedAssignableExpression .)
    DIVIGUAL        reduce using rule 141 (assignableExpression -> parenthesizedAssignableExpression .)
    MODIGUAL        reduce using rule 141 (assignableExpression -> parenthesizedAssignableExpression .)
    RPAREN          reduce using rule 141 (assignableExpression -> parenthesizedAssignableExpression .)


state 75

    (85) forStatement -> FOR . LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody

    LPAREN          shift and go to state 174


state 76

    (139) parenthesizedDirectlyAssignableExpression -> LPAREN . directlyAssignableExpression RPAREN
    (142) parenthesizedAssignableExpression -> LPAREN . assignableExpression RPAREN
    (178) parenthesizedExpression -> LPAREN . expression RPAREN
    (136) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (137) directlyAssignableExpression -> . simpleIdentifier
    (138) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (140) assignableExpression -> . prefixUnaryExpression
    (141) assignableExpression -> . parenthesizedAssignableExpression
    (12) expression -> . disjunction
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (139) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (142) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (69) receiverType -> . typeModifier parenthesizedType
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (48) typeModifier -> . SUSPEND
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 76
    LITERAL_STRING  shift and go to state 86
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    SUSPEND         shift and go to state 48

    directlyAssignableExpression   shift and go to state 175
    assignableExpression           shift and go to state 176
    expression                     shift and go to state 177
    postfixUnaryExpression         shift and go to state 71
    simpleIdentifier               shift and go to state 63
    parenthesizedDirectlyAssignableExpression shift and go to state 72
    prefixUnaryExpression          shift and go to state 73
    parenthesizedAssignableExpression shift and go to state 74
    disjunction                    shift and go to state 69
    primaryExpression              shift and go to state 82
    prefixUnaryExpressionRecursive shift and go to state 83
    conjunction                    shift and go to state 79
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    unaryPrefix                    shift and go to state 92
    equality                       shift and go to state 84
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    comparison                     shift and go to state 93
    receiverType                   shift and go to state 108
    infixOperation                 shift and go to state 107
    typeModifier                   shift and go to state 115
    elvisExpression                shift and go to state 114
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120

state 77

    (86) whileStatement -> WHILE . LPAREN expression RPAREN controlStructureBody
    (87) whileStatement -> WHILE . LPAREN expression RPAREN PV

    LPAREN          shift and go to state 178


state 78

    (88) doWhileStatement -> DO . controlStructureBody WHILE LPAREN expression RPAREN
    (89) doWhileStatement -> DO . WHILE LPAREN expression RPAREN
    (77) controlStructureBody -> . block
    (78) controlStructureBody -> . statement
    (79) block -> . LCHAVE statements RCHAVE
    (72) statement -> . functionDeclaration
    (73) statement -> . assignment
    (74) statement -> . loopStatement
    (75) statement -> . expression
    (76) statement -> . propertyDeclaration
    (7) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (90) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (91) assignment -> . assignableExpression assignmentAndOperator expression
    (80) loopStatement -> . forStatement
    (81) loopStatement -> . whileStatement
    (82) loopStatement -> . doWhileStatement
    (12) expression -> . disjunction
    (17) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (136) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (137) directlyAssignableExpression -> . simpleIdentifier
    (138) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (140) assignableExpression -> . prefixUnaryExpression
    (141) assignableExpression -> . parenthesizedAssignableExpression
    (85) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody
    (86) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (87) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (88) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (89) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (13) varOrVal -> . VAR
    (14) varOrVal -> . VAL
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (139) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (142) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (69) receiverType -> . typeModifier parenthesizedType
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (48) typeModifier -> . SUSPEND
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type

    WHILE           shift and go to state 180
    LCHAVE          shift and go to state 43
    FUN             shift and go to state 62
    FOR             shift and go to state 75
    DO              shift and go to state 78
    VAR             shift and go to state 80
    VAL             shift and go to state 81
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 76
    LITERAL_STRING  shift and go to state 86
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    SUSPEND         shift and go to state 48

    controlStructureBody           shift and go to state 179
    expression                     shift and go to state 60
    block                          shift and go to state 181
    statement                      shift and go to state 182
    functionDeclaration            shift and go to state 57
    assignment                     shift and go to state 58
    loopStatement                  shift and go to state 59
    propertyDeclaration            shift and go to state 61
    simpleIdentifier               shift and go to state 63
    directlyAssignableExpression   shift and go to state 64
    assignableExpression           shift and go to state 65
    forStatement                   shift and go to state 66
    whileStatement                 shift and go to state 67
    doWhileStatement               shift and go to state 68
    disjunction                    shift and go to state 69
    varOrVal                       shift and go to state 70
    postfixUnaryExpression         shift and go to state 71
    parenthesizedDirectlyAssignableExpression shift and go to state 72
    prefixUnaryExpression          shift and go to state 73
    parenthesizedAssignableExpression shift and go to state 74
    conjunction                    shift and go to state 79
    primaryExpression              shift and go to state 82
    prefixUnaryExpressionRecursive shift and go to state 83
    equality                       shift and go to state 84
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    unaryPrefix                    shift and go to state 92
    comparison                     shift and go to state 93
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    infixOperation                 shift and go to state 107
    receiverType                   shift and go to state 108
    elvisExpression                shift and go to state 114
    typeModifier                   shift and go to state 115
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120

state 79

    (92) disjunction -> conjunction .
    (93) disjunction -> conjunction . OR disjunction

  ! shift/reduce conflict for OR resolved as shift
    INCREMENTO      reduce using rule 92 (disjunction -> conjunction .)
    DECREMENTO      reduce using rule 92 (disjunction -> conjunction .)
    MENOR           reduce using rule 92 (disjunction -> conjunction .)
    LCCT            reduce using rule 92 (disjunction -> conjunction .)
    COLONCOLON      reduce using rule 92 (disjunction -> conjunction .)
    PONTO           reduce using rule 92 (disjunction -> conjunction .)
    LPAREN          reduce using rule 92 (disjunction -> conjunction .)
    RCHAVE          reduce using rule 92 (disjunction -> conjunction .)
    AS              reduce using rule 92 (disjunction -> conjunction .)
    MAISIGUAL       reduce using rule 92 (disjunction -> conjunction .)
    MENOSIGUAL      reduce using rule 92 (disjunction -> conjunction .)
    MULTIGUAL       reduce using rule 92 (disjunction -> conjunction .)
    DIVIGUAL        reduce using rule 92 (disjunction -> conjunction .)
    MODIGUAL        reduce using rule 92 (disjunction -> conjunction .)
    MULT            reduce using rule 92 (disjunction -> conjunction .)
    DIVIDE          reduce using rule 92 (disjunction -> conjunction .)
    MOD             reduce using rule 92 (disjunction -> conjunction .)
    PLUS            reduce using rule 92 (disjunction -> conjunction .)
    MINUS           reduce using rule 92 (disjunction -> conjunction .)
    PONTOPONTO      reduce using rule 92 (disjunction -> conjunction .)
    ID              reduce using rule 92 (disjunction -> conjunction .)
    CROSSINLINE     reduce using rule 92 (disjunction -> conjunction .)
    IMPORT          reduce using rule 92 (disjunction -> conjunction .)
    INIT            reduce using rule 92 (disjunction -> conjunction .)
    NOINLINE        reduce using rule 92 (disjunction -> conjunction .)
    OUT             reduce using rule 92 (disjunction -> conjunction .)
    VARARG          reduce using rule 92 (disjunction -> conjunction .)
    WHERE           reduce using rule 92 (disjunction -> conjunction .)
    OBJECT          reduce using rule 92 (disjunction -> conjunction .)
    CONST           reduce using rule 92 (disjunction -> conjunction .)
    CONSTRUCTOR     reduce using rule 92 (disjunction -> conjunction .)
    EOF             reduce using rule 92 (disjunction -> conjunction .)
    FALSE           reduce using rule 92 (disjunction -> conjunction .)
    FUNCTION        reduce using rule 92 (disjunction -> conjunction .)
    NULL            reduce using rule 92 (disjunction -> conjunction .)
    NULLABLE        reduce using rule 92 (disjunction -> conjunction .)
    NUMBER          reduce using rule 92 (disjunction -> conjunction .)
    OPERATOR        reduce using rule 92 (disjunction -> conjunction .)
    SMARTCAST       reduce using rule 92 (disjunction -> conjunction .)
    THIS            reduce using rule 92 (disjunction -> conjunction .)
    TRUE            reduce using rule 92 (disjunction -> conjunction .)
    VAL             reduce using rule 92 (disjunction -> conjunction .)
    VAR             reduce using rule 92 (disjunction -> conjunction .)
    WHEN            reduce using rule 92 (disjunction -> conjunction .)
    LONG            reduce using rule 92 (disjunction -> conjunction .)
    ARRAY           reduce using rule 92 (disjunction -> conjunction .)
    ELVIS           reduce using rule 92 (disjunction -> conjunction .)
    IN              reduce using rule 92 (disjunction -> conjunction .)
    NOT_IN          reduce using rule 92 (disjunction -> conjunction .)
    IS              reduce using rule 92 (disjunction -> conjunction .)
    NOT_IS          reduce using rule 92 (disjunction -> conjunction .)
    MAIOR           reduce using rule 92 (disjunction -> conjunction .)
    MENORIGUAL      reduce using rule 92 (disjunction -> conjunction .)
    MAIORIGUAL      reduce using rule 92 (disjunction -> conjunction .)
    DIFERENTE       reduce using rule 92 (disjunction -> conjunction .)
    IDENTIDADE      reduce using rule 92 (disjunction -> conjunction .)
    IGUALDADE       reduce using rule 92 (disjunction -> conjunction .)
    SEMIDENTIDADE   reduce using rule 92 (disjunction -> conjunction .)
    AND             reduce using rule 92 (disjunction -> conjunction .)
    FUN             reduce using rule 92 (disjunction -> conjunction .)
    FOR             reduce using rule 92 (disjunction -> conjunction .)
    WHILE           reduce using rule 92 (disjunction -> conjunction .)
    DO              reduce using rule 92 (disjunction -> conjunction .)
    LITERAL_STRING  reduce using rule 92 (disjunction -> conjunction .)
    IF              reduce using rule 92 (disjunction -> conjunction .)
    RETURN          reduce using rule 92 (disjunction -> conjunction .)
    RETURN_AT       reduce using rule 92 (disjunction -> conjunction .)
    CONTINUE        reduce using rule 92 (disjunction -> conjunction .)
    CONTINUE_AT     reduce using rule 92 (disjunction -> conjunction .)
    BREAK           reduce using rule 92 (disjunction -> conjunction .)
    BREAK_AT        reduce using rule 92 (disjunction -> conjunction .)
    NOT             reduce using rule 92 (disjunction -> conjunction .)
    SUSPEND         reduce using rule 92 (disjunction -> conjunction .)
    COMMA           reduce using rule 92 (disjunction -> conjunction .)
    RPAREN          reduce using rule 92 (disjunction -> conjunction .)
    LCHAVE          reduce using rule 92 (disjunction -> conjunction .)
    RCCT            reduce using rule 92 (disjunction -> conjunction .)
    PV              reduce using rule 92 (disjunction -> conjunction .)
    ELSE            reduce using rule 92 (disjunction -> conjunction .)
    OR              shift and go to state 183

  ! OR              [ reduce using rule 92 (disjunction -> conjunction .) ]


state 80

    (13) varOrVal -> VAR .
    (285) simpleIdentifier -> VAR .

  ! reduce/reduce conflict for MENOR resolved using rule 13 (varOrVal -> VAR .)
  ! reduce/reduce conflict for LPAREN resolved using rule 13 (varOrVal -> VAR .)
  ! reduce/reduce conflict for ID resolved using rule 13 (varOrVal -> VAR .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 13 (varOrVal -> VAR .)
  ! reduce/reduce conflict for IMPORT resolved using rule 13 (varOrVal -> VAR .)
  ! reduce/reduce conflict for INIT resolved using rule 13 (varOrVal -> VAR .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 13 (varOrVal -> VAR .)
  ! reduce/reduce conflict for OUT resolved using rule 13 (varOrVal -> VAR .)
  ! reduce/reduce conflict for VARARG resolved using rule 13 (varOrVal -> VAR .)
  ! reduce/reduce conflict for WHERE resolved using rule 13 (varOrVal -> VAR .)
  ! reduce/reduce conflict for OBJECT resolved using rule 13 (varOrVal -> VAR .)
  ! reduce/reduce conflict for CONST resolved using rule 13 (varOrVal -> VAR .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 13 (varOrVal -> VAR .)
  ! reduce/reduce conflict for EOF resolved using rule 13 (varOrVal -> VAR .)
  ! reduce/reduce conflict for FALSE resolved using rule 13 (varOrVal -> VAR .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 13 (varOrVal -> VAR .)
  ! reduce/reduce conflict for NULL resolved using rule 13 (varOrVal -> VAR .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 13 (varOrVal -> VAR .)
  ! reduce/reduce conflict for NUMBER resolved using rule 13 (varOrVal -> VAR .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 13 (varOrVal -> VAR .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 13 (varOrVal -> VAR .)
  ! reduce/reduce conflict for THIS resolved using rule 13 (varOrVal -> VAR .)
  ! reduce/reduce conflict for TRUE resolved using rule 13 (varOrVal -> VAR .)
  ! reduce/reduce conflict for VAL resolved using rule 13 (varOrVal -> VAR .)
  ! reduce/reduce conflict for VAR resolved using rule 13 (varOrVal -> VAR .)
  ! reduce/reduce conflict for WHEN resolved using rule 13 (varOrVal -> VAR .)
  ! reduce/reduce conflict for LONG resolved using rule 13 (varOrVal -> VAR .)
  ! reduce/reduce conflict for ARRAY resolved using rule 13 (varOrVal -> VAR .)
    MENOR           reduce using rule 13 (varOrVal -> VAR .)
    LPAREN          reduce using rule 13 (varOrVal -> VAR .)
    ID              reduce using rule 13 (varOrVal -> VAR .)
    CROSSINLINE     reduce using rule 13 (varOrVal -> VAR .)
    IMPORT          reduce using rule 13 (varOrVal -> VAR .)
    INIT            reduce using rule 13 (varOrVal -> VAR .)
    NOINLINE        reduce using rule 13 (varOrVal -> VAR .)
    OUT             reduce using rule 13 (varOrVal -> VAR .)
    VARARG          reduce using rule 13 (varOrVal -> VAR .)
    WHERE           reduce using rule 13 (varOrVal -> VAR .)
    OBJECT          reduce using rule 13 (varOrVal -> VAR .)
    CONST           reduce using rule 13 (varOrVal -> VAR .)
    CONSTRUCTOR     reduce using rule 13 (varOrVal -> VAR .)
    EOF             reduce using rule 13 (varOrVal -> VAR .)
    FALSE           reduce using rule 13 (varOrVal -> VAR .)
    FUNCTION        reduce using rule 13 (varOrVal -> VAR .)
    NULL            reduce using rule 13 (varOrVal -> VAR .)
    NULLABLE        reduce using rule 13 (varOrVal -> VAR .)
    NUMBER          reduce using rule 13 (varOrVal -> VAR .)
    OPERATOR        reduce using rule 13 (varOrVal -> VAR .)
    SMARTCAST       reduce using rule 13 (varOrVal -> VAR .)
    THIS            reduce using rule 13 (varOrVal -> VAR .)
    TRUE            reduce using rule 13 (varOrVal -> VAR .)
    VAL             reduce using rule 13 (varOrVal -> VAR .)
    VAR             reduce using rule 13 (varOrVal -> VAR .)
    WHEN            reduce using rule 13 (varOrVal -> VAR .)
    LONG            reduce using rule 13 (varOrVal -> VAR .)
    ARRAY           reduce using rule 13 (varOrVal -> VAR .)
    ATRIBUICAO      reduce using rule 285 (simpleIdentifier -> VAR .)
    INCREMENTO      reduce using rule 285 (simpleIdentifier -> VAR .)
    DECREMENTO      reduce using rule 285 (simpleIdentifier -> VAR .)
    LCCT            reduce using rule 285 (simpleIdentifier -> VAR .)
    COLONCOLON      reduce using rule 285 (simpleIdentifier -> VAR .)
    PONTO           reduce using rule 285 (simpleIdentifier -> VAR .)
    RCHAVE          reduce using rule 285 (simpleIdentifier -> VAR .)
    AS              reduce using rule 285 (simpleIdentifier -> VAR .)
    MAISIGUAL       reduce using rule 285 (simpleIdentifier -> VAR .)
    MENOSIGUAL      reduce using rule 285 (simpleIdentifier -> VAR .)
    MULTIGUAL       reduce using rule 285 (simpleIdentifier -> VAR .)
    DIVIGUAL        reduce using rule 285 (simpleIdentifier -> VAR .)
    MODIGUAL        reduce using rule 285 (simpleIdentifier -> VAR .)
    MULT            reduce using rule 285 (simpleIdentifier -> VAR .)
    DIVIDE          reduce using rule 285 (simpleIdentifier -> VAR .)
    MOD             reduce using rule 285 (simpleIdentifier -> VAR .)
    PLUS            reduce using rule 285 (simpleIdentifier -> VAR .)
    MINUS           reduce using rule 285 (simpleIdentifier -> VAR .)
    PONTOPONTO      reduce using rule 285 (simpleIdentifier -> VAR .)
    ELVIS           reduce using rule 285 (simpleIdentifier -> VAR .)
    IN              reduce using rule 285 (simpleIdentifier -> VAR .)
    NOT_IN          reduce using rule 285 (simpleIdentifier -> VAR .)
    IS              reduce using rule 285 (simpleIdentifier -> VAR .)
    NOT_IS          reduce using rule 285 (simpleIdentifier -> VAR .)
    MAIOR           reduce using rule 285 (simpleIdentifier -> VAR .)
    MENORIGUAL      reduce using rule 285 (simpleIdentifier -> VAR .)
    MAIORIGUAL      reduce using rule 285 (simpleIdentifier -> VAR .)
    DIFERENTE       reduce using rule 285 (simpleIdentifier -> VAR .)
    IDENTIDADE      reduce using rule 285 (simpleIdentifier -> VAR .)
    IGUALDADE       reduce using rule 285 (simpleIdentifier -> VAR .)
    SEMIDENTIDADE   reduce using rule 285 (simpleIdentifier -> VAR .)
    AND             reduce using rule 285 (simpleIdentifier -> VAR .)
    OR              reduce using rule 285 (simpleIdentifier -> VAR .)
    FUN             reduce using rule 285 (simpleIdentifier -> VAR .)
    FOR             reduce using rule 285 (simpleIdentifier -> VAR .)
    WHILE           reduce using rule 285 (simpleIdentifier -> VAR .)
    DO              reduce using rule 285 (simpleIdentifier -> VAR .)
    LITERAL_STRING  reduce using rule 285 (simpleIdentifier -> VAR .)
    IF              reduce using rule 285 (simpleIdentifier -> VAR .)
    RETURN          reduce using rule 285 (simpleIdentifier -> VAR .)
    RETURN_AT       reduce using rule 285 (simpleIdentifier -> VAR .)
    CONTINUE        reduce using rule 285 (simpleIdentifier -> VAR .)
    CONTINUE_AT     reduce using rule 285 (simpleIdentifier -> VAR .)
    BREAK           reduce using rule 285 (simpleIdentifier -> VAR .)
    BREAK_AT        reduce using rule 285 (simpleIdentifier -> VAR .)
    NOT             reduce using rule 285 (simpleIdentifier -> VAR .)
    SUSPEND         reduce using rule 285 (simpleIdentifier -> VAR .)
    DOISP           reduce using rule 285 (simpleIdentifier -> VAR .)
    COMMA           reduce using rule 285 (simpleIdentifier -> VAR .)
    SETA            reduce using rule 285 (simpleIdentifier -> VAR .)
    LCHAVE          reduce using rule 285 (simpleIdentifier -> VAR .)
    RPAREN          reduce using rule 285 (simpleIdentifier -> VAR .)
    RCCT            reduce using rule 285 (simpleIdentifier -> VAR .)
    PV              reduce using rule 285 (simpleIdentifier -> VAR .)
    ELSE            reduce using rule 285 (simpleIdentifier -> VAR .)

  ! MENOR           [ reduce using rule 285 (simpleIdentifier -> VAR .) ]
  ! LPAREN          [ reduce using rule 285 (simpleIdentifier -> VAR .) ]
  ! ID              [ reduce using rule 285 (simpleIdentifier -> VAR .) ]
  ! CROSSINLINE     [ reduce using rule 285 (simpleIdentifier -> VAR .) ]
  ! IMPORT          [ reduce using rule 285 (simpleIdentifier -> VAR .) ]
  ! INIT            [ reduce using rule 285 (simpleIdentifier -> VAR .) ]
  ! NOINLINE        [ reduce using rule 285 (simpleIdentifier -> VAR .) ]
  ! OUT             [ reduce using rule 285 (simpleIdentifier -> VAR .) ]
  ! VARARG          [ reduce using rule 285 (simpleIdentifier -> VAR .) ]
  ! WHERE           [ reduce using rule 285 (simpleIdentifier -> VAR .) ]
  ! OBJECT          [ reduce using rule 285 (simpleIdentifier -> VAR .) ]
  ! CONST           [ reduce using rule 285 (simpleIdentifier -> VAR .) ]
  ! CONSTRUCTOR     [ reduce using rule 285 (simpleIdentifier -> VAR .) ]
  ! EOF             [ reduce using rule 285 (simpleIdentifier -> VAR .) ]
  ! FALSE           [ reduce using rule 285 (simpleIdentifier -> VAR .) ]
  ! FUNCTION        [ reduce using rule 285 (simpleIdentifier -> VAR .) ]
  ! NULL            [ reduce using rule 285 (simpleIdentifier -> VAR .) ]
  ! NULLABLE        [ reduce using rule 285 (simpleIdentifier -> VAR .) ]
  ! NUMBER          [ reduce using rule 285 (simpleIdentifier -> VAR .) ]
  ! OPERATOR        [ reduce using rule 285 (simpleIdentifier -> VAR .) ]
  ! SMARTCAST       [ reduce using rule 285 (simpleIdentifier -> VAR .) ]
  ! THIS            [ reduce using rule 285 (simpleIdentifier -> VAR .) ]
  ! TRUE            [ reduce using rule 285 (simpleIdentifier -> VAR .) ]
  ! VAL             [ reduce using rule 285 (simpleIdentifier -> VAR .) ]
  ! VAR             [ reduce using rule 285 (simpleIdentifier -> VAR .) ]
  ! WHEN            [ reduce using rule 285 (simpleIdentifier -> VAR .) ]
  ! LONG            [ reduce using rule 285 (simpleIdentifier -> VAR .) ]
  ! ARRAY           [ reduce using rule 285 (simpleIdentifier -> VAR .) ]


state 81

    (14) varOrVal -> VAL .
    (284) simpleIdentifier -> VAL .

  ! reduce/reduce conflict for MENOR resolved using rule 14 (varOrVal -> VAL .)
  ! reduce/reduce conflict for LPAREN resolved using rule 14 (varOrVal -> VAL .)
  ! reduce/reduce conflict for ID resolved using rule 14 (varOrVal -> VAL .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 14 (varOrVal -> VAL .)
  ! reduce/reduce conflict for IMPORT resolved using rule 14 (varOrVal -> VAL .)
  ! reduce/reduce conflict for INIT resolved using rule 14 (varOrVal -> VAL .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 14 (varOrVal -> VAL .)
  ! reduce/reduce conflict for OUT resolved using rule 14 (varOrVal -> VAL .)
  ! reduce/reduce conflict for VARARG resolved using rule 14 (varOrVal -> VAL .)
  ! reduce/reduce conflict for WHERE resolved using rule 14 (varOrVal -> VAL .)
  ! reduce/reduce conflict for OBJECT resolved using rule 14 (varOrVal -> VAL .)
  ! reduce/reduce conflict for CONST resolved using rule 14 (varOrVal -> VAL .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 14 (varOrVal -> VAL .)
  ! reduce/reduce conflict for EOF resolved using rule 14 (varOrVal -> VAL .)
  ! reduce/reduce conflict for FALSE resolved using rule 14 (varOrVal -> VAL .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 14 (varOrVal -> VAL .)
  ! reduce/reduce conflict for NULL resolved using rule 14 (varOrVal -> VAL .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 14 (varOrVal -> VAL .)
  ! reduce/reduce conflict for NUMBER resolved using rule 14 (varOrVal -> VAL .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 14 (varOrVal -> VAL .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 14 (varOrVal -> VAL .)
  ! reduce/reduce conflict for THIS resolved using rule 14 (varOrVal -> VAL .)
  ! reduce/reduce conflict for TRUE resolved using rule 14 (varOrVal -> VAL .)
  ! reduce/reduce conflict for VAL resolved using rule 14 (varOrVal -> VAL .)
  ! reduce/reduce conflict for VAR resolved using rule 14 (varOrVal -> VAL .)
  ! reduce/reduce conflict for WHEN resolved using rule 14 (varOrVal -> VAL .)
  ! reduce/reduce conflict for LONG resolved using rule 14 (varOrVal -> VAL .)
  ! reduce/reduce conflict for ARRAY resolved using rule 14 (varOrVal -> VAL .)
    MENOR           reduce using rule 14 (varOrVal -> VAL .)
    LPAREN          reduce using rule 14 (varOrVal -> VAL .)
    ID              reduce using rule 14 (varOrVal -> VAL .)
    CROSSINLINE     reduce using rule 14 (varOrVal -> VAL .)
    IMPORT          reduce using rule 14 (varOrVal -> VAL .)
    INIT            reduce using rule 14 (varOrVal -> VAL .)
    NOINLINE        reduce using rule 14 (varOrVal -> VAL .)
    OUT             reduce using rule 14 (varOrVal -> VAL .)
    VARARG          reduce using rule 14 (varOrVal -> VAL .)
    WHERE           reduce using rule 14 (varOrVal -> VAL .)
    OBJECT          reduce using rule 14 (varOrVal -> VAL .)
    CONST           reduce using rule 14 (varOrVal -> VAL .)
    CONSTRUCTOR     reduce using rule 14 (varOrVal -> VAL .)
    EOF             reduce using rule 14 (varOrVal -> VAL .)
    FALSE           reduce using rule 14 (varOrVal -> VAL .)
    FUNCTION        reduce using rule 14 (varOrVal -> VAL .)
    NULL            reduce using rule 14 (varOrVal -> VAL .)
    NULLABLE        reduce using rule 14 (varOrVal -> VAL .)
    NUMBER          reduce using rule 14 (varOrVal -> VAL .)
    OPERATOR        reduce using rule 14 (varOrVal -> VAL .)
    SMARTCAST       reduce using rule 14 (varOrVal -> VAL .)
    THIS            reduce using rule 14 (varOrVal -> VAL .)
    TRUE            reduce using rule 14 (varOrVal -> VAL .)
    VAL             reduce using rule 14 (varOrVal -> VAL .)
    VAR             reduce using rule 14 (varOrVal -> VAL .)
    WHEN            reduce using rule 14 (varOrVal -> VAL .)
    LONG            reduce using rule 14 (varOrVal -> VAL .)
    ARRAY           reduce using rule 14 (varOrVal -> VAL .)
    ATRIBUICAO      reduce using rule 284 (simpleIdentifier -> VAL .)
    INCREMENTO      reduce using rule 284 (simpleIdentifier -> VAL .)
    DECREMENTO      reduce using rule 284 (simpleIdentifier -> VAL .)
    LCCT            reduce using rule 284 (simpleIdentifier -> VAL .)
    COLONCOLON      reduce using rule 284 (simpleIdentifier -> VAL .)
    PONTO           reduce using rule 284 (simpleIdentifier -> VAL .)
    RCHAVE          reduce using rule 284 (simpleIdentifier -> VAL .)
    AS              reduce using rule 284 (simpleIdentifier -> VAL .)
    MAISIGUAL       reduce using rule 284 (simpleIdentifier -> VAL .)
    MENOSIGUAL      reduce using rule 284 (simpleIdentifier -> VAL .)
    MULTIGUAL       reduce using rule 284 (simpleIdentifier -> VAL .)
    DIVIGUAL        reduce using rule 284 (simpleIdentifier -> VAL .)
    MODIGUAL        reduce using rule 284 (simpleIdentifier -> VAL .)
    MULT            reduce using rule 284 (simpleIdentifier -> VAL .)
    DIVIDE          reduce using rule 284 (simpleIdentifier -> VAL .)
    MOD             reduce using rule 284 (simpleIdentifier -> VAL .)
    PLUS            reduce using rule 284 (simpleIdentifier -> VAL .)
    MINUS           reduce using rule 284 (simpleIdentifier -> VAL .)
    PONTOPONTO      reduce using rule 284 (simpleIdentifier -> VAL .)
    ELVIS           reduce using rule 284 (simpleIdentifier -> VAL .)
    IN              reduce using rule 284 (simpleIdentifier -> VAL .)
    NOT_IN          reduce using rule 284 (simpleIdentifier -> VAL .)
    IS              reduce using rule 284 (simpleIdentifier -> VAL .)
    NOT_IS          reduce using rule 284 (simpleIdentifier -> VAL .)
    MAIOR           reduce using rule 284 (simpleIdentifier -> VAL .)
    MENORIGUAL      reduce using rule 284 (simpleIdentifier -> VAL .)
    MAIORIGUAL      reduce using rule 284 (simpleIdentifier -> VAL .)
    DIFERENTE       reduce using rule 284 (simpleIdentifier -> VAL .)
    IDENTIDADE      reduce using rule 284 (simpleIdentifier -> VAL .)
    IGUALDADE       reduce using rule 284 (simpleIdentifier -> VAL .)
    SEMIDENTIDADE   reduce using rule 284 (simpleIdentifier -> VAL .)
    AND             reduce using rule 284 (simpleIdentifier -> VAL .)
    OR              reduce using rule 284 (simpleIdentifier -> VAL .)
    FUN             reduce using rule 284 (simpleIdentifier -> VAL .)
    FOR             reduce using rule 284 (simpleIdentifier -> VAL .)
    WHILE           reduce using rule 284 (simpleIdentifier -> VAL .)
    DO              reduce using rule 284 (simpleIdentifier -> VAL .)
    LITERAL_STRING  reduce using rule 284 (simpleIdentifier -> VAL .)
    IF              reduce using rule 284 (simpleIdentifier -> VAL .)
    RETURN          reduce using rule 284 (simpleIdentifier -> VAL .)
    RETURN_AT       reduce using rule 284 (simpleIdentifier -> VAL .)
    CONTINUE        reduce using rule 284 (simpleIdentifier -> VAL .)
    CONTINUE_AT     reduce using rule 284 (simpleIdentifier -> VAL .)
    BREAK           reduce using rule 284 (simpleIdentifier -> VAL .)
    BREAK_AT        reduce using rule 284 (simpleIdentifier -> VAL .)
    NOT             reduce using rule 284 (simpleIdentifier -> VAL .)
    SUSPEND         reduce using rule 284 (simpleIdentifier -> VAL .)
    DOISP           reduce using rule 284 (simpleIdentifier -> VAL .)
    COMMA           reduce using rule 284 (simpleIdentifier -> VAL .)
    SETA            reduce using rule 284 (simpleIdentifier -> VAL .)
    LCHAVE          reduce using rule 284 (simpleIdentifier -> VAL .)
    RPAREN          reduce using rule 284 (simpleIdentifier -> VAL .)
    RCCT            reduce using rule 284 (simpleIdentifier -> VAL .)
    PV              reduce using rule 284 (simpleIdentifier -> VAL .)
    ELSE            reduce using rule 284 (simpleIdentifier -> VAL .)

  ! MENOR           [ reduce using rule 284 (simpleIdentifier -> VAL .) ]
  ! LPAREN          [ reduce using rule 284 (simpleIdentifier -> VAL .) ]
  ! ID              [ reduce using rule 284 (simpleIdentifier -> VAL .) ]
  ! CROSSINLINE     [ reduce using rule 284 (simpleIdentifier -> VAL .) ]
  ! IMPORT          [ reduce using rule 284 (simpleIdentifier -> VAL .) ]
  ! INIT            [ reduce using rule 284 (simpleIdentifier -> VAL .) ]
  ! NOINLINE        [ reduce using rule 284 (simpleIdentifier -> VAL .) ]
  ! OUT             [ reduce using rule 284 (simpleIdentifier -> VAL .) ]
  ! VARARG          [ reduce using rule 284 (simpleIdentifier -> VAL .) ]
  ! WHERE           [ reduce using rule 284 (simpleIdentifier -> VAL .) ]
  ! OBJECT          [ reduce using rule 284 (simpleIdentifier -> VAL .) ]
  ! CONST           [ reduce using rule 284 (simpleIdentifier -> VAL .) ]
  ! CONSTRUCTOR     [ reduce using rule 284 (simpleIdentifier -> VAL .) ]
  ! EOF             [ reduce using rule 284 (simpleIdentifier -> VAL .) ]
  ! FALSE           [ reduce using rule 284 (simpleIdentifier -> VAL .) ]
  ! FUNCTION        [ reduce using rule 284 (simpleIdentifier -> VAL .) ]
  ! NULL            [ reduce using rule 284 (simpleIdentifier -> VAL .) ]
  ! NULLABLE        [ reduce using rule 284 (simpleIdentifier -> VAL .) ]
  ! NUMBER          [ reduce using rule 284 (simpleIdentifier -> VAL .) ]
  ! OPERATOR        [ reduce using rule 284 (simpleIdentifier -> VAL .) ]
  ! SMARTCAST       [ reduce using rule 284 (simpleIdentifier -> VAL .) ]
  ! THIS            [ reduce using rule 284 (simpleIdentifier -> VAL .) ]
  ! TRUE            [ reduce using rule 284 (simpleIdentifier -> VAL .) ]
  ! VAL             [ reduce using rule 284 (simpleIdentifier -> VAL .) ]
  ! VAR             [ reduce using rule 284 (simpleIdentifier -> VAL .) ]
  ! WHEN            [ reduce using rule 284 (simpleIdentifier -> VAL .) ]
  ! LONG            [ reduce using rule 284 (simpleIdentifier -> VAL .) ]
  ! ARRAY           [ reduce using rule 284 (simpleIdentifier -> VAL .) ]


state 82

    (129) postfixUnaryExpression -> primaryExpression .
    (130) postfixUnaryExpression -> primaryExpression . postfixUnaryExpressionRecursive
    (127) postfixUnaryExpressionRecursive -> . postfixUnarySuffix
    (128) postfixUnaryExpressionRecursive -> . postfixUnarySuffix postfixUnaryExpressionRecursive
    (131) postfixUnarySuffix -> . postfixUnaryOperator
    (132) postfixUnarySuffix -> . typeArguments
    (133) postfixUnarySuffix -> . callSuffix
    (134) postfixUnarySuffix -> . indexingSuffix
    (135) postfixUnarySuffix -> . navigationSuffix
    (258) postfixUnaryOperator -> . INCREMENTO
    (259) postfixUnaryOperator -> . DECREMENTO
    (159) typeArguments -> . MENOR typeArgumentsRecursive MAIOR
    (160) typeArguments -> . MENOR MAIOR
    (152) callSuffix -> . optionalTypeArguments optionalValueArguments annotatedLambda
    (153) callSuffix -> . optionalTypeArguments optionalValueArguments
    (146) indexingSuffix -> . LCCT indexingSuffixRecursive RCCT
    (147) indexingSuffix -> . LCCT RCCT
    (150) navigationSuffix -> . memberAccessOperator simpleIdentifier CLASS
    (151) navigationSuffix -> . memberAccessOperator parenthesizedExpression CLASS
    (154) optionalTypeArguments -> . typeArguments
    (155) optionalTypeArguments -> .
    (260) memberAccessOperator -> . safeNav
    (261) memberAccessOperator -> . COLONCOLON
    (262) safeNav -> . PONTO

  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! reduce/reduce conflict for COLONCOLON resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for PONTO resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for AS resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MULT resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MOD resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for PLUS resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MINUS resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for ID resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for INIT resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for OUT resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for VARARG resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for WHERE resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for CONST resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for EOF resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for FALSE resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for NULL resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for THIS resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for TRUE resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for VAL resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for VAR resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for WHEN resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for LONG resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for IN resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for IS resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for AND resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for OR resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for FUN resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for FOR resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for WHILE resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for DO resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for IF resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for RETURN resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for BREAK resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for NOT resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for COMMA resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for RCCT resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for PV resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for ELSE resolved using rule 129 (postfixUnaryExpression -> primaryExpression .)
  ! shift/reduce conflict for COLONCOLON resolved as shift
  ! shift/reduce conflict for PONTO resolved as shift
    LPAREN          reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    RCHAVE          reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    AS              reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    MAISIGUAL       reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    MENOSIGUAL      reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    MULTIGUAL       reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    DIVIGUAL        reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    MODIGUAL        reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    MULT            reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    DIVIDE          reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    MOD             reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    PLUS            reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    MINUS           reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    PONTOPONTO      reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    ID              reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    CROSSINLINE     reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    IMPORT          reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    INIT            reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    NOINLINE        reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    OUT             reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    VARARG          reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    WHERE           reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    OBJECT          reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    CONST           reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    CONSTRUCTOR     reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    EOF             reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    FALSE           reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    FUNCTION        reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    NULL            reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    NULLABLE        reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    NUMBER          reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    OPERATOR        reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    SMARTCAST       reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    THIS            reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    TRUE            reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    VAL             reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    VAR             reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    WHEN            reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    LONG            reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    ARRAY           reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    ELVIS           reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    IN              reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    NOT_IN          reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    IS              reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    NOT_IS          reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    MAIOR           reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    MENORIGUAL      reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    MAIORIGUAL      reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    DIFERENTE       reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    IDENTIDADE      reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    IGUALDADE       reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    SEMIDENTIDADE   reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    AND             reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    OR              reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    FUN             reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    FOR             reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    WHILE           reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    DO              reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    LITERAL_STRING  reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    IF              reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    RETURN          reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    RETURN_AT       reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    CONTINUE        reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    CONTINUE_AT     reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    BREAK           reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    BREAK_AT        reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    NOT             reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    SUSPEND         reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    COMMA           reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    RPAREN          reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    LCHAVE          reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    RCCT            reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    PV              reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    ELSE            reduce using rule 129 (postfixUnaryExpression -> primaryExpression .)
    INCREMENTO      shift and go to state 191
    DECREMENTO      shift and go to state 192
    MENOR           shift and go to state 166
    LCCT            shift and go to state 167
    COLONCOLON      shift and go to state 170
    PONTO           shift and go to state 171

  ! INCREMENTO      [ reduce using rule 129 (postfixUnaryExpression -> primaryExpression .) ]
  ! DECREMENTO      [ reduce using rule 129 (postfixUnaryExpression -> primaryExpression .) ]
  ! MENOR           [ reduce using rule 129 (postfixUnaryExpression -> primaryExpression .) ]
  ! LCCT            [ reduce using rule 129 (postfixUnaryExpression -> primaryExpression .) ]
  ! COLONCOLON      [ reduce using rule 129 (postfixUnaryExpression -> primaryExpression .) ]
  ! PONTO           [ reduce using rule 129 (postfixUnaryExpression -> primaryExpression .) ]
  ! LPAREN          [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! RCHAVE          [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! INCREMENTO      [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! DECREMENTO      [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! MENOR           [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! LCCT            [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! COLONCOLON      [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! PONTO           [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! AS              [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! MAISIGUAL       [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! MENOSIGUAL      [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! MULTIGUAL       [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! DIVIGUAL        [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! MODIGUAL        [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! MULT            [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! DIVIDE          [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! MOD             [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! PLUS            [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! MINUS           [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! PONTOPONTO      [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! ID              [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! CROSSINLINE     [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! IMPORT          [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! INIT            [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! NOINLINE        [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! OUT             [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! VARARG          [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! WHERE           [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! OBJECT          [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! CONST           [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! CONSTRUCTOR     [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! EOF             [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! FALSE           [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! FUNCTION        [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! NULL            [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! NULLABLE        [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! NUMBER          [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! OPERATOR        [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! SMARTCAST       [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! THIS            [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! TRUE            [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! VAL             [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! VAR             [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! WHEN            [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! LONG            [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! ARRAY           [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! ELVIS           [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! IN              [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! NOT_IN          [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! IS              [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! NOT_IS          [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! MAIOR           [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! MENORIGUAL      [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! MAIORIGUAL      [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! DIFERENTE       [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! IDENTIDADE      [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! IGUALDADE       [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! AND             [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! OR              [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! FUN             [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! FOR             [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! WHILE           [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! DO              [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! LITERAL_STRING  [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! IF              [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! RETURN          [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! RETURN_AT       [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! CONTINUE        [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! CONTINUE_AT     [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! BREAK           [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! BREAK_AT        [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! NOT             [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! SUSPEND         [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! COMMA           [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! RPAREN          [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! LCHAVE          [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! RCCT            [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! PV              [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! ELSE            [ reduce using rule 155 (optionalTypeArguments -> .) ]

    postfixUnaryExpressionRecursive shift and go to state 184
    postfixUnarySuffix             shift and go to state 185
    postfixUnaryOperator           shift and go to state 186
    typeArguments                  shift and go to state 187
    callSuffix                     shift and go to state 188
    indexingSuffix                 shift and go to state 189
    navigationSuffix               shift and go to state 190
    optionalTypeArguments          shift and go to state 193
    memberAccessOperator           shift and go to state 168
    safeNav                        shift and go to state 169

state 83

    (120) prefixUnaryExpression -> prefixUnaryExpressionRecursive . postfixUnaryExpression
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (12) expression -> . disjunction
    (69) receiverType -> . typeModifier parenthesizedType
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (48) typeModifier -> . SUSPEND
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT

    LITERAL_STRING  shift and go to state 86
    LPAREN          shift and go to state 136
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    SUSPEND         shift and go to state 48
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113

    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 194
    primaryExpression              shift and go to state 82
    parenthesizedExpression        shift and go to state 85
    simpleIdentifier               shift and go to state 133
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    expression                     shift and go to state 195
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    disjunction                    shift and go to state 69
    typeModifier                   shift and go to state 115
    conjunction                    shift and go to state 79
    equality                       shift and go to state 84
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 107
    elvisExpression                shift and go to state 114
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120
    prefixUnaryExpression          shift and go to state 134
    unaryPrefix                    shift and go to state 92
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106

state 84

    (94) conjunction -> equality .
    (95) conjunction -> equality . AND conjunction

  ! shift/reduce conflict for AND resolved as shift
    INCREMENTO      reduce using rule 94 (conjunction -> equality .)
    DECREMENTO      reduce using rule 94 (conjunction -> equality .)
    MENOR           reduce using rule 94 (conjunction -> equality .)
    LCCT            reduce using rule 94 (conjunction -> equality .)
    COLONCOLON      reduce using rule 94 (conjunction -> equality .)
    PONTO           reduce using rule 94 (conjunction -> equality .)
    LPAREN          reduce using rule 94 (conjunction -> equality .)
    RCHAVE          reduce using rule 94 (conjunction -> equality .)
    AS              reduce using rule 94 (conjunction -> equality .)
    MAISIGUAL       reduce using rule 94 (conjunction -> equality .)
    MENOSIGUAL      reduce using rule 94 (conjunction -> equality .)
    MULTIGUAL       reduce using rule 94 (conjunction -> equality .)
    DIVIGUAL        reduce using rule 94 (conjunction -> equality .)
    MODIGUAL        reduce using rule 94 (conjunction -> equality .)
    MULT            reduce using rule 94 (conjunction -> equality .)
    DIVIDE          reduce using rule 94 (conjunction -> equality .)
    MOD             reduce using rule 94 (conjunction -> equality .)
    PLUS            reduce using rule 94 (conjunction -> equality .)
    MINUS           reduce using rule 94 (conjunction -> equality .)
    PONTOPONTO      reduce using rule 94 (conjunction -> equality .)
    ID              reduce using rule 94 (conjunction -> equality .)
    CROSSINLINE     reduce using rule 94 (conjunction -> equality .)
    IMPORT          reduce using rule 94 (conjunction -> equality .)
    INIT            reduce using rule 94 (conjunction -> equality .)
    NOINLINE        reduce using rule 94 (conjunction -> equality .)
    OUT             reduce using rule 94 (conjunction -> equality .)
    VARARG          reduce using rule 94 (conjunction -> equality .)
    WHERE           reduce using rule 94 (conjunction -> equality .)
    OBJECT          reduce using rule 94 (conjunction -> equality .)
    CONST           reduce using rule 94 (conjunction -> equality .)
    CONSTRUCTOR     reduce using rule 94 (conjunction -> equality .)
    EOF             reduce using rule 94 (conjunction -> equality .)
    FALSE           reduce using rule 94 (conjunction -> equality .)
    FUNCTION        reduce using rule 94 (conjunction -> equality .)
    NULL            reduce using rule 94 (conjunction -> equality .)
    NULLABLE        reduce using rule 94 (conjunction -> equality .)
    NUMBER          reduce using rule 94 (conjunction -> equality .)
    OPERATOR        reduce using rule 94 (conjunction -> equality .)
    SMARTCAST       reduce using rule 94 (conjunction -> equality .)
    THIS            reduce using rule 94 (conjunction -> equality .)
    TRUE            reduce using rule 94 (conjunction -> equality .)
    VAL             reduce using rule 94 (conjunction -> equality .)
    VAR             reduce using rule 94 (conjunction -> equality .)
    WHEN            reduce using rule 94 (conjunction -> equality .)
    LONG            reduce using rule 94 (conjunction -> equality .)
    ARRAY           reduce using rule 94 (conjunction -> equality .)
    ELVIS           reduce using rule 94 (conjunction -> equality .)
    IN              reduce using rule 94 (conjunction -> equality .)
    NOT_IN          reduce using rule 94 (conjunction -> equality .)
    IS              reduce using rule 94 (conjunction -> equality .)
    NOT_IS          reduce using rule 94 (conjunction -> equality .)
    MAIOR           reduce using rule 94 (conjunction -> equality .)
    MENORIGUAL      reduce using rule 94 (conjunction -> equality .)
    MAIORIGUAL      reduce using rule 94 (conjunction -> equality .)
    DIFERENTE       reduce using rule 94 (conjunction -> equality .)
    IDENTIDADE      reduce using rule 94 (conjunction -> equality .)
    IGUALDADE       reduce using rule 94 (conjunction -> equality .)
    SEMIDENTIDADE   reduce using rule 94 (conjunction -> equality .)
    OR              reduce using rule 94 (conjunction -> equality .)
    FUN             reduce using rule 94 (conjunction -> equality .)
    FOR             reduce using rule 94 (conjunction -> equality .)
    WHILE           reduce using rule 94 (conjunction -> equality .)
    DO              reduce using rule 94 (conjunction -> equality .)
    LITERAL_STRING  reduce using rule 94 (conjunction -> equality .)
    IF              reduce using rule 94 (conjunction -> equality .)
    RETURN          reduce using rule 94 (conjunction -> equality .)
    RETURN_AT       reduce using rule 94 (conjunction -> equality .)
    CONTINUE        reduce using rule 94 (conjunction -> equality .)
    CONTINUE_AT     reduce using rule 94 (conjunction -> equality .)
    BREAK           reduce using rule 94 (conjunction -> equality .)
    BREAK_AT        reduce using rule 94 (conjunction -> equality .)
    NOT             reduce using rule 94 (conjunction -> equality .)
    SUSPEND         reduce using rule 94 (conjunction -> equality .)
    COMMA           reduce using rule 94 (conjunction -> equality .)
    RPAREN          reduce using rule 94 (conjunction -> equality .)
    LCHAVE          reduce using rule 94 (conjunction -> equality .)
    RCCT            reduce using rule 94 (conjunction -> equality .)
    PV              reduce using rule 94 (conjunction -> equality .)
    ELSE            reduce using rule 94 (conjunction -> equality .)
    AND             shift and go to state 196

  ! AND             [ reduce using rule 94 (conjunction -> equality .) ]


state 85

    (170) primaryExpression -> parenthesizedExpression .

    INCREMENTO      reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    DECREMENTO      reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    MENOR           reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    LCCT            reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    COLONCOLON      reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    PONTO           reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    LPAREN          reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    RCHAVE          reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    AS              reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    MAISIGUAL       reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    MENOSIGUAL      reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    MULTIGUAL       reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    DIVIGUAL        reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    MODIGUAL        reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    MULT            reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    DIVIDE          reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    MOD             reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    PLUS            reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    MINUS           reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    PONTOPONTO      reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    ID              reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    CROSSINLINE     reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    IMPORT          reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    INIT            reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    NOINLINE        reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    OUT             reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    VARARG          reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    WHERE           reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    OBJECT          reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    CONST           reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    CONSTRUCTOR     reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    EOF             reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    FALSE           reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    FUNCTION        reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    NULL            reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    NULLABLE        reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    NUMBER          reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    OPERATOR        reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    SMARTCAST       reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    THIS            reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    TRUE            reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    VAL             reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    VAR             reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    WHEN            reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    LONG            reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    ARRAY           reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    ELVIS           reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    IN              reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    NOT_IN          reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    IS              reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    NOT_IS          reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    MAIOR           reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    MENORIGUAL      reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    MAIORIGUAL      reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    DIFERENTE       reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    IDENTIDADE      reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    IGUALDADE       reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    SEMIDENTIDADE   reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    AND             reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    OR              reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    FUN             reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    FOR             reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    WHILE           reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    DO              reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    LITERAL_STRING  reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    IF              reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    RETURN          reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    RETURN_AT       reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    CONTINUE        reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    CONTINUE_AT     reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    BREAK           reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    BREAK_AT        reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    NOT             reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    SUSPEND         reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    COMMA           reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    RPAREN          reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    LCHAVE          reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    RCCT            reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    PV              reduce using rule 170 (primaryExpression -> parenthesizedExpression .)
    ELSE            reduce using rule 170 (primaryExpression -> parenthesizedExpression .)


state 86

    (172) primaryExpression -> LITERAL_STRING .

    INCREMENTO      reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    DECREMENTO      reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    MENOR           reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    LCCT            reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    COLONCOLON      reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    PONTO           reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    LPAREN          reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    RCHAVE          reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    AS              reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    MAISIGUAL       reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    MENOSIGUAL      reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    MULTIGUAL       reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    DIVIGUAL        reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    MODIGUAL        reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    MULT            reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    DIVIDE          reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    MOD             reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    PLUS            reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    MINUS           reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    PONTOPONTO      reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    ID              reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    CROSSINLINE     reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    IMPORT          reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    INIT            reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    NOINLINE        reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    OUT             reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    VARARG          reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    WHERE           reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    OBJECT          reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    CONST           reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    CONSTRUCTOR     reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    EOF             reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    FALSE           reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    FUNCTION        reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    NULL            reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    NULLABLE        reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    NUMBER          reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    OPERATOR        reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    SMARTCAST       reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    THIS            reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    TRUE            reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    VAL             reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    VAR             reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    WHEN            reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    LONG            reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    ARRAY           reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    ELVIS           reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    IN              reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    NOT_IN          reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    IS              reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    NOT_IS          reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    MAIOR           reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    MENORIGUAL      reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    MAIORIGUAL      reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    DIFERENTE       reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    IDENTIDADE      reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    IGUALDADE       reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    SEMIDENTIDADE   reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    AND             reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    OR              reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    FUN             reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    FOR             reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    WHILE           reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    DO              reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    LITERAL_STRING  reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    IF              reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    RETURN          reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    RETURN_AT       reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    CONTINUE        reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    CONTINUE_AT     reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    BREAK           reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    BREAK_AT        reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    NOT             reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    SUSPEND         reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    COMMA           reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    RPAREN          reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    LCHAVE          reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    RCCT            reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    PV              reduce using rule 172 (primaryExpression -> LITERAL_STRING .)
    ELSE            reduce using rule 172 (primaryExpression -> LITERAL_STRING .)


state 87

    (173) primaryExpression -> callableReference .

    INCREMENTO      reduce using rule 173 (primaryExpression -> callableReference .)
    DECREMENTO      reduce using rule 173 (primaryExpression -> callableReference .)
    MENOR           reduce using rule 173 (primaryExpression -> callableReference .)
    LCCT            reduce using rule 173 (primaryExpression -> callableReference .)
    COLONCOLON      reduce using rule 173 (primaryExpression -> callableReference .)
    PONTO           reduce using rule 173 (primaryExpression -> callableReference .)
    LPAREN          reduce using rule 173 (primaryExpression -> callableReference .)
    RCHAVE          reduce using rule 173 (primaryExpression -> callableReference .)
    AS              reduce using rule 173 (primaryExpression -> callableReference .)
    MAISIGUAL       reduce using rule 173 (primaryExpression -> callableReference .)
    MENOSIGUAL      reduce using rule 173 (primaryExpression -> callableReference .)
    MULTIGUAL       reduce using rule 173 (primaryExpression -> callableReference .)
    DIVIGUAL        reduce using rule 173 (primaryExpression -> callableReference .)
    MODIGUAL        reduce using rule 173 (primaryExpression -> callableReference .)
    MULT            reduce using rule 173 (primaryExpression -> callableReference .)
    DIVIDE          reduce using rule 173 (primaryExpression -> callableReference .)
    MOD             reduce using rule 173 (primaryExpression -> callableReference .)
    PLUS            reduce using rule 173 (primaryExpression -> callableReference .)
    MINUS           reduce using rule 173 (primaryExpression -> callableReference .)
    PONTOPONTO      reduce using rule 173 (primaryExpression -> callableReference .)
    ID              reduce using rule 173 (primaryExpression -> callableReference .)
    CROSSINLINE     reduce using rule 173 (primaryExpression -> callableReference .)
    IMPORT          reduce using rule 173 (primaryExpression -> callableReference .)
    INIT            reduce using rule 173 (primaryExpression -> callableReference .)
    NOINLINE        reduce using rule 173 (primaryExpression -> callableReference .)
    OUT             reduce using rule 173 (primaryExpression -> callableReference .)
    VARARG          reduce using rule 173 (primaryExpression -> callableReference .)
    WHERE           reduce using rule 173 (primaryExpression -> callableReference .)
    OBJECT          reduce using rule 173 (primaryExpression -> callableReference .)
    CONST           reduce using rule 173 (primaryExpression -> callableReference .)
    CONSTRUCTOR     reduce using rule 173 (primaryExpression -> callableReference .)
    EOF             reduce using rule 173 (primaryExpression -> callableReference .)
    FALSE           reduce using rule 173 (primaryExpression -> callableReference .)
    FUNCTION        reduce using rule 173 (primaryExpression -> callableReference .)
    NULL            reduce using rule 173 (primaryExpression -> callableReference .)
    NULLABLE        reduce using rule 173 (primaryExpression -> callableReference .)
    NUMBER          reduce using rule 173 (primaryExpression -> callableReference .)
    OPERATOR        reduce using rule 173 (primaryExpression -> callableReference .)
    SMARTCAST       reduce using rule 173 (primaryExpression -> callableReference .)
    THIS            reduce using rule 173 (primaryExpression -> callableReference .)
    TRUE            reduce using rule 173 (primaryExpression -> callableReference .)
    VAL             reduce using rule 173 (primaryExpression -> callableReference .)
    VAR             reduce using rule 173 (primaryExpression -> callableReference .)
    WHEN            reduce using rule 173 (primaryExpression -> callableReference .)
    LONG            reduce using rule 173 (primaryExpression -> callableReference .)
    ARRAY           reduce using rule 173 (primaryExpression -> callableReference .)
    ELVIS           reduce using rule 173 (primaryExpression -> callableReference .)
    IN              reduce using rule 173 (primaryExpression -> callableReference .)
    NOT_IN          reduce using rule 173 (primaryExpression -> callableReference .)
    IS              reduce using rule 173 (primaryExpression -> callableReference .)
    NOT_IS          reduce using rule 173 (primaryExpression -> callableReference .)
    MAIOR           reduce using rule 173 (primaryExpression -> callableReference .)
    MENORIGUAL      reduce using rule 173 (primaryExpression -> callableReference .)
    MAIORIGUAL      reduce using rule 173 (primaryExpression -> callableReference .)
    DIFERENTE       reduce using rule 173 (primaryExpression -> callableReference .)
    IDENTIDADE      reduce using rule 173 (primaryExpression -> callableReference .)
    IGUALDADE       reduce using rule 173 (primaryExpression -> callableReference .)
    SEMIDENTIDADE   reduce using rule 173 (primaryExpression -> callableReference .)
    AND             reduce using rule 173 (primaryExpression -> callableReference .)
    OR              reduce using rule 173 (primaryExpression -> callableReference .)
    FUN             reduce using rule 173 (primaryExpression -> callableReference .)
    FOR             reduce using rule 173 (primaryExpression -> callableReference .)
    WHILE           reduce using rule 173 (primaryExpression -> callableReference .)
    DO              reduce using rule 173 (primaryExpression -> callableReference .)
    LITERAL_STRING  reduce using rule 173 (primaryExpression -> callableReference .)
    IF              reduce using rule 173 (primaryExpression -> callableReference .)
    RETURN          reduce using rule 173 (primaryExpression -> callableReference .)
    RETURN_AT       reduce using rule 173 (primaryExpression -> callableReference .)
    CONTINUE        reduce using rule 173 (primaryExpression -> callableReference .)
    CONTINUE_AT     reduce using rule 173 (primaryExpression -> callableReference .)
    BREAK           reduce using rule 173 (primaryExpression -> callableReference .)
    BREAK_AT        reduce using rule 173 (primaryExpression -> callableReference .)
    NOT             reduce using rule 173 (primaryExpression -> callableReference .)
    SUSPEND         reduce using rule 173 (primaryExpression -> callableReference .)
    COMMA           reduce using rule 173 (primaryExpression -> callableReference .)
    RPAREN          reduce using rule 173 (primaryExpression -> callableReference .)
    LCHAVE          reduce using rule 173 (primaryExpression -> callableReference .)
    RCCT            reduce using rule 173 (primaryExpression -> callableReference .)
    PV              reduce using rule 173 (primaryExpression -> callableReference .)
    ELSE            reduce using rule 173 (primaryExpression -> callableReference .)


state 88

    (174) primaryExpression -> functionLiteral .

    INCREMENTO      reduce using rule 174 (primaryExpression -> functionLiteral .)
    DECREMENTO      reduce using rule 174 (primaryExpression -> functionLiteral .)
    MENOR           reduce using rule 174 (primaryExpression -> functionLiteral .)
    LCCT            reduce using rule 174 (primaryExpression -> functionLiteral .)
    COLONCOLON      reduce using rule 174 (primaryExpression -> functionLiteral .)
    PONTO           reduce using rule 174 (primaryExpression -> functionLiteral .)
    LPAREN          reduce using rule 174 (primaryExpression -> functionLiteral .)
    RCHAVE          reduce using rule 174 (primaryExpression -> functionLiteral .)
    AS              reduce using rule 174 (primaryExpression -> functionLiteral .)
    MAISIGUAL       reduce using rule 174 (primaryExpression -> functionLiteral .)
    MENOSIGUAL      reduce using rule 174 (primaryExpression -> functionLiteral .)
    MULTIGUAL       reduce using rule 174 (primaryExpression -> functionLiteral .)
    DIVIGUAL        reduce using rule 174 (primaryExpression -> functionLiteral .)
    MODIGUAL        reduce using rule 174 (primaryExpression -> functionLiteral .)
    MULT            reduce using rule 174 (primaryExpression -> functionLiteral .)
    DIVIDE          reduce using rule 174 (primaryExpression -> functionLiteral .)
    MOD             reduce using rule 174 (primaryExpression -> functionLiteral .)
    PLUS            reduce using rule 174 (primaryExpression -> functionLiteral .)
    MINUS           reduce using rule 174 (primaryExpression -> functionLiteral .)
    PONTOPONTO      reduce using rule 174 (primaryExpression -> functionLiteral .)
    ID              reduce using rule 174 (primaryExpression -> functionLiteral .)
    CROSSINLINE     reduce using rule 174 (primaryExpression -> functionLiteral .)
    IMPORT          reduce using rule 174 (primaryExpression -> functionLiteral .)
    INIT            reduce using rule 174 (primaryExpression -> functionLiteral .)
    NOINLINE        reduce using rule 174 (primaryExpression -> functionLiteral .)
    OUT             reduce using rule 174 (primaryExpression -> functionLiteral .)
    VARARG          reduce using rule 174 (primaryExpression -> functionLiteral .)
    WHERE           reduce using rule 174 (primaryExpression -> functionLiteral .)
    OBJECT          reduce using rule 174 (primaryExpression -> functionLiteral .)
    CONST           reduce using rule 174 (primaryExpression -> functionLiteral .)
    CONSTRUCTOR     reduce using rule 174 (primaryExpression -> functionLiteral .)
    EOF             reduce using rule 174 (primaryExpression -> functionLiteral .)
    FALSE           reduce using rule 174 (primaryExpression -> functionLiteral .)
    FUNCTION        reduce using rule 174 (primaryExpression -> functionLiteral .)
    NULL            reduce using rule 174 (primaryExpression -> functionLiteral .)
    NULLABLE        reduce using rule 174 (primaryExpression -> functionLiteral .)
    NUMBER          reduce using rule 174 (primaryExpression -> functionLiteral .)
    OPERATOR        reduce using rule 174 (primaryExpression -> functionLiteral .)
    SMARTCAST       reduce using rule 174 (primaryExpression -> functionLiteral .)
    THIS            reduce using rule 174 (primaryExpression -> functionLiteral .)
    TRUE            reduce using rule 174 (primaryExpression -> functionLiteral .)
    VAL             reduce using rule 174 (primaryExpression -> functionLiteral .)
    VAR             reduce using rule 174 (primaryExpression -> functionLiteral .)
    WHEN            reduce using rule 174 (primaryExpression -> functionLiteral .)
    LONG            reduce using rule 174 (primaryExpression -> functionLiteral .)
    ARRAY           reduce using rule 174 (primaryExpression -> functionLiteral .)
    ELVIS           reduce using rule 174 (primaryExpression -> functionLiteral .)
    IN              reduce using rule 174 (primaryExpression -> functionLiteral .)
    NOT_IN          reduce using rule 174 (primaryExpression -> functionLiteral .)
    IS              reduce using rule 174 (primaryExpression -> functionLiteral .)
    NOT_IS          reduce using rule 174 (primaryExpression -> functionLiteral .)
    MAIOR           reduce using rule 174 (primaryExpression -> functionLiteral .)
    MENORIGUAL      reduce using rule 174 (primaryExpression -> functionLiteral .)
    MAIORIGUAL      reduce using rule 174 (primaryExpression -> functionLiteral .)
    DIFERENTE       reduce using rule 174 (primaryExpression -> functionLiteral .)
    IDENTIDADE      reduce using rule 174 (primaryExpression -> functionLiteral .)
    IGUALDADE       reduce using rule 174 (primaryExpression -> functionLiteral .)
    SEMIDENTIDADE   reduce using rule 174 (primaryExpression -> functionLiteral .)
    AND             reduce using rule 174 (primaryExpression -> functionLiteral .)
    OR              reduce using rule 174 (primaryExpression -> functionLiteral .)
    FUN             reduce using rule 174 (primaryExpression -> functionLiteral .)
    FOR             reduce using rule 174 (primaryExpression -> functionLiteral .)
    WHILE           reduce using rule 174 (primaryExpression -> functionLiteral .)
    DO              reduce using rule 174 (primaryExpression -> functionLiteral .)
    LITERAL_STRING  reduce using rule 174 (primaryExpression -> functionLiteral .)
    IF              reduce using rule 174 (primaryExpression -> functionLiteral .)
    RETURN          reduce using rule 174 (primaryExpression -> functionLiteral .)
    RETURN_AT       reduce using rule 174 (primaryExpression -> functionLiteral .)
    CONTINUE        reduce using rule 174 (primaryExpression -> functionLiteral .)
    CONTINUE_AT     reduce using rule 174 (primaryExpression -> functionLiteral .)
    BREAK           reduce using rule 174 (primaryExpression -> functionLiteral .)
    BREAK_AT        reduce using rule 174 (primaryExpression -> functionLiteral .)
    NOT             reduce using rule 174 (primaryExpression -> functionLiteral .)
    SUSPEND         reduce using rule 174 (primaryExpression -> functionLiteral .)
    COMMA           reduce using rule 174 (primaryExpression -> functionLiteral .)
    RPAREN          reduce using rule 174 (primaryExpression -> functionLiteral .)
    LCHAVE          reduce using rule 174 (primaryExpression -> functionLiteral .)
    RCCT            reduce using rule 174 (primaryExpression -> functionLiteral .)
    PV              reduce using rule 174 (primaryExpression -> functionLiteral .)
    ELSE            reduce using rule 174 (primaryExpression -> functionLiteral .)


state 89

    (175) primaryExpression -> collectionLiteral .

    INCREMENTO      reduce using rule 175 (primaryExpression -> collectionLiteral .)
    DECREMENTO      reduce using rule 175 (primaryExpression -> collectionLiteral .)
    MENOR           reduce using rule 175 (primaryExpression -> collectionLiteral .)
    LCCT            reduce using rule 175 (primaryExpression -> collectionLiteral .)
    COLONCOLON      reduce using rule 175 (primaryExpression -> collectionLiteral .)
    PONTO           reduce using rule 175 (primaryExpression -> collectionLiteral .)
    LPAREN          reduce using rule 175 (primaryExpression -> collectionLiteral .)
    RCHAVE          reduce using rule 175 (primaryExpression -> collectionLiteral .)
    AS              reduce using rule 175 (primaryExpression -> collectionLiteral .)
    MAISIGUAL       reduce using rule 175 (primaryExpression -> collectionLiteral .)
    MENOSIGUAL      reduce using rule 175 (primaryExpression -> collectionLiteral .)
    MULTIGUAL       reduce using rule 175 (primaryExpression -> collectionLiteral .)
    DIVIGUAL        reduce using rule 175 (primaryExpression -> collectionLiteral .)
    MODIGUAL        reduce using rule 175 (primaryExpression -> collectionLiteral .)
    MULT            reduce using rule 175 (primaryExpression -> collectionLiteral .)
    DIVIDE          reduce using rule 175 (primaryExpression -> collectionLiteral .)
    MOD             reduce using rule 175 (primaryExpression -> collectionLiteral .)
    PLUS            reduce using rule 175 (primaryExpression -> collectionLiteral .)
    MINUS           reduce using rule 175 (primaryExpression -> collectionLiteral .)
    PONTOPONTO      reduce using rule 175 (primaryExpression -> collectionLiteral .)
    ID              reduce using rule 175 (primaryExpression -> collectionLiteral .)
    CROSSINLINE     reduce using rule 175 (primaryExpression -> collectionLiteral .)
    IMPORT          reduce using rule 175 (primaryExpression -> collectionLiteral .)
    INIT            reduce using rule 175 (primaryExpression -> collectionLiteral .)
    NOINLINE        reduce using rule 175 (primaryExpression -> collectionLiteral .)
    OUT             reduce using rule 175 (primaryExpression -> collectionLiteral .)
    VARARG          reduce using rule 175 (primaryExpression -> collectionLiteral .)
    WHERE           reduce using rule 175 (primaryExpression -> collectionLiteral .)
    OBJECT          reduce using rule 175 (primaryExpression -> collectionLiteral .)
    CONST           reduce using rule 175 (primaryExpression -> collectionLiteral .)
    CONSTRUCTOR     reduce using rule 175 (primaryExpression -> collectionLiteral .)
    EOF             reduce using rule 175 (primaryExpression -> collectionLiteral .)
    FALSE           reduce using rule 175 (primaryExpression -> collectionLiteral .)
    FUNCTION        reduce using rule 175 (primaryExpression -> collectionLiteral .)
    NULL            reduce using rule 175 (primaryExpression -> collectionLiteral .)
    NULLABLE        reduce using rule 175 (primaryExpression -> collectionLiteral .)
    NUMBER          reduce using rule 175 (primaryExpression -> collectionLiteral .)
    OPERATOR        reduce using rule 175 (primaryExpression -> collectionLiteral .)
    SMARTCAST       reduce using rule 175 (primaryExpression -> collectionLiteral .)
    THIS            reduce using rule 175 (primaryExpression -> collectionLiteral .)
    TRUE            reduce using rule 175 (primaryExpression -> collectionLiteral .)
    VAL             reduce using rule 175 (primaryExpression -> collectionLiteral .)
    VAR             reduce using rule 175 (primaryExpression -> collectionLiteral .)
    WHEN            reduce using rule 175 (primaryExpression -> collectionLiteral .)
    LONG            reduce using rule 175 (primaryExpression -> collectionLiteral .)
    ARRAY           reduce using rule 175 (primaryExpression -> collectionLiteral .)
    ELVIS           reduce using rule 175 (primaryExpression -> collectionLiteral .)
    IN              reduce using rule 175 (primaryExpression -> collectionLiteral .)
    NOT_IN          reduce using rule 175 (primaryExpression -> collectionLiteral .)
    IS              reduce using rule 175 (primaryExpression -> collectionLiteral .)
    NOT_IS          reduce using rule 175 (primaryExpression -> collectionLiteral .)
    MAIOR           reduce using rule 175 (primaryExpression -> collectionLiteral .)
    MENORIGUAL      reduce using rule 175 (primaryExpression -> collectionLiteral .)
    MAIORIGUAL      reduce using rule 175 (primaryExpression -> collectionLiteral .)
    DIFERENTE       reduce using rule 175 (primaryExpression -> collectionLiteral .)
    IDENTIDADE      reduce using rule 175 (primaryExpression -> collectionLiteral .)
    IGUALDADE       reduce using rule 175 (primaryExpression -> collectionLiteral .)
    SEMIDENTIDADE   reduce using rule 175 (primaryExpression -> collectionLiteral .)
    AND             reduce using rule 175 (primaryExpression -> collectionLiteral .)
    OR              reduce using rule 175 (primaryExpression -> collectionLiteral .)
    FUN             reduce using rule 175 (primaryExpression -> collectionLiteral .)
    FOR             reduce using rule 175 (primaryExpression -> collectionLiteral .)
    WHILE           reduce using rule 175 (primaryExpression -> collectionLiteral .)
    DO              reduce using rule 175 (primaryExpression -> collectionLiteral .)
    LITERAL_STRING  reduce using rule 175 (primaryExpression -> collectionLiteral .)
    IF              reduce using rule 175 (primaryExpression -> collectionLiteral .)
    RETURN          reduce using rule 175 (primaryExpression -> collectionLiteral .)
    RETURN_AT       reduce using rule 175 (primaryExpression -> collectionLiteral .)
    CONTINUE        reduce using rule 175 (primaryExpression -> collectionLiteral .)
    CONTINUE_AT     reduce using rule 175 (primaryExpression -> collectionLiteral .)
    BREAK           reduce using rule 175 (primaryExpression -> collectionLiteral .)
    BREAK_AT        reduce using rule 175 (primaryExpression -> collectionLiteral .)
    NOT             reduce using rule 175 (primaryExpression -> collectionLiteral .)
    SUSPEND         reduce using rule 175 (primaryExpression -> collectionLiteral .)
    COMMA           reduce using rule 175 (primaryExpression -> collectionLiteral .)
    RPAREN          reduce using rule 175 (primaryExpression -> collectionLiteral .)
    LCHAVE          reduce using rule 175 (primaryExpression -> collectionLiteral .)
    RCCT            reduce using rule 175 (primaryExpression -> collectionLiteral .)
    PV              reduce using rule 175 (primaryExpression -> collectionLiteral .)
    ELSE            reduce using rule 175 (primaryExpression -> collectionLiteral .)


state 90

    (176) primaryExpression -> ifExpression .

    INCREMENTO      reduce using rule 176 (primaryExpression -> ifExpression .)
    DECREMENTO      reduce using rule 176 (primaryExpression -> ifExpression .)
    MENOR           reduce using rule 176 (primaryExpression -> ifExpression .)
    LCCT            reduce using rule 176 (primaryExpression -> ifExpression .)
    COLONCOLON      reduce using rule 176 (primaryExpression -> ifExpression .)
    PONTO           reduce using rule 176 (primaryExpression -> ifExpression .)
    LPAREN          reduce using rule 176 (primaryExpression -> ifExpression .)
    RCHAVE          reduce using rule 176 (primaryExpression -> ifExpression .)
    AS              reduce using rule 176 (primaryExpression -> ifExpression .)
    MAISIGUAL       reduce using rule 176 (primaryExpression -> ifExpression .)
    MENOSIGUAL      reduce using rule 176 (primaryExpression -> ifExpression .)
    MULTIGUAL       reduce using rule 176 (primaryExpression -> ifExpression .)
    DIVIGUAL        reduce using rule 176 (primaryExpression -> ifExpression .)
    MODIGUAL        reduce using rule 176 (primaryExpression -> ifExpression .)
    MULT            reduce using rule 176 (primaryExpression -> ifExpression .)
    DIVIDE          reduce using rule 176 (primaryExpression -> ifExpression .)
    MOD             reduce using rule 176 (primaryExpression -> ifExpression .)
    PLUS            reduce using rule 176 (primaryExpression -> ifExpression .)
    MINUS           reduce using rule 176 (primaryExpression -> ifExpression .)
    PONTOPONTO      reduce using rule 176 (primaryExpression -> ifExpression .)
    ID              reduce using rule 176 (primaryExpression -> ifExpression .)
    CROSSINLINE     reduce using rule 176 (primaryExpression -> ifExpression .)
    IMPORT          reduce using rule 176 (primaryExpression -> ifExpression .)
    INIT            reduce using rule 176 (primaryExpression -> ifExpression .)
    NOINLINE        reduce using rule 176 (primaryExpression -> ifExpression .)
    OUT             reduce using rule 176 (primaryExpression -> ifExpression .)
    VARARG          reduce using rule 176 (primaryExpression -> ifExpression .)
    WHERE           reduce using rule 176 (primaryExpression -> ifExpression .)
    OBJECT          reduce using rule 176 (primaryExpression -> ifExpression .)
    CONST           reduce using rule 176 (primaryExpression -> ifExpression .)
    CONSTRUCTOR     reduce using rule 176 (primaryExpression -> ifExpression .)
    EOF             reduce using rule 176 (primaryExpression -> ifExpression .)
    FALSE           reduce using rule 176 (primaryExpression -> ifExpression .)
    FUNCTION        reduce using rule 176 (primaryExpression -> ifExpression .)
    NULL            reduce using rule 176 (primaryExpression -> ifExpression .)
    NULLABLE        reduce using rule 176 (primaryExpression -> ifExpression .)
    NUMBER          reduce using rule 176 (primaryExpression -> ifExpression .)
    OPERATOR        reduce using rule 176 (primaryExpression -> ifExpression .)
    SMARTCAST       reduce using rule 176 (primaryExpression -> ifExpression .)
    THIS            reduce using rule 176 (primaryExpression -> ifExpression .)
    TRUE            reduce using rule 176 (primaryExpression -> ifExpression .)
    VAL             reduce using rule 176 (primaryExpression -> ifExpression .)
    VAR             reduce using rule 176 (primaryExpression -> ifExpression .)
    WHEN            reduce using rule 176 (primaryExpression -> ifExpression .)
    LONG            reduce using rule 176 (primaryExpression -> ifExpression .)
    ARRAY           reduce using rule 176 (primaryExpression -> ifExpression .)
    ELVIS           reduce using rule 176 (primaryExpression -> ifExpression .)
    IN              reduce using rule 176 (primaryExpression -> ifExpression .)
    NOT_IN          reduce using rule 176 (primaryExpression -> ifExpression .)
    IS              reduce using rule 176 (primaryExpression -> ifExpression .)
    NOT_IS          reduce using rule 176 (primaryExpression -> ifExpression .)
    MAIOR           reduce using rule 176 (primaryExpression -> ifExpression .)
    MENORIGUAL      reduce using rule 176 (primaryExpression -> ifExpression .)
    MAIORIGUAL      reduce using rule 176 (primaryExpression -> ifExpression .)
    DIFERENTE       reduce using rule 176 (primaryExpression -> ifExpression .)
    IDENTIDADE      reduce using rule 176 (primaryExpression -> ifExpression .)
    IGUALDADE       reduce using rule 176 (primaryExpression -> ifExpression .)
    SEMIDENTIDADE   reduce using rule 176 (primaryExpression -> ifExpression .)
    AND             reduce using rule 176 (primaryExpression -> ifExpression .)
    OR              reduce using rule 176 (primaryExpression -> ifExpression .)
    FUN             reduce using rule 176 (primaryExpression -> ifExpression .)
    FOR             reduce using rule 176 (primaryExpression -> ifExpression .)
    WHILE           reduce using rule 176 (primaryExpression -> ifExpression .)
    DO              reduce using rule 176 (primaryExpression -> ifExpression .)
    LITERAL_STRING  reduce using rule 176 (primaryExpression -> ifExpression .)
    IF              reduce using rule 176 (primaryExpression -> ifExpression .)
    RETURN          reduce using rule 176 (primaryExpression -> ifExpression .)
    RETURN_AT       reduce using rule 176 (primaryExpression -> ifExpression .)
    CONTINUE        reduce using rule 176 (primaryExpression -> ifExpression .)
    CONTINUE_AT     reduce using rule 176 (primaryExpression -> ifExpression .)
    BREAK           reduce using rule 176 (primaryExpression -> ifExpression .)
    BREAK_AT        reduce using rule 176 (primaryExpression -> ifExpression .)
    NOT             reduce using rule 176 (primaryExpression -> ifExpression .)
    SUSPEND         reduce using rule 176 (primaryExpression -> ifExpression .)
    COMMA           reduce using rule 176 (primaryExpression -> ifExpression .)
    RPAREN          reduce using rule 176 (primaryExpression -> ifExpression .)
    LCHAVE          reduce using rule 176 (primaryExpression -> ifExpression .)
    RCCT            reduce using rule 176 (primaryExpression -> ifExpression .)
    PV              reduce using rule 176 (primaryExpression -> ifExpression .)
    ELSE            reduce using rule 176 (primaryExpression -> ifExpression .)


state 91

    (177) primaryExpression -> jumpExpression .

    INCREMENTO      reduce using rule 177 (primaryExpression -> jumpExpression .)
    DECREMENTO      reduce using rule 177 (primaryExpression -> jumpExpression .)
    MENOR           reduce using rule 177 (primaryExpression -> jumpExpression .)
    LCCT            reduce using rule 177 (primaryExpression -> jumpExpression .)
    COLONCOLON      reduce using rule 177 (primaryExpression -> jumpExpression .)
    PONTO           reduce using rule 177 (primaryExpression -> jumpExpression .)
    LPAREN          reduce using rule 177 (primaryExpression -> jumpExpression .)
    RCHAVE          reduce using rule 177 (primaryExpression -> jumpExpression .)
    AS              reduce using rule 177 (primaryExpression -> jumpExpression .)
    MAISIGUAL       reduce using rule 177 (primaryExpression -> jumpExpression .)
    MENOSIGUAL      reduce using rule 177 (primaryExpression -> jumpExpression .)
    MULTIGUAL       reduce using rule 177 (primaryExpression -> jumpExpression .)
    DIVIGUAL        reduce using rule 177 (primaryExpression -> jumpExpression .)
    MODIGUAL        reduce using rule 177 (primaryExpression -> jumpExpression .)
    MULT            reduce using rule 177 (primaryExpression -> jumpExpression .)
    DIVIDE          reduce using rule 177 (primaryExpression -> jumpExpression .)
    MOD             reduce using rule 177 (primaryExpression -> jumpExpression .)
    PLUS            reduce using rule 177 (primaryExpression -> jumpExpression .)
    MINUS           reduce using rule 177 (primaryExpression -> jumpExpression .)
    PONTOPONTO      reduce using rule 177 (primaryExpression -> jumpExpression .)
    ID              reduce using rule 177 (primaryExpression -> jumpExpression .)
    CROSSINLINE     reduce using rule 177 (primaryExpression -> jumpExpression .)
    IMPORT          reduce using rule 177 (primaryExpression -> jumpExpression .)
    INIT            reduce using rule 177 (primaryExpression -> jumpExpression .)
    NOINLINE        reduce using rule 177 (primaryExpression -> jumpExpression .)
    OUT             reduce using rule 177 (primaryExpression -> jumpExpression .)
    VARARG          reduce using rule 177 (primaryExpression -> jumpExpression .)
    WHERE           reduce using rule 177 (primaryExpression -> jumpExpression .)
    OBJECT          reduce using rule 177 (primaryExpression -> jumpExpression .)
    CONST           reduce using rule 177 (primaryExpression -> jumpExpression .)
    CONSTRUCTOR     reduce using rule 177 (primaryExpression -> jumpExpression .)
    EOF             reduce using rule 177 (primaryExpression -> jumpExpression .)
    FALSE           reduce using rule 177 (primaryExpression -> jumpExpression .)
    FUNCTION        reduce using rule 177 (primaryExpression -> jumpExpression .)
    NULL            reduce using rule 177 (primaryExpression -> jumpExpression .)
    NULLABLE        reduce using rule 177 (primaryExpression -> jumpExpression .)
    NUMBER          reduce using rule 177 (primaryExpression -> jumpExpression .)
    OPERATOR        reduce using rule 177 (primaryExpression -> jumpExpression .)
    SMARTCAST       reduce using rule 177 (primaryExpression -> jumpExpression .)
    THIS            reduce using rule 177 (primaryExpression -> jumpExpression .)
    TRUE            reduce using rule 177 (primaryExpression -> jumpExpression .)
    VAL             reduce using rule 177 (primaryExpression -> jumpExpression .)
    VAR             reduce using rule 177 (primaryExpression -> jumpExpression .)
    WHEN            reduce using rule 177 (primaryExpression -> jumpExpression .)
    LONG            reduce using rule 177 (primaryExpression -> jumpExpression .)
    ARRAY           reduce using rule 177 (primaryExpression -> jumpExpression .)
    ELVIS           reduce using rule 177 (primaryExpression -> jumpExpression .)
    IN              reduce using rule 177 (primaryExpression -> jumpExpression .)
    NOT_IN          reduce using rule 177 (primaryExpression -> jumpExpression .)
    IS              reduce using rule 177 (primaryExpression -> jumpExpression .)
    NOT_IS          reduce using rule 177 (primaryExpression -> jumpExpression .)
    MAIOR           reduce using rule 177 (primaryExpression -> jumpExpression .)
    MENORIGUAL      reduce using rule 177 (primaryExpression -> jumpExpression .)
    MAIORIGUAL      reduce using rule 177 (primaryExpression -> jumpExpression .)
    DIFERENTE       reduce using rule 177 (primaryExpression -> jumpExpression .)
    IDENTIDADE      reduce using rule 177 (primaryExpression -> jumpExpression .)
    IGUALDADE       reduce using rule 177 (primaryExpression -> jumpExpression .)
    SEMIDENTIDADE   reduce using rule 177 (primaryExpression -> jumpExpression .)
    AND             reduce using rule 177 (primaryExpression -> jumpExpression .)
    OR              reduce using rule 177 (primaryExpression -> jumpExpression .)
    FUN             reduce using rule 177 (primaryExpression -> jumpExpression .)
    FOR             reduce using rule 177 (primaryExpression -> jumpExpression .)
    WHILE           reduce using rule 177 (primaryExpression -> jumpExpression .)
    DO              reduce using rule 177 (primaryExpression -> jumpExpression .)
    LITERAL_STRING  reduce using rule 177 (primaryExpression -> jumpExpression .)
    IF              reduce using rule 177 (primaryExpression -> jumpExpression .)
    RETURN          reduce using rule 177 (primaryExpression -> jumpExpression .)
    RETURN_AT       reduce using rule 177 (primaryExpression -> jumpExpression .)
    CONTINUE        reduce using rule 177 (primaryExpression -> jumpExpression .)
    CONTINUE_AT     reduce using rule 177 (primaryExpression -> jumpExpression .)
    BREAK           reduce using rule 177 (primaryExpression -> jumpExpression .)
    BREAK_AT        reduce using rule 177 (primaryExpression -> jumpExpression .)
    NOT             reduce using rule 177 (primaryExpression -> jumpExpression .)
    SUSPEND         reduce using rule 177 (primaryExpression -> jumpExpression .)
    COMMA           reduce using rule 177 (primaryExpression -> jumpExpression .)
    RPAREN          reduce using rule 177 (primaryExpression -> jumpExpression .)
    LCHAVE          reduce using rule 177 (primaryExpression -> jumpExpression .)
    RCCT            reduce using rule 177 (primaryExpression -> jumpExpression .)
    PV              reduce using rule 177 (primaryExpression -> jumpExpression .)
    ELSE            reduce using rule 177 (primaryExpression -> jumpExpression .)


state 92

    (124) prefixUnaryExpressionRecursive -> unaryPrefix .
    (125) prefixUnaryExpressionRecursive -> unaryPrefix . prefixUnaryExpressionRecursive
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY

  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
    LITERAL_STRING  reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    LPAREN          reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    LCCT            reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    IF              reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    RETURN          reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    RETURN_AT       reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    CONTINUE        reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    CONTINUE_AT     reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    BREAK           reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    BREAK_AT        reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    RCHAVE          reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    FUN             reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    SUSPEND         reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    COLONCOLON      reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

  ! ID              [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! CROSSINLINE     [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! IMPORT          [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! INIT            [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! NOINLINE        [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! OUT             [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! VARARG          [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! WHERE           [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! OBJECT          [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! CONST           [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! CONSTRUCTOR     [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! EOF             [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! FALSE           [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! FUNCTION        [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! NULL            [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! NULLABLE        [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! NUMBER          [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! OPERATOR        [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! SMARTCAST       [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! THIS            [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! TRUE            [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! VAL             [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! VAR             [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! WHEN            [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! LONG            [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! ARRAY           [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! INCREMENTO      [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! DECREMENTO      [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! MINUS           [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! PLUS            [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! NOT             [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]

    unaryPrefix                    shift and go to state 92
    prefixUnaryExpressionRecursive shift and go to state 197
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    simpleIdentifier               shift and go to state 198

state 93

    (96) equality -> comparison .
    (97) equality -> comparison . equalityOperator equality
    (234) equalityOperator -> . DIFERENTE
    (235) equalityOperator -> . IDENTIDADE
    (236) equalityOperator -> . IGUALDADE
    (237) equalityOperator -> . SEMIDENTIDADE

  ! shift/reduce conflict for DIFERENTE resolved as shift
  ! shift/reduce conflict for IDENTIDADE resolved as shift
  ! shift/reduce conflict for IGUALDADE resolved as shift
  ! shift/reduce conflict for SEMIDENTIDADE resolved as shift
    INCREMENTO      reduce using rule 96 (equality -> comparison .)
    DECREMENTO      reduce using rule 96 (equality -> comparison .)
    MENOR           reduce using rule 96 (equality -> comparison .)
    LCCT            reduce using rule 96 (equality -> comparison .)
    COLONCOLON      reduce using rule 96 (equality -> comparison .)
    PONTO           reduce using rule 96 (equality -> comparison .)
    LPAREN          reduce using rule 96 (equality -> comparison .)
    RCHAVE          reduce using rule 96 (equality -> comparison .)
    AS              reduce using rule 96 (equality -> comparison .)
    MAISIGUAL       reduce using rule 96 (equality -> comparison .)
    MENOSIGUAL      reduce using rule 96 (equality -> comparison .)
    MULTIGUAL       reduce using rule 96 (equality -> comparison .)
    DIVIGUAL        reduce using rule 96 (equality -> comparison .)
    MODIGUAL        reduce using rule 96 (equality -> comparison .)
    MULT            reduce using rule 96 (equality -> comparison .)
    DIVIDE          reduce using rule 96 (equality -> comparison .)
    MOD             reduce using rule 96 (equality -> comparison .)
    PLUS            reduce using rule 96 (equality -> comparison .)
    MINUS           reduce using rule 96 (equality -> comparison .)
    PONTOPONTO      reduce using rule 96 (equality -> comparison .)
    ID              reduce using rule 96 (equality -> comparison .)
    CROSSINLINE     reduce using rule 96 (equality -> comparison .)
    IMPORT          reduce using rule 96 (equality -> comparison .)
    INIT            reduce using rule 96 (equality -> comparison .)
    NOINLINE        reduce using rule 96 (equality -> comparison .)
    OUT             reduce using rule 96 (equality -> comparison .)
    VARARG          reduce using rule 96 (equality -> comparison .)
    WHERE           reduce using rule 96 (equality -> comparison .)
    OBJECT          reduce using rule 96 (equality -> comparison .)
    CONST           reduce using rule 96 (equality -> comparison .)
    CONSTRUCTOR     reduce using rule 96 (equality -> comparison .)
    EOF             reduce using rule 96 (equality -> comparison .)
    FALSE           reduce using rule 96 (equality -> comparison .)
    FUNCTION        reduce using rule 96 (equality -> comparison .)
    NULL            reduce using rule 96 (equality -> comparison .)
    NULLABLE        reduce using rule 96 (equality -> comparison .)
    NUMBER          reduce using rule 96 (equality -> comparison .)
    OPERATOR        reduce using rule 96 (equality -> comparison .)
    SMARTCAST       reduce using rule 96 (equality -> comparison .)
    THIS            reduce using rule 96 (equality -> comparison .)
    TRUE            reduce using rule 96 (equality -> comparison .)
    VAL             reduce using rule 96 (equality -> comparison .)
    VAR             reduce using rule 96 (equality -> comparison .)
    WHEN            reduce using rule 96 (equality -> comparison .)
    LONG            reduce using rule 96 (equality -> comparison .)
    ARRAY           reduce using rule 96 (equality -> comparison .)
    ELVIS           reduce using rule 96 (equality -> comparison .)
    IN              reduce using rule 96 (equality -> comparison .)
    NOT_IN          reduce using rule 96 (equality -> comparison .)
    IS              reduce using rule 96 (equality -> comparison .)
    NOT_IS          reduce using rule 96 (equality -> comparison .)
    MAIOR           reduce using rule 96 (equality -> comparison .)
    MENORIGUAL      reduce using rule 96 (equality -> comparison .)
    MAIORIGUAL      reduce using rule 96 (equality -> comparison .)
    AND             reduce using rule 96 (equality -> comparison .)
    OR              reduce using rule 96 (equality -> comparison .)
    FUN             reduce using rule 96 (equality -> comparison .)
    FOR             reduce using rule 96 (equality -> comparison .)
    WHILE           reduce using rule 96 (equality -> comparison .)
    DO              reduce using rule 96 (equality -> comparison .)
    LITERAL_STRING  reduce using rule 96 (equality -> comparison .)
    IF              reduce using rule 96 (equality -> comparison .)
    RETURN          reduce using rule 96 (equality -> comparison .)
    RETURN_AT       reduce using rule 96 (equality -> comparison .)
    CONTINUE        reduce using rule 96 (equality -> comparison .)
    CONTINUE_AT     reduce using rule 96 (equality -> comparison .)
    BREAK           reduce using rule 96 (equality -> comparison .)
    BREAK_AT        reduce using rule 96 (equality -> comparison .)
    NOT             reduce using rule 96 (equality -> comparison .)
    SUSPEND         reduce using rule 96 (equality -> comparison .)
    COMMA           reduce using rule 96 (equality -> comparison .)
    RPAREN          reduce using rule 96 (equality -> comparison .)
    LCHAVE          reduce using rule 96 (equality -> comparison .)
    RCCT            reduce using rule 96 (equality -> comparison .)
    PV              reduce using rule 96 (equality -> comparison .)
    ELSE            reduce using rule 96 (equality -> comparison .)
    DIFERENTE       shift and go to state 200
    IDENTIDADE      shift and go to state 201
    IGUALDADE       shift and go to state 202
    SEMIDENTIDADE   shift and go to state 203

  ! DIFERENTE       [ reduce using rule 96 (equality -> comparison .) ]
  ! IDENTIDADE      [ reduce using rule 96 (equality -> comparison .) ]
  ! IGUALDADE       [ reduce using rule 96 (equality -> comparison .) ]
  ! SEMIDENTIDADE   [ reduce using rule 96 (equality -> comparison .) ]

    equalityOperator               shift and go to state 199

state 94

    (224) callableReference -> optionalReceiverType . COLONCOLON simpleIdentifierOrClass

    COLONCOLON      shift and go to state 204


state 95

    (208) functionLiteral -> lambdaLiteral .

    INCREMENTO      reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    DECREMENTO      reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    MENOR           reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    LCCT            reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    COLONCOLON      reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    PONTO           reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    LPAREN          reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    RCHAVE          reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    AS              reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    MAISIGUAL       reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    MENOSIGUAL      reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    MULTIGUAL       reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    DIVIGUAL        reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    MODIGUAL        reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    MULT            reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    DIVIDE          reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    MOD             reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    PLUS            reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    MINUS           reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    PONTOPONTO      reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    ID              reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    CROSSINLINE     reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    IMPORT          reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    INIT            reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    NOINLINE        reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    OUT             reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    VARARG          reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    WHERE           reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    OBJECT          reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    CONST           reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    CONSTRUCTOR     reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    EOF             reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    FALSE           reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    FUNCTION        reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    NULL            reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    NULLABLE        reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    NUMBER          reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    OPERATOR        reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    SMARTCAST       reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    THIS            reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    TRUE            reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    VAL             reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    VAR             reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    WHEN            reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    LONG            reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    ARRAY           reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    ELVIS           reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    IN              reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    NOT_IN          reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    IS              reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    NOT_IS          reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    MAIOR           reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    MENORIGUAL      reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    MAIORIGUAL      reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    DIFERENTE       reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    IDENTIDADE      reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    IGUALDADE       reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    SEMIDENTIDADE   reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    AND             reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    OR              reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    FUN             reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    FOR             reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    WHILE           reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    DO              reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    LITERAL_STRING  reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    IF              reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    RETURN          reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    RETURN_AT       reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    CONTINUE        reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    CONTINUE_AT     reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    BREAK           reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    BREAK_AT        reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    NOT             reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    SUSPEND         reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    COMMA           reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    RPAREN          reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    LCHAVE          reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    RCCT            reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    PV              reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    ELSE            reduce using rule 208 (functionLiteral -> lambdaLiteral .)


state 96

    (209) functionLiteral -> anonymousFunction .

    INCREMENTO      reduce using rule 209 (functionLiteral -> anonymousFunction .)
    DECREMENTO      reduce using rule 209 (functionLiteral -> anonymousFunction .)
    MENOR           reduce using rule 209 (functionLiteral -> anonymousFunction .)
    LCCT            reduce using rule 209 (functionLiteral -> anonymousFunction .)
    COLONCOLON      reduce using rule 209 (functionLiteral -> anonymousFunction .)
    PONTO           reduce using rule 209 (functionLiteral -> anonymousFunction .)
    LPAREN          reduce using rule 209 (functionLiteral -> anonymousFunction .)
    RCHAVE          reduce using rule 209 (functionLiteral -> anonymousFunction .)
    AS              reduce using rule 209 (functionLiteral -> anonymousFunction .)
    MAISIGUAL       reduce using rule 209 (functionLiteral -> anonymousFunction .)
    MENOSIGUAL      reduce using rule 209 (functionLiteral -> anonymousFunction .)
    MULTIGUAL       reduce using rule 209 (functionLiteral -> anonymousFunction .)
    DIVIGUAL        reduce using rule 209 (functionLiteral -> anonymousFunction .)
    MODIGUAL        reduce using rule 209 (functionLiteral -> anonymousFunction .)
    MULT            reduce using rule 209 (functionLiteral -> anonymousFunction .)
    DIVIDE          reduce using rule 209 (functionLiteral -> anonymousFunction .)
    MOD             reduce using rule 209 (functionLiteral -> anonymousFunction .)
    PLUS            reduce using rule 209 (functionLiteral -> anonymousFunction .)
    MINUS           reduce using rule 209 (functionLiteral -> anonymousFunction .)
    PONTOPONTO      reduce using rule 209 (functionLiteral -> anonymousFunction .)
    ID              reduce using rule 209 (functionLiteral -> anonymousFunction .)
    CROSSINLINE     reduce using rule 209 (functionLiteral -> anonymousFunction .)
    IMPORT          reduce using rule 209 (functionLiteral -> anonymousFunction .)
    INIT            reduce using rule 209 (functionLiteral -> anonymousFunction .)
    NOINLINE        reduce using rule 209 (functionLiteral -> anonymousFunction .)
    OUT             reduce using rule 209 (functionLiteral -> anonymousFunction .)
    VARARG          reduce using rule 209 (functionLiteral -> anonymousFunction .)
    WHERE           reduce using rule 209 (functionLiteral -> anonymousFunction .)
    OBJECT          reduce using rule 209 (functionLiteral -> anonymousFunction .)
    CONST           reduce using rule 209 (functionLiteral -> anonymousFunction .)
    CONSTRUCTOR     reduce using rule 209 (functionLiteral -> anonymousFunction .)
    EOF             reduce using rule 209 (functionLiteral -> anonymousFunction .)
    FALSE           reduce using rule 209 (functionLiteral -> anonymousFunction .)
    FUNCTION        reduce using rule 209 (functionLiteral -> anonymousFunction .)
    NULL            reduce using rule 209 (functionLiteral -> anonymousFunction .)
    NULLABLE        reduce using rule 209 (functionLiteral -> anonymousFunction .)
    NUMBER          reduce using rule 209 (functionLiteral -> anonymousFunction .)
    OPERATOR        reduce using rule 209 (functionLiteral -> anonymousFunction .)
    SMARTCAST       reduce using rule 209 (functionLiteral -> anonymousFunction .)
    THIS            reduce using rule 209 (functionLiteral -> anonymousFunction .)
    TRUE            reduce using rule 209 (functionLiteral -> anonymousFunction .)
    VAL             reduce using rule 209 (functionLiteral -> anonymousFunction .)
    VAR             reduce using rule 209 (functionLiteral -> anonymousFunction .)
    WHEN            reduce using rule 209 (functionLiteral -> anonymousFunction .)
    LONG            reduce using rule 209 (functionLiteral -> anonymousFunction .)
    ARRAY           reduce using rule 209 (functionLiteral -> anonymousFunction .)
    ELVIS           reduce using rule 209 (functionLiteral -> anonymousFunction .)
    IN              reduce using rule 209 (functionLiteral -> anonymousFunction .)
    NOT_IN          reduce using rule 209 (functionLiteral -> anonymousFunction .)
    IS              reduce using rule 209 (functionLiteral -> anonymousFunction .)
    NOT_IS          reduce using rule 209 (functionLiteral -> anonymousFunction .)
    MAIOR           reduce using rule 209 (functionLiteral -> anonymousFunction .)
    MENORIGUAL      reduce using rule 209 (functionLiteral -> anonymousFunction .)
    MAIORIGUAL      reduce using rule 209 (functionLiteral -> anonymousFunction .)
    DIFERENTE       reduce using rule 209 (functionLiteral -> anonymousFunction .)
    IDENTIDADE      reduce using rule 209 (functionLiteral -> anonymousFunction .)
    IGUALDADE       reduce using rule 209 (functionLiteral -> anonymousFunction .)
    SEMIDENTIDADE   reduce using rule 209 (functionLiteral -> anonymousFunction .)
    AND             reduce using rule 209 (functionLiteral -> anonymousFunction .)
    OR              reduce using rule 209 (functionLiteral -> anonymousFunction .)
    FUN             reduce using rule 209 (functionLiteral -> anonymousFunction .)
    FOR             reduce using rule 209 (functionLiteral -> anonymousFunction .)
    WHILE           reduce using rule 209 (functionLiteral -> anonymousFunction .)
    DO              reduce using rule 209 (functionLiteral -> anonymousFunction .)
    LITERAL_STRING  reduce using rule 209 (functionLiteral -> anonymousFunction .)
    IF              reduce using rule 209 (functionLiteral -> anonymousFunction .)
    RETURN          reduce using rule 209 (functionLiteral -> anonymousFunction .)
    RETURN_AT       reduce using rule 209 (functionLiteral -> anonymousFunction .)
    CONTINUE        reduce using rule 209 (functionLiteral -> anonymousFunction .)
    CONTINUE_AT     reduce using rule 209 (functionLiteral -> anonymousFunction .)
    BREAK           reduce using rule 209 (functionLiteral -> anonymousFunction .)
    BREAK_AT        reduce using rule 209 (functionLiteral -> anonymousFunction .)
    NOT             reduce using rule 209 (functionLiteral -> anonymousFunction .)
    SUSPEND         reduce using rule 209 (functionLiteral -> anonymousFunction .)
    COMMA           reduce using rule 209 (functionLiteral -> anonymousFunction .)
    RPAREN          reduce using rule 209 (functionLiteral -> anonymousFunction .)
    LCHAVE          reduce using rule 209 (functionLiteral -> anonymousFunction .)
    RCCT            reduce using rule 209 (functionLiteral -> anonymousFunction .)
    PV              reduce using rule 209 (functionLiteral -> anonymousFunction .)
    ELSE            reduce using rule 209 (functionLiteral -> anonymousFunction .)


state 97

    (179) collectionLiteral -> LCCT . collectionLiteralRecursive RCCT
    (180) collectionLiteral -> LCCT . RCCT
    (181) collectionLiteralRecursive -> . expression
    (182) collectionLiteralRecursive -> . expression COMMA collectionLiteralRecursive
    (12) expression -> . disjunction
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    RCCT            shift and go to state 206
    LITERAL_STRING  shift and go to state 86
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 136
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    SUSPEND         shift and go to state 48

    collectionLiteralRecursive     shift and go to state 205
    expression                     shift and go to state 207
    disjunction                    shift and go to state 69
    conjunction                    shift and go to state 79
    equality                       shift and go to state 84
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 107
    elvisExpression                shift and go to state 114
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    simpleIdentifier               shift and go to state 133
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120
    prefixUnaryExpression          shift and go to state 134
    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 135
    unaryPrefix                    shift and go to state 92
    primaryExpression              shift and go to state 82
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    typeModifier                   shift and go to state 115

state 98

    (211) ifExpression -> IF . LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> IF . LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV

    LPAREN          shift and go to state 208


state 99

    (217) jumpExpression -> RETURN . expression
    (12) expression -> . disjunction
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 86
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 136
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 209
    disjunction                    shift and go to state 69
    conjunction                    shift and go to state 79
    equality                       shift and go to state 84
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 107
    elvisExpression                shift and go to state 114
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    simpleIdentifier               shift and go to state 133
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120
    prefixUnaryExpression          shift and go to state 134
    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 135
    unaryPrefix                    shift and go to state 92
    primaryExpression              shift and go to state 82
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    typeModifier                   shift and go to state 115

state 100

    (218) jumpExpression -> RETURN_AT . expression
    (12) expression -> . disjunction
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 86
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 136
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 210
    disjunction                    shift and go to state 69
    conjunction                    shift and go to state 79
    equality                       shift and go to state 84
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 107
    elvisExpression                shift and go to state 114
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    simpleIdentifier               shift and go to state 133
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120
    prefixUnaryExpression          shift and go to state 134
    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 135
    unaryPrefix                    shift and go to state 92
    primaryExpression              shift and go to state 82
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    typeModifier                   shift and go to state 115

state 101

    (220) jumpExpression -> CONTINUE .

    INCREMENTO      reduce using rule 220 (jumpExpression -> CONTINUE .)
    DECREMENTO      reduce using rule 220 (jumpExpression -> CONTINUE .)
    MENOR           reduce using rule 220 (jumpExpression -> CONTINUE .)
    LCCT            reduce using rule 220 (jumpExpression -> CONTINUE .)
    COLONCOLON      reduce using rule 220 (jumpExpression -> CONTINUE .)
    PONTO           reduce using rule 220 (jumpExpression -> CONTINUE .)
    LPAREN          reduce using rule 220 (jumpExpression -> CONTINUE .)
    RCHAVE          reduce using rule 220 (jumpExpression -> CONTINUE .)
    AS              reduce using rule 220 (jumpExpression -> CONTINUE .)
    MAISIGUAL       reduce using rule 220 (jumpExpression -> CONTINUE .)
    MENOSIGUAL      reduce using rule 220 (jumpExpression -> CONTINUE .)
    MULTIGUAL       reduce using rule 220 (jumpExpression -> CONTINUE .)
    DIVIGUAL        reduce using rule 220 (jumpExpression -> CONTINUE .)
    MODIGUAL        reduce using rule 220 (jumpExpression -> CONTINUE .)
    MULT            reduce using rule 220 (jumpExpression -> CONTINUE .)
    DIVIDE          reduce using rule 220 (jumpExpression -> CONTINUE .)
    MOD             reduce using rule 220 (jumpExpression -> CONTINUE .)
    PLUS            reduce using rule 220 (jumpExpression -> CONTINUE .)
    MINUS           reduce using rule 220 (jumpExpression -> CONTINUE .)
    PONTOPONTO      reduce using rule 220 (jumpExpression -> CONTINUE .)
    ID              reduce using rule 220 (jumpExpression -> CONTINUE .)
    CROSSINLINE     reduce using rule 220 (jumpExpression -> CONTINUE .)
    IMPORT          reduce using rule 220 (jumpExpression -> CONTINUE .)
    INIT            reduce using rule 220 (jumpExpression -> CONTINUE .)
    NOINLINE        reduce using rule 220 (jumpExpression -> CONTINUE .)
    OUT             reduce using rule 220 (jumpExpression -> CONTINUE .)
    VARARG          reduce using rule 220 (jumpExpression -> CONTINUE .)
    WHERE           reduce using rule 220 (jumpExpression -> CONTINUE .)
    OBJECT          reduce using rule 220 (jumpExpression -> CONTINUE .)
    CONST           reduce using rule 220 (jumpExpression -> CONTINUE .)
    CONSTRUCTOR     reduce using rule 220 (jumpExpression -> CONTINUE .)
    EOF             reduce using rule 220 (jumpExpression -> CONTINUE .)
    FALSE           reduce using rule 220 (jumpExpression -> CONTINUE .)
    FUNCTION        reduce using rule 220 (jumpExpression -> CONTINUE .)
    NULL            reduce using rule 220 (jumpExpression -> CONTINUE .)
    NULLABLE        reduce using rule 220 (jumpExpression -> CONTINUE .)
    NUMBER          reduce using rule 220 (jumpExpression -> CONTINUE .)
    OPERATOR        reduce using rule 220 (jumpExpression -> CONTINUE .)
    SMARTCAST       reduce using rule 220 (jumpExpression -> CONTINUE .)
    THIS            reduce using rule 220 (jumpExpression -> CONTINUE .)
    TRUE            reduce using rule 220 (jumpExpression -> CONTINUE .)
    VAL             reduce using rule 220 (jumpExpression -> CONTINUE .)
    VAR             reduce using rule 220 (jumpExpression -> CONTINUE .)
    WHEN            reduce using rule 220 (jumpExpression -> CONTINUE .)
    LONG            reduce using rule 220 (jumpExpression -> CONTINUE .)
    ARRAY           reduce using rule 220 (jumpExpression -> CONTINUE .)
    ELVIS           reduce using rule 220 (jumpExpression -> CONTINUE .)
    IN              reduce using rule 220 (jumpExpression -> CONTINUE .)
    NOT_IN          reduce using rule 220 (jumpExpression -> CONTINUE .)
    IS              reduce using rule 220 (jumpExpression -> CONTINUE .)
    NOT_IS          reduce using rule 220 (jumpExpression -> CONTINUE .)
    MAIOR           reduce using rule 220 (jumpExpression -> CONTINUE .)
    MENORIGUAL      reduce using rule 220 (jumpExpression -> CONTINUE .)
    MAIORIGUAL      reduce using rule 220 (jumpExpression -> CONTINUE .)
    DIFERENTE       reduce using rule 220 (jumpExpression -> CONTINUE .)
    IDENTIDADE      reduce using rule 220 (jumpExpression -> CONTINUE .)
    IGUALDADE       reduce using rule 220 (jumpExpression -> CONTINUE .)
    SEMIDENTIDADE   reduce using rule 220 (jumpExpression -> CONTINUE .)
    AND             reduce using rule 220 (jumpExpression -> CONTINUE .)
    OR              reduce using rule 220 (jumpExpression -> CONTINUE .)
    FUN             reduce using rule 220 (jumpExpression -> CONTINUE .)
    FOR             reduce using rule 220 (jumpExpression -> CONTINUE .)
    WHILE           reduce using rule 220 (jumpExpression -> CONTINUE .)
    DO              reduce using rule 220 (jumpExpression -> CONTINUE .)
    LITERAL_STRING  reduce using rule 220 (jumpExpression -> CONTINUE .)
    IF              reduce using rule 220 (jumpExpression -> CONTINUE .)
    RETURN          reduce using rule 220 (jumpExpression -> CONTINUE .)
    RETURN_AT       reduce using rule 220 (jumpExpression -> CONTINUE .)
    CONTINUE        reduce using rule 220 (jumpExpression -> CONTINUE .)
    CONTINUE_AT     reduce using rule 220 (jumpExpression -> CONTINUE .)
    BREAK           reduce using rule 220 (jumpExpression -> CONTINUE .)
    BREAK_AT        reduce using rule 220 (jumpExpression -> CONTINUE .)
    NOT             reduce using rule 220 (jumpExpression -> CONTINUE .)
    SUSPEND         reduce using rule 220 (jumpExpression -> CONTINUE .)
    COMMA           reduce using rule 220 (jumpExpression -> CONTINUE .)
    RPAREN          reduce using rule 220 (jumpExpression -> CONTINUE .)
    LCHAVE          reduce using rule 220 (jumpExpression -> CONTINUE .)
    RCCT            reduce using rule 220 (jumpExpression -> CONTINUE .)
    PV              reduce using rule 220 (jumpExpression -> CONTINUE .)
    ELSE            reduce using rule 220 (jumpExpression -> CONTINUE .)


state 102

    (221) jumpExpression -> CONTINUE_AT .

    INCREMENTO      reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    DECREMENTO      reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    MENOR           reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    LCCT            reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    COLONCOLON      reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    PONTO           reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    LPAREN          reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    RCHAVE          reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    AS              reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    MAISIGUAL       reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    MENOSIGUAL      reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    MULTIGUAL       reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    DIVIGUAL        reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    MODIGUAL        reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    MULT            reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    DIVIDE          reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    MOD             reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    PLUS            reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    MINUS           reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    PONTOPONTO      reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    ID              reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    CROSSINLINE     reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    IMPORT          reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    INIT            reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    NOINLINE        reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    OUT             reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    VARARG          reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    WHERE           reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    OBJECT          reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    CONST           reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    CONSTRUCTOR     reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    EOF             reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    FALSE           reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    FUNCTION        reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    NULL            reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    NULLABLE        reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    NUMBER          reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    OPERATOR        reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    SMARTCAST       reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    THIS            reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    TRUE            reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    VAL             reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    VAR             reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    WHEN            reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    LONG            reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    ARRAY           reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    ELVIS           reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    IN              reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    NOT_IN          reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    IS              reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    NOT_IS          reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    MAIOR           reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    MENORIGUAL      reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    MAIORIGUAL      reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    DIFERENTE       reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    IDENTIDADE      reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    IGUALDADE       reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    SEMIDENTIDADE   reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    AND             reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    OR              reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    FUN             reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    FOR             reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    WHILE           reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    DO              reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    LITERAL_STRING  reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    IF              reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    RETURN          reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    RETURN_AT       reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    CONTINUE        reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    CONTINUE_AT     reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    BREAK           reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    BREAK_AT        reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    NOT             reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    SUSPEND         reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    COMMA           reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    RPAREN          reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    LCHAVE          reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    RCCT            reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    PV              reduce using rule 221 (jumpExpression -> CONTINUE_AT .)
    ELSE            reduce using rule 221 (jumpExpression -> CONTINUE_AT .)


state 103

    (222) jumpExpression -> BREAK .

    INCREMENTO      reduce using rule 222 (jumpExpression -> BREAK .)
    DECREMENTO      reduce using rule 222 (jumpExpression -> BREAK .)
    MENOR           reduce using rule 222 (jumpExpression -> BREAK .)
    LCCT            reduce using rule 222 (jumpExpression -> BREAK .)
    COLONCOLON      reduce using rule 222 (jumpExpression -> BREAK .)
    PONTO           reduce using rule 222 (jumpExpression -> BREAK .)
    LPAREN          reduce using rule 222 (jumpExpression -> BREAK .)
    RCHAVE          reduce using rule 222 (jumpExpression -> BREAK .)
    AS              reduce using rule 222 (jumpExpression -> BREAK .)
    MAISIGUAL       reduce using rule 222 (jumpExpression -> BREAK .)
    MENOSIGUAL      reduce using rule 222 (jumpExpression -> BREAK .)
    MULTIGUAL       reduce using rule 222 (jumpExpression -> BREAK .)
    DIVIGUAL        reduce using rule 222 (jumpExpression -> BREAK .)
    MODIGUAL        reduce using rule 222 (jumpExpression -> BREAK .)
    MULT            reduce using rule 222 (jumpExpression -> BREAK .)
    DIVIDE          reduce using rule 222 (jumpExpression -> BREAK .)
    MOD             reduce using rule 222 (jumpExpression -> BREAK .)
    PLUS            reduce using rule 222 (jumpExpression -> BREAK .)
    MINUS           reduce using rule 222 (jumpExpression -> BREAK .)
    PONTOPONTO      reduce using rule 222 (jumpExpression -> BREAK .)
    ID              reduce using rule 222 (jumpExpression -> BREAK .)
    CROSSINLINE     reduce using rule 222 (jumpExpression -> BREAK .)
    IMPORT          reduce using rule 222 (jumpExpression -> BREAK .)
    INIT            reduce using rule 222 (jumpExpression -> BREAK .)
    NOINLINE        reduce using rule 222 (jumpExpression -> BREAK .)
    OUT             reduce using rule 222 (jumpExpression -> BREAK .)
    VARARG          reduce using rule 222 (jumpExpression -> BREAK .)
    WHERE           reduce using rule 222 (jumpExpression -> BREAK .)
    OBJECT          reduce using rule 222 (jumpExpression -> BREAK .)
    CONST           reduce using rule 222 (jumpExpression -> BREAK .)
    CONSTRUCTOR     reduce using rule 222 (jumpExpression -> BREAK .)
    EOF             reduce using rule 222 (jumpExpression -> BREAK .)
    FALSE           reduce using rule 222 (jumpExpression -> BREAK .)
    FUNCTION        reduce using rule 222 (jumpExpression -> BREAK .)
    NULL            reduce using rule 222 (jumpExpression -> BREAK .)
    NULLABLE        reduce using rule 222 (jumpExpression -> BREAK .)
    NUMBER          reduce using rule 222 (jumpExpression -> BREAK .)
    OPERATOR        reduce using rule 222 (jumpExpression -> BREAK .)
    SMARTCAST       reduce using rule 222 (jumpExpression -> BREAK .)
    THIS            reduce using rule 222 (jumpExpression -> BREAK .)
    TRUE            reduce using rule 222 (jumpExpression -> BREAK .)
    VAL             reduce using rule 222 (jumpExpression -> BREAK .)
    VAR             reduce using rule 222 (jumpExpression -> BREAK .)
    WHEN            reduce using rule 222 (jumpExpression -> BREAK .)
    LONG            reduce using rule 222 (jumpExpression -> BREAK .)
    ARRAY           reduce using rule 222 (jumpExpression -> BREAK .)
    ELVIS           reduce using rule 222 (jumpExpression -> BREAK .)
    IN              reduce using rule 222 (jumpExpression -> BREAK .)
    NOT_IN          reduce using rule 222 (jumpExpression -> BREAK .)
    IS              reduce using rule 222 (jumpExpression -> BREAK .)
    NOT_IS          reduce using rule 222 (jumpExpression -> BREAK .)
    MAIOR           reduce using rule 222 (jumpExpression -> BREAK .)
    MENORIGUAL      reduce using rule 222 (jumpExpression -> BREAK .)
    MAIORIGUAL      reduce using rule 222 (jumpExpression -> BREAK .)
    DIFERENTE       reduce using rule 222 (jumpExpression -> BREAK .)
    IDENTIDADE      reduce using rule 222 (jumpExpression -> BREAK .)
    IGUALDADE       reduce using rule 222 (jumpExpression -> BREAK .)
    SEMIDENTIDADE   reduce using rule 222 (jumpExpression -> BREAK .)
    AND             reduce using rule 222 (jumpExpression -> BREAK .)
    OR              reduce using rule 222 (jumpExpression -> BREAK .)
    FUN             reduce using rule 222 (jumpExpression -> BREAK .)
    FOR             reduce using rule 222 (jumpExpression -> BREAK .)
    WHILE           reduce using rule 222 (jumpExpression -> BREAK .)
    DO              reduce using rule 222 (jumpExpression -> BREAK .)
    LITERAL_STRING  reduce using rule 222 (jumpExpression -> BREAK .)
    IF              reduce using rule 222 (jumpExpression -> BREAK .)
    RETURN          reduce using rule 222 (jumpExpression -> BREAK .)
    RETURN_AT       reduce using rule 222 (jumpExpression -> BREAK .)
    CONTINUE        reduce using rule 222 (jumpExpression -> BREAK .)
    CONTINUE_AT     reduce using rule 222 (jumpExpression -> BREAK .)
    BREAK           reduce using rule 222 (jumpExpression -> BREAK .)
    BREAK_AT        reduce using rule 222 (jumpExpression -> BREAK .)
    NOT             reduce using rule 222 (jumpExpression -> BREAK .)
    SUSPEND         reduce using rule 222 (jumpExpression -> BREAK .)
    COMMA           reduce using rule 222 (jumpExpression -> BREAK .)
    RPAREN          reduce using rule 222 (jumpExpression -> BREAK .)
    LCHAVE          reduce using rule 222 (jumpExpression -> BREAK .)
    RCCT            reduce using rule 222 (jumpExpression -> BREAK .)
    PV              reduce using rule 222 (jumpExpression -> BREAK .)
    ELSE            reduce using rule 222 (jumpExpression -> BREAK .)


state 104

    (223) jumpExpression -> BREAK_AT .

    INCREMENTO      reduce using rule 223 (jumpExpression -> BREAK_AT .)
    DECREMENTO      reduce using rule 223 (jumpExpression -> BREAK_AT .)
    MENOR           reduce using rule 223 (jumpExpression -> BREAK_AT .)
    LCCT            reduce using rule 223 (jumpExpression -> BREAK_AT .)
    COLONCOLON      reduce using rule 223 (jumpExpression -> BREAK_AT .)
    PONTO           reduce using rule 223 (jumpExpression -> BREAK_AT .)
    LPAREN          reduce using rule 223 (jumpExpression -> BREAK_AT .)
    RCHAVE          reduce using rule 223 (jumpExpression -> BREAK_AT .)
    AS              reduce using rule 223 (jumpExpression -> BREAK_AT .)
    MAISIGUAL       reduce using rule 223 (jumpExpression -> BREAK_AT .)
    MENOSIGUAL      reduce using rule 223 (jumpExpression -> BREAK_AT .)
    MULTIGUAL       reduce using rule 223 (jumpExpression -> BREAK_AT .)
    DIVIGUAL        reduce using rule 223 (jumpExpression -> BREAK_AT .)
    MODIGUAL        reduce using rule 223 (jumpExpression -> BREAK_AT .)
    MULT            reduce using rule 223 (jumpExpression -> BREAK_AT .)
    DIVIDE          reduce using rule 223 (jumpExpression -> BREAK_AT .)
    MOD             reduce using rule 223 (jumpExpression -> BREAK_AT .)
    PLUS            reduce using rule 223 (jumpExpression -> BREAK_AT .)
    MINUS           reduce using rule 223 (jumpExpression -> BREAK_AT .)
    PONTOPONTO      reduce using rule 223 (jumpExpression -> BREAK_AT .)
    ID              reduce using rule 223 (jumpExpression -> BREAK_AT .)
    CROSSINLINE     reduce using rule 223 (jumpExpression -> BREAK_AT .)
    IMPORT          reduce using rule 223 (jumpExpression -> BREAK_AT .)
    INIT            reduce using rule 223 (jumpExpression -> BREAK_AT .)
    NOINLINE        reduce using rule 223 (jumpExpression -> BREAK_AT .)
    OUT             reduce using rule 223 (jumpExpression -> BREAK_AT .)
    VARARG          reduce using rule 223 (jumpExpression -> BREAK_AT .)
    WHERE           reduce using rule 223 (jumpExpression -> BREAK_AT .)
    OBJECT          reduce using rule 223 (jumpExpression -> BREAK_AT .)
    CONST           reduce using rule 223 (jumpExpression -> BREAK_AT .)
    CONSTRUCTOR     reduce using rule 223 (jumpExpression -> BREAK_AT .)
    EOF             reduce using rule 223 (jumpExpression -> BREAK_AT .)
    FALSE           reduce using rule 223 (jumpExpression -> BREAK_AT .)
    FUNCTION        reduce using rule 223 (jumpExpression -> BREAK_AT .)
    NULL            reduce using rule 223 (jumpExpression -> BREAK_AT .)
    NULLABLE        reduce using rule 223 (jumpExpression -> BREAK_AT .)
    NUMBER          reduce using rule 223 (jumpExpression -> BREAK_AT .)
    OPERATOR        reduce using rule 223 (jumpExpression -> BREAK_AT .)
    SMARTCAST       reduce using rule 223 (jumpExpression -> BREAK_AT .)
    THIS            reduce using rule 223 (jumpExpression -> BREAK_AT .)
    TRUE            reduce using rule 223 (jumpExpression -> BREAK_AT .)
    VAL             reduce using rule 223 (jumpExpression -> BREAK_AT .)
    VAR             reduce using rule 223 (jumpExpression -> BREAK_AT .)
    WHEN            reduce using rule 223 (jumpExpression -> BREAK_AT .)
    LONG            reduce using rule 223 (jumpExpression -> BREAK_AT .)
    ARRAY           reduce using rule 223 (jumpExpression -> BREAK_AT .)
    ELVIS           reduce using rule 223 (jumpExpression -> BREAK_AT .)
    IN              reduce using rule 223 (jumpExpression -> BREAK_AT .)
    NOT_IN          reduce using rule 223 (jumpExpression -> BREAK_AT .)
    IS              reduce using rule 223 (jumpExpression -> BREAK_AT .)
    NOT_IS          reduce using rule 223 (jumpExpression -> BREAK_AT .)
    MAIOR           reduce using rule 223 (jumpExpression -> BREAK_AT .)
    MENORIGUAL      reduce using rule 223 (jumpExpression -> BREAK_AT .)
    MAIORIGUAL      reduce using rule 223 (jumpExpression -> BREAK_AT .)
    DIFERENTE       reduce using rule 223 (jumpExpression -> BREAK_AT .)
    IDENTIDADE      reduce using rule 223 (jumpExpression -> BREAK_AT .)
    IGUALDADE       reduce using rule 223 (jumpExpression -> BREAK_AT .)
    SEMIDENTIDADE   reduce using rule 223 (jumpExpression -> BREAK_AT .)
    AND             reduce using rule 223 (jumpExpression -> BREAK_AT .)
    OR              reduce using rule 223 (jumpExpression -> BREAK_AT .)
    FUN             reduce using rule 223 (jumpExpression -> BREAK_AT .)
    FOR             reduce using rule 223 (jumpExpression -> BREAK_AT .)
    WHILE           reduce using rule 223 (jumpExpression -> BREAK_AT .)
    DO              reduce using rule 223 (jumpExpression -> BREAK_AT .)
    LITERAL_STRING  reduce using rule 223 (jumpExpression -> BREAK_AT .)
    IF              reduce using rule 223 (jumpExpression -> BREAK_AT .)
    RETURN          reduce using rule 223 (jumpExpression -> BREAK_AT .)
    RETURN_AT       reduce using rule 223 (jumpExpression -> BREAK_AT .)
    CONTINUE        reduce using rule 223 (jumpExpression -> BREAK_AT .)
    CONTINUE_AT     reduce using rule 223 (jumpExpression -> BREAK_AT .)
    BREAK           reduce using rule 223 (jumpExpression -> BREAK_AT .)
    BREAK_AT        reduce using rule 223 (jumpExpression -> BREAK_AT .)
    NOT             reduce using rule 223 (jumpExpression -> BREAK_AT .)
    SUSPEND         reduce using rule 223 (jumpExpression -> BREAK_AT .)
    COMMA           reduce using rule 223 (jumpExpression -> BREAK_AT .)
    RPAREN          reduce using rule 223 (jumpExpression -> BREAK_AT .)
    LCHAVE          reduce using rule 223 (jumpExpression -> BREAK_AT .)
    RCCT            reduce using rule 223 (jumpExpression -> BREAK_AT .)
    PV              reduce using rule 223 (jumpExpression -> BREAK_AT .)
    ELSE            reduce using rule 223 (jumpExpression -> BREAK_AT .)


state 105

    (122) unaryPrefix -> label .

    INCREMENTO      reduce using rule 122 (unaryPrefix -> label .)
    DECREMENTO      reduce using rule 122 (unaryPrefix -> label .)
    MINUS           reduce using rule 122 (unaryPrefix -> label .)
    PLUS            reduce using rule 122 (unaryPrefix -> label .)
    NOT             reduce using rule 122 (unaryPrefix -> label .)
    ID              reduce using rule 122 (unaryPrefix -> label .)
    CROSSINLINE     reduce using rule 122 (unaryPrefix -> label .)
    IMPORT          reduce using rule 122 (unaryPrefix -> label .)
    INIT            reduce using rule 122 (unaryPrefix -> label .)
    NOINLINE        reduce using rule 122 (unaryPrefix -> label .)
    OUT             reduce using rule 122 (unaryPrefix -> label .)
    VARARG          reduce using rule 122 (unaryPrefix -> label .)
    WHERE           reduce using rule 122 (unaryPrefix -> label .)
    OBJECT          reduce using rule 122 (unaryPrefix -> label .)
    CONST           reduce using rule 122 (unaryPrefix -> label .)
    CONSTRUCTOR     reduce using rule 122 (unaryPrefix -> label .)
    EOF             reduce using rule 122 (unaryPrefix -> label .)
    FALSE           reduce using rule 122 (unaryPrefix -> label .)
    FUNCTION        reduce using rule 122 (unaryPrefix -> label .)
    NULL            reduce using rule 122 (unaryPrefix -> label .)
    NULLABLE        reduce using rule 122 (unaryPrefix -> label .)
    NUMBER          reduce using rule 122 (unaryPrefix -> label .)
    OPERATOR        reduce using rule 122 (unaryPrefix -> label .)
    SMARTCAST       reduce using rule 122 (unaryPrefix -> label .)
    THIS            reduce using rule 122 (unaryPrefix -> label .)
    TRUE            reduce using rule 122 (unaryPrefix -> label .)
    VAL             reduce using rule 122 (unaryPrefix -> label .)
    VAR             reduce using rule 122 (unaryPrefix -> label .)
    WHEN            reduce using rule 122 (unaryPrefix -> label .)
    LONG            reduce using rule 122 (unaryPrefix -> label .)
    ARRAY           reduce using rule 122 (unaryPrefix -> label .)
    LITERAL_STRING  reduce using rule 122 (unaryPrefix -> label .)
    LPAREN          reduce using rule 122 (unaryPrefix -> label .)
    LCCT            reduce using rule 122 (unaryPrefix -> label .)
    IF              reduce using rule 122 (unaryPrefix -> label .)
    RETURN          reduce using rule 122 (unaryPrefix -> label .)
    RETURN_AT       reduce using rule 122 (unaryPrefix -> label .)
    CONTINUE        reduce using rule 122 (unaryPrefix -> label .)
    CONTINUE_AT     reduce using rule 122 (unaryPrefix -> label .)
    BREAK           reduce using rule 122 (unaryPrefix -> label .)
    BREAK_AT        reduce using rule 122 (unaryPrefix -> label .)
    RCHAVE          reduce using rule 122 (unaryPrefix -> label .)
    FUN             reduce using rule 122 (unaryPrefix -> label .)
    SUSPEND         reduce using rule 122 (unaryPrefix -> label .)
    COLONCOLON      reduce using rule 122 (unaryPrefix -> label .)


state 106

    (123) unaryPrefix -> prefixUnaryOperator .

    INCREMENTO      reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    DECREMENTO      reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    MINUS           reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    PLUS            reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    NOT             reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    ID              reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    CROSSINLINE     reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    IMPORT          reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    INIT            reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    NOINLINE        reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    OUT             reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    VARARG          reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    WHERE           reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    OBJECT          reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    CONST           reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    CONSTRUCTOR     reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    EOF             reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    FALSE           reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    FUNCTION        reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    NULL            reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    NULLABLE        reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    NUMBER          reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    OPERATOR        reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    SMARTCAST       reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    THIS            reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    TRUE            reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    VAL             reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    VAR             reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    WHEN            reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    LONG            reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    ARRAY           reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    LITERAL_STRING  reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    LPAREN          reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    LCCT            reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    IF              reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    RETURN          reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    RETURN_AT       reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    CONTINUE        reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    CONTINUE_AT     reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    BREAK           reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    BREAK_AT        reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    RCHAVE          reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    FUN             reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    SUSPEND         reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)
    COLONCOLON      reduce using rule 123 (unaryPrefix -> prefixUnaryOperator .)


state 107

    (98) comparison -> infixOperation .
    (99) comparison -> infixOperation . comparisonOperator infixOperation
    (238) comparisonOperator -> . MENOR
    (239) comparisonOperator -> . MAIOR
    (240) comparisonOperator -> . MENORIGUAL
    (241) comparisonOperator -> . MAIORIGUAL

  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAIOR resolved as shift
  ! shift/reduce conflict for MENORIGUAL resolved as shift
  ! shift/reduce conflict for MAIORIGUAL resolved as shift
    INCREMENTO      reduce using rule 98 (comparison -> infixOperation .)
    DECREMENTO      reduce using rule 98 (comparison -> infixOperation .)
    LCCT            reduce using rule 98 (comparison -> infixOperation .)
    COLONCOLON      reduce using rule 98 (comparison -> infixOperation .)
    PONTO           reduce using rule 98 (comparison -> infixOperation .)
    LPAREN          reduce using rule 98 (comparison -> infixOperation .)
    RCHAVE          reduce using rule 98 (comparison -> infixOperation .)
    AS              reduce using rule 98 (comparison -> infixOperation .)
    MAISIGUAL       reduce using rule 98 (comparison -> infixOperation .)
    MENOSIGUAL      reduce using rule 98 (comparison -> infixOperation .)
    MULTIGUAL       reduce using rule 98 (comparison -> infixOperation .)
    DIVIGUAL        reduce using rule 98 (comparison -> infixOperation .)
    MODIGUAL        reduce using rule 98 (comparison -> infixOperation .)
    MULT            reduce using rule 98 (comparison -> infixOperation .)
    DIVIDE          reduce using rule 98 (comparison -> infixOperation .)
    MOD             reduce using rule 98 (comparison -> infixOperation .)
    PLUS            reduce using rule 98 (comparison -> infixOperation .)
    MINUS           reduce using rule 98 (comparison -> infixOperation .)
    PONTOPONTO      reduce using rule 98 (comparison -> infixOperation .)
    ID              reduce using rule 98 (comparison -> infixOperation .)
    CROSSINLINE     reduce using rule 98 (comparison -> infixOperation .)
    IMPORT          reduce using rule 98 (comparison -> infixOperation .)
    INIT            reduce using rule 98 (comparison -> infixOperation .)
    NOINLINE        reduce using rule 98 (comparison -> infixOperation .)
    OUT             reduce using rule 98 (comparison -> infixOperation .)
    VARARG          reduce using rule 98 (comparison -> infixOperation .)
    WHERE           reduce using rule 98 (comparison -> infixOperation .)
    OBJECT          reduce using rule 98 (comparison -> infixOperation .)
    CONST           reduce using rule 98 (comparison -> infixOperation .)
    CONSTRUCTOR     reduce using rule 98 (comparison -> infixOperation .)
    EOF             reduce using rule 98 (comparison -> infixOperation .)
    FALSE           reduce using rule 98 (comparison -> infixOperation .)
    FUNCTION        reduce using rule 98 (comparison -> infixOperation .)
    NULL            reduce using rule 98 (comparison -> infixOperation .)
    NULLABLE        reduce using rule 98 (comparison -> infixOperation .)
    NUMBER          reduce using rule 98 (comparison -> infixOperation .)
    OPERATOR        reduce using rule 98 (comparison -> infixOperation .)
    SMARTCAST       reduce using rule 98 (comparison -> infixOperation .)
    THIS            reduce using rule 98 (comparison -> infixOperation .)
    TRUE            reduce using rule 98 (comparison -> infixOperation .)
    VAL             reduce using rule 98 (comparison -> infixOperation .)
    VAR             reduce using rule 98 (comparison -> infixOperation .)
    WHEN            reduce using rule 98 (comparison -> infixOperation .)
    LONG            reduce using rule 98 (comparison -> infixOperation .)
    ARRAY           reduce using rule 98 (comparison -> infixOperation .)
    ELVIS           reduce using rule 98 (comparison -> infixOperation .)
    IN              reduce using rule 98 (comparison -> infixOperation .)
    NOT_IN          reduce using rule 98 (comparison -> infixOperation .)
    IS              reduce using rule 98 (comparison -> infixOperation .)
    NOT_IS          reduce using rule 98 (comparison -> infixOperation .)
    DIFERENTE       reduce using rule 98 (comparison -> infixOperation .)
    IDENTIDADE      reduce using rule 98 (comparison -> infixOperation .)
    IGUALDADE       reduce using rule 98 (comparison -> infixOperation .)
    SEMIDENTIDADE   reduce using rule 98 (comparison -> infixOperation .)
    AND             reduce using rule 98 (comparison -> infixOperation .)
    OR              reduce using rule 98 (comparison -> infixOperation .)
    FUN             reduce using rule 98 (comparison -> infixOperation .)
    FOR             reduce using rule 98 (comparison -> infixOperation .)
    WHILE           reduce using rule 98 (comparison -> infixOperation .)
    DO              reduce using rule 98 (comparison -> infixOperation .)
    LITERAL_STRING  reduce using rule 98 (comparison -> infixOperation .)
    IF              reduce using rule 98 (comparison -> infixOperation .)
    RETURN          reduce using rule 98 (comparison -> infixOperation .)
    RETURN_AT       reduce using rule 98 (comparison -> infixOperation .)
    CONTINUE        reduce using rule 98 (comparison -> infixOperation .)
    CONTINUE_AT     reduce using rule 98 (comparison -> infixOperation .)
    BREAK           reduce using rule 98 (comparison -> infixOperation .)
    BREAK_AT        reduce using rule 98 (comparison -> infixOperation .)
    NOT             reduce using rule 98 (comparison -> infixOperation .)
    SUSPEND         reduce using rule 98 (comparison -> infixOperation .)
    COMMA           reduce using rule 98 (comparison -> infixOperation .)
    RPAREN          reduce using rule 98 (comparison -> infixOperation .)
    LCHAVE          reduce using rule 98 (comparison -> infixOperation .)
    RCCT            reduce using rule 98 (comparison -> infixOperation .)
    PV              reduce using rule 98 (comparison -> infixOperation .)
    ELSE            reduce using rule 98 (comparison -> infixOperation .)
    MENOR           shift and go to state 212
    MAIOR           shift and go to state 213
    MENORIGUAL      shift and go to state 214
    MAIORIGUAL      shift and go to state 215

  ! MENOR           [ reduce using rule 98 (comparison -> infixOperation .) ]
  ! MAIOR           [ reduce using rule 98 (comparison -> infixOperation .) ]
  ! MENORIGUAL      [ reduce using rule 98 (comparison -> infixOperation .) ]
  ! MAIORIGUAL      [ reduce using rule 98 (comparison -> infixOperation .) ]

    comparisonOperator             shift and go to state 211

state 108

    (225) optionalReceiverType -> receiverType .

    COLONCOLON      reduce using rule 225 (optionalReceiverType -> receiverType .)


state 109

    (253) prefixUnaryOperator -> INCREMENTO .

    INCREMENTO      reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    DECREMENTO      reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    MINUS           reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    PLUS            reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    NOT             reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    ID              reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    CROSSINLINE     reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    IMPORT          reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    INIT            reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    NOINLINE        reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    OUT             reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    VARARG          reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    WHERE           reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    OBJECT          reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    CONST           reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    CONSTRUCTOR     reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    EOF             reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    FALSE           reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    FUNCTION        reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    NULL            reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    NULLABLE        reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    NUMBER          reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    OPERATOR        reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    SMARTCAST       reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    THIS            reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    TRUE            reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    VAL             reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    VAR             reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    WHEN            reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    LONG            reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    ARRAY           reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    LITERAL_STRING  reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    LPAREN          reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    LCCT            reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    IF              reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    RETURN          reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    RETURN_AT       reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    CONTINUE        reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    CONTINUE_AT     reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    BREAK           reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    BREAK_AT        reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    RCHAVE          reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    FUN             reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    SUSPEND         reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)
    COLONCOLON      reduce using rule 253 (prefixUnaryOperator -> INCREMENTO .)


state 110

    (254) prefixUnaryOperator -> DECREMENTO .

    INCREMENTO      reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    DECREMENTO      reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    MINUS           reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    PLUS            reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    NOT             reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    ID              reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    CROSSINLINE     reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    IMPORT          reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    INIT            reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    NOINLINE        reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    OUT             reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    VARARG          reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    WHERE           reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    OBJECT          reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    CONST           reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    CONSTRUCTOR     reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    EOF             reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    FALSE           reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    FUNCTION        reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    NULL            reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    NULLABLE        reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    NUMBER          reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    OPERATOR        reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    SMARTCAST       reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    THIS            reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    TRUE            reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    VAL             reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    VAR             reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    WHEN            reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    LONG            reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    ARRAY           reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    LITERAL_STRING  reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    LPAREN          reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    LCCT            reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    IF              reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    RETURN          reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    RETURN_AT       reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    CONTINUE        reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    CONTINUE_AT     reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    BREAK           reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    BREAK_AT        reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    RCHAVE          reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    FUN             reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    SUSPEND         reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)
    COLONCOLON      reduce using rule 254 (prefixUnaryOperator -> DECREMENTO .)


state 111

    (255) prefixUnaryOperator -> MINUS .

    INCREMENTO      reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    DECREMENTO      reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    MINUS           reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    PLUS            reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    NOT             reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    ID              reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    CROSSINLINE     reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    IMPORT          reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    INIT            reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    NOINLINE        reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    OUT             reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    VARARG          reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    WHERE           reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    OBJECT          reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    CONST           reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    CONSTRUCTOR     reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    EOF             reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    FALSE           reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    FUNCTION        reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    NULL            reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    NULLABLE        reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    NUMBER          reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    OPERATOR        reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    SMARTCAST       reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    THIS            reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    TRUE            reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    VAL             reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    VAR             reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    WHEN            reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    LONG            reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    ARRAY           reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    LITERAL_STRING  reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    LPAREN          reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    LCCT            reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    IF              reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    RETURN          reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    RETURN_AT       reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    CONTINUE        reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    CONTINUE_AT     reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    BREAK           reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    BREAK_AT        reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    RCHAVE          reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    FUN             reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    SUSPEND         reduce using rule 255 (prefixUnaryOperator -> MINUS .)
    COLONCOLON      reduce using rule 255 (prefixUnaryOperator -> MINUS .)


state 112

    (256) prefixUnaryOperator -> PLUS .

    INCREMENTO      reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    DECREMENTO      reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    MINUS           reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    PLUS            reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    NOT             reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    ID              reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    CROSSINLINE     reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    IMPORT          reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    INIT            reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    NOINLINE        reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    OUT             reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    VARARG          reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    WHERE           reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    OBJECT          reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    CONST           reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    CONSTRUCTOR     reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    EOF             reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    FALSE           reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    FUNCTION        reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    NULL            reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    NULLABLE        reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    NUMBER          reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    OPERATOR        reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    SMARTCAST       reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    THIS            reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    TRUE            reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    VAL             reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    VAR             reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    WHEN            reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    LONG            reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    ARRAY           reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    LITERAL_STRING  reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    LPAREN          reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    LCCT            reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    IF              reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    RETURN          reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    RETURN_AT       reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    CONTINUE        reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    CONTINUE_AT     reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    BREAK           reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    BREAK_AT        reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    RCHAVE          reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    FUN             reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    SUSPEND         reduce using rule 256 (prefixUnaryOperator -> PLUS .)
    COLONCOLON      reduce using rule 256 (prefixUnaryOperator -> PLUS .)


state 113

    (257) prefixUnaryOperator -> NOT .

    INCREMENTO      reduce using rule 257 (prefixUnaryOperator -> NOT .)
    DECREMENTO      reduce using rule 257 (prefixUnaryOperator -> NOT .)
    MINUS           reduce using rule 257 (prefixUnaryOperator -> NOT .)
    PLUS            reduce using rule 257 (prefixUnaryOperator -> NOT .)
    NOT             reduce using rule 257 (prefixUnaryOperator -> NOT .)
    ID              reduce using rule 257 (prefixUnaryOperator -> NOT .)
    CROSSINLINE     reduce using rule 257 (prefixUnaryOperator -> NOT .)
    IMPORT          reduce using rule 257 (prefixUnaryOperator -> NOT .)
    INIT            reduce using rule 257 (prefixUnaryOperator -> NOT .)
    NOINLINE        reduce using rule 257 (prefixUnaryOperator -> NOT .)
    OUT             reduce using rule 257 (prefixUnaryOperator -> NOT .)
    VARARG          reduce using rule 257 (prefixUnaryOperator -> NOT .)
    WHERE           reduce using rule 257 (prefixUnaryOperator -> NOT .)
    OBJECT          reduce using rule 257 (prefixUnaryOperator -> NOT .)
    CONST           reduce using rule 257 (prefixUnaryOperator -> NOT .)
    CONSTRUCTOR     reduce using rule 257 (prefixUnaryOperator -> NOT .)
    EOF             reduce using rule 257 (prefixUnaryOperator -> NOT .)
    FALSE           reduce using rule 257 (prefixUnaryOperator -> NOT .)
    FUNCTION        reduce using rule 257 (prefixUnaryOperator -> NOT .)
    NULL            reduce using rule 257 (prefixUnaryOperator -> NOT .)
    NULLABLE        reduce using rule 257 (prefixUnaryOperator -> NOT .)
    NUMBER          reduce using rule 257 (prefixUnaryOperator -> NOT .)
    OPERATOR        reduce using rule 257 (prefixUnaryOperator -> NOT .)
    SMARTCAST       reduce using rule 257 (prefixUnaryOperator -> NOT .)
    THIS            reduce using rule 257 (prefixUnaryOperator -> NOT .)
    TRUE            reduce using rule 257 (prefixUnaryOperator -> NOT .)
    VAL             reduce using rule 257 (prefixUnaryOperator -> NOT .)
    VAR             reduce using rule 257 (prefixUnaryOperator -> NOT .)
    WHEN            reduce using rule 257 (prefixUnaryOperator -> NOT .)
    LONG            reduce using rule 257 (prefixUnaryOperator -> NOT .)
    ARRAY           reduce using rule 257 (prefixUnaryOperator -> NOT .)
    LITERAL_STRING  reduce using rule 257 (prefixUnaryOperator -> NOT .)
    LPAREN          reduce using rule 257 (prefixUnaryOperator -> NOT .)
    LCCT            reduce using rule 257 (prefixUnaryOperator -> NOT .)
    IF              reduce using rule 257 (prefixUnaryOperator -> NOT .)
    RETURN          reduce using rule 257 (prefixUnaryOperator -> NOT .)
    RETURN_AT       reduce using rule 257 (prefixUnaryOperator -> NOT .)
    CONTINUE        reduce using rule 257 (prefixUnaryOperator -> NOT .)
    CONTINUE_AT     reduce using rule 257 (prefixUnaryOperator -> NOT .)
    BREAK           reduce using rule 257 (prefixUnaryOperator -> NOT .)
    BREAK_AT        reduce using rule 257 (prefixUnaryOperator -> NOT .)
    RCHAVE          reduce using rule 257 (prefixUnaryOperator -> NOT .)
    FUN             reduce using rule 257 (prefixUnaryOperator -> NOT .)
    SUSPEND         reduce using rule 257 (prefixUnaryOperator -> NOT .)
    COLONCOLON      reduce using rule 257 (prefixUnaryOperator -> NOT .)


state 114

    (100) infixOperation -> elvisExpression . infixOperationRecursive
    (101) infixOperation -> elvisExpression .
    (102) infixOperationRecursive -> . inOrIs elvisOrType
    (103) infixOperationRecursive -> . inOrIs elvisOrType infixOperationRecursive
    (104) inOrIs -> . inOperator
    (105) inOrIs -> . isOperator
    (242) inOperator -> . IN
    (243) inOperator -> . NOT_IN
    (244) isOperator -> . IS
    (245) isOperator -> . NOT_IS

  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT_IN resolved as shift
  ! shift/reduce conflict for IS resolved as shift
  ! shift/reduce conflict for NOT_IS resolved as shift
    INCREMENTO      reduce using rule 101 (infixOperation -> elvisExpression .)
    DECREMENTO      reduce using rule 101 (infixOperation -> elvisExpression .)
    MENOR           reduce using rule 101 (infixOperation -> elvisExpression .)
    LCCT            reduce using rule 101 (infixOperation -> elvisExpression .)
    COLONCOLON      reduce using rule 101 (infixOperation -> elvisExpression .)
    PONTO           reduce using rule 101 (infixOperation -> elvisExpression .)
    LPAREN          reduce using rule 101 (infixOperation -> elvisExpression .)
    RCHAVE          reduce using rule 101 (infixOperation -> elvisExpression .)
    AS              reduce using rule 101 (infixOperation -> elvisExpression .)
    MAISIGUAL       reduce using rule 101 (infixOperation -> elvisExpression .)
    MENOSIGUAL      reduce using rule 101 (infixOperation -> elvisExpression .)
    MULTIGUAL       reduce using rule 101 (infixOperation -> elvisExpression .)
    DIVIGUAL        reduce using rule 101 (infixOperation -> elvisExpression .)
    MODIGUAL        reduce using rule 101 (infixOperation -> elvisExpression .)
    MULT            reduce using rule 101 (infixOperation -> elvisExpression .)
    DIVIDE          reduce using rule 101 (infixOperation -> elvisExpression .)
    MOD             reduce using rule 101 (infixOperation -> elvisExpression .)
    PLUS            reduce using rule 101 (infixOperation -> elvisExpression .)
    MINUS           reduce using rule 101 (infixOperation -> elvisExpression .)
    PONTOPONTO      reduce using rule 101 (infixOperation -> elvisExpression .)
    ID              reduce using rule 101 (infixOperation -> elvisExpression .)
    CROSSINLINE     reduce using rule 101 (infixOperation -> elvisExpression .)
    IMPORT          reduce using rule 101 (infixOperation -> elvisExpression .)
    INIT            reduce using rule 101 (infixOperation -> elvisExpression .)
    NOINLINE        reduce using rule 101 (infixOperation -> elvisExpression .)
    OUT             reduce using rule 101 (infixOperation -> elvisExpression .)
    VARARG          reduce using rule 101 (infixOperation -> elvisExpression .)
    WHERE           reduce using rule 101 (infixOperation -> elvisExpression .)
    OBJECT          reduce using rule 101 (infixOperation -> elvisExpression .)
    CONST           reduce using rule 101 (infixOperation -> elvisExpression .)
    CONSTRUCTOR     reduce using rule 101 (infixOperation -> elvisExpression .)
    EOF             reduce using rule 101 (infixOperation -> elvisExpression .)
    FALSE           reduce using rule 101 (infixOperation -> elvisExpression .)
    FUNCTION        reduce using rule 101 (infixOperation -> elvisExpression .)
    NULL            reduce using rule 101 (infixOperation -> elvisExpression .)
    NULLABLE        reduce using rule 101 (infixOperation -> elvisExpression .)
    NUMBER          reduce using rule 101 (infixOperation -> elvisExpression .)
    OPERATOR        reduce using rule 101 (infixOperation -> elvisExpression .)
    SMARTCAST       reduce using rule 101 (infixOperation -> elvisExpression .)
    THIS            reduce using rule 101 (infixOperation -> elvisExpression .)
    TRUE            reduce using rule 101 (infixOperation -> elvisExpression .)
    VAL             reduce using rule 101 (infixOperation -> elvisExpression .)
    VAR             reduce using rule 101 (infixOperation -> elvisExpression .)
    WHEN            reduce using rule 101 (infixOperation -> elvisExpression .)
    LONG            reduce using rule 101 (infixOperation -> elvisExpression .)
    ARRAY           reduce using rule 101 (infixOperation -> elvisExpression .)
    ELVIS           reduce using rule 101 (infixOperation -> elvisExpression .)
    MAIOR           reduce using rule 101 (infixOperation -> elvisExpression .)
    MENORIGUAL      reduce using rule 101 (infixOperation -> elvisExpression .)
    MAIORIGUAL      reduce using rule 101 (infixOperation -> elvisExpression .)
    DIFERENTE       reduce using rule 101 (infixOperation -> elvisExpression .)
    IDENTIDADE      reduce using rule 101 (infixOperation -> elvisExpression .)
    IGUALDADE       reduce using rule 101 (infixOperation -> elvisExpression .)
    SEMIDENTIDADE   reduce using rule 101 (infixOperation -> elvisExpression .)
    AND             reduce using rule 101 (infixOperation -> elvisExpression .)
    OR              reduce using rule 101 (infixOperation -> elvisExpression .)
    FUN             reduce using rule 101 (infixOperation -> elvisExpression .)
    FOR             reduce using rule 101 (infixOperation -> elvisExpression .)
    WHILE           reduce using rule 101 (infixOperation -> elvisExpression .)
    DO              reduce using rule 101 (infixOperation -> elvisExpression .)
    LITERAL_STRING  reduce using rule 101 (infixOperation -> elvisExpression .)
    IF              reduce using rule 101 (infixOperation -> elvisExpression .)
    RETURN          reduce using rule 101 (infixOperation -> elvisExpression .)
    RETURN_AT       reduce using rule 101 (infixOperation -> elvisExpression .)
    CONTINUE        reduce using rule 101 (infixOperation -> elvisExpression .)
    CONTINUE_AT     reduce using rule 101 (infixOperation -> elvisExpression .)
    BREAK           reduce using rule 101 (infixOperation -> elvisExpression .)
    BREAK_AT        reduce using rule 101 (infixOperation -> elvisExpression .)
    NOT             reduce using rule 101 (infixOperation -> elvisExpression .)
    SUSPEND         reduce using rule 101 (infixOperation -> elvisExpression .)
    COMMA           reduce using rule 101 (infixOperation -> elvisExpression .)
    RPAREN          reduce using rule 101 (infixOperation -> elvisExpression .)
    LCHAVE          reduce using rule 101 (infixOperation -> elvisExpression .)
    RCCT            reduce using rule 101 (infixOperation -> elvisExpression .)
    PV              reduce using rule 101 (infixOperation -> elvisExpression .)
    ELSE            reduce using rule 101 (infixOperation -> elvisExpression .)
    IN              shift and go to state 220
    NOT_IN          shift and go to state 221
    IS              shift and go to state 222
    NOT_IS          shift and go to state 223

  ! IN              [ reduce using rule 101 (infixOperation -> elvisExpression .) ]
  ! NOT_IN          [ reduce using rule 101 (infixOperation -> elvisExpression .) ]
  ! IS              [ reduce using rule 101 (infixOperation -> elvisExpression .) ]
  ! NOT_IS          [ reduce using rule 101 (infixOperation -> elvisExpression .) ]

    infixOperationRecursive        shift and go to state 216
    inOrIs                         shift and go to state 217
    inOperator                     shift and go to state 218
    isOperator                     shift and go to state 219

state 115

    (69) receiverType -> typeModifier . parenthesizedType
    (68) parenthesizedType -> . LPAREN type RPAREN

    LPAREN          shift and go to state 225

    parenthesizedType              shift and go to state 224

state 116

    (108) elvisExpression -> infixFunctionCall .
    (109) elvisExpression -> infixFunctionCall . ELVIS elvisExpression

  ! shift/reduce conflict for ELVIS resolved as shift
    INCREMENTO      reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    DECREMENTO      reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    MENOR           reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    LCCT            reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    COLONCOLON      reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    PONTO           reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    LPAREN          reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    RCHAVE          reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    AS              reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    MAISIGUAL       reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    MENOSIGUAL      reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    MULTIGUAL       reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    DIVIGUAL        reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    MODIGUAL        reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    MULT            reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    DIVIDE          reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    MOD             reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    PLUS            reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    MINUS           reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    PONTOPONTO      reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    ID              reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    CROSSINLINE     reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    IMPORT          reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    INIT            reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    NOINLINE        reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    OUT             reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    VARARG          reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    WHERE           reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    OBJECT          reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    CONST           reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    CONSTRUCTOR     reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    EOF             reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    FALSE           reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    FUNCTION        reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    NULL            reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    NULLABLE        reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    NUMBER          reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    OPERATOR        reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    SMARTCAST       reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    THIS            reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    TRUE            reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    VAL             reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    VAR             reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    WHEN            reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    LONG            reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    ARRAY           reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    IN              reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    NOT_IN          reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    IS              reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    NOT_IS          reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    MAIOR           reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    MENORIGUAL      reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    MAIORIGUAL      reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    DIFERENTE       reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    IDENTIDADE      reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    IGUALDADE       reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    SEMIDENTIDADE   reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    AND             reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    OR              reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    FUN             reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    FOR             reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    WHILE           reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    DO              reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    LITERAL_STRING  reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    IF              reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    RETURN          reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    RETURN_AT       reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    CONTINUE        reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    CONTINUE_AT     reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    BREAK           reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    BREAK_AT        reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    NOT             reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    SUSPEND         reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    COMMA           reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    RPAREN          reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    LCHAVE          reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    RCCT            reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    PV              reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    ELSE            reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    ELVIS           shift and go to state 226

  ! ELVIS           [ reduce using rule 108 (elvisExpression -> infixFunctionCall .) ]


state 117

    (110) infixFunctionCall -> rangeExpression .
    (111) infixFunctionCall -> rangeExpression . simpleIdentifier infixFunctionCall
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
    INCREMENTO      reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    DECREMENTO      reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    MENOR           reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    LCCT            reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    COLONCOLON      reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    PONTO           reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    LPAREN          reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    RCHAVE          reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    AS              reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    MAISIGUAL       reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    MENOSIGUAL      reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    MULTIGUAL       reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    DIVIGUAL        reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    MODIGUAL        reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    MULT            reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    DIVIDE          reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    MOD             reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    PLUS            reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    MINUS           reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    PONTOPONTO      reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    ELVIS           reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    IN              reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    NOT_IN          reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    IS              reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    NOT_IS          reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    MAIOR           reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    MENORIGUAL      reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    MAIORIGUAL      reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    DIFERENTE       reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    IDENTIDADE      reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    IGUALDADE       reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    SEMIDENTIDADE   reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    AND             reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    OR              reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    FUN             reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    FOR             reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    WHILE           reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    DO              reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    LITERAL_STRING  reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    IF              reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    RETURN          reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    RETURN_AT       reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    CONTINUE        reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    CONTINUE_AT     reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    BREAK           reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    BREAK_AT        reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    NOT             reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    SUSPEND         reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    COMMA           reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    RPAREN          reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    LCHAVE          reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    RCCT            reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    PV              reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    ELSE            reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

  ! ID              [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! CROSSINLINE     [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! IMPORT          [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! INIT            [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! NOINLINE        [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! OUT             [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! VARARG          [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! WHERE           [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! OBJECT          [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! CONST           [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! CONSTRUCTOR     [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! EOF             [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! FALSE           [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! FUNCTION        [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! NULL            [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! NULLABLE        [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! NUMBER          [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! OPERATOR        [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! SMARTCAST       [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! THIS            [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! TRUE            [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! VAL             [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! VAR             [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! WHEN            [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! LONG            [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! ARRAY           [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]

    simpleIdentifier               shift and go to state 227

state 118

    (112) rangeExpression -> additiveExpression .
    (113) rangeExpression -> additiveExpression . PONTOPONTO rangeExpression

  ! shift/reduce conflict for PONTOPONTO resolved as shift
    INCREMENTO      reduce using rule 112 (rangeExpression -> additiveExpression .)
    DECREMENTO      reduce using rule 112 (rangeExpression -> additiveExpression .)
    MENOR           reduce using rule 112 (rangeExpression -> additiveExpression .)
    LCCT            reduce using rule 112 (rangeExpression -> additiveExpression .)
    COLONCOLON      reduce using rule 112 (rangeExpression -> additiveExpression .)
    PONTO           reduce using rule 112 (rangeExpression -> additiveExpression .)
    LPAREN          reduce using rule 112 (rangeExpression -> additiveExpression .)
    RCHAVE          reduce using rule 112 (rangeExpression -> additiveExpression .)
    AS              reduce using rule 112 (rangeExpression -> additiveExpression .)
    MAISIGUAL       reduce using rule 112 (rangeExpression -> additiveExpression .)
    MENOSIGUAL      reduce using rule 112 (rangeExpression -> additiveExpression .)
    MULTIGUAL       reduce using rule 112 (rangeExpression -> additiveExpression .)
    DIVIGUAL        reduce using rule 112 (rangeExpression -> additiveExpression .)
    MODIGUAL        reduce using rule 112 (rangeExpression -> additiveExpression .)
    MULT            reduce using rule 112 (rangeExpression -> additiveExpression .)
    DIVIDE          reduce using rule 112 (rangeExpression -> additiveExpression .)
    MOD             reduce using rule 112 (rangeExpression -> additiveExpression .)
    PLUS            reduce using rule 112 (rangeExpression -> additiveExpression .)
    MINUS           reduce using rule 112 (rangeExpression -> additiveExpression .)
    ID              reduce using rule 112 (rangeExpression -> additiveExpression .)
    CROSSINLINE     reduce using rule 112 (rangeExpression -> additiveExpression .)
    IMPORT          reduce using rule 112 (rangeExpression -> additiveExpression .)
    INIT            reduce using rule 112 (rangeExpression -> additiveExpression .)
    NOINLINE        reduce using rule 112 (rangeExpression -> additiveExpression .)
    OUT             reduce using rule 112 (rangeExpression -> additiveExpression .)
    VARARG          reduce using rule 112 (rangeExpression -> additiveExpression .)
    WHERE           reduce using rule 112 (rangeExpression -> additiveExpression .)
    OBJECT          reduce using rule 112 (rangeExpression -> additiveExpression .)
    CONST           reduce using rule 112 (rangeExpression -> additiveExpression .)
    CONSTRUCTOR     reduce using rule 112 (rangeExpression -> additiveExpression .)
    EOF             reduce using rule 112 (rangeExpression -> additiveExpression .)
    FALSE           reduce using rule 112 (rangeExpression -> additiveExpression .)
    FUNCTION        reduce using rule 112 (rangeExpression -> additiveExpression .)
    NULL            reduce using rule 112 (rangeExpression -> additiveExpression .)
    NULLABLE        reduce using rule 112 (rangeExpression -> additiveExpression .)
    NUMBER          reduce using rule 112 (rangeExpression -> additiveExpression .)
    OPERATOR        reduce using rule 112 (rangeExpression -> additiveExpression .)
    SMARTCAST       reduce using rule 112 (rangeExpression -> additiveExpression .)
    THIS            reduce using rule 112 (rangeExpression -> additiveExpression .)
    TRUE            reduce using rule 112 (rangeExpression -> additiveExpression .)
    VAL             reduce using rule 112 (rangeExpression -> additiveExpression .)
    VAR             reduce using rule 112 (rangeExpression -> additiveExpression .)
    WHEN            reduce using rule 112 (rangeExpression -> additiveExpression .)
    LONG            reduce using rule 112 (rangeExpression -> additiveExpression .)
    ARRAY           reduce using rule 112 (rangeExpression -> additiveExpression .)
    ELVIS           reduce using rule 112 (rangeExpression -> additiveExpression .)
    IN              reduce using rule 112 (rangeExpression -> additiveExpression .)
    NOT_IN          reduce using rule 112 (rangeExpression -> additiveExpression .)
    IS              reduce using rule 112 (rangeExpression -> additiveExpression .)
    NOT_IS          reduce using rule 112 (rangeExpression -> additiveExpression .)
    MAIOR           reduce using rule 112 (rangeExpression -> additiveExpression .)
    MENORIGUAL      reduce using rule 112 (rangeExpression -> additiveExpression .)
    MAIORIGUAL      reduce using rule 112 (rangeExpression -> additiveExpression .)
    DIFERENTE       reduce using rule 112 (rangeExpression -> additiveExpression .)
    IDENTIDADE      reduce using rule 112 (rangeExpression -> additiveExpression .)
    IGUALDADE       reduce using rule 112 (rangeExpression -> additiveExpression .)
    SEMIDENTIDADE   reduce using rule 112 (rangeExpression -> additiveExpression .)
    AND             reduce using rule 112 (rangeExpression -> additiveExpression .)
    OR              reduce using rule 112 (rangeExpression -> additiveExpression .)
    FUN             reduce using rule 112 (rangeExpression -> additiveExpression .)
    FOR             reduce using rule 112 (rangeExpression -> additiveExpression .)
    WHILE           reduce using rule 112 (rangeExpression -> additiveExpression .)
    DO              reduce using rule 112 (rangeExpression -> additiveExpression .)
    LITERAL_STRING  reduce using rule 112 (rangeExpression -> additiveExpression .)
    IF              reduce using rule 112 (rangeExpression -> additiveExpression .)
    RETURN          reduce using rule 112 (rangeExpression -> additiveExpression .)
    RETURN_AT       reduce using rule 112 (rangeExpression -> additiveExpression .)
    CONTINUE        reduce using rule 112 (rangeExpression -> additiveExpression .)
    CONTINUE_AT     reduce using rule 112 (rangeExpression -> additiveExpression .)
    BREAK           reduce using rule 112 (rangeExpression -> additiveExpression .)
    BREAK_AT        reduce using rule 112 (rangeExpression -> additiveExpression .)
    NOT             reduce using rule 112 (rangeExpression -> additiveExpression .)
    SUSPEND         reduce using rule 112 (rangeExpression -> additiveExpression .)
    COMMA           reduce using rule 112 (rangeExpression -> additiveExpression .)
    RPAREN          reduce using rule 112 (rangeExpression -> additiveExpression .)
    LCHAVE          reduce using rule 112 (rangeExpression -> additiveExpression .)
    RCCT            reduce using rule 112 (rangeExpression -> additiveExpression .)
    PV              reduce using rule 112 (rangeExpression -> additiveExpression .)
    ELSE            reduce using rule 112 (rangeExpression -> additiveExpression .)
    PONTOPONTO      shift and go to state 228

  ! PONTOPONTO      [ reduce using rule 112 (rangeExpression -> additiveExpression .) ]


state 119

    (114) additiveExpression -> multiplicativeExpression .
    (115) additiveExpression -> multiplicativeExpression . additiveOperator additiveExpression
    (246) additiveOperator -> . PLUS
    (247) additiveOperator -> . MINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    INCREMENTO      reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    DECREMENTO      reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    MENOR           reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    LCCT            reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    COLONCOLON      reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    PONTO           reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    LPAREN          reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    RCHAVE          reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    AS              reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    MAISIGUAL       reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    MENOSIGUAL      reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    MULTIGUAL       reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    DIVIGUAL        reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    MODIGUAL        reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    MULT            reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    DIVIDE          reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    MOD             reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    PONTOPONTO      reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    ID              reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    CROSSINLINE     reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    IMPORT          reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    INIT            reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    NOINLINE        reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    OUT             reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    VARARG          reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    WHERE           reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    OBJECT          reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    CONST           reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    CONSTRUCTOR     reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    EOF             reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    FALSE           reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    FUNCTION        reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    NULL            reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    NULLABLE        reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    NUMBER          reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    OPERATOR        reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    SMARTCAST       reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    THIS            reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    TRUE            reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    VAL             reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    VAR             reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    WHEN            reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    LONG            reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    ARRAY           reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    ELVIS           reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    IN              reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    NOT_IN          reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    IS              reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    NOT_IS          reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    MAIOR           reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    MENORIGUAL      reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    MAIORIGUAL      reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    DIFERENTE       reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    IDENTIDADE      reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    IGUALDADE       reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    SEMIDENTIDADE   reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    AND             reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    OR              reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    FUN             reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    FOR             reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    WHILE           reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    DO              reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    LITERAL_STRING  reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    IF              reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    RETURN          reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    RETURN_AT       reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    CONTINUE        reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    CONTINUE_AT     reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    BREAK           reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    BREAK_AT        reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    NOT             reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    SUSPEND         reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    COMMA           reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    RPAREN          reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    LCHAVE          reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    RCCT            reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    PV              reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    ELSE            reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    PLUS            shift and go to state 230
    MINUS           shift and go to state 231

  ! PLUS            [ reduce using rule 114 (additiveExpression -> multiplicativeExpression .) ]
  ! MINUS           [ reduce using rule 114 (additiveExpression -> multiplicativeExpression .) ]

    additiveOperator               shift and go to state 229

state 120

    (116) multiplicativeExpression -> asExpression .
    (117) multiplicativeExpression -> asExpression . multiplicativeOperator multiplicativeExpression
    (248) multiplicativeOperator -> . MULT
    (249) multiplicativeOperator -> . DIVIDE
    (250) multiplicativeOperator -> . MOD

  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    INCREMENTO      reduce using rule 116 (multiplicativeExpression -> asExpression .)
    DECREMENTO      reduce using rule 116 (multiplicativeExpression -> asExpression .)
    MENOR           reduce using rule 116 (multiplicativeExpression -> asExpression .)
    LCCT            reduce using rule 116 (multiplicativeExpression -> asExpression .)
    COLONCOLON      reduce using rule 116 (multiplicativeExpression -> asExpression .)
    PONTO           reduce using rule 116 (multiplicativeExpression -> asExpression .)
    LPAREN          reduce using rule 116 (multiplicativeExpression -> asExpression .)
    RCHAVE          reduce using rule 116 (multiplicativeExpression -> asExpression .)
    AS              reduce using rule 116 (multiplicativeExpression -> asExpression .)
    MAISIGUAL       reduce using rule 116 (multiplicativeExpression -> asExpression .)
    MENOSIGUAL      reduce using rule 116 (multiplicativeExpression -> asExpression .)
    MULTIGUAL       reduce using rule 116 (multiplicativeExpression -> asExpression .)
    DIVIGUAL        reduce using rule 116 (multiplicativeExpression -> asExpression .)
    MODIGUAL        reduce using rule 116 (multiplicativeExpression -> asExpression .)
    PLUS            reduce using rule 116 (multiplicativeExpression -> asExpression .)
    MINUS           reduce using rule 116 (multiplicativeExpression -> asExpression .)
    PONTOPONTO      reduce using rule 116 (multiplicativeExpression -> asExpression .)
    ID              reduce using rule 116 (multiplicativeExpression -> asExpression .)
    CROSSINLINE     reduce using rule 116 (multiplicativeExpression -> asExpression .)
    IMPORT          reduce using rule 116 (multiplicativeExpression -> asExpression .)
    INIT            reduce using rule 116 (multiplicativeExpression -> asExpression .)
    NOINLINE        reduce using rule 116 (multiplicativeExpression -> asExpression .)
    OUT             reduce using rule 116 (multiplicativeExpression -> asExpression .)
    VARARG          reduce using rule 116 (multiplicativeExpression -> asExpression .)
    WHERE           reduce using rule 116 (multiplicativeExpression -> asExpression .)
    OBJECT          reduce using rule 116 (multiplicativeExpression -> asExpression .)
    CONST           reduce using rule 116 (multiplicativeExpression -> asExpression .)
    CONSTRUCTOR     reduce using rule 116 (multiplicativeExpression -> asExpression .)
    EOF             reduce using rule 116 (multiplicativeExpression -> asExpression .)
    FALSE           reduce using rule 116 (multiplicativeExpression -> asExpression .)
    FUNCTION        reduce using rule 116 (multiplicativeExpression -> asExpression .)
    NULL            reduce using rule 116 (multiplicativeExpression -> asExpression .)
    NULLABLE        reduce using rule 116 (multiplicativeExpression -> asExpression .)
    NUMBER          reduce using rule 116 (multiplicativeExpression -> asExpression .)
    OPERATOR        reduce using rule 116 (multiplicativeExpression -> asExpression .)
    SMARTCAST       reduce using rule 116 (multiplicativeExpression -> asExpression .)
    THIS            reduce using rule 116 (multiplicativeExpression -> asExpression .)
    TRUE            reduce using rule 116 (multiplicativeExpression -> asExpression .)
    VAL             reduce using rule 116 (multiplicativeExpression -> asExpression .)
    VAR             reduce using rule 116 (multiplicativeExpression -> asExpression .)
    WHEN            reduce using rule 116 (multiplicativeExpression -> asExpression .)
    LONG            reduce using rule 116 (multiplicativeExpression -> asExpression .)
    ARRAY           reduce using rule 116 (multiplicativeExpression -> asExpression .)
    ELVIS           reduce using rule 116 (multiplicativeExpression -> asExpression .)
    IN              reduce using rule 116 (multiplicativeExpression -> asExpression .)
    NOT_IN          reduce using rule 116 (multiplicativeExpression -> asExpression .)
    IS              reduce using rule 116 (multiplicativeExpression -> asExpression .)
    NOT_IS          reduce using rule 116 (multiplicativeExpression -> asExpression .)
    MAIOR           reduce using rule 116 (multiplicativeExpression -> asExpression .)
    MENORIGUAL      reduce using rule 116 (multiplicativeExpression -> asExpression .)
    MAIORIGUAL      reduce using rule 116 (multiplicativeExpression -> asExpression .)
    DIFERENTE       reduce using rule 116 (multiplicativeExpression -> asExpression .)
    IDENTIDADE      reduce using rule 116 (multiplicativeExpression -> asExpression .)
    IGUALDADE       reduce using rule 116 (multiplicativeExpression -> asExpression .)
    SEMIDENTIDADE   reduce using rule 116 (multiplicativeExpression -> asExpression .)
    AND             reduce using rule 116 (multiplicativeExpression -> asExpression .)
    OR              reduce using rule 116 (multiplicativeExpression -> asExpression .)
    FUN             reduce using rule 116 (multiplicativeExpression -> asExpression .)
    FOR             reduce using rule 116 (multiplicativeExpression -> asExpression .)
    WHILE           reduce using rule 116 (multiplicativeExpression -> asExpression .)
    DO              reduce using rule 116 (multiplicativeExpression -> asExpression .)
    LITERAL_STRING  reduce using rule 116 (multiplicativeExpression -> asExpression .)
    IF              reduce using rule 116 (multiplicativeExpression -> asExpression .)
    RETURN          reduce using rule 116 (multiplicativeExpression -> asExpression .)
    RETURN_AT       reduce using rule 116 (multiplicativeExpression -> asExpression .)
    CONTINUE        reduce using rule 116 (multiplicativeExpression -> asExpression .)
    CONTINUE_AT     reduce using rule 116 (multiplicativeExpression -> asExpression .)
    BREAK           reduce using rule 116 (multiplicativeExpression -> asExpression .)
    BREAK_AT        reduce using rule 116 (multiplicativeExpression -> asExpression .)
    NOT             reduce using rule 116 (multiplicativeExpression -> asExpression .)
    SUSPEND         reduce using rule 116 (multiplicativeExpression -> asExpression .)
    COMMA           reduce using rule 116 (multiplicativeExpression -> asExpression .)
    RPAREN          reduce using rule 116 (multiplicativeExpression -> asExpression .)
    LCHAVE          reduce using rule 116 (multiplicativeExpression -> asExpression .)
    RCCT            reduce using rule 116 (multiplicativeExpression -> asExpression .)
    PV              reduce using rule 116 (multiplicativeExpression -> asExpression .)
    ELSE            reduce using rule 116 (multiplicativeExpression -> asExpression .)
    MULT            shift and go to state 233
    DIVIDE          shift and go to state 234
    MOD             shift and go to state 235

  ! MULT            [ reduce using rule 116 (multiplicativeExpression -> asExpression .) ]
  ! DIVIDE          [ reduce using rule 116 (multiplicativeExpression -> asExpression .) ]
  ! MOD             [ reduce using rule 116 (multiplicativeExpression -> asExpression .) ]

    multiplicativeOperator         shift and go to state 232

state 121

    (40) type -> optionalTypeModifiers optype .

    LCHAVE          reduce using rule 40 (type -> optionalTypeModifiers optype .)
    FUN             reduce using rule 40 (type -> optionalTypeModifiers optype .)
    $end            reduce using rule 40 (type -> optionalTypeModifiers optype .)
    FOR             reduce using rule 40 (type -> optionalTypeModifiers optype .)
    WHILE           reduce using rule 40 (type -> optionalTypeModifiers optype .)
    DO              reduce using rule 40 (type -> optionalTypeModifiers optype .)
    VAR             reduce using rule 40 (type -> optionalTypeModifiers optype .)
    VAL             reduce using rule 40 (type -> optionalTypeModifiers optype .)
    ID              reduce using rule 40 (type -> optionalTypeModifiers optype .)
    CROSSINLINE     reduce using rule 40 (type -> optionalTypeModifiers optype .)
    IMPORT          reduce using rule 40 (type -> optionalTypeModifiers optype .)
    INIT            reduce using rule 40 (type -> optionalTypeModifiers optype .)
    NOINLINE        reduce using rule 40 (type -> optionalTypeModifiers optype .)
    OUT             reduce using rule 40 (type -> optionalTypeModifiers optype .)
    VARARG          reduce using rule 40 (type -> optionalTypeModifiers optype .)
    WHERE           reduce using rule 40 (type -> optionalTypeModifiers optype .)
    OBJECT          reduce using rule 40 (type -> optionalTypeModifiers optype .)
    CONST           reduce using rule 40 (type -> optionalTypeModifiers optype .)
    CONSTRUCTOR     reduce using rule 40 (type -> optionalTypeModifiers optype .)
    EOF             reduce using rule 40 (type -> optionalTypeModifiers optype .)
    FALSE           reduce using rule 40 (type -> optionalTypeModifiers optype .)
    FUNCTION        reduce using rule 40 (type -> optionalTypeModifiers optype .)
    NULL            reduce using rule 40 (type -> optionalTypeModifiers optype .)
    NULLABLE        reduce using rule 40 (type -> optionalTypeModifiers optype .)
    NUMBER          reduce using rule 40 (type -> optionalTypeModifiers optype .)
    OPERATOR        reduce using rule 40 (type -> optionalTypeModifiers optype .)
    SMARTCAST       reduce using rule 40 (type -> optionalTypeModifiers optype .)
    THIS            reduce using rule 40 (type -> optionalTypeModifiers optype .)
    TRUE            reduce using rule 40 (type -> optionalTypeModifiers optype .)
    WHEN            reduce using rule 40 (type -> optionalTypeModifiers optype .)
    LONG            reduce using rule 40 (type -> optionalTypeModifiers optype .)
    ARRAY           reduce using rule 40 (type -> optionalTypeModifiers optype .)
    LPAREN          reduce using rule 40 (type -> optionalTypeModifiers optype .)
    LITERAL_STRING  reduce using rule 40 (type -> optionalTypeModifiers optype .)
    LCCT            reduce using rule 40 (type -> optionalTypeModifiers optype .)
    IF              reduce using rule 40 (type -> optionalTypeModifiers optype .)
    RETURN          reduce using rule 40 (type -> optionalTypeModifiers optype .)
    RETURN_AT       reduce using rule 40 (type -> optionalTypeModifiers optype .)
    CONTINUE        reduce using rule 40 (type -> optionalTypeModifiers optype .)
    CONTINUE_AT     reduce using rule 40 (type -> optionalTypeModifiers optype .)
    BREAK           reduce using rule 40 (type -> optionalTypeModifiers optype .)
    BREAK_AT        reduce using rule 40 (type -> optionalTypeModifiers optype .)
    RCHAVE          reduce using rule 40 (type -> optionalTypeModifiers optype .)
    INCREMENTO      reduce using rule 40 (type -> optionalTypeModifiers optype .)
    DECREMENTO      reduce using rule 40 (type -> optionalTypeModifiers optype .)
    MINUS           reduce using rule 40 (type -> optionalTypeModifiers optype .)
    PLUS            reduce using rule 40 (type -> optionalTypeModifiers optype .)
    NOT             reduce using rule 40 (type -> optionalTypeModifiers optype .)
    SUSPEND         reduce using rule 40 (type -> optionalTypeModifiers optype .)
    COLONCOLON      reduce using rule 40 (type -> optionalTypeModifiers optype .)
    MENOR           reduce using rule 40 (type -> optionalTypeModifiers optype .)
    PONTO           reduce using rule 40 (type -> optionalTypeModifiers optype .)
    AS              reduce using rule 40 (type -> optionalTypeModifiers optype .)
    MAISIGUAL       reduce using rule 40 (type -> optionalTypeModifiers optype .)
    MENOSIGUAL      reduce using rule 40 (type -> optionalTypeModifiers optype .)
    MULTIGUAL       reduce using rule 40 (type -> optionalTypeModifiers optype .)
    DIVIGUAL        reduce using rule 40 (type -> optionalTypeModifiers optype .)
    MODIGUAL        reduce using rule 40 (type -> optionalTypeModifiers optype .)
    MULT            reduce using rule 40 (type -> optionalTypeModifiers optype .)
    DIVIDE          reduce using rule 40 (type -> optionalTypeModifiers optype .)
    MOD             reduce using rule 40 (type -> optionalTypeModifiers optype .)
    PONTOPONTO      reduce using rule 40 (type -> optionalTypeModifiers optype .)
    ELVIS           reduce using rule 40 (type -> optionalTypeModifiers optype .)
    IN              reduce using rule 40 (type -> optionalTypeModifiers optype .)
    NOT_IN          reduce using rule 40 (type -> optionalTypeModifiers optype .)
    IS              reduce using rule 40 (type -> optionalTypeModifiers optype .)
    NOT_IS          reduce using rule 40 (type -> optionalTypeModifiers optype .)
    MAIOR           reduce using rule 40 (type -> optionalTypeModifiers optype .)
    MENORIGUAL      reduce using rule 40 (type -> optionalTypeModifiers optype .)
    MAIORIGUAL      reduce using rule 40 (type -> optionalTypeModifiers optype .)
    DIFERENTE       reduce using rule 40 (type -> optionalTypeModifiers optype .)
    IDENTIDADE      reduce using rule 40 (type -> optionalTypeModifiers optype .)
    IGUALDADE       reduce using rule 40 (type -> optionalTypeModifiers optype .)
    SEMIDENTIDADE   reduce using rule 40 (type -> optionalTypeModifiers optype .)
    AND             reduce using rule 40 (type -> optionalTypeModifiers optype .)
    OR              reduce using rule 40 (type -> optionalTypeModifiers optype .)
    COMMA           reduce using rule 40 (type -> optionalTypeModifiers optype .)
    RPAREN          reduce using rule 40 (type -> optionalTypeModifiers optype .)
    RCCT            reduce using rule 40 (type -> optionalTypeModifiers optype .)
    PV              reduce using rule 40 (type -> optionalTypeModifiers optype .)
    ELSE            reduce using rule 40 (type -> optionalTypeModifiers optype .)
    SETA            reduce using rule 40 (type -> optionalTypeModifiers optype .)
    ATRIBUICAO      reduce using rule 40 (type -> optionalTypeModifiers optype .)


state 122

    (43) optype -> parenthesizedType .

    LCHAVE          reduce using rule 43 (optype -> parenthesizedType .)
    FUN             reduce using rule 43 (optype -> parenthesizedType .)
    $end            reduce using rule 43 (optype -> parenthesizedType .)
    FOR             reduce using rule 43 (optype -> parenthesizedType .)
    WHILE           reduce using rule 43 (optype -> parenthesizedType .)
    DO              reduce using rule 43 (optype -> parenthesizedType .)
    VAR             reduce using rule 43 (optype -> parenthesizedType .)
    VAL             reduce using rule 43 (optype -> parenthesizedType .)
    ID              reduce using rule 43 (optype -> parenthesizedType .)
    CROSSINLINE     reduce using rule 43 (optype -> parenthesizedType .)
    IMPORT          reduce using rule 43 (optype -> parenthesizedType .)
    INIT            reduce using rule 43 (optype -> parenthesizedType .)
    NOINLINE        reduce using rule 43 (optype -> parenthesizedType .)
    OUT             reduce using rule 43 (optype -> parenthesizedType .)
    VARARG          reduce using rule 43 (optype -> parenthesizedType .)
    WHERE           reduce using rule 43 (optype -> parenthesizedType .)
    OBJECT          reduce using rule 43 (optype -> parenthesizedType .)
    CONST           reduce using rule 43 (optype -> parenthesizedType .)
    CONSTRUCTOR     reduce using rule 43 (optype -> parenthesizedType .)
    EOF             reduce using rule 43 (optype -> parenthesizedType .)
    FALSE           reduce using rule 43 (optype -> parenthesizedType .)
    FUNCTION        reduce using rule 43 (optype -> parenthesizedType .)
    NULL            reduce using rule 43 (optype -> parenthesizedType .)
    NULLABLE        reduce using rule 43 (optype -> parenthesizedType .)
    NUMBER          reduce using rule 43 (optype -> parenthesizedType .)
    OPERATOR        reduce using rule 43 (optype -> parenthesizedType .)
    SMARTCAST       reduce using rule 43 (optype -> parenthesizedType .)
    THIS            reduce using rule 43 (optype -> parenthesizedType .)
    TRUE            reduce using rule 43 (optype -> parenthesizedType .)
    WHEN            reduce using rule 43 (optype -> parenthesizedType .)
    LONG            reduce using rule 43 (optype -> parenthesizedType .)
    ARRAY           reduce using rule 43 (optype -> parenthesizedType .)
    LPAREN          reduce using rule 43 (optype -> parenthesizedType .)
    LITERAL_STRING  reduce using rule 43 (optype -> parenthesizedType .)
    LCCT            reduce using rule 43 (optype -> parenthesizedType .)
    IF              reduce using rule 43 (optype -> parenthesizedType .)
    RETURN          reduce using rule 43 (optype -> parenthesizedType .)
    RETURN_AT       reduce using rule 43 (optype -> parenthesizedType .)
    CONTINUE        reduce using rule 43 (optype -> parenthesizedType .)
    CONTINUE_AT     reduce using rule 43 (optype -> parenthesizedType .)
    BREAK           reduce using rule 43 (optype -> parenthesizedType .)
    BREAK_AT        reduce using rule 43 (optype -> parenthesizedType .)
    RCHAVE          reduce using rule 43 (optype -> parenthesizedType .)
    INCREMENTO      reduce using rule 43 (optype -> parenthesizedType .)
    DECREMENTO      reduce using rule 43 (optype -> parenthesizedType .)
    MINUS           reduce using rule 43 (optype -> parenthesizedType .)
    PLUS            reduce using rule 43 (optype -> parenthesizedType .)
    NOT             reduce using rule 43 (optype -> parenthesizedType .)
    SUSPEND         reduce using rule 43 (optype -> parenthesizedType .)
    COLONCOLON      reduce using rule 43 (optype -> parenthesizedType .)
    MENOR           reduce using rule 43 (optype -> parenthesizedType .)
    PONTO           reduce using rule 43 (optype -> parenthesizedType .)
    AS              reduce using rule 43 (optype -> parenthesizedType .)
    MAISIGUAL       reduce using rule 43 (optype -> parenthesizedType .)
    MENOSIGUAL      reduce using rule 43 (optype -> parenthesizedType .)
    MULTIGUAL       reduce using rule 43 (optype -> parenthesizedType .)
    DIVIGUAL        reduce using rule 43 (optype -> parenthesizedType .)
    MODIGUAL        reduce using rule 43 (optype -> parenthesizedType .)
    MULT            reduce using rule 43 (optype -> parenthesizedType .)
    DIVIDE          reduce using rule 43 (optype -> parenthesizedType .)
    MOD             reduce using rule 43 (optype -> parenthesizedType .)
    PONTOPONTO      reduce using rule 43 (optype -> parenthesizedType .)
    ELVIS           reduce using rule 43 (optype -> parenthesizedType .)
    IN              reduce using rule 43 (optype -> parenthesizedType .)
    NOT_IN          reduce using rule 43 (optype -> parenthesizedType .)
    IS              reduce using rule 43 (optype -> parenthesizedType .)
    NOT_IS          reduce using rule 43 (optype -> parenthesizedType .)
    MAIOR           reduce using rule 43 (optype -> parenthesizedType .)
    MENORIGUAL      reduce using rule 43 (optype -> parenthesizedType .)
    MAIORIGUAL      reduce using rule 43 (optype -> parenthesizedType .)
    DIFERENTE       reduce using rule 43 (optype -> parenthesizedType .)
    IDENTIDADE      reduce using rule 43 (optype -> parenthesizedType .)
    IGUALDADE       reduce using rule 43 (optype -> parenthesizedType .)
    SEMIDENTIDADE   reduce using rule 43 (optype -> parenthesizedType .)
    AND             reduce using rule 43 (optype -> parenthesizedType .)
    OR              reduce using rule 43 (optype -> parenthesizedType .)
    COMMA           reduce using rule 43 (optype -> parenthesizedType .)
    RPAREN          reduce using rule 43 (optype -> parenthesizedType .)
    RCCT            reduce using rule 43 (optype -> parenthesizedType .)
    PV              reduce using rule 43 (optype -> parenthesizedType .)
    ELSE            reduce using rule 43 (optype -> parenthesizedType .)
    SETA            reduce using rule 43 (optype -> parenthesizedType .)
    ATRIBUICAO      reduce using rule 43 (optype -> parenthesizedType .)


state 123

    (44) optype -> functionType .

    LCHAVE          reduce using rule 44 (optype -> functionType .)
    FUN             reduce using rule 44 (optype -> functionType .)
    $end            reduce using rule 44 (optype -> functionType .)
    FOR             reduce using rule 44 (optype -> functionType .)
    WHILE           reduce using rule 44 (optype -> functionType .)
    DO              reduce using rule 44 (optype -> functionType .)
    VAR             reduce using rule 44 (optype -> functionType .)
    VAL             reduce using rule 44 (optype -> functionType .)
    ID              reduce using rule 44 (optype -> functionType .)
    CROSSINLINE     reduce using rule 44 (optype -> functionType .)
    IMPORT          reduce using rule 44 (optype -> functionType .)
    INIT            reduce using rule 44 (optype -> functionType .)
    NOINLINE        reduce using rule 44 (optype -> functionType .)
    OUT             reduce using rule 44 (optype -> functionType .)
    VARARG          reduce using rule 44 (optype -> functionType .)
    WHERE           reduce using rule 44 (optype -> functionType .)
    OBJECT          reduce using rule 44 (optype -> functionType .)
    CONST           reduce using rule 44 (optype -> functionType .)
    CONSTRUCTOR     reduce using rule 44 (optype -> functionType .)
    EOF             reduce using rule 44 (optype -> functionType .)
    FALSE           reduce using rule 44 (optype -> functionType .)
    FUNCTION        reduce using rule 44 (optype -> functionType .)
    NULL            reduce using rule 44 (optype -> functionType .)
    NULLABLE        reduce using rule 44 (optype -> functionType .)
    NUMBER          reduce using rule 44 (optype -> functionType .)
    OPERATOR        reduce using rule 44 (optype -> functionType .)
    SMARTCAST       reduce using rule 44 (optype -> functionType .)
    THIS            reduce using rule 44 (optype -> functionType .)
    TRUE            reduce using rule 44 (optype -> functionType .)
    WHEN            reduce using rule 44 (optype -> functionType .)
    LONG            reduce using rule 44 (optype -> functionType .)
    ARRAY           reduce using rule 44 (optype -> functionType .)
    LPAREN          reduce using rule 44 (optype -> functionType .)
    LITERAL_STRING  reduce using rule 44 (optype -> functionType .)
    LCCT            reduce using rule 44 (optype -> functionType .)
    IF              reduce using rule 44 (optype -> functionType .)
    RETURN          reduce using rule 44 (optype -> functionType .)
    RETURN_AT       reduce using rule 44 (optype -> functionType .)
    CONTINUE        reduce using rule 44 (optype -> functionType .)
    CONTINUE_AT     reduce using rule 44 (optype -> functionType .)
    BREAK           reduce using rule 44 (optype -> functionType .)
    BREAK_AT        reduce using rule 44 (optype -> functionType .)
    RCHAVE          reduce using rule 44 (optype -> functionType .)
    INCREMENTO      reduce using rule 44 (optype -> functionType .)
    DECREMENTO      reduce using rule 44 (optype -> functionType .)
    MINUS           reduce using rule 44 (optype -> functionType .)
    PLUS            reduce using rule 44 (optype -> functionType .)
    NOT             reduce using rule 44 (optype -> functionType .)
    SUSPEND         reduce using rule 44 (optype -> functionType .)
    COLONCOLON      reduce using rule 44 (optype -> functionType .)
    MENOR           reduce using rule 44 (optype -> functionType .)
    PONTO           reduce using rule 44 (optype -> functionType .)
    AS              reduce using rule 44 (optype -> functionType .)
    MAISIGUAL       reduce using rule 44 (optype -> functionType .)
    MENOSIGUAL      reduce using rule 44 (optype -> functionType .)
    MULTIGUAL       reduce using rule 44 (optype -> functionType .)
    DIVIGUAL        reduce using rule 44 (optype -> functionType .)
    MODIGUAL        reduce using rule 44 (optype -> functionType .)
    MULT            reduce using rule 44 (optype -> functionType .)
    DIVIDE          reduce using rule 44 (optype -> functionType .)
    MOD             reduce using rule 44 (optype -> functionType .)
    PONTOPONTO      reduce using rule 44 (optype -> functionType .)
    ELVIS           reduce using rule 44 (optype -> functionType .)
    IN              reduce using rule 44 (optype -> functionType .)
    NOT_IN          reduce using rule 44 (optype -> functionType .)
    IS              reduce using rule 44 (optype -> functionType .)
    NOT_IS          reduce using rule 44 (optype -> functionType .)
    MAIOR           reduce using rule 44 (optype -> functionType .)
    MENORIGUAL      reduce using rule 44 (optype -> functionType .)
    MAIORIGUAL      reduce using rule 44 (optype -> functionType .)
    DIFERENTE       reduce using rule 44 (optype -> functionType .)
    IDENTIDADE      reduce using rule 44 (optype -> functionType .)
    IGUALDADE       reduce using rule 44 (optype -> functionType .)
    SEMIDENTIDADE   reduce using rule 44 (optype -> functionType .)
    AND             reduce using rule 44 (optype -> functionType .)
    OR              reduce using rule 44 (optype -> functionType .)
    COMMA           reduce using rule 44 (optype -> functionType .)
    RPAREN          reduce using rule 44 (optype -> functionType .)
    RCCT            reduce using rule 44 (optype -> functionType .)
    PV              reduce using rule 44 (optype -> functionType .)
    ELSE            reduce using rule 44 (optype -> functionType .)
    SETA            reduce using rule 44 (optype -> functionType .)
    ATRIBUICAO      reduce using rule 44 (optype -> functionType .)


state 124

    (45) optype -> userType .

    LCHAVE          reduce using rule 45 (optype -> userType .)
    FUN             reduce using rule 45 (optype -> userType .)
    $end            reduce using rule 45 (optype -> userType .)
    FOR             reduce using rule 45 (optype -> userType .)
    WHILE           reduce using rule 45 (optype -> userType .)
    DO              reduce using rule 45 (optype -> userType .)
    VAR             reduce using rule 45 (optype -> userType .)
    VAL             reduce using rule 45 (optype -> userType .)
    ID              reduce using rule 45 (optype -> userType .)
    CROSSINLINE     reduce using rule 45 (optype -> userType .)
    IMPORT          reduce using rule 45 (optype -> userType .)
    INIT            reduce using rule 45 (optype -> userType .)
    NOINLINE        reduce using rule 45 (optype -> userType .)
    OUT             reduce using rule 45 (optype -> userType .)
    VARARG          reduce using rule 45 (optype -> userType .)
    WHERE           reduce using rule 45 (optype -> userType .)
    OBJECT          reduce using rule 45 (optype -> userType .)
    CONST           reduce using rule 45 (optype -> userType .)
    CONSTRUCTOR     reduce using rule 45 (optype -> userType .)
    EOF             reduce using rule 45 (optype -> userType .)
    FALSE           reduce using rule 45 (optype -> userType .)
    FUNCTION        reduce using rule 45 (optype -> userType .)
    NULL            reduce using rule 45 (optype -> userType .)
    NULLABLE        reduce using rule 45 (optype -> userType .)
    NUMBER          reduce using rule 45 (optype -> userType .)
    OPERATOR        reduce using rule 45 (optype -> userType .)
    SMARTCAST       reduce using rule 45 (optype -> userType .)
    THIS            reduce using rule 45 (optype -> userType .)
    TRUE            reduce using rule 45 (optype -> userType .)
    WHEN            reduce using rule 45 (optype -> userType .)
    LONG            reduce using rule 45 (optype -> userType .)
    ARRAY           reduce using rule 45 (optype -> userType .)
    LPAREN          reduce using rule 45 (optype -> userType .)
    LITERAL_STRING  reduce using rule 45 (optype -> userType .)
    LCCT            reduce using rule 45 (optype -> userType .)
    IF              reduce using rule 45 (optype -> userType .)
    RETURN          reduce using rule 45 (optype -> userType .)
    RETURN_AT       reduce using rule 45 (optype -> userType .)
    CONTINUE        reduce using rule 45 (optype -> userType .)
    CONTINUE_AT     reduce using rule 45 (optype -> userType .)
    BREAK           reduce using rule 45 (optype -> userType .)
    BREAK_AT        reduce using rule 45 (optype -> userType .)
    RCHAVE          reduce using rule 45 (optype -> userType .)
    INCREMENTO      reduce using rule 45 (optype -> userType .)
    DECREMENTO      reduce using rule 45 (optype -> userType .)
    MINUS           reduce using rule 45 (optype -> userType .)
    PLUS            reduce using rule 45 (optype -> userType .)
    NOT             reduce using rule 45 (optype -> userType .)
    SUSPEND         reduce using rule 45 (optype -> userType .)
    COLONCOLON      reduce using rule 45 (optype -> userType .)
    MENOR           reduce using rule 45 (optype -> userType .)
    PONTO           reduce using rule 45 (optype -> userType .)
    AS              reduce using rule 45 (optype -> userType .)
    MAISIGUAL       reduce using rule 45 (optype -> userType .)
    MENOSIGUAL      reduce using rule 45 (optype -> userType .)
    MULTIGUAL       reduce using rule 45 (optype -> userType .)
    DIVIGUAL        reduce using rule 45 (optype -> userType .)
    MODIGUAL        reduce using rule 45 (optype -> userType .)
    MULT            reduce using rule 45 (optype -> userType .)
    DIVIDE          reduce using rule 45 (optype -> userType .)
    MOD             reduce using rule 45 (optype -> userType .)
    PONTOPONTO      reduce using rule 45 (optype -> userType .)
    ELVIS           reduce using rule 45 (optype -> userType .)
    IN              reduce using rule 45 (optype -> userType .)
    NOT_IN          reduce using rule 45 (optype -> userType .)
    IS              reduce using rule 45 (optype -> userType .)
    NOT_IS          reduce using rule 45 (optype -> userType .)
    MAIOR           reduce using rule 45 (optype -> userType .)
    MENORIGUAL      reduce using rule 45 (optype -> userType .)
    MAIORIGUAL      reduce using rule 45 (optype -> userType .)
    DIFERENTE       reduce using rule 45 (optype -> userType .)
    IDENTIDADE      reduce using rule 45 (optype -> userType .)
    IGUALDADE       reduce using rule 45 (optype -> userType .)
    SEMIDENTIDADE   reduce using rule 45 (optype -> userType .)
    AND             reduce using rule 45 (optype -> userType .)
    OR              reduce using rule 45 (optype -> userType .)
    COMMA           reduce using rule 45 (optype -> userType .)
    RPAREN          reduce using rule 45 (optype -> userType .)
    RCCT            reduce using rule 45 (optype -> userType .)
    PV              reduce using rule 45 (optype -> userType .)
    ELSE            reduce using rule 45 (optype -> userType .)
    SETA            reduce using rule 45 (optype -> userType .)
    ATRIBUICAO      reduce using rule 45 (optype -> userType .)


state 125

    (68) parenthesizedType -> LPAREN . type RPAREN
    (67) functionTypeParameters -> LPAREN . optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
    (40) type -> . optionalTypeModifiers optype
    (61) optionalParameterOrType -> . parameter
    (62) optionalParameterOrType -> . type
    (63) optionalParameterOrType -> .
    (41) optionalTypeModifiers -> . typeModifiers
    (42) optionalTypeModifiers -> .
    (39) parameter -> . simpleIdentifier DOISP type
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (48) typeModifier -> . SUSPEND

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
    COMMA           reduce using rule 63 (optionalParameterOrType -> .)
    RPAREN          reduce using rule 63 (optionalParameterOrType -> .)
    LPAREN          reduce using rule 42 (optionalTypeModifiers -> .)
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! ID              [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! CROSSINLINE     [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! IMPORT          [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! INIT            [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! NOINLINE        [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! OUT             [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! VARARG          [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! WHERE           [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! OBJECT          [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! CONST           [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! CONSTRUCTOR     [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! EOF             [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! FALSE           [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! FUNCTION        [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! NULL            [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! NULLABLE        [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! NUMBER          [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! OPERATOR        [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! SMARTCAST       [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! THIS            [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! TRUE            [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! VAL             [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! VAR             [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! WHEN            [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! LONG            [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! ARRAY           [ reduce using rule 42 (optionalTypeModifiers -> .) ]

    type                           shift and go to state 236
    optionalParameterOrType        shift and go to state 237
    optionalTypeModifiers          shift and go to state 45
    parameter                      shift and go to state 238
    typeModifiers                  shift and go to state 46
    simpleIdentifier               shift and go to state 40
    typeModifier                   shift and go to state 47

state 126

    (59) functionType -> receiverType . PONTO functionTypeParameters SETA type

    PONTO           shift and go to state 239


state 127

    (60) functionType -> functionTypeParameters . SETA type

    SETA            shift and go to state 240


state 128

    (52) userType -> simpleUserType .

    LCHAVE          reduce using rule 52 (userType -> simpleUserType .)
    FUN             reduce using rule 52 (userType -> simpleUserType .)
    $end            reduce using rule 52 (userType -> simpleUserType .)
    FOR             reduce using rule 52 (userType -> simpleUserType .)
    WHILE           reduce using rule 52 (userType -> simpleUserType .)
    DO              reduce using rule 52 (userType -> simpleUserType .)
    VAR             reduce using rule 52 (userType -> simpleUserType .)
    VAL             reduce using rule 52 (userType -> simpleUserType .)
    ID              reduce using rule 52 (userType -> simpleUserType .)
    CROSSINLINE     reduce using rule 52 (userType -> simpleUserType .)
    IMPORT          reduce using rule 52 (userType -> simpleUserType .)
    INIT            reduce using rule 52 (userType -> simpleUserType .)
    NOINLINE        reduce using rule 52 (userType -> simpleUserType .)
    OUT             reduce using rule 52 (userType -> simpleUserType .)
    VARARG          reduce using rule 52 (userType -> simpleUserType .)
    WHERE           reduce using rule 52 (userType -> simpleUserType .)
    OBJECT          reduce using rule 52 (userType -> simpleUserType .)
    CONST           reduce using rule 52 (userType -> simpleUserType .)
    CONSTRUCTOR     reduce using rule 52 (userType -> simpleUserType .)
    EOF             reduce using rule 52 (userType -> simpleUserType .)
    FALSE           reduce using rule 52 (userType -> simpleUserType .)
    FUNCTION        reduce using rule 52 (userType -> simpleUserType .)
    NULL            reduce using rule 52 (userType -> simpleUserType .)
    NULLABLE        reduce using rule 52 (userType -> simpleUserType .)
    NUMBER          reduce using rule 52 (userType -> simpleUserType .)
    OPERATOR        reduce using rule 52 (userType -> simpleUserType .)
    SMARTCAST       reduce using rule 52 (userType -> simpleUserType .)
    THIS            reduce using rule 52 (userType -> simpleUserType .)
    TRUE            reduce using rule 52 (userType -> simpleUserType .)
    WHEN            reduce using rule 52 (userType -> simpleUserType .)
    LONG            reduce using rule 52 (userType -> simpleUserType .)
    ARRAY           reduce using rule 52 (userType -> simpleUserType .)
    LPAREN          reduce using rule 52 (userType -> simpleUserType .)
    LITERAL_STRING  reduce using rule 52 (userType -> simpleUserType .)
    LCCT            reduce using rule 52 (userType -> simpleUserType .)
    IF              reduce using rule 52 (userType -> simpleUserType .)
    RETURN          reduce using rule 52 (userType -> simpleUserType .)
    RETURN_AT       reduce using rule 52 (userType -> simpleUserType .)
    CONTINUE        reduce using rule 52 (userType -> simpleUserType .)
    CONTINUE_AT     reduce using rule 52 (userType -> simpleUserType .)
    BREAK           reduce using rule 52 (userType -> simpleUserType .)
    BREAK_AT        reduce using rule 52 (userType -> simpleUserType .)
    RCHAVE          reduce using rule 52 (userType -> simpleUserType .)
    INCREMENTO      reduce using rule 52 (userType -> simpleUserType .)
    DECREMENTO      reduce using rule 52 (userType -> simpleUserType .)
    MINUS           reduce using rule 52 (userType -> simpleUserType .)
    PLUS            reduce using rule 52 (userType -> simpleUserType .)
    NOT             reduce using rule 52 (userType -> simpleUserType .)
    SUSPEND         reduce using rule 52 (userType -> simpleUserType .)
    COLONCOLON      reduce using rule 52 (userType -> simpleUserType .)
    MENOR           reduce using rule 52 (userType -> simpleUserType .)
    PONTO           reduce using rule 52 (userType -> simpleUserType .)
    AS              reduce using rule 52 (userType -> simpleUserType .)
    MAISIGUAL       reduce using rule 52 (userType -> simpleUserType .)
    MENOSIGUAL      reduce using rule 52 (userType -> simpleUserType .)
    MULTIGUAL       reduce using rule 52 (userType -> simpleUserType .)
    DIVIGUAL        reduce using rule 52 (userType -> simpleUserType .)
    MODIGUAL        reduce using rule 52 (userType -> simpleUserType .)
    MULT            reduce using rule 52 (userType -> simpleUserType .)
    DIVIDE          reduce using rule 52 (userType -> simpleUserType .)
    MOD             reduce using rule 52 (userType -> simpleUserType .)
    PONTOPONTO      reduce using rule 52 (userType -> simpleUserType .)
    ELVIS           reduce using rule 52 (userType -> simpleUserType .)
    IN              reduce using rule 52 (userType -> simpleUserType .)
    NOT_IN          reduce using rule 52 (userType -> simpleUserType .)
    IS              reduce using rule 52 (userType -> simpleUserType .)
    NOT_IS          reduce using rule 52 (userType -> simpleUserType .)
    MAIOR           reduce using rule 52 (userType -> simpleUserType .)
    MENORIGUAL      reduce using rule 52 (userType -> simpleUserType .)
    MAIORIGUAL      reduce using rule 52 (userType -> simpleUserType .)
    DIFERENTE       reduce using rule 52 (userType -> simpleUserType .)
    IDENTIDADE      reduce using rule 52 (userType -> simpleUserType .)
    IGUALDADE       reduce using rule 52 (userType -> simpleUserType .)
    SEMIDENTIDADE   reduce using rule 52 (userType -> simpleUserType .)
    AND             reduce using rule 52 (userType -> simpleUserType .)
    OR              reduce using rule 52 (userType -> simpleUserType .)
    COMMA           reduce using rule 52 (userType -> simpleUserType .)
    RPAREN          reduce using rule 52 (userType -> simpleUserType .)
    RCCT            reduce using rule 52 (userType -> simpleUserType .)
    PV              reduce using rule 52 (userType -> simpleUserType .)
    ELSE            reduce using rule 52 (userType -> simpleUserType .)
    SETA            reduce using rule 52 (userType -> simpleUserType .)
    ATRIBUICAO      reduce using rule 52 (userType -> simpleUserType .)


state 129

    (53) simpleUserType -> simpleIdentifier . typeArguments
    (54) simpleUserType -> simpleIdentifier .
    (159) typeArguments -> . MENOR typeArgumentsRecursive MAIOR
    (160) typeArguments -> . MENOR MAIOR

  ! shift/reduce conflict for MENOR resolved as shift
    LCHAVE          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    FUN             reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    $end            reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    FOR             reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    WHILE           reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    DO              reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    VAR             reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    VAL             reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    ID              reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    IMPORT          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    INIT            reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    NOINLINE        reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    OUT             reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    VARARG          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    WHERE           reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    OBJECT          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    CONST           reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    CONSTRUCTOR     reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    EOF             reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    FALSE           reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    FUNCTION        reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    NULL            reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    NULLABLE        reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    NUMBER          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    OPERATOR        reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    SMARTCAST       reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    THIS            reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    TRUE            reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    WHEN            reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    LONG            reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    ARRAY           reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    LPAREN          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    LCCT            reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    IF              reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    RETURN          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    RETURN_AT       reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    CONTINUE        reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    BREAK           reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    BREAK_AT        reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    RCHAVE          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    INCREMENTO      reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    DECREMENTO      reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MINUS           reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    PLUS            reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    NOT             reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    SUSPEND         reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    COLONCOLON      reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    PONTO           reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    AS              reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MAISIGUAL       reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MENOSIGUAL      reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MODIGUAL        reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MULT            reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    DIVIDE          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MOD             reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    ELVIS           reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    IN              reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    NOT_IN          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    IS              reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    NOT_IS          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MAIOR           reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    DIFERENTE       reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    IGUALDADE       reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    AND             reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    OR              reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    COMMA           reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    RPAREN          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    RCCT            reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    PV              reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    ELSE            reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    SETA            reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    ATRIBUICAO      reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MENOR           shift and go to state 166

  ! MENOR           [ reduce using rule 54 (simpleUserType -> simpleIdentifier .) ]

    typeArguments                  shift and go to state 241

state 130

    (47) typeModifiers -> typeModifier typeModifiers .

    LPAREN          reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    SUSPEND         reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    ID              reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    CROSSINLINE     reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    IMPORT          reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    INIT            reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    NOINLINE        reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    OUT             reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    VARARG          reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    WHERE           reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    OBJECT          reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    CONST           reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    CONSTRUCTOR     reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    EOF             reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    FALSE           reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    FUNCTION        reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    NULL            reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    NULLABLE        reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    NUMBER          reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    OPERATOR        reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    SMARTCAST       reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    THIS            reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    TRUE            reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    VAL             reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    VAR             reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    WHEN            reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    LONG            reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    ARRAY           reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)


state 131

    (30) functionValueParametersRecursive -> functionValueParameter COMMA functionValueParametersRecursive .

    RPAREN          reduce using rule 30 (functionValueParametersRecursive -> functionValueParameter COMMA functionValueParametersRecursive .)


state 132

    (31) functionValueParameter -> parameter ATRIBUICAO expression .
    (219) jumpExpression -> expression .

  ! reduce/reduce conflict for COMMA resolved using rule 31 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 31 (functionValueParameter -> parameter ATRIBUICAO expression .)
    COMMA           reduce using rule 31 (functionValueParameter -> parameter ATRIBUICAO expression .)
    RPAREN          reduce using rule 31 (functionValueParameter -> parameter ATRIBUICAO expression .)
    INCREMENTO      reduce using rule 219 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 219 (jumpExpression -> expression .)
    MENOR           reduce using rule 219 (jumpExpression -> expression .)
    LCCT            reduce using rule 219 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 219 (jumpExpression -> expression .)
    PONTO           reduce using rule 219 (jumpExpression -> expression .)
    LPAREN          reduce using rule 219 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 219 (jumpExpression -> expression .)
    AS              reduce using rule 219 (jumpExpression -> expression .)
    MULT            reduce using rule 219 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 219 (jumpExpression -> expression .)
    MOD             reduce using rule 219 (jumpExpression -> expression .)
    PLUS            reduce using rule 219 (jumpExpression -> expression .)
    MINUS           reduce using rule 219 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 219 (jumpExpression -> expression .)
    ID              reduce using rule 219 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 219 (jumpExpression -> expression .)
    IMPORT          reduce using rule 219 (jumpExpression -> expression .)
    INIT            reduce using rule 219 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 219 (jumpExpression -> expression .)
    OUT             reduce using rule 219 (jumpExpression -> expression .)
    VARARG          reduce using rule 219 (jumpExpression -> expression .)
    WHERE           reduce using rule 219 (jumpExpression -> expression .)
    OBJECT          reduce using rule 219 (jumpExpression -> expression .)
    CONST           reduce using rule 219 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 219 (jumpExpression -> expression .)
    EOF             reduce using rule 219 (jumpExpression -> expression .)
    FALSE           reduce using rule 219 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 219 (jumpExpression -> expression .)
    NULL            reduce using rule 219 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 219 (jumpExpression -> expression .)
    NUMBER          reduce using rule 219 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 219 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 219 (jumpExpression -> expression .)
    THIS            reduce using rule 219 (jumpExpression -> expression .)
    TRUE            reduce using rule 219 (jumpExpression -> expression .)
    VAL             reduce using rule 219 (jumpExpression -> expression .)
    VAR             reduce using rule 219 (jumpExpression -> expression .)
    WHEN            reduce using rule 219 (jumpExpression -> expression .)
    LONG            reduce using rule 219 (jumpExpression -> expression .)
    ARRAY           reduce using rule 219 (jumpExpression -> expression .)
    ELVIS           reduce using rule 219 (jumpExpression -> expression .)
    IN              reduce using rule 219 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 219 (jumpExpression -> expression .)
    IS              reduce using rule 219 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 219 (jumpExpression -> expression .)
    MAIOR           reduce using rule 219 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 219 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 219 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 219 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 219 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 219 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 219 (jumpExpression -> expression .)
    AND             reduce using rule 219 (jumpExpression -> expression .)
    OR              reduce using rule 219 (jumpExpression -> expression .)

  ! COMMA           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 219 (jumpExpression -> expression .) ]


state 133

    (171) primaryExpression -> simpleIdentifier .
    (126) label -> simpleIdentifier .

  ! reduce/reduce conflict for INCREMENTO resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NOT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OBJECT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONST resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for EOF resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FALSE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NULL resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NUMBER resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for THIS resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for TRUE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VAL resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VAR resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHEN resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LONG resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ARRAY resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IF resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FUN resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 126 (label -> simpleIdentifier .)
    MENOR           reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    PONTO           reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    AS              reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MULT            reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    DIVIDE          reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MOD             reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    ELVIS           reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    IN              reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    NOT_IN          reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    IS              reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    NOT_IS          reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MAIOR           reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    DIFERENTE       reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    IGUALDADE       reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    AND             reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    OR              reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    COMMA           reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    RPAREN          reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    FOR             reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    WHILE           reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    DO              reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    LCHAVE          reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MAISIGUAL       reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MENOSIGUAL      reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MODIGUAL        reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    RCCT            reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    PV              reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    ELSE            reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    INCREMENTO      reduce using rule 126 (label -> simpleIdentifier .)
    DECREMENTO      reduce using rule 126 (label -> simpleIdentifier .)
    MINUS           reduce using rule 126 (label -> simpleIdentifier .)
    PLUS            reduce using rule 126 (label -> simpleIdentifier .)
    NOT             reduce using rule 126 (label -> simpleIdentifier .)
    ID              reduce using rule 126 (label -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 126 (label -> simpleIdentifier .)
    IMPORT          reduce using rule 126 (label -> simpleIdentifier .)
    INIT            reduce using rule 126 (label -> simpleIdentifier .)
    NOINLINE        reduce using rule 126 (label -> simpleIdentifier .)
    OUT             reduce using rule 126 (label -> simpleIdentifier .)
    VARARG          reduce using rule 126 (label -> simpleIdentifier .)
    WHERE           reduce using rule 126 (label -> simpleIdentifier .)
    OBJECT          reduce using rule 126 (label -> simpleIdentifier .)
    CONST           reduce using rule 126 (label -> simpleIdentifier .)
    CONSTRUCTOR     reduce using rule 126 (label -> simpleIdentifier .)
    EOF             reduce using rule 126 (label -> simpleIdentifier .)
    FALSE           reduce using rule 126 (label -> simpleIdentifier .)
    FUNCTION        reduce using rule 126 (label -> simpleIdentifier .)
    NULL            reduce using rule 126 (label -> simpleIdentifier .)
    NULLABLE        reduce using rule 126 (label -> simpleIdentifier .)
    NUMBER          reduce using rule 126 (label -> simpleIdentifier .)
    OPERATOR        reduce using rule 126 (label -> simpleIdentifier .)
    SMARTCAST       reduce using rule 126 (label -> simpleIdentifier .)
    THIS            reduce using rule 126 (label -> simpleIdentifier .)
    TRUE            reduce using rule 126 (label -> simpleIdentifier .)
    VAL             reduce using rule 126 (label -> simpleIdentifier .)
    VAR             reduce using rule 126 (label -> simpleIdentifier .)
    WHEN            reduce using rule 126 (label -> simpleIdentifier .)
    LONG            reduce using rule 126 (label -> simpleIdentifier .)
    ARRAY           reduce using rule 126 (label -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 126 (label -> simpleIdentifier .)
    LPAREN          reduce using rule 126 (label -> simpleIdentifier .)
    LCCT            reduce using rule 126 (label -> simpleIdentifier .)
    IF              reduce using rule 126 (label -> simpleIdentifier .)
    RETURN          reduce using rule 126 (label -> simpleIdentifier .)
    RETURN_AT       reduce using rule 126 (label -> simpleIdentifier .)
    CONTINUE        reduce using rule 126 (label -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 126 (label -> simpleIdentifier .)
    BREAK           reduce using rule 126 (label -> simpleIdentifier .)
    BREAK_AT        reduce using rule 126 (label -> simpleIdentifier .)
    RCHAVE          reduce using rule 126 (label -> simpleIdentifier .)
    FUN             reduce using rule 126 (label -> simpleIdentifier .)
    SUSPEND         reduce using rule 126 (label -> simpleIdentifier .)
    COLONCOLON      reduce using rule 126 (label -> simpleIdentifier .)

  ! INCREMENTO      [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! RCHAVE          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! PLUS            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! OBJECT          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! CONST           [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! CONSTRUCTOR     [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! EOF             [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! FALSE           [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! FUNCTION        [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! NULL            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! NULLABLE        [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! NUMBER          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! OPERATOR        [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! SMARTCAST       [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! THIS            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! TRUE            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! VAL             [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! VAR             [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! WHEN            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! LONG            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! ARRAY           [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! FUN             [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! LITERAL_STRING  [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! IF              [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! RETURN          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! RETURN_AT       [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! CONTINUE        [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! CONTINUE_AT     [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! BREAK           [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! BREAK_AT        [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! NOT             [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! SUSPEND         [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]


state 134

    (118) asExpression -> prefixUnaryExpression .
    (119) asExpression -> prefixUnaryExpression . asOperator type
    (251) asOperator -> . AS
    (252) asOperator -> . AS asOperator

  ! shift/reduce conflict for AS resolved as shift
    INCREMENTO      reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    DECREMENTO      reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    MENOR           reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    LCCT            reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    COLONCOLON      reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    PONTO           reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    LPAREN          reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    RCHAVE          reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    MULT            reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    DIVIDE          reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    MOD             reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    PLUS            reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    MINUS           reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    PONTOPONTO      reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    ID              reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    CROSSINLINE     reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    IMPORT          reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    INIT            reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    NOINLINE        reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    OUT             reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    VARARG          reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    WHERE           reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    OBJECT          reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    CONST           reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    CONSTRUCTOR     reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    EOF             reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    FALSE           reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    FUNCTION        reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    NULL            reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    NULLABLE        reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    NUMBER          reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    OPERATOR        reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    SMARTCAST       reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    THIS            reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    TRUE            reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    VAL             reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    VAR             reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    WHEN            reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    LONG            reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    ARRAY           reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    ELVIS           reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    IN              reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    NOT_IN          reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    IS              reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    NOT_IS          reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    MAIOR           reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    MENORIGUAL      reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    MAIORIGUAL      reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    DIFERENTE       reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    IDENTIDADE      reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    IGUALDADE       reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    SEMIDENTIDADE   reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    AND             reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    OR              reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    COMMA           reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    RPAREN          reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    FUN             reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    FOR             reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    WHILE           reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    DO              reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    LITERAL_STRING  reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    IF              reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    RETURN          reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    RETURN_AT       reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    CONTINUE        reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    CONTINUE_AT     reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    BREAK           reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    BREAK_AT        reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    NOT             reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    SUSPEND         reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    LCHAVE          reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    MAISIGUAL       reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    MENOSIGUAL      reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    MULTIGUAL       reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    DIVIGUAL        reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    MODIGUAL        reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    RCCT            reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    PV              reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    ELSE            reduce using rule 118 (asExpression -> prefixUnaryExpression .)
    AS              shift and go to state 173

  ! AS              [ reduce using rule 118 (asExpression -> prefixUnaryExpression .) ]

    asOperator                     shift and go to state 172

state 135

    (121) prefixUnaryExpression -> postfixUnaryExpression .

    INCREMENTO      reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    DECREMENTO      reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    MENOR           reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    LCCT            reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    COLONCOLON      reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    PONTO           reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    LPAREN          reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    RCHAVE          reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    AS              reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    MULT            reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    DIVIDE          reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    MOD             reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    PLUS            reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    MINUS           reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    PONTOPONTO      reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    ID              reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    CROSSINLINE     reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    IMPORT          reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    INIT            reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOINLINE        reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    OUT             reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    VARARG          reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    WHERE           reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    OBJECT          reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONST           reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONSTRUCTOR     reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    EOF             reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    FALSE           reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    FUNCTION        reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    NULL            reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    NULLABLE        reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    NUMBER          reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    OPERATOR        reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    SMARTCAST       reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    THIS            reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    TRUE            reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    VAL             reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    VAR             reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    WHEN            reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    LONG            reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    ARRAY           reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    ELVIS           reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    IN              reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOT_IN          reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    IS              reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOT_IS          reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    MAIOR           reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    MENORIGUAL      reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    MAIORIGUAL      reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    DIFERENTE       reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    IDENTIDADE      reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    IGUALDADE       reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    SEMIDENTIDADE   reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    AND             reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    OR              reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    COMMA           reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    RPAREN          reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    RCCT            reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    FUN             reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    FOR             reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    WHILE           reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    DO              reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    LITERAL_STRING  reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    IF              reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    RETURN          reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    RETURN_AT       reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONTINUE        reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONTINUE_AT     reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    BREAK           reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    BREAK_AT        reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOT             reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    SUSPEND         reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    LCHAVE          reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    MAISIGUAL       reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    MENOSIGUAL      reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    MULTIGUAL       reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    DIVIGUAL        reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    MODIGUAL        reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    PV              reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)
    ELSE            reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .)


state 136

    (178) parenthesizedExpression -> LPAREN . expression RPAREN
    (12) expression -> . disjunction
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 86
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 136
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 177
    disjunction                    shift and go to state 69
    conjunction                    shift and go to state 79
    equality                       shift and go to state 84
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 107
    elvisExpression                shift and go to state 114
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    simpleIdentifier               shift and go to state 133
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120
    prefixUnaryExpression          shift and go to state 134
    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 135
    unaryPrefix                    shift and go to state 92
    primaryExpression              shift and go to state 82
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    typeModifier                   shift and go to state 115

state 137

    (207) anonymousFunction -> FUN . optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (201) optionalTypePonto -> . type PONTO
    (202) optionalTypePonto -> .
    (40) type -> . optionalTypeModifiers optype
    (41) optionalTypeModifiers -> . typeModifiers
    (42) optionalTypeModifiers -> .
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (48) typeModifier -> . SUSPEND

  ! reduce/reduce conflict for LPAREN resolved using rule 42 (optionalTypeModifiers -> .)
  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 42 (optionalTypeModifiers -> .)
    ID              reduce using rule 42 (optionalTypeModifiers -> .)
    CROSSINLINE     reduce using rule 42 (optionalTypeModifiers -> .)
    IMPORT          reduce using rule 42 (optionalTypeModifiers -> .)
    INIT            reduce using rule 42 (optionalTypeModifiers -> .)
    NOINLINE        reduce using rule 42 (optionalTypeModifiers -> .)
    OUT             reduce using rule 42 (optionalTypeModifiers -> .)
    VARARG          reduce using rule 42 (optionalTypeModifiers -> .)
    WHERE           reduce using rule 42 (optionalTypeModifiers -> .)
    OBJECT          reduce using rule 42 (optionalTypeModifiers -> .)
    CONST           reduce using rule 42 (optionalTypeModifiers -> .)
    CONSTRUCTOR     reduce using rule 42 (optionalTypeModifiers -> .)
    EOF             reduce using rule 42 (optionalTypeModifiers -> .)
    FALSE           reduce using rule 42 (optionalTypeModifiers -> .)
    FUNCTION        reduce using rule 42 (optionalTypeModifiers -> .)
    NULL            reduce using rule 42 (optionalTypeModifiers -> .)
    NULLABLE        reduce using rule 42 (optionalTypeModifiers -> .)
    NUMBER          reduce using rule 42 (optionalTypeModifiers -> .)
    OPERATOR        reduce using rule 42 (optionalTypeModifiers -> .)
    SMARTCAST       reduce using rule 42 (optionalTypeModifiers -> .)
    THIS            reduce using rule 42 (optionalTypeModifiers -> .)
    TRUE            reduce using rule 42 (optionalTypeModifiers -> .)
    VAL             reduce using rule 42 (optionalTypeModifiers -> .)
    VAR             reduce using rule 42 (optionalTypeModifiers -> .)
    WHEN            reduce using rule 42 (optionalTypeModifiers -> .)
    LONG            reduce using rule 42 (optionalTypeModifiers -> .)
    ARRAY           reduce using rule 42 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! LPAREN          [ reduce using rule 202 (optionalTypePonto -> .) ]
  ! SUSPEND         [ reduce using rule 42 (optionalTypeModifiers -> .) ]

    optionalTypePonto              shift and go to state 150
    type                           shift and go to state 151
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 138

    (39) parameter -> simpleIdentifier DOISP type .

    ATRIBUICAO      reduce using rule 39 (parameter -> simpleIdentifier DOISP type .)
    COMMA           reduce using rule 39 (parameter -> simpleIdentifier DOISP type .)
    RPAREN          reduce using rule 39 (parameter -> simpleIdentifier DOISP type .)


state 139

    (79) block -> LCHAVE statements RCHAVE .

    FUN             reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    $end            reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    FOR             reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    WHILE           reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    DO              reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    VAR             reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    VAL             reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    ID              reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    CROSSINLINE     reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    IMPORT          reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    INIT            reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    NOINLINE        reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    OUT             reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    VARARG          reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    WHERE           reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    OBJECT          reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    CONST           reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    CONSTRUCTOR     reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    EOF             reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    FALSE           reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    FUNCTION        reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    NULL            reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    NULLABLE        reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    NUMBER          reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    OPERATOR        reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    SMARTCAST       reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    THIS            reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    TRUE            reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    WHEN            reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    LONG            reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    ARRAY           reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    LPAREN          reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    LITERAL_STRING  reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    LCCT            reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    IF              reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    RETURN          reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    RETURN_AT       reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    CONTINUE        reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    CONTINUE_AT     reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    BREAK           reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    BREAK_AT        reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    RCHAVE          reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    INCREMENTO      reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    DECREMENTO      reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    MINUS           reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    PLUS            reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    NOT             reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    SUSPEND         reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    COLONCOLON      reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    LCHAVE          reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    MENOR           reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    PONTO           reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    AS              reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    MAISIGUAL       reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    MENOSIGUAL      reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    MULTIGUAL       reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    DIVIGUAL        reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    MODIGUAL        reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    MULT            reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    DIVIDE          reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    MOD             reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    PONTOPONTO      reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    ELVIS           reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    IN              reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    NOT_IN          reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    IS              reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    NOT_IS          reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    MAIOR           reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    MENORIGUAL      reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    MAIORIGUAL      reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    DIFERENTE       reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    IDENTIDADE      reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    IGUALDADE       reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    SEMIDENTIDADE   reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    AND             reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    OR              reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    COMMA           reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    RPAREN          reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    RCCT            reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    PV              reduce using rule 79 (block -> LCHAVE statements RCHAVE .)
    ELSE            reduce using rule 79 (block -> LCHAVE statements RCHAVE .)


state 140

    (193) lambdaLiteral -> RCHAVE optionsLambdaLiteral . LCHAVE

    LCHAVE          shift and go to state 242


state 141

    (194) optionsLambdaLiteral -> statements .

    LCHAVE          reduce using rule 194 (optionsLambdaLiteral -> statements .)


state 142

    (195) optionsLambdaLiteral -> lambdaParameters . SETA statements

    SETA            shift and go to state 243


state 143

    (196) optionsLambdaLiteral -> SETA . statements
    (70) statements -> . statement
    (71) statements -> . statement statements
    (72) statement -> . functionDeclaration
    (73) statement -> . assignment
    (74) statement -> . loopStatement
    (75) statement -> . expression
    (76) statement -> . propertyDeclaration
    (7) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (90) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (91) assignment -> . assignableExpression assignmentAndOperator expression
    (80) loopStatement -> . forStatement
    (81) loopStatement -> . whileStatement
    (82) loopStatement -> . doWhileStatement
    (12) expression -> . disjunction
    (17) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (136) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (137) directlyAssignableExpression -> . simpleIdentifier
    (138) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (140) assignableExpression -> . prefixUnaryExpression
    (141) assignableExpression -> . parenthesizedAssignableExpression
    (85) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody
    (86) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (87) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (88) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (89) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (13) varOrVal -> . VAR
    (14) varOrVal -> . VAL
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (139) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (142) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (69) receiverType -> . typeModifier parenthesizedType
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (48) typeModifier -> . SUSPEND
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type

    FUN             shift and go to state 62
    FOR             shift and go to state 75
    WHILE           shift and go to state 77
    DO              shift and go to state 78
    VAR             shift and go to state 80
    VAL             shift and go to state 81
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 76
    LITERAL_STRING  shift and go to state 86
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    SUSPEND         shift and go to state 48

    statements                     shift and go to state 244
    statement                      shift and go to state 56
    functionDeclaration            shift and go to state 57
    assignment                     shift and go to state 58
    loopStatement                  shift and go to state 59
    expression                     shift and go to state 60
    propertyDeclaration            shift and go to state 61
    simpleIdentifier               shift and go to state 63
    directlyAssignableExpression   shift and go to state 64
    assignableExpression           shift and go to state 65
    forStatement                   shift and go to state 66
    whileStatement                 shift and go to state 67
    doWhileStatement               shift and go to state 68
    disjunction                    shift and go to state 69
    varOrVal                       shift and go to state 70
    postfixUnaryExpression         shift and go to state 71
    parenthesizedDirectlyAssignableExpression shift and go to state 72
    prefixUnaryExpression          shift and go to state 73
    parenthesizedAssignableExpression shift and go to state 74
    conjunction                    shift and go to state 79
    primaryExpression              shift and go to state 82
    prefixUnaryExpressionRecursive shift and go to state 83
    equality                       shift and go to state 84
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    unaryPrefix                    shift and go to state 92
    comparison                     shift and go to state 93
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    infixOperation                 shift and go to state 107
    receiverType                   shift and go to state 108
    elvisExpression                shift and go to state 114
    typeModifier                   shift and go to state 115
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120

state 144

    (197) lambdaParameters -> lambdaParameter .
    (198) lambdaParameters -> lambdaParameter . COMMA lambdaParameters

    SETA            reduce using rule 197 (lambdaParameters -> lambdaParameter .)
    COMMA           shift and go to state 245


state 145

    (199) lambdaParameter -> variableDeclaration .

    COMMA           reduce using rule 199 (lambdaParameter -> variableDeclaration .)
    SETA            reduce using rule 199 (lambdaParameter -> variableDeclaration .)


state 146

    (200) lambdaParameter -> multiVariableDeclaration . optionalType
    (3) optionalType -> . DOISP type
    (4) optionalType -> .

    DOISP           shift and go to state 35
    COMMA           reduce using rule 4 (optionalType -> .)
    SETA            reduce using rule 4 (optionalType -> .)

    optionalType                   shift and go to state 246

state 147

    (33) variableDeclaration -> simpleIdentifier . DOISP type
    (34) variableDeclaration -> simpleIdentifier .
    (137) directlyAssignableExpression -> simpleIdentifier .
    (171) primaryExpression -> simpleIdentifier .
    (126) label -> simpleIdentifier .

  ! reduce/reduce conflict for INCREMENTO resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NOT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OBJECT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONST resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for EOF resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FALSE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NULL resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NUMBER resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for THIS resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for TRUE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VAL resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VAR resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHEN resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LONG resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ARRAY resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IF resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FUN resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 126 (label -> simpleIdentifier .)
    DOISP           shift and go to state 247
    COMMA           reduce using rule 34 (variableDeclaration -> simpleIdentifier .)
    SETA            reduce using rule 34 (variableDeclaration -> simpleIdentifier .)
    ATRIBUICAO      reduce using rule 137 (directlyAssignableExpression -> simpleIdentifier .)
    MENOR           reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    PONTO           reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    AS              reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MAISIGUAL       reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MENOSIGUAL      reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MODIGUAL        reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MULT            reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    DIVIDE          reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MOD             reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    ELVIS           reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    IN              reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    NOT_IN          reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    IS              reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    NOT_IS          reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MAIOR           reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    DIFERENTE       reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    IGUALDADE       reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    AND             reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    OR              reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    FOR             reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    WHILE           reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    DO              reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    LCHAVE          reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    INCREMENTO      reduce using rule 126 (label -> simpleIdentifier .)
    DECREMENTO      reduce using rule 126 (label -> simpleIdentifier .)
    MINUS           reduce using rule 126 (label -> simpleIdentifier .)
    PLUS            reduce using rule 126 (label -> simpleIdentifier .)
    NOT             reduce using rule 126 (label -> simpleIdentifier .)
    ID              reduce using rule 126 (label -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 126 (label -> simpleIdentifier .)
    IMPORT          reduce using rule 126 (label -> simpleIdentifier .)
    INIT            reduce using rule 126 (label -> simpleIdentifier .)
    NOINLINE        reduce using rule 126 (label -> simpleIdentifier .)
    OUT             reduce using rule 126 (label -> simpleIdentifier .)
    VARARG          reduce using rule 126 (label -> simpleIdentifier .)
    WHERE           reduce using rule 126 (label -> simpleIdentifier .)
    OBJECT          reduce using rule 126 (label -> simpleIdentifier .)
    CONST           reduce using rule 126 (label -> simpleIdentifier .)
    CONSTRUCTOR     reduce using rule 126 (label -> simpleIdentifier .)
    EOF             reduce using rule 126 (label -> simpleIdentifier .)
    FALSE           reduce using rule 126 (label -> simpleIdentifier .)
    FUNCTION        reduce using rule 126 (label -> simpleIdentifier .)
    NULL            reduce using rule 126 (label -> simpleIdentifier .)
    NULLABLE        reduce using rule 126 (label -> simpleIdentifier .)
    NUMBER          reduce using rule 126 (label -> simpleIdentifier .)
    OPERATOR        reduce using rule 126 (label -> simpleIdentifier .)
    SMARTCAST       reduce using rule 126 (label -> simpleIdentifier .)
    THIS            reduce using rule 126 (label -> simpleIdentifier .)
    TRUE            reduce using rule 126 (label -> simpleIdentifier .)
    VAL             reduce using rule 126 (label -> simpleIdentifier .)
    VAR             reduce using rule 126 (label -> simpleIdentifier .)
    WHEN            reduce using rule 126 (label -> simpleIdentifier .)
    LONG            reduce using rule 126 (label -> simpleIdentifier .)
    ARRAY           reduce using rule 126 (label -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 126 (label -> simpleIdentifier .)
    LPAREN          reduce using rule 126 (label -> simpleIdentifier .)
    LCCT            reduce using rule 126 (label -> simpleIdentifier .)
    IF              reduce using rule 126 (label -> simpleIdentifier .)
    RETURN          reduce using rule 126 (label -> simpleIdentifier .)
    RETURN_AT       reduce using rule 126 (label -> simpleIdentifier .)
    CONTINUE        reduce using rule 126 (label -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 126 (label -> simpleIdentifier .)
    BREAK           reduce using rule 126 (label -> simpleIdentifier .)
    BREAK_AT        reduce using rule 126 (label -> simpleIdentifier .)
    RCHAVE          reduce using rule 126 (label -> simpleIdentifier .)
    FUN             reduce using rule 126 (label -> simpleIdentifier .)
    SUSPEND         reduce using rule 126 (label -> simpleIdentifier .)
    COLONCOLON      reduce using rule 126 (label -> simpleIdentifier .)

  ! INCREMENTO      [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! RCHAVE          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! PLUS            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! OBJECT          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! CONST           [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! CONSTRUCTOR     [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! EOF             [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! FALSE           [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! FUNCTION        [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! NULL            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! NULLABLE        [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! NUMBER          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! OPERATOR        [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! SMARTCAST       [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! THIS            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! TRUE            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! VAL             [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! VAR             [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! WHEN            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! LONG            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! ARRAY           [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! FUN             [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! LITERAL_STRING  [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! IF              [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! RETURN          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! RETURN_AT       [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! CONTINUE        [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! CONTINUE_AT     [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! BREAK           [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! BREAK_AT        [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! NOT             [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! SUSPEND         [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]


state 148

    (35) multiVariableDeclaration -> LPAREN . multiVariableDeclarationRecursive RPAREN
    (36) multiVariableDeclaration -> LPAREN . RPAREN
    (139) parenthesizedDirectlyAssignableExpression -> LPAREN . directlyAssignableExpression RPAREN
    (142) parenthesizedAssignableExpression -> LPAREN . assignableExpression RPAREN
    (178) parenthesizedExpression -> LPAREN . expression RPAREN
    (37) multiVariableDeclarationRecursive -> . variableDeclaration
    (38) multiVariableDeclarationRecursive -> . variableDeclaration COMMA multiVariableDeclarationRecursive
    (136) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (137) directlyAssignableExpression -> . simpleIdentifier
    (138) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (140) assignableExpression -> . prefixUnaryExpression
    (141) assignableExpression -> . parenthesizedAssignableExpression
    (12) expression -> . disjunction
    (33) variableDeclaration -> . simpleIdentifier DOISP type
    (34) variableDeclaration -> . simpleIdentifier
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (139) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (142) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (69) receiverType -> . typeModifier parenthesizedType
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (48) typeModifier -> . SUSPEND
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type

    RPAREN          shift and go to state 249
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 76
    LITERAL_STRING  shift and go to state 86
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    SUSPEND         shift and go to state 48

    multiVariableDeclarationRecursive shift and go to state 248
    directlyAssignableExpression   shift and go to state 175
    assignableExpression           shift and go to state 176
    expression                     shift and go to state 177
    variableDeclaration            shift and go to state 250
    postfixUnaryExpression         shift and go to state 71
    simpleIdentifier               shift and go to state 251
    parenthesizedDirectlyAssignableExpression shift and go to state 72
    prefixUnaryExpression          shift and go to state 73
    parenthesizedAssignableExpression shift and go to state 74
    disjunction                    shift and go to state 69
    primaryExpression              shift and go to state 82
    prefixUnaryExpressionRecursive shift and go to state 83
    conjunction                    shift and go to state 79
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    unaryPrefix                    shift and go to state 92
    equality                       shift and go to state 84
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    comparison                     shift and go to state 93
    receiverType                   shift and go to state 108
    infixOperation                 shift and go to state 107
    typeModifier                   shift and go to state 115
    elvisExpression                shift and go to state 114
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120

state 149

    (71) statements -> statement statements .

    RCHAVE          reduce using rule 71 (statements -> statement statements .)
    LCHAVE          reduce using rule 71 (statements -> statement statements .)


state 150

    (207) anonymousFunction -> FUN optionalTypePonto . parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (183) parametersWithOptionalType -> . LPAREN parametersWithOptionalTypeRecursive RPAREN
    (184) parametersWithOptionalType -> . LPAREN RPAREN

    LPAREN          shift and go to state 253

    parametersWithOptionalType     shift and go to state 252

state 151

    (201) optionalTypePonto -> type . PONTO

    PONTO           shift and go to state 254


state 152

    (90) assignment -> directlyAssignableExpression ATRIBUICAO . expression
    (12) expression -> . disjunction
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 86
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 136
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 255
    disjunction                    shift and go to state 69
    conjunction                    shift and go to state 79
    equality                       shift and go to state 84
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 107
    elvisExpression                shift and go to state 114
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    simpleIdentifier               shift and go to state 133
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120
    prefixUnaryExpression          shift and go to state 134
    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 135
    unaryPrefix                    shift and go to state 92
    primaryExpression              shift and go to state 82
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    typeModifier                   shift and go to state 115

state 153

    (91) assignment -> assignableExpression assignmentAndOperator . expression
    (12) expression -> . disjunction
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 86
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 136
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 256
    disjunction                    shift and go to state 69
    conjunction                    shift and go to state 79
    equality                       shift and go to state 84
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 107
    elvisExpression                shift and go to state 114
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    simpleIdentifier               shift and go to state 133
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120
    prefixUnaryExpression          shift and go to state 134
    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 135
    unaryPrefix                    shift and go to state 92
    primaryExpression              shift and go to state 82
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    typeModifier                   shift and go to state 115

state 154

    (229) assignmentAndOperator -> MAISIGUAL .

    LITERAL_STRING  reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    INCREMENTO      reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    DECREMENTO      reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    MINUS           reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    PLUS            reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    NOT             reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    LPAREN          reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    ID              reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    CROSSINLINE     reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    IMPORT          reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    INIT            reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    NOINLINE        reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    OUT             reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    VARARG          reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    WHERE           reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    OBJECT          reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    CONST           reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    CONSTRUCTOR     reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    EOF             reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    FALSE           reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    FUNCTION        reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    NULL            reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    NULLABLE        reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    NUMBER          reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    OPERATOR        reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    SMARTCAST       reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    THIS            reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    TRUE            reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    VAL             reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    VAR             reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    WHEN            reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    LONG            reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    ARRAY           reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    LCCT            reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    IF              reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    RETURN          reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    RETURN_AT       reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    CONTINUE        reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    CONTINUE_AT     reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    BREAK           reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    BREAK_AT        reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    RCHAVE          reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    FUN             reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    SUSPEND         reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)
    COLONCOLON      reduce using rule 229 (assignmentAndOperator -> MAISIGUAL .)


state 155

    (230) assignmentAndOperator -> MENOSIGUAL .

    LITERAL_STRING  reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    INCREMENTO      reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    DECREMENTO      reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    MINUS           reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    PLUS            reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    NOT             reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    LPAREN          reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    ID              reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    CROSSINLINE     reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    IMPORT          reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    INIT            reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    NOINLINE        reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    OUT             reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    VARARG          reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    WHERE           reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    OBJECT          reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    CONST           reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    CONSTRUCTOR     reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    EOF             reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    FALSE           reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    FUNCTION        reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    NULL            reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    NULLABLE        reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    NUMBER          reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    OPERATOR        reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    SMARTCAST       reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    THIS            reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    TRUE            reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    VAL             reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    VAR             reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    WHEN            reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    LONG            reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    ARRAY           reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    LCCT            reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    IF              reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    RETURN          reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    RETURN_AT       reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    CONTINUE        reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    CONTINUE_AT     reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    BREAK           reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    BREAK_AT        reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    RCHAVE          reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    FUN             reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    SUSPEND         reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)
    COLONCOLON      reduce using rule 230 (assignmentAndOperator -> MENOSIGUAL .)


state 156

    (231) assignmentAndOperator -> MULTIGUAL .

    LITERAL_STRING  reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    INCREMENTO      reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    DECREMENTO      reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    MINUS           reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    PLUS            reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    NOT             reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    LPAREN          reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    ID              reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    CROSSINLINE     reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    IMPORT          reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    INIT            reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    NOINLINE        reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    OUT             reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    VARARG          reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    WHERE           reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    OBJECT          reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    CONST           reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    CONSTRUCTOR     reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    EOF             reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    FALSE           reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    FUNCTION        reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    NULL            reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    NULLABLE        reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    NUMBER          reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    OPERATOR        reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    SMARTCAST       reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    THIS            reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    TRUE            reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    VAL             reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    VAR             reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    WHEN            reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    LONG            reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    ARRAY           reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    LCCT            reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    IF              reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    RETURN          reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    RETURN_AT       reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    CONTINUE        reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    CONTINUE_AT     reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    BREAK           reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    BREAK_AT        reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    RCHAVE          reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    FUN             reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    SUSPEND         reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)
    COLONCOLON      reduce using rule 231 (assignmentAndOperator -> MULTIGUAL .)


state 157

    (232) assignmentAndOperator -> DIVIGUAL .

    LITERAL_STRING  reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    INCREMENTO      reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    DECREMENTO      reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    MINUS           reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    PLUS            reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    NOT             reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    LPAREN          reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    ID              reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    CROSSINLINE     reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    IMPORT          reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    INIT            reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    NOINLINE        reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    OUT             reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    VARARG          reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    WHERE           reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    OBJECT          reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    CONST           reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    CONSTRUCTOR     reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    EOF             reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    FALSE           reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    FUNCTION        reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    NULL            reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    NULLABLE        reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    NUMBER          reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    OPERATOR        reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    SMARTCAST       reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    THIS            reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    TRUE            reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    VAL             reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    VAR             reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    WHEN            reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    LONG            reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    ARRAY           reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    LCCT            reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    IF              reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    RETURN          reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    RETURN_AT       reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    CONTINUE        reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    CONTINUE_AT     reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    BREAK           reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    BREAK_AT        reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    RCHAVE          reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    FUN             reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    SUSPEND         reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)
    COLONCOLON      reduce using rule 232 (assignmentAndOperator -> DIVIGUAL .)


state 158

    (233) assignmentAndOperator -> MODIGUAL .

    LITERAL_STRING  reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    INCREMENTO      reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    DECREMENTO      reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    MINUS           reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    PLUS            reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    NOT             reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    LPAREN          reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    ID              reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    CROSSINLINE     reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    IMPORT          reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    INIT            reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    NOINLINE        reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    OUT             reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    VARARG          reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    WHERE           reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    OBJECT          reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    CONST           reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    CONSTRUCTOR     reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    EOF             reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    FALSE           reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    FUNCTION        reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    NULL            reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    NULLABLE        reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    NUMBER          reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    OPERATOR        reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    SMARTCAST       reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    THIS            reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    TRUE            reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    VAL             reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    VAR             reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    WHEN            reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    LONG            reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    ARRAY           reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    LCCT            reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    IF              reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    RETURN          reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    RETURN_AT       reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    CONTINUE        reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    CONTINUE_AT     reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    BREAK           reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    BREAK_AT        reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    RCHAVE          reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    FUN             reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    SUSPEND         reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)
    COLONCOLON      reduce using rule 233 (assignmentAndOperator -> MODIGUAL .)


state 159

    (17) propertyDeclaration -> varOrVal optionalTypeParameters . genericVariableDeclaration ATRIBUICAO expression optionalPv
    (10) genericVariableDeclaration -> . multiVariableDeclaration
    (11) genericVariableDeclaration -> . variableDeclaration
    (35) multiVariableDeclaration -> . LPAREN multiVariableDeclarationRecursive RPAREN
    (36) multiVariableDeclaration -> . LPAREN RPAREN
    (33) variableDeclaration -> . simpleIdentifier DOISP type
    (34) variableDeclaration -> . simpleIdentifier
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY

    LPAREN          shift and go to state 260
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

    genericVariableDeclaration     shift and go to state 257
    multiVariableDeclaration       shift and go to state 258
    variableDeclaration            shift and go to state 259
    simpleIdentifier               shift and go to state 261

state 160

    (15) optionalTypeParameters -> typeParameters .

    LPAREN          reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    ID              reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    CROSSINLINE     reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    IMPORT          reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    INIT            reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    NOINLINE        reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    OUT             reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    VARARG          reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    WHERE           reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    OBJECT          reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    CONST           reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    CONSTRUCTOR     reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    EOF             reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    FALSE           reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    FUNCTION        reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    NULL            reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    NULLABLE        reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    NUMBER          reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    OPERATOR        reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    SMARTCAST       reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    THIS            reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    TRUE            reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    VAL             reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    VAR             reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    WHEN            reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    LONG            reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    ARRAY           reduce using rule 15 (optionalTypeParameters -> typeParameters .)


state 161

    (18) typeParameters -> MENOR . typeParameter typeParametersRecursive optionalCOMMA MAIOR
    (23) typeParameter -> . simpleIdentifier
    (24) typeParameter -> . simpleIdentifier DOISP type
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

    typeParameter                  shift and go to state 262
    simpleIdentifier               shift and go to state 263

state 162

    (136) directlyAssignableExpression -> postfixUnaryExpression assignableSuffix .

    ATRIBUICAO      reduce using rule 136 (directlyAssignableExpression -> postfixUnaryExpression assignableSuffix .)
    RPAREN          reduce using rule 136 (directlyAssignableExpression -> postfixUnaryExpression assignableSuffix .)


state 163

    (143) assignableSuffix -> typeArguments .

    ATRIBUICAO      reduce using rule 143 (assignableSuffix -> typeArguments .)
    RPAREN          reduce using rule 143 (assignableSuffix -> typeArguments .)


state 164

    (144) assignableSuffix -> indexingSuffix .

    ATRIBUICAO      reduce using rule 144 (assignableSuffix -> indexingSuffix .)
    RPAREN          reduce using rule 144 (assignableSuffix -> indexingSuffix .)


state 165

    (145) assignableSuffix -> navigationSuffix .

    ATRIBUICAO      reduce using rule 145 (assignableSuffix -> navigationSuffix .)
    RPAREN          reduce using rule 145 (assignableSuffix -> navigationSuffix .)


state 166

    (159) typeArguments -> MENOR . typeArgumentsRecursive MAIOR
    (160) typeArguments -> MENOR . MAIOR
    (161) typeArgumentsRecursive -> . typeProjection
    (162) typeArgumentsRecursive -> . typeProjection COMMA typeArgumentsRecursive
    (55) typeProjection -> . typeProjectionModifiers type
    (56) typeProjection -> . type
    (57) typeProjectionModifiers -> . typeProjection
    (58) typeProjectionModifiers -> . typeProjectionModifier typeProjectionModifiers
    (40) type -> . optionalTypeModifiers optype
    (49) typeProjectionModifier -> . varianceModifier
    (41) optionalTypeModifiers -> . typeModifiers
    (42) optionalTypeModifiers -> .
    (50) varianceModifier -> . IN
    (51) varianceModifier -> . OUT
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (48) typeModifier -> . SUSPEND

  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
    MAIOR           shift and go to state 265
    LPAREN          reduce using rule 42 (optionalTypeModifiers -> .)
    ID              reduce using rule 42 (optionalTypeModifiers -> .)
    CROSSINLINE     reduce using rule 42 (optionalTypeModifiers -> .)
    IMPORT          reduce using rule 42 (optionalTypeModifiers -> .)
    INIT            reduce using rule 42 (optionalTypeModifiers -> .)
    NOINLINE        reduce using rule 42 (optionalTypeModifiers -> .)
    VARARG          reduce using rule 42 (optionalTypeModifiers -> .)
    WHERE           reduce using rule 42 (optionalTypeModifiers -> .)
    OBJECT          reduce using rule 42 (optionalTypeModifiers -> .)
    CONST           reduce using rule 42 (optionalTypeModifiers -> .)
    CONSTRUCTOR     reduce using rule 42 (optionalTypeModifiers -> .)
    EOF             reduce using rule 42 (optionalTypeModifiers -> .)
    FALSE           reduce using rule 42 (optionalTypeModifiers -> .)
    FUNCTION        reduce using rule 42 (optionalTypeModifiers -> .)
    NULL            reduce using rule 42 (optionalTypeModifiers -> .)
    NULLABLE        reduce using rule 42 (optionalTypeModifiers -> .)
    NUMBER          reduce using rule 42 (optionalTypeModifiers -> .)
    OPERATOR        reduce using rule 42 (optionalTypeModifiers -> .)
    SMARTCAST       reduce using rule 42 (optionalTypeModifiers -> .)
    THIS            reduce using rule 42 (optionalTypeModifiers -> .)
    TRUE            reduce using rule 42 (optionalTypeModifiers -> .)
    VAL             reduce using rule 42 (optionalTypeModifiers -> .)
    VAR             reduce using rule 42 (optionalTypeModifiers -> .)
    WHEN            reduce using rule 42 (optionalTypeModifiers -> .)
    LONG            reduce using rule 42 (optionalTypeModifiers -> .)
    ARRAY           reduce using rule 42 (optionalTypeModifiers -> .)
    IN              shift and go to state 271
    OUT             shift and go to state 272
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! OUT             [ reduce using rule 42 (optionalTypeModifiers -> .) ]

    typeArgumentsRecursive         shift and go to state 264
    typeProjection                 shift and go to state 266
    typeProjectionModifiers        shift and go to state 267
    type                           shift and go to state 268
    typeProjectionModifier         shift and go to state 269
    optionalTypeModifiers          shift and go to state 45
    varianceModifier               shift and go to state 270
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 167

    (146) indexingSuffix -> LCCT . indexingSuffixRecursive RCCT
    (147) indexingSuffix -> LCCT . RCCT
    (148) indexingSuffixRecursive -> . expression
    (149) indexingSuffixRecursive -> . expression COMMA indexingSuffixRecursive
    (12) expression -> . disjunction
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    RCCT            shift and go to state 274
    LITERAL_STRING  shift and go to state 86
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 136
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    SUSPEND         shift and go to state 48

    indexingSuffixRecursive        shift and go to state 273
    expression                     shift and go to state 275
    disjunction                    shift and go to state 69
    conjunction                    shift and go to state 79
    equality                       shift and go to state 84
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 107
    elvisExpression                shift and go to state 114
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    simpleIdentifier               shift and go to state 133
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120
    prefixUnaryExpression          shift and go to state 134
    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 135
    unaryPrefix                    shift and go to state 92
    primaryExpression              shift and go to state 82
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    typeModifier                   shift and go to state 115

state 168

    (150) navigationSuffix -> memberAccessOperator . simpleIdentifier CLASS
    (151) navigationSuffix -> memberAccessOperator . parenthesizedExpression CLASS
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (178) parenthesizedExpression -> . LPAREN expression RPAREN

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 136

    simpleIdentifier               shift and go to state 276
    parenthesizedExpression        shift and go to state 277

state 169

    (260) memberAccessOperator -> safeNav .

    ID              reduce using rule 260 (memberAccessOperator -> safeNav .)
    CROSSINLINE     reduce using rule 260 (memberAccessOperator -> safeNav .)
    IMPORT          reduce using rule 260 (memberAccessOperator -> safeNav .)
    INIT            reduce using rule 260 (memberAccessOperator -> safeNav .)
    NOINLINE        reduce using rule 260 (memberAccessOperator -> safeNav .)
    OUT             reduce using rule 260 (memberAccessOperator -> safeNav .)
    VARARG          reduce using rule 260 (memberAccessOperator -> safeNav .)
    WHERE           reduce using rule 260 (memberAccessOperator -> safeNav .)
    OBJECT          reduce using rule 260 (memberAccessOperator -> safeNav .)
    CONST           reduce using rule 260 (memberAccessOperator -> safeNav .)
    CONSTRUCTOR     reduce using rule 260 (memberAccessOperator -> safeNav .)
    EOF             reduce using rule 260 (memberAccessOperator -> safeNav .)
    FALSE           reduce using rule 260 (memberAccessOperator -> safeNav .)
    FUNCTION        reduce using rule 260 (memberAccessOperator -> safeNav .)
    NULL            reduce using rule 260 (memberAccessOperator -> safeNav .)
    NULLABLE        reduce using rule 260 (memberAccessOperator -> safeNav .)
    NUMBER          reduce using rule 260 (memberAccessOperator -> safeNav .)
    OPERATOR        reduce using rule 260 (memberAccessOperator -> safeNav .)
    SMARTCAST       reduce using rule 260 (memberAccessOperator -> safeNav .)
    THIS            reduce using rule 260 (memberAccessOperator -> safeNav .)
    TRUE            reduce using rule 260 (memberAccessOperator -> safeNav .)
    VAL             reduce using rule 260 (memberAccessOperator -> safeNav .)
    VAR             reduce using rule 260 (memberAccessOperator -> safeNav .)
    WHEN            reduce using rule 260 (memberAccessOperator -> safeNav .)
    LONG            reduce using rule 260 (memberAccessOperator -> safeNav .)
    ARRAY           reduce using rule 260 (memberAccessOperator -> safeNav .)
    LPAREN          reduce using rule 260 (memberAccessOperator -> safeNav .)


state 170

    (261) memberAccessOperator -> COLONCOLON .

    ID              reduce using rule 261 (memberAccessOperator -> COLONCOLON .)
    CROSSINLINE     reduce using rule 261 (memberAccessOperator -> COLONCOLON .)
    IMPORT          reduce using rule 261 (memberAccessOperator -> COLONCOLON .)
    INIT            reduce using rule 261 (memberAccessOperator -> COLONCOLON .)
    NOINLINE        reduce using rule 261 (memberAccessOperator -> COLONCOLON .)
    OUT             reduce using rule 261 (memberAccessOperator -> COLONCOLON .)
    VARARG          reduce using rule 261 (memberAccessOperator -> COLONCOLON .)
    WHERE           reduce using rule 261 (memberAccessOperator -> COLONCOLON .)
    OBJECT          reduce using rule 261 (memberAccessOperator -> COLONCOLON .)
    CONST           reduce using rule 261 (memberAccessOperator -> COLONCOLON .)
    CONSTRUCTOR     reduce using rule 261 (memberAccessOperator -> COLONCOLON .)
    EOF             reduce using rule 261 (memberAccessOperator -> COLONCOLON .)
    FALSE           reduce using rule 261 (memberAccessOperator -> COLONCOLON .)
    FUNCTION        reduce using rule 261 (memberAccessOperator -> COLONCOLON .)
    NULL            reduce using rule 261 (memberAccessOperator -> COLONCOLON .)
    NULLABLE        reduce using rule 261 (memberAccessOperator -> COLONCOLON .)
    NUMBER          reduce using rule 261 (memberAccessOperator -> COLONCOLON .)
    OPERATOR        reduce using rule 261 (memberAccessOperator -> COLONCOLON .)
    SMARTCAST       reduce using rule 261 (memberAccessOperator -> COLONCOLON .)
    THIS            reduce using rule 261 (memberAccessOperator -> COLONCOLON .)
    TRUE            reduce using rule 261 (memberAccessOperator -> COLONCOLON .)
    VAL             reduce using rule 261 (memberAccessOperator -> COLONCOLON .)
    VAR             reduce using rule 261 (memberAccessOperator -> COLONCOLON .)
    WHEN            reduce using rule 261 (memberAccessOperator -> COLONCOLON .)
    LONG            reduce using rule 261 (memberAccessOperator -> COLONCOLON .)
    ARRAY           reduce using rule 261 (memberAccessOperator -> COLONCOLON .)
    LPAREN          reduce using rule 261 (memberAccessOperator -> COLONCOLON .)


state 171

    (262) safeNav -> PONTO .

    ID              reduce using rule 262 (safeNav -> PONTO .)
    CROSSINLINE     reduce using rule 262 (safeNav -> PONTO .)
    IMPORT          reduce using rule 262 (safeNav -> PONTO .)
    INIT            reduce using rule 262 (safeNav -> PONTO .)
    NOINLINE        reduce using rule 262 (safeNav -> PONTO .)
    OUT             reduce using rule 262 (safeNav -> PONTO .)
    VARARG          reduce using rule 262 (safeNav -> PONTO .)
    WHERE           reduce using rule 262 (safeNav -> PONTO .)
    OBJECT          reduce using rule 262 (safeNav -> PONTO .)
    CONST           reduce using rule 262 (safeNav -> PONTO .)
    CONSTRUCTOR     reduce using rule 262 (safeNav -> PONTO .)
    EOF             reduce using rule 262 (safeNav -> PONTO .)
    FALSE           reduce using rule 262 (safeNav -> PONTO .)
    FUNCTION        reduce using rule 262 (safeNav -> PONTO .)
    NULL            reduce using rule 262 (safeNav -> PONTO .)
    NULLABLE        reduce using rule 262 (safeNav -> PONTO .)
    NUMBER          reduce using rule 262 (safeNav -> PONTO .)
    OPERATOR        reduce using rule 262 (safeNav -> PONTO .)
    SMARTCAST       reduce using rule 262 (safeNav -> PONTO .)
    THIS            reduce using rule 262 (safeNav -> PONTO .)
    TRUE            reduce using rule 262 (safeNav -> PONTO .)
    VAL             reduce using rule 262 (safeNav -> PONTO .)
    VAR             reduce using rule 262 (safeNav -> PONTO .)
    WHEN            reduce using rule 262 (safeNav -> PONTO .)
    LONG            reduce using rule 262 (safeNav -> PONTO .)
    ARRAY           reduce using rule 262 (safeNav -> PONTO .)
    LPAREN          reduce using rule 262 (safeNav -> PONTO .)


state 172

    (119) asExpression -> prefixUnaryExpression asOperator . type
    (40) type -> . optionalTypeModifiers optype
    (41) optionalTypeModifiers -> . typeModifiers
    (42) optionalTypeModifiers -> .
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (48) typeModifier -> . SUSPEND

  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 42 (optionalTypeModifiers -> .)
    ID              reduce using rule 42 (optionalTypeModifiers -> .)
    CROSSINLINE     reduce using rule 42 (optionalTypeModifiers -> .)
    IMPORT          reduce using rule 42 (optionalTypeModifiers -> .)
    INIT            reduce using rule 42 (optionalTypeModifiers -> .)
    NOINLINE        reduce using rule 42 (optionalTypeModifiers -> .)
    OUT             reduce using rule 42 (optionalTypeModifiers -> .)
    VARARG          reduce using rule 42 (optionalTypeModifiers -> .)
    WHERE           reduce using rule 42 (optionalTypeModifiers -> .)
    OBJECT          reduce using rule 42 (optionalTypeModifiers -> .)
    CONST           reduce using rule 42 (optionalTypeModifiers -> .)
    CONSTRUCTOR     reduce using rule 42 (optionalTypeModifiers -> .)
    EOF             reduce using rule 42 (optionalTypeModifiers -> .)
    FALSE           reduce using rule 42 (optionalTypeModifiers -> .)
    FUNCTION        reduce using rule 42 (optionalTypeModifiers -> .)
    NULL            reduce using rule 42 (optionalTypeModifiers -> .)
    NULLABLE        reduce using rule 42 (optionalTypeModifiers -> .)
    NUMBER          reduce using rule 42 (optionalTypeModifiers -> .)
    OPERATOR        reduce using rule 42 (optionalTypeModifiers -> .)
    SMARTCAST       reduce using rule 42 (optionalTypeModifiers -> .)
    THIS            reduce using rule 42 (optionalTypeModifiers -> .)
    TRUE            reduce using rule 42 (optionalTypeModifiers -> .)
    VAL             reduce using rule 42 (optionalTypeModifiers -> .)
    VAR             reduce using rule 42 (optionalTypeModifiers -> .)
    WHEN            reduce using rule 42 (optionalTypeModifiers -> .)
    LONG            reduce using rule 42 (optionalTypeModifiers -> .)
    ARRAY           reduce using rule 42 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 42 (optionalTypeModifiers -> .) ]

    type                           shift and go to state 278
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 173

    (251) asOperator -> AS .
    (252) asOperator -> AS . asOperator
    (251) asOperator -> . AS
    (252) asOperator -> . AS asOperator

    SUSPEND         reduce using rule 251 (asOperator -> AS .)
    LPAREN          reduce using rule 251 (asOperator -> AS .)
    ID              reduce using rule 251 (asOperator -> AS .)
    CROSSINLINE     reduce using rule 251 (asOperator -> AS .)
    IMPORT          reduce using rule 251 (asOperator -> AS .)
    INIT            reduce using rule 251 (asOperator -> AS .)
    NOINLINE        reduce using rule 251 (asOperator -> AS .)
    OUT             reduce using rule 251 (asOperator -> AS .)
    VARARG          reduce using rule 251 (asOperator -> AS .)
    WHERE           reduce using rule 251 (asOperator -> AS .)
    OBJECT          reduce using rule 251 (asOperator -> AS .)
    CONST           reduce using rule 251 (asOperator -> AS .)
    CONSTRUCTOR     reduce using rule 251 (asOperator -> AS .)
    EOF             reduce using rule 251 (asOperator -> AS .)
    FALSE           reduce using rule 251 (asOperator -> AS .)
    FUNCTION        reduce using rule 251 (asOperator -> AS .)
    NULL            reduce using rule 251 (asOperator -> AS .)
    NULLABLE        reduce using rule 251 (asOperator -> AS .)
    NUMBER          reduce using rule 251 (asOperator -> AS .)
    OPERATOR        reduce using rule 251 (asOperator -> AS .)
    SMARTCAST       reduce using rule 251 (asOperator -> AS .)
    THIS            reduce using rule 251 (asOperator -> AS .)
    TRUE            reduce using rule 251 (asOperator -> AS .)
    VAL             reduce using rule 251 (asOperator -> AS .)
    VAR             reduce using rule 251 (asOperator -> AS .)
    WHEN            reduce using rule 251 (asOperator -> AS .)
    LONG            reduce using rule 251 (asOperator -> AS .)
    ARRAY           reduce using rule 251 (asOperator -> AS .)
    AS              shift and go to state 173

    asOperator                     shift and go to state 279

state 174

    (85) forStatement -> FOR LPAREN . genericVariableDeclaration IN expression RPAREN optionalControlStructureBody
    (10) genericVariableDeclaration -> . multiVariableDeclaration
    (11) genericVariableDeclaration -> . variableDeclaration
    (35) multiVariableDeclaration -> . LPAREN multiVariableDeclarationRecursive RPAREN
    (36) multiVariableDeclaration -> . LPAREN RPAREN
    (33) variableDeclaration -> . simpleIdentifier DOISP type
    (34) variableDeclaration -> . simpleIdentifier
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY

    LPAREN          shift and go to state 260
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

    genericVariableDeclaration     shift and go to state 280
    multiVariableDeclaration       shift and go to state 258
    variableDeclaration            shift and go to state 259
    simpleIdentifier               shift and go to state 261

state 175

    (139) parenthesizedDirectlyAssignableExpression -> LPAREN directlyAssignableExpression . RPAREN

    RPAREN          shift and go to state 281


state 176

    (142) parenthesizedAssignableExpression -> LPAREN assignableExpression . RPAREN

    RPAREN          shift and go to state 282


state 177

    (178) parenthesizedExpression -> LPAREN expression . RPAREN
    (219) jumpExpression -> expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 283
    INCREMENTO      reduce using rule 219 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 219 (jumpExpression -> expression .)
    MENOR           reduce using rule 219 (jumpExpression -> expression .)
    LCCT            reduce using rule 219 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 219 (jumpExpression -> expression .)
    PONTO           reduce using rule 219 (jumpExpression -> expression .)
    LPAREN          reduce using rule 219 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 219 (jumpExpression -> expression .)
    AS              reduce using rule 219 (jumpExpression -> expression .)
    MULT            reduce using rule 219 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 219 (jumpExpression -> expression .)
    MOD             reduce using rule 219 (jumpExpression -> expression .)
    PLUS            reduce using rule 219 (jumpExpression -> expression .)
    MINUS           reduce using rule 219 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 219 (jumpExpression -> expression .)
    ID              reduce using rule 219 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 219 (jumpExpression -> expression .)
    IMPORT          reduce using rule 219 (jumpExpression -> expression .)
    INIT            reduce using rule 219 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 219 (jumpExpression -> expression .)
    OUT             reduce using rule 219 (jumpExpression -> expression .)
    VARARG          reduce using rule 219 (jumpExpression -> expression .)
    WHERE           reduce using rule 219 (jumpExpression -> expression .)
    OBJECT          reduce using rule 219 (jumpExpression -> expression .)
    CONST           reduce using rule 219 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 219 (jumpExpression -> expression .)
    EOF             reduce using rule 219 (jumpExpression -> expression .)
    FALSE           reduce using rule 219 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 219 (jumpExpression -> expression .)
    NULL            reduce using rule 219 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 219 (jumpExpression -> expression .)
    NUMBER          reduce using rule 219 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 219 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 219 (jumpExpression -> expression .)
    THIS            reduce using rule 219 (jumpExpression -> expression .)
    TRUE            reduce using rule 219 (jumpExpression -> expression .)
    VAL             reduce using rule 219 (jumpExpression -> expression .)
    VAR             reduce using rule 219 (jumpExpression -> expression .)
    WHEN            reduce using rule 219 (jumpExpression -> expression .)
    LONG            reduce using rule 219 (jumpExpression -> expression .)
    ARRAY           reduce using rule 219 (jumpExpression -> expression .)
    ELVIS           reduce using rule 219 (jumpExpression -> expression .)
    IN              reduce using rule 219 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 219 (jumpExpression -> expression .)
    IS              reduce using rule 219 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 219 (jumpExpression -> expression .)
    MAIOR           reduce using rule 219 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 219 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 219 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 219 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 219 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 219 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 219 (jumpExpression -> expression .)
    AND             reduce using rule 219 (jumpExpression -> expression .)
    OR              reduce using rule 219 (jumpExpression -> expression .)

  ! RPAREN          [ reduce using rule 219 (jumpExpression -> expression .) ]


state 178

    (86) whileStatement -> WHILE LPAREN . expression RPAREN controlStructureBody
    (87) whileStatement -> WHILE LPAREN . expression RPAREN PV
    (12) expression -> . disjunction
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 86
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 136
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 284
    disjunction                    shift and go to state 69
    conjunction                    shift and go to state 79
    equality                       shift and go to state 84
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 107
    elvisExpression                shift and go to state 114
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    simpleIdentifier               shift and go to state 133
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120
    prefixUnaryExpression          shift and go to state 134
    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 135
    unaryPrefix                    shift and go to state 92
    primaryExpression              shift and go to state 82
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    typeModifier                   shift and go to state 115

state 179

    (88) doWhileStatement -> DO controlStructureBody . WHILE LPAREN expression RPAREN

    WHILE           shift and go to state 285


state 180

    (89) doWhileStatement -> DO WHILE . LPAREN expression RPAREN
    (86) whileStatement -> WHILE . LPAREN expression RPAREN controlStructureBody
    (87) whileStatement -> WHILE . LPAREN expression RPAREN PV

    LPAREN          shift and go to state 286


state 181

    (77) controlStructureBody -> block .

    WHILE           reduce using rule 77 (controlStructureBody -> block .)
    FUN             reduce using rule 77 (controlStructureBody -> block .)
    FOR             reduce using rule 77 (controlStructureBody -> block .)
    DO              reduce using rule 77 (controlStructureBody -> block .)
    VAR             reduce using rule 77 (controlStructureBody -> block .)
    VAL             reduce using rule 77 (controlStructureBody -> block .)
    ID              reduce using rule 77 (controlStructureBody -> block .)
    CROSSINLINE     reduce using rule 77 (controlStructureBody -> block .)
    IMPORT          reduce using rule 77 (controlStructureBody -> block .)
    INIT            reduce using rule 77 (controlStructureBody -> block .)
    NOINLINE        reduce using rule 77 (controlStructureBody -> block .)
    OUT             reduce using rule 77 (controlStructureBody -> block .)
    VARARG          reduce using rule 77 (controlStructureBody -> block .)
    WHERE           reduce using rule 77 (controlStructureBody -> block .)
    OBJECT          reduce using rule 77 (controlStructureBody -> block .)
    CONST           reduce using rule 77 (controlStructureBody -> block .)
    CONSTRUCTOR     reduce using rule 77 (controlStructureBody -> block .)
    EOF             reduce using rule 77 (controlStructureBody -> block .)
    FALSE           reduce using rule 77 (controlStructureBody -> block .)
    FUNCTION        reduce using rule 77 (controlStructureBody -> block .)
    NULL            reduce using rule 77 (controlStructureBody -> block .)
    NULLABLE        reduce using rule 77 (controlStructureBody -> block .)
    NUMBER          reduce using rule 77 (controlStructureBody -> block .)
    OPERATOR        reduce using rule 77 (controlStructureBody -> block .)
    SMARTCAST       reduce using rule 77 (controlStructureBody -> block .)
    THIS            reduce using rule 77 (controlStructureBody -> block .)
    TRUE            reduce using rule 77 (controlStructureBody -> block .)
    WHEN            reduce using rule 77 (controlStructureBody -> block .)
    LONG            reduce using rule 77 (controlStructureBody -> block .)
    ARRAY           reduce using rule 77 (controlStructureBody -> block .)
    LPAREN          reduce using rule 77 (controlStructureBody -> block .)
    LITERAL_STRING  reduce using rule 77 (controlStructureBody -> block .)
    LCCT            reduce using rule 77 (controlStructureBody -> block .)
    IF              reduce using rule 77 (controlStructureBody -> block .)
    RETURN          reduce using rule 77 (controlStructureBody -> block .)
    RETURN_AT       reduce using rule 77 (controlStructureBody -> block .)
    CONTINUE        reduce using rule 77 (controlStructureBody -> block .)
    CONTINUE_AT     reduce using rule 77 (controlStructureBody -> block .)
    BREAK           reduce using rule 77 (controlStructureBody -> block .)
    BREAK_AT        reduce using rule 77 (controlStructureBody -> block .)
    RCHAVE          reduce using rule 77 (controlStructureBody -> block .)
    INCREMENTO      reduce using rule 77 (controlStructureBody -> block .)
    DECREMENTO      reduce using rule 77 (controlStructureBody -> block .)
    MINUS           reduce using rule 77 (controlStructureBody -> block .)
    PLUS            reduce using rule 77 (controlStructureBody -> block .)
    NOT             reduce using rule 77 (controlStructureBody -> block .)
    SUSPEND         reduce using rule 77 (controlStructureBody -> block .)
    COLONCOLON      reduce using rule 77 (controlStructureBody -> block .)
    LCHAVE          reduce using rule 77 (controlStructureBody -> block .)
    MENOR           reduce using rule 77 (controlStructureBody -> block .)
    PONTO           reduce using rule 77 (controlStructureBody -> block .)
    AS              reduce using rule 77 (controlStructureBody -> block .)
    MAISIGUAL       reduce using rule 77 (controlStructureBody -> block .)
    MENOSIGUAL      reduce using rule 77 (controlStructureBody -> block .)
    MULTIGUAL       reduce using rule 77 (controlStructureBody -> block .)
    DIVIGUAL        reduce using rule 77 (controlStructureBody -> block .)
    MODIGUAL        reduce using rule 77 (controlStructureBody -> block .)
    MULT            reduce using rule 77 (controlStructureBody -> block .)
    DIVIDE          reduce using rule 77 (controlStructureBody -> block .)
    MOD             reduce using rule 77 (controlStructureBody -> block .)
    PONTOPONTO      reduce using rule 77 (controlStructureBody -> block .)
    ELVIS           reduce using rule 77 (controlStructureBody -> block .)
    IN              reduce using rule 77 (controlStructureBody -> block .)
    NOT_IN          reduce using rule 77 (controlStructureBody -> block .)
    IS              reduce using rule 77 (controlStructureBody -> block .)
    NOT_IS          reduce using rule 77 (controlStructureBody -> block .)
    MAIOR           reduce using rule 77 (controlStructureBody -> block .)
    MENORIGUAL      reduce using rule 77 (controlStructureBody -> block .)
    MAIORIGUAL      reduce using rule 77 (controlStructureBody -> block .)
    DIFERENTE       reduce using rule 77 (controlStructureBody -> block .)
    IDENTIDADE      reduce using rule 77 (controlStructureBody -> block .)
    IGUALDADE       reduce using rule 77 (controlStructureBody -> block .)
    SEMIDENTIDADE   reduce using rule 77 (controlStructureBody -> block .)
    AND             reduce using rule 77 (controlStructureBody -> block .)
    OR              reduce using rule 77 (controlStructureBody -> block .)
    COMMA           reduce using rule 77 (controlStructureBody -> block .)
    RPAREN          reduce using rule 77 (controlStructureBody -> block .)
    RCCT            reduce using rule 77 (controlStructureBody -> block .)
    PV              reduce using rule 77 (controlStructureBody -> block .)
    ELSE            reduce using rule 77 (controlStructureBody -> block .)


state 182

    (78) controlStructureBody -> statement .

    WHILE           reduce using rule 78 (controlStructureBody -> statement .)
    FUN             reduce using rule 78 (controlStructureBody -> statement .)
    FOR             reduce using rule 78 (controlStructureBody -> statement .)
    DO              reduce using rule 78 (controlStructureBody -> statement .)
    VAR             reduce using rule 78 (controlStructureBody -> statement .)
    VAL             reduce using rule 78 (controlStructureBody -> statement .)
    ID              reduce using rule 78 (controlStructureBody -> statement .)
    CROSSINLINE     reduce using rule 78 (controlStructureBody -> statement .)
    IMPORT          reduce using rule 78 (controlStructureBody -> statement .)
    INIT            reduce using rule 78 (controlStructureBody -> statement .)
    NOINLINE        reduce using rule 78 (controlStructureBody -> statement .)
    OUT             reduce using rule 78 (controlStructureBody -> statement .)
    VARARG          reduce using rule 78 (controlStructureBody -> statement .)
    WHERE           reduce using rule 78 (controlStructureBody -> statement .)
    OBJECT          reduce using rule 78 (controlStructureBody -> statement .)
    CONST           reduce using rule 78 (controlStructureBody -> statement .)
    CONSTRUCTOR     reduce using rule 78 (controlStructureBody -> statement .)
    EOF             reduce using rule 78 (controlStructureBody -> statement .)
    FALSE           reduce using rule 78 (controlStructureBody -> statement .)
    FUNCTION        reduce using rule 78 (controlStructureBody -> statement .)
    NULL            reduce using rule 78 (controlStructureBody -> statement .)
    NULLABLE        reduce using rule 78 (controlStructureBody -> statement .)
    NUMBER          reduce using rule 78 (controlStructureBody -> statement .)
    OPERATOR        reduce using rule 78 (controlStructureBody -> statement .)
    SMARTCAST       reduce using rule 78 (controlStructureBody -> statement .)
    THIS            reduce using rule 78 (controlStructureBody -> statement .)
    TRUE            reduce using rule 78 (controlStructureBody -> statement .)
    WHEN            reduce using rule 78 (controlStructureBody -> statement .)
    LONG            reduce using rule 78 (controlStructureBody -> statement .)
    ARRAY           reduce using rule 78 (controlStructureBody -> statement .)
    LPAREN          reduce using rule 78 (controlStructureBody -> statement .)
    LITERAL_STRING  reduce using rule 78 (controlStructureBody -> statement .)
    LCCT            reduce using rule 78 (controlStructureBody -> statement .)
    IF              reduce using rule 78 (controlStructureBody -> statement .)
    RETURN          reduce using rule 78 (controlStructureBody -> statement .)
    RETURN_AT       reduce using rule 78 (controlStructureBody -> statement .)
    CONTINUE        reduce using rule 78 (controlStructureBody -> statement .)
    CONTINUE_AT     reduce using rule 78 (controlStructureBody -> statement .)
    BREAK           reduce using rule 78 (controlStructureBody -> statement .)
    BREAK_AT        reduce using rule 78 (controlStructureBody -> statement .)
    RCHAVE          reduce using rule 78 (controlStructureBody -> statement .)
    INCREMENTO      reduce using rule 78 (controlStructureBody -> statement .)
    DECREMENTO      reduce using rule 78 (controlStructureBody -> statement .)
    MINUS           reduce using rule 78 (controlStructureBody -> statement .)
    PLUS            reduce using rule 78 (controlStructureBody -> statement .)
    NOT             reduce using rule 78 (controlStructureBody -> statement .)
    SUSPEND         reduce using rule 78 (controlStructureBody -> statement .)
    COLONCOLON      reduce using rule 78 (controlStructureBody -> statement .)
    LCHAVE          reduce using rule 78 (controlStructureBody -> statement .)
    MENOR           reduce using rule 78 (controlStructureBody -> statement .)
    PONTO           reduce using rule 78 (controlStructureBody -> statement .)
    AS              reduce using rule 78 (controlStructureBody -> statement .)
    MAISIGUAL       reduce using rule 78 (controlStructureBody -> statement .)
    MENOSIGUAL      reduce using rule 78 (controlStructureBody -> statement .)
    MULTIGUAL       reduce using rule 78 (controlStructureBody -> statement .)
    DIVIGUAL        reduce using rule 78 (controlStructureBody -> statement .)
    MODIGUAL        reduce using rule 78 (controlStructureBody -> statement .)
    MULT            reduce using rule 78 (controlStructureBody -> statement .)
    DIVIDE          reduce using rule 78 (controlStructureBody -> statement .)
    MOD             reduce using rule 78 (controlStructureBody -> statement .)
    PONTOPONTO      reduce using rule 78 (controlStructureBody -> statement .)
    ELVIS           reduce using rule 78 (controlStructureBody -> statement .)
    IN              reduce using rule 78 (controlStructureBody -> statement .)
    NOT_IN          reduce using rule 78 (controlStructureBody -> statement .)
    IS              reduce using rule 78 (controlStructureBody -> statement .)
    NOT_IS          reduce using rule 78 (controlStructureBody -> statement .)
    MAIOR           reduce using rule 78 (controlStructureBody -> statement .)
    MENORIGUAL      reduce using rule 78 (controlStructureBody -> statement .)
    MAIORIGUAL      reduce using rule 78 (controlStructureBody -> statement .)
    DIFERENTE       reduce using rule 78 (controlStructureBody -> statement .)
    IDENTIDADE      reduce using rule 78 (controlStructureBody -> statement .)
    IGUALDADE       reduce using rule 78 (controlStructureBody -> statement .)
    SEMIDENTIDADE   reduce using rule 78 (controlStructureBody -> statement .)
    AND             reduce using rule 78 (controlStructureBody -> statement .)
    OR              reduce using rule 78 (controlStructureBody -> statement .)
    COMMA           reduce using rule 78 (controlStructureBody -> statement .)
    RPAREN          reduce using rule 78 (controlStructureBody -> statement .)
    RCCT            reduce using rule 78 (controlStructureBody -> statement .)
    PV              reduce using rule 78 (controlStructureBody -> statement .)
    ELSE            reduce using rule 78 (controlStructureBody -> statement .)


state 183

    (93) disjunction -> conjunction OR . disjunction
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (12) expression -> . disjunction
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 86
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 136
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    SUSPEND         shift and go to state 48

    conjunction                    shift and go to state 79
    disjunction                    shift and go to state 287
    equality                       shift and go to state 84
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 107
    elvisExpression                shift and go to state 114
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    simpleIdentifier               shift and go to state 133
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120
    prefixUnaryExpression          shift and go to state 134
    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 135
    unaryPrefix                    shift and go to state 92
    primaryExpression              shift and go to state 82
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    expression                     shift and go to state 195
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    typeModifier                   shift and go to state 115

state 184

    (130) postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .

    INCREMENTO      reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    DECREMENTO      reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MENOR           reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    LCCT            reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    COLONCOLON      reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    PONTO           reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    LPAREN          reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    RCHAVE          reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    AS              reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MAISIGUAL       reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MENOSIGUAL      reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MULTIGUAL       reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    DIVIGUAL        reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MODIGUAL        reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MULT            reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    DIVIDE          reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MOD             reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    PLUS            reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MINUS           reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    PONTOPONTO      reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    ID              reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    CROSSINLINE     reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    IMPORT          reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    INIT            reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    NOINLINE        reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    OUT             reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    VARARG          reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    WHERE           reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    OBJECT          reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    CONST           reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    CONSTRUCTOR     reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    EOF             reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    FALSE           reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    FUNCTION        reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    NULL            reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    NULLABLE        reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    NUMBER          reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    OPERATOR        reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    SMARTCAST       reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    THIS            reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    TRUE            reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    VAL             reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    VAR             reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    WHEN            reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    LONG            reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    ARRAY           reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    ELVIS           reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    IN              reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    NOT_IN          reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    IS              reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    NOT_IS          reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MAIOR           reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MENORIGUAL      reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MAIORIGUAL      reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    DIFERENTE       reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    IDENTIDADE      reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    IGUALDADE       reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    SEMIDENTIDADE   reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    AND             reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    OR              reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    FUN             reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    FOR             reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    WHILE           reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    DO              reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    LITERAL_STRING  reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    IF              reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    RETURN          reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    RETURN_AT       reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    CONTINUE        reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    CONTINUE_AT     reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    BREAK           reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    BREAK_AT        reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    NOT             reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    SUSPEND         reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    COMMA           reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    RPAREN          reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    LCHAVE          reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    RCCT            reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    PV              reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    ELSE            reduce using rule 130 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)


state 185

    (127) postfixUnaryExpressionRecursive -> postfixUnarySuffix .
    (128) postfixUnaryExpressionRecursive -> postfixUnarySuffix . postfixUnaryExpressionRecursive
    (127) postfixUnaryExpressionRecursive -> . postfixUnarySuffix
    (128) postfixUnaryExpressionRecursive -> . postfixUnarySuffix postfixUnaryExpressionRecursive
    (131) postfixUnarySuffix -> . postfixUnaryOperator
    (132) postfixUnarySuffix -> . typeArguments
    (133) postfixUnarySuffix -> . callSuffix
    (134) postfixUnarySuffix -> . indexingSuffix
    (135) postfixUnarySuffix -> . navigationSuffix
    (258) postfixUnaryOperator -> . INCREMENTO
    (259) postfixUnaryOperator -> . DECREMENTO
    (159) typeArguments -> . MENOR typeArgumentsRecursive MAIOR
    (160) typeArguments -> . MENOR MAIOR
    (152) callSuffix -> . optionalTypeArguments optionalValueArguments annotatedLambda
    (153) callSuffix -> . optionalTypeArguments optionalValueArguments
    (146) indexingSuffix -> . LCCT indexingSuffixRecursive RCCT
    (147) indexingSuffix -> . LCCT RCCT
    (150) navigationSuffix -> . memberAccessOperator simpleIdentifier CLASS
    (151) navigationSuffix -> . memberAccessOperator parenthesizedExpression CLASS
    (154) optionalTypeArguments -> . typeArguments
    (155) optionalTypeArguments -> .
    (260) memberAccessOperator -> . safeNav
    (261) memberAccessOperator -> . COLONCOLON
    (262) safeNav -> . PONTO

  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! reduce/reduce conflict for COLONCOLON resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for PONTO resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for AS resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for MULT resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for MOD resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for PLUS resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for MINUS resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for ID resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for IMPORT resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for INIT resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for OUT resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for VARARG resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for WHERE resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for OBJECT resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for CONST resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for EOF resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for FALSE resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for NULL resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for NUMBER resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for THIS resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for TRUE resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for VAL resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for VAR resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for WHEN resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for LONG resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for ARRAY resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for ELVIS resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for IN resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for IS resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for MAIOR resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for AND resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for OR resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for FUN resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for FOR resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for WHILE resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for DO resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for IF resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for RETURN resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for BREAK resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for NOT resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for COMMA resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for RPAREN resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for RCCT resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for PV resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for ELSE resolved using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! shift/reduce conflict for COLONCOLON resolved as shift
  ! shift/reduce conflict for PONTO resolved as shift
    LPAREN          reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    RCHAVE          reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    AS              reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MAISIGUAL       reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MENOSIGUAL      reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MULTIGUAL       reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    DIVIGUAL        reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MODIGUAL        reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MULT            reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    DIVIDE          reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MOD             reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    PLUS            reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MINUS           reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    PONTOPONTO      reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    ID              reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    CROSSINLINE     reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    IMPORT          reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    INIT            reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    NOINLINE        reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    OUT             reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    VARARG          reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    WHERE           reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    OBJECT          reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    CONST           reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    CONSTRUCTOR     reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    EOF             reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    FALSE           reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    FUNCTION        reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    NULL            reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    NULLABLE        reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    NUMBER          reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    OPERATOR        reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    SMARTCAST       reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    THIS            reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    TRUE            reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    VAL             reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    VAR             reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    WHEN            reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    LONG            reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    ARRAY           reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    ELVIS           reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    IN              reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    NOT_IN          reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    IS              reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    NOT_IS          reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MAIOR           reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MENORIGUAL      reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MAIORIGUAL      reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    DIFERENTE       reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    IDENTIDADE      reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    IGUALDADE       reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    SEMIDENTIDADE   reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    AND             reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    OR              reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    FUN             reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    FOR             reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    WHILE           reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    DO              reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    LITERAL_STRING  reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    IF              reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    RETURN          reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    RETURN_AT       reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    CONTINUE        reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    CONTINUE_AT     reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    BREAK           reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    BREAK_AT        reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    NOT             reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    SUSPEND         reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    COMMA           reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    RPAREN          reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    LCHAVE          reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    RCCT            reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    PV              reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    ELSE            reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    INCREMENTO      shift and go to state 191
    DECREMENTO      shift and go to state 192
    MENOR           shift and go to state 166
    LCCT            shift and go to state 167
    COLONCOLON      shift and go to state 170
    PONTO           shift and go to state 171

  ! INCREMENTO      [ reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .) ]
  ! DECREMENTO      [ reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .) ]
  ! MENOR           [ reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .) ]
  ! LCCT            [ reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .) ]
  ! COLONCOLON      [ reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .) ]
  ! PONTO           [ reduce using rule 127 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .) ]
  ! LPAREN          [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! RCHAVE          [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! INCREMENTO      [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! DECREMENTO      [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! MENOR           [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! LCCT            [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! COLONCOLON      [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! PONTO           [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! AS              [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! MAISIGUAL       [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! MENOSIGUAL      [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! MULTIGUAL       [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! DIVIGUAL        [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! MODIGUAL        [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! MULT            [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! DIVIDE          [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! MOD             [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! PLUS            [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! MINUS           [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! PONTOPONTO      [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! ID              [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! CROSSINLINE     [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! IMPORT          [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! INIT            [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! NOINLINE        [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! OUT             [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! VARARG          [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! WHERE           [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! OBJECT          [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! CONST           [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! CONSTRUCTOR     [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! EOF             [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! FALSE           [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! FUNCTION        [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! NULL            [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! NULLABLE        [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! NUMBER          [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! OPERATOR        [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! SMARTCAST       [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! THIS            [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! TRUE            [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! VAL             [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! VAR             [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! WHEN            [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! LONG            [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! ARRAY           [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! ELVIS           [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! IN              [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! NOT_IN          [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! IS              [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! NOT_IS          [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! MAIOR           [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! MENORIGUAL      [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! MAIORIGUAL      [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! DIFERENTE       [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! IDENTIDADE      [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! IGUALDADE       [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! AND             [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! OR              [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! FUN             [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! FOR             [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! WHILE           [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! DO              [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! LITERAL_STRING  [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! IF              [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! RETURN          [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! RETURN_AT       [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! CONTINUE        [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! CONTINUE_AT     [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! BREAK           [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! BREAK_AT        [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! NOT             [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! SUSPEND         [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! COMMA           [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! RPAREN          [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! LCHAVE          [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! RCCT            [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! PV              [ reduce using rule 155 (optionalTypeArguments -> .) ]
  ! ELSE            [ reduce using rule 155 (optionalTypeArguments -> .) ]

    postfixUnarySuffix             shift and go to state 185
    postfixUnaryExpressionRecursive shift and go to state 288
    postfixUnaryOperator           shift and go to state 186
    typeArguments                  shift and go to state 187
    callSuffix                     shift and go to state 188
    indexingSuffix                 shift and go to state 189
    navigationSuffix               shift and go to state 190
    optionalTypeArguments          shift and go to state 193
    memberAccessOperator           shift and go to state 168
    safeNav                        shift and go to state 169

state 186

    (131) postfixUnarySuffix -> postfixUnaryOperator .

    INCREMENTO      reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    DECREMENTO      reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    MENOR           reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    LCCT            reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    COLONCOLON      reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    PONTO           reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    LPAREN          reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    RCHAVE          reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    AS              reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    MAISIGUAL       reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    MENOSIGUAL      reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    MULTIGUAL       reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    DIVIGUAL        reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    MODIGUAL        reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    MULT            reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    DIVIDE          reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    MOD             reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    PLUS            reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    MINUS           reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    PONTOPONTO      reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    ID              reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    CROSSINLINE     reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    IMPORT          reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    INIT            reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    NOINLINE        reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    OUT             reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    VARARG          reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    WHERE           reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    OBJECT          reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    CONST           reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    CONSTRUCTOR     reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    EOF             reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    FALSE           reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    FUNCTION        reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    NULL            reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    NULLABLE        reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    NUMBER          reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    OPERATOR        reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    SMARTCAST       reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    THIS            reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    TRUE            reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    VAL             reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    VAR             reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    WHEN            reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    LONG            reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    ARRAY           reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    ELVIS           reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    IN              reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    NOT_IN          reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    IS              reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    NOT_IS          reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    MAIOR           reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    MENORIGUAL      reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    MAIORIGUAL      reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    DIFERENTE       reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    IDENTIDADE      reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    IGUALDADE       reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    SEMIDENTIDADE   reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    AND             reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    OR              reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    FUN             reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    FOR             reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    WHILE           reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    DO              reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    LITERAL_STRING  reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    IF              reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    RETURN          reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    RETURN_AT       reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    CONTINUE        reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    CONTINUE_AT     reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    BREAK           reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    BREAK_AT        reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    NOT             reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    SUSPEND         reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    COMMA           reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    RPAREN          reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    LCHAVE          reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    RCCT            reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    PV              reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)
    ELSE            reduce using rule 131 (postfixUnarySuffix -> postfixUnaryOperator .)


state 187

    (132) postfixUnarySuffix -> typeArguments .
    (154) optionalTypeArguments -> typeArguments .

  ! reduce/reduce conflict for LPAREN resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MENOR resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for LCCT resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for PONTO resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for AS resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MULT resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MOD resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for PLUS resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MINUS resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for ID resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for IMPORT resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for INIT resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for OUT resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for VARARG resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for WHERE resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for OBJECT resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for CONST resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for EOF resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for FALSE resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for NULL resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for NUMBER resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for THIS resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for TRUE resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for VAL resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for VAR resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for WHEN resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for LONG resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for ARRAY resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for ELVIS resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for IN resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for IS resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MAIOR resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for AND resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for OR resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for FUN resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for FOR resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for WHILE resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for DO resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for IF resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for RETURN resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for BREAK resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for NOT resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for COMMA resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for RPAREN resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for RCCT resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for PV resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for ELSE resolved using rule 132 (postfixUnarySuffix -> typeArguments .)
    INCREMENTO      reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    DECREMENTO      reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    MENOR           reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    LCCT            reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    COLONCOLON      reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    PONTO           reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    LPAREN          reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    RCHAVE          reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    AS              reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    MAISIGUAL       reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    MENOSIGUAL      reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    MULTIGUAL       reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    DIVIGUAL        reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    MODIGUAL        reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    MULT            reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    DIVIDE          reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    MOD             reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    PLUS            reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    MINUS           reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    PONTOPONTO      reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    ID              reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    CROSSINLINE     reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    IMPORT          reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    INIT            reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    NOINLINE        reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    OUT             reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    VARARG          reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    WHERE           reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    OBJECT          reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    CONST           reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    CONSTRUCTOR     reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    EOF             reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    FALSE           reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    FUNCTION        reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    NULL            reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    NULLABLE        reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    NUMBER          reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    OPERATOR        reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    SMARTCAST       reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    THIS            reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    TRUE            reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    VAL             reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    VAR             reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    WHEN            reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    LONG            reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    ARRAY           reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    ELVIS           reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    IN              reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    NOT_IN          reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    IS              reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    NOT_IS          reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    MAIOR           reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    MENORIGUAL      reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    MAIORIGUAL      reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    DIFERENTE       reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    IDENTIDADE      reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    IGUALDADE       reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    SEMIDENTIDADE   reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    AND             reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    OR              reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    FUN             reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    FOR             reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    WHILE           reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    DO              reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    LITERAL_STRING  reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    IF              reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    RETURN          reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    RETURN_AT       reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    CONTINUE        reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    CONTINUE_AT     reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    BREAK           reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    BREAK_AT        reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    NOT             reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    SUSPEND         reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    COMMA           reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    RPAREN          reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    LCHAVE          reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    RCCT            reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    PV              reduce using rule 132 (postfixUnarySuffix -> typeArguments .)
    ELSE            reduce using rule 132 (postfixUnarySuffix -> typeArguments .)

  ! LPAREN          [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! RCHAVE          [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! INCREMENTO      [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! DECREMENTO      [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! MENOR           [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! LCCT            [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! COLONCOLON      [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! PONTO           [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! AS              [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! MAISIGUAL       [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! MENOSIGUAL      [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! MULTIGUAL       [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! DIVIGUAL        [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! MODIGUAL        [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! MULT            [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! DIVIDE          [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! MOD             [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! PLUS            [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! MINUS           [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! PONTOPONTO      [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! ID              [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! CROSSINLINE     [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! IMPORT          [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! INIT            [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! NOINLINE        [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! OUT             [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! VARARG          [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! WHERE           [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! OBJECT          [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! CONST           [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! CONSTRUCTOR     [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! EOF             [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! FALSE           [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! FUNCTION        [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! NULL            [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! NULLABLE        [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! NUMBER          [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! OPERATOR        [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! SMARTCAST       [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! THIS            [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! TRUE            [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! VAL             [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! VAR             [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! WHEN            [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! LONG            [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! ARRAY           [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! ELVIS           [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! IN              [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! NOT_IN          [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! IS              [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! NOT_IS          [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! MAIOR           [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! MENORIGUAL      [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! MAIORIGUAL      [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! DIFERENTE       [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! IDENTIDADE      [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! IGUALDADE       [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! SEMIDENTIDADE   [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! AND             [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! OR              [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! FUN             [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! FOR             [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! WHILE           [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! DO              [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! LITERAL_STRING  [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! IF              [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! RETURN          [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! RETURN_AT       [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! CONTINUE        [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! CONTINUE_AT     [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! BREAK           [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! BREAK_AT        [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! NOT             [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! SUSPEND         [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! COMMA           [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! RPAREN          [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! LCHAVE          [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! RCCT            [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! PV              [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]
  ! ELSE            [ reduce using rule 154 (optionalTypeArguments -> typeArguments .) ]


state 188

    (133) postfixUnarySuffix -> callSuffix .

    INCREMENTO      reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    DECREMENTO      reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    MENOR           reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    LCCT            reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    COLONCOLON      reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    PONTO           reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    LPAREN          reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    RCHAVE          reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    AS              reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    MAISIGUAL       reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    MENOSIGUAL      reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    MULTIGUAL       reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    DIVIGUAL        reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    MODIGUAL        reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    MULT            reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    DIVIDE          reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    MOD             reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    PLUS            reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    MINUS           reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    PONTOPONTO      reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    ID              reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    CROSSINLINE     reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    IMPORT          reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    INIT            reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    NOINLINE        reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    OUT             reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    VARARG          reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    WHERE           reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    OBJECT          reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    CONST           reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    CONSTRUCTOR     reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    EOF             reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    FALSE           reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    FUNCTION        reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    NULL            reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    NULLABLE        reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    NUMBER          reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    OPERATOR        reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    SMARTCAST       reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    THIS            reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    TRUE            reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    VAL             reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    VAR             reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    WHEN            reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    LONG            reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    ARRAY           reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    ELVIS           reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    IN              reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    NOT_IN          reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    IS              reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    NOT_IS          reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    MAIOR           reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    MENORIGUAL      reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    MAIORIGUAL      reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    DIFERENTE       reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    IDENTIDADE      reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    IGUALDADE       reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    SEMIDENTIDADE   reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    AND             reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    OR              reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    FUN             reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    FOR             reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    WHILE           reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    DO              reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    LITERAL_STRING  reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    IF              reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    RETURN          reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    RETURN_AT       reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    CONTINUE        reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    CONTINUE_AT     reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    BREAK           reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    BREAK_AT        reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    NOT             reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    SUSPEND         reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    COMMA           reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    RPAREN          reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    LCHAVE          reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    RCCT            reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    PV              reduce using rule 133 (postfixUnarySuffix -> callSuffix .)
    ELSE            reduce using rule 133 (postfixUnarySuffix -> callSuffix .)


state 189

    (134) postfixUnarySuffix -> indexingSuffix .

    INCREMENTO      reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    DECREMENTO      reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    MENOR           reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    LCCT            reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    COLONCOLON      reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    PONTO           reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    LPAREN          reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    RCHAVE          reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    AS              reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    MAISIGUAL       reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    MENOSIGUAL      reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    MULTIGUAL       reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    DIVIGUAL        reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    MODIGUAL        reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    MULT            reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    DIVIDE          reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    MOD             reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    PLUS            reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    MINUS           reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    PONTOPONTO      reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    ID              reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    CROSSINLINE     reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    IMPORT          reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    INIT            reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    NOINLINE        reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    OUT             reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    VARARG          reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    WHERE           reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    OBJECT          reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    CONST           reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    CONSTRUCTOR     reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    EOF             reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    FALSE           reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    FUNCTION        reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    NULL            reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    NULLABLE        reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    NUMBER          reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    OPERATOR        reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    SMARTCAST       reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    THIS            reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    TRUE            reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    VAL             reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    VAR             reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    WHEN            reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    LONG            reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    ARRAY           reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    ELVIS           reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    IN              reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    NOT_IN          reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    IS              reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    NOT_IS          reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    MAIOR           reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    MENORIGUAL      reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    MAIORIGUAL      reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    DIFERENTE       reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    IDENTIDADE      reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    IGUALDADE       reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    SEMIDENTIDADE   reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    AND             reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    OR              reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    FUN             reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    FOR             reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    WHILE           reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    DO              reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    LITERAL_STRING  reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    IF              reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    RETURN          reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    RETURN_AT       reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    CONTINUE        reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    CONTINUE_AT     reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    BREAK           reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    BREAK_AT        reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    NOT             reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    SUSPEND         reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    COMMA           reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    RPAREN          reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    LCHAVE          reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    RCCT            reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    PV              reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)
    ELSE            reduce using rule 134 (postfixUnarySuffix -> indexingSuffix .)


state 190

    (135) postfixUnarySuffix -> navigationSuffix .

    INCREMENTO      reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    DECREMENTO      reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    MENOR           reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    LCCT            reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    COLONCOLON      reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    PONTO           reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    LPAREN          reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    RCHAVE          reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    AS              reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    MAISIGUAL       reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    MENOSIGUAL      reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    MULTIGUAL       reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    DIVIGUAL        reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    MODIGUAL        reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    MULT            reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    DIVIDE          reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    MOD             reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    PLUS            reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    MINUS           reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    PONTOPONTO      reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    ID              reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    CROSSINLINE     reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    IMPORT          reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    INIT            reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    NOINLINE        reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    OUT             reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    VARARG          reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    WHERE           reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    OBJECT          reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    CONST           reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    CONSTRUCTOR     reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    EOF             reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    FALSE           reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    FUNCTION        reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    NULL            reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    NULLABLE        reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    NUMBER          reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    OPERATOR        reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    SMARTCAST       reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    THIS            reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    TRUE            reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    VAL             reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    VAR             reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    WHEN            reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    LONG            reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    ARRAY           reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    ELVIS           reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    IN              reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    NOT_IN          reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    IS              reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    NOT_IS          reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    MAIOR           reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    MENORIGUAL      reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    MAIORIGUAL      reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    DIFERENTE       reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    IDENTIDADE      reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    IGUALDADE       reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    SEMIDENTIDADE   reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    AND             reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    OR              reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    FUN             reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    FOR             reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    WHILE           reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    DO              reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    LITERAL_STRING  reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    IF              reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    RETURN          reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    RETURN_AT       reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    CONTINUE        reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    CONTINUE_AT     reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    BREAK           reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    BREAK_AT        reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    NOT             reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    SUSPEND         reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    COMMA           reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    RPAREN          reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    LCHAVE          reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    RCCT            reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    PV              reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)
    ELSE            reduce using rule 135 (postfixUnarySuffix -> navigationSuffix .)


state 191

    (258) postfixUnaryOperator -> INCREMENTO .

    INCREMENTO      reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    DECREMENTO      reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    MENOR           reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    LCCT            reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    COLONCOLON      reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    PONTO           reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    LPAREN          reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    RCHAVE          reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    AS              reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    MAISIGUAL       reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    MENOSIGUAL      reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    MULTIGUAL       reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    DIVIGUAL        reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    MODIGUAL        reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    MULT            reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    DIVIDE          reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    MOD             reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    PLUS            reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    MINUS           reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    PONTOPONTO      reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    ID              reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    CROSSINLINE     reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    IMPORT          reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    INIT            reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    NOINLINE        reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    OUT             reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    VARARG          reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    WHERE           reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    OBJECT          reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    CONST           reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    CONSTRUCTOR     reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    EOF             reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    FALSE           reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    FUNCTION        reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    NULL            reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    NULLABLE        reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    NUMBER          reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    OPERATOR        reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    SMARTCAST       reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    THIS            reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    TRUE            reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    VAL             reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    VAR             reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    WHEN            reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    LONG            reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    ARRAY           reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    ELVIS           reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    IN              reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    NOT_IN          reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    IS              reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    NOT_IS          reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    MAIOR           reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    MENORIGUAL      reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    MAIORIGUAL      reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    DIFERENTE       reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    IDENTIDADE      reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    IGUALDADE       reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    SEMIDENTIDADE   reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    AND             reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    OR              reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    FUN             reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    FOR             reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    WHILE           reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    DO              reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    LITERAL_STRING  reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    IF              reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    RETURN          reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    RETURN_AT       reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    CONTINUE        reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    CONTINUE_AT     reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    BREAK           reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    BREAK_AT        reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    NOT             reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    SUSPEND         reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    COMMA           reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    RPAREN          reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    LCHAVE          reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    RCCT            reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    PV              reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)
    ELSE            reduce using rule 258 (postfixUnaryOperator -> INCREMENTO .)


state 192

    (259) postfixUnaryOperator -> DECREMENTO .

    INCREMENTO      reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    DECREMENTO      reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    MENOR           reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    LCCT            reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    COLONCOLON      reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    PONTO           reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    LPAREN          reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    RCHAVE          reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    AS              reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    MAISIGUAL       reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    MENOSIGUAL      reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    MULTIGUAL       reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    DIVIGUAL        reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    MODIGUAL        reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    MULT            reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    DIVIDE          reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    MOD             reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    PLUS            reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    MINUS           reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    PONTOPONTO      reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    ID              reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    CROSSINLINE     reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    IMPORT          reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    INIT            reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    NOINLINE        reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    OUT             reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    VARARG          reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    WHERE           reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    OBJECT          reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    CONST           reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    CONSTRUCTOR     reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    EOF             reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    FALSE           reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    FUNCTION        reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    NULL            reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    NULLABLE        reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    NUMBER          reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    OPERATOR        reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    SMARTCAST       reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    THIS            reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    TRUE            reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    VAL             reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    VAR             reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    WHEN            reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    LONG            reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    ARRAY           reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    ELVIS           reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    IN              reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    NOT_IN          reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    IS              reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    NOT_IS          reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    MAIOR           reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    MENORIGUAL      reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    MAIORIGUAL      reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    DIFERENTE       reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    IDENTIDADE      reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    IGUALDADE       reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    SEMIDENTIDADE   reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    AND             reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    OR              reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    FUN             reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    FOR             reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    WHILE           reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    DO              reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    LITERAL_STRING  reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    IF              reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    RETURN          reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    RETURN_AT       reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    CONTINUE        reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    CONTINUE_AT     reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    BREAK           reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    BREAK_AT        reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    NOT             reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    SUSPEND         reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    COMMA           reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    RPAREN          reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    LCHAVE          reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    RCCT            reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    PV              reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)
    ELSE            reduce using rule 259 (postfixUnaryOperator -> DECREMENTO .)


state 193

    (152) callSuffix -> optionalTypeArguments . optionalValueArguments annotatedLambda
    (153) callSuffix -> optionalTypeArguments . optionalValueArguments
    (156) optionalValueArguments -> . valueArguments
    (157) optionalValueArguments -> .
    (165) valueArguments -> . LPAREN RPAREN
    (166) valueArguments -> . LPAREN valueArgumentsRecursive RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    RCHAVE          reduce using rule 157 (optionalValueArguments -> .)
    INCREMENTO      reduce using rule 157 (optionalValueArguments -> .)
    DECREMENTO      reduce using rule 157 (optionalValueArguments -> .)
    MENOR           reduce using rule 157 (optionalValueArguments -> .)
    LCCT            reduce using rule 157 (optionalValueArguments -> .)
    COLONCOLON      reduce using rule 157 (optionalValueArguments -> .)
    PONTO           reduce using rule 157 (optionalValueArguments -> .)
    AS              reduce using rule 157 (optionalValueArguments -> .)
    MAISIGUAL       reduce using rule 157 (optionalValueArguments -> .)
    MENOSIGUAL      reduce using rule 157 (optionalValueArguments -> .)
    MULTIGUAL       reduce using rule 157 (optionalValueArguments -> .)
    DIVIGUAL        reduce using rule 157 (optionalValueArguments -> .)
    MODIGUAL        reduce using rule 157 (optionalValueArguments -> .)
    MULT            reduce using rule 157 (optionalValueArguments -> .)
    DIVIDE          reduce using rule 157 (optionalValueArguments -> .)
    MOD             reduce using rule 157 (optionalValueArguments -> .)
    PLUS            reduce using rule 157 (optionalValueArguments -> .)
    MINUS           reduce using rule 157 (optionalValueArguments -> .)
    PONTOPONTO      reduce using rule 157 (optionalValueArguments -> .)
    ID              reduce using rule 157 (optionalValueArguments -> .)
    CROSSINLINE     reduce using rule 157 (optionalValueArguments -> .)
    IMPORT          reduce using rule 157 (optionalValueArguments -> .)
    INIT            reduce using rule 157 (optionalValueArguments -> .)
    NOINLINE        reduce using rule 157 (optionalValueArguments -> .)
    OUT             reduce using rule 157 (optionalValueArguments -> .)
    VARARG          reduce using rule 157 (optionalValueArguments -> .)
    WHERE           reduce using rule 157 (optionalValueArguments -> .)
    OBJECT          reduce using rule 157 (optionalValueArguments -> .)
    CONST           reduce using rule 157 (optionalValueArguments -> .)
    CONSTRUCTOR     reduce using rule 157 (optionalValueArguments -> .)
    EOF             reduce using rule 157 (optionalValueArguments -> .)
    FALSE           reduce using rule 157 (optionalValueArguments -> .)
    FUNCTION        reduce using rule 157 (optionalValueArguments -> .)
    NULL            reduce using rule 157 (optionalValueArguments -> .)
    NULLABLE        reduce using rule 157 (optionalValueArguments -> .)
    NUMBER          reduce using rule 157 (optionalValueArguments -> .)
    OPERATOR        reduce using rule 157 (optionalValueArguments -> .)
    SMARTCAST       reduce using rule 157 (optionalValueArguments -> .)
    THIS            reduce using rule 157 (optionalValueArguments -> .)
    TRUE            reduce using rule 157 (optionalValueArguments -> .)
    VAL             reduce using rule 157 (optionalValueArguments -> .)
    VAR             reduce using rule 157 (optionalValueArguments -> .)
    WHEN            reduce using rule 157 (optionalValueArguments -> .)
    LONG            reduce using rule 157 (optionalValueArguments -> .)
    ARRAY           reduce using rule 157 (optionalValueArguments -> .)
    ELVIS           reduce using rule 157 (optionalValueArguments -> .)
    IN              reduce using rule 157 (optionalValueArguments -> .)
    NOT_IN          reduce using rule 157 (optionalValueArguments -> .)
    IS              reduce using rule 157 (optionalValueArguments -> .)
    NOT_IS          reduce using rule 157 (optionalValueArguments -> .)
    MAIOR           reduce using rule 157 (optionalValueArguments -> .)
    MENORIGUAL      reduce using rule 157 (optionalValueArguments -> .)
    MAIORIGUAL      reduce using rule 157 (optionalValueArguments -> .)
    DIFERENTE       reduce using rule 157 (optionalValueArguments -> .)
    IDENTIDADE      reduce using rule 157 (optionalValueArguments -> .)
    IGUALDADE       reduce using rule 157 (optionalValueArguments -> .)
    SEMIDENTIDADE   reduce using rule 157 (optionalValueArguments -> .)
    AND             reduce using rule 157 (optionalValueArguments -> .)
    OR              reduce using rule 157 (optionalValueArguments -> .)
    FUN             reduce using rule 157 (optionalValueArguments -> .)
    FOR             reduce using rule 157 (optionalValueArguments -> .)
    WHILE           reduce using rule 157 (optionalValueArguments -> .)
    DO              reduce using rule 157 (optionalValueArguments -> .)
    LITERAL_STRING  reduce using rule 157 (optionalValueArguments -> .)
    IF              reduce using rule 157 (optionalValueArguments -> .)
    RETURN          reduce using rule 157 (optionalValueArguments -> .)
    RETURN_AT       reduce using rule 157 (optionalValueArguments -> .)
    CONTINUE        reduce using rule 157 (optionalValueArguments -> .)
    CONTINUE_AT     reduce using rule 157 (optionalValueArguments -> .)
    BREAK           reduce using rule 157 (optionalValueArguments -> .)
    BREAK_AT        reduce using rule 157 (optionalValueArguments -> .)
    NOT             reduce using rule 157 (optionalValueArguments -> .)
    SUSPEND         reduce using rule 157 (optionalValueArguments -> .)
    COMMA           reduce using rule 157 (optionalValueArguments -> .)
    RPAREN          reduce using rule 157 (optionalValueArguments -> .)
    LCHAVE          reduce using rule 157 (optionalValueArguments -> .)
    RCCT            reduce using rule 157 (optionalValueArguments -> .)
    PV              reduce using rule 157 (optionalValueArguments -> .)
    ELSE            reduce using rule 157 (optionalValueArguments -> .)
    LPAREN          shift and go to state 291

  ! LPAREN          [ reduce using rule 157 (optionalValueArguments -> .) ]

    optionalValueArguments         shift and go to state 289
    valueArguments                 shift and go to state 290

state 194

    (120) prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .
    (121) prefixUnaryExpression -> postfixUnaryExpression .

  ! reduce/reduce conflict for FUN resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for FOR resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for WHILE resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for DO resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for VAR resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for VAL resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for ID resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for INIT resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for OUT resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for VARARG resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for WHERE resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for CONST resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for EOF resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for FALSE resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for NULL resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for THIS resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for TRUE resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for WHEN resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for LONG resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for LCCT resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for IF resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for RETURN resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for BREAK resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for MINUS resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for PLUS resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for NOT resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for MENOR resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for PONTO resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for AS resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for MULT resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for MOD resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for IN resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for IS resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for AND resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for OR resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for COMMA resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for RCCT resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for PV resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for ELSE resolved using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    INCREMENTO      reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    DECREMENTO      reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MENOR           reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    LCCT            reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    COLONCOLON      reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    PONTO           reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    LPAREN          reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    RCHAVE          reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    AS              reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MAISIGUAL       reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MENOSIGUAL      reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MULTIGUAL       reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    DIVIGUAL        reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MODIGUAL        reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MULT            reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    DIVIDE          reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MOD             reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    PLUS            reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MINUS           reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    PONTOPONTO      reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    ID              reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    CROSSINLINE     reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    IMPORT          reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    INIT            reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    NOINLINE        reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    OUT             reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    VARARG          reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    WHERE           reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    OBJECT          reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    CONST           reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    CONSTRUCTOR     reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    EOF             reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    FALSE           reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    FUNCTION        reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    NULL            reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    NULLABLE        reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    NUMBER          reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    OPERATOR        reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    SMARTCAST       reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    THIS            reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    TRUE            reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    VAL             reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    VAR             reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    WHEN            reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    LONG            reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    ARRAY           reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    ELVIS           reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    IN              reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    NOT_IN          reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    IS              reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    NOT_IS          reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MAIOR           reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MENORIGUAL      reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MAIORIGUAL      reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    DIFERENTE       reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    IDENTIDADE      reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    IGUALDADE       reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    SEMIDENTIDADE   reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    AND             reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    OR              reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    FUN             reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    FOR             reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    WHILE           reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    DO              reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    LITERAL_STRING  reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    IF              reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    RETURN          reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    RETURN_AT       reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    CONTINUE        reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    CONTINUE_AT     reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    BREAK           reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    BREAK_AT        reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    NOT             reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    SUSPEND         reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    COMMA           reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    RPAREN          reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    LCHAVE          reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    RCCT            reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    PV              reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    ELSE            reduce using rule 120 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)

  ! FUN             [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! FOR             [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! WHILE           [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! DO              [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! VAR             [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! VAL             [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! ID              [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! CROSSINLINE     [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! IMPORT          [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! INIT            [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! NOINLINE        [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! OUT             [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! VARARG          [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! WHERE           [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! OBJECT          [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! CONST           [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! CONSTRUCTOR     [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! EOF             [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! FALSE           [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! FUNCTION        [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! NULL            [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! NULLABLE        [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! NUMBER          [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! OPERATOR        [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! SMARTCAST       [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! THIS            [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! TRUE            [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! WHEN            [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! LONG            [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! ARRAY           [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! LPAREN          [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! LITERAL_STRING  [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! LCCT            [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! IF              [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! RETURN          [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! RETURN_AT       [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! CONTINUE        [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! CONTINUE_AT     [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! BREAK           [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! BREAK_AT        [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! RCHAVE          [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! INCREMENTO      [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! DECREMENTO      [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MINUS           [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! PLUS            [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! NOT             [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! SUSPEND         [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! COLONCOLON      [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! LCHAVE          [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MENOR           [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! PONTO           [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! AS              [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MAISIGUAL       [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MENOSIGUAL      [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MULTIGUAL       [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! DIVIGUAL        [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MODIGUAL        [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MULT            [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! DIVIDE          [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MOD             [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! PONTOPONTO      [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! ELVIS           [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! IN              [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! NOT_IN          [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! IS              [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! NOT_IS          [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MAIOR           [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MENORIGUAL      [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MAIORIGUAL      [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! DIFERENTE       [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! IDENTIDADE      [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! IGUALDADE       [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! AND             [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! OR              [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! COMMA           [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! RPAREN          [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! RCCT            [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! PV              [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! ELSE            [ reduce using rule 121 (prefixUnaryExpression -> postfixUnaryExpression .) ]


state 195

    (219) jumpExpression -> expression .

    FUN             reduce using rule 219 (jumpExpression -> expression .)
    FOR             reduce using rule 219 (jumpExpression -> expression .)
    WHILE           reduce using rule 219 (jumpExpression -> expression .)
    DO              reduce using rule 219 (jumpExpression -> expression .)
    VAR             reduce using rule 219 (jumpExpression -> expression .)
    VAL             reduce using rule 219 (jumpExpression -> expression .)
    ID              reduce using rule 219 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 219 (jumpExpression -> expression .)
    IMPORT          reduce using rule 219 (jumpExpression -> expression .)
    INIT            reduce using rule 219 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 219 (jumpExpression -> expression .)
    OUT             reduce using rule 219 (jumpExpression -> expression .)
    VARARG          reduce using rule 219 (jumpExpression -> expression .)
    WHERE           reduce using rule 219 (jumpExpression -> expression .)
    OBJECT          reduce using rule 219 (jumpExpression -> expression .)
    CONST           reduce using rule 219 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 219 (jumpExpression -> expression .)
    EOF             reduce using rule 219 (jumpExpression -> expression .)
    FALSE           reduce using rule 219 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 219 (jumpExpression -> expression .)
    NULL            reduce using rule 219 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 219 (jumpExpression -> expression .)
    NUMBER          reduce using rule 219 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 219 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 219 (jumpExpression -> expression .)
    THIS            reduce using rule 219 (jumpExpression -> expression .)
    TRUE            reduce using rule 219 (jumpExpression -> expression .)
    WHEN            reduce using rule 219 (jumpExpression -> expression .)
    LONG            reduce using rule 219 (jumpExpression -> expression .)
    ARRAY           reduce using rule 219 (jumpExpression -> expression .)
    LPAREN          reduce using rule 219 (jumpExpression -> expression .)
    LITERAL_STRING  reduce using rule 219 (jumpExpression -> expression .)
    LCCT            reduce using rule 219 (jumpExpression -> expression .)
    IF              reduce using rule 219 (jumpExpression -> expression .)
    RETURN          reduce using rule 219 (jumpExpression -> expression .)
    RETURN_AT       reduce using rule 219 (jumpExpression -> expression .)
    CONTINUE        reduce using rule 219 (jumpExpression -> expression .)
    CONTINUE_AT     reduce using rule 219 (jumpExpression -> expression .)
    BREAK           reduce using rule 219 (jumpExpression -> expression .)
    BREAK_AT        reduce using rule 219 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 219 (jumpExpression -> expression .)
    INCREMENTO      reduce using rule 219 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 219 (jumpExpression -> expression .)
    MINUS           reduce using rule 219 (jumpExpression -> expression .)
    PLUS            reduce using rule 219 (jumpExpression -> expression .)
    NOT             reduce using rule 219 (jumpExpression -> expression .)
    SUSPEND         reduce using rule 219 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 219 (jumpExpression -> expression .)
    LCHAVE          reduce using rule 219 (jumpExpression -> expression .)
    MENOR           reduce using rule 219 (jumpExpression -> expression .)
    PONTO           reduce using rule 219 (jumpExpression -> expression .)
    AS              reduce using rule 219 (jumpExpression -> expression .)
    MAISIGUAL       reduce using rule 219 (jumpExpression -> expression .)
    MENOSIGUAL      reduce using rule 219 (jumpExpression -> expression .)
    MULTIGUAL       reduce using rule 219 (jumpExpression -> expression .)
    DIVIGUAL        reduce using rule 219 (jumpExpression -> expression .)
    MODIGUAL        reduce using rule 219 (jumpExpression -> expression .)
    MULT            reduce using rule 219 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 219 (jumpExpression -> expression .)
    MOD             reduce using rule 219 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 219 (jumpExpression -> expression .)
    ELVIS           reduce using rule 219 (jumpExpression -> expression .)
    IN              reduce using rule 219 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 219 (jumpExpression -> expression .)
    IS              reduce using rule 219 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 219 (jumpExpression -> expression .)
    MAIOR           reduce using rule 219 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 219 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 219 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 219 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 219 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 219 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 219 (jumpExpression -> expression .)
    AND             reduce using rule 219 (jumpExpression -> expression .)
    OR              reduce using rule 219 (jumpExpression -> expression .)
    COMMA           reduce using rule 219 (jumpExpression -> expression .)
    RPAREN          reduce using rule 219 (jumpExpression -> expression .)
    RCCT            reduce using rule 219 (jumpExpression -> expression .)
    PV              reduce using rule 219 (jumpExpression -> expression .)
    ELSE            reduce using rule 219 (jumpExpression -> expression .)


state 196

    (95) conjunction -> equality AND . conjunction
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (12) expression -> . disjunction
    (69) receiverType -> . typeModifier parenthesizedType
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 86
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 136
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    SUSPEND         shift and go to state 48

    equality                       shift and go to state 84
    conjunction                    shift and go to state 292
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 107
    elvisExpression                shift and go to state 114
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    simpleIdentifier               shift and go to state 133
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120
    prefixUnaryExpression          shift and go to state 134
    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 135
    unaryPrefix                    shift and go to state 92
    primaryExpression              shift and go to state 82
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    expression                     shift and go to state 195
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    disjunction                    shift and go to state 69
    typeModifier                   shift and go to state 115

state 197

    (125) prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .

    LITERAL_STRING  reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    LPAREN          reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    ID              reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    CROSSINLINE     reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    IMPORT          reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    INIT            reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    NOINLINE        reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    OUT             reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    VARARG          reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    WHERE           reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    OBJECT          reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    CONST           reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    CONSTRUCTOR     reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    EOF             reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    FALSE           reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    FUNCTION        reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    NULL            reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    NULLABLE        reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    NUMBER          reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    OPERATOR        reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    SMARTCAST       reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    THIS            reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    TRUE            reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    VAL             reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    VAR             reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    WHEN            reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    LONG            reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    ARRAY           reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    LCCT            reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    IF              reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    RETURN          reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    RETURN_AT       reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    CONTINUE        reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    CONTINUE_AT     reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    BREAK           reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    BREAK_AT        reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    RCHAVE          reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    FUN             reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    SUSPEND         reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    INCREMENTO      reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    DECREMENTO      reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    MINUS           reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    PLUS            reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    NOT             reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    COLONCOLON      reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)


state 198

    (126) label -> simpleIdentifier .

    INCREMENTO      reduce using rule 126 (label -> simpleIdentifier .)
    DECREMENTO      reduce using rule 126 (label -> simpleIdentifier .)
    MINUS           reduce using rule 126 (label -> simpleIdentifier .)
    PLUS            reduce using rule 126 (label -> simpleIdentifier .)
    NOT             reduce using rule 126 (label -> simpleIdentifier .)
    ID              reduce using rule 126 (label -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 126 (label -> simpleIdentifier .)
    IMPORT          reduce using rule 126 (label -> simpleIdentifier .)
    INIT            reduce using rule 126 (label -> simpleIdentifier .)
    NOINLINE        reduce using rule 126 (label -> simpleIdentifier .)
    OUT             reduce using rule 126 (label -> simpleIdentifier .)
    VARARG          reduce using rule 126 (label -> simpleIdentifier .)
    WHERE           reduce using rule 126 (label -> simpleIdentifier .)
    OBJECT          reduce using rule 126 (label -> simpleIdentifier .)
    CONST           reduce using rule 126 (label -> simpleIdentifier .)
    CONSTRUCTOR     reduce using rule 126 (label -> simpleIdentifier .)
    EOF             reduce using rule 126 (label -> simpleIdentifier .)
    FALSE           reduce using rule 126 (label -> simpleIdentifier .)
    FUNCTION        reduce using rule 126 (label -> simpleIdentifier .)
    NULL            reduce using rule 126 (label -> simpleIdentifier .)
    NULLABLE        reduce using rule 126 (label -> simpleIdentifier .)
    NUMBER          reduce using rule 126 (label -> simpleIdentifier .)
    OPERATOR        reduce using rule 126 (label -> simpleIdentifier .)
    SMARTCAST       reduce using rule 126 (label -> simpleIdentifier .)
    THIS            reduce using rule 126 (label -> simpleIdentifier .)
    TRUE            reduce using rule 126 (label -> simpleIdentifier .)
    VAL             reduce using rule 126 (label -> simpleIdentifier .)
    VAR             reduce using rule 126 (label -> simpleIdentifier .)
    WHEN            reduce using rule 126 (label -> simpleIdentifier .)
    LONG            reduce using rule 126 (label -> simpleIdentifier .)
    ARRAY           reduce using rule 126 (label -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 126 (label -> simpleIdentifier .)
    LPAREN          reduce using rule 126 (label -> simpleIdentifier .)
    LCCT            reduce using rule 126 (label -> simpleIdentifier .)
    IF              reduce using rule 126 (label -> simpleIdentifier .)
    RETURN          reduce using rule 126 (label -> simpleIdentifier .)
    RETURN_AT       reduce using rule 126 (label -> simpleIdentifier .)
    CONTINUE        reduce using rule 126 (label -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 126 (label -> simpleIdentifier .)
    BREAK           reduce using rule 126 (label -> simpleIdentifier .)
    BREAK_AT        reduce using rule 126 (label -> simpleIdentifier .)
    RCHAVE          reduce using rule 126 (label -> simpleIdentifier .)
    FUN             reduce using rule 126 (label -> simpleIdentifier .)
    SUSPEND         reduce using rule 126 (label -> simpleIdentifier .)
    COLONCOLON      reduce using rule 126 (label -> simpleIdentifier .)


state 199

    (97) equality -> comparison equalityOperator . equality
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (12) expression -> . disjunction
    (69) receiverType -> . typeModifier parenthesizedType
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (48) typeModifier -> . SUSPEND
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction

    LITERAL_STRING  shift and go to state 86
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 136
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    SUSPEND         shift and go to state 48

    comparison                     shift and go to state 93
    equality                       shift and go to state 293
    infixOperation                 shift and go to state 107
    elvisExpression                shift and go to state 114
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    simpleIdentifier               shift and go to state 133
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120
    prefixUnaryExpression          shift and go to state 134
    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 135
    unaryPrefix                    shift and go to state 92
    primaryExpression              shift and go to state 82
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    expression                     shift and go to state 195
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    disjunction                    shift and go to state 69
    typeModifier                   shift and go to state 115
    conjunction                    shift and go to state 79

state 200

    (234) equalityOperator -> DIFERENTE .

    LITERAL_STRING  reduce using rule 234 (equalityOperator -> DIFERENTE .)
    INCREMENTO      reduce using rule 234 (equalityOperator -> DIFERENTE .)
    DECREMENTO      reduce using rule 234 (equalityOperator -> DIFERENTE .)
    MINUS           reduce using rule 234 (equalityOperator -> DIFERENTE .)
    PLUS            reduce using rule 234 (equalityOperator -> DIFERENTE .)
    NOT             reduce using rule 234 (equalityOperator -> DIFERENTE .)
    LPAREN          reduce using rule 234 (equalityOperator -> DIFERENTE .)
    ID              reduce using rule 234 (equalityOperator -> DIFERENTE .)
    CROSSINLINE     reduce using rule 234 (equalityOperator -> DIFERENTE .)
    IMPORT          reduce using rule 234 (equalityOperator -> DIFERENTE .)
    INIT            reduce using rule 234 (equalityOperator -> DIFERENTE .)
    NOINLINE        reduce using rule 234 (equalityOperator -> DIFERENTE .)
    OUT             reduce using rule 234 (equalityOperator -> DIFERENTE .)
    VARARG          reduce using rule 234 (equalityOperator -> DIFERENTE .)
    WHERE           reduce using rule 234 (equalityOperator -> DIFERENTE .)
    OBJECT          reduce using rule 234 (equalityOperator -> DIFERENTE .)
    CONST           reduce using rule 234 (equalityOperator -> DIFERENTE .)
    CONSTRUCTOR     reduce using rule 234 (equalityOperator -> DIFERENTE .)
    EOF             reduce using rule 234 (equalityOperator -> DIFERENTE .)
    FALSE           reduce using rule 234 (equalityOperator -> DIFERENTE .)
    FUNCTION        reduce using rule 234 (equalityOperator -> DIFERENTE .)
    NULL            reduce using rule 234 (equalityOperator -> DIFERENTE .)
    NULLABLE        reduce using rule 234 (equalityOperator -> DIFERENTE .)
    NUMBER          reduce using rule 234 (equalityOperator -> DIFERENTE .)
    OPERATOR        reduce using rule 234 (equalityOperator -> DIFERENTE .)
    SMARTCAST       reduce using rule 234 (equalityOperator -> DIFERENTE .)
    THIS            reduce using rule 234 (equalityOperator -> DIFERENTE .)
    TRUE            reduce using rule 234 (equalityOperator -> DIFERENTE .)
    VAL             reduce using rule 234 (equalityOperator -> DIFERENTE .)
    VAR             reduce using rule 234 (equalityOperator -> DIFERENTE .)
    WHEN            reduce using rule 234 (equalityOperator -> DIFERENTE .)
    LONG            reduce using rule 234 (equalityOperator -> DIFERENTE .)
    ARRAY           reduce using rule 234 (equalityOperator -> DIFERENTE .)
    LCCT            reduce using rule 234 (equalityOperator -> DIFERENTE .)
    IF              reduce using rule 234 (equalityOperator -> DIFERENTE .)
    RETURN          reduce using rule 234 (equalityOperator -> DIFERENTE .)
    RETURN_AT       reduce using rule 234 (equalityOperator -> DIFERENTE .)
    CONTINUE        reduce using rule 234 (equalityOperator -> DIFERENTE .)
    CONTINUE_AT     reduce using rule 234 (equalityOperator -> DIFERENTE .)
    BREAK           reduce using rule 234 (equalityOperator -> DIFERENTE .)
    BREAK_AT        reduce using rule 234 (equalityOperator -> DIFERENTE .)
    RCHAVE          reduce using rule 234 (equalityOperator -> DIFERENTE .)
    FUN             reduce using rule 234 (equalityOperator -> DIFERENTE .)
    SUSPEND         reduce using rule 234 (equalityOperator -> DIFERENTE .)
    COLONCOLON      reduce using rule 234 (equalityOperator -> DIFERENTE .)


state 201

    (235) equalityOperator -> IDENTIDADE .

    LITERAL_STRING  reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    INCREMENTO      reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    DECREMENTO      reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    MINUS           reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    PLUS            reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    NOT             reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    LPAREN          reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    ID              reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    CROSSINLINE     reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    IMPORT          reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    INIT            reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    NOINLINE        reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    OUT             reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    VARARG          reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    WHERE           reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    OBJECT          reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    CONST           reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    CONSTRUCTOR     reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    EOF             reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    FALSE           reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    FUNCTION        reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    NULL            reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    NULLABLE        reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    NUMBER          reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    OPERATOR        reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    SMARTCAST       reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    THIS            reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    TRUE            reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    VAL             reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    VAR             reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    WHEN            reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    LONG            reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    ARRAY           reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    LCCT            reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    IF              reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    RETURN          reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    RETURN_AT       reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    CONTINUE        reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    CONTINUE_AT     reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    BREAK           reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    BREAK_AT        reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    RCHAVE          reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    FUN             reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    SUSPEND         reduce using rule 235 (equalityOperator -> IDENTIDADE .)
    COLONCOLON      reduce using rule 235 (equalityOperator -> IDENTIDADE .)


state 202

    (236) equalityOperator -> IGUALDADE .

    LITERAL_STRING  reduce using rule 236 (equalityOperator -> IGUALDADE .)
    INCREMENTO      reduce using rule 236 (equalityOperator -> IGUALDADE .)
    DECREMENTO      reduce using rule 236 (equalityOperator -> IGUALDADE .)
    MINUS           reduce using rule 236 (equalityOperator -> IGUALDADE .)
    PLUS            reduce using rule 236 (equalityOperator -> IGUALDADE .)
    NOT             reduce using rule 236 (equalityOperator -> IGUALDADE .)
    LPAREN          reduce using rule 236 (equalityOperator -> IGUALDADE .)
    ID              reduce using rule 236 (equalityOperator -> IGUALDADE .)
    CROSSINLINE     reduce using rule 236 (equalityOperator -> IGUALDADE .)
    IMPORT          reduce using rule 236 (equalityOperator -> IGUALDADE .)
    INIT            reduce using rule 236 (equalityOperator -> IGUALDADE .)
    NOINLINE        reduce using rule 236 (equalityOperator -> IGUALDADE .)
    OUT             reduce using rule 236 (equalityOperator -> IGUALDADE .)
    VARARG          reduce using rule 236 (equalityOperator -> IGUALDADE .)
    WHERE           reduce using rule 236 (equalityOperator -> IGUALDADE .)
    OBJECT          reduce using rule 236 (equalityOperator -> IGUALDADE .)
    CONST           reduce using rule 236 (equalityOperator -> IGUALDADE .)
    CONSTRUCTOR     reduce using rule 236 (equalityOperator -> IGUALDADE .)
    EOF             reduce using rule 236 (equalityOperator -> IGUALDADE .)
    FALSE           reduce using rule 236 (equalityOperator -> IGUALDADE .)
    FUNCTION        reduce using rule 236 (equalityOperator -> IGUALDADE .)
    NULL            reduce using rule 236 (equalityOperator -> IGUALDADE .)
    NULLABLE        reduce using rule 236 (equalityOperator -> IGUALDADE .)
    NUMBER          reduce using rule 236 (equalityOperator -> IGUALDADE .)
    OPERATOR        reduce using rule 236 (equalityOperator -> IGUALDADE .)
    SMARTCAST       reduce using rule 236 (equalityOperator -> IGUALDADE .)
    THIS            reduce using rule 236 (equalityOperator -> IGUALDADE .)
    TRUE            reduce using rule 236 (equalityOperator -> IGUALDADE .)
    VAL             reduce using rule 236 (equalityOperator -> IGUALDADE .)
    VAR             reduce using rule 236 (equalityOperator -> IGUALDADE .)
    WHEN            reduce using rule 236 (equalityOperator -> IGUALDADE .)
    LONG            reduce using rule 236 (equalityOperator -> IGUALDADE .)
    ARRAY           reduce using rule 236 (equalityOperator -> IGUALDADE .)
    LCCT            reduce using rule 236 (equalityOperator -> IGUALDADE .)
    IF              reduce using rule 236 (equalityOperator -> IGUALDADE .)
    RETURN          reduce using rule 236 (equalityOperator -> IGUALDADE .)
    RETURN_AT       reduce using rule 236 (equalityOperator -> IGUALDADE .)
    CONTINUE        reduce using rule 236 (equalityOperator -> IGUALDADE .)
    CONTINUE_AT     reduce using rule 236 (equalityOperator -> IGUALDADE .)
    BREAK           reduce using rule 236 (equalityOperator -> IGUALDADE .)
    BREAK_AT        reduce using rule 236 (equalityOperator -> IGUALDADE .)
    RCHAVE          reduce using rule 236 (equalityOperator -> IGUALDADE .)
    FUN             reduce using rule 236 (equalityOperator -> IGUALDADE .)
    SUSPEND         reduce using rule 236 (equalityOperator -> IGUALDADE .)
    COLONCOLON      reduce using rule 236 (equalityOperator -> IGUALDADE .)


state 203

    (237) equalityOperator -> SEMIDENTIDADE .

    LITERAL_STRING  reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    INCREMENTO      reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    DECREMENTO      reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    MINUS           reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    PLUS            reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    NOT             reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    LPAREN          reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    ID              reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    CROSSINLINE     reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    IMPORT          reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    INIT            reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    NOINLINE        reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    OUT             reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    VARARG          reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    WHERE           reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    OBJECT          reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    CONST           reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    CONSTRUCTOR     reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    EOF             reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    FALSE           reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    FUNCTION        reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    NULL            reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    NULLABLE        reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    NUMBER          reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    OPERATOR        reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    SMARTCAST       reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    THIS            reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    TRUE            reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    VAL             reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    VAR             reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    WHEN            reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    LONG            reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    ARRAY           reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    LCCT            reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    IF              reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    RETURN          reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    RETURN_AT       reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    CONTINUE        reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    CONTINUE_AT     reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    BREAK           reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    BREAK_AT        reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    RCHAVE          reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    FUN             reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    SUSPEND         reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)
    COLONCOLON      reduce using rule 237 (equalityOperator -> SEMIDENTIDADE .)


state 204

    (224) callableReference -> optionalReceiverType COLONCOLON . simpleIdentifierOrClass
    (227) simpleIdentifierOrClass -> . simpleIdentifier
    (228) simpleIdentifierOrClass -> . CLASS
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY

    CLASS           shift and go to state 296
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

    simpleIdentifierOrClass        shift and go to state 294
    simpleIdentifier               shift and go to state 295

state 205

    (179) collectionLiteral -> LCCT collectionLiteralRecursive . RCCT

    RCCT            shift and go to state 297


state 206

    (180) collectionLiteral -> LCCT RCCT .

    INCREMENTO      reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    DECREMENTO      reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    MENOR           reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    LCCT            reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    COLONCOLON      reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    PONTO           reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    LPAREN          reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    RCHAVE          reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    AS              reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    MAISIGUAL       reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    MENOSIGUAL      reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    MULTIGUAL       reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    DIVIGUAL        reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    MODIGUAL        reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    MULT            reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    DIVIDE          reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    MOD             reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    PLUS            reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    MINUS           reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    PONTOPONTO      reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    ID              reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    CROSSINLINE     reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    IMPORT          reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    INIT            reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    NOINLINE        reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    OUT             reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    VARARG          reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    WHERE           reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    OBJECT          reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    CONST           reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    CONSTRUCTOR     reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    EOF             reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    FALSE           reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    FUNCTION        reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    NULL            reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    NULLABLE        reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    NUMBER          reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    OPERATOR        reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    SMARTCAST       reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    THIS            reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    TRUE            reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    VAL             reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    VAR             reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    WHEN            reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    LONG            reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    ARRAY           reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    ELVIS           reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    IN              reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    NOT_IN          reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    IS              reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    NOT_IS          reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    MAIOR           reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    MENORIGUAL      reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    MAIORIGUAL      reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    DIFERENTE       reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    IDENTIDADE      reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    IGUALDADE       reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    SEMIDENTIDADE   reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    AND             reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    OR              reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    FUN             reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    FOR             reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    WHILE           reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    DO              reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    LITERAL_STRING  reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    IF              reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    RETURN          reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    RETURN_AT       reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    CONTINUE        reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    CONTINUE_AT     reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    BREAK           reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    BREAK_AT        reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    NOT             reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    SUSPEND         reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    COMMA           reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    RPAREN          reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    LCHAVE          reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    RCCT            reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    PV              reduce using rule 180 (collectionLiteral -> LCCT RCCT .)
    ELSE            reduce using rule 180 (collectionLiteral -> LCCT RCCT .)


state 207

    (181) collectionLiteralRecursive -> expression .
    (182) collectionLiteralRecursive -> expression . COMMA collectionLiteralRecursive
    (219) jumpExpression -> expression .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RCCT resolved using rule 181 (collectionLiteralRecursive -> expression .)
    RCCT            reduce using rule 181 (collectionLiteralRecursive -> expression .)
    COMMA           shift and go to state 298
    AS              reduce using rule 219 (jumpExpression -> expression .)
    MULT            reduce using rule 219 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 219 (jumpExpression -> expression .)
    MOD             reduce using rule 219 (jumpExpression -> expression .)
    PLUS            reduce using rule 219 (jumpExpression -> expression .)
    MINUS           reduce using rule 219 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 219 (jumpExpression -> expression .)
    ID              reduce using rule 219 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 219 (jumpExpression -> expression .)
    IMPORT          reduce using rule 219 (jumpExpression -> expression .)
    INIT            reduce using rule 219 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 219 (jumpExpression -> expression .)
    OUT             reduce using rule 219 (jumpExpression -> expression .)
    VARARG          reduce using rule 219 (jumpExpression -> expression .)
    WHERE           reduce using rule 219 (jumpExpression -> expression .)
    OBJECT          reduce using rule 219 (jumpExpression -> expression .)
    CONST           reduce using rule 219 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 219 (jumpExpression -> expression .)
    EOF             reduce using rule 219 (jumpExpression -> expression .)
    FALSE           reduce using rule 219 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 219 (jumpExpression -> expression .)
    NULL            reduce using rule 219 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 219 (jumpExpression -> expression .)
    NUMBER          reduce using rule 219 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 219 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 219 (jumpExpression -> expression .)
    THIS            reduce using rule 219 (jumpExpression -> expression .)
    TRUE            reduce using rule 219 (jumpExpression -> expression .)
    VAL             reduce using rule 219 (jumpExpression -> expression .)
    VAR             reduce using rule 219 (jumpExpression -> expression .)
    WHEN            reduce using rule 219 (jumpExpression -> expression .)
    LONG            reduce using rule 219 (jumpExpression -> expression .)
    ARRAY           reduce using rule 219 (jumpExpression -> expression .)
    ELVIS           reduce using rule 219 (jumpExpression -> expression .)
    IN              reduce using rule 219 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 219 (jumpExpression -> expression .)
    IS              reduce using rule 219 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 219 (jumpExpression -> expression .)
    MENOR           reduce using rule 219 (jumpExpression -> expression .)
    MAIOR           reduce using rule 219 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 219 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 219 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 219 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 219 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 219 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 219 (jumpExpression -> expression .)
    AND             reduce using rule 219 (jumpExpression -> expression .)
    OR              reduce using rule 219 (jumpExpression -> expression .)
    INCREMENTO      reduce using rule 219 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 219 (jumpExpression -> expression .)
    LCCT            reduce using rule 219 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 219 (jumpExpression -> expression .)
    PONTO           reduce using rule 219 (jumpExpression -> expression .)
    LPAREN          reduce using rule 219 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 219 (jumpExpression -> expression .)

  ! COMMA           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RCCT            [ reduce using rule 219 (jumpExpression -> expression .) ]


state 208

    (211) ifExpression -> IF LPAREN . expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> IF LPAREN . expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (12) expression -> . disjunction
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 86
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 136
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 299
    disjunction                    shift and go to state 69
    conjunction                    shift and go to state 79
    equality                       shift and go to state 84
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 107
    elvisExpression                shift and go to state 114
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    simpleIdentifier               shift and go to state 133
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120
    prefixUnaryExpression          shift and go to state 134
    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 135
    unaryPrefix                    shift and go to state 92
    primaryExpression              shift and go to state 82
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    typeModifier                   shift and go to state 115

state 209

    (217) jumpExpression -> RETURN expression .
    (219) jumpExpression -> expression .

  ! reduce/reduce conflict for FUN resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for FOR resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for DO resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for VAR resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for VAL resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for ID resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for INIT resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for OUT resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for VARARG resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for WHERE resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for CONST resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for EOF resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for FALSE resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for NULL resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for THIS resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for TRUE resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for WHEN resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for LONG resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for LCCT resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for IF resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for RETURN resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for BREAK resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for NOT resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MENOR resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for PONTO resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for AS resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MULT resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MOD resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for IN resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for IS resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for AND resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for OR resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for RCCT resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for PV resolved using rule 217 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 217 (jumpExpression -> RETURN expression .)
    INCREMENTO      reduce using rule 217 (jumpExpression -> RETURN expression .)
    DECREMENTO      reduce using rule 217 (jumpExpression -> RETURN expression .)
    MENOR           reduce using rule 217 (jumpExpression -> RETURN expression .)
    LCCT            reduce using rule 217 (jumpExpression -> RETURN expression .)
    COLONCOLON      reduce using rule 217 (jumpExpression -> RETURN expression .)
    PONTO           reduce using rule 217 (jumpExpression -> RETURN expression .)
    LPAREN          reduce using rule 217 (jumpExpression -> RETURN expression .)
    RCHAVE          reduce using rule 217 (jumpExpression -> RETURN expression .)
    AS              reduce using rule 217 (jumpExpression -> RETURN expression .)
    MAISIGUAL       reduce using rule 217 (jumpExpression -> RETURN expression .)
    MENOSIGUAL      reduce using rule 217 (jumpExpression -> RETURN expression .)
    MULTIGUAL       reduce using rule 217 (jumpExpression -> RETURN expression .)
    DIVIGUAL        reduce using rule 217 (jumpExpression -> RETURN expression .)
    MODIGUAL        reduce using rule 217 (jumpExpression -> RETURN expression .)
    MULT            reduce using rule 217 (jumpExpression -> RETURN expression .)
    DIVIDE          reduce using rule 217 (jumpExpression -> RETURN expression .)
    MOD             reduce using rule 217 (jumpExpression -> RETURN expression .)
    PLUS            reduce using rule 217 (jumpExpression -> RETURN expression .)
    MINUS           reduce using rule 217 (jumpExpression -> RETURN expression .)
    PONTOPONTO      reduce using rule 217 (jumpExpression -> RETURN expression .)
    ID              reduce using rule 217 (jumpExpression -> RETURN expression .)
    CROSSINLINE     reduce using rule 217 (jumpExpression -> RETURN expression .)
    IMPORT          reduce using rule 217 (jumpExpression -> RETURN expression .)
    INIT            reduce using rule 217 (jumpExpression -> RETURN expression .)
    NOINLINE        reduce using rule 217 (jumpExpression -> RETURN expression .)
    OUT             reduce using rule 217 (jumpExpression -> RETURN expression .)
    VARARG          reduce using rule 217 (jumpExpression -> RETURN expression .)
    WHERE           reduce using rule 217 (jumpExpression -> RETURN expression .)
    OBJECT          reduce using rule 217 (jumpExpression -> RETURN expression .)
    CONST           reduce using rule 217 (jumpExpression -> RETURN expression .)
    CONSTRUCTOR     reduce using rule 217 (jumpExpression -> RETURN expression .)
    EOF             reduce using rule 217 (jumpExpression -> RETURN expression .)
    FALSE           reduce using rule 217 (jumpExpression -> RETURN expression .)
    FUNCTION        reduce using rule 217 (jumpExpression -> RETURN expression .)
    NULL            reduce using rule 217 (jumpExpression -> RETURN expression .)
    NULLABLE        reduce using rule 217 (jumpExpression -> RETURN expression .)
    NUMBER          reduce using rule 217 (jumpExpression -> RETURN expression .)
    OPERATOR        reduce using rule 217 (jumpExpression -> RETURN expression .)
    SMARTCAST       reduce using rule 217 (jumpExpression -> RETURN expression .)
    THIS            reduce using rule 217 (jumpExpression -> RETURN expression .)
    TRUE            reduce using rule 217 (jumpExpression -> RETURN expression .)
    VAL             reduce using rule 217 (jumpExpression -> RETURN expression .)
    VAR             reduce using rule 217 (jumpExpression -> RETURN expression .)
    WHEN            reduce using rule 217 (jumpExpression -> RETURN expression .)
    LONG            reduce using rule 217 (jumpExpression -> RETURN expression .)
    ARRAY           reduce using rule 217 (jumpExpression -> RETURN expression .)
    ELVIS           reduce using rule 217 (jumpExpression -> RETURN expression .)
    IN              reduce using rule 217 (jumpExpression -> RETURN expression .)
    NOT_IN          reduce using rule 217 (jumpExpression -> RETURN expression .)
    IS              reduce using rule 217 (jumpExpression -> RETURN expression .)
    NOT_IS          reduce using rule 217 (jumpExpression -> RETURN expression .)
    MAIOR           reduce using rule 217 (jumpExpression -> RETURN expression .)
    MENORIGUAL      reduce using rule 217 (jumpExpression -> RETURN expression .)
    MAIORIGUAL      reduce using rule 217 (jumpExpression -> RETURN expression .)
    DIFERENTE       reduce using rule 217 (jumpExpression -> RETURN expression .)
    IDENTIDADE      reduce using rule 217 (jumpExpression -> RETURN expression .)
    IGUALDADE       reduce using rule 217 (jumpExpression -> RETURN expression .)
    SEMIDENTIDADE   reduce using rule 217 (jumpExpression -> RETURN expression .)
    AND             reduce using rule 217 (jumpExpression -> RETURN expression .)
    OR              reduce using rule 217 (jumpExpression -> RETURN expression .)
    FUN             reduce using rule 217 (jumpExpression -> RETURN expression .)
    FOR             reduce using rule 217 (jumpExpression -> RETURN expression .)
    WHILE           reduce using rule 217 (jumpExpression -> RETURN expression .)
    DO              reduce using rule 217 (jumpExpression -> RETURN expression .)
    LITERAL_STRING  reduce using rule 217 (jumpExpression -> RETURN expression .)
    IF              reduce using rule 217 (jumpExpression -> RETURN expression .)
    RETURN          reduce using rule 217 (jumpExpression -> RETURN expression .)
    RETURN_AT       reduce using rule 217 (jumpExpression -> RETURN expression .)
    CONTINUE        reduce using rule 217 (jumpExpression -> RETURN expression .)
    CONTINUE_AT     reduce using rule 217 (jumpExpression -> RETURN expression .)
    BREAK           reduce using rule 217 (jumpExpression -> RETURN expression .)
    BREAK_AT        reduce using rule 217 (jumpExpression -> RETURN expression .)
    NOT             reduce using rule 217 (jumpExpression -> RETURN expression .)
    SUSPEND         reduce using rule 217 (jumpExpression -> RETURN expression .)
    COMMA           reduce using rule 217 (jumpExpression -> RETURN expression .)
    RPAREN          reduce using rule 217 (jumpExpression -> RETURN expression .)
    LCHAVE          reduce using rule 217 (jumpExpression -> RETURN expression .)
    RCCT            reduce using rule 217 (jumpExpression -> RETURN expression .)
    PV              reduce using rule 217 (jumpExpression -> RETURN expression .)
    ELSE            reduce using rule 217 (jumpExpression -> RETURN expression .)

  ! FUN             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! FOR             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! WHILE           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DO              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! VAR             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! VAL             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! ID              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CROSSINLINE     [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IMPORT          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! INIT            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NOINLINE        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! OUT             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! VARARG          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! WHERE           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! OBJECT          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CONST           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CONSTRUCTOR     [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! EOF             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! FALSE           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! FUNCTION        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NULL            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NULLABLE        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NUMBER          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! OPERATOR        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! SMARTCAST       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! THIS            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! TRUE            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! WHEN            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LONG            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! ARRAY           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LPAREN          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LITERAL_STRING  [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LCCT            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IF              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RETURN          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RETURN_AT       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CONTINUE        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CONTINUE_AT     [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! BREAK           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! BREAK_AT        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RCHAVE          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! INCREMENTO      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DECREMENTO      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MINUS           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! PLUS            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NOT             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! SUSPEND         [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! COLONCOLON      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LCHAVE          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MENOR           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! PONTO           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! AS              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MAISIGUAL       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MENOSIGUAL      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MULTIGUAL       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DIVIGUAL        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MODIGUAL        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MULT            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DIVIDE          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MOD             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! PONTOPONTO      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! ELVIS           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IN              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NOT_IN          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IS              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NOT_IS          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MAIOR           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MENORIGUAL      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MAIORIGUAL      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DIFERENTE       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IDENTIDADE      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IGUALDADE       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! AND             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! OR              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! COMMA           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RCCT            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! PV              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! ELSE            [ reduce using rule 219 (jumpExpression -> expression .) ]


state 210

    (218) jumpExpression -> RETURN_AT expression .
    (219) jumpExpression -> expression .

  ! reduce/reduce conflict for FUN resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for FOR resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for DO resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for VAR resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for VAL resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for ID resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for INIT resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for OUT resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for VARARG resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for WHERE resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for CONST resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for EOF resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for FALSE resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for NULL resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for THIS resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for TRUE resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for WHEN resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for LONG resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for LCCT resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for IF resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for RETURN resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for BREAK resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for NOT resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MENOR resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for PONTO resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for AS resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MULT resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MOD resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for IN resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for IS resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for AND resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for OR resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for RCCT resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for PV resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 218 (jumpExpression -> RETURN_AT expression .)
    INCREMENTO      reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    DECREMENTO      reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    MENOR           reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    LCCT            reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    COLONCOLON      reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    PONTO           reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    LPAREN          reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    RCHAVE          reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    AS              reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    MAISIGUAL       reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    MENOSIGUAL      reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    MULTIGUAL       reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    DIVIGUAL        reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    MODIGUAL        reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    MULT            reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    DIVIDE          reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    MOD             reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    PLUS            reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    MINUS           reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    PONTOPONTO      reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    ID              reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    CROSSINLINE     reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    IMPORT          reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    INIT            reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    NOINLINE        reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    OUT             reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    VARARG          reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    WHERE           reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    OBJECT          reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    CONST           reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    CONSTRUCTOR     reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    EOF             reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    FALSE           reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    FUNCTION        reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    NULL            reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    NULLABLE        reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    NUMBER          reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    OPERATOR        reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    SMARTCAST       reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    THIS            reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    TRUE            reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    VAL             reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    VAR             reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    WHEN            reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    LONG            reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    ARRAY           reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    ELVIS           reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    IN              reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    NOT_IN          reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    IS              reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    NOT_IS          reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    MAIOR           reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    MENORIGUAL      reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    MAIORIGUAL      reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    DIFERENTE       reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    IDENTIDADE      reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    IGUALDADE       reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    SEMIDENTIDADE   reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    AND             reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    OR              reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    FUN             reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    FOR             reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    WHILE           reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    DO              reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    LITERAL_STRING  reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    IF              reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    RETURN          reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    RETURN_AT       reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    CONTINUE        reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    CONTINUE_AT     reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    BREAK           reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    BREAK_AT        reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    NOT             reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    SUSPEND         reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    COMMA           reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    RPAREN          reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    LCHAVE          reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    RCCT            reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    PV              reduce using rule 218 (jumpExpression -> RETURN_AT expression .)
    ELSE            reduce using rule 218 (jumpExpression -> RETURN_AT expression .)

  ! FUN             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! FOR             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! WHILE           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DO              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! VAR             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! VAL             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! ID              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CROSSINLINE     [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IMPORT          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! INIT            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NOINLINE        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! OUT             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! VARARG          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! WHERE           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! OBJECT          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CONST           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CONSTRUCTOR     [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! EOF             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! FALSE           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! FUNCTION        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NULL            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NULLABLE        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NUMBER          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! OPERATOR        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! SMARTCAST       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! THIS            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! TRUE            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! WHEN            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LONG            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! ARRAY           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LPAREN          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LITERAL_STRING  [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LCCT            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IF              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RETURN          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RETURN_AT       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CONTINUE        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CONTINUE_AT     [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! BREAK           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! BREAK_AT        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RCHAVE          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! INCREMENTO      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DECREMENTO      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MINUS           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! PLUS            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NOT             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! SUSPEND         [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! COLONCOLON      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LCHAVE          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MENOR           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! PONTO           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! AS              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MAISIGUAL       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MENOSIGUAL      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MULTIGUAL       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DIVIGUAL        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MODIGUAL        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MULT            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DIVIDE          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MOD             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! PONTOPONTO      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! ELVIS           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IN              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NOT_IN          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IS              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NOT_IS          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MAIOR           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MENORIGUAL      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MAIORIGUAL      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DIFERENTE       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IDENTIDADE      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IGUALDADE       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! AND             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! OR              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! COMMA           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RCCT            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! PV              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! ELSE            [ reduce using rule 219 (jumpExpression -> expression .) ]


state 211

    (99) comparison -> infixOperation comparisonOperator . infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (12) expression -> . disjunction
    (69) receiverType -> . typeModifier parenthesizedType
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (48) typeModifier -> . SUSPEND
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation

    LITERAL_STRING  shift and go to state 86
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 136
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    SUSPEND         shift and go to state 48

    infixOperation                 shift and go to state 300
    elvisExpression                shift and go to state 114
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    simpleIdentifier               shift and go to state 133
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120
    prefixUnaryExpression          shift and go to state 134
    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 135
    unaryPrefix                    shift and go to state 92
    primaryExpression              shift and go to state 82
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    expression                     shift and go to state 195
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    disjunction                    shift and go to state 69
    typeModifier                   shift and go to state 115
    conjunction                    shift and go to state 79
    equality                       shift and go to state 84
    comparison                     shift and go to state 93

state 212

    (238) comparisonOperator -> MENOR .

    LITERAL_STRING  reduce using rule 238 (comparisonOperator -> MENOR .)
    INCREMENTO      reduce using rule 238 (comparisonOperator -> MENOR .)
    DECREMENTO      reduce using rule 238 (comparisonOperator -> MENOR .)
    MINUS           reduce using rule 238 (comparisonOperator -> MENOR .)
    PLUS            reduce using rule 238 (comparisonOperator -> MENOR .)
    NOT             reduce using rule 238 (comparisonOperator -> MENOR .)
    LPAREN          reduce using rule 238 (comparisonOperator -> MENOR .)
    ID              reduce using rule 238 (comparisonOperator -> MENOR .)
    CROSSINLINE     reduce using rule 238 (comparisonOperator -> MENOR .)
    IMPORT          reduce using rule 238 (comparisonOperator -> MENOR .)
    INIT            reduce using rule 238 (comparisonOperator -> MENOR .)
    NOINLINE        reduce using rule 238 (comparisonOperator -> MENOR .)
    OUT             reduce using rule 238 (comparisonOperator -> MENOR .)
    VARARG          reduce using rule 238 (comparisonOperator -> MENOR .)
    WHERE           reduce using rule 238 (comparisonOperator -> MENOR .)
    OBJECT          reduce using rule 238 (comparisonOperator -> MENOR .)
    CONST           reduce using rule 238 (comparisonOperator -> MENOR .)
    CONSTRUCTOR     reduce using rule 238 (comparisonOperator -> MENOR .)
    EOF             reduce using rule 238 (comparisonOperator -> MENOR .)
    FALSE           reduce using rule 238 (comparisonOperator -> MENOR .)
    FUNCTION        reduce using rule 238 (comparisonOperator -> MENOR .)
    NULL            reduce using rule 238 (comparisonOperator -> MENOR .)
    NULLABLE        reduce using rule 238 (comparisonOperator -> MENOR .)
    NUMBER          reduce using rule 238 (comparisonOperator -> MENOR .)
    OPERATOR        reduce using rule 238 (comparisonOperator -> MENOR .)
    SMARTCAST       reduce using rule 238 (comparisonOperator -> MENOR .)
    THIS            reduce using rule 238 (comparisonOperator -> MENOR .)
    TRUE            reduce using rule 238 (comparisonOperator -> MENOR .)
    VAL             reduce using rule 238 (comparisonOperator -> MENOR .)
    VAR             reduce using rule 238 (comparisonOperator -> MENOR .)
    WHEN            reduce using rule 238 (comparisonOperator -> MENOR .)
    LONG            reduce using rule 238 (comparisonOperator -> MENOR .)
    ARRAY           reduce using rule 238 (comparisonOperator -> MENOR .)
    LCCT            reduce using rule 238 (comparisonOperator -> MENOR .)
    IF              reduce using rule 238 (comparisonOperator -> MENOR .)
    RETURN          reduce using rule 238 (comparisonOperator -> MENOR .)
    RETURN_AT       reduce using rule 238 (comparisonOperator -> MENOR .)
    CONTINUE        reduce using rule 238 (comparisonOperator -> MENOR .)
    CONTINUE_AT     reduce using rule 238 (comparisonOperator -> MENOR .)
    BREAK           reduce using rule 238 (comparisonOperator -> MENOR .)
    BREAK_AT        reduce using rule 238 (comparisonOperator -> MENOR .)
    RCHAVE          reduce using rule 238 (comparisonOperator -> MENOR .)
    FUN             reduce using rule 238 (comparisonOperator -> MENOR .)
    SUSPEND         reduce using rule 238 (comparisonOperator -> MENOR .)
    COLONCOLON      reduce using rule 238 (comparisonOperator -> MENOR .)


state 213

    (239) comparisonOperator -> MAIOR .

    LITERAL_STRING  reduce using rule 239 (comparisonOperator -> MAIOR .)
    INCREMENTO      reduce using rule 239 (comparisonOperator -> MAIOR .)
    DECREMENTO      reduce using rule 239 (comparisonOperator -> MAIOR .)
    MINUS           reduce using rule 239 (comparisonOperator -> MAIOR .)
    PLUS            reduce using rule 239 (comparisonOperator -> MAIOR .)
    NOT             reduce using rule 239 (comparisonOperator -> MAIOR .)
    LPAREN          reduce using rule 239 (comparisonOperator -> MAIOR .)
    ID              reduce using rule 239 (comparisonOperator -> MAIOR .)
    CROSSINLINE     reduce using rule 239 (comparisonOperator -> MAIOR .)
    IMPORT          reduce using rule 239 (comparisonOperator -> MAIOR .)
    INIT            reduce using rule 239 (comparisonOperator -> MAIOR .)
    NOINLINE        reduce using rule 239 (comparisonOperator -> MAIOR .)
    OUT             reduce using rule 239 (comparisonOperator -> MAIOR .)
    VARARG          reduce using rule 239 (comparisonOperator -> MAIOR .)
    WHERE           reduce using rule 239 (comparisonOperator -> MAIOR .)
    OBJECT          reduce using rule 239 (comparisonOperator -> MAIOR .)
    CONST           reduce using rule 239 (comparisonOperator -> MAIOR .)
    CONSTRUCTOR     reduce using rule 239 (comparisonOperator -> MAIOR .)
    EOF             reduce using rule 239 (comparisonOperator -> MAIOR .)
    FALSE           reduce using rule 239 (comparisonOperator -> MAIOR .)
    FUNCTION        reduce using rule 239 (comparisonOperator -> MAIOR .)
    NULL            reduce using rule 239 (comparisonOperator -> MAIOR .)
    NULLABLE        reduce using rule 239 (comparisonOperator -> MAIOR .)
    NUMBER          reduce using rule 239 (comparisonOperator -> MAIOR .)
    OPERATOR        reduce using rule 239 (comparisonOperator -> MAIOR .)
    SMARTCAST       reduce using rule 239 (comparisonOperator -> MAIOR .)
    THIS            reduce using rule 239 (comparisonOperator -> MAIOR .)
    TRUE            reduce using rule 239 (comparisonOperator -> MAIOR .)
    VAL             reduce using rule 239 (comparisonOperator -> MAIOR .)
    VAR             reduce using rule 239 (comparisonOperator -> MAIOR .)
    WHEN            reduce using rule 239 (comparisonOperator -> MAIOR .)
    LONG            reduce using rule 239 (comparisonOperator -> MAIOR .)
    ARRAY           reduce using rule 239 (comparisonOperator -> MAIOR .)
    LCCT            reduce using rule 239 (comparisonOperator -> MAIOR .)
    IF              reduce using rule 239 (comparisonOperator -> MAIOR .)
    RETURN          reduce using rule 239 (comparisonOperator -> MAIOR .)
    RETURN_AT       reduce using rule 239 (comparisonOperator -> MAIOR .)
    CONTINUE        reduce using rule 239 (comparisonOperator -> MAIOR .)
    CONTINUE_AT     reduce using rule 239 (comparisonOperator -> MAIOR .)
    BREAK           reduce using rule 239 (comparisonOperator -> MAIOR .)
    BREAK_AT        reduce using rule 239 (comparisonOperator -> MAIOR .)
    RCHAVE          reduce using rule 239 (comparisonOperator -> MAIOR .)
    FUN             reduce using rule 239 (comparisonOperator -> MAIOR .)
    SUSPEND         reduce using rule 239 (comparisonOperator -> MAIOR .)
    COLONCOLON      reduce using rule 239 (comparisonOperator -> MAIOR .)


state 214

    (240) comparisonOperator -> MENORIGUAL .

    LITERAL_STRING  reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    INCREMENTO      reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    DECREMENTO      reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    MINUS           reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    PLUS            reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    NOT             reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    LPAREN          reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    ID              reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    CROSSINLINE     reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    IMPORT          reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    INIT            reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    NOINLINE        reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    OUT             reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    VARARG          reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    WHERE           reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    OBJECT          reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    CONST           reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    CONSTRUCTOR     reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    EOF             reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    FALSE           reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    FUNCTION        reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    NULL            reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    NULLABLE        reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    NUMBER          reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    OPERATOR        reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    SMARTCAST       reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    THIS            reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    TRUE            reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    VAL             reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    VAR             reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    WHEN            reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    LONG            reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    ARRAY           reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    LCCT            reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    IF              reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    RETURN          reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    RETURN_AT       reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    CONTINUE        reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    CONTINUE_AT     reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    BREAK           reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    BREAK_AT        reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    RCHAVE          reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    FUN             reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    SUSPEND         reduce using rule 240 (comparisonOperator -> MENORIGUAL .)
    COLONCOLON      reduce using rule 240 (comparisonOperator -> MENORIGUAL .)


state 215

    (241) comparisonOperator -> MAIORIGUAL .

    LITERAL_STRING  reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    INCREMENTO      reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    DECREMENTO      reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    MINUS           reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    PLUS            reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    NOT             reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    LPAREN          reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    ID              reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    CROSSINLINE     reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    IMPORT          reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    INIT            reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    NOINLINE        reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    OUT             reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    VARARG          reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    WHERE           reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    OBJECT          reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    CONST           reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    CONSTRUCTOR     reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    EOF             reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    FALSE           reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    FUNCTION        reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    NULL            reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    NULLABLE        reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    NUMBER          reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    OPERATOR        reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    SMARTCAST       reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    THIS            reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    TRUE            reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    VAL             reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    VAR             reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    WHEN            reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    LONG            reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    ARRAY           reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    LCCT            reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    IF              reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    RETURN          reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    RETURN_AT       reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    CONTINUE        reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    CONTINUE_AT     reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    BREAK           reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    BREAK_AT        reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    RCHAVE          reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    FUN             reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    SUSPEND         reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)
    COLONCOLON      reduce using rule 241 (comparisonOperator -> MAIORIGUAL .)


state 216

    (100) infixOperation -> elvisExpression infixOperationRecursive .

    INCREMENTO      reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    DECREMENTO      reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    MENOR           reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    LCCT            reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    COLONCOLON      reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    PONTO           reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    LPAREN          reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    RCHAVE          reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    AS              reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    MAISIGUAL       reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    MENOSIGUAL      reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    MULTIGUAL       reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    DIVIGUAL        reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    MODIGUAL        reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    MULT            reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    DIVIDE          reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    MOD             reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    PLUS            reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    MINUS           reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    PONTOPONTO      reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    ID              reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    CROSSINLINE     reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    IMPORT          reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    INIT            reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    NOINLINE        reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    OUT             reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    VARARG          reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    WHERE           reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    OBJECT          reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    CONST           reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    CONSTRUCTOR     reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    EOF             reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    FALSE           reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    FUNCTION        reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    NULL            reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    NULLABLE        reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    NUMBER          reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    OPERATOR        reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    SMARTCAST       reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    THIS            reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    TRUE            reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    VAL             reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    VAR             reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    WHEN            reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    LONG            reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    ARRAY           reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    ELVIS           reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    IN              reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    NOT_IN          reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    IS              reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    NOT_IS          reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    MAIOR           reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    MENORIGUAL      reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    MAIORIGUAL      reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    DIFERENTE       reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    IDENTIDADE      reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    IGUALDADE       reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    SEMIDENTIDADE   reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    AND             reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    OR              reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    FUN             reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    FOR             reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    WHILE           reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    DO              reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    LITERAL_STRING  reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    IF              reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    RETURN          reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    RETURN_AT       reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    CONTINUE        reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    CONTINUE_AT     reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    BREAK           reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    BREAK_AT        reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    NOT             reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    SUSPEND         reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    COMMA           reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    RPAREN          reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    LCHAVE          reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    RCCT            reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    PV              reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)
    ELSE            reduce using rule 100 (infixOperation -> elvisExpression infixOperationRecursive .)


state 217

    (102) infixOperationRecursive -> inOrIs . elvisOrType
    (103) infixOperationRecursive -> inOrIs . elvisOrType infixOperationRecursive
    (106) elvisOrType -> . elvisExpression
    (107) elvisOrType -> . type
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (40) type -> . optionalTypeModifiers optype
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (41) optionalTypeModifiers -> . typeModifiers
    (42) optionalTypeModifiers -> .
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (48) typeModifier -> . SUSPEND
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (12) expression -> . disjunction
    (69) receiverType -> . typeModifier parenthesizedType
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression

  ! shift/reduce conflict for SUSPEND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
    SUSPEND         shift and go to state 48
    LITERAL_STRING  shift and go to state 86
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 136
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137

  ! LPAREN          [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! SUSPEND         [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! ID              [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! CROSSINLINE     [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! IMPORT          [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! INIT            [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! NOINLINE        [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! OUT             [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! VARARG          [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! WHERE           [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! OBJECT          [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! CONST           [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! CONSTRUCTOR     [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! EOF             [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! FALSE           [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! FUNCTION        [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! NULL            [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! NULLABLE        [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! NUMBER          [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! OPERATOR        [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! SMARTCAST       [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! THIS            [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! TRUE            [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! VAL             [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! VAR             [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! WHEN            [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! LONG            [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! ARRAY           [ reduce using rule 42 (optionalTypeModifiers -> .) ]

    elvisOrType                    shift and go to state 301
    elvisExpression                shift and go to state 302
    type                           shift and go to state 303
    infixFunctionCall              shift and go to state 116
    optionalTypeModifiers          shift and go to state 45
    rangeExpression                shift and go to state 117
    simpleIdentifier               shift and go to state 133
    typeModifiers                  shift and go to state 46
    additiveExpression             shift and go to state 118
    typeModifier                   shift and go to state 304
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120
    prefixUnaryExpression          shift and go to state 134
    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 135
    unaryPrefix                    shift and go to state 92
    primaryExpression              shift and go to state 82
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    expression                     shift and go to state 195
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    disjunction                    shift and go to state 69
    conjunction                    shift and go to state 79
    equality                       shift and go to state 84
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 107

state 218

    (104) inOrIs -> inOperator .

    SUSPEND         reduce using rule 104 (inOrIs -> inOperator .)
    LITERAL_STRING  reduce using rule 104 (inOrIs -> inOperator .)
    INCREMENTO      reduce using rule 104 (inOrIs -> inOperator .)
    DECREMENTO      reduce using rule 104 (inOrIs -> inOperator .)
    MINUS           reduce using rule 104 (inOrIs -> inOperator .)
    PLUS            reduce using rule 104 (inOrIs -> inOperator .)
    NOT             reduce using rule 104 (inOrIs -> inOperator .)
    LPAREN          reduce using rule 104 (inOrIs -> inOperator .)
    ID              reduce using rule 104 (inOrIs -> inOperator .)
    CROSSINLINE     reduce using rule 104 (inOrIs -> inOperator .)
    IMPORT          reduce using rule 104 (inOrIs -> inOperator .)
    INIT            reduce using rule 104 (inOrIs -> inOperator .)
    NOINLINE        reduce using rule 104 (inOrIs -> inOperator .)
    OUT             reduce using rule 104 (inOrIs -> inOperator .)
    VARARG          reduce using rule 104 (inOrIs -> inOperator .)
    WHERE           reduce using rule 104 (inOrIs -> inOperator .)
    OBJECT          reduce using rule 104 (inOrIs -> inOperator .)
    CONST           reduce using rule 104 (inOrIs -> inOperator .)
    CONSTRUCTOR     reduce using rule 104 (inOrIs -> inOperator .)
    EOF             reduce using rule 104 (inOrIs -> inOperator .)
    FALSE           reduce using rule 104 (inOrIs -> inOperator .)
    FUNCTION        reduce using rule 104 (inOrIs -> inOperator .)
    NULL            reduce using rule 104 (inOrIs -> inOperator .)
    NULLABLE        reduce using rule 104 (inOrIs -> inOperator .)
    NUMBER          reduce using rule 104 (inOrIs -> inOperator .)
    OPERATOR        reduce using rule 104 (inOrIs -> inOperator .)
    SMARTCAST       reduce using rule 104 (inOrIs -> inOperator .)
    THIS            reduce using rule 104 (inOrIs -> inOperator .)
    TRUE            reduce using rule 104 (inOrIs -> inOperator .)
    VAL             reduce using rule 104 (inOrIs -> inOperator .)
    VAR             reduce using rule 104 (inOrIs -> inOperator .)
    WHEN            reduce using rule 104 (inOrIs -> inOperator .)
    LONG            reduce using rule 104 (inOrIs -> inOperator .)
    ARRAY           reduce using rule 104 (inOrIs -> inOperator .)
    LCCT            reduce using rule 104 (inOrIs -> inOperator .)
    IF              reduce using rule 104 (inOrIs -> inOperator .)
    RETURN          reduce using rule 104 (inOrIs -> inOperator .)
    RETURN_AT       reduce using rule 104 (inOrIs -> inOperator .)
    CONTINUE        reduce using rule 104 (inOrIs -> inOperator .)
    CONTINUE_AT     reduce using rule 104 (inOrIs -> inOperator .)
    BREAK           reduce using rule 104 (inOrIs -> inOperator .)
    BREAK_AT        reduce using rule 104 (inOrIs -> inOperator .)
    RCHAVE          reduce using rule 104 (inOrIs -> inOperator .)
    FUN             reduce using rule 104 (inOrIs -> inOperator .)
    COLONCOLON      reduce using rule 104 (inOrIs -> inOperator .)


state 219

    (105) inOrIs -> isOperator .

    SUSPEND         reduce using rule 105 (inOrIs -> isOperator .)
    LITERAL_STRING  reduce using rule 105 (inOrIs -> isOperator .)
    INCREMENTO      reduce using rule 105 (inOrIs -> isOperator .)
    DECREMENTO      reduce using rule 105 (inOrIs -> isOperator .)
    MINUS           reduce using rule 105 (inOrIs -> isOperator .)
    PLUS            reduce using rule 105 (inOrIs -> isOperator .)
    NOT             reduce using rule 105 (inOrIs -> isOperator .)
    LPAREN          reduce using rule 105 (inOrIs -> isOperator .)
    ID              reduce using rule 105 (inOrIs -> isOperator .)
    CROSSINLINE     reduce using rule 105 (inOrIs -> isOperator .)
    IMPORT          reduce using rule 105 (inOrIs -> isOperator .)
    INIT            reduce using rule 105 (inOrIs -> isOperator .)
    NOINLINE        reduce using rule 105 (inOrIs -> isOperator .)
    OUT             reduce using rule 105 (inOrIs -> isOperator .)
    VARARG          reduce using rule 105 (inOrIs -> isOperator .)
    WHERE           reduce using rule 105 (inOrIs -> isOperator .)
    OBJECT          reduce using rule 105 (inOrIs -> isOperator .)
    CONST           reduce using rule 105 (inOrIs -> isOperator .)
    CONSTRUCTOR     reduce using rule 105 (inOrIs -> isOperator .)
    EOF             reduce using rule 105 (inOrIs -> isOperator .)
    FALSE           reduce using rule 105 (inOrIs -> isOperator .)
    FUNCTION        reduce using rule 105 (inOrIs -> isOperator .)
    NULL            reduce using rule 105 (inOrIs -> isOperator .)
    NULLABLE        reduce using rule 105 (inOrIs -> isOperator .)
    NUMBER          reduce using rule 105 (inOrIs -> isOperator .)
    OPERATOR        reduce using rule 105 (inOrIs -> isOperator .)
    SMARTCAST       reduce using rule 105 (inOrIs -> isOperator .)
    THIS            reduce using rule 105 (inOrIs -> isOperator .)
    TRUE            reduce using rule 105 (inOrIs -> isOperator .)
    VAL             reduce using rule 105 (inOrIs -> isOperator .)
    VAR             reduce using rule 105 (inOrIs -> isOperator .)
    WHEN            reduce using rule 105 (inOrIs -> isOperator .)
    LONG            reduce using rule 105 (inOrIs -> isOperator .)
    ARRAY           reduce using rule 105 (inOrIs -> isOperator .)
    LCCT            reduce using rule 105 (inOrIs -> isOperator .)
    IF              reduce using rule 105 (inOrIs -> isOperator .)
    RETURN          reduce using rule 105 (inOrIs -> isOperator .)
    RETURN_AT       reduce using rule 105 (inOrIs -> isOperator .)
    CONTINUE        reduce using rule 105 (inOrIs -> isOperator .)
    CONTINUE_AT     reduce using rule 105 (inOrIs -> isOperator .)
    BREAK           reduce using rule 105 (inOrIs -> isOperator .)
    BREAK_AT        reduce using rule 105 (inOrIs -> isOperator .)
    RCHAVE          reduce using rule 105 (inOrIs -> isOperator .)
    FUN             reduce using rule 105 (inOrIs -> isOperator .)
    COLONCOLON      reduce using rule 105 (inOrIs -> isOperator .)


state 220

    (242) inOperator -> IN .

    SUSPEND         reduce using rule 242 (inOperator -> IN .)
    LITERAL_STRING  reduce using rule 242 (inOperator -> IN .)
    INCREMENTO      reduce using rule 242 (inOperator -> IN .)
    DECREMENTO      reduce using rule 242 (inOperator -> IN .)
    MINUS           reduce using rule 242 (inOperator -> IN .)
    PLUS            reduce using rule 242 (inOperator -> IN .)
    NOT             reduce using rule 242 (inOperator -> IN .)
    LPAREN          reduce using rule 242 (inOperator -> IN .)
    ID              reduce using rule 242 (inOperator -> IN .)
    CROSSINLINE     reduce using rule 242 (inOperator -> IN .)
    IMPORT          reduce using rule 242 (inOperator -> IN .)
    INIT            reduce using rule 242 (inOperator -> IN .)
    NOINLINE        reduce using rule 242 (inOperator -> IN .)
    OUT             reduce using rule 242 (inOperator -> IN .)
    VARARG          reduce using rule 242 (inOperator -> IN .)
    WHERE           reduce using rule 242 (inOperator -> IN .)
    OBJECT          reduce using rule 242 (inOperator -> IN .)
    CONST           reduce using rule 242 (inOperator -> IN .)
    CONSTRUCTOR     reduce using rule 242 (inOperator -> IN .)
    EOF             reduce using rule 242 (inOperator -> IN .)
    FALSE           reduce using rule 242 (inOperator -> IN .)
    FUNCTION        reduce using rule 242 (inOperator -> IN .)
    NULL            reduce using rule 242 (inOperator -> IN .)
    NULLABLE        reduce using rule 242 (inOperator -> IN .)
    NUMBER          reduce using rule 242 (inOperator -> IN .)
    OPERATOR        reduce using rule 242 (inOperator -> IN .)
    SMARTCAST       reduce using rule 242 (inOperator -> IN .)
    THIS            reduce using rule 242 (inOperator -> IN .)
    TRUE            reduce using rule 242 (inOperator -> IN .)
    VAL             reduce using rule 242 (inOperator -> IN .)
    VAR             reduce using rule 242 (inOperator -> IN .)
    WHEN            reduce using rule 242 (inOperator -> IN .)
    LONG            reduce using rule 242 (inOperator -> IN .)
    ARRAY           reduce using rule 242 (inOperator -> IN .)
    LCCT            reduce using rule 242 (inOperator -> IN .)
    IF              reduce using rule 242 (inOperator -> IN .)
    RETURN          reduce using rule 242 (inOperator -> IN .)
    RETURN_AT       reduce using rule 242 (inOperator -> IN .)
    CONTINUE        reduce using rule 242 (inOperator -> IN .)
    CONTINUE_AT     reduce using rule 242 (inOperator -> IN .)
    BREAK           reduce using rule 242 (inOperator -> IN .)
    BREAK_AT        reduce using rule 242 (inOperator -> IN .)
    RCHAVE          reduce using rule 242 (inOperator -> IN .)
    FUN             reduce using rule 242 (inOperator -> IN .)
    COLONCOLON      reduce using rule 242 (inOperator -> IN .)


state 221

    (243) inOperator -> NOT_IN .

    SUSPEND         reduce using rule 243 (inOperator -> NOT_IN .)
    LITERAL_STRING  reduce using rule 243 (inOperator -> NOT_IN .)
    INCREMENTO      reduce using rule 243 (inOperator -> NOT_IN .)
    DECREMENTO      reduce using rule 243 (inOperator -> NOT_IN .)
    MINUS           reduce using rule 243 (inOperator -> NOT_IN .)
    PLUS            reduce using rule 243 (inOperator -> NOT_IN .)
    NOT             reduce using rule 243 (inOperator -> NOT_IN .)
    LPAREN          reduce using rule 243 (inOperator -> NOT_IN .)
    ID              reduce using rule 243 (inOperator -> NOT_IN .)
    CROSSINLINE     reduce using rule 243 (inOperator -> NOT_IN .)
    IMPORT          reduce using rule 243 (inOperator -> NOT_IN .)
    INIT            reduce using rule 243 (inOperator -> NOT_IN .)
    NOINLINE        reduce using rule 243 (inOperator -> NOT_IN .)
    OUT             reduce using rule 243 (inOperator -> NOT_IN .)
    VARARG          reduce using rule 243 (inOperator -> NOT_IN .)
    WHERE           reduce using rule 243 (inOperator -> NOT_IN .)
    OBJECT          reduce using rule 243 (inOperator -> NOT_IN .)
    CONST           reduce using rule 243 (inOperator -> NOT_IN .)
    CONSTRUCTOR     reduce using rule 243 (inOperator -> NOT_IN .)
    EOF             reduce using rule 243 (inOperator -> NOT_IN .)
    FALSE           reduce using rule 243 (inOperator -> NOT_IN .)
    FUNCTION        reduce using rule 243 (inOperator -> NOT_IN .)
    NULL            reduce using rule 243 (inOperator -> NOT_IN .)
    NULLABLE        reduce using rule 243 (inOperator -> NOT_IN .)
    NUMBER          reduce using rule 243 (inOperator -> NOT_IN .)
    OPERATOR        reduce using rule 243 (inOperator -> NOT_IN .)
    SMARTCAST       reduce using rule 243 (inOperator -> NOT_IN .)
    THIS            reduce using rule 243 (inOperator -> NOT_IN .)
    TRUE            reduce using rule 243 (inOperator -> NOT_IN .)
    VAL             reduce using rule 243 (inOperator -> NOT_IN .)
    VAR             reduce using rule 243 (inOperator -> NOT_IN .)
    WHEN            reduce using rule 243 (inOperator -> NOT_IN .)
    LONG            reduce using rule 243 (inOperator -> NOT_IN .)
    ARRAY           reduce using rule 243 (inOperator -> NOT_IN .)
    LCCT            reduce using rule 243 (inOperator -> NOT_IN .)
    IF              reduce using rule 243 (inOperator -> NOT_IN .)
    RETURN          reduce using rule 243 (inOperator -> NOT_IN .)
    RETURN_AT       reduce using rule 243 (inOperator -> NOT_IN .)
    CONTINUE        reduce using rule 243 (inOperator -> NOT_IN .)
    CONTINUE_AT     reduce using rule 243 (inOperator -> NOT_IN .)
    BREAK           reduce using rule 243 (inOperator -> NOT_IN .)
    BREAK_AT        reduce using rule 243 (inOperator -> NOT_IN .)
    RCHAVE          reduce using rule 243 (inOperator -> NOT_IN .)
    FUN             reduce using rule 243 (inOperator -> NOT_IN .)
    COLONCOLON      reduce using rule 243 (inOperator -> NOT_IN .)


state 222

    (244) isOperator -> IS .

    SUSPEND         reduce using rule 244 (isOperator -> IS .)
    LITERAL_STRING  reduce using rule 244 (isOperator -> IS .)
    INCREMENTO      reduce using rule 244 (isOperator -> IS .)
    DECREMENTO      reduce using rule 244 (isOperator -> IS .)
    MINUS           reduce using rule 244 (isOperator -> IS .)
    PLUS            reduce using rule 244 (isOperator -> IS .)
    NOT             reduce using rule 244 (isOperator -> IS .)
    LPAREN          reduce using rule 244 (isOperator -> IS .)
    ID              reduce using rule 244 (isOperator -> IS .)
    CROSSINLINE     reduce using rule 244 (isOperator -> IS .)
    IMPORT          reduce using rule 244 (isOperator -> IS .)
    INIT            reduce using rule 244 (isOperator -> IS .)
    NOINLINE        reduce using rule 244 (isOperator -> IS .)
    OUT             reduce using rule 244 (isOperator -> IS .)
    VARARG          reduce using rule 244 (isOperator -> IS .)
    WHERE           reduce using rule 244 (isOperator -> IS .)
    OBJECT          reduce using rule 244 (isOperator -> IS .)
    CONST           reduce using rule 244 (isOperator -> IS .)
    CONSTRUCTOR     reduce using rule 244 (isOperator -> IS .)
    EOF             reduce using rule 244 (isOperator -> IS .)
    FALSE           reduce using rule 244 (isOperator -> IS .)
    FUNCTION        reduce using rule 244 (isOperator -> IS .)
    NULL            reduce using rule 244 (isOperator -> IS .)
    NULLABLE        reduce using rule 244 (isOperator -> IS .)
    NUMBER          reduce using rule 244 (isOperator -> IS .)
    OPERATOR        reduce using rule 244 (isOperator -> IS .)
    SMARTCAST       reduce using rule 244 (isOperator -> IS .)
    THIS            reduce using rule 244 (isOperator -> IS .)
    TRUE            reduce using rule 244 (isOperator -> IS .)
    VAL             reduce using rule 244 (isOperator -> IS .)
    VAR             reduce using rule 244 (isOperator -> IS .)
    WHEN            reduce using rule 244 (isOperator -> IS .)
    LONG            reduce using rule 244 (isOperator -> IS .)
    ARRAY           reduce using rule 244 (isOperator -> IS .)
    LCCT            reduce using rule 244 (isOperator -> IS .)
    IF              reduce using rule 244 (isOperator -> IS .)
    RETURN          reduce using rule 244 (isOperator -> IS .)
    RETURN_AT       reduce using rule 244 (isOperator -> IS .)
    CONTINUE        reduce using rule 244 (isOperator -> IS .)
    CONTINUE_AT     reduce using rule 244 (isOperator -> IS .)
    BREAK           reduce using rule 244 (isOperator -> IS .)
    BREAK_AT        reduce using rule 244 (isOperator -> IS .)
    RCHAVE          reduce using rule 244 (isOperator -> IS .)
    FUN             reduce using rule 244 (isOperator -> IS .)
    COLONCOLON      reduce using rule 244 (isOperator -> IS .)


state 223

    (245) isOperator -> NOT_IS .

    SUSPEND         reduce using rule 245 (isOperator -> NOT_IS .)
    LITERAL_STRING  reduce using rule 245 (isOperator -> NOT_IS .)
    INCREMENTO      reduce using rule 245 (isOperator -> NOT_IS .)
    DECREMENTO      reduce using rule 245 (isOperator -> NOT_IS .)
    MINUS           reduce using rule 245 (isOperator -> NOT_IS .)
    PLUS            reduce using rule 245 (isOperator -> NOT_IS .)
    NOT             reduce using rule 245 (isOperator -> NOT_IS .)
    LPAREN          reduce using rule 245 (isOperator -> NOT_IS .)
    ID              reduce using rule 245 (isOperator -> NOT_IS .)
    CROSSINLINE     reduce using rule 245 (isOperator -> NOT_IS .)
    IMPORT          reduce using rule 245 (isOperator -> NOT_IS .)
    INIT            reduce using rule 245 (isOperator -> NOT_IS .)
    NOINLINE        reduce using rule 245 (isOperator -> NOT_IS .)
    OUT             reduce using rule 245 (isOperator -> NOT_IS .)
    VARARG          reduce using rule 245 (isOperator -> NOT_IS .)
    WHERE           reduce using rule 245 (isOperator -> NOT_IS .)
    OBJECT          reduce using rule 245 (isOperator -> NOT_IS .)
    CONST           reduce using rule 245 (isOperator -> NOT_IS .)
    CONSTRUCTOR     reduce using rule 245 (isOperator -> NOT_IS .)
    EOF             reduce using rule 245 (isOperator -> NOT_IS .)
    FALSE           reduce using rule 245 (isOperator -> NOT_IS .)
    FUNCTION        reduce using rule 245 (isOperator -> NOT_IS .)
    NULL            reduce using rule 245 (isOperator -> NOT_IS .)
    NULLABLE        reduce using rule 245 (isOperator -> NOT_IS .)
    NUMBER          reduce using rule 245 (isOperator -> NOT_IS .)
    OPERATOR        reduce using rule 245 (isOperator -> NOT_IS .)
    SMARTCAST       reduce using rule 245 (isOperator -> NOT_IS .)
    THIS            reduce using rule 245 (isOperator -> NOT_IS .)
    TRUE            reduce using rule 245 (isOperator -> NOT_IS .)
    VAL             reduce using rule 245 (isOperator -> NOT_IS .)
    VAR             reduce using rule 245 (isOperator -> NOT_IS .)
    WHEN            reduce using rule 245 (isOperator -> NOT_IS .)
    LONG            reduce using rule 245 (isOperator -> NOT_IS .)
    ARRAY           reduce using rule 245 (isOperator -> NOT_IS .)
    LCCT            reduce using rule 245 (isOperator -> NOT_IS .)
    IF              reduce using rule 245 (isOperator -> NOT_IS .)
    RETURN          reduce using rule 245 (isOperator -> NOT_IS .)
    RETURN_AT       reduce using rule 245 (isOperator -> NOT_IS .)
    CONTINUE        reduce using rule 245 (isOperator -> NOT_IS .)
    CONTINUE_AT     reduce using rule 245 (isOperator -> NOT_IS .)
    BREAK           reduce using rule 245 (isOperator -> NOT_IS .)
    BREAK_AT        reduce using rule 245 (isOperator -> NOT_IS .)
    RCHAVE          reduce using rule 245 (isOperator -> NOT_IS .)
    FUN             reduce using rule 245 (isOperator -> NOT_IS .)
    COLONCOLON      reduce using rule 245 (isOperator -> NOT_IS .)


state 224

    (69) receiverType -> typeModifier parenthesizedType .

    COLONCOLON      reduce using rule 69 (receiverType -> typeModifier parenthesizedType .)
    PONTO           reduce using rule 69 (receiverType -> typeModifier parenthesizedType .)


state 225

    (68) parenthesizedType -> LPAREN . type RPAREN
    (40) type -> . optionalTypeModifiers optype
    (41) optionalTypeModifiers -> . typeModifiers
    (42) optionalTypeModifiers -> .
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (48) typeModifier -> . SUSPEND

  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 42 (optionalTypeModifiers -> .)
    ID              reduce using rule 42 (optionalTypeModifiers -> .)
    CROSSINLINE     reduce using rule 42 (optionalTypeModifiers -> .)
    IMPORT          reduce using rule 42 (optionalTypeModifiers -> .)
    INIT            reduce using rule 42 (optionalTypeModifiers -> .)
    NOINLINE        reduce using rule 42 (optionalTypeModifiers -> .)
    OUT             reduce using rule 42 (optionalTypeModifiers -> .)
    VARARG          reduce using rule 42 (optionalTypeModifiers -> .)
    WHERE           reduce using rule 42 (optionalTypeModifiers -> .)
    OBJECT          reduce using rule 42 (optionalTypeModifiers -> .)
    CONST           reduce using rule 42 (optionalTypeModifiers -> .)
    CONSTRUCTOR     reduce using rule 42 (optionalTypeModifiers -> .)
    EOF             reduce using rule 42 (optionalTypeModifiers -> .)
    FALSE           reduce using rule 42 (optionalTypeModifiers -> .)
    FUNCTION        reduce using rule 42 (optionalTypeModifiers -> .)
    NULL            reduce using rule 42 (optionalTypeModifiers -> .)
    NULLABLE        reduce using rule 42 (optionalTypeModifiers -> .)
    NUMBER          reduce using rule 42 (optionalTypeModifiers -> .)
    OPERATOR        reduce using rule 42 (optionalTypeModifiers -> .)
    SMARTCAST       reduce using rule 42 (optionalTypeModifiers -> .)
    THIS            reduce using rule 42 (optionalTypeModifiers -> .)
    TRUE            reduce using rule 42 (optionalTypeModifiers -> .)
    VAL             reduce using rule 42 (optionalTypeModifiers -> .)
    VAR             reduce using rule 42 (optionalTypeModifiers -> .)
    WHEN            reduce using rule 42 (optionalTypeModifiers -> .)
    LONG            reduce using rule 42 (optionalTypeModifiers -> .)
    ARRAY           reduce using rule 42 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 42 (optionalTypeModifiers -> .) ]

    type                           shift and go to state 305
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 226

    (109) elvisExpression -> infixFunctionCall ELVIS . elvisExpression
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (12) expression -> . disjunction
    (69) receiverType -> . typeModifier parenthesizedType
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (48) typeModifier -> . SUSPEND
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression

    LITERAL_STRING  shift and go to state 86
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 136
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    SUSPEND         shift and go to state 48

    infixFunctionCall              shift and go to state 116
    elvisExpression                shift and go to state 306
    rangeExpression                shift and go to state 117
    simpleIdentifier               shift and go to state 133
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120
    prefixUnaryExpression          shift and go to state 134
    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 135
    unaryPrefix                    shift and go to state 92
    primaryExpression              shift and go to state 82
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    expression                     shift and go to state 195
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    disjunction                    shift and go to state 69
    typeModifier                   shift and go to state 115
    conjunction                    shift and go to state 79
    equality                       shift and go to state 84
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 107

state 227

    (111) infixFunctionCall -> rangeExpression simpleIdentifier . infixFunctionCall
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (12) expression -> . disjunction
    (69) receiverType -> . typeModifier parenthesizedType
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (48) typeModifier -> . SUSPEND
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression

    LITERAL_STRING  shift and go to state 86
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 136
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    SUSPEND         shift and go to state 48

    rangeExpression                shift and go to state 117
    simpleIdentifier               shift and go to state 133
    infixFunctionCall              shift and go to state 307
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120
    prefixUnaryExpression          shift and go to state 134
    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 135
    unaryPrefix                    shift and go to state 92
    primaryExpression              shift and go to state 82
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    expression                     shift and go to state 195
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    disjunction                    shift and go to state 69
    typeModifier                   shift and go to state 115
    conjunction                    shift and go to state 79
    equality                       shift and go to state 84
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 107
    elvisExpression                shift and go to state 114

state 228

    (113) rangeExpression -> additiveExpression PONTOPONTO . rangeExpression
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (12) expression -> . disjunction
    (69) receiverType -> . typeModifier parenthesizedType
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (48) typeModifier -> . SUSPEND
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall

    LITERAL_STRING  shift and go to state 86
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 136
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    SUSPEND         shift and go to state 48

    additiveExpression             shift and go to state 118
    rangeExpression                shift and go to state 308
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120
    prefixUnaryExpression          shift and go to state 134
    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 135
    unaryPrefix                    shift and go to state 92
    primaryExpression              shift and go to state 82
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    parenthesizedExpression        shift and go to state 85
    simpleIdentifier               shift and go to state 133
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    expression                     shift and go to state 195
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    disjunction                    shift and go to state 69
    typeModifier                   shift and go to state 115
    conjunction                    shift and go to state 79
    equality                       shift and go to state 84
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 107
    elvisExpression                shift and go to state 114
    infixFunctionCall              shift and go to state 116

state 229

    (115) additiveExpression -> multiplicativeExpression additiveOperator . additiveExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (12) expression -> . disjunction
    (69) receiverType -> . typeModifier parenthesizedType
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (48) typeModifier -> . SUSPEND
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression

    LITERAL_STRING  shift and go to state 86
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 136
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    SUSPEND         shift and go to state 48

    multiplicativeExpression       shift and go to state 119
    additiveExpression             shift and go to state 309
    asExpression                   shift and go to state 120
    prefixUnaryExpression          shift and go to state 134
    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 135
    unaryPrefix                    shift and go to state 92
    primaryExpression              shift and go to state 82
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    parenthesizedExpression        shift and go to state 85
    simpleIdentifier               shift and go to state 133
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    expression                     shift and go to state 195
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    disjunction                    shift and go to state 69
    typeModifier                   shift and go to state 115
    conjunction                    shift and go to state 79
    equality                       shift and go to state 84
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 107
    elvisExpression                shift and go to state 114
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117

state 230

    (246) additiveOperator -> PLUS .

    LITERAL_STRING  reduce using rule 246 (additiveOperator -> PLUS .)
    INCREMENTO      reduce using rule 246 (additiveOperator -> PLUS .)
    DECREMENTO      reduce using rule 246 (additiveOperator -> PLUS .)
    MINUS           reduce using rule 246 (additiveOperator -> PLUS .)
    PLUS            reduce using rule 246 (additiveOperator -> PLUS .)
    NOT             reduce using rule 246 (additiveOperator -> PLUS .)
    LPAREN          reduce using rule 246 (additiveOperator -> PLUS .)
    ID              reduce using rule 246 (additiveOperator -> PLUS .)
    CROSSINLINE     reduce using rule 246 (additiveOperator -> PLUS .)
    IMPORT          reduce using rule 246 (additiveOperator -> PLUS .)
    INIT            reduce using rule 246 (additiveOperator -> PLUS .)
    NOINLINE        reduce using rule 246 (additiveOperator -> PLUS .)
    OUT             reduce using rule 246 (additiveOperator -> PLUS .)
    VARARG          reduce using rule 246 (additiveOperator -> PLUS .)
    WHERE           reduce using rule 246 (additiveOperator -> PLUS .)
    OBJECT          reduce using rule 246 (additiveOperator -> PLUS .)
    CONST           reduce using rule 246 (additiveOperator -> PLUS .)
    CONSTRUCTOR     reduce using rule 246 (additiveOperator -> PLUS .)
    EOF             reduce using rule 246 (additiveOperator -> PLUS .)
    FALSE           reduce using rule 246 (additiveOperator -> PLUS .)
    FUNCTION        reduce using rule 246 (additiveOperator -> PLUS .)
    NULL            reduce using rule 246 (additiveOperator -> PLUS .)
    NULLABLE        reduce using rule 246 (additiveOperator -> PLUS .)
    NUMBER          reduce using rule 246 (additiveOperator -> PLUS .)
    OPERATOR        reduce using rule 246 (additiveOperator -> PLUS .)
    SMARTCAST       reduce using rule 246 (additiveOperator -> PLUS .)
    THIS            reduce using rule 246 (additiveOperator -> PLUS .)
    TRUE            reduce using rule 246 (additiveOperator -> PLUS .)
    VAL             reduce using rule 246 (additiveOperator -> PLUS .)
    VAR             reduce using rule 246 (additiveOperator -> PLUS .)
    WHEN            reduce using rule 246 (additiveOperator -> PLUS .)
    LONG            reduce using rule 246 (additiveOperator -> PLUS .)
    ARRAY           reduce using rule 246 (additiveOperator -> PLUS .)
    LCCT            reduce using rule 246 (additiveOperator -> PLUS .)
    IF              reduce using rule 246 (additiveOperator -> PLUS .)
    RETURN          reduce using rule 246 (additiveOperator -> PLUS .)
    RETURN_AT       reduce using rule 246 (additiveOperator -> PLUS .)
    CONTINUE        reduce using rule 246 (additiveOperator -> PLUS .)
    CONTINUE_AT     reduce using rule 246 (additiveOperator -> PLUS .)
    BREAK           reduce using rule 246 (additiveOperator -> PLUS .)
    BREAK_AT        reduce using rule 246 (additiveOperator -> PLUS .)
    RCHAVE          reduce using rule 246 (additiveOperator -> PLUS .)
    FUN             reduce using rule 246 (additiveOperator -> PLUS .)
    SUSPEND         reduce using rule 246 (additiveOperator -> PLUS .)
    COLONCOLON      reduce using rule 246 (additiveOperator -> PLUS .)


state 231

    (247) additiveOperator -> MINUS .

    LITERAL_STRING  reduce using rule 247 (additiveOperator -> MINUS .)
    INCREMENTO      reduce using rule 247 (additiveOperator -> MINUS .)
    DECREMENTO      reduce using rule 247 (additiveOperator -> MINUS .)
    MINUS           reduce using rule 247 (additiveOperator -> MINUS .)
    PLUS            reduce using rule 247 (additiveOperator -> MINUS .)
    NOT             reduce using rule 247 (additiveOperator -> MINUS .)
    LPAREN          reduce using rule 247 (additiveOperator -> MINUS .)
    ID              reduce using rule 247 (additiveOperator -> MINUS .)
    CROSSINLINE     reduce using rule 247 (additiveOperator -> MINUS .)
    IMPORT          reduce using rule 247 (additiveOperator -> MINUS .)
    INIT            reduce using rule 247 (additiveOperator -> MINUS .)
    NOINLINE        reduce using rule 247 (additiveOperator -> MINUS .)
    OUT             reduce using rule 247 (additiveOperator -> MINUS .)
    VARARG          reduce using rule 247 (additiveOperator -> MINUS .)
    WHERE           reduce using rule 247 (additiveOperator -> MINUS .)
    OBJECT          reduce using rule 247 (additiveOperator -> MINUS .)
    CONST           reduce using rule 247 (additiveOperator -> MINUS .)
    CONSTRUCTOR     reduce using rule 247 (additiveOperator -> MINUS .)
    EOF             reduce using rule 247 (additiveOperator -> MINUS .)
    FALSE           reduce using rule 247 (additiveOperator -> MINUS .)
    FUNCTION        reduce using rule 247 (additiveOperator -> MINUS .)
    NULL            reduce using rule 247 (additiveOperator -> MINUS .)
    NULLABLE        reduce using rule 247 (additiveOperator -> MINUS .)
    NUMBER          reduce using rule 247 (additiveOperator -> MINUS .)
    OPERATOR        reduce using rule 247 (additiveOperator -> MINUS .)
    SMARTCAST       reduce using rule 247 (additiveOperator -> MINUS .)
    THIS            reduce using rule 247 (additiveOperator -> MINUS .)
    TRUE            reduce using rule 247 (additiveOperator -> MINUS .)
    VAL             reduce using rule 247 (additiveOperator -> MINUS .)
    VAR             reduce using rule 247 (additiveOperator -> MINUS .)
    WHEN            reduce using rule 247 (additiveOperator -> MINUS .)
    LONG            reduce using rule 247 (additiveOperator -> MINUS .)
    ARRAY           reduce using rule 247 (additiveOperator -> MINUS .)
    LCCT            reduce using rule 247 (additiveOperator -> MINUS .)
    IF              reduce using rule 247 (additiveOperator -> MINUS .)
    RETURN          reduce using rule 247 (additiveOperator -> MINUS .)
    RETURN_AT       reduce using rule 247 (additiveOperator -> MINUS .)
    CONTINUE        reduce using rule 247 (additiveOperator -> MINUS .)
    CONTINUE_AT     reduce using rule 247 (additiveOperator -> MINUS .)
    BREAK           reduce using rule 247 (additiveOperator -> MINUS .)
    BREAK_AT        reduce using rule 247 (additiveOperator -> MINUS .)
    RCHAVE          reduce using rule 247 (additiveOperator -> MINUS .)
    FUN             reduce using rule 247 (additiveOperator -> MINUS .)
    SUSPEND         reduce using rule 247 (additiveOperator -> MINUS .)
    COLONCOLON      reduce using rule 247 (additiveOperator -> MINUS .)


state 232

    (117) multiplicativeExpression -> asExpression multiplicativeOperator . multiplicativeExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (12) expression -> . disjunction
    (69) receiverType -> . typeModifier parenthesizedType
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (48) typeModifier -> . SUSPEND
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression

    LITERAL_STRING  shift and go to state 86
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 136
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    SUSPEND         shift and go to state 48

    asExpression                   shift and go to state 120
    multiplicativeExpression       shift and go to state 310
    prefixUnaryExpression          shift and go to state 134
    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 135
    unaryPrefix                    shift and go to state 92
    primaryExpression              shift and go to state 82
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    parenthesizedExpression        shift and go to state 85
    simpleIdentifier               shift and go to state 133
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    expression                     shift and go to state 195
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    disjunction                    shift and go to state 69
    typeModifier                   shift and go to state 115
    conjunction                    shift and go to state 79
    equality                       shift and go to state 84
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 107
    elvisExpression                shift and go to state 114
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    additiveExpression             shift and go to state 118

state 233

    (248) multiplicativeOperator -> MULT .

    LITERAL_STRING  reduce using rule 248 (multiplicativeOperator -> MULT .)
    INCREMENTO      reduce using rule 248 (multiplicativeOperator -> MULT .)
    DECREMENTO      reduce using rule 248 (multiplicativeOperator -> MULT .)
    MINUS           reduce using rule 248 (multiplicativeOperator -> MULT .)
    PLUS            reduce using rule 248 (multiplicativeOperator -> MULT .)
    NOT             reduce using rule 248 (multiplicativeOperator -> MULT .)
    LPAREN          reduce using rule 248 (multiplicativeOperator -> MULT .)
    ID              reduce using rule 248 (multiplicativeOperator -> MULT .)
    CROSSINLINE     reduce using rule 248 (multiplicativeOperator -> MULT .)
    IMPORT          reduce using rule 248 (multiplicativeOperator -> MULT .)
    INIT            reduce using rule 248 (multiplicativeOperator -> MULT .)
    NOINLINE        reduce using rule 248 (multiplicativeOperator -> MULT .)
    OUT             reduce using rule 248 (multiplicativeOperator -> MULT .)
    VARARG          reduce using rule 248 (multiplicativeOperator -> MULT .)
    WHERE           reduce using rule 248 (multiplicativeOperator -> MULT .)
    OBJECT          reduce using rule 248 (multiplicativeOperator -> MULT .)
    CONST           reduce using rule 248 (multiplicativeOperator -> MULT .)
    CONSTRUCTOR     reduce using rule 248 (multiplicativeOperator -> MULT .)
    EOF             reduce using rule 248 (multiplicativeOperator -> MULT .)
    FALSE           reduce using rule 248 (multiplicativeOperator -> MULT .)
    FUNCTION        reduce using rule 248 (multiplicativeOperator -> MULT .)
    NULL            reduce using rule 248 (multiplicativeOperator -> MULT .)
    NULLABLE        reduce using rule 248 (multiplicativeOperator -> MULT .)
    NUMBER          reduce using rule 248 (multiplicativeOperator -> MULT .)
    OPERATOR        reduce using rule 248 (multiplicativeOperator -> MULT .)
    SMARTCAST       reduce using rule 248 (multiplicativeOperator -> MULT .)
    THIS            reduce using rule 248 (multiplicativeOperator -> MULT .)
    TRUE            reduce using rule 248 (multiplicativeOperator -> MULT .)
    VAL             reduce using rule 248 (multiplicativeOperator -> MULT .)
    VAR             reduce using rule 248 (multiplicativeOperator -> MULT .)
    WHEN            reduce using rule 248 (multiplicativeOperator -> MULT .)
    LONG            reduce using rule 248 (multiplicativeOperator -> MULT .)
    ARRAY           reduce using rule 248 (multiplicativeOperator -> MULT .)
    LCCT            reduce using rule 248 (multiplicativeOperator -> MULT .)
    IF              reduce using rule 248 (multiplicativeOperator -> MULT .)
    RETURN          reduce using rule 248 (multiplicativeOperator -> MULT .)
    RETURN_AT       reduce using rule 248 (multiplicativeOperator -> MULT .)
    CONTINUE        reduce using rule 248 (multiplicativeOperator -> MULT .)
    CONTINUE_AT     reduce using rule 248 (multiplicativeOperator -> MULT .)
    BREAK           reduce using rule 248 (multiplicativeOperator -> MULT .)
    BREAK_AT        reduce using rule 248 (multiplicativeOperator -> MULT .)
    RCHAVE          reduce using rule 248 (multiplicativeOperator -> MULT .)
    FUN             reduce using rule 248 (multiplicativeOperator -> MULT .)
    SUSPEND         reduce using rule 248 (multiplicativeOperator -> MULT .)
    COLONCOLON      reduce using rule 248 (multiplicativeOperator -> MULT .)


state 234

    (249) multiplicativeOperator -> DIVIDE .

    LITERAL_STRING  reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    INCREMENTO      reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    DECREMENTO      reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    MINUS           reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    PLUS            reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    NOT             reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    LPAREN          reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    ID              reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    CROSSINLINE     reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    IMPORT          reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    INIT            reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    NOINLINE        reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    OUT             reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    VARARG          reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    WHERE           reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    OBJECT          reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    CONST           reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    CONSTRUCTOR     reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    EOF             reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    FALSE           reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    FUNCTION        reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    NULL            reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    NULLABLE        reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    NUMBER          reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    OPERATOR        reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    SMARTCAST       reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    THIS            reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    TRUE            reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    VAL             reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    VAR             reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    WHEN            reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    LONG            reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    ARRAY           reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    LCCT            reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    IF              reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    RETURN          reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    RETURN_AT       reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    CONTINUE        reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    CONTINUE_AT     reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    BREAK           reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    BREAK_AT        reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    RCHAVE          reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    FUN             reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    SUSPEND         reduce using rule 249 (multiplicativeOperator -> DIVIDE .)
    COLONCOLON      reduce using rule 249 (multiplicativeOperator -> DIVIDE .)


state 235

    (250) multiplicativeOperator -> MOD .

    LITERAL_STRING  reduce using rule 250 (multiplicativeOperator -> MOD .)
    INCREMENTO      reduce using rule 250 (multiplicativeOperator -> MOD .)
    DECREMENTO      reduce using rule 250 (multiplicativeOperator -> MOD .)
    MINUS           reduce using rule 250 (multiplicativeOperator -> MOD .)
    PLUS            reduce using rule 250 (multiplicativeOperator -> MOD .)
    NOT             reduce using rule 250 (multiplicativeOperator -> MOD .)
    LPAREN          reduce using rule 250 (multiplicativeOperator -> MOD .)
    ID              reduce using rule 250 (multiplicativeOperator -> MOD .)
    CROSSINLINE     reduce using rule 250 (multiplicativeOperator -> MOD .)
    IMPORT          reduce using rule 250 (multiplicativeOperator -> MOD .)
    INIT            reduce using rule 250 (multiplicativeOperator -> MOD .)
    NOINLINE        reduce using rule 250 (multiplicativeOperator -> MOD .)
    OUT             reduce using rule 250 (multiplicativeOperator -> MOD .)
    VARARG          reduce using rule 250 (multiplicativeOperator -> MOD .)
    WHERE           reduce using rule 250 (multiplicativeOperator -> MOD .)
    OBJECT          reduce using rule 250 (multiplicativeOperator -> MOD .)
    CONST           reduce using rule 250 (multiplicativeOperator -> MOD .)
    CONSTRUCTOR     reduce using rule 250 (multiplicativeOperator -> MOD .)
    EOF             reduce using rule 250 (multiplicativeOperator -> MOD .)
    FALSE           reduce using rule 250 (multiplicativeOperator -> MOD .)
    FUNCTION        reduce using rule 250 (multiplicativeOperator -> MOD .)
    NULL            reduce using rule 250 (multiplicativeOperator -> MOD .)
    NULLABLE        reduce using rule 250 (multiplicativeOperator -> MOD .)
    NUMBER          reduce using rule 250 (multiplicativeOperator -> MOD .)
    OPERATOR        reduce using rule 250 (multiplicativeOperator -> MOD .)
    SMARTCAST       reduce using rule 250 (multiplicativeOperator -> MOD .)
    THIS            reduce using rule 250 (multiplicativeOperator -> MOD .)
    TRUE            reduce using rule 250 (multiplicativeOperator -> MOD .)
    VAL             reduce using rule 250 (multiplicativeOperator -> MOD .)
    VAR             reduce using rule 250 (multiplicativeOperator -> MOD .)
    WHEN            reduce using rule 250 (multiplicativeOperator -> MOD .)
    LONG            reduce using rule 250 (multiplicativeOperator -> MOD .)
    ARRAY           reduce using rule 250 (multiplicativeOperator -> MOD .)
    LCCT            reduce using rule 250 (multiplicativeOperator -> MOD .)
    IF              reduce using rule 250 (multiplicativeOperator -> MOD .)
    RETURN          reduce using rule 250 (multiplicativeOperator -> MOD .)
    RETURN_AT       reduce using rule 250 (multiplicativeOperator -> MOD .)
    CONTINUE        reduce using rule 250 (multiplicativeOperator -> MOD .)
    CONTINUE_AT     reduce using rule 250 (multiplicativeOperator -> MOD .)
    BREAK           reduce using rule 250 (multiplicativeOperator -> MOD .)
    BREAK_AT        reduce using rule 250 (multiplicativeOperator -> MOD .)
    RCHAVE          reduce using rule 250 (multiplicativeOperator -> MOD .)
    FUN             reduce using rule 250 (multiplicativeOperator -> MOD .)
    SUSPEND         reduce using rule 250 (multiplicativeOperator -> MOD .)
    COLONCOLON      reduce using rule 250 (multiplicativeOperator -> MOD .)


state 236

    (68) parenthesizedType -> LPAREN type . RPAREN
    (62) optionalParameterOrType -> type .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 311
    COMMA           reduce using rule 62 (optionalParameterOrType -> type .)

  ! RPAREN          [ reduce using rule 62 (optionalParameterOrType -> type .) ]


state 237

    (67) functionTypeParameters -> LPAREN optionalParameterOrType . parameterOrTypeRecursive optionalCOMMA RPAREN
    (64) parameterOrTypeRecursive -> . COMMA optionalParameterOrType
    (65) parameterOrTypeRecursive -> . COMMA optionalParameterOrType parameterOrTypeRecursive
    (66) parameterOrTypeRecursive -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 313
    RPAREN          reduce using rule 66 (parameterOrTypeRecursive -> .)

  ! COMMA           [ reduce using rule 66 (parameterOrTypeRecursive -> .) ]

    parameterOrTypeRecursive       shift and go to state 312

state 238

    (61) optionalParameterOrType -> parameter .

    COMMA           reduce using rule 61 (optionalParameterOrType -> parameter .)
    RPAREN          reduce using rule 61 (optionalParameterOrType -> parameter .)


state 239

    (59) functionType -> receiverType PONTO . functionTypeParameters SETA type
    (67) functionTypeParameters -> . LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN

    LPAREN          shift and go to state 315

    functionTypeParameters         shift and go to state 314

state 240

    (60) functionType -> functionTypeParameters SETA . type
    (40) type -> . optionalTypeModifiers optype
    (41) optionalTypeModifiers -> . typeModifiers
    (42) optionalTypeModifiers -> .
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (48) typeModifier -> . SUSPEND

  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 42 (optionalTypeModifiers -> .)
    ID              reduce using rule 42 (optionalTypeModifiers -> .)
    CROSSINLINE     reduce using rule 42 (optionalTypeModifiers -> .)
    IMPORT          reduce using rule 42 (optionalTypeModifiers -> .)
    INIT            reduce using rule 42 (optionalTypeModifiers -> .)
    NOINLINE        reduce using rule 42 (optionalTypeModifiers -> .)
    OUT             reduce using rule 42 (optionalTypeModifiers -> .)
    VARARG          reduce using rule 42 (optionalTypeModifiers -> .)
    WHERE           reduce using rule 42 (optionalTypeModifiers -> .)
    OBJECT          reduce using rule 42 (optionalTypeModifiers -> .)
    CONST           reduce using rule 42 (optionalTypeModifiers -> .)
    CONSTRUCTOR     reduce using rule 42 (optionalTypeModifiers -> .)
    EOF             reduce using rule 42 (optionalTypeModifiers -> .)
    FALSE           reduce using rule 42 (optionalTypeModifiers -> .)
    FUNCTION        reduce using rule 42 (optionalTypeModifiers -> .)
    NULL            reduce using rule 42 (optionalTypeModifiers -> .)
    NULLABLE        reduce using rule 42 (optionalTypeModifiers -> .)
    NUMBER          reduce using rule 42 (optionalTypeModifiers -> .)
    OPERATOR        reduce using rule 42 (optionalTypeModifiers -> .)
    SMARTCAST       reduce using rule 42 (optionalTypeModifiers -> .)
    THIS            reduce using rule 42 (optionalTypeModifiers -> .)
    TRUE            reduce using rule 42 (optionalTypeModifiers -> .)
    VAL             reduce using rule 42 (optionalTypeModifiers -> .)
    VAR             reduce using rule 42 (optionalTypeModifiers -> .)
    WHEN            reduce using rule 42 (optionalTypeModifiers -> .)
    LONG            reduce using rule 42 (optionalTypeModifiers -> .)
    ARRAY           reduce using rule 42 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 42 (optionalTypeModifiers -> .) ]

    type                           shift and go to state 316
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 241

    (53) simpleUserType -> simpleIdentifier typeArguments .

    LCHAVE          reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    FUN             reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    $end            reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    FOR             reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    WHILE           reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    DO              reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    VAR             reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    VAL             reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    ID              reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    CROSSINLINE     reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    IMPORT          reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    INIT            reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    NOINLINE        reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    OUT             reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    VARARG          reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    WHERE           reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    OBJECT          reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    CONST           reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    CONSTRUCTOR     reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    EOF             reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    FALSE           reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    FUNCTION        reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    NULL            reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    NULLABLE        reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    NUMBER          reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    OPERATOR        reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    SMARTCAST       reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    THIS            reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    TRUE            reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    WHEN            reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    LONG            reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    ARRAY           reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    LPAREN          reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    LITERAL_STRING  reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    LCCT            reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    IF              reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    RETURN          reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    RETURN_AT       reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    CONTINUE        reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    CONTINUE_AT     reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    BREAK           reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    BREAK_AT        reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    RCHAVE          reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    INCREMENTO      reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    DECREMENTO      reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    MINUS           reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    PLUS            reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    NOT             reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    SUSPEND         reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    COLONCOLON      reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    MENOR           reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    PONTO           reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    AS              reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    MAISIGUAL       reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    MENOSIGUAL      reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    MULTIGUAL       reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    DIVIGUAL        reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    MODIGUAL        reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    MULT            reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    DIVIDE          reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    MOD             reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    PONTOPONTO      reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    ELVIS           reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    IN              reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    NOT_IN          reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    IS              reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    NOT_IS          reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    MAIOR           reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    MENORIGUAL      reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    MAIORIGUAL      reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    DIFERENTE       reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    IDENTIDADE      reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    IGUALDADE       reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    SEMIDENTIDADE   reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    AND             reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    OR              reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    COMMA           reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    RPAREN          reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    RCCT            reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    PV              reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    ELSE            reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    SETA            reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    ATRIBUICAO      reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)


state 242

    (193) lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .

    INCREMENTO      reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    DECREMENTO      reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    MENOR           reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    LCCT            reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    COLONCOLON      reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    PONTO           reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    LPAREN          reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    RCHAVE          reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    AS              reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    MAISIGUAL       reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    MENOSIGUAL      reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    MULTIGUAL       reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    DIVIGUAL        reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    MODIGUAL        reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    MULT            reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    DIVIDE          reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    MOD             reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    PLUS            reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    MINUS           reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    PONTOPONTO      reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    ID              reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    CROSSINLINE     reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    IMPORT          reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    INIT            reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    NOINLINE        reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    OUT             reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    VARARG          reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    WHERE           reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    OBJECT          reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    CONST           reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    CONSTRUCTOR     reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    EOF             reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    FALSE           reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    FUNCTION        reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    NULL            reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    NULLABLE        reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    NUMBER          reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    OPERATOR        reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    SMARTCAST       reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    THIS            reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    TRUE            reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    VAL             reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    VAR             reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    WHEN            reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    LONG            reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    ARRAY           reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    ELVIS           reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    IN              reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    NOT_IN          reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    IS              reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    NOT_IS          reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    MAIOR           reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    MENORIGUAL      reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    MAIORIGUAL      reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    DIFERENTE       reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    IDENTIDADE      reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    IGUALDADE       reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    SEMIDENTIDADE   reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    AND             reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    OR              reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    FUN             reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    FOR             reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    WHILE           reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    DO              reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    LITERAL_STRING  reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    IF              reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    RETURN          reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    RETURN_AT       reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    CONTINUE        reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    CONTINUE_AT     reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    BREAK           reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    BREAK_AT        reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    NOT             reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    SUSPEND         reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    COMMA           reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    RPAREN          reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    LCHAVE          reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    RCCT            reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    PV              reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    ELSE            reduce using rule 193 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)


state 243

    (195) optionsLambdaLiteral -> lambdaParameters SETA . statements
    (70) statements -> . statement
    (71) statements -> . statement statements
    (72) statement -> . functionDeclaration
    (73) statement -> . assignment
    (74) statement -> . loopStatement
    (75) statement -> . expression
    (76) statement -> . propertyDeclaration
    (7) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (90) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (91) assignment -> . assignableExpression assignmentAndOperator expression
    (80) loopStatement -> . forStatement
    (81) loopStatement -> . whileStatement
    (82) loopStatement -> . doWhileStatement
    (12) expression -> . disjunction
    (17) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (136) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (137) directlyAssignableExpression -> . simpleIdentifier
    (138) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (140) assignableExpression -> . prefixUnaryExpression
    (141) assignableExpression -> . parenthesizedAssignableExpression
    (85) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody
    (86) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (87) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (88) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (89) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (13) varOrVal -> . VAR
    (14) varOrVal -> . VAL
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (139) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (142) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (69) receiverType -> . typeModifier parenthesizedType
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (48) typeModifier -> . SUSPEND
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type

    FUN             shift and go to state 62
    FOR             shift and go to state 75
    WHILE           shift and go to state 77
    DO              shift and go to state 78
    VAR             shift and go to state 80
    VAL             shift and go to state 81
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 76
    LITERAL_STRING  shift and go to state 86
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    SUSPEND         shift and go to state 48

    statements                     shift and go to state 317
    statement                      shift and go to state 56
    functionDeclaration            shift and go to state 57
    assignment                     shift and go to state 58
    loopStatement                  shift and go to state 59
    expression                     shift and go to state 60
    propertyDeclaration            shift and go to state 61
    simpleIdentifier               shift and go to state 63
    directlyAssignableExpression   shift and go to state 64
    assignableExpression           shift and go to state 65
    forStatement                   shift and go to state 66
    whileStatement                 shift and go to state 67
    doWhileStatement               shift and go to state 68
    disjunction                    shift and go to state 69
    varOrVal                       shift and go to state 70
    postfixUnaryExpression         shift and go to state 71
    parenthesizedDirectlyAssignableExpression shift and go to state 72
    prefixUnaryExpression          shift and go to state 73
    parenthesizedAssignableExpression shift and go to state 74
    conjunction                    shift and go to state 79
    primaryExpression              shift and go to state 82
    prefixUnaryExpressionRecursive shift and go to state 83
    equality                       shift and go to state 84
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    unaryPrefix                    shift and go to state 92
    comparison                     shift and go to state 93
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    infixOperation                 shift and go to state 107
    receiverType                   shift and go to state 108
    elvisExpression                shift and go to state 114
    typeModifier                   shift and go to state 115
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120

state 244

    (196) optionsLambdaLiteral -> SETA statements .

    LCHAVE          reduce using rule 196 (optionsLambdaLiteral -> SETA statements .)


state 245

    (198) lambdaParameters -> lambdaParameter COMMA . lambdaParameters
    (197) lambdaParameters -> . lambdaParameter
    (198) lambdaParameters -> . lambdaParameter COMMA lambdaParameters
    (199) lambdaParameter -> . variableDeclaration
    (200) lambdaParameter -> . multiVariableDeclaration optionalType
    (33) variableDeclaration -> . simpleIdentifier DOISP type
    (34) variableDeclaration -> . simpleIdentifier
    (35) multiVariableDeclaration -> . LPAREN multiVariableDeclarationRecursive RPAREN
    (36) multiVariableDeclaration -> . LPAREN RPAREN
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY

    LPAREN          shift and go to state 260
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

    lambdaParameter                shift and go to state 144
    lambdaParameters               shift and go to state 318
    variableDeclaration            shift and go to state 145
    multiVariableDeclaration       shift and go to state 146
    simpleIdentifier               shift and go to state 261

state 246

    (200) lambdaParameter -> multiVariableDeclaration optionalType .

    COMMA           reduce using rule 200 (lambdaParameter -> multiVariableDeclaration optionalType .)
    SETA            reduce using rule 200 (lambdaParameter -> multiVariableDeclaration optionalType .)


state 247

    (33) variableDeclaration -> simpleIdentifier DOISP . type
    (40) type -> . optionalTypeModifiers optype
    (41) optionalTypeModifiers -> . typeModifiers
    (42) optionalTypeModifiers -> .
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (48) typeModifier -> . SUSPEND

  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 42 (optionalTypeModifiers -> .)
    ID              reduce using rule 42 (optionalTypeModifiers -> .)
    CROSSINLINE     reduce using rule 42 (optionalTypeModifiers -> .)
    IMPORT          reduce using rule 42 (optionalTypeModifiers -> .)
    INIT            reduce using rule 42 (optionalTypeModifiers -> .)
    NOINLINE        reduce using rule 42 (optionalTypeModifiers -> .)
    OUT             reduce using rule 42 (optionalTypeModifiers -> .)
    VARARG          reduce using rule 42 (optionalTypeModifiers -> .)
    WHERE           reduce using rule 42 (optionalTypeModifiers -> .)
    OBJECT          reduce using rule 42 (optionalTypeModifiers -> .)
    CONST           reduce using rule 42 (optionalTypeModifiers -> .)
    CONSTRUCTOR     reduce using rule 42 (optionalTypeModifiers -> .)
    EOF             reduce using rule 42 (optionalTypeModifiers -> .)
    FALSE           reduce using rule 42 (optionalTypeModifiers -> .)
    FUNCTION        reduce using rule 42 (optionalTypeModifiers -> .)
    NULL            reduce using rule 42 (optionalTypeModifiers -> .)
    NULLABLE        reduce using rule 42 (optionalTypeModifiers -> .)
    NUMBER          reduce using rule 42 (optionalTypeModifiers -> .)
    OPERATOR        reduce using rule 42 (optionalTypeModifiers -> .)
    SMARTCAST       reduce using rule 42 (optionalTypeModifiers -> .)
    THIS            reduce using rule 42 (optionalTypeModifiers -> .)
    TRUE            reduce using rule 42 (optionalTypeModifiers -> .)
    VAL             reduce using rule 42 (optionalTypeModifiers -> .)
    VAR             reduce using rule 42 (optionalTypeModifiers -> .)
    WHEN            reduce using rule 42 (optionalTypeModifiers -> .)
    LONG            reduce using rule 42 (optionalTypeModifiers -> .)
    ARRAY           reduce using rule 42 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 42 (optionalTypeModifiers -> .) ]

    type                           shift and go to state 319
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 248

    (35) multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive . RPAREN

    RPAREN          shift and go to state 320


state 249

    (36) multiVariableDeclaration -> LPAREN RPAREN .

    DOISP           reduce using rule 36 (multiVariableDeclaration -> LPAREN RPAREN .)
    COMMA           reduce using rule 36 (multiVariableDeclaration -> LPAREN RPAREN .)
    SETA            reduce using rule 36 (multiVariableDeclaration -> LPAREN RPAREN .)
    ATRIBUICAO      reduce using rule 36 (multiVariableDeclaration -> LPAREN RPAREN .)
    IN              reduce using rule 36 (multiVariableDeclaration -> LPAREN RPAREN .)


state 250

    (37) multiVariableDeclarationRecursive -> variableDeclaration .
    (38) multiVariableDeclarationRecursive -> variableDeclaration . COMMA multiVariableDeclarationRecursive

    RPAREN          reduce using rule 37 (multiVariableDeclarationRecursive -> variableDeclaration .)
    COMMA           shift and go to state 321


state 251

    (137) directlyAssignableExpression -> simpleIdentifier .
    (33) variableDeclaration -> simpleIdentifier . DOISP type
    (34) variableDeclaration -> simpleIdentifier .
    (171) primaryExpression -> simpleIdentifier .
    (126) label -> simpleIdentifier .

  ! reduce/reduce conflict for RPAREN resolved using rule 34 (variableDeclaration -> simpleIdentifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 34 (variableDeclaration -> simpleIdentifier .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OBJECT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONST resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for EOF resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FALSE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NULL resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NUMBER resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for THIS resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for TRUE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VAL resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VAR resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHEN resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LONG resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ARRAY resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 126 (label -> simpleIdentifier .)
    DOISP           shift and go to state 247
    COMMA           reduce using rule 34 (variableDeclaration -> simpleIdentifier .)
    RPAREN          reduce using rule 34 (variableDeclaration -> simpleIdentifier .)
    MENOR           reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    PONTO           reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    AS              reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MULT            reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    DIVIDE          reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MOD             reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    ELVIS           reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    IN              reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    NOT_IN          reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    IS              reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    NOT_IS          reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MAIOR           reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    DIFERENTE       reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    IGUALDADE       reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    AND             reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    OR              reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    INCREMENTO      reduce using rule 126 (label -> simpleIdentifier .)
    DECREMENTO      reduce using rule 126 (label -> simpleIdentifier .)
    MINUS           reduce using rule 126 (label -> simpleIdentifier .)
    PLUS            reduce using rule 126 (label -> simpleIdentifier .)
    NOT             reduce using rule 126 (label -> simpleIdentifier .)
    ID              reduce using rule 126 (label -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 126 (label -> simpleIdentifier .)
    IMPORT          reduce using rule 126 (label -> simpleIdentifier .)
    INIT            reduce using rule 126 (label -> simpleIdentifier .)
    NOINLINE        reduce using rule 126 (label -> simpleIdentifier .)
    OUT             reduce using rule 126 (label -> simpleIdentifier .)
    VARARG          reduce using rule 126 (label -> simpleIdentifier .)
    WHERE           reduce using rule 126 (label -> simpleIdentifier .)
    OBJECT          reduce using rule 126 (label -> simpleIdentifier .)
    CONST           reduce using rule 126 (label -> simpleIdentifier .)
    CONSTRUCTOR     reduce using rule 126 (label -> simpleIdentifier .)
    EOF             reduce using rule 126 (label -> simpleIdentifier .)
    FALSE           reduce using rule 126 (label -> simpleIdentifier .)
    FUNCTION        reduce using rule 126 (label -> simpleIdentifier .)
    NULL            reduce using rule 126 (label -> simpleIdentifier .)
    NULLABLE        reduce using rule 126 (label -> simpleIdentifier .)
    NUMBER          reduce using rule 126 (label -> simpleIdentifier .)
    OPERATOR        reduce using rule 126 (label -> simpleIdentifier .)
    SMARTCAST       reduce using rule 126 (label -> simpleIdentifier .)
    THIS            reduce using rule 126 (label -> simpleIdentifier .)
    TRUE            reduce using rule 126 (label -> simpleIdentifier .)
    VAL             reduce using rule 126 (label -> simpleIdentifier .)
    VAR             reduce using rule 126 (label -> simpleIdentifier .)
    WHEN            reduce using rule 126 (label -> simpleIdentifier .)
    LONG            reduce using rule 126 (label -> simpleIdentifier .)
    ARRAY           reduce using rule 126 (label -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 126 (label -> simpleIdentifier .)
    LPAREN          reduce using rule 126 (label -> simpleIdentifier .)
    LCCT            reduce using rule 126 (label -> simpleIdentifier .)
    IF              reduce using rule 126 (label -> simpleIdentifier .)
    RETURN          reduce using rule 126 (label -> simpleIdentifier .)
    RETURN_AT       reduce using rule 126 (label -> simpleIdentifier .)
    CONTINUE        reduce using rule 126 (label -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 126 (label -> simpleIdentifier .)
    BREAK           reduce using rule 126 (label -> simpleIdentifier .)
    BREAK_AT        reduce using rule 126 (label -> simpleIdentifier .)
    RCHAVE          reduce using rule 126 (label -> simpleIdentifier .)
    FUN             reduce using rule 126 (label -> simpleIdentifier .)
    SUSPEND         reduce using rule 126 (label -> simpleIdentifier .)
    COLONCOLON      reduce using rule 126 (label -> simpleIdentifier .)

  ! RPAREN          [ reduce using rule 137 (directlyAssignableExpression -> simpleIdentifier .) ]
  ! INCREMENTO      [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! RCHAVE          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! RPAREN          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! PLUS            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! OBJECT          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! CONST           [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! CONSTRUCTOR     [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! EOF             [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! FALSE           [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! FUNCTION        [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! NULL            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! NULLABLE        [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! NUMBER          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! OPERATOR        [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! SMARTCAST       [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! THIS            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! TRUE            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! VAL             [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! VAR             [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! WHEN            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! LONG            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! ARRAY           [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]


state 252

    (207) anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType . optionalType optionalTypeConstraints optionalFunctionBody
    (3) optionalType -> . DOISP type
    (4) optionalType -> .

    DOISP           shift and go to state 35
    ID              reduce using rule 4 (optionalType -> .)
    CROSSINLINE     reduce using rule 4 (optionalType -> .)
    IMPORT          reduce using rule 4 (optionalType -> .)
    INIT            reduce using rule 4 (optionalType -> .)
    NOINLINE        reduce using rule 4 (optionalType -> .)
    OUT             reduce using rule 4 (optionalType -> .)
    VARARG          reduce using rule 4 (optionalType -> .)
    WHERE           reduce using rule 4 (optionalType -> .)
    OBJECT          reduce using rule 4 (optionalType -> .)
    CONST           reduce using rule 4 (optionalType -> .)
    CONSTRUCTOR     reduce using rule 4 (optionalType -> .)
    EOF             reduce using rule 4 (optionalType -> .)
    FALSE           reduce using rule 4 (optionalType -> .)
    FUNCTION        reduce using rule 4 (optionalType -> .)
    NULL            reduce using rule 4 (optionalType -> .)
    NULLABLE        reduce using rule 4 (optionalType -> .)
    NUMBER          reduce using rule 4 (optionalType -> .)
    OPERATOR        reduce using rule 4 (optionalType -> .)
    SMARTCAST       reduce using rule 4 (optionalType -> .)
    THIS            reduce using rule 4 (optionalType -> .)
    TRUE            reduce using rule 4 (optionalType -> .)
    VAL             reduce using rule 4 (optionalType -> .)
    VAR             reduce using rule 4 (optionalType -> .)
    WHEN            reduce using rule 4 (optionalType -> .)
    LONG            reduce using rule 4 (optionalType -> .)
    ARRAY           reduce using rule 4 (optionalType -> .)
    ATRIBUICAO      reduce using rule 4 (optionalType -> .)
    LCHAVE          reduce using rule 4 (optionalType -> .)
    INCREMENTO      reduce using rule 4 (optionalType -> .)
    DECREMENTO      reduce using rule 4 (optionalType -> .)
    MENOR           reduce using rule 4 (optionalType -> .)
    LCCT            reduce using rule 4 (optionalType -> .)
    COLONCOLON      reduce using rule 4 (optionalType -> .)
    PONTO           reduce using rule 4 (optionalType -> .)
    LPAREN          reduce using rule 4 (optionalType -> .)
    RCHAVE          reduce using rule 4 (optionalType -> .)
    AS              reduce using rule 4 (optionalType -> .)
    MAISIGUAL       reduce using rule 4 (optionalType -> .)
    MENOSIGUAL      reduce using rule 4 (optionalType -> .)
    MULTIGUAL       reduce using rule 4 (optionalType -> .)
    DIVIGUAL        reduce using rule 4 (optionalType -> .)
    MODIGUAL        reduce using rule 4 (optionalType -> .)
    MULT            reduce using rule 4 (optionalType -> .)
    DIVIDE          reduce using rule 4 (optionalType -> .)
    MOD             reduce using rule 4 (optionalType -> .)
    PLUS            reduce using rule 4 (optionalType -> .)
    MINUS           reduce using rule 4 (optionalType -> .)
    PONTOPONTO      reduce using rule 4 (optionalType -> .)
    ELVIS           reduce using rule 4 (optionalType -> .)
    IN              reduce using rule 4 (optionalType -> .)
    NOT_IN          reduce using rule 4 (optionalType -> .)
    IS              reduce using rule 4 (optionalType -> .)
    NOT_IS          reduce using rule 4 (optionalType -> .)
    MAIOR           reduce using rule 4 (optionalType -> .)
    MENORIGUAL      reduce using rule 4 (optionalType -> .)
    MAIORIGUAL      reduce using rule 4 (optionalType -> .)
    DIFERENTE       reduce using rule 4 (optionalType -> .)
    IDENTIDADE      reduce using rule 4 (optionalType -> .)
    IGUALDADE       reduce using rule 4 (optionalType -> .)
    SEMIDENTIDADE   reduce using rule 4 (optionalType -> .)
    AND             reduce using rule 4 (optionalType -> .)
    OR              reduce using rule 4 (optionalType -> .)
    FUN             reduce using rule 4 (optionalType -> .)
    FOR             reduce using rule 4 (optionalType -> .)
    WHILE           reduce using rule 4 (optionalType -> .)
    DO              reduce using rule 4 (optionalType -> .)
    LITERAL_STRING  reduce using rule 4 (optionalType -> .)
    IF              reduce using rule 4 (optionalType -> .)
    RETURN          reduce using rule 4 (optionalType -> .)
    RETURN_AT       reduce using rule 4 (optionalType -> .)
    CONTINUE        reduce using rule 4 (optionalType -> .)
    CONTINUE_AT     reduce using rule 4 (optionalType -> .)
    BREAK           reduce using rule 4 (optionalType -> .)
    BREAK_AT        reduce using rule 4 (optionalType -> .)
    NOT             reduce using rule 4 (optionalType -> .)
    SUSPEND         reduce using rule 4 (optionalType -> .)
    COMMA           reduce using rule 4 (optionalType -> .)
    RPAREN          reduce using rule 4 (optionalType -> .)
    RCCT            reduce using rule 4 (optionalType -> .)
    PV              reduce using rule 4 (optionalType -> .)
    ELSE            reduce using rule 4 (optionalType -> .)

    optionalType                   shift and go to state 322

state 253

    (183) parametersWithOptionalType -> LPAREN . parametersWithOptionalTypeRecursive RPAREN
    (184) parametersWithOptionalType -> LPAREN . RPAREN
    (185) parametersWithOptionalTypeRecursive -> . parameterWithOptionalType
    (186) parametersWithOptionalTypeRecursive -> . parameterWithOptionalType COMMA parametersWithOptionalTypeRecursive COMMA
    (187) parameterWithOptionalType -> . optionalParameterModifiers simpleIdentifier optionalType
    (188) optionalParameterModifiers -> . parameterModifiers
    (189) optionalParameterModifiers -> .
    (190) parameterModifiers -> . VARARG
    (191) parameterModifiers -> . NOINLINE
    (192) parameterModifiers -> . CROSSINLINE

  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
    RPAREN          shift and go to state 324
    ID              reduce using rule 189 (optionalParameterModifiers -> .)
    IMPORT          reduce using rule 189 (optionalParameterModifiers -> .)
    INIT            reduce using rule 189 (optionalParameterModifiers -> .)
    OUT             reduce using rule 189 (optionalParameterModifiers -> .)
    WHERE           reduce using rule 189 (optionalParameterModifiers -> .)
    OBJECT          reduce using rule 189 (optionalParameterModifiers -> .)
    CONST           reduce using rule 189 (optionalParameterModifiers -> .)
    CONSTRUCTOR     reduce using rule 189 (optionalParameterModifiers -> .)
    EOF             reduce using rule 189 (optionalParameterModifiers -> .)
    FALSE           reduce using rule 189 (optionalParameterModifiers -> .)
    FUNCTION        reduce using rule 189 (optionalParameterModifiers -> .)
    NULL            reduce using rule 189 (optionalParameterModifiers -> .)
    NULLABLE        reduce using rule 189 (optionalParameterModifiers -> .)
    NUMBER          reduce using rule 189 (optionalParameterModifiers -> .)
    OPERATOR        reduce using rule 189 (optionalParameterModifiers -> .)
    SMARTCAST       reduce using rule 189 (optionalParameterModifiers -> .)
    THIS            reduce using rule 189 (optionalParameterModifiers -> .)
    TRUE            reduce using rule 189 (optionalParameterModifiers -> .)
    VAL             reduce using rule 189 (optionalParameterModifiers -> .)
    VAR             reduce using rule 189 (optionalParameterModifiers -> .)
    WHEN            reduce using rule 189 (optionalParameterModifiers -> .)
    LONG            reduce using rule 189 (optionalParameterModifiers -> .)
    ARRAY           reduce using rule 189 (optionalParameterModifiers -> .)
    VARARG          shift and go to state 328
    NOINLINE        shift and go to state 329
    CROSSINLINE     shift and go to state 330

  ! CROSSINLINE     [ reduce using rule 189 (optionalParameterModifiers -> .) ]
  ! NOINLINE        [ reduce using rule 189 (optionalParameterModifiers -> .) ]
  ! VARARG          [ reduce using rule 189 (optionalParameterModifiers -> .) ]

    parametersWithOptionalTypeRecursive shift and go to state 323
    parameterWithOptionalType      shift and go to state 325
    optionalParameterModifiers     shift and go to state 326
    parameterModifiers             shift and go to state 327

state 254

    (201) optionalTypePonto -> type PONTO .

    LPAREN          reduce using rule 201 (optionalTypePonto -> type PONTO .)


state 255

    (90) assignment -> directlyAssignableExpression ATRIBUICAO expression .
    (219) jumpExpression -> expression .

  ! reduce/reduce conflict for FUN resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for FOR resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for DO resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for VAR resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for VAL resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for ID resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for INIT resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for OUT resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for VARARG resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for WHERE resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for CONST resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for EOF resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for FALSE resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for NULL resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for THIS resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for TRUE resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for WHEN resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for LONG resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for LCCT resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for IF resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for RETURN resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for BREAK resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for NOT resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for MENOR resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for PONTO resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for AS resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for MULT resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for MOD resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for IN resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for IS resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for AND resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for OR resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for RCCT resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for PV resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    FUN             reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    FOR             reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    WHILE           reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    DO              reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    VAR             reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    VAL             reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    ID              reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    CROSSINLINE     reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    IMPORT          reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    INIT            reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    NOINLINE        reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    OUT             reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    VARARG          reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    WHERE           reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    OBJECT          reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    CONST           reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    CONSTRUCTOR     reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    EOF             reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    FALSE           reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    FUNCTION        reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    NULL            reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    NULLABLE        reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    NUMBER          reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    OPERATOR        reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    SMARTCAST       reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    THIS            reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    TRUE            reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    WHEN            reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    LONG            reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    ARRAY           reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    LPAREN          reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    LITERAL_STRING  reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    LCCT            reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    IF              reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    RETURN          reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    RETURN_AT       reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    CONTINUE        reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    CONTINUE_AT     reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    BREAK           reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    BREAK_AT        reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    RCHAVE          reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    INCREMENTO      reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    DECREMENTO      reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MINUS           reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    PLUS            reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    NOT             reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    SUSPEND         reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    COLONCOLON      reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    LCHAVE          reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MENOR           reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    PONTO           reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    AS              reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MAISIGUAL       reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MENOSIGUAL      reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MULTIGUAL       reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    DIVIGUAL        reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MODIGUAL        reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MULT            reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    DIVIDE          reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MOD             reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    PONTOPONTO      reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    ELVIS           reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    IN              reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    NOT_IN          reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    IS              reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    NOT_IS          reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MAIOR           reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MENORIGUAL      reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MAIORIGUAL      reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    DIFERENTE       reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    IDENTIDADE      reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    IGUALDADE       reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    SEMIDENTIDADE   reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    AND             reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    OR              reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    COMMA           reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    RPAREN          reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    RCCT            reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    PV              reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    ELSE            reduce using rule 90 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)

  ! FUN             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! FOR             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! WHILE           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DO              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! VAR             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! VAL             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! ID              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CROSSINLINE     [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IMPORT          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! INIT            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NOINLINE        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! OUT             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! VARARG          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! WHERE           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! OBJECT          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CONST           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CONSTRUCTOR     [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! EOF             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! FALSE           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! FUNCTION        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NULL            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NULLABLE        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NUMBER          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! OPERATOR        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! SMARTCAST       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! THIS            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! TRUE            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! WHEN            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LONG            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! ARRAY           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LPAREN          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LITERAL_STRING  [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LCCT            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IF              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RETURN          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RETURN_AT       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CONTINUE        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CONTINUE_AT     [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! BREAK           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! BREAK_AT        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RCHAVE          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! INCREMENTO      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DECREMENTO      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MINUS           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! PLUS            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NOT             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! SUSPEND         [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! COLONCOLON      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LCHAVE          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MENOR           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! PONTO           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! AS              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MAISIGUAL       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MENOSIGUAL      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MULTIGUAL       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DIVIGUAL        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MODIGUAL        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MULT            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DIVIDE          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MOD             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! PONTOPONTO      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! ELVIS           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IN              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NOT_IN          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IS              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NOT_IS          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MAIOR           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MENORIGUAL      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MAIORIGUAL      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DIFERENTE       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IDENTIDADE      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IGUALDADE       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! AND             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! OR              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! COMMA           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RCCT            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! PV              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! ELSE            [ reduce using rule 219 (jumpExpression -> expression .) ]


state 256

    (91) assignment -> assignableExpression assignmentAndOperator expression .
    (219) jumpExpression -> expression .

  ! reduce/reduce conflict for FUN resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for FOR resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for DO resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for VAR resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for VAL resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for ID resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for INIT resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for OUT resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for VARARG resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for WHERE resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for CONST resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for EOF resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for FALSE resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for NULL resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for THIS resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for TRUE resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for WHEN resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for LONG resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for LCCT resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for IF resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for RETURN resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for BREAK resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for NOT resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MENOR resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for PONTO resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for AS resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MULT resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MOD resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for IN resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for IS resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for AND resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for OR resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for RCCT resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for PV resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    FUN             reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    FOR             reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    WHILE           reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    DO              reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    VAR             reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    VAL             reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    ID              reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    CROSSINLINE     reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    IMPORT          reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    INIT            reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    NOINLINE        reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    OUT             reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    VARARG          reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    WHERE           reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    OBJECT          reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    CONST           reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    CONSTRUCTOR     reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    EOF             reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    FALSE           reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    FUNCTION        reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    NULL            reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    NULLABLE        reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    NUMBER          reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    OPERATOR        reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    SMARTCAST       reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    THIS            reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    TRUE            reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    WHEN            reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    LONG            reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    ARRAY           reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    LPAREN          reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    LITERAL_STRING  reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    LCCT            reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    IF              reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    RETURN          reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    RETURN_AT       reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    CONTINUE        reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    CONTINUE_AT     reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    BREAK           reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    BREAK_AT        reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    RCHAVE          reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    INCREMENTO      reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    DECREMENTO      reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    MINUS           reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    PLUS            reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    NOT             reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    SUSPEND         reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    COLONCOLON      reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    LCHAVE          reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    MENOR           reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    PONTO           reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    AS              reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    MAISIGUAL       reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    MENOSIGUAL      reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    MULTIGUAL       reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    DIVIGUAL        reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    MODIGUAL        reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    MULT            reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    DIVIDE          reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    MOD             reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    PONTOPONTO      reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    ELVIS           reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    IN              reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    NOT_IN          reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    IS              reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    NOT_IS          reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    MAIOR           reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    MENORIGUAL      reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    MAIORIGUAL      reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    DIFERENTE       reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    IDENTIDADE      reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    IGUALDADE       reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    SEMIDENTIDADE   reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    AND             reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    OR              reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    COMMA           reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    RPAREN          reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    RCCT            reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    PV              reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)
    ELSE            reduce using rule 91 (assignment -> assignableExpression assignmentAndOperator expression .)

  ! FUN             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! FOR             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! WHILE           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DO              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! VAR             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! VAL             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! ID              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CROSSINLINE     [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IMPORT          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! INIT            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NOINLINE        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! OUT             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! VARARG          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! WHERE           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! OBJECT          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CONST           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CONSTRUCTOR     [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! EOF             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! FALSE           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! FUNCTION        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NULL            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NULLABLE        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NUMBER          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! OPERATOR        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! SMARTCAST       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! THIS            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! TRUE            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! WHEN            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LONG            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! ARRAY           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LPAREN          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LITERAL_STRING  [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LCCT            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IF              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RETURN          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RETURN_AT       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CONTINUE        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CONTINUE_AT     [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! BREAK           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! BREAK_AT        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RCHAVE          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! INCREMENTO      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DECREMENTO      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MINUS           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! PLUS            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NOT             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! SUSPEND         [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! COLONCOLON      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LCHAVE          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MENOR           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! PONTO           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! AS              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MAISIGUAL       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MENOSIGUAL      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MULTIGUAL       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DIVIGUAL        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MODIGUAL        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MULT            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DIVIDE          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MOD             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! PONTOPONTO      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! ELVIS           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IN              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NOT_IN          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IS              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NOT_IS          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MAIOR           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MENORIGUAL      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MAIORIGUAL      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DIFERENTE       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IDENTIDADE      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IGUALDADE       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! AND             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! OR              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! COMMA           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RCCT            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! PV              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! ELSE            [ reduce using rule 219 (jumpExpression -> expression .) ]


state 257

    (17) propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration . ATRIBUICAO expression optionalPv

    ATRIBUICAO      shift and go to state 331


state 258

    (10) genericVariableDeclaration -> multiVariableDeclaration .

    ATRIBUICAO      reduce using rule 10 (genericVariableDeclaration -> multiVariableDeclaration .)
    IN              reduce using rule 10 (genericVariableDeclaration -> multiVariableDeclaration .)


state 259

    (11) genericVariableDeclaration -> variableDeclaration .

    ATRIBUICAO      reduce using rule 11 (genericVariableDeclaration -> variableDeclaration .)
    IN              reduce using rule 11 (genericVariableDeclaration -> variableDeclaration .)


state 260

    (35) multiVariableDeclaration -> LPAREN . multiVariableDeclarationRecursive RPAREN
    (36) multiVariableDeclaration -> LPAREN . RPAREN
    (37) multiVariableDeclarationRecursive -> . variableDeclaration
    (38) multiVariableDeclarationRecursive -> . variableDeclaration COMMA multiVariableDeclarationRecursive
    (33) variableDeclaration -> . simpleIdentifier DOISP type
    (34) variableDeclaration -> . simpleIdentifier
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY

    RPAREN          shift and go to state 249
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

    multiVariableDeclarationRecursive shift and go to state 248
    variableDeclaration            shift and go to state 250
    simpleIdentifier               shift and go to state 261

state 261

    (33) variableDeclaration -> simpleIdentifier . DOISP type
    (34) variableDeclaration -> simpleIdentifier .

    DOISP           shift and go to state 247
    ATRIBUICAO      reduce using rule 34 (variableDeclaration -> simpleIdentifier .)
    IN              reduce using rule 34 (variableDeclaration -> simpleIdentifier .)
    COMMA           reduce using rule 34 (variableDeclaration -> simpleIdentifier .)
    SETA            reduce using rule 34 (variableDeclaration -> simpleIdentifier .)
    RPAREN          reduce using rule 34 (variableDeclaration -> simpleIdentifier .)


state 262

    (18) typeParameters -> MENOR typeParameter . typeParametersRecursive optionalCOMMA MAIOR
    (19) typeParametersRecursive -> . COMMA typeParameter
    (20) typeParametersRecursive -> . COMMA typeParameter typeParametersRecursive

    COMMA           shift and go to state 333

    typeParametersRecursive        shift and go to state 332

state 263

    (23) typeParameter -> simpleIdentifier .
    (24) typeParameter -> simpleIdentifier . DOISP type

    COMMA           reduce using rule 23 (typeParameter -> simpleIdentifier .)
    MAIOR           reduce using rule 23 (typeParameter -> simpleIdentifier .)
    DOISP           shift and go to state 334


state 264

    (159) typeArguments -> MENOR typeArgumentsRecursive . MAIOR

    MAIOR           shift and go to state 335


state 265

    (160) typeArguments -> MENOR MAIOR .

    ATRIBUICAO      reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    RPAREN          reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    INCREMENTO      reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    DECREMENTO      reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    MENOR           reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    LCCT            reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    COLONCOLON      reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    PONTO           reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    LPAREN          reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    RCHAVE          reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    AS              reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    MAISIGUAL       reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    MENOSIGUAL      reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    MULTIGUAL       reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    DIVIGUAL        reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    MODIGUAL        reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    MULT            reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    DIVIDE          reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    MOD             reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    PLUS            reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    MINUS           reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    PONTOPONTO      reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    ID              reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    CROSSINLINE     reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    IMPORT          reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    INIT            reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    NOINLINE        reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    OUT             reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    VARARG          reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    WHERE           reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    OBJECT          reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    CONST           reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    CONSTRUCTOR     reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    EOF             reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    FALSE           reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    FUNCTION        reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    NULL            reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    NULLABLE        reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    NUMBER          reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    OPERATOR        reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    SMARTCAST       reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    THIS            reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    TRUE            reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    VAL             reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    VAR             reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    WHEN            reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    LONG            reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    ARRAY           reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    ELVIS           reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    IN              reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    NOT_IN          reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    IS              reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    NOT_IS          reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    MAIOR           reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    MENORIGUAL      reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    MAIORIGUAL      reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    DIFERENTE       reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    IDENTIDADE      reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    IGUALDADE       reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    SEMIDENTIDADE   reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    AND             reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    OR              reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    FUN             reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    FOR             reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    WHILE           reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    DO              reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    LITERAL_STRING  reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    IF              reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    RETURN          reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    RETURN_AT       reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    CONTINUE        reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    CONTINUE_AT     reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    BREAK           reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    BREAK_AT        reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    NOT             reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    SUSPEND         reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    COMMA           reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    LCHAVE          reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    RCCT            reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    PV              reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    ELSE            reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    $end            reduce using rule 160 (typeArguments -> MENOR MAIOR .)
    SETA            reduce using rule 160 (typeArguments -> MENOR MAIOR .)


state 266

    (161) typeArgumentsRecursive -> typeProjection .
    (162) typeArgumentsRecursive -> typeProjection . COMMA typeArgumentsRecursive
    (57) typeProjectionModifiers -> typeProjection .

    MAIOR           reduce using rule 161 (typeArgumentsRecursive -> typeProjection .)
    COMMA           shift and go to state 336
    SUSPEND         reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    LPAREN          reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    ID              reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    CROSSINLINE     reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    IMPORT          reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    INIT            reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    NOINLINE        reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    OUT             reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    VARARG          reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    WHERE           reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    OBJECT          reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    CONST           reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    CONSTRUCTOR     reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    EOF             reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    FALSE           reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    FUNCTION        reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    NULL            reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    NULLABLE        reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    NUMBER          reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    OPERATOR        reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    SMARTCAST       reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    THIS            reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    TRUE            reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    VAL             reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    VAR             reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    WHEN            reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    LONG            reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    ARRAY           reduce using rule 57 (typeProjectionModifiers -> typeProjection .)


state 267

    (55) typeProjection -> typeProjectionModifiers . type
    (40) type -> . optionalTypeModifiers optype
    (41) optionalTypeModifiers -> . typeModifiers
    (42) optionalTypeModifiers -> .
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (48) typeModifier -> . SUSPEND

  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 42 (optionalTypeModifiers -> .)
    ID              reduce using rule 42 (optionalTypeModifiers -> .)
    CROSSINLINE     reduce using rule 42 (optionalTypeModifiers -> .)
    IMPORT          reduce using rule 42 (optionalTypeModifiers -> .)
    INIT            reduce using rule 42 (optionalTypeModifiers -> .)
    NOINLINE        reduce using rule 42 (optionalTypeModifiers -> .)
    OUT             reduce using rule 42 (optionalTypeModifiers -> .)
    VARARG          reduce using rule 42 (optionalTypeModifiers -> .)
    WHERE           reduce using rule 42 (optionalTypeModifiers -> .)
    OBJECT          reduce using rule 42 (optionalTypeModifiers -> .)
    CONST           reduce using rule 42 (optionalTypeModifiers -> .)
    CONSTRUCTOR     reduce using rule 42 (optionalTypeModifiers -> .)
    EOF             reduce using rule 42 (optionalTypeModifiers -> .)
    FALSE           reduce using rule 42 (optionalTypeModifiers -> .)
    FUNCTION        reduce using rule 42 (optionalTypeModifiers -> .)
    NULL            reduce using rule 42 (optionalTypeModifiers -> .)
    NULLABLE        reduce using rule 42 (optionalTypeModifiers -> .)
    NUMBER          reduce using rule 42 (optionalTypeModifiers -> .)
    OPERATOR        reduce using rule 42 (optionalTypeModifiers -> .)
    SMARTCAST       reduce using rule 42 (optionalTypeModifiers -> .)
    THIS            reduce using rule 42 (optionalTypeModifiers -> .)
    TRUE            reduce using rule 42 (optionalTypeModifiers -> .)
    VAL             reduce using rule 42 (optionalTypeModifiers -> .)
    VAR             reduce using rule 42 (optionalTypeModifiers -> .)
    WHEN            reduce using rule 42 (optionalTypeModifiers -> .)
    LONG            reduce using rule 42 (optionalTypeModifiers -> .)
    ARRAY           reduce using rule 42 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 42 (optionalTypeModifiers -> .) ]

    type                           shift and go to state 337
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 268

    (56) typeProjection -> type .

    COMMA           reduce using rule 56 (typeProjection -> type .)
    MAIOR           reduce using rule 56 (typeProjection -> type .)
    SUSPEND         reduce using rule 56 (typeProjection -> type .)
    LPAREN          reduce using rule 56 (typeProjection -> type .)
    ID              reduce using rule 56 (typeProjection -> type .)
    CROSSINLINE     reduce using rule 56 (typeProjection -> type .)
    IMPORT          reduce using rule 56 (typeProjection -> type .)
    INIT            reduce using rule 56 (typeProjection -> type .)
    NOINLINE        reduce using rule 56 (typeProjection -> type .)
    OUT             reduce using rule 56 (typeProjection -> type .)
    VARARG          reduce using rule 56 (typeProjection -> type .)
    WHERE           reduce using rule 56 (typeProjection -> type .)
    OBJECT          reduce using rule 56 (typeProjection -> type .)
    CONST           reduce using rule 56 (typeProjection -> type .)
    CONSTRUCTOR     reduce using rule 56 (typeProjection -> type .)
    EOF             reduce using rule 56 (typeProjection -> type .)
    FALSE           reduce using rule 56 (typeProjection -> type .)
    FUNCTION        reduce using rule 56 (typeProjection -> type .)
    NULL            reduce using rule 56 (typeProjection -> type .)
    NULLABLE        reduce using rule 56 (typeProjection -> type .)
    NUMBER          reduce using rule 56 (typeProjection -> type .)
    OPERATOR        reduce using rule 56 (typeProjection -> type .)
    SMARTCAST       reduce using rule 56 (typeProjection -> type .)
    THIS            reduce using rule 56 (typeProjection -> type .)
    TRUE            reduce using rule 56 (typeProjection -> type .)
    VAL             reduce using rule 56 (typeProjection -> type .)
    VAR             reduce using rule 56 (typeProjection -> type .)
    WHEN            reduce using rule 56 (typeProjection -> type .)
    LONG            reduce using rule 56 (typeProjection -> type .)
    ARRAY           reduce using rule 56 (typeProjection -> type .)


state 269

    (58) typeProjectionModifiers -> typeProjectionModifier . typeProjectionModifiers
    (57) typeProjectionModifiers -> . typeProjection
    (58) typeProjectionModifiers -> . typeProjectionModifier typeProjectionModifiers
    (55) typeProjection -> . typeProjectionModifiers type
    (56) typeProjection -> . type
    (49) typeProjectionModifier -> . varianceModifier
    (40) type -> . optionalTypeModifiers optype
    (50) varianceModifier -> . IN
    (51) varianceModifier -> . OUT
    (41) optionalTypeModifiers -> . typeModifiers
    (42) optionalTypeModifiers -> .
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (48) typeModifier -> . SUSPEND

  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
    IN              shift and go to state 271
    OUT             shift and go to state 272
    LPAREN          reduce using rule 42 (optionalTypeModifiers -> .)
    ID              reduce using rule 42 (optionalTypeModifiers -> .)
    CROSSINLINE     reduce using rule 42 (optionalTypeModifiers -> .)
    IMPORT          reduce using rule 42 (optionalTypeModifiers -> .)
    INIT            reduce using rule 42 (optionalTypeModifiers -> .)
    NOINLINE        reduce using rule 42 (optionalTypeModifiers -> .)
    VARARG          reduce using rule 42 (optionalTypeModifiers -> .)
    WHERE           reduce using rule 42 (optionalTypeModifiers -> .)
    OBJECT          reduce using rule 42 (optionalTypeModifiers -> .)
    CONST           reduce using rule 42 (optionalTypeModifiers -> .)
    CONSTRUCTOR     reduce using rule 42 (optionalTypeModifiers -> .)
    EOF             reduce using rule 42 (optionalTypeModifiers -> .)
    FALSE           reduce using rule 42 (optionalTypeModifiers -> .)
    FUNCTION        reduce using rule 42 (optionalTypeModifiers -> .)
    NULL            reduce using rule 42 (optionalTypeModifiers -> .)
    NULLABLE        reduce using rule 42 (optionalTypeModifiers -> .)
    NUMBER          reduce using rule 42 (optionalTypeModifiers -> .)
    OPERATOR        reduce using rule 42 (optionalTypeModifiers -> .)
    SMARTCAST       reduce using rule 42 (optionalTypeModifiers -> .)
    THIS            reduce using rule 42 (optionalTypeModifiers -> .)
    TRUE            reduce using rule 42 (optionalTypeModifiers -> .)
    VAL             reduce using rule 42 (optionalTypeModifiers -> .)
    VAR             reduce using rule 42 (optionalTypeModifiers -> .)
    WHEN            reduce using rule 42 (optionalTypeModifiers -> .)
    LONG            reduce using rule 42 (optionalTypeModifiers -> .)
    ARRAY           reduce using rule 42 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! OUT             [ reduce using rule 42 (optionalTypeModifiers -> .) ]

    typeProjectionModifier         shift and go to state 269
    typeProjectionModifiers        shift and go to state 338
    typeProjection                 shift and go to state 339
    type                           shift and go to state 268
    varianceModifier               shift and go to state 270
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 270

    (49) typeProjectionModifier -> varianceModifier .

    IN              reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    OUT             reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    SUSPEND         reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    LPAREN          reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    ID              reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    CROSSINLINE     reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    IMPORT          reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    INIT            reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    NOINLINE        reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    VARARG          reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    WHERE           reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    OBJECT          reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    CONST           reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    CONSTRUCTOR     reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    EOF             reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    FALSE           reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    FUNCTION        reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    NULL            reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    NULLABLE        reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    NUMBER          reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    OPERATOR        reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    SMARTCAST       reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    THIS            reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    TRUE            reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    VAL             reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    VAR             reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    WHEN            reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    LONG            reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    ARRAY           reduce using rule 49 (typeProjectionModifier -> varianceModifier .)


state 271

    (50) varianceModifier -> IN .

    IN              reduce using rule 50 (varianceModifier -> IN .)
    OUT             reduce using rule 50 (varianceModifier -> IN .)
    SUSPEND         reduce using rule 50 (varianceModifier -> IN .)
    LPAREN          reduce using rule 50 (varianceModifier -> IN .)
    ID              reduce using rule 50 (varianceModifier -> IN .)
    CROSSINLINE     reduce using rule 50 (varianceModifier -> IN .)
    IMPORT          reduce using rule 50 (varianceModifier -> IN .)
    INIT            reduce using rule 50 (varianceModifier -> IN .)
    NOINLINE        reduce using rule 50 (varianceModifier -> IN .)
    VARARG          reduce using rule 50 (varianceModifier -> IN .)
    WHERE           reduce using rule 50 (varianceModifier -> IN .)
    OBJECT          reduce using rule 50 (varianceModifier -> IN .)
    CONST           reduce using rule 50 (varianceModifier -> IN .)
    CONSTRUCTOR     reduce using rule 50 (varianceModifier -> IN .)
    EOF             reduce using rule 50 (varianceModifier -> IN .)
    FALSE           reduce using rule 50 (varianceModifier -> IN .)
    FUNCTION        reduce using rule 50 (varianceModifier -> IN .)
    NULL            reduce using rule 50 (varianceModifier -> IN .)
    NULLABLE        reduce using rule 50 (varianceModifier -> IN .)
    NUMBER          reduce using rule 50 (varianceModifier -> IN .)
    OPERATOR        reduce using rule 50 (varianceModifier -> IN .)
    SMARTCAST       reduce using rule 50 (varianceModifier -> IN .)
    THIS            reduce using rule 50 (varianceModifier -> IN .)
    TRUE            reduce using rule 50 (varianceModifier -> IN .)
    VAL             reduce using rule 50 (varianceModifier -> IN .)
    VAR             reduce using rule 50 (varianceModifier -> IN .)
    WHEN            reduce using rule 50 (varianceModifier -> IN .)
    LONG            reduce using rule 50 (varianceModifier -> IN .)
    ARRAY           reduce using rule 50 (varianceModifier -> IN .)


state 272

    (51) varianceModifier -> OUT .

    IN              reduce using rule 51 (varianceModifier -> OUT .)
    OUT             reduce using rule 51 (varianceModifier -> OUT .)
    SUSPEND         reduce using rule 51 (varianceModifier -> OUT .)
    LPAREN          reduce using rule 51 (varianceModifier -> OUT .)
    ID              reduce using rule 51 (varianceModifier -> OUT .)
    CROSSINLINE     reduce using rule 51 (varianceModifier -> OUT .)
    IMPORT          reduce using rule 51 (varianceModifier -> OUT .)
    INIT            reduce using rule 51 (varianceModifier -> OUT .)
    NOINLINE        reduce using rule 51 (varianceModifier -> OUT .)
    VARARG          reduce using rule 51 (varianceModifier -> OUT .)
    WHERE           reduce using rule 51 (varianceModifier -> OUT .)
    OBJECT          reduce using rule 51 (varianceModifier -> OUT .)
    CONST           reduce using rule 51 (varianceModifier -> OUT .)
    CONSTRUCTOR     reduce using rule 51 (varianceModifier -> OUT .)
    EOF             reduce using rule 51 (varianceModifier -> OUT .)
    FALSE           reduce using rule 51 (varianceModifier -> OUT .)
    FUNCTION        reduce using rule 51 (varianceModifier -> OUT .)
    NULL            reduce using rule 51 (varianceModifier -> OUT .)
    NULLABLE        reduce using rule 51 (varianceModifier -> OUT .)
    NUMBER          reduce using rule 51 (varianceModifier -> OUT .)
    OPERATOR        reduce using rule 51 (varianceModifier -> OUT .)
    SMARTCAST       reduce using rule 51 (varianceModifier -> OUT .)
    THIS            reduce using rule 51 (varianceModifier -> OUT .)
    TRUE            reduce using rule 51 (varianceModifier -> OUT .)
    VAL             reduce using rule 51 (varianceModifier -> OUT .)
    VAR             reduce using rule 51 (varianceModifier -> OUT .)
    WHEN            reduce using rule 51 (varianceModifier -> OUT .)
    LONG            reduce using rule 51 (varianceModifier -> OUT .)
    ARRAY           reduce using rule 51 (varianceModifier -> OUT .)


state 273

    (146) indexingSuffix -> LCCT indexingSuffixRecursive . RCCT

    RCCT            shift and go to state 340


state 274

    (147) indexingSuffix -> LCCT RCCT .

    ATRIBUICAO      reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    RPAREN          reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    INCREMENTO      reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    DECREMENTO      reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    MENOR           reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    LCCT            reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    COLONCOLON      reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    PONTO           reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    LPAREN          reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    RCHAVE          reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    AS              reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    MAISIGUAL       reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    MENOSIGUAL      reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    MULTIGUAL       reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    DIVIGUAL        reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    MODIGUAL        reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    MULT            reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    DIVIDE          reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    MOD             reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    PLUS            reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    MINUS           reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    PONTOPONTO      reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    ID              reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    CROSSINLINE     reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    IMPORT          reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    INIT            reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    NOINLINE        reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    OUT             reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    VARARG          reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    WHERE           reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    OBJECT          reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    CONST           reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    CONSTRUCTOR     reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    EOF             reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    FALSE           reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    FUNCTION        reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    NULL            reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    NULLABLE        reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    NUMBER          reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    OPERATOR        reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    SMARTCAST       reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    THIS            reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    TRUE            reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    VAL             reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    VAR             reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    WHEN            reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    LONG            reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    ARRAY           reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    ELVIS           reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    IN              reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    NOT_IN          reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    IS              reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    NOT_IS          reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    MAIOR           reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    MENORIGUAL      reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    MAIORIGUAL      reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    DIFERENTE       reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    IDENTIDADE      reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    IGUALDADE       reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    SEMIDENTIDADE   reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    AND             reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    OR              reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    FUN             reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    FOR             reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    WHILE           reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    DO              reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    LITERAL_STRING  reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    IF              reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    RETURN          reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    RETURN_AT       reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    CONTINUE        reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    CONTINUE_AT     reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    BREAK           reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    BREAK_AT        reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    NOT             reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    SUSPEND         reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    COMMA           reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    LCHAVE          reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    RCCT            reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    PV              reduce using rule 147 (indexingSuffix -> LCCT RCCT .)
    ELSE            reduce using rule 147 (indexingSuffix -> LCCT RCCT .)


state 275

    (148) indexingSuffixRecursive -> expression .
    (149) indexingSuffixRecursive -> expression . COMMA indexingSuffixRecursive
    (219) jumpExpression -> expression .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RCCT resolved using rule 148 (indexingSuffixRecursive -> expression .)
    RCCT            reduce using rule 148 (indexingSuffixRecursive -> expression .)
    COMMA           shift and go to state 341
    INCREMENTO      reduce using rule 219 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 219 (jumpExpression -> expression .)
    MENOR           reduce using rule 219 (jumpExpression -> expression .)
    LCCT            reduce using rule 219 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 219 (jumpExpression -> expression .)
    PONTO           reduce using rule 219 (jumpExpression -> expression .)
    LPAREN          reduce using rule 219 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 219 (jumpExpression -> expression .)
    AS              reduce using rule 219 (jumpExpression -> expression .)
    MULT            reduce using rule 219 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 219 (jumpExpression -> expression .)
    MOD             reduce using rule 219 (jumpExpression -> expression .)
    PLUS            reduce using rule 219 (jumpExpression -> expression .)
    MINUS           reduce using rule 219 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 219 (jumpExpression -> expression .)
    ID              reduce using rule 219 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 219 (jumpExpression -> expression .)
    IMPORT          reduce using rule 219 (jumpExpression -> expression .)
    INIT            reduce using rule 219 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 219 (jumpExpression -> expression .)
    OUT             reduce using rule 219 (jumpExpression -> expression .)
    VARARG          reduce using rule 219 (jumpExpression -> expression .)
    WHERE           reduce using rule 219 (jumpExpression -> expression .)
    OBJECT          reduce using rule 219 (jumpExpression -> expression .)
    CONST           reduce using rule 219 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 219 (jumpExpression -> expression .)
    EOF             reduce using rule 219 (jumpExpression -> expression .)
    FALSE           reduce using rule 219 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 219 (jumpExpression -> expression .)
    NULL            reduce using rule 219 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 219 (jumpExpression -> expression .)
    NUMBER          reduce using rule 219 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 219 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 219 (jumpExpression -> expression .)
    THIS            reduce using rule 219 (jumpExpression -> expression .)
    TRUE            reduce using rule 219 (jumpExpression -> expression .)
    VAL             reduce using rule 219 (jumpExpression -> expression .)
    VAR             reduce using rule 219 (jumpExpression -> expression .)
    WHEN            reduce using rule 219 (jumpExpression -> expression .)
    LONG            reduce using rule 219 (jumpExpression -> expression .)
    ARRAY           reduce using rule 219 (jumpExpression -> expression .)
    ELVIS           reduce using rule 219 (jumpExpression -> expression .)
    IN              reduce using rule 219 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 219 (jumpExpression -> expression .)
    IS              reduce using rule 219 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 219 (jumpExpression -> expression .)
    MAIOR           reduce using rule 219 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 219 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 219 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 219 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 219 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 219 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 219 (jumpExpression -> expression .)
    AND             reduce using rule 219 (jumpExpression -> expression .)
    OR              reduce using rule 219 (jumpExpression -> expression .)

  ! COMMA           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RCCT            [ reduce using rule 219 (jumpExpression -> expression .) ]


state 276

    (150) navigationSuffix -> memberAccessOperator simpleIdentifier . CLASS

    CLASS           shift and go to state 342


state 277

    (151) navigationSuffix -> memberAccessOperator parenthesizedExpression . CLASS

    CLASS           shift and go to state 343


state 278

    (119) asExpression -> prefixUnaryExpression asOperator type .

    INCREMENTO      reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    DECREMENTO      reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    MENOR           reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    LCCT            reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    COLONCOLON      reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    PONTO           reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    LPAREN          reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    RCHAVE          reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    AS              reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    MAISIGUAL       reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    MENOSIGUAL      reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    MULTIGUAL       reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    DIVIGUAL        reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    MODIGUAL        reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    MULT            reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    DIVIDE          reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    MOD             reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    PLUS            reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    MINUS           reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    PONTOPONTO      reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    ID              reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    CROSSINLINE     reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    IMPORT          reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    INIT            reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    NOINLINE        reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    OUT             reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    VARARG          reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    WHERE           reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    OBJECT          reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    CONST           reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    CONSTRUCTOR     reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    EOF             reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    FALSE           reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    FUNCTION        reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    NULL            reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    NULLABLE        reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    NUMBER          reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    OPERATOR        reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    SMARTCAST       reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    THIS            reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    TRUE            reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    VAL             reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    VAR             reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    WHEN            reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    LONG            reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    ARRAY           reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    ELVIS           reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    IN              reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    NOT_IN          reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    IS              reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    NOT_IS          reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    MAIOR           reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    MENORIGUAL      reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    MAIORIGUAL      reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    DIFERENTE       reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    IDENTIDADE      reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    IGUALDADE       reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    SEMIDENTIDADE   reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    AND             reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    OR              reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    FUN             reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    FOR             reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    WHILE           reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    DO              reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    LITERAL_STRING  reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    IF              reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    RETURN          reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    RETURN_AT       reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    CONTINUE        reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    CONTINUE_AT     reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    BREAK           reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    BREAK_AT        reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    NOT             reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    SUSPEND         reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    COMMA           reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    RPAREN          reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    LCHAVE          reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    RCCT            reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    PV              reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)
    ELSE            reduce using rule 119 (asExpression -> prefixUnaryExpression asOperator type .)


state 279

    (252) asOperator -> AS asOperator .

    SUSPEND         reduce using rule 252 (asOperator -> AS asOperator .)
    LPAREN          reduce using rule 252 (asOperator -> AS asOperator .)
    ID              reduce using rule 252 (asOperator -> AS asOperator .)
    CROSSINLINE     reduce using rule 252 (asOperator -> AS asOperator .)
    IMPORT          reduce using rule 252 (asOperator -> AS asOperator .)
    INIT            reduce using rule 252 (asOperator -> AS asOperator .)
    NOINLINE        reduce using rule 252 (asOperator -> AS asOperator .)
    OUT             reduce using rule 252 (asOperator -> AS asOperator .)
    VARARG          reduce using rule 252 (asOperator -> AS asOperator .)
    WHERE           reduce using rule 252 (asOperator -> AS asOperator .)
    OBJECT          reduce using rule 252 (asOperator -> AS asOperator .)
    CONST           reduce using rule 252 (asOperator -> AS asOperator .)
    CONSTRUCTOR     reduce using rule 252 (asOperator -> AS asOperator .)
    EOF             reduce using rule 252 (asOperator -> AS asOperator .)
    FALSE           reduce using rule 252 (asOperator -> AS asOperator .)
    FUNCTION        reduce using rule 252 (asOperator -> AS asOperator .)
    NULL            reduce using rule 252 (asOperator -> AS asOperator .)
    NULLABLE        reduce using rule 252 (asOperator -> AS asOperator .)
    NUMBER          reduce using rule 252 (asOperator -> AS asOperator .)
    OPERATOR        reduce using rule 252 (asOperator -> AS asOperator .)
    SMARTCAST       reduce using rule 252 (asOperator -> AS asOperator .)
    THIS            reduce using rule 252 (asOperator -> AS asOperator .)
    TRUE            reduce using rule 252 (asOperator -> AS asOperator .)
    VAL             reduce using rule 252 (asOperator -> AS asOperator .)
    VAR             reduce using rule 252 (asOperator -> AS asOperator .)
    WHEN            reduce using rule 252 (asOperator -> AS asOperator .)
    LONG            reduce using rule 252 (asOperator -> AS asOperator .)
    ARRAY           reduce using rule 252 (asOperator -> AS asOperator .)


state 280

    (85) forStatement -> FOR LPAREN genericVariableDeclaration . IN expression RPAREN optionalControlStructureBody

    IN              shift and go to state 344


state 281

    (139) parenthesizedDirectlyAssignableExpression -> LPAREN directlyAssignableExpression RPAREN .

    ATRIBUICAO      reduce using rule 139 (parenthesizedDirectlyAssignableExpression -> LPAREN directlyAssignableExpression RPAREN .)
    RPAREN          reduce using rule 139 (parenthesizedDirectlyAssignableExpression -> LPAREN directlyAssignableExpression RPAREN .)


state 282

    (142) parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN .

    MAISIGUAL       reduce using rule 142 (parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN .)
    MENOSIGUAL      reduce using rule 142 (parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN .)
    MULTIGUAL       reduce using rule 142 (parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN .)
    DIVIGUAL        reduce using rule 142 (parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN .)
    MODIGUAL        reduce using rule 142 (parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN .)
    RPAREN          reduce using rule 142 (parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN .)


state 283

    (178) parenthesizedExpression -> LPAREN expression RPAREN .

    INCREMENTO      reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DECREMENTO      reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MENOR           reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    LCCT            reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    COLONCOLON      reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    PONTO           reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RCHAVE          reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    AS              reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MAISIGUAL       reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MENOSIGUAL      reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MULTIGUAL       reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DIVIGUAL        reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MODIGUAL        reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MULT            reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    PONTOPONTO      reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    ID              reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CROSSINLINE     reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IMPORT          reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    INIT            reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NOINLINE        reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    OUT             reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    VARARG          reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    WHERE           reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    OBJECT          reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CONST           reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CONSTRUCTOR     reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    EOF             reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NULL            reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NULLABLE        reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    OPERATOR        reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    SMARTCAST       reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    THIS            reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    VAL             reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    WHEN            reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    LONG            reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    ARRAY           reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    ELVIS           reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IN              reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NOT_IN          reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IS              reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NOT_IS          reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MAIOR           reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MENORIGUAL      reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MAIORIGUAL      reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DIFERENTE       reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IDENTIDADE      reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IGUALDADE       reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    SEMIDENTIDADE   reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    AND             reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    OR              reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    FUN             reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DO              reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    LITERAL_STRING  reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IF              reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RETURN_AT       reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CONTINUE_AT     reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    BREAK_AT        reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NOT             reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    SUSPEND         reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    LCHAVE          reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RCCT            reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    PV              reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CLASS           reduce using rule 178 (parenthesizedExpression -> LPAREN expression RPAREN .)


state 284

    (86) whileStatement -> WHILE LPAREN expression . RPAREN controlStructureBody
    (87) whileStatement -> WHILE LPAREN expression . RPAREN PV
    (219) jumpExpression -> expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 345
    INCREMENTO      reduce using rule 219 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 219 (jumpExpression -> expression .)
    MENOR           reduce using rule 219 (jumpExpression -> expression .)
    LCCT            reduce using rule 219 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 219 (jumpExpression -> expression .)
    PONTO           reduce using rule 219 (jumpExpression -> expression .)
    LPAREN          reduce using rule 219 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 219 (jumpExpression -> expression .)
    AS              reduce using rule 219 (jumpExpression -> expression .)
    MULT            reduce using rule 219 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 219 (jumpExpression -> expression .)
    MOD             reduce using rule 219 (jumpExpression -> expression .)
    PLUS            reduce using rule 219 (jumpExpression -> expression .)
    MINUS           reduce using rule 219 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 219 (jumpExpression -> expression .)
    ID              reduce using rule 219 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 219 (jumpExpression -> expression .)
    IMPORT          reduce using rule 219 (jumpExpression -> expression .)
    INIT            reduce using rule 219 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 219 (jumpExpression -> expression .)
    OUT             reduce using rule 219 (jumpExpression -> expression .)
    VARARG          reduce using rule 219 (jumpExpression -> expression .)
    WHERE           reduce using rule 219 (jumpExpression -> expression .)
    OBJECT          reduce using rule 219 (jumpExpression -> expression .)
    CONST           reduce using rule 219 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 219 (jumpExpression -> expression .)
    EOF             reduce using rule 219 (jumpExpression -> expression .)
    FALSE           reduce using rule 219 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 219 (jumpExpression -> expression .)
    NULL            reduce using rule 219 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 219 (jumpExpression -> expression .)
    NUMBER          reduce using rule 219 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 219 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 219 (jumpExpression -> expression .)
    THIS            reduce using rule 219 (jumpExpression -> expression .)
    TRUE            reduce using rule 219 (jumpExpression -> expression .)
    VAL             reduce using rule 219 (jumpExpression -> expression .)
    VAR             reduce using rule 219 (jumpExpression -> expression .)
    WHEN            reduce using rule 219 (jumpExpression -> expression .)
    LONG            reduce using rule 219 (jumpExpression -> expression .)
    ARRAY           reduce using rule 219 (jumpExpression -> expression .)
    ELVIS           reduce using rule 219 (jumpExpression -> expression .)
    IN              reduce using rule 219 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 219 (jumpExpression -> expression .)
    IS              reduce using rule 219 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 219 (jumpExpression -> expression .)
    MAIOR           reduce using rule 219 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 219 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 219 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 219 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 219 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 219 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 219 (jumpExpression -> expression .)
    AND             reduce using rule 219 (jumpExpression -> expression .)
    OR              reduce using rule 219 (jumpExpression -> expression .)

  ! RPAREN          [ reduce using rule 219 (jumpExpression -> expression .) ]


state 285

    (88) doWhileStatement -> DO controlStructureBody WHILE . LPAREN expression RPAREN

    LPAREN          shift and go to state 346


state 286

    (89) doWhileStatement -> DO WHILE LPAREN . expression RPAREN
    (86) whileStatement -> WHILE LPAREN . expression RPAREN controlStructureBody
    (87) whileStatement -> WHILE LPAREN . expression RPAREN PV
    (12) expression -> . disjunction
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 86
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 136
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 347
    disjunction                    shift and go to state 69
    conjunction                    shift and go to state 79
    equality                       shift and go to state 84
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 107
    elvisExpression                shift and go to state 114
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    simpleIdentifier               shift and go to state 133
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120
    prefixUnaryExpression          shift and go to state 134
    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 135
    unaryPrefix                    shift and go to state 92
    primaryExpression              shift and go to state 82
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    typeModifier                   shift and go to state 115

state 287

    (93) disjunction -> conjunction OR disjunction .
    (12) expression -> disjunction .

  ! reduce/reduce conflict for FUN resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for FOR resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for WHILE resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for DO resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for VAR resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for VAL resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for ID resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for IMPORT resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for INIT resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for OUT resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for VARARG resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for WHERE resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for OBJECT resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for CONST resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for EOF resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for FALSE resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for NULL resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for NUMBER resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for THIS resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for TRUE resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for WHEN resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for LONG resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for ARRAY resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for LPAREN resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for LCCT resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for IF resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for RETURN resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for BREAK resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for MINUS resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for PLUS resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for NOT resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for MENOR resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for PONTO resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for AS resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for MULT resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for MOD resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for ELVIS resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for IN resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for IS resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for MAIOR resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for AND resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for OR resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for COMMA resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for RPAREN resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for RCCT resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for PV resolved using rule 12 (expression -> disjunction .)
  ! reduce/reduce conflict for ELSE resolved using rule 12 (expression -> disjunction .)
    FUN             reduce using rule 12 (expression -> disjunction .)
    FOR             reduce using rule 12 (expression -> disjunction .)
    WHILE           reduce using rule 12 (expression -> disjunction .)
    DO              reduce using rule 12 (expression -> disjunction .)
    VAR             reduce using rule 12 (expression -> disjunction .)
    VAL             reduce using rule 12 (expression -> disjunction .)
    ID              reduce using rule 12 (expression -> disjunction .)
    CROSSINLINE     reduce using rule 12 (expression -> disjunction .)
    IMPORT          reduce using rule 12 (expression -> disjunction .)
    INIT            reduce using rule 12 (expression -> disjunction .)
    NOINLINE        reduce using rule 12 (expression -> disjunction .)
    OUT             reduce using rule 12 (expression -> disjunction .)
    VARARG          reduce using rule 12 (expression -> disjunction .)
    WHERE           reduce using rule 12 (expression -> disjunction .)
    OBJECT          reduce using rule 12 (expression -> disjunction .)
    CONST           reduce using rule 12 (expression -> disjunction .)
    CONSTRUCTOR     reduce using rule 12 (expression -> disjunction .)
    EOF             reduce using rule 12 (expression -> disjunction .)
    FALSE           reduce using rule 12 (expression -> disjunction .)
    FUNCTION        reduce using rule 12 (expression -> disjunction .)
    NULL            reduce using rule 12 (expression -> disjunction .)
    NULLABLE        reduce using rule 12 (expression -> disjunction .)
    NUMBER          reduce using rule 12 (expression -> disjunction .)
    OPERATOR        reduce using rule 12 (expression -> disjunction .)
    SMARTCAST       reduce using rule 12 (expression -> disjunction .)
    THIS            reduce using rule 12 (expression -> disjunction .)
    TRUE            reduce using rule 12 (expression -> disjunction .)
    WHEN            reduce using rule 12 (expression -> disjunction .)
    LONG            reduce using rule 12 (expression -> disjunction .)
    ARRAY           reduce using rule 12 (expression -> disjunction .)
    LPAREN          reduce using rule 12 (expression -> disjunction .)
    LITERAL_STRING  reduce using rule 12 (expression -> disjunction .)
    LCCT            reduce using rule 12 (expression -> disjunction .)
    IF              reduce using rule 12 (expression -> disjunction .)
    RETURN          reduce using rule 12 (expression -> disjunction .)
    RETURN_AT       reduce using rule 12 (expression -> disjunction .)
    CONTINUE        reduce using rule 12 (expression -> disjunction .)
    CONTINUE_AT     reduce using rule 12 (expression -> disjunction .)
    BREAK           reduce using rule 12 (expression -> disjunction .)
    BREAK_AT        reduce using rule 12 (expression -> disjunction .)
    RCHAVE          reduce using rule 12 (expression -> disjunction .)
    INCREMENTO      reduce using rule 12 (expression -> disjunction .)
    DECREMENTO      reduce using rule 12 (expression -> disjunction .)
    MINUS           reduce using rule 12 (expression -> disjunction .)
    PLUS            reduce using rule 12 (expression -> disjunction .)
    NOT             reduce using rule 12 (expression -> disjunction .)
    SUSPEND         reduce using rule 12 (expression -> disjunction .)
    COLONCOLON      reduce using rule 12 (expression -> disjunction .)
    LCHAVE          reduce using rule 12 (expression -> disjunction .)
    MENOR           reduce using rule 12 (expression -> disjunction .)
    PONTO           reduce using rule 12 (expression -> disjunction .)
    AS              reduce using rule 12 (expression -> disjunction .)
    MAISIGUAL       reduce using rule 12 (expression -> disjunction .)
    MENOSIGUAL      reduce using rule 12 (expression -> disjunction .)
    MULTIGUAL       reduce using rule 12 (expression -> disjunction .)
    DIVIGUAL        reduce using rule 12 (expression -> disjunction .)
    MODIGUAL        reduce using rule 12 (expression -> disjunction .)
    MULT            reduce using rule 12 (expression -> disjunction .)
    DIVIDE          reduce using rule 12 (expression -> disjunction .)
    MOD             reduce using rule 12 (expression -> disjunction .)
    PONTOPONTO      reduce using rule 12 (expression -> disjunction .)
    ELVIS           reduce using rule 12 (expression -> disjunction .)
    IN              reduce using rule 12 (expression -> disjunction .)
    NOT_IN          reduce using rule 12 (expression -> disjunction .)
    IS              reduce using rule 12 (expression -> disjunction .)
    NOT_IS          reduce using rule 12 (expression -> disjunction .)
    MAIOR           reduce using rule 12 (expression -> disjunction .)
    MENORIGUAL      reduce using rule 12 (expression -> disjunction .)
    MAIORIGUAL      reduce using rule 12 (expression -> disjunction .)
    DIFERENTE       reduce using rule 12 (expression -> disjunction .)
    IDENTIDADE      reduce using rule 12 (expression -> disjunction .)
    IGUALDADE       reduce using rule 12 (expression -> disjunction .)
    SEMIDENTIDADE   reduce using rule 12 (expression -> disjunction .)
    AND             reduce using rule 12 (expression -> disjunction .)
    OR              reduce using rule 12 (expression -> disjunction .)
    COMMA           reduce using rule 12 (expression -> disjunction .)
    RPAREN          reduce using rule 12 (expression -> disjunction .)
    RCCT            reduce using rule 12 (expression -> disjunction .)
    PV              reduce using rule 12 (expression -> disjunction .)
    ELSE            reduce using rule 12 (expression -> disjunction .)

  ! INCREMENTO      [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! DECREMENTO      [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! MENOR           [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! LCCT            [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! COLONCOLON      [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! PONTO           [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! LPAREN          [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! RCHAVE          [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! AS              [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! MAISIGUAL       [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! MENOSIGUAL      [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! MULTIGUAL       [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! DIVIGUAL        [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! MODIGUAL        [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! MULT            [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! DIVIDE          [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! MOD             [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! PLUS            [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! MINUS           [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! PONTOPONTO      [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! ID              [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! CROSSINLINE     [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! IMPORT          [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! INIT            [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! NOINLINE        [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! OUT             [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! VARARG          [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! WHERE           [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! OBJECT          [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! CONST           [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! CONSTRUCTOR     [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! EOF             [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! FALSE           [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! FUNCTION        [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! NULL            [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! NULLABLE        [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! NUMBER          [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! OPERATOR        [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! SMARTCAST       [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! THIS            [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! TRUE            [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! VAL             [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! VAR             [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! WHEN            [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! LONG            [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! ARRAY           [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! ELVIS           [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! IN              [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! NOT_IN          [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! IS              [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! NOT_IS          [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! MAIOR           [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! MENORIGUAL      [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! MAIORIGUAL      [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! DIFERENTE       [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! IDENTIDADE      [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! IGUALDADE       [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! SEMIDENTIDADE   [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! AND             [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! OR              [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! FUN             [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! FOR             [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! WHILE           [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! DO              [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! LITERAL_STRING  [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! IF              [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! RETURN          [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! RETURN_AT       [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! CONTINUE        [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! CONTINUE_AT     [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! BREAK           [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! BREAK_AT        [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! NOT             [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! SUSPEND         [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! COMMA           [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! RPAREN          [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! LCHAVE          [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! RCCT            [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! PV              [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]
  ! ELSE            [ reduce using rule 93 (disjunction -> conjunction OR disjunction .) ]


state 288

    (128) postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .

    INCREMENTO      reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    DECREMENTO      reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MENOR           reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    LCCT            reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    COLONCOLON      reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    PONTO           reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    LPAREN          reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    RCHAVE          reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    AS              reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MAISIGUAL       reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MENOSIGUAL      reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MULTIGUAL       reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    DIVIGUAL        reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MODIGUAL        reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MULT            reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    DIVIDE          reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MOD             reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    PLUS            reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MINUS           reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    PONTOPONTO      reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    ID              reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    CROSSINLINE     reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    IMPORT          reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    INIT            reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    NOINLINE        reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    OUT             reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    VARARG          reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    WHERE           reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    OBJECT          reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    CONST           reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    CONSTRUCTOR     reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    EOF             reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    FALSE           reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    FUNCTION        reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    NULL            reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    NULLABLE        reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    NUMBER          reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    OPERATOR        reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    SMARTCAST       reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    THIS            reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    TRUE            reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    VAL             reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    VAR             reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    WHEN            reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    LONG            reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    ARRAY           reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    ELVIS           reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    IN              reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    NOT_IN          reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    IS              reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    NOT_IS          reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MAIOR           reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MENORIGUAL      reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MAIORIGUAL      reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    DIFERENTE       reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    IDENTIDADE      reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    IGUALDADE       reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    SEMIDENTIDADE   reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    AND             reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    OR              reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    FUN             reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    FOR             reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    WHILE           reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    DO              reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    LITERAL_STRING  reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    IF              reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    RETURN          reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    RETURN_AT       reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    CONTINUE        reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    CONTINUE_AT     reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    BREAK           reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    BREAK_AT        reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    NOT             reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    SUSPEND         reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    COMMA           reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    RPAREN          reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    LCHAVE          reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    RCCT            reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    PV              reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    ELSE            reduce using rule 128 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)


state 289

    (152) callSuffix -> optionalTypeArguments optionalValueArguments . annotatedLambda
    (153) callSuffix -> optionalTypeArguments optionalValueArguments .
    (158) annotatedLambda -> . lambdaLiteral
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE

  ! shift/reduce conflict for RCHAVE resolved as shift
    INCREMENTO      reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    DECREMENTO      reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MENOR           reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    LCCT            reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    COLONCOLON      reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    PONTO           reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    LPAREN          reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    AS              reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MAISIGUAL       reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MENOSIGUAL      reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MULTIGUAL       reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    DIVIGUAL        reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MODIGUAL        reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MULT            reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    DIVIDE          reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MOD             reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    PLUS            reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MINUS           reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    PONTOPONTO      reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    ID              reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    CROSSINLINE     reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    IMPORT          reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    INIT            reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    NOINLINE        reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    OUT             reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    VARARG          reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    WHERE           reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    OBJECT          reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    CONST           reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    CONSTRUCTOR     reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    EOF             reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    FALSE           reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    FUNCTION        reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    NULL            reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    NULLABLE        reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    NUMBER          reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    OPERATOR        reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    SMARTCAST       reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    THIS            reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    TRUE            reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    VAL             reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    VAR             reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    WHEN            reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    LONG            reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    ARRAY           reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    ELVIS           reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    IN              reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    NOT_IN          reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    IS              reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    NOT_IS          reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MAIOR           reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MENORIGUAL      reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MAIORIGUAL      reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    DIFERENTE       reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    IDENTIDADE      reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    IGUALDADE       reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    SEMIDENTIDADE   reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    AND             reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    OR              reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    FUN             reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    FOR             reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    WHILE           reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    DO              reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    LITERAL_STRING  reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    IF              reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    RETURN          reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    RETURN_AT       reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    CONTINUE        reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    CONTINUE_AT     reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    BREAK           reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    BREAK_AT        reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    NOT             reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    SUSPEND         reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    COMMA           reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    RPAREN          reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    LCHAVE          reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    RCCT            reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    PV              reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    ELSE            reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    RCHAVE          shift and go to state 55

  ! RCHAVE          [ reduce using rule 153 (callSuffix -> optionalTypeArguments optionalValueArguments .) ]

    annotatedLambda                shift and go to state 348
    lambdaLiteral                  shift and go to state 349

state 290

    (156) optionalValueArguments -> valueArguments .

    RCHAVE          reduce using rule 156 (optionalValueArguments -> valueArguments .)
    INCREMENTO      reduce using rule 156 (optionalValueArguments -> valueArguments .)
    DECREMENTO      reduce using rule 156 (optionalValueArguments -> valueArguments .)
    MENOR           reduce using rule 156 (optionalValueArguments -> valueArguments .)
    LCCT            reduce using rule 156 (optionalValueArguments -> valueArguments .)
    COLONCOLON      reduce using rule 156 (optionalValueArguments -> valueArguments .)
    PONTO           reduce using rule 156 (optionalValueArguments -> valueArguments .)
    LPAREN          reduce using rule 156 (optionalValueArguments -> valueArguments .)
    AS              reduce using rule 156 (optionalValueArguments -> valueArguments .)
    MAISIGUAL       reduce using rule 156 (optionalValueArguments -> valueArguments .)
    MENOSIGUAL      reduce using rule 156 (optionalValueArguments -> valueArguments .)
    MULTIGUAL       reduce using rule 156 (optionalValueArguments -> valueArguments .)
    DIVIGUAL        reduce using rule 156 (optionalValueArguments -> valueArguments .)
    MODIGUAL        reduce using rule 156 (optionalValueArguments -> valueArguments .)
    MULT            reduce using rule 156 (optionalValueArguments -> valueArguments .)
    DIVIDE          reduce using rule 156 (optionalValueArguments -> valueArguments .)
    MOD             reduce using rule 156 (optionalValueArguments -> valueArguments .)
    PLUS            reduce using rule 156 (optionalValueArguments -> valueArguments .)
    MINUS           reduce using rule 156 (optionalValueArguments -> valueArguments .)
    PONTOPONTO      reduce using rule 156 (optionalValueArguments -> valueArguments .)
    ID              reduce using rule 156 (optionalValueArguments -> valueArguments .)
    CROSSINLINE     reduce using rule 156 (optionalValueArguments -> valueArguments .)
    IMPORT          reduce using rule 156 (optionalValueArguments -> valueArguments .)
    INIT            reduce using rule 156 (optionalValueArguments -> valueArguments .)
    NOINLINE        reduce using rule 156 (optionalValueArguments -> valueArguments .)
    OUT             reduce using rule 156 (optionalValueArguments -> valueArguments .)
    VARARG          reduce using rule 156 (optionalValueArguments -> valueArguments .)
    WHERE           reduce using rule 156 (optionalValueArguments -> valueArguments .)
    OBJECT          reduce using rule 156 (optionalValueArguments -> valueArguments .)
    CONST           reduce using rule 156 (optionalValueArguments -> valueArguments .)
    CONSTRUCTOR     reduce using rule 156 (optionalValueArguments -> valueArguments .)
    EOF             reduce using rule 156 (optionalValueArguments -> valueArguments .)
    FALSE           reduce using rule 156 (optionalValueArguments -> valueArguments .)
    FUNCTION        reduce using rule 156 (optionalValueArguments -> valueArguments .)
    NULL            reduce using rule 156 (optionalValueArguments -> valueArguments .)
    NULLABLE        reduce using rule 156 (optionalValueArguments -> valueArguments .)
    NUMBER          reduce using rule 156 (optionalValueArguments -> valueArguments .)
    OPERATOR        reduce using rule 156 (optionalValueArguments -> valueArguments .)
    SMARTCAST       reduce using rule 156 (optionalValueArguments -> valueArguments .)
    THIS            reduce using rule 156 (optionalValueArguments -> valueArguments .)
    TRUE            reduce using rule 156 (optionalValueArguments -> valueArguments .)
    VAL             reduce using rule 156 (optionalValueArguments -> valueArguments .)
    VAR             reduce using rule 156 (optionalValueArguments -> valueArguments .)
    WHEN            reduce using rule 156 (optionalValueArguments -> valueArguments .)
    LONG            reduce using rule 156 (optionalValueArguments -> valueArguments .)
    ARRAY           reduce using rule 156 (optionalValueArguments -> valueArguments .)
    ELVIS           reduce using rule 156 (optionalValueArguments -> valueArguments .)
    IN              reduce using rule 156 (optionalValueArguments -> valueArguments .)
    NOT_IN          reduce using rule 156 (optionalValueArguments -> valueArguments .)
    IS              reduce using rule 156 (optionalValueArguments -> valueArguments .)
    NOT_IS          reduce using rule 156 (optionalValueArguments -> valueArguments .)
    MAIOR           reduce using rule 156 (optionalValueArguments -> valueArguments .)
    MENORIGUAL      reduce using rule 156 (optionalValueArguments -> valueArguments .)
    MAIORIGUAL      reduce using rule 156 (optionalValueArguments -> valueArguments .)
    DIFERENTE       reduce using rule 156 (optionalValueArguments -> valueArguments .)
    IDENTIDADE      reduce using rule 156 (optionalValueArguments -> valueArguments .)
    IGUALDADE       reduce using rule 156 (optionalValueArguments -> valueArguments .)
    SEMIDENTIDADE   reduce using rule 156 (optionalValueArguments -> valueArguments .)
    AND             reduce using rule 156 (optionalValueArguments -> valueArguments .)
    OR              reduce using rule 156 (optionalValueArguments -> valueArguments .)
    FUN             reduce using rule 156 (optionalValueArguments -> valueArguments .)
    FOR             reduce using rule 156 (optionalValueArguments -> valueArguments .)
    WHILE           reduce using rule 156 (optionalValueArguments -> valueArguments .)
    DO              reduce using rule 156 (optionalValueArguments -> valueArguments .)
    LITERAL_STRING  reduce using rule 156 (optionalValueArguments -> valueArguments .)
    IF              reduce using rule 156 (optionalValueArguments -> valueArguments .)
    RETURN          reduce using rule 156 (optionalValueArguments -> valueArguments .)
    RETURN_AT       reduce using rule 156 (optionalValueArguments -> valueArguments .)
    CONTINUE        reduce using rule 156 (optionalValueArguments -> valueArguments .)
    CONTINUE_AT     reduce using rule 156 (optionalValueArguments -> valueArguments .)
    BREAK           reduce using rule 156 (optionalValueArguments -> valueArguments .)
    BREAK_AT        reduce using rule 156 (optionalValueArguments -> valueArguments .)
    NOT             reduce using rule 156 (optionalValueArguments -> valueArguments .)
    SUSPEND         reduce using rule 156 (optionalValueArguments -> valueArguments .)
    COMMA           reduce using rule 156 (optionalValueArguments -> valueArguments .)
    RPAREN          reduce using rule 156 (optionalValueArguments -> valueArguments .)
    LCHAVE          reduce using rule 156 (optionalValueArguments -> valueArguments .)
    RCCT            reduce using rule 156 (optionalValueArguments -> valueArguments .)
    PV              reduce using rule 156 (optionalValueArguments -> valueArguments .)
    ELSE            reduce using rule 156 (optionalValueArguments -> valueArguments .)


state 291

    (165) valueArguments -> LPAREN . RPAREN
    (166) valueArguments -> LPAREN . valueArgumentsRecursive RPAREN
    (163) valueArgumentsRecursive -> . valueArgument
    (164) valueArgumentsRecursive -> . valueArgument COMMA valueArgumentsRecursive
    (167) valueArgument -> . simpleIdentifier ATRIBUICAO MULT expression
    (168) valueArgument -> . simpleIdentifier ATRIBUICAO expression
    (169) valueArgument -> . expression
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (12) expression -> . disjunction
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    RPAREN          shift and go to state 350
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LITERAL_STRING  shift and go to state 86
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 136
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    SUSPEND         shift and go to state 48

    valueArgumentsRecursive        shift and go to state 351
    valueArgument                  shift and go to state 352
    simpleIdentifier               shift and go to state 353
    expression                     shift and go to state 354
    disjunction                    shift and go to state 69
    conjunction                    shift and go to state 79
    equality                       shift and go to state 84
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 107
    elvisExpression                shift and go to state 114
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120
    prefixUnaryExpression          shift and go to state 134
    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 135
    unaryPrefix                    shift and go to state 92
    primaryExpression              shift and go to state 82
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    typeModifier                   shift and go to state 115

state 292

    (95) conjunction -> equality AND conjunction .
    (92) disjunction -> conjunction .
    (93) disjunction -> conjunction . OR disjunction

  ! reduce/reduce conflict for FUN resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for FOR resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for WHILE resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for DO resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for VAR resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for VAL resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for ID resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for IMPORT resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for INIT resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for OUT resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for VARARG resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for WHERE resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for OBJECT resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for CONST resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for EOF resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for FALSE resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for NULL resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for NUMBER resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for THIS resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for TRUE resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for WHEN resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for LONG resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for ARRAY resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for LPAREN resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for LCCT resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for IF resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for RETURN resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for BREAK resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MINUS resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for PLUS resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for NOT resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MENOR resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for PONTO resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for AS resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MULT resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MOD resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for ELVIS resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for IN resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for IS resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MAIOR resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for AND resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for OR resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for COMMA resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for RPAREN resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for RCCT resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for PV resolved using rule 92 (disjunction -> conjunction .)
  ! reduce/reduce conflict for ELSE resolved using rule 92 (disjunction -> conjunction .)
  ! shift/reduce conflict for OR resolved as shift
    FUN             reduce using rule 92 (disjunction -> conjunction .)
    FOR             reduce using rule 92 (disjunction -> conjunction .)
    WHILE           reduce using rule 92 (disjunction -> conjunction .)
    DO              reduce using rule 92 (disjunction -> conjunction .)
    VAR             reduce using rule 92 (disjunction -> conjunction .)
    VAL             reduce using rule 92 (disjunction -> conjunction .)
    ID              reduce using rule 92 (disjunction -> conjunction .)
    CROSSINLINE     reduce using rule 92 (disjunction -> conjunction .)
    IMPORT          reduce using rule 92 (disjunction -> conjunction .)
    INIT            reduce using rule 92 (disjunction -> conjunction .)
    NOINLINE        reduce using rule 92 (disjunction -> conjunction .)
    OUT             reduce using rule 92 (disjunction -> conjunction .)
    VARARG          reduce using rule 92 (disjunction -> conjunction .)
    WHERE           reduce using rule 92 (disjunction -> conjunction .)
    OBJECT          reduce using rule 92 (disjunction -> conjunction .)
    CONST           reduce using rule 92 (disjunction -> conjunction .)
    CONSTRUCTOR     reduce using rule 92 (disjunction -> conjunction .)
    EOF             reduce using rule 92 (disjunction -> conjunction .)
    FALSE           reduce using rule 92 (disjunction -> conjunction .)
    FUNCTION        reduce using rule 92 (disjunction -> conjunction .)
    NULL            reduce using rule 92 (disjunction -> conjunction .)
    NULLABLE        reduce using rule 92 (disjunction -> conjunction .)
    NUMBER          reduce using rule 92 (disjunction -> conjunction .)
    OPERATOR        reduce using rule 92 (disjunction -> conjunction .)
    SMARTCAST       reduce using rule 92 (disjunction -> conjunction .)
    THIS            reduce using rule 92 (disjunction -> conjunction .)
    TRUE            reduce using rule 92 (disjunction -> conjunction .)
    WHEN            reduce using rule 92 (disjunction -> conjunction .)
    LONG            reduce using rule 92 (disjunction -> conjunction .)
    ARRAY           reduce using rule 92 (disjunction -> conjunction .)
    LPAREN          reduce using rule 92 (disjunction -> conjunction .)
    LITERAL_STRING  reduce using rule 92 (disjunction -> conjunction .)
    LCCT            reduce using rule 92 (disjunction -> conjunction .)
    IF              reduce using rule 92 (disjunction -> conjunction .)
    RETURN          reduce using rule 92 (disjunction -> conjunction .)
    RETURN_AT       reduce using rule 92 (disjunction -> conjunction .)
    CONTINUE        reduce using rule 92 (disjunction -> conjunction .)
    CONTINUE_AT     reduce using rule 92 (disjunction -> conjunction .)
    BREAK           reduce using rule 92 (disjunction -> conjunction .)
    BREAK_AT        reduce using rule 92 (disjunction -> conjunction .)
    RCHAVE          reduce using rule 92 (disjunction -> conjunction .)
    INCREMENTO      reduce using rule 92 (disjunction -> conjunction .)
    DECREMENTO      reduce using rule 92 (disjunction -> conjunction .)
    MINUS           reduce using rule 92 (disjunction -> conjunction .)
    PLUS            reduce using rule 92 (disjunction -> conjunction .)
    NOT             reduce using rule 92 (disjunction -> conjunction .)
    SUSPEND         reduce using rule 92 (disjunction -> conjunction .)
    COLONCOLON      reduce using rule 92 (disjunction -> conjunction .)
    LCHAVE          reduce using rule 92 (disjunction -> conjunction .)
    MENOR           reduce using rule 92 (disjunction -> conjunction .)
    PONTO           reduce using rule 92 (disjunction -> conjunction .)
    AS              reduce using rule 92 (disjunction -> conjunction .)
    MAISIGUAL       reduce using rule 92 (disjunction -> conjunction .)
    MENOSIGUAL      reduce using rule 92 (disjunction -> conjunction .)
    MULTIGUAL       reduce using rule 92 (disjunction -> conjunction .)
    DIVIGUAL        reduce using rule 92 (disjunction -> conjunction .)
    MODIGUAL        reduce using rule 92 (disjunction -> conjunction .)
    MULT            reduce using rule 92 (disjunction -> conjunction .)
    DIVIDE          reduce using rule 92 (disjunction -> conjunction .)
    MOD             reduce using rule 92 (disjunction -> conjunction .)
    PONTOPONTO      reduce using rule 92 (disjunction -> conjunction .)
    ELVIS           reduce using rule 92 (disjunction -> conjunction .)
    IN              reduce using rule 92 (disjunction -> conjunction .)
    NOT_IN          reduce using rule 92 (disjunction -> conjunction .)
    IS              reduce using rule 92 (disjunction -> conjunction .)
    NOT_IS          reduce using rule 92 (disjunction -> conjunction .)
    MAIOR           reduce using rule 92 (disjunction -> conjunction .)
    MENORIGUAL      reduce using rule 92 (disjunction -> conjunction .)
    MAIORIGUAL      reduce using rule 92 (disjunction -> conjunction .)
    DIFERENTE       reduce using rule 92 (disjunction -> conjunction .)
    IDENTIDADE      reduce using rule 92 (disjunction -> conjunction .)
    IGUALDADE       reduce using rule 92 (disjunction -> conjunction .)
    SEMIDENTIDADE   reduce using rule 92 (disjunction -> conjunction .)
    AND             reduce using rule 92 (disjunction -> conjunction .)
    COMMA           reduce using rule 92 (disjunction -> conjunction .)
    RPAREN          reduce using rule 92 (disjunction -> conjunction .)
    RCCT            reduce using rule 92 (disjunction -> conjunction .)
    PV              reduce using rule 92 (disjunction -> conjunction .)
    ELSE            reduce using rule 92 (disjunction -> conjunction .)
    OR              shift and go to state 183

  ! INCREMENTO      [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! DECREMENTO      [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! MENOR           [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! LCCT            [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! COLONCOLON      [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! PONTO           [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! LPAREN          [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! RCHAVE          [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! AS              [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! MAISIGUAL       [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! MENOSIGUAL      [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! MULTIGUAL       [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! DIVIGUAL        [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! MODIGUAL        [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! MULT            [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! DIVIDE          [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! MOD             [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! PLUS            [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! MINUS           [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! PONTOPONTO      [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! ID              [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! CROSSINLINE     [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! IMPORT          [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! INIT            [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! NOINLINE        [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! OUT             [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! VARARG          [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! WHERE           [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! OBJECT          [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! CONST           [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! CONSTRUCTOR     [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! EOF             [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! FALSE           [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! FUNCTION        [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! NULL            [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! NULLABLE        [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! NUMBER          [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! OPERATOR        [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! SMARTCAST       [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! THIS            [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! TRUE            [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! VAL             [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! VAR             [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! WHEN            [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! LONG            [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! ARRAY           [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! ELVIS           [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! IN              [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! NOT_IN          [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! IS              [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! NOT_IS          [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! MAIOR           [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! MENORIGUAL      [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! MAIORIGUAL      [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! DIFERENTE       [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! IDENTIDADE      [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! IGUALDADE       [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! SEMIDENTIDADE   [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! AND             [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! OR              [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! FUN             [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! FOR             [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! WHILE           [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! DO              [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! LITERAL_STRING  [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! IF              [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! RETURN          [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! RETURN_AT       [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! CONTINUE        [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! CONTINUE_AT     [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! BREAK           [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! BREAK_AT        [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! NOT             [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! SUSPEND         [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! COMMA           [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! RPAREN          [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! LCHAVE          [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! RCCT            [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! PV              [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! ELSE            [ reduce using rule 95 (conjunction -> equality AND conjunction .) ]
  ! OR              [ reduce using rule 92 (disjunction -> conjunction .) ]


state 293

    (97) equality -> comparison equalityOperator equality .
    (94) conjunction -> equality .
    (95) conjunction -> equality . AND conjunction

  ! reduce/reduce conflict for FUN resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for FOR resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for WHILE resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for DO resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for VAR resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for VAL resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for ID resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for IMPORT resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for INIT resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for OUT resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for VARARG resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for WHERE resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for OBJECT resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for CONST resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for EOF resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for FALSE resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for NULL resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for NUMBER resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for THIS resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for TRUE resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for WHEN resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for LONG resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for ARRAY resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for LPAREN resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for LCCT resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for IF resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for RETURN resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for BREAK resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for MINUS resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for PLUS resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for NOT resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for MENOR resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for PONTO resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for AS resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for MULT resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for MOD resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for ELVIS resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for IN resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for IS resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for MAIOR resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for AND resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for OR resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for COMMA resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for RPAREN resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for RCCT resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for PV resolved using rule 94 (conjunction -> equality .)
  ! reduce/reduce conflict for ELSE resolved using rule 94 (conjunction -> equality .)
  ! shift/reduce conflict for AND resolved as shift
    FUN             reduce using rule 94 (conjunction -> equality .)
    FOR             reduce using rule 94 (conjunction -> equality .)
    WHILE           reduce using rule 94 (conjunction -> equality .)
    DO              reduce using rule 94 (conjunction -> equality .)
    VAR             reduce using rule 94 (conjunction -> equality .)
    VAL             reduce using rule 94 (conjunction -> equality .)
    ID              reduce using rule 94 (conjunction -> equality .)
    CROSSINLINE     reduce using rule 94 (conjunction -> equality .)
    IMPORT          reduce using rule 94 (conjunction -> equality .)
    INIT            reduce using rule 94 (conjunction -> equality .)
    NOINLINE        reduce using rule 94 (conjunction -> equality .)
    OUT             reduce using rule 94 (conjunction -> equality .)
    VARARG          reduce using rule 94 (conjunction -> equality .)
    WHERE           reduce using rule 94 (conjunction -> equality .)
    OBJECT          reduce using rule 94 (conjunction -> equality .)
    CONST           reduce using rule 94 (conjunction -> equality .)
    CONSTRUCTOR     reduce using rule 94 (conjunction -> equality .)
    EOF             reduce using rule 94 (conjunction -> equality .)
    FALSE           reduce using rule 94 (conjunction -> equality .)
    FUNCTION        reduce using rule 94 (conjunction -> equality .)
    NULL            reduce using rule 94 (conjunction -> equality .)
    NULLABLE        reduce using rule 94 (conjunction -> equality .)
    NUMBER          reduce using rule 94 (conjunction -> equality .)
    OPERATOR        reduce using rule 94 (conjunction -> equality .)
    SMARTCAST       reduce using rule 94 (conjunction -> equality .)
    THIS            reduce using rule 94 (conjunction -> equality .)
    TRUE            reduce using rule 94 (conjunction -> equality .)
    WHEN            reduce using rule 94 (conjunction -> equality .)
    LONG            reduce using rule 94 (conjunction -> equality .)
    ARRAY           reduce using rule 94 (conjunction -> equality .)
    LPAREN          reduce using rule 94 (conjunction -> equality .)
    LITERAL_STRING  reduce using rule 94 (conjunction -> equality .)
    LCCT            reduce using rule 94 (conjunction -> equality .)
    IF              reduce using rule 94 (conjunction -> equality .)
    RETURN          reduce using rule 94 (conjunction -> equality .)
    RETURN_AT       reduce using rule 94 (conjunction -> equality .)
    CONTINUE        reduce using rule 94 (conjunction -> equality .)
    CONTINUE_AT     reduce using rule 94 (conjunction -> equality .)
    BREAK           reduce using rule 94 (conjunction -> equality .)
    BREAK_AT        reduce using rule 94 (conjunction -> equality .)
    RCHAVE          reduce using rule 94 (conjunction -> equality .)
    INCREMENTO      reduce using rule 94 (conjunction -> equality .)
    DECREMENTO      reduce using rule 94 (conjunction -> equality .)
    MINUS           reduce using rule 94 (conjunction -> equality .)
    PLUS            reduce using rule 94 (conjunction -> equality .)
    NOT             reduce using rule 94 (conjunction -> equality .)
    SUSPEND         reduce using rule 94 (conjunction -> equality .)
    COLONCOLON      reduce using rule 94 (conjunction -> equality .)
    LCHAVE          reduce using rule 94 (conjunction -> equality .)
    MENOR           reduce using rule 94 (conjunction -> equality .)
    PONTO           reduce using rule 94 (conjunction -> equality .)
    AS              reduce using rule 94 (conjunction -> equality .)
    MAISIGUAL       reduce using rule 94 (conjunction -> equality .)
    MENOSIGUAL      reduce using rule 94 (conjunction -> equality .)
    MULTIGUAL       reduce using rule 94 (conjunction -> equality .)
    DIVIGUAL        reduce using rule 94 (conjunction -> equality .)
    MODIGUAL        reduce using rule 94 (conjunction -> equality .)
    MULT            reduce using rule 94 (conjunction -> equality .)
    DIVIDE          reduce using rule 94 (conjunction -> equality .)
    MOD             reduce using rule 94 (conjunction -> equality .)
    PONTOPONTO      reduce using rule 94 (conjunction -> equality .)
    ELVIS           reduce using rule 94 (conjunction -> equality .)
    IN              reduce using rule 94 (conjunction -> equality .)
    NOT_IN          reduce using rule 94 (conjunction -> equality .)
    IS              reduce using rule 94 (conjunction -> equality .)
    NOT_IS          reduce using rule 94 (conjunction -> equality .)
    MAIOR           reduce using rule 94 (conjunction -> equality .)
    MENORIGUAL      reduce using rule 94 (conjunction -> equality .)
    MAIORIGUAL      reduce using rule 94 (conjunction -> equality .)
    DIFERENTE       reduce using rule 94 (conjunction -> equality .)
    IDENTIDADE      reduce using rule 94 (conjunction -> equality .)
    IGUALDADE       reduce using rule 94 (conjunction -> equality .)
    SEMIDENTIDADE   reduce using rule 94 (conjunction -> equality .)
    OR              reduce using rule 94 (conjunction -> equality .)
    COMMA           reduce using rule 94 (conjunction -> equality .)
    RPAREN          reduce using rule 94 (conjunction -> equality .)
    RCCT            reduce using rule 94 (conjunction -> equality .)
    PV              reduce using rule 94 (conjunction -> equality .)
    ELSE            reduce using rule 94 (conjunction -> equality .)
    AND             shift and go to state 196

  ! INCREMENTO      [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! DECREMENTO      [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! MENOR           [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! LCCT            [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! COLONCOLON      [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! PONTO           [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! LPAREN          [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! RCHAVE          [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! AS              [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! MAISIGUAL       [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! MENOSIGUAL      [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! MULTIGUAL       [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! DIVIGUAL        [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! MODIGUAL        [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! MULT            [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! DIVIDE          [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! MOD             [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! PLUS            [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! MINUS           [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! PONTOPONTO      [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! ID              [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! CROSSINLINE     [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! IMPORT          [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! INIT            [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! NOINLINE        [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! OUT             [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! VARARG          [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! WHERE           [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! OBJECT          [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! CONST           [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! CONSTRUCTOR     [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! EOF             [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! FALSE           [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! FUNCTION        [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! NULL            [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! NULLABLE        [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! NUMBER          [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! OPERATOR        [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! SMARTCAST       [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! THIS            [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! TRUE            [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! VAL             [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! VAR             [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! WHEN            [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! LONG            [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! ARRAY           [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! ELVIS           [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! IN              [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! NOT_IN          [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! IS              [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! NOT_IS          [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! MAIOR           [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! MENORIGUAL      [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! MAIORIGUAL      [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! DIFERENTE       [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! IDENTIDADE      [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! IGUALDADE       [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! SEMIDENTIDADE   [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! AND             [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! OR              [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! FUN             [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! FOR             [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! WHILE           [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! DO              [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! LITERAL_STRING  [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! IF              [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! RETURN          [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! RETURN_AT       [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! CONTINUE        [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! CONTINUE_AT     [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! BREAK           [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! BREAK_AT        [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! NOT             [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! SUSPEND         [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! COMMA           [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! RPAREN          [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! LCHAVE          [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! RCCT            [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! PV              [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! ELSE            [ reduce using rule 97 (equality -> comparison equalityOperator equality .) ]
  ! AND             [ reduce using rule 94 (conjunction -> equality .) ]


state 294

    (224) callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .

    INCREMENTO      reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    DECREMENTO      reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MENOR           reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    LCCT            reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    COLONCOLON      reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    PONTO           reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    LPAREN          reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    RCHAVE          reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    AS              reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MAISIGUAL       reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MENOSIGUAL      reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MULTIGUAL       reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    DIVIGUAL        reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MODIGUAL        reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MULT            reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    DIVIDE          reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MOD             reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    PLUS            reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MINUS           reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    PONTOPONTO      reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    ID              reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    CROSSINLINE     reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    IMPORT          reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    INIT            reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    NOINLINE        reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    OUT             reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    VARARG          reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    WHERE           reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    OBJECT          reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    CONST           reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    CONSTRUCTOR     reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    EOF             reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    FALSE           reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    FUNCTION        reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    NULL            reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    NULLABLE        reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    NUMBER          reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    OPERATOR        reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    SMARTCAST       reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    THIS            reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    TRUE            reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    VAL             reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    VAR             reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    WHEN            reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    LONG            reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    ARRAY           reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    ELVIS           reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    IN              reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    NOT_IN          reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    IS              reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    NOT_IS          reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MAIOR           reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MENORIGUAL      reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MAIORIGUAL      reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    DIFERENTE       reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    IDENTIDADE      reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    IGUALDADE       reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    SEMIDENTIDADE   reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    AND             reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    OR              reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    FUN             reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    FOR             reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    WHILE           reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    DO              reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    LITERAL_STRING  reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    IF              reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    RETURN          reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    RETURN_AT       reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    CONTINUE        reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    CONTINUE_AT     reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    BREAK           reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    BREAK_AT        reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    NOT             reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    SUSPEND         reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    COMMA           reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    RPAREN          reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    LCHAVE          reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    RCCT            reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    PV              reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    ELSE            reduce using rule 224 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)


state 295

    (227) simpleIdentifierOrClass -> simpleIdentifier .

    INCREMENTO      reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    DECREMENTO      reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    MENOR           reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    LCCT            reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    COLONCOLON      reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    PONTO           reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    LPAREN          reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    RCHAVE          reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    AS              reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    MAISIGUAL       reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    MENOSIGUAL      reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    MODIGUAL        reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    MULT            reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    DIVIDE          reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    MOD             reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    PLUS            reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    MINUS           reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    ID              reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    IMPORT          reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    INIT            reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    NOINLINE        reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    OUT             reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    VARARG          reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    WHERE           reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    OBJECT          reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    CONST           reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    CONSTRUCTOR     reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    EOF             reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    FALSE           reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    FUNCTION        reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    NULL            reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    NULLABLE        reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    NUMBER          reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    OPERATOR        reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    SMARTCAST       reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    THIS            reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    TRUE            reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    VAL             reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    VAR             reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    WHEN            reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    LONG            reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    ARRAY           reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    ELVIS           reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    IN              reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    NOT_IN          reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    IS              reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    NOT_IS          reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    MAIOR           reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    DIFERENTE       reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    IGUALDADE       reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    AND             reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    OR              reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    FUN             reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    FOR             reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    WHILE           reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    DO              reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    IF              reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    RETURN          reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    RETURN_AT       reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    CONTINUE        reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    BREAK           reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    BREAK_AT        reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    NOT             reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    SUSPEND         reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    COMMA           reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    RPAREN          reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    LCHAVE          reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    RCCT            reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    PV              reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)
    ELSE            reduce using rule 227 (simpleIdentifierOrClass -> simpleIdentifier .)


state 296

    (228) simpleIdentifierOrClass -> CLASS .

    INCREMENTO      reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    DECREMENTO      reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    MENOR           reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    LCCT            reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    COLONCOLON      reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    PONTO           reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    LPAREN          reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    RCHAVE          reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    AS              reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    MAISIGUAL       reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    MENOSIGUAL      reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    MULTIGUAL       reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    DIVIGUAL        reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    MODIGUAL        reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    MULT            reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    DIVIDE          reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    MOD             reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    PLUS            reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    MINUS           reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    PONTOPONTO      reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    ID              reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    CROSSINLINE     reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    IMPORT          reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    INIT            reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    NOINLINE        reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    OUT             reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    VARARG          reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    WHERE           reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    OBJECT          reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    CONST           reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    CONSTRUCTOR     reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    EOF             reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    FALSE           reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    FUNCTION        reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    NULL            reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    NULLABLE        reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    NUMBER          reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    OPERATOR        reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    SMARTCAST       reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    THIS            reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    TRUE            reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    VAL             reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    VAR             reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    WHEN            reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    LONG            reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    ARRAY           reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    ELVIS           reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    IN              reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    NOT_IN          reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    IS              reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    NOT_IS          reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    MAIOR           reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    MENORIGUAL      reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    MAIORIGUAL      reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    DIFERENTE       reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    IDENTIDADE      reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    IGUALDADE       reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    SEMIDENTIDADE   reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    AND             reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    OR              reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    FUN             reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    FOR             reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    WHILE           reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    DO              reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    LITERAL_STRING  reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    IF              reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    RETURN          reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    RETURN_AT       reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    CONTINUE        reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    CONTINUE_AT     reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    BREAK           reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    BREAK_AT        reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    NOT             reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    SUSPEND         reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    COMMA           reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    RPAREN          reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    LCHAVE          reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    RCCT            reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    PV              reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)
    ELSE            reduce using rule 228 (simpleIdentifierOrClass -> CLASS .)


state 297

    (179) collectionLiteral -> LCCT collectionLiteralRecursive RCCT .

    INCREMENTO      reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    DECREMENTO      reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MENOR           reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    LCCT            reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    COLONCOLON      reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    PONTO           reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    LPAREN          reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    RCHAVE          reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    AS              reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MAISIGUAL       reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MENOSIGUAL      reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MULTIGUAL       reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    DIVIGUAL        reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MODIGUAL        reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MULT            reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    DIVIDE          reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MOD             reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    PLUS            reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MINUS           reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    PONTOPONTO      reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    ID              reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    CROSSINLINE     reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    IMPORT          reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    INIT            reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    NOINLINE        reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    OUT             reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    VARARG          reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    WHERE           reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    OBJECT          reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    CONST           reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    CONSTRUCTOR     reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    EOF             reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    FALSE           reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    FUNCTION        reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    NULL            reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    NULLABLE        reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    NUMBER          reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    OPERATOR        reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    SMARTCAST       reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    THIS            reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    TRUE            reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    VAL             reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    VAR             reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    WHEN            reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    LONG            reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    ARRAY           reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    ELVIS           reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    IN              reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    NOT_IN          reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    IS              reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    NOT_IS          reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MAIOR           reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MENORIGUAL      reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MAIORIGUAL      reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    DIFERENTE       reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    IDENTIDADE      reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    IGUALDADE       reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    SEMIDENTIDADE   reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    AND             reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    OR              reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    FUN             reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    FOR             reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    WHILE           reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    DO              reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    LITERAL_STRING  reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    IF              reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    RETURN          reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    RETURN_AT       reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    CONTINUE        reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    CONTINUE_AT     reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    BREAK           reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    BREAK_AT        reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    NOT             reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    SUSPEND         reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    COMMA           reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    RPAREN          reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    LCHAVE          reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    RCCT            reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    PV              reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    ELSE            reduce using rule 179 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)


state 298

    (182) collectionLiteralRecursive -> expression COMMA . collectionLiteralRecursive
    (181) collectionLiteralRecursive -> . expression
    (182) collectionLiteralRecursive -> . expression COMMA collectionLiteralRecursive
    (12) expression -> . disjunction
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 86
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 136
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 207
    collectionLiteralRecursive     shift and go to state 355
    disjunction                    shift and go to state 69
    conjunction                    shift and go to state 79
    equality                       shift and go to state 84
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 107
    elvisExpression                shift and go to state 114
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    simpleIdentifier               shift and go to state 133
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120
    prefixUnaryExpression          shift and go to state 134
    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 135
    unaryPrefix                    shift and go to state 92
    primaryExpression              shift and go to state 82
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    typeModifier                   shift and go to state 115

state 299

    (211) ifExpression -> IF LPAREN expression . RPAREN controlStructureBodyOrPV
    (212) ifExpression -> IF LPAREN expression . RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (219) jumpExpression -> expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 356
    AND             reduce using rule 219 (jumpExpression -> expression .)
    OR              reduce using rule 219 (jumpExpression -> expression .)
    INCREMENTO      reduce using rule 219 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 219 (jumpExpression -> expression .)
    MENOR           reduce using rule 219 (jumpExpression -> expression .)
    LCCT            reduce using rule 219 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 219 (jumpExpression -> expression .)
    PONTO           reduce using rule 219 (jumpExpression -> expression .)
    LPAREN          reduce using rule 219 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 219 (jumpExpression -> expression .)
    AS              reduce using rule 219 (jumpExpression -> expression .)
    MULT            reduce using rule 219 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 219 (jumpExpression -> expression .)
    MOD             reduce using rule 219 (jumpExpression -> expression .)
    PLUS            reduce using rule 219 (jumpExpression -> expression .)
    MINUS           reduce using rule 219 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 219 (jumpExpression -> expression .)
    ID              reduce using rule 219 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 219 (jumpExpression -> expression .)
    IMPORT          reduce using rule 219 (jumpExpression -> expression .)
    INIT            reduce using rule 219 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 219 (jumpExpression -> expression .)
    OUT             reduce using rule 219 (jumpExpression -> expression .)
    VARARG          reduce using rule 219 (jumpExpression -> expression .)
    WHERE           reduce using rule 219 (jumpExpression -> expression .)
    OBJECT          reduce using rule 219 (jumpExpression -> expression .)
    CONST           reduce using rule 219 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 219 (jumpExpression -> expression .)
    EOF             reduce using rule 219 (jumpExpression -> expression .)
    FALSE           reduce using rule 219 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 219 (jumpExpression -> expression .)
    NULL            reduce using rule 219 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 219 (jumpExpression -> expression .)
    NUMBER          reduce using rule 219 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 219 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 219 (jumpExpression -> expression .)
    THIS            reduce using rule 219 (jumpExpression -> expression .)
    TRUE            reduce using rule 219 (jumpExpression -> expression .)
    VAL             reduce using rule 219 (jumpExpression -> expression .)
    VAR             reduce using rule 219 (jumpExpression -> expression .)
    WHEN            reduce using rule 219 (jumpExpression -> expression .)
    LONG            reduce using rule 219 (jumpExpression -> expression .)
    ARRAY           reduce using rule 219 (jumpExpression -> expression .)
    ELVIS           reduce using rule 219 (jumpExpression -> expression .)
    IN              reduce using rule 219 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 219 (jumpExpression -> expression .)
    IS              reduce using rule 219 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 219 (jumpExpression -> expression .)
    MAIOR           reduce using rule 219 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 219 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 219 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 219 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 219 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 219 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 219 (jumpExpression -> expression .)

  ! RPAREN          [ reduce using rule 219 (jumpExpression -> expression .) ]


state 300

    (99) comparison -> infixOperation comparisonOperator infixOperation .
    (98) comparison -> infixOperation .
    (99) comparison -> infixOperation . comparisonOperator infixOperation
    (238) comparisonOperator -> . MENOR
    (239) comparisonOperator -> . MAIOR
    (240) comparisonOperator -> . MENORIGUAL
    (241) comparisonOperator -> . MAIORIGUAL

  ! reduce/reduce conflict for FUN resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for FOR resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for WHILE resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for DO resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for VAR resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for VAL resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for ID resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for IMPORT resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for INIT resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for OUT resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for VARARG resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for WHERE resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for OBJECT resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for CONST resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for EOF resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for FALSE resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for NULL resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for NUMBER resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for THIS resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for TRUE resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for WHEN resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for LONG resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for ARRAY resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for LPAREN resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for LCCT resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for IF resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for RETURN resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for BREAK resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MINUS resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for PLUS resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for NOT resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MENOR resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for PONTO resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for AS resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MULT resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MOD resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for ELVIS resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for IN resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for IS resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MAIOR resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for AND resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for OR resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for COMMA resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for RPAREN resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for RCCT resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for PV resolved using rule 98 (comparison -> infixOperation .)
  ! reduce/reduce conflict for ELSE resolved using rule 98 (comparison -> infixOperation .)
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAIOR resolved as shift
  ! shift/reduce conflict for MENORIGUAL resolved as shift
  ! shift/reduce conflict for MAIORIGUAL resolved as shift
    FUN             reduce using rule 98 (comparison -> infixOperation .)
    FOR             reduce using rule 98 (comparison -> infixOperation .)
    WHILE           reduce using rule 98 (comparison -> infixOperation .)
    DO              reduce using rule 98 (comparison -> infixOperation .)
    VAR             reduce using rule 98 (comparison -> infixOperation .)
    VAL             reduce using rule 98 (comparison -> infixOperation .)
    ID              reduce using rule 98 (comparison -> infixOperation .)
    CROSSINLINE     reduce using rule 98 (comparison -> infixOperation .)
    IMPORT          reduce using rule 98 (comparison -> infixOperation .)
    INIT            reduce using rule 98 (comparison -> infixOperation .)
    NOINLINE        reduce using rule 98 (comparison -> infixOperation .)
    OUT             reduce using rule 98 (comparison -> infixOperation .)
    VARARG          reduce using rule 98 (comparison -> infixOperation .)
    WHERE           reduce using rule 98 (comparison -> infixOperation .)
    OBJECT          reduce using rule 98 (comparison -> infixOperation .)
    CONST           reduce using rule 98 (comparison -> infixOperation .)
    CONSTRUCTOR     reduce using rule 98 (comparison -> infixOperation .)
    EOF             reduce using rule 98 (comparison -> infixOperation .)
    FALSE           reduce using rule 98 (comparison -> infixOperation .)
    FUNCTION        reduce using rule 98 (comparison -> infixOperation .)
    NULL            reduce using rule 98 (comparison -> infixOperation .)
    NULLABLE        reduce using rule 98 (comparison -> infixOperation .)
    NUMBER          reduce using rule 98 (comparison -> infixOperation .)
    OPERATOR        reduce using rule 98 (comparison -> infixOperation .)
    SMARTCAST       reduce using rule 98 (comparison -> infixOperation .)
    THIS            reduce using rule 98 (comparison -> infixOperation .)
    TRUE            reduce using rule 98 (comparison -> infixOperation .)
    WHEN            reduce using rule 98 (comparison -> infixOperation .)
    LONG            reduce using rule 98 (comparison -> infixOperation .)
    ARRAY           reduce using rule 98 (comparison -> infixOperation .)
    LPAREN          reduce using rule 98 (comparison -> infixOperation .)
    LITERAL_STRING  reduce using rule 98 (comparison -> infixOperation .)
    LCCT            reduce using rule 98 (comparison -> infixOperation .)
    IF              reduce using rule 98 (comparison -> infixOperation .)
    RETURN          reduce using rule 98 (comparison -> infixOperation .)
    RETURN_AT       reduce using rule 98 (comparison -> infixOperation .)
    CONTINUE        reduce using rule 98 (comparison -> infixOperation .)
    CONTINUE_AT     reduce using rule 98 (comparison -> infixOperation .)
    BREAK           reduce using rule 98 (comparison -> infixOperation .)
    BREAK_AT        reduce using rule 98 (comparison -> infixOperation .)
    RCHAVE          reduce using rule 98 (comparison -> infixOperation .)
    INCREMENTO      reduce using rule 98 (comparison -> infixOperation .)
    DECREMENTO      reduce using rule 98 (comparison -> infixOperation .)
    MINUS           reduce using rule 98 (comparison -> infixOperation .)
    PLUS            reduce using rule 98 (comparison -> infixOperation .)
    NOT             reduce using rule 98 (comparison -> infixOperation .)
    SUSPEND         reduce using rule 98 (comparison -> infixOperation .)
    COLONCOLON      reduce using rule 98 (comparison -> infixOperation .)
    LCHAVE          reduce using rule 98 (comparison -> infixOperation .)
    PONTO           reduce using rule 98 (comparison -> infixOperation .)
    AS              reduce using rule 98 (comparison -> infixOperation .)
    MAISIGUAL       reduce using rule 98 (comparison -> infixOperation .)
    MENOSIGUAL      reduce using rule 98 (comparison -> infixOperation .)
    MULTIGUAL       reduce using rule 98 (comparison -> infixOperation .)
    DIVIGUAL        reduce using rule 98 (comparison -> infixOperation .)
    MODIGUAL        reduce using rule 98 (comparison -> infixOperation .)
    MULT            reduce using rule 98 (comparison -> infixOperation .)
    DIVIDE          reduce using rule 98 (comparison -> infixOperation .)
    MOD             reduce using rule 98 (comparison -> infixOperation .)
    PONTOPONTO      reduce using rule 98 (comparison -> infixOperation .)
    ELVIS           reduce using rule 98 (comparison -> infixOperation .)
    IN              reduce using rule 98 (comparison -> infixOperation .)
    NOT_IN          reduce using rule 98 (comparison -> infixOperation .)
    IS              reduce using rule 98 (comparison -> infixOperation .)
    NOT_IS          reduce using rule 98 (comparison -> infixOperation .)
    DIFERENTE       reduce using rule 98 (comparison -> infixOperation .)
    IDENTIDADE      reduce using rule 98 (comparison -> infixOperation .)
    IGUALDADE       reduce using rule 98 (comparison -> infixOperation .)
    SEMIDENTIDADE   reduce using rule 98 (comparison -> infixOperation .)
    AND             reduce using rule 98 (comparison -> infixOperation .)
    OR              reduce using rule 98 (comparison -> infixOperation .)
    COMMA           reduce using rule 98 (comparison -> infixOperation .)
    RPAREN          reduce using rule 98 (comparison -> infixOperation .)
    RCCT            reduce using rule 98 (comparison -> infixOperation .)
    PV              reduce using rule 98 (comparison -> infixOperation .)
    ELSE            reduce using rule 98 (comparison -> infixOperation .)
    MENOR           shift and go to state 212
    MAIOR           shift and go to state 213
    MENORIGUAL      shift and go to state 214
    MAIORIGUAL      shift and go to state 215

  ! INCREMENTO      [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! DECREMENTO      [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MENOR           [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! LCCT            [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! COLONCOLON      [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! PONTO           [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! LPAREN          [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! RCHAVE          [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! AS              [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MAISIGUAL       [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MENOSIGUAL      [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MULTIGUAL       [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! DIVIGUAL        [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MODIGUAL        [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MULT            [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! DIVIDE          [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MOD             [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! PLUS            [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MINUS           [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! PONTOPONTO      [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! ID              [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! CROSSINLINE     [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! IMPORT          [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! INIT            [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! NOINLINE        [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! OUT             [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! VARARG          [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! WHERE           [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! OBJECT          [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! CONST           [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! CONSTRUCTOR     [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! EOF             [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! FALSE           [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! FUNCTION        [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! NULL            [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! NULLABLE        [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! NUMBER          [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! OPERATOR        [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! SMARTCAST       [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! THIS            [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! TRUE            [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! VAL             [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! VAR             [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! WHEN            [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! LONG            [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! ARRAY           [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! ELVIS           [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! IN              [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! NOT_IN          [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! IS              [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! NOT_IS          [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MAIOR           [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MENORIGUAL      [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MAIORIGUAL      [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! DIFERENTE       [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! IDENTIDADE      [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! IGUALDADE       [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! SEMIDENTIDADE   [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! AND             [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! OR              [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! FUN             [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! FOR             [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! WHILE           [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! DO              [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! LITERAL_STRING  [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! IF              [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! RETURN          [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! RETURN_AT       [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! CONTINUE        [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! CONTINUE_AT     [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! BREAK           [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! BREAK_AT        [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! NOT             [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! SUSPEND         [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! COMMA           [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! RPAREN          [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! LCHAVE          [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! RCCT            [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! PV              [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! ELSE            [ reduce using rule 99 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MENOR           [ reduce using rule 98 (comparison -> infixOperation .) ]
  ! MAIOR           [ reduce using rule 98 (comparison -> infixOperation .) ]
  ! MENORIGUAL      [ reduce using rule 98 (comparison -> infixOperation .) ]
  ! MAIORIGUAL      [ reduce using rule 98 (comparison -> infixOperation .) ]

    comparisonOperator             shift and go to state 211

state 301

    (102) infixOperationRecursive -> inOrIs elvisOrType .
    (103) infixOperationRecursive -> inOrIs elvisOrType . infixOperationRecursive
    (102) infixOperationRecursive -> . inOrIs elvisOrType
    (103) infixOperationRecursive -> . inOrIs elvisOrType infixOperationRecursive
    (104) inOrIs -> . inOperator
    (105) inOrIs -> . isOperator
    (242) inOperator -> . IN
    (243) inOperator -> . NOT_IN
    (244) isOperator -> . IS
    (245) isOperator -> . NOT_IS

  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT_IN resolved as shift
  ! shift/reduce conflict for IS resolved as shift
  ! shift/reduce conflict for NOT_IS resolved as shift
    FUN             reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    FOR             reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    WHILE           reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    DO              reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    VAR             reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    VAL             reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    ID              reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    CROSSINLINE     reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    IMPORT          reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    INIT            reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    NOINLINE        reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    OUT             reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    VARARG          reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    WHERE           reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    OBJECT          reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    CONST           reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    CONSTRUCTOR     reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    EOF             reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    FALSE           reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    FUNCTION        reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    NULL            reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    NULLABLE        reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    NUMBER          reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    OPERATOR        reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    SMARTCAST       reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    THIS            reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    TRUE            reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    WHEN            reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    LONG            reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    ARRAY           reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    LPAREN          reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    LITERAL_STRING  reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    LCCT            reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    IF              reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    RETURN          reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    RETURN_AT       reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    CONTINUE        reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    CONTINUE_AT     reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    BREAK           reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    BREAK_AT        reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    RCHAVE          reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    INCREMENTO      reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    DECREMENTO      reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    MINUS           reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    PLUS            reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    NOT             reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    SUSPEND         reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    COLONCOLON      reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    LCHAVE          reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    MENOR           reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    PONTO           reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    AS              reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    MAISIGUAL       reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    MENOSIGUAL      reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    MULTIGUAL       reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    DIVIGUAL        reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    MODIGUAL        reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    MULT            reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    DIVIDE          reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    MOD             reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    PONTOPONTO      reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    ELVIS           reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    MAIOR           reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    MENORIGUAL      reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    MAIORIGUAL      reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    DIFERENTE       reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    IDENTIDADE      reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    IGUALDADE       reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    SEMIDENTIDADE   reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    AND             reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    OR              reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    COMMA           reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    RPAREN          reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    RCCT            reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    PV              reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    ELSE            reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .)
    IN              shift and go to state 220
    NOT_IN          shift and go to state 221
    IS              shift and go to state 222
    NOT_IS          shift and go to state 223

  ! IN              [ reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .) ]
  ! NOT_IN          [ reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .) ]
  ! IS              [ reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .) ]
  ! NOT_IS          [ reduce using rule 102 (infixOperationRecursive -> inOrIs elvisOrType .) ]

    inOrIs                         shift and go to state 217
    infixOperationRecursive        shift and go to state 357
    inOperator                     shift and go to state 218
    isOperator                     shift and go to state 219

state 302

    (106) elvisOrType -> elvisExpression .
    (100) infixOperation -> elvisExpression . infixOperationRecursive
    (101) infixOperation -> elvisExpression .
    (102) infixOperationRecursive -> . inOrIs elvisOrType
    (103) infixOperationRecursive -> . inOrIs elvisOrType infixOperationRecursive
    (104) inOrIs -> . inOperator
    (105) inOrIs -> . isOperator
    (242) inOperator -> . IN
    (243) inOperator -> . NOT_IN
    (244) isOperator -> . IS
    (245) isOperator -> . NOT_IS

  ! reduce/reduce conflict for FUN resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for FOR resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for WHILE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DO resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for VAR resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for VAL resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for ID resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for INIT resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for OUT resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for VARARG resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for WHERE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CONST resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for EOF resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for FALSE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NULL resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for THIS resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for TRUE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for WHEN resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for LONG resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for LCCT resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IF resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for RETURN resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for BREAK resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MINUS resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for PLUS resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NOT resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MENOR resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for PONTO resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for AS resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MULT resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MOD resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IN resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IS resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for AND resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for OR resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for COMMA resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for RCCT resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for PV resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for ELSE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT_IN resolved as shift
  ! shift/reduce conflict for IS resolved as shift
  ! shift/reduce conflict for NOT_IS resolved as shift
    FUN             reduce using rule 101 (infixOperation -> elvisExpression .)
    FOR             reduce using rule 101 (infixOperation -> elvisExpression .)
    WHILE           reduce using rule 101 (infixOperation -> elvisExpression .)
    DO              reduce using rule 101 (infixOperation -> elvisExpression .)
    VAR             reduce using rule 101 (infixOperation -> elvisExpression .)
    VAL             reduce using rule 101 (infixOperation -> elvisExpression .)
    ID              reduce using rule 101 (infixOperation -> elvisExpression .)
    CROSSINLINE     reduce using rule 101 (infixOperation -> elvisExpression .)
    IMPORT          reduce using rule 101 (infixOperation -> elvisExpression .)
    INIT            reduce using rule 101 (infixOperation -> elvisExpression .)
    NOINLINE        reduce using rule 101 (infixOperation -> elvisExpression .)
    OUT             reduce using rule 101 (infixOperation -> elvisExpression .)
    VARARG          reduce using rule 101 (infixOperation -> elvisExpression .)
    WHERE           reduce using rule 101 (infixOperation -> elvisExpression .)
    OBJECT          reduce using rule 101 (infixOperation -> elvisExpression .)
    CONST           reduce using rule 101 (infixOperation -> elvisExpression .)
    CONSTRUCTOR     reduce using rule 101 (infixOperation -> elvisExpression .)
    EOF             reduce using rule 101 (infixOperation -> elvisExpression .)
    FALSE           reduce using rule 101 (infixOperation -> elvisExpression .)
    FUNCTION        reduce using rule 101 (infixOperation -> elvisExpression .)
    NULL            reduce using rule 101 (infixOperation -> elvisExpression .)
    NULLABLE        reduce using rule 101 (infixOperation -> elvisExpression .)
    NUMBER          reduce using rule 101 (infixOperation -> elvisExpression .)
    OPERATOR        reduce using rule 101 (infixOperation -> elvisExpression .)
    SMARTCAST       reduce using rule 101 (infixOperation -> elvisExpression .)
    THIS            reduce using rule 101 (infixOperation -> elvisExpression .)
    TRUE            reduce using rule 101 (infixOperation -> elvisExpression .)
    WHEN            reduce using rule 101 (infixOperation -> elvisExpression .)
    LONG            reduce using rule 101 (infixOperation -> elvisExpression .)
    ARRAY           reduce using rule 101 (infixOperation -> elvisExpression .)
    LPAREN          reduce using rule 101 (infixOperation -> elvisExpression .)
    LITERAL_STRING  reduce using rule 101 (infixOperation -> elvisExpression .)
    LCCT            reduce using rule 101 (infixOperation -> elvisExpression .)
    IF              reduce using rule 101 (infixOperation -> elvisExpression .)
    RETURN          reduce using rule 101 (infixOperation -> elvisExpression .)
    RETURN_AT       reduce using rule 101 (infixOperation -> elvisExpression .)
    CONTINUE        reduce using rule 101 (infixOperation -> elvisExpression .)
    CONTINUE_AT     reduce using rule 101 (infixOperation -> elvisExpression .)
    BREAK           reduce using rule 101 (infixOperation -> elvisExpression .)
    BREAK_AT        reduce using rule 101 (infixOperation -> elvisExpression .)
    RCHAVE          reduce using rule 101 (infixOperation -> elvisExpression .)
    INCREMENTO      reduce using rule 101 (infixOperation -> elvisExpression .)
    DECREMENTO      reduce using rule 101 (infixOperation -> elvisExpression .)
    MINUS           reduce using rule 101 (infixOperation -> elvisExpression .)
    PLUS            reduce using rule 101 (infixOperation -> elvisExpression .)
    NOT             reduce using rule 101 (infixOperation -> elvisExpression .)
    SUSPEND         reduce using rule 101 (infixOperation -> elvisExpression .)
    COLONCOLON      reduce using rule 101 (infixOperation -> elvisExpression .)
    LCHAVE          reduce using rule 101 (infixOperation -> elvisExpression .)
    MENOR           reduce using rule 101 (infixOperation -> elvisExpression .)
    PONTO           reduce using rule 101 (infixOperation -> elvisExpression .)
    AS              reduce using rule 101 (infixOperation -> elvisExpression .)
    MAISIGUAL       reduce using rule 101 (infixOperation -> elvisExpression .)
    MENOSIGUAL      reduce using rule 101 (infixOperation -> elvisExpression .)
    MULTIGUAL       reduce using rule 101 (infixOperation -> elvisExpression .)
    DIVIGUAL        reduce using rule 101 (infixOperation -> elvisExpression .)
    MODIGUAL        reduce using rule 101 (infixOperation -> elvisExpression .)
    MULT            reduce using rule 101 (infixOperation -> elvisExpression .)
    DIVIDE          reduce using rule 101 (infixOperation -> elvisExpression .)
    MOD             reduce using rule 101 (infixOperation -> elvisExpression .)
    PONTOPONTO      reduce using rule 101 (infixOperation -> elvisExpression .)
    ELVIS           reduce using rule 101 (infixOperation -> elvisExpression .)
    MAIOR           reduce using rule 101 (infixOperation -> elvisExpression .)
    MENORIGUAL      reduce using rule 101 (infixOperation -> elvisExpression .)
    MAIORIGUAL      reduce using rule 101 (infixOperation -> elvisExpression .)
    DIFERENTE       reduce using rule 101 (infixOperation -> elvisExpression .)
    IDENTIDADE      reduce using rule 101 (infixOperation -> elvisExpression .)
    IGUALDADE       reduce using rule 101 (infixOperation -> elvisExpression .)
    SEMIDENTIDADE   reduce using rule 101 (infixOperation -> elvisExpression .)
    AND             reduce using rule 101 (infixOperation -> elvisExpression .)
    OR              reduce using rule 101 (infixOperation -> elvisExpression .)
    COMMA           reduce using rule 101 (infixOperation -> elvisExpression .)
    RPAREN          reduce using rule 101 (infixOperation -> elvisExpression .)
    RCCT            reduce using rule 101 (infixOperation -> elvisExpression .)
    PV              reduce using rule 101 (infixOperation -> elvisExpression .)
    ELSE            reduce using rule 101 (infixOperation -> elvisExpression .)
    IN              shift and go to state 220
    NOT_IN          shift and go to state 221
    IS              shift and go to state 222
    NOT_IS          shift and go to state 223

  ! FUN             [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! FOR             [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! WHILE           [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! DO              [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! VAR             [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! VAL             [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! ID              [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! CROSSINLINE     [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! IMPORT          [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! INIT            [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! NOINLINE        [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! OUT             [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! VARARG          [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! WHERE           [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! OBJECT          [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! CONST           [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! CONSTRUCTOR     [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! EOF             [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! FALSE           [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! FUNCTION        [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! NULL            [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! NULLABLE        [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! NUMBER          [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! OPERATOR        [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! SMARTCAST       [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! THIS            [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! TRUE            [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! WHEN            [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! LONG            [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! ARRAY           [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! LPAREN          [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! LITERAL_STRING  [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! LCCT            [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! IF              [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! RETURN          [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! RETURN_AT       [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! CONTINUE        [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! CONTINUE_AT     [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! BREAK           [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! BREAK_AT        [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! RCHAVE          [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! INCREMENTO      [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! DECREMENTO      [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! MINUS           [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! PLUS            [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! NOT             [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! SUSPEND         [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! COLONCOLON      [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! LCHAVE          [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! MENOR           [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! PONTO           [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! AS              [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! MAISIGUAL       [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! MENOSIGUAL      [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! MULTIGUAL       [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! DIVIGUAL        [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! MODIGUAL        [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! MULT            [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! DIVIDE          [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! MOD             [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! PONTOPONTO      [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! ELVIS           [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! IN              [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! NOT_IN          [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! IS              [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! NOT_IS          [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! MAIOR           [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! MENORIGUAL      [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! MAIORIGUAL      [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! DIFERENTE       [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! IDENTIDADE      [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! IGUALDADE       [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! AND             [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! OR              [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! COMMA           [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! RPAREN          [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! RCCT            [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! PV              [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! ELSE            [ reduce using rule 106 (elvisOrType -> elvisExpression .) ]
  ! IN              [ reduce using rule 101 (infixOperation -> elvisExpression .) ]
  ! NOT_IN          [ reduce using rule 101 (infixOperation -> elvisExpression .) ]
  ! IS              [ reduce using rule 101 (infixOperation -> elvisExpression .) ]
  ! NOT_IS          [ reduce using rule 101 (infixOperation -> elvisExpression .) ]

    infixOperationRecursive        shift and go to state 216
    inOrIs                         shift and go to state 217
    inOperator                     shift and go to state 218
    isOperator                     shift and go to state 219

state 303

    (107) elvisOrType -> type .

    FUN             reduce using rule 107 (elvisOrType -> type .)
    FOR             reduce using rule 107 (elvisOrType -> type .)
    WHILE           reduce using rule 107 (elvisOrType -> type .)
    DO              reduce using rule 107 (elvisOrType -> type .)
    VAR             reduce using rule 107 (elvisOrType -> type .)
    VAL             reduce using rule 107 (elvisOrType -> type .)
    ID              reduce using rule 107 (elvisOrType -> type .)
    CROSSINLINE     reduce using rule 107 (elvisOrType -> type .)
    IMPORT          reduce using rule 107 (elvisOrType -> type .)
    INIT            reduce using rule 107 (elvisOrType -> type .)
    NOINLINE        reduce using rule 107 (elvisOrType -> type .)
    OUT             reduce using rule 107 (elvisOrType -> type .)
    VARARG          reduce using rule 107 (elvisOrType -> type .)
    WHERE           reduce using rule 107 (elvisOrType -> type .)
    OBJECT          reduce using rule 107 (elvisOrType -> type .)
    CONST           reduce using rule 107 (elvisOrType -> type .)
    CONSTRUCTOR     reduce using rule 107 (elvisOrType -> type .)
    EOF             reduce using rule 107 (elvisOrType -> type .)
    FALSE           reduce using rule 107 (elvisOrType -> type .)
    FUNCTION        reduce using rule 107 (elvisOrType -> type .)
    NULL            reduce using rule 107 (elvisOrType -> type .)
    NULLABLE        reduce using rule 107 (elvisOrType -> type .)
    NUMBER          reduce using rule 107 (elvisOrType -> type .)
    OPERATOR        reduce using rule 107 (elvisOrType -> type .)
    SMARTCAST       reduce using rule 107 (elvisOrType -> type .)
    THIS            reduce using rule 107 (elvisOrType -> type .)
    TRUE            reduce using rule 107 (elvisOrType -> type .)
    WHEN            reduce using rule 107 (elvisOrType -> type .)
    LONG            reduce using rule 107 (elvisOrType -> type .)
    ARRAY           reduce using rule 107 (elvisOrType -> type .)
    LPAREN          reduce using rule 107 (elvisOrType -> type .)
    LITERAL_STRING  reduce using rule 107 (elvisOrType -> type .)
    LCCT            reduce using rule 107 (elvisOrType -> type .)
    IF              reduce using rule 107 (elvisOrType -> type .)
    RETURN          reduce using rule 107 (elvisOrType -> type .)
    RETURN_AT       reduce using rule 107 (elvisOrType -> type .)
    CONTINUE        reduce using rule 107 (elvisOrType -> type .)
    CONTINUE_AT     reduce using rule 107 (elvisOrType -> type .)
    BREAK           reduce using rule 107 (elvisOrType -> type .)
    BREAK_AT        reduce using rule 107 (elvisOrType -> type .)
    RCHAVE          reduce using rule 107 (elvisOrType -> type .)
    INCREMENTO      reduce using rule 107 (elvisOrType -> type .)
    DECREMENTO      reduce using rule 107 (elvisOrType -> type .)
    MINUS           reduce using rule 107 (elvisOrType -> type .)
    PLUS            reduce using rule 107 (elvisOrType -> type .)
    NOT             reduce using rule 107 (elvisOrType -> type .)
    SUSPEND         reduce using rule 107 (elvisOrType -> type .)
    COLONCOLON      reduce using rule 107 (elvisOrType -> type .)
    LCHAVE          reduce using rule 107 (elvisOrType -> type .)
    MENOR           reduce using rule 107 (elvisOrType -> type .)
    PONTO           reduce using rule 107 (elvisOrType -> type .)
    AS              reduce using rule 107 (elvisOrType -> type .)
    MAISIGUAL       reduce using rule 107 (elvisOrType -> type .)
    MENOSIGUAL      reduce using rule 107 (elvisOrType -> type .)
    MULTIGUAL       reduce using rule 107 (elvisOrType -> type .)
    DIVIGUAL        reduce using rule 107 (elvisOrType -> type .)
    MODIGUAL        reduce using rule 107 (elvisOrType -> type .)
    MULT            reduce using rule 107 (elvisOrType -> type .)
    DIVIDE          reduce using rule 107 (elvisOrType -> type .)
    MOD             reduce using rule 107 (elvisOrType -> type .)
    PONTOPONTO      reduce using rule 107 (elvisOrType -> type .)
    ELVIS           reduce using rule 107 (elvisOrType -> type .)
    IN              reduce using rule 107 (elvisOrType -> type .)
    NOT_IN          reduce using rule 107 (elvisOrType -> type .)
    IS              reduce using rule 107 (elvisOrType -> type .)
    NOT_IS          reduce using rule 107 (elvisOrType -> type .)
    MAIOR           reduce using rule 107 (elvisOrType -> type .)
    MENORIGUAL      reduce using rule 107 (elvisOrType -> type .)
    MAIORIGUAL      reduce using rule 107 (elvisOrType -> type .)
    DIFERENTE       reduce using rule 107 (elvisOrType -> type .)
    IDENTIDADE      reduce using rule 107 (elvisOrType -> type .)
    IGUALDADE       reduce using rule 107 (elvisOrType -> type .)
    SEMIDENTIDADE   reduce using rule 107 (elvisOrType -> type .)
    AND             reduce using rule 107 (elvisOrType -> type .)
    OR              reduce using rule 107 (elvisOrType -> type .)
    COMMA           reduce using rule 107 (elvisOrType -> type .)
    RPAREN          reduce using rule 107 (elvisOrType -> type .)
    RCCT            reduce using rule 107 (elvisOrType -> type .)
    PV              reduce using rule 107 (elvisOrType -> type .)
    ELSE            reduce using rule 107 (elvisOrType -> type .)


state 304

    (46) typeModifiers -> typeModifier .
    (47) typeModifiers -> typeModifier . typeModifiers
    (69) receiverType -> typeModifier . parenthesizedType
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (68) parenthesizedType -> . LPAREN type RPAREN
    (48) typeModifier -> . SUSPEND

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
    ID              reduce using rule 46 (typeModifiers -> typeModifier .)
    CROSSINLINE     reduce using rule 46 (typeModifiers -> typeModifier .)
    IMPORT          reduce using rule 46 (typeModifiers -> typeModifier .)
    INIT            reduce using rule 46 (typeModifiers -> typeModifier .)
    NOINLINE        reduce using rule 46 (typeModifiers -> typeModifier .)
    OUT             reduce using rule 46 (typeModifiers -> typeModifier .)
    VARARG          reduce using rule 46 (typeModifiers -> typeModifier .)
    WHERE           reduce using rule 46 (typeModifiers -> typeModifier .)
    OBJECT          reduce using rule 46 (typeModifiers -> typeModifier .)
    CONST           reduce using rule 46 (typeModifiers -> typeModifier .)
    CONSTRUCTOR     reduce using rule 46 (typeModifiers -> typeModifier .)
    EOF             reduce using rule 46 (typeModifiers -> typeModifier .)
    FALSE           reduce using rule 46 (typeModifiers -> typeModifier .)
    FUNCTION        reduce using rule 46 (typeModifiers -> typeModifier .)
    NULL            reduce using rule 46 (typeModifiers -> typeModifier .)
    NULLABLE        reduce using rule 46 (typeModifiers -> typeModifier .)
    NUMBER          reduce using rule 46 (typeModifiers -> typeModifier .)
    OPERATOR        reduce using rule 46 (typeModifiers -> typeModifier .)
    SMARTCAST       reduce using rule 46 (typeModifiers -> typeModifier .)
    THIS            reduce using rule 46 (typeModifiers -> typeModifier .)
    TRUE            reduce using rule 46 (typeModifiers -> typeModifier .)
    VAL             reduce using rule 46 (typeModifiers -> typeModifier .)
    VAR             reduce using rule 46 (typeModifiers -> typeModifier .)
    WHEN            reduce using rule 46 (typeModifiers -> typeModifier .)
    LONG            reduce using rule 46 (typeModifiers -> typeModifier .)
    ARRAY           reduce using rule 46 (typeModifiers -> typeModifier .)
    LPAREN          shift and go to state 225
    SUSPEND         shift and go to state 48

  ! LPAREN          [ reduce using rule 46 (typeModifiers -> typeModifier .) ]
  ! SUSPEND         [ reduce using rule 46 (typeModifiers -> typeModifier .) ]

    typeModifier                   shift and go to state 47
    typeModifiers                  shift and go to state 130
    parenthesizedType              shift and go to state 224

state 305

    (68) parenthesizedType -> LPAREN type . RPAREN

    RPAREN          shift and go to state 311


state 306

    (109) elvisExpression -> infixFunctionCall ELVIS elvisExpression .
    (100) infixOperation -> elvisExpression . infixOperationRecursive
    (101) infixOperation -> elvisExpression .
    (102) infixOperationRecursive -> . inOrIs elvisOrType
    (103) infixOperationRecursive -> . inOrIs elvisOrType infixOperationRecursive
    (104) inOrIs -> . inOperator
    (105) inOrIs -> . isOperator
    (242) inOperator -> . IN
    (243) inOperator -> . NOT_IN
    (244) isOperator -> . IS
    (245) isOperator -> . NOT_IS

  ! reduce/reduce conflict for FUN resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for FOR resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for WHILE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DO resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for VAR resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for VAL resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for ID resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for INIT resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for OUT resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for VARARG resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for WHERE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CONST resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for EOF resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for FALSE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NULL resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for THIS resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for TRUE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for WHEN resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for LONG resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for LCCT resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IF resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for RETURN resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for BREAK resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MINUS resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for PLUS resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NOT resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MENOR resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for PONTO resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for AS resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MULT resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MOD resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IN resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IS resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for AND resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for OR resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for COMMA resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for RCCT resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for PV resolved using rule 101 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for ELSE resolved using rule 101 (infixOperation -> elvisExpression .)
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT_IN resolved as shift
  ! shift/reduce conflict for IS resolved as shift
  ! shift/reduce conflict for NOT_IS resolved as shift
    FUN             reduce using rule 101 (infixOperation -> elvisExpression .)
    FOR             reduce using rule 101 (infixOperation -> elvisExpression .)
    WHILE           reduce using rule 101 (infixOperation -> elvisExpression .)
    DO              reduce using rule 101 (infixOperation -> elvisExpression .)
    VAR             reduce using rule 101 (infixOperation -> elvisExpression .)
    VAL             reduce using rule 101 (infixOperation -> elvisExpression .)
    ID              reduce using rule 101 (infixOperation -> elvisExpression .)
    CROSSINLINE     reduce using rule 101 (infixOperation -> elvisExpression .)
    IMPORT          reduce using rule 101 (infixOperation -> elvisExpression .)
    INIT            reduce using rule 101 (infixOperation -> elvisExpression .)
    NOINLINE        reduce using rule 101 (infixOperation -> elvisExpression .)
    OUT             reduce using rule 101 (infixOperation -> elvisExpression .)
    VARARG          reduce using rule 101 (infixOperation -> elvisExpression .)
    WHERE           reduce using rule 101 (infixOperation -> elvisExpression .)
    OBJECT          reduce using rule 101 (infixOperation -> elvisExpression .)
    CONST           reduce using rule 101 (infixOperation -> elvisExpression .)
    CONSTRUCTOR     reduce using rule 101 (infixOperation -> elvisExpression .)
    EOF             reduce using rule 101 (infixOperation -> elvisExpression .)
    FALSE           reduce using rule 101 (infixOperation -> elvisExpression .)
    FUNCTION        reduce using rule 101 (infixOperation -> elvisExpression .)
    NULL            reduce using rule 101 (infixOperation -> elvisExpression .)
    NULLABLE        reduce using rule 101 (infixOperation -> elvisExpression .)
    NUMBER          reduce using rule 101 (infixOperation -> elvisExpression .)
    OPERATOR        reduce using rule 101 (infixOperation -> elvisExpression .)
    SMARTCAST       reduce using rule 101 (infixOperation -> elvisExpression .)
    THIS            reduce using rule 101 (infixOperation -> elvisExpression .)
    TRUE            reduce using rule 101 (infixOperation -> elvisExpression .)
    WHEN            reduce using rule 101 (infixOperation -> elvisExpression .)
    LONG            reduce using rule 101 (infixOperation -> elvisExpression .)
    ARRAY           reduce using rule 101 (infixOperation -> elvisExpression .)
    LPAREN          reduce using rule 101 (infixOperation -> elvisExpression .)
    LITERAL_STRING  reduce using rule 101 (infixOperation -> elvisExpression .)
    LCCT            reduce using rule 101 (infixOperation -> elvisExpression .)
    IF              reduce using rule 101 (infixOperation -> elvisExpression .)
    RETURN          reduce using rule 101 (infixOperation -> elvisExpression .)
    RETURN_AT       reduce using rule 101 (infixOperation -> elvisExpression .)
    CONTINUE        reduce using rule 101 (infixOperation -> elvisExpression .)
    CONTINUE_AT     reduce using rule 101 (infixOperation -> elvisExpression .)
    BREAK           reduce using rule 101 (infixOperation -> elvisExpression .)
    BREAK_AT        reduce using rule 101 (infixOperation -> elvisExpression .)
    RCHAVE          reduce using rule 101 (infixOperation -> elvisExpression .)
    INCREMENTO      reduce using rule 101 (infixOperation -> elvisExpression .)
    DECREMENTO      reduce using rule 101 (infixOperation -> elvisExpression .)
    MINUS           reduce using rule 101 (infixOperation -> elvisExpression .)
    PLUS            reduce using rule 101 (infixOperation -> elvisExpression .)
    NOT             reduce using rule 101 (infixOperation -> elvisExpression .)
    SUSPEND         reduce using rule 101 (infixOperation -> elvisExpression .)
    COLONCOLON      reduce using rule 101 (infixOperation -> elvisExpression .)
    LCHAVE          reduce using rule 101 (infixOperation -> elvisExpression .)
    MENOR           reduce using rule 101 (infixOperation -> elvisExpression .)
    PONTO           reduce using rule 101 (infixOperation -> elvisExpression .)
    AS              reduce using rule 101 (infixOperation -> elvisExpression .)
    MAISIGUAL       reduce using rule 101 (infixOperation -> elvisExpression .)
    MENOSIGUAL      reduce using rule 101 (infixOperation -> elvisExpression .)
    MULTIGUAL       reduce using rule 101 (infixOperation -> elvisExpression .)
    DIVIGUAL        reduce using rule 101 (infixOperation -> elvisExpression .)
    MODIGUAL        reduce using rule 101 (infixOperation -> elvisExpression .)
    MULT            reduce using rule 101 (infixOperation -> elvisExpression .)
    DIVIDE          reduce using rule 101 (infixOperation -> elvisExpression .)
    MOD             reduce using rule 101 (infixOperation -> elvisExpression .)
    PONTOPONTO      reduce using rule 101 (infixOperation -> elvisExpression .)
    ELVIS           reduce using rule 101 (infixOperation -> elvisExpression .)
    MAIOR           reduce using rule 101 (infixOperation -> elvisExpression .)
    MENORIGUAL      reduce using rule 101 (infixOperation -> elvisExpression .)
    MAIORIGUAL      reduce using rule 101 (infixOperation -> elvisExpression .)
    DIFERENTE       reduce using rule 101 (infixOperation -> elvisExpression .)
    IDENTIDADE      reduce using rule 101 (infixOperation -> elvisExpression .)
    IGUALDADE       reduce using rule 101 (infixOperation -> elvisExpression .)
    SEMIDENTIDADE   reduce using rule 101 (infixOperation -> elvisExpression .)
    AND             reduce using rule 101 (infixOperation -> elvisExpression .)
    OR              reduce using rule 101 (infixOperation -> elvisExpression .)
    COMMA           reduce using rule 101 (infixOperation -> elvisExpression .)
    RPAREN          reduce using rule 101 (infixOperation -> elvisExpression .)
    RCCT            reduce using rule 101 (infixOperation -> elvisExpression .)
    PV              reduce using rule 101 (infixOperation -> elvisExpression .)
    ELSE            reduce using rule 101 (infixOperation -> elvisExpression .)
    IN              shift and go to state 220
    NOT_IN          shift and go to state 221
    IS              shift and go to state 222
    NOT_IS          shift and go to state 223

  ! INCREMENTO      [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! DECREMENTO      [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MENOR           [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! LCCT            [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! COLONCOLON      [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! PONTO           [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! LPAREN          [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! RCHAVE          [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! AS              [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MAISIGUAL       [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MENOSIGUAL      [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MULTIGUAL       [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! DIVIGUAL        [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MODIGUAL        [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MULT            [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! DIVIDE          [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MOD             [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! PLUS            [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MINUS           [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! PONTOPONTO      [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! ID              [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! CROSSINLINE     [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! IMPORT          [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! INIT            [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! NOINLINE        [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! OUT             [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! VARARG          [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! WHERE           [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! OBJECT          [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! CONST           [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! CONSTRUCTOR     [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! EOF             [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! FALSE           [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! FUNCTION        [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! NULL            [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! NULLABLE        [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! NUMBER          [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! OPERATOR        [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! SMARTCAST       [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! THIS            [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! TRUE            [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! VAL             [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! VAR             [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! WHEN            [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! LONG            [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! ARRAY           [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! ELVIS           [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! IN              [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! NOT_IN          [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! IS              [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! NOT_IS          [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MAIOR           [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MENORIGUAL      [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MAIORIGUAL      [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! DIFERENTE       [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! IDENTIDADE      [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! IGUALDADE       [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! AND             [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! OR              [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! FUN             [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! FOR             [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! WHILE           [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! DO              [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! LITERAL_STRING  [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! IF              [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! RETURN          [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! RETURN_AT       [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! CONTINUE        [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! CONTINUE_AT     [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! BREAK           [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! BREAK_AT        [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! NOT             [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! SUSPEND         [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! COMMA           [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! RPAREN          [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! LCHAVE          [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! RCCT            [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! PV              [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! ELSE            [ reduce using rule 109 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! IN              [ reduce using rule 101 (infixOperation -> elvisExpression .) ]
  ! NOT_IN          [ reduce using rule 101 (infixOperation -> elvisExpression .) ]
  ! IS              [ reduce using rule 101 (infixOperation -> elvisExpression .) ]
  ! NOT_IS          [ reduce using rule 101 (infixOperation -> elvisExpression .) ]

    infixOperationRecursive        shift and go to state 216
    inOrIs                         shift and go to state 217
    inOperator                     shift and go to state 218
    isOperator                     shift and go to state 219

state 307

    (111) infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .
    (108) elvisExpression -> infixFunctionCall .
    (109) elvisExpression -> infixFunctionCall . ELVIS elvisExpression

  ! reduce/reduce conflict for FUN resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for FOR resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for WHILE resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for DO resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for VAR resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for VAL resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for ID resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for IMPORT resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for INIT resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for OUT resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for VARARG resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for WHERE resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for OBJECT resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for CONST resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for EOF resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for FALSE resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for NULL resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for NUMBER resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for THIS resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for TRUE resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for WHEN resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for LONG resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for ARRAY resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for LPAREN resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for LCCT resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for IF resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for RETURN resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for BREAK resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MINUS resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for PLUS resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for NOT resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MENOR resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for PONTO resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for AS resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MULT resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MOD resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for ELVIS resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for IN resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for IS resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MAIOR resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for AND resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for OR resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for COMMA resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for RPAREN resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for RCCT resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for PV resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for ELSE resolved using rule 108 (elvisExpression -> infixFunctionCall .)
  ! shift/reduce conflict for ELVIS resolved as shift
    FUN             reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    FOR             reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    WHILE           reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    DO              reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    VAR             reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    VAL             reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    ID              reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    CROSSINLINE     reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    IMPORT          reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    INIT            reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    NOINLINE        reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    OUT             reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    VARARG          reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    WHERE           reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    OBJECT          reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    CONST           reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    CONSTRUCTOR     reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    EOF             reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    FALSE           reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    FUNCTION        reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    NULL            reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    NULLABLE        reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    NUMBER          reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    OPERATOR        reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    SMARTCAST       reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    THIS            reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    TRUE            reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    WHEN            reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    LONG            reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    ARRAY           reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    LPAREN          reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    LITERAL_STRING  reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    LCCT            reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    IF              reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    RETURN          reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    RETURN_AT       reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    CONTINUE        reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    CONTINUE_AT     reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    BREAK           reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    BREAK_AT        reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    RCHAVE          reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    INCREMENTO      reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    DECREMENTO      reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    MINUS           reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    PLUS            reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    NOT             reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    SUSPEND         reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    COLONCOLON      reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    LCHAVE          reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    MENOR           reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    PONTO           reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    AS              reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    MAISIGUAL       reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    MENOSIGUAL      reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    MULTIGUAL       reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    DIVIGUAL        reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    MODIGUAL        reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    MULT            reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    DIVIDE          reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    MOD             reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    PONTOPONTO      reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    IN              reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    NOT_IN          reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    IS              reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    NOT_IS          reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    MAIOR           reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    MENORIGUAL      reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    MAIORIGUAL      reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    DIFERENTE       reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    IDENTIDADE      reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    IGUALDADE       reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    SEMIDENTIDADE   reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    AND             reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    OR              reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    COMMA           reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    RPAREN          reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    RCCT            reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    PV              reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    ELSE            reduce using rule 108 (elvisExpression -> infixFunctionCall .)
    ELVIS           shift and go to state 226

  ! INCREMENTO      [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! DECREMENTO      [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MENOR           [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! LCCT            [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! COLONCOLON      [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! PONTO           [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! LPAREN          [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! RCHAVE          [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! AS              [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MAISIGUAL       [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MENOSIGUAL      [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MULTIGUAL       [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! DIVIGUAL        [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MODIGUAL        [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MULT            [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! DIVIDE          [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MOD             [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! PLUS            [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MINUS           [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! PONTOPONTO      [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! ID              [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! CROSSINLINE     [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! IMPORT          [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! INIT            [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! NOINLINE        [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! OUT             [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! VARARG          [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! WHERE           [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! OBJECT          [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! CONST           [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! CONSTRUCTOR     [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! EOF             [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! FALSE           [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! FUNCTION        [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! NULL            [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! NULLABLE        [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! NUMBER          [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! OPERATOR        [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! SMARTCAST       [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! THIS            [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! TRUE            [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! VAL             [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! VAR             [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! WHEN            [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! LONG            [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! ARRAY           [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! ELVIS           [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! IN              [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! NOT_IN          [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! IS              [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! NOT_IS          [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MAIOR           [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MENORIGUAL      [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MAIORIGUAL      [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! DIFERENTE       [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! IDENTIDADE      [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! IGUALDADE       [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! SEMIDENTIDADE   [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! AND             [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! OR              [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! FUN             [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! FOR             [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! WHILE           [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! DO              [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! LITERAL_STRING  [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! IF              [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! RETURN          [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! RETURN_AT       [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! CONTINUE        [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! CONTINUE_AT     [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! BREAK           [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! BREAK_AT        [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! NOT             [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! SUSPEND         [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! COMMA           [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! RPAREN          [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! LCHAVE          [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! RCCT            [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! PV              [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! ELSE            [ reduce using rule 111 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! ELVIS           [ reduce using rule 108 (elvisExpression -> infixFunctionCall .) ]


state 308

    (113) rangeExpression -> additiveExpression PONTOPONTO rangeExpression .
    (110) infixFunctionCall -> rangeExpression .
    (111) infixFunctionCall -> rangeExpression . simpleIdentifier infixFunctionCall
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY

  ! reduce/reduce conflict for FUN resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for FOR resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for WHILE resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for DO resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for VAR resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for VAL resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for ID resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for INIT resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for OUT resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for VARARG resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for WHERE resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for CONST resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for EOF resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for FALSE resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for NULL resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for THIS resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for TRUE resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for WHEN resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for LONG resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for LCCT resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for IF resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for RETURN resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for BREAK resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MINUS resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for PLUS resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for NOT resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MENOR resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for PONTO resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for AS resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MULT resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MOD resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for IN resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for IS resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for AND resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for OR resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for COMMA resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for RCCT resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for PV resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for ELSE resolved using rule 110 (infixFunctionCall -> rangeExpression .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
    FUN             reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    FOR             reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    WHILE           reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    DO              reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    LPAREN          reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    LITERAL_STRING  reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    LCCT            reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    IF              reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    RETURN          reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    RETURN_AT       reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    CONTINUE        reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    CONTINUE_AT     reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    BREAK           reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    BREAK_AT        reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    RCHAVE          reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    INCREMENTO      reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    DECREMENTO      reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    MINUS           reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    PLUS            reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    NOT             reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    SUSPEND         reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    COLONCOLON      reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    LCHAVE          reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    MENOR           reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    PONTO           reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    AS              reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    MAISIGUAL       reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    MENOSIGUAL      reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    MULTIGUAL       reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    DIVIGUAL        reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    MODIGUAL        reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    MULT            reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    DIVIDE          reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    MOD             reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    PONTOPONTO      reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    ELVIS           reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    IN              reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    NOT_IN          reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    IS              reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    NOT_IS          reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    MAIOR           reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    MENORIGUAL      reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    MAIORIGUAL      reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    DIFERENTE       reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    IDENTIDADE      reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    IGUALDADE       reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    SEMIDENTIDADE   reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    AND             reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    OR              reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    COMMA           reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    RPAREN          reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    RCCT            reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    PV              reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    ELSE            reduce using rule 110 (infixFunctionCall -> rangeExpression .)
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

  ! INCREMENTO      [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! DECREMENTO      [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MENOR           [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! LCCT            [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! COLONCOLON      [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! PONTO           [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! LPAREN          [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! RCHAVE          [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! AS              [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MAISIGUAL       [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MENOSIGUAL      [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MULTIGUAL       [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! DIVIGUAL        [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MODIGUAL        [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MULT            [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! DIVIDE          [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MOD             [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! PLUS            [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MINUS           [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! PONTOPONTO      [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! ID              [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! CROSSINLINE     [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! IMPORT          [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! INIT            [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! NOINLINE        [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! OUT             [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! VARARG          [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! WHERE           [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! OBJECT          [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! CONST           [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! CONSTRUCTOR     [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! EOF             [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! FALSE           [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! FUNCTION        [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! NULL            [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! NULLABLE        [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! NUMBER          [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! OPERATOR        [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! SMARTCAST       [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! THIS            [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! TRUE            [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! VAL             [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! VAR             [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! WHEN            [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! LONG            [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! ARRAY           [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! ELVIS           [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! IN              [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! NOT_IN          [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! IS              [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! NOT_IS          [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MAIOR           [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MENORIGUAL      [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MAIORIGUAL      [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! DIFERENTE       [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! IDENTIDADE      [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! IGUALDADE       [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! AND             [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! OR              [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! FUN             [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! FOR             [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! WHILE           [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! DO              [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! LITERAL_STRING  [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! IF              [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! RETURN          [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! RETURN_AT       [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! CONTINUE        [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! CONTINUE_AT     [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! BREAK           [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! BREAK_AT        [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! NOT             [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! SUSPEND         [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! COMMA           [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! RPAREN          [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! LCHAVE          [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! RCCT            [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! PV              [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! ELSE            [ reduce using rule 113 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! VAR             [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! VAL             [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! ID              [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! CROSSINLINE     [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! IMPORT          [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! INIT            [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! NOINLINE        [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! OUT             [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! VARARG          [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! WHERE           [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! OBJECT          [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! CONST           [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! CONSTRUCTOR     [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! EOF             [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! FALSE           [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! FUNCTION        [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! NULL            [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! NULLABLE        [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! NUMBER          [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! OPERATOR        [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! SMARTCAST       [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! THIS            [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! TRUE            [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! WHEN            [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! LONG            [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]
  ! ARRAY           [ reduce using rule 110 (infixFunctionCall -> rangeExpression .) ]

    simpleIdentifier               shift and go to state 227

state 309

    (115) additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .
    (112) rangeExpression -> additiveExpression .
    (113) rangeExpression -> additiveExpression . PONTOPONTO rangeExpression

  ! reduce/reduce conflict for FUN resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for FOR resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for WHILE resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for DO resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for VAR resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for VAL resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for ID resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for INIT resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for OUT resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for VARARG resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for WHERE resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for CONST resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for EOF resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for FALSE resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for NULL resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for THIS resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for TRUE resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for WHEN resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for LONG resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for LCCT resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for IF resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for RETURN resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for BREAK resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MINUS resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for PLUS resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for NOT resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MENOR resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for PONTO resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for AS resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MULT resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MOD resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for IN resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for IS resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for AND resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for OR resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for COMMA resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for RCCT resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for PV resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for ELSE resolved using rule 112 (rangeExpression -> additiveExpression .)
  ! shift/reduce conflict for PONTOPONTO resolved as shift
    FUN             reduce using rule 112 (rangeExpression -> additiveExpression .)
    FOR             reduce using rule 112 (rangeExpression -> additiveExpression .)
    WHILE           reduce using rule 112 (rangeExpression -> additiveExpression .)
    DO              reduce using rule 112 (rangeExpression -> additiveExpression .)
    VAR             reduce using rule 112 (rangeExpression -> additiveExpression .)
    VAL             reduce using rule 112 (rangeExpression -> additiveExpression .)
    ID              reduce using rule 112 (rangeExpression -> additiveExpression .)
    CROSSINLINE     reduce using rule 112 (rangeExpression -> additiveExpression .)
    IMPORT          reduce using rule 112 (rangeExpression -> additiveExpression .)
    INIT            reduce using rule 112 (rangeExpression -> additiveExpression .)
    NOINLINE        reduce using rule 112 (rangeExpression -> additiveExpression .)
    OUT             reduce using rule 112 (rangeExpression -> additiveExpression .)
    VARARG          reduce using rule 112 (rangeExpression -> additiveExpression .)
    WHERE           reduce using rule 112 (rangeExpression -> additiveExpression .)
    OBJECT          reduce using rule 112 (rangeExpression -> additiveExpression .)
    CONST           reduce using rule 112 (rangeExpression -> additiveExpression .)
    CONSTRUCTOR     reduce using rule 112 (rangeExpression -> additiveExpression .)
    EOF             reduce using rule 112 (rangeExpression -> additiveExpression .)
    FALSE           reduce using rule 112 (rangeExpression -> additiveExpression .)
    FUNCTION        reduce using rule 112 (rangeExpression -> additiveExpression .)
    NULL            reduce using rule 112 (rangeExpression -> additiveExpression .)
    NULLABLE        reduce using rule 112 (rangeExpression -> additiveExpression .)
    NUMBER          reduce using rule 112 (rangeExpression -> additiveExpression .)
    OPERATOR        reduce using rule 112 (rangeExpression -> additiveExpression .)
    SMARTCAST       reduce using rule 112 (rangeExpression -> additiveExpression .)
    THIS            reduce using rule 112 (rangeExpression -> additiveExpression .)
    TRUE            reduce using rule 112 (rangeExpression -> additiveExpression .)
    WHEN            reduce using rule 112 (rangeExpression -> additiveExpression .)
    LONG            reduce using rule 112 (rangeExpression -> additiveExpression .)
    ARRAY           reduce using rule 112 (rangeExpression -> additiveExpression .)
    LPAREN          reduce using rule 112 (rangeExpression -> additiveExpression .)
    LITERAL_STRING  reduce using rule 112 (rangeExpression -> additiveExpression .)
    LCCT            reduce using rule 112 (rangeExpression -> additiveExpression .)
    IF              reduce using rule 112 (rangeExpression -> additiveExpression .)
    RETURN          reduce using rule 112 (rangeExpression -> additiveExpression .)
    RETURN_AT       reduce using rule 112 (rangeExpression -> additiveExpression .)
    CONTINUE        reduce using rule 112 (rangeExpression -> additiveExpression .)
    CONTINUE_AT     reduce using rule 112 (rangeExpression -> additiveExpression .)
    BREAK           reduce using rule 112 (rangeExpression -> additiveExpression .)
    BREAK_AT        reduce using rule 112 (rangeExpression -> additiveExpression .)
    RCHAVE          reduce using rule 112 (rangeExpression -> additiveExpression .)
    INCREMENTO      reduce using rule 112 (rangeExpression -> additiveExpression .)
    DECREMENTO      reduce using rule 112 (rangeExpression -> additiveExpression .)
    MINUS           reduce using rule 112 (rangeExpression -> additiveExpression .)
    PLUS            reduce using rule 112 (rangeExpression -> additiveExpression .)
    NOT             reduce using rule 112 (rangeExpression -> additiveExpression .)
    SUSPEND         reduce using rule 112 (rangeExpression -> additiveExpression .)
    COLONCOLON      reduce using rule 112 (rangeExpression -> additiveExpression .)
    LCHAVE          reduce using rule 112 (rangeExpression -> additiveExpression .)
    MENOR           reduce using rule 112 (rangeExpression -> additiveExpression .)
    PONTO           reduce using rule 112 (rangeExpression -> additiveExpression .)
    AS              reduce using rule 112 (rangeExpression -> additiveExpression .)
    MAISIGUAL       reduce using rule 112 (rangeExpression -> additiveExpression .)
    MENOSIGUAL      reduce using rule 112 (rangeExpression -> additiveExpression .)
    MULTIGUAL       reduce using rule 112 (rangeExpression -> additiveExpression .)
    DIVIGUAL        reduce using rule 112 (rangeExpression -> additiveExpression .)
    MODIGUAL        reduce using rule 112 (rangeExpression -> additiveExpression .)
    MULT            reduce using rule 112 (rangeExpression -> additiveExpression .)
    DIVIDE          reduce using rule 112 (rangeExpression -> additiveExpression .)
    MOD             reduce using rule 112 (rangeExpression -> additiveExpression .)
    ELVIS           reduce using rule 112 (rangeExpression -> additiveExpression .)
    IN              reduce using rule 112 (rangeExpression -> additiveExpression .)
    NOT_IN          reduce using rule 112 (rangeExpression -> additiveExpression .)
    IS              reduce using rule 112 (rangeExpression -> additiveExpression .)
    NOT_IS          reduce using rule 112 (rangeExpression -> additiveExpression .)
    MAIOR           reduce using rule 112 (rangeExpression -> additiveExpression .)
    MENORIGUAL      reduce using rule 112 (rangeExpression -> additiveExpression .)
    MAIORIGUAL      reduce using rule 112 (rangeExpression -> additiveExpression .)
    DIFERENTE       reduce using rule 112 (rangeExpression -> additiveExpression .)
    IDENTIDADE      reduce using rule 112 (rangeExpression -> additiveExpression .)
    IGUALDADE       reduce using rule 112 (rangeExpression -> additiveExpression .)
    SEMIDENTIDADE   reduce using rule 112 (rangeExpression -> additiveExpression .)
    AND             reduce using rule 112 (rangeExpression -> additiveExpression .)
    OR              reduce using rule 112 (rangeExpression -> additiveExpression .)
    COMMA           reduce using rule 112 (rangeExpression -> additiveExpression .)
    RPAREN          reduce using rule 112 (rangeExpression -> additiveExpression .)
    RCCT            reduce using rule 112 (rangeExpression -> additiveExpression .)
    PV              reduce using rule 112 (rangeExpression -> additiveExpression .)
    ELSE            reduce using rule 112 (rangeExpression -> additiveExpression .)
    PONTOPONTO      shift and go to state 228

  ! INCREMENTO      [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! DECREMENTO      [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MENOR           [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! LCCT            [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! COLONCOLON      [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! PONTO           [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! LPAREN          [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! RCHAVE          [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! AS              [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MAISIGUAL       [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MENOSIGUAL      [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MULTIGUAL       [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! DIVIGUAL        [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MODIGUAL        [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MULT            [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! DIVIDE          [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MOD             [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! PLUS            [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MINUS           [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! PONTOPONTO      [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! ID              [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! CROSSINLINE     [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! IMPORT          [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! INIT            [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! NOINLINE        [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! OUT             [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! VARARG          [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! WHERE           [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! OBJECT          [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! CONST           [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! CONSTRUCTOR     [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! EOF             [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! FALSE           [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! FUNCTION        [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! NULL            [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! NULLABLE        [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! NUMBER          [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! OPERATOR        [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! SMARTCAST       [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! THIS            [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! TRUE            [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! VAL             [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! VAR             [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! WHEN            [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! LONG            [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! ARRAY           [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! ELVIS           [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! IN              [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! NOT_IN          [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! IS              [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! NOT_IS          [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MAIOR           [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MENORIGUAL      [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MAIORIGUAL      [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! DIFERENTE       [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! IDENTIDADE      [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! IGUALDADE       [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! AND             [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! OR              [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! FUN             [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! FOR             [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! WHILE           [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! DO              [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! LITERAL_STRING  [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! IF              [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! RETURN          [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! RETURN_AT       [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! CONTINUE        [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! CONTINUE_AT     [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! BREAK           [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! BREAK_AT        [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! NOT             [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! SUSPEND         [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! COMMA           [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! RPAREN          [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! LCHAVE          [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! RCCT            [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! PV              [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! ELSE            [ reduce using rule 115 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! PONTOPONTO      [ reduce using rule 112 (rangeExpression -> additiveExpression .) ]


state 310

    (117) multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .
    (114) additiveExpression -> multiplicativeExpression .
    (115) additiveExpression -> multiplicativeExpression . additiveOperator additiveExpression
    (246) additiveOperator -> . PLUS
    (247) additiveOperator -> . MINUS

  ! reduce/reduce conflict for FUN resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for FOR resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for WHILE resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for DO resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for VAR resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for VAL resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for ID resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for INIT resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for OUT resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for VARARG resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for WHERE resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for CONST resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for EOF resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for FALSE resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for NULL resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for THIS resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for TRUE resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for WHEN resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for LONG resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for LCCT resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for IF resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for RETURN resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for BREAK resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MINUS resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for PLUS resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for NOT resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MENOR resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for PONTO resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for AS resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MULT resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MOD resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for IN resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for IS resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for AND resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for OR resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for COMMA resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for RCCT resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for PV resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for ELSE resolved using rule 114 (additiveExpression -> multiplicativeExpression .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    FUN             reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    FOR             reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    WHILE           reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    DO              reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    VAR             reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    VAL             reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    ID              reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    CROSSINLINE     reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    IMPORT          reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    INIT            reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    NOINLINE        reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    OUT             reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    VARARG          reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    WHERE           reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    OBJECT          reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    CONST           reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    CONSTRUCTOR     reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    EOF             reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    FALSE           reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    FUNCTION        reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    NULL            reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    NULLABLE        reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    NUMBER          reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    OPERATOR        reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    SMARTCAST       reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    THIS            reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    TRUE            reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    WHEN            reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    LONG            reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    ARRAY           reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    LPAREN          reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    LITERAL_STRING  reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    LCCT            reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    IF              reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    RETURN          reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    RETURN_AT       reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    CONTINUE        reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    CONTINUE_AT     reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    BREAK           reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    BREAK_AT        reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    RCHAVE          reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    INCREMENTO      reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    DECREMENTO      reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    NOT             reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    SUSPEND         reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    COLONCOLON      reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    LCHAVE          reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    MENOR           reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    PONTO           reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    AS              reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    MAISIGUAL       reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    MENOSIGUAL      reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    MULTIGUAL       reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    DIVIGUAL        reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    MODIGUAL        reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    MULT            reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    DIVIDE          reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    MOD             reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    PONTOPONTO      reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    ELVIS           reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    IN              reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    NOT_IN          reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    IS              reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    NOT_IS          reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    MAIOR           reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    MENORIGUAL      reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    MAIORIGUAL      reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    DIFERENTE       reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    IDENTIDADE      reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    IGUALDADE       reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    SEMIDENTIDADE   reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    AND             reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    OR              reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    COMMA           reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    RPAREN          reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    RCCT            reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    PV              reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    ELSE            reduce using rule 114 (additiveExpression -> multiplicativeExpression .)
    PLUS            shift and go to state 230
    MINUS           shift and go to state 231

  ! INCREMENTO      [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! DECREMENTO      [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MENOR           [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! LCCT            [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! COLONCOLON      [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! PONTO           [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! LPAREN          [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! RCHAVE          [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! AS              [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MAISIGUAL       [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MENOSIGUAL      [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MULTIGUAL       [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! DIVIGUAL        [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MODIGUAL        [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MULT            [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! DIVIDE          [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MOD             [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! PLUS            [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MINUS           [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! PONTOPONTO      [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! ID              [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! CROSSINLINE     [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! IMPORT          [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! INIT            [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! NOINLINE        [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! OUT             [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! VARARG          [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! WHERE           [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! OBJECT          [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! CONST           [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! CONSTRUCTOR     [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! EOF             [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! FALSE           [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! FUNCTION        [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! NULL            [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! NULLABLE        [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! NUMBER          [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! OPERATOR        [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! SMARTCAST       [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! THIS            [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! TRUE            [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! VAL             [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! VAR             [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! WHEN            [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! LONG            [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! ARRAY           [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! ELVIS           [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! IN              [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! NOT_IN          [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! IS              [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! NOT_IS          [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MAIOR           [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MENORIGUAL      [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! DIFERENTE       [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! IDENTIDADE      [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! IGUALDADE       [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! AND             [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! OR              [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! FUN             [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! FOR             [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! WHILE           [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! DO              [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! LITERAL_STRING  [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! IF              [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! RETURN          [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! RETURN_AT       [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! CONTINUE        [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! BREAK           [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! BREAK_AT        [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! NOT             [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! SUSPEND         [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! COMMA           [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! RPAREN          [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! LCHAVE          [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! RCCT            [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! PV              [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! ELSE            [ reduce using rule 117 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MINUS           [ reduce using rule 114 (additiveExpression -> multiplicativeExpression .) ]
  ! PLUS            [ reduce using rule 114 (additiveExpression -> multiplicativeExpression .) ]

    additiveOperator               shift and go to state 229

state 311

    (68) parenthesizedType -> LPAREN type RPAREN .

    LCHAVE          reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    FUN             reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    $end            reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    FOR             reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    WHILE           reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    DO              reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    VAR             reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    VAL             reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    ID              reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    CROSSINLINE     reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    IMPORT          reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    INIT            reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    NOINLINE        reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    OUT             reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    VARARG          reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    WHERE           reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    OBJECT          reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    CONST           reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    CONSTRUCTOR     reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    EOF             reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    FALSE           reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    FUNCTION        reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    NULL            reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    NULLABLE        reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    NUMBER          reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    OPERATOR        reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    SMARTCAST       reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    THIS            reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    TRUE            reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    WHEN            reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    LONG            reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    ARRAY           reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    LPAREN          reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    LITERAL_STRING  reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    LCCT            reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    IF              reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    RETURN          reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    RETURN_AT       reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    CONTINUE        reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    CONTINUE_AT     reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    BREAK           reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    BREAK_AT        reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    RCHAVE          reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    INCREMENTO      reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    DECREMENTO      reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    MINUS           reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    PLUS            reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    NOT             reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    SUSPEND         reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    COLONCOLON      reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    MENOR           reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    PONTO           reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    AS              reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    MAISIGUAL       reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    MENOSIGUAL      reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    MULTIGUAL       reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    DIVIGUAL        reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    MODIGUAL        reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    MULT            reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    DIVIDE          reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    MOD             reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    PONTOPONTO      reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    ELVIS           reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    IN              reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    NOT_IN          reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    IS              reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    NOT_IS          reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    MAIOR           reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    MENORIGUAL      reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    MAIORIGUAL      reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    DIFERENTE       reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    IDENTIDADE      reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    IGUALDADE       reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    SEMIDENTIDADE   reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    AND             reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    OR              reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    COMMA           reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    RPAREN          reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    RCCT            reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    PV              reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    ELSE            reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    SETA            reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    ATRIBUICAO      reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)


state 312

    (67) functionTypeParameters -> LPAREN optionalParameterOrType parameterOrTypeRecursive . optionalCOMMA RPAREN
    (21) optionalCOMMA -> . COMMA
    (22) optionalCOMMA -> .

    COMMA           shift and go to state 359
    RPAREN          reduce using rule 22 (optionalCOMMA -> .)

    optionalCOMMA                  shift and go to state 358

state 313

    (64) parameterOrTypeRecursive -> COMMA . optionalParameterOrType
    (65) parameterOrTypeRecursive -> COMMA . optionalParameterOrType parameterOrTypeRecursive
    (61) optionalParameterOrType -> . parameter
    (62) optionalParameterOrType -> . type
    (63) optionalParameterOrType -> .
    (39) parameter -> . simpleIdentifier DOISP type
    (40) type -> . optionalTypeModifiers optype
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (41) optionalTypeModifiers -> . typeModifiers
    (42) optionalTypeModifiers -> .
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (48) typeModifier -> . SUSPEND

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
    COMMA           reduce using rule 63 (optionalParameterOrType -> .)
    RPAREN          reduce using rule 63 (optionalParameterOrType -> .)
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          reduce using rule 42 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! ID              [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! CROSSINLINE     [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! IMPORT          [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! INIT            [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! NOINLINE        [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! OUT             [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! VARARG          [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! WHERE           [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! OBJECT          [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! CONST           [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! CONSTRUCTOR     [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! EOF             [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! FALSE           [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! FUNCTION        [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! NULL            [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! NULLABLE        [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! NUMBER          [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! OPERATOR        [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! SMARTCAST       [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! THIS            [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! TRUE            [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! VAL             [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! VAR             [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! WHEN            [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! LONG            [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! ARRAY           [ reduce using rule 42 (optionalTypeModifiers -> .) ]

    optionalParameterOrType        shift and go to state 360
    parameter                      shift and go to state 238
    type                           shift and go to state 361
    simpleIdentifier               shift and go to state 40
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 314

    (59) functionType -> receiverType PONTO functionTypeParameters . SETA type

    SETA            shift and go to state 362


state 315

    (67) functionTypeParameters -> LPAREN . optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
    (61) optionalParameterOrType -> . parameter
    (62) optionalParameterOrType -> . type
    (63) optionalParameterOrType -> .
    (39) parameter -> . simpleIdentifier DOISP type
    (40) type -> . optionalTypeModifiers optype
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (41) optionalTypeModifiers -> . typeModifiers
    (42) optionalTypeModifiers -> .
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (48) typeModifier -> . SUSPEND

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
    COMMA           reduce using rule 63 (optionalParameterOrType -> .)
    RPAREN          reduce using rule 63 (optionalParameterOrType -> .)
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          reduce using rule 42 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! ID              [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! CROSSINLINE     [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! IMPORT          [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! INIT            [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! NOINLINE        [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! OUT             [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! VARARG          [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! WHERE           [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! OBJECT          [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! CONST           [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! CONSTRUCTOR     [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! EOF             [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! FALSE           [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! FUNCTION        [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! NULL            [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! NULLABLE        [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! NUMBER          [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! OPERATOR        [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! SMARTCAST       [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! THIS            [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! TRUE            [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! VAL             [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! VAR             [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! WHEN            [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! LONG            [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! ARRAY           [ reduce using rule 42 (optionalTypeModifiers -> .) ]

    optionalParameterOrType        shift and go to state 237
    parameter                      shift and go to state 238
    type                           shift and go to state 361
    simpleIdentifier               shift and go to state 40
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 316

    (60) functionType -> functionTypeParameters SETA type .

    LCHAVE          reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    FUN             reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    $end            reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    FOR             reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    WHILE           reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    DO              reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    VAR             reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    VAL             reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    ID              reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    CROSSINLINE     reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    IMPORT          reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    INIT            reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    NOINLINE        reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    OUT             reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    VARARG          reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    WHERE           reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    OBJECT          reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    CONST           reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    CONSTRUCTOR     reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    EOF             reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    FALSE           reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    FUNCTION        reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    NULL            reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    NULLABLE        reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    NUMBER          reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    OPERATOR        reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    SMARTCAST       reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    THIS            reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    TRUE            reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    WHEN            reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    LONG            reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    ARRAY           reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    LPAREN          reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    LITERAL_STRING  reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    LCCT            reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    IF              reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    RETURN          reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    RETURN_AT       reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    CONTINUE        reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    CONTINUE_AT     reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    BREAK           reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    BREAK_AT        reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    RCHAVE          reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    INCREMENTO      reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    DECREMENTO      reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    MINUS           reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    PLUS            reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    NOT             reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    SUSPEND         reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    COLONCOLON      reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    MENOR           reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    PONTO           reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    AS              reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    MAISIGUAL       reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    MENOSIGUAL      reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    MULTIGUAL       reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    DIVIGUAL        reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    MODIGUAL        reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    MULT            reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    DIVIDE          reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    MOD             reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    PONTOPONTO      reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    ELVIS           reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    IN              reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    NOT_IN          reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    IS              reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    NOT_IS          reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    MAIOR           reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    MENORIGUAL      reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    MAIORIGUAL      reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    DIFERENTE       reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    IDENTIDADE      reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    IGUALDADE       reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    SEMIDENTIDADE   reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    AND             reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    OR              reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    COMMA           reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    RPAREN          reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    RCCT            reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    PV              reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    ELSE            reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    SETA            reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    ATRIBUICAO      reduce using rule 60 (functionType -> functionTypeParameters SETA type .)


state 317

    (195) optionsLambdaLiteral -> lambdaParameters SETA statements .

    LCHAVE          reduce using rule 195 (optionsLambdaLiteral -> lambdaParameters SETA statements .)


state 318

    (198) lambdaParameters -> lambdaParameter COMMA lambdaParameters .

    SETA            reduce using rule 198 (lambdaParameters -> lambdaParameter COMMA lambdaParameters .)


state 319

    (33) variableDeclaration -> simpleIdentifier DOISP type .

    COMMA           reduce using rule 33 (variableDeclaration -> simpleIdentifier DOISP type .)
    SETA            reduce using rule 33 (variableDeclaration -> simpleIdentifier DOISP type .)
    RPAREN          reduce using rule 33 (variableDeclaration -> simpleIdentifier DOISP type .)
    ATRIBUICAO      reduce using rule 33 (variableDeclaration -> simpleIdentifier DOISP type .)
    IN              reduce using rule 33 (variableDeclaration -> simpleIdentifier DOISP type .)


state 320

    (35) multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive RPAREN .

    DOISP           reduce using rule 35 (multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive RPAREN .)
    COMMA           reduce using rule 35 (multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive RPAREN .)
    SETA            reduce using rule 35 (multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive RPAREN .)
    ATRIBUICAO      reduce using rule 35 (multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive RPAREN .)
    IN              reduce using rule 35 (multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive RPAREN .)


state 321

    (38) multiVariableDeclarationRecursive -> variableDeclaration COMMA . multiVariableDeclarationRecursive
    (37) multiVariableDeclarationRecursive -> . variableDeclaration
    (38) multiVariableDeclarationRecursive -> . variableDeclaration COMMA multiVariableDeclarationRecursive
    (33) variableDeclaration -> . simpleIdentifier DOISP type
    (34) variableDeclaration -> . simpleIdentifier
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

    variableDeclaration            shift and go to state 250
    multiVariableDeclarationRecursive shift and go to state 363
    simpleIdentifier               shift and go to state 261

state 322

    (207) anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType . optionalTypeConstraints optionalFunctionBody
    (203) optionalTypeConstraints -> . typeConstraints
    (204) optionalTypeConstraints -> .
    (210) typeConstraints -> . simpleIdentifier DOISP type
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
    ATRIBUICAO      reduce using rule 204 (optionalTypeConstraints -> .)
    LCHAVE          reduce using rule 204 (optionalTypeConstraints -> .)
    INCREMENTO      reduce using rule 204 (optionalTypeConstraints -> .)
    DECREMENTO      reduce using rule 204 (optionalTypeConstraints -> .)
    MENOR           reduce using rule 204 (optionalTypeConstraints -> .)
    LCCT            reduce using rule 204 (optionalTypeConstraints -> .)
    COLONCOLON      reduce using rule 204 (optionalTypeConstraints -> .)
    PONTO           reduce using rule 204 (optionalTypeConstraints -> .)
    LPAREN          reduce using rule 204 (optionalTypeConstraints -> .)
    RCHAVE          reduce using rule 204 (optionalTypeConstraints -> .)
    AS              reduce using rule 204 (optionalTypeConstraints -> .)
    MAISIGUAL       reduce using rule 204 (optionalTypeConstraints -> .)
    MENOSIGUAL      reduce using rule 204 (optionalTypeConstraints -> .)
    MULTIGUAL       reduce using rule 204 (optionalTypeConstraints -> .)
    DIVIGUAL        reduce using rule 204 (optionalTypeConstraints -> .)
    MODIGUAL        reduce using rule 204 (optionalTypeConstraints -> .)
    MULT            reduce using rule 204 (optionalTypeConstraints -> .)
    DIVIDE          reduce using rule 204 (optionalTypeConstraints -> .)
    MOD             reduce using rule 204 (optionalTypeConstraints -> .)
    PLUS            reduce using rule 204 (optionalTypeConstraints -> .)
    MINUS           reduce using rule 204 (optionalTypeConstraints -> .)
    PONTOPONTO      reduce using rule 204 (optionalTypeConstraints -> .)
    ELVIS           reduce using rule 204 (optionalTypeConstraints -> .)
    IN              reduce using rule 204 (optionalTypeConstraints -> .)
    NOT_IN          reduce using rule 204 (optionalTypeConstraints -> .)
    IS              reduce using rule 204 (optionalTypeConstraints -> .)
    NOT_IS          reduce using rule 204 (optionalTypeConstraints -> .)
    MAIOR           reduce using rule 204 (optionalTypeConstraints -> .)
    MENORIGUAL      reduce using rule 204 (optionalTypeConstraints -> .)
    MAIORIGUAL      reduce using rule 204 (optionalTypeConstraints -> .)
    DIFERENTE       reduce using rule 204 (optionalTypeConstraints -> .)
    IDENTIDADE      reduce using rule 204 (optionalTypeConstraints -> .)
    IGUALDADE       reduce using rule 204 (optionalTypeConstraints -> .)
    SEMIDENTIDADE   reduce using rule 204 (optionalTypeConstraints -> .)
    AND             reduce using rule 204 (optionalTypeConstraints -> .)
    OR              reduce using rule 204 (optionalTypeConstraints -> .)
    FUN             reduce using rule 204 (optionalTypeConstraints -> .)
    FOR             reduce using rule 204 (optionalTypeConstraints -> .)
    WHILE           reduce using rule 204 (optionalTypeConstraints -> .)
    DO              reduce using rule 204 (optionalTypeConstraints -> .)
    LITERAL_STRING  reduce using rule 204 (optionalTypeConstraints -> .)
    IF              reduce using rule 204 (optionalTypeConstraints -> .)
    RETURN          reduce using rule 204 (optionalTypeConstraints -> .)
    RETURN_AT       reduce using rule 204 (optionalTypeConstraints -> .)
    CONTINUE        reduce using rule 204 (optionalTypeConstraints -> .)
    CONTINUE_AT     reduce using rule 204 (optionalTypeConstraints -> .)
    BREAK           reduce using rule 204 (optionalTypeConstraints -> .)
    BREAK_AT        reduce using rule 204 (optionalTypeConstraints -> .)
    NOT             reduce using rule 204 (optionalTypeConstraints -> .)
    SUSPEND         reduce using rule 204 (optionalTypeConstraints -> .)
    COMMA           reduce using rule 204 (optionalTypeConstraints -> .)
    RPAREN          reduce using rule 204 (optionalTypeConstraints -> .)
    RCCT            reduce using rule 204 (optionalTypeConstraints -> .)
    PV              reduce using rule 204 (optionalTypeConstraints -> .)
    ELSE            reduce using rule 204 (optionalTypeConstraints -> .)
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

  ! ID              [ reduce using rule 204 (optionalTypeConstraints -> .) ]
  ! CROSSINLINE     [ reduce using rule 204 (optionalTypeConstraints -> .) ]
  ! IMPORT          [ reduce using rule 204 (optionalTypeConstraints -> .) ]
  ! INIT            [ reduce using rule 204 (optionalTypeConstraints -> .) ]
  ! NOINLINE        [ reduce using rule 204 (optionalTypeConstraints -> .) ]
  ! OUT             [ reduce using rule 204 (optionalTypeConstraints -> .) ]
  ! VARARG          [ reduce using rule 204 (optionalTypeConstraints -> .) ]
  ! WHERE           [ reduce using rule 204 (optionalTypeConstraints -> .) ]
  ! OBJECT          [ reduce using rule 204 (optionalTypeConstraints -> .) ]
  ! CONST           [ reduce using rule 204 (optionalTypeConstraints -> .) ]
  ! CONSTRUCTOR     [ reduce using rule 204 (optionalTypeConstraints -> .) ]
  ! EOF             [ reduce using rule 204 (optionalTypeConstraints -> .) ]
  ! FALSE           [ reduce using rule 204 (optionalTypeConstraints -> .) ]
  ! FUNCTION        [ reduce using rule 204 (optionalTypeConstraints -> .) ]
  ! NULL            [ reduce using rule 204 (optionalTypeConstraints -> .) ]
  ! NULLABLE        [ reduce using rule 204 (optionalTypeConstraints -> .) ]
  ! NUMBER          [ reduce using rule 204 (optionalTypeConstraints -> .) ]
  ! OPERATOR        [ reduce using rule 204 (optionalTypeConstraints -> .) ]
  ! SMARTCAST       [ reduce using rule 204 (optionalTypeConstraints -> .) ]
  ! THIS            [ reduce using rule 204 (optionalTypeConstraints -> .) ]
  ! TRUE            [ reduce using rule 204 (optionalTypeConstraints -> .) ]
  ! VAL             [ reduce using rule 204 (optionalTypeConstraints -> .) ]
  ! VAR             [ reduce using rule 204 (optionalTypeConstraints -> .) ]
  ! WHEN            [ reduce using rule 204 (optionalTypeConstraints -> .) ]
  ! LONG            [ reduce using rule 204 (optionalTypeConstraints -> .) ]
  ! ARRAY           [ reduce using rule 204 (optionalTypeConstraints -> .) ]

    optionalTypeConstraints        shift and go to state 364
    typeConstraints                shift and go to state 365
    simpleIdentifier               shift and go to state 366

state 323

    (183) parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive . RPAREN

    RPAREN          shift and go to state 367


state 324

    (184) parametersWithOptionalType -> LPAREN RPAREN .

    DOISP           reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    ID              reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    CROSSINLINE     reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    IMPORT          reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    INIT            reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    NOINLINE        reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    OUT             reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    VARARG          reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    WHERE           reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    OBJECT          reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    CONST           reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    CONSTRUCTOR     reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    EOF             reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    FALSE           reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    FUNCTION        reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    NULL            reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    NULLABLE        reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    NUMBER          reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    OPERATOR        reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    SMARTCAST       reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    THIS            reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    TRUE            reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    VAL             reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    VAR             reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    WHEN            reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    LONG            reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    ARRAY           reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    ATRIBUICAO      reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    LCHAVE          reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    INCREMENTO      reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    DECREMENTO      reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    MENOR           reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    LCCT            reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    COLONCOLON      reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    PONTO           reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    LPAREN          reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    RCHAVE          reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    AS              reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    MAISIGUAL       reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    MENOSIGUAL      reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    MULTIGUAL       reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    DIVIGUAL        reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    MODIGUAL        reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    MULT            reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    MOD             reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    PLUS            reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    MINUS           reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    PONTOPONTO      reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    ELVIS           reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    IN              reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    NOT_IN          reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    IS              reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    NOT_IS          reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    MAIOR           reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    MENORIGUAL      reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    MAIORIGUAL      reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    DIFERENTE       reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    IDENTIDADE      reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    IGUALDADE       reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    SEMIDENTIDADE   reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    AND             reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    OR              reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    FUN             reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    FOR             reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    WHILE           reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    DO              reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    LITERAL_STRING  reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    IF              reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    RETURN          reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    RETURN_AT       reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    CONTINUE        reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    CONTINUE_AT     reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    BREAK           reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    BREAK_AT        reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    NOT             reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    SUSPEND         reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    COMMA           reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    RPAREN          reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    RCCT            reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    PV              reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)
    ELSE            reduce using rule 184 (parametersWithOptionalType -> LPAREN RPAREN .)


state 325

    (185) parametersWithOptionalTypeRecursive -> parameterWithOptionalType .
    (186) parametersWithOptionalTypeRecursive -> parameterWithOptionalType . COMMA parametersWithOptionalTypeRecursive COMMA

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 185 (parametersWithOptionalTypeRecursive -> parameterWithOptionalType .)
    COMMA           shift and go to state 368

  ! COMMA           [ reduce using rule 185 (parametersWithOptionalTypeRecursive -> parameterWithOptionalType .) ]


state 326

    (187) parameterWithOptionalType -> optionalParameterModifiers . simpleIdentifier optionalType
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

    simpleIdentifier               shift and go to state 369

state 327

    (188) optionalParameterModifiers -> parameterModifiers .

    ID              reduce using rule 188 (optionalParameterModifiers -> parameterModifiers .)
    CROSSINLINE     reduce using rule 188 (optionalParameterModifiers -> parameterModifiers .)
    IMPORT          reduce using rule 188 (optionalParameterModifiers -> parameterModifiers .)
    INIT            reduce using rule 188 (optionalParameterModifiers -> parameterModifiers .)
    NOINLINE        reduce using rule 188 (optionalParameterModifiers -> parameterModifiers .)
    OUT             reduce using rule 188 (optionalParameterModifiers -> parameterModifiers .)
    VARARG          reduce using rule 188 (optionalParameterModifiers -> parameterModifiers .)
    WHERE           reduce using rule 188 (optionalParameterModifiers -> parameterModifiers .)
    OBJECT          reduce using rule 188 (optionalParameterModifiers -> parameterModifiers .)
    CONST           reduce using rule 188 (optionalParameterModifiers -> parameterModifiers .)
    CONSTRUCTOR     reduce using rule 188 (optionalParameterModifiers -> parameterModifiers .)
    EOF             reduce using rule 188 (optionalParameterModifiers -> parameterModifiers .)
    FALSE           reduce using rule 188 (optionalParameterModifiers -> parameterModifiers .)
    FUNCTION        reduce using rule 188 (optionalParameterModifiers -> parameterModifiers .)
    NULL            reduce using rule 188 (optionalParameterModifiers -> parameterModifiers .)
    NULLABLE        reduce using rule 188 (optionalParameterModifiers -> parameterModifiers .)
    NUMBER          reduce using rule 188 (optionalParameterModifiers -> parameterModifiers .)
    OPERATOR        reduce using rule 188 (optionalParameterModifiers -> parameterModifiers .)
    SMARTCAST       reduce using rule 188 (optionalParameterModifiers -> parameterModifiers .)
    THIS            reduce using rule 188 (optionalParameterModifiers -> parameterModifiers .)
    TRUE            reduce using rule 188 (optionalParameterModifiers -> parameterModifiers .)
    VAL             reduce using rule 188 (optionalParameterModifiers -> parameterModifiers .)
    VAR             reduce using rule 188 (optionalParameterModifiers -> parameterModifiers .)
    WHEN            reduce using rule 188 (optionalParameterModifiers -> parameterModifiers .)
    LONG            reduce using rule 188 (optionalParameterModifiers -> parameterModifiers .)
    ARRAY           reduce using rule 188 (optionalParameterModifiers -> parameterModifiers .)


state 328

    (190) parameterModifiers -> VARARG .

    ID              reduce using rule 190 (parameterModifiers -> VARARG .)
    CROSSINLINE     reduce using rule 190 (parameterModifiers -> VARARG .)
    IMPORT          reduce using rule 190 (parameterModifiers -> VARARG .)
    INIT            reduce using rule 190 (parameterModifiers -> VARARG .)
    NOINLINE        reduce using rule 190 (parameterModifiers -> VARARG .)
    OUT             reduce using rule 190 (parameterModifiers -> VARARG .)
    VARARG          reduce using rule 190 (parameterModifiers -> VARARG .)
    WHERE           reduce using rule 190 (parameterModifiers -> VARARG .)
    OBJECT          reduce using rule 190 (parameterModifiers -> VARARG .)
    CONST           reduce using rule 190 (parameterModifiers -> VARARG .)
    CONSTRUCTOR     reduce using rule 190 (parameterModifiers -> VARARG .)
    EOF             reduce using rule 190 (parameterModifiers -> VARARG .)
    FALSE           reduce using rule 190 (parameterModifiers -> VARARG .)
    FUNCTION        reduce using rule 190 (parameterModifiers -> VARARG .)
    NULL            reduce using rule 190 (parameterModifiers -> VARARG .)
    NULLABLE        reduce using rule 190 (parameterModifiers -> VARARG .)
    NUMBER          reduce using rule 190 (parameterModifiers -> VARARG .)
    OPERATOR        reduce using rule 190 (parameterModifiers -> VARARG .)
    SMARTCAST       reduce using rule 190 (parameterModifiers -> VARARG .)
    THIS            reduce using rule 190 (parameterModifiers -> VARARG .)
    TRUE            reduce using rule 190 (parameterModifiers -> VARARG .)
    VAL             reduce using rule 190 (parameterModifiers -> VARARG .)
    VAR             reduce using rule 190 (parameterModifiers -> VARARG .)
    WHEN            reduce using rule 190 (parameterModifiers -> VARARG .)
    LONG            reduce using rule 190 (parameterModifiers -> VARARG .)
    ARRAY           reduce using rule 190 (parameterModifiers -> VARARG .)


state 329

    (191) parameterModifiers -> NOINLINE .

    ID              reduce using rule 191 (parameterModifiers -> NOINLINE .)
    CROSSINLINE     reduce using rule 191 (parameterModifiers -> NOINLINE .)
    IMPORT          reduce using rule 191 (parameterModifiers -> NOINLINE .)
    INIT            reduce using rule 191 (parameterModifiers -> NOINLINE .)
    NOINLINE        reduce using rule 191 (parameterModifiers -> NOINLINE .)
    OUT             reduce using rule 191 (parameterModifiers -> NOINLINE .)
    VARARG          reduce using rule 191 (parameterModifiers -> NOINLINE .)
    WHERE           reduce using rule 191 (parameterModifiers -> NOINLINE .)
    OBJECT          reduce using rule 191 (parameterModifiers -> NOINLINE .)
    CONST           reduce using rule 191 (parameterModifiers -> NOINLINE .)
    CONSTRUCTOR     reduce using rule 191 (parameterModifiers -> NOINLINE .)
    EOF             reduce using rule 191 (parameterModifiers -> NOINLINE .)
    FALSE           reduce using rule 191 (parameterModifiers -> NOINLINE .)
    FUNCTION        reduce using rule 191 (parameterModifiers -> NOINLINE .)
    NULL            reduce using rule 191 (parameterModifiers -> NOINLINE .)
    NULLABLE        reduce using rule 191 (parameterModifiers -> NOINLINE .)
    NUMBER          reduce using rule 191 (parameterModifiers -> NOINLINE .)
    OPERATOR        reduce using rule 191 (parameterModifiers -> NOINLINE .)
    SMARTCAST       reduce using rule 191 (parameterModifiers -> NOINLINE .)
    THIS            reduce using rule 191 (parameterModifiers -> NOINLINE .)
    TRUE            reduce using rule 191 (parameterModifiers -> NOINLINE .)
    VAL             reduce using rule 191 (parameterModifiers -> NOINLINE .)
    VAR             reduce using rule 191 (parameterModifiers -> NOINLINE .)
    WHEN            reduce using rule 191 (parameterModifiers -> NOINLINE .)
    LONG            reduce using rule 191 (parameterModifiers -> NOINLINE .)
    ARRAY           reduce using rule 191 (parameterModifiers -> NOINLINE .)


state 330

    (192) parameterModifiers -> CROSSINLINE .

    ID              reduce using rule 192 (parameterModifiers -> CROSSINLINE .)
    CROSSINLINE     reduce using rule 192 (parameterModifiers -> CROSSINLINE .)
    IMPORT          reduce using rule 192 (parameterModifiers -> CROSSINLINE .)
    INIT            reduce using rule 192 (parameterModifiers -> CROSSINLINE .)
    NOINLINE        reduce using rule 192 (parameterModifiers -> CROSSINLINE .)
    OUT             reduce using rule 192 (parameterModifiers -> CROSSINLINE .)
    VARARG          reduce using rule 192 (parameterModifiers -> CROSSINLINE .)
    WHERE           reduce using rule 192 (parameterModifiers -> CROSSINLINE .)
    OBJECT          reduce using rule 192 (parameterModifiers -> CROSSINLINE .)
    CONST           reduce using rule 192 (parameterModifiers -> CROSSINLINE .)
    CONSTRUCTOR     reduce using rule 192 (parameterModifiers -> CROSSINLINE .)
    EOF             reduce using rule 192 (parameterModifiers -> CROSSINLINE .)
    FALSE           reduce using rule 192 (parameterModifiers -> CROSSINLINE .)
    FUNCTION        reduce using rule 192 (parameterModifiers -> CROSSINLINE .)
    NULL            reduce using rule 192 (parameterModifiers -> CROSSINLINE .)
    NULLABLE        reduce using rule 192 (parameterModifiers -> CROSSINLINE .)
    NUMBER          reduce using rule 192 (parameterModifiers -> CROSSINLINE .)
    OPERATOR        reduce using rule 192 (parameterModifiers -> CROSSINLINE .)
    SMARTCAST       reduce using rule 192 (parameterModifiers -> CROSSINLINE .)
    THIS            reduce using rule 192 (parameterModifiers -> CROSSINLINE .)
    TRUE            reduce using rule 192 (parameterModifiers -> CROSSINLINE .)
    VAL             reduce using rule 192 (parameterModifiers -> CROSSINLINE .)
    VAR             reduce using rule 192 (parameterModifiers -> CROSSINLINE .)
    WHEN            reduce using rule 192 (parameterModifiers -> CROSSINLINE .)
    LONG            reduce using rule 192 (parameterModifiers -> CROSSINLINE .)
    ARRAY           reduce using rule 192 (parameterModifiers -> CROSSINLINE .)


state 331

    (17) propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO . expression optionalPv
    (12) expression -> . disjunction
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 86
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 136
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 370
    disjunction                    shift and go to state 69
    conjunction                    shift and go to state 79
    equality                       shift and go to state 84
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 107
    elvisExpression                shift and go to state 114
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    simpleIdentifier               shift and go to state 133
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120
    prefixUnaryExpression          shift and go to state 134
    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 135
    unaryPrefix                    shift and go to state 92
    primaryExpression              shift and go to state 82
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    typeModifier                   shift and go to state 115

state 332

    (18) typeParameters -> MENOR typeParameter typeParametersRecursive . optionalCOMMA MAIOR
    (21) optionalCOMMA -> . COMMA
    (22) optionalCOMMA -> .

    COMMA           shift and go to state 359
    MAIOR           reduce using rule 22 (optionalCOMMA -> .)

    optionalCOMMA                  shift and go to state 371

state 333

    (19) typeParametersRecursive -> COMMA . typeParameter
    (20) typeParametersRecursive -> COMMA . typeParameter typeParametersRecursive
    (23) typeParameter -> . simpleIdentifier
    (24) typeParameter -> . simpleIdentifier DOISP type
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

    typeParameter                  shift and go to state 372
    simpleIdentifier               shift and go to state 263

state 334

    (24) typeParameter -> simpleIdentifier DOISP . type
    (40) type -> . optionalTypeModifiers optype
    (41) optionalTypeModifiers -> . typeModifiers
    (42) optionalTypeModifiers -> .
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (48) typeModifier -> . SUSPEND

  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 42 (optionalTypeModifiers -> .)
    ID              reduce using rule 42 (optionalTypeModifiers -> .)
    CROSSINLINE     reduce using rule 42 (optionalTypeModifiers -> .)
    IMPORT          reduce using rule 42 (optionalTypeModifiers -> .)
    INIT            reduce using rule 42 (optionalTypeModifiers -> .)
    NOINLINE        reduce using rule 42 (optionalTypeModifiers -> .)
    OUT             reduce using rule 42 (optionalTypeModifiers -> .)
    VARARG          reduce using rule 42 (optionalTypeModifiers -> .)
    WHERE           reduce using rule 42 (optionalTypeModifiers -> .)
    OBJECT          reduce using rule 42 (optionalTypeModifiers -> .)
    CONST           reduce using rule 42 (optionalTypeModifiers -> .)
    CONSTRUCTOR     reduce using rule 42 (optionalTypeModifiers -> .)
    EOF             reduce using rule 42 (optionalTypeModifiers -> .)
    FALSE           reduce using rule 42 (optionalTypeModifiers -> .)
    FUNCTION        reduce using rule 42 (optionalTypeModifiers -> .)
    NULL            reduce using rule 42 (optionalTypeModifiers -> .)
    NULLABLE        reduce using rule 42 (optionalTypeModifiers -> .)
    NUMBER          reduce using rule 42 (optionalTypeModifiers -> .)
    OPERATOR        reduce using rule 42 (optionalTypeModifiers -> .)
    SMARTCAST       reduce using rule 42 (optionalTypeModifiers -> .)
    THIS            reduce using rule 42 (optionalTypeModifiers -> .)
    TRUE            reduce using rule 42 (optionalTypeModifiers -> .)
    VAL             reduce using rule 42 (optionalTypeModifiers -> .)
    VAR             reduce using rule 42 (optionalTypeModifiers -> .)
    WHEN            reduce using rule 42 (optionalTypeModifiers -> .)
    LONG            reduce using rule 42 (optionalTypeModifiers -> .)
    ARRAY           reduce using rule 42 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 42 (optionalTypeModifiers -> .) ]

    type                           shift and go to state 373
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 335

    (159) typeArguments -> MENOR typeArgumentsRecursive MAIOR .

    ATRIBUICAO      reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    RPAREN          reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    INCREMENTO      reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    DECREMENTO      reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MENOR           reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    LCCT            reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    COLONCOLON      reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    PONTO           reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    LPAREN          reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    RCHAVE          reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    AS              reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MAISIGUAL       reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MENOSIGUAL      reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MULTIGUAL       reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    DIVIGUAL        reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MODIGUAL        reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MULT            reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    DIVIDE          reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MOD             reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    PLUS            reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MINUS           reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    PONTOPONTO      reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    ID              reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    CROSSINLINE     reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    IMPORT          reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    INIT            reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    NOINLINE        reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    OUT             reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    VARARG          reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    WHERE           reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    OBJECT          reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    CONST           reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    CONSTRUCTOR     reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    EOF             reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    FALSE           reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    FUNCTION        reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    NULL            reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    NULLABLE        reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    NUMBER          reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    OPERATOR        reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    SMARTCAST       reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    THIS            reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    TRUE            reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    VAL             reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    VAR             reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    WHEN            reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    LONG            reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    ARRAY           reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    ELVIS           reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    IN              reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    NOT_IN          reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    IS              reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    NOT_IS          reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MAIOR           reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MENORIGUAL      reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MAIORIGUAL      reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    DIFERENTE       reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    IDENTIDADE      reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    IGUALDADE       reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    SEMIDENTIDADE   reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    AND             reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    OR              reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    FUN             reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    FOR             reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    WHILE           reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    DO              reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    LITERAL_STRING  reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    IF              reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    RETURN          reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    RETURN_AT       reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    CONTINUE        reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    CONTINUE_AT     reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    BREAK           reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    BREAK_AT        reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    NOT             reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    SUSPEND         reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    COMMA           reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    LCHAVE          reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    RCCT            reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    PV              reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    ELSE            reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    $end            reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    SETA            reduce using rule 159 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)


state 336

    (162) typeArgumentsRecursive -> typeProjection COMMA . typeArgumentsRecursive
    (161) typeArgumentsRecursive -> . typeProjection
    (162) typeArgumentsRecursive -> . typeProjection COMMA typeArgumentsRecursive
    (55) typeProjection -> . typeProjectionModifiers type
    (56) typeProjection -> . type
    (57) typeProjectionModifiers -> . typeProjection
    (58) typeProjectionModifiers -> . typeProjectionModifier typeProjectionModifiers
    (40) type -> . optionalTypeModifiers optype
    (49) typeProjectionModifier -> . varianceModifier
    (41) optionalTypeModifiers -> . typeModifiers
    (42) optionalTypeModifiers -> .
    (50) varianceModifier -> . IN
    (51) varianceModifier -> . OUT
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (48) typeModifier -> . SUSPEND

  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 42 (optionalTypeModifiers -> .)
    ID              reduce using rule 42 (optionalTypeModifiers -> .)
    CROSSINLINE     reduce using rule 42 (optionalTypeModifiers -> .)
    IMPORT          reduce using rule 42 (optionalTypeModifiers -> .)
    INIT            reduce using rule 42 (optionalTypeModifiers -> .)
    NOINLINE        reduce using rule 42 (optionalTypeModifiers -> .)
    VARARG          reduce using rule 42 (optionalTypeModifiers -> .)
    WHERE           reduce using rule 42 (optionalTypeModifiers -> .)
    OBJECT          reduce using rule 42 (optionalTypeModifiers -> .)
    CONST           reduce using rule 42 (optionalTypeModifiers -> .)
    CONSTRUCTOR     reduce using rule 42 (optionalTypeModifiers -> .)
    EOF             reduce using rule 42 (optionalTypeModifiers -> .)
    FALSE           reduce using rule 42 (optionalTypeModifiers -> .)
    FUNCTION        reduce using rule 42 (optionalTypeModifiers -> .)
    NULL            reduce using rule 42 (optionalTypeModifiers -> .)
    NULLABLE        reduce using rule 42 (optionalTypeModifiers -> .)
    NUMBER          reduce using rule 42 (optionalTypeModifiers -> .)
    OPERATOR        reduce using rule 42 (optionalTypeModifiers -> .)
    SMARTCAST       reduce using rule 42 (optionalTypeModifiers -> .)
    THIS            reduce using rule 42 (optionalTypeModifiers -> .)
    TRUE            reduce using rule 42 (optionalTypeModifiers -> .)
    VAL             reduce using rule 42 (optionalTypeModifiers -> .)
    VAR             reduce using rule 42 (optionalTypeModifiers -> .)
    WHEN            reduce using rule 42 (optionalTypeModifiers -> .)
    LONG            reduce using rule 42 (optionalTypeModifiers -> .)
    ARRAY           reduce using rule 42 (optionalTypeModifiers -> .)
    IN              shift and go to state 271
    OUT             shift and go to state 272
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 42 (optionalTypeModifiers -> .) ]
  ! OUT             [ reduce using rule 42 (optionalTypeModifiers -> .) ]

    typeProjection                 shift and go to state 266
    typeArgumentsRecursive         shift and go to state 374
    typeProjectionModifiers        shift and go to state 267
    type                           shift and go to state 268
    typeProjectionModifier         shift and go to state 269
    optionalTypeModifiers          shift and go to state 45
    varianceModifier               shift and go to state 270
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 337

    (55) typeProjection -> typeProjectionModifiers type .

    COMMA           reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    MAIOR           reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    SUSPEND         reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    LPAREN          reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    ID              reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    CROSSINLINE     reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    IMPORT          reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    INIT            reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    NOINLINE        reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    OUT             reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    VARARG          reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    WHERE           reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    OBJECT          reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    CONST           reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    CONSTRUCTOR     reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    EOF             reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    FALSE           reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    FUNCTION        reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    NULL            reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    NULLABLE        reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    NUMBER          reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    OPERATOR        reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    SMARTCAST       reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    THIS            reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    TRUE            reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    VAL             reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    VAR             reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    WHEN            reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    LONG            reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    ARRAY           reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)


state 338

    (58) typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .
    (55) typeProjection -> typeProjectionModifiers . type
    (40) type -> . optionalTypeModifiers optype
    (41) optionalTypeModifiers -> . typeModifiers
    (42) optionalTypeModifiers -> .
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (48) typeModifier -> . SUSPEND

  ! reduce/reduce conflict for LPAREN resolved using rule 42 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 42 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for ID resolved using rule 42 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 42 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for IMPORT resolved using rule 42 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for INIT resolved using rule 42 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 42 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for OUT resolved using rule 42 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for VARARG resolved using rule 42 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for WHERE resolved using rule 42 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for OBJECT resolved using rule 42 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for CONST resolved using rule 42 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 42 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for EOF resolved using rule 42 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for FALSE resolved using rule 42 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 42 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for NULL resolved using rule 42 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 42 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for NUMBER resolved using rule 42 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 42 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 42 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for THIS resolved using rule 42 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for TRUE resolved using rule 42 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for VAL resolved using rule 42 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for VAR resolved using rule 42 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for WHEN resolved using rule 42 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for LONG resolved using rule 42 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for ARRAY resolved using rule 42 (optionalTypeModifiers -> .)
  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 42 (optionalTypeModifiers -> .)
    ID              reduce using rule 42 (optionalTypeModifiers -> .)
    CROSSINLINE     reduce using rule 42 (optionalTypeModifiers -> .)
    IMPORT          reduce using rule 42 (optionalTypeModifiers -> .)
    INIT            reduce using rule 42 (optionalTypeModifiers -> .)
    NOINLINE        reduce using rule 42 (optionalTypeModifiers -> .)
    OUT             reduce using rule 42 (optionalTypeModifiers -> .)
    VARARG          reduce using rule 42 (optionalTypeModifiers -> .)
    WHERE           reduce using rule 42 (optionalTypeModifiers -> .)
    OBJECT          reduce using rule 42 (optionalTypeModifiers -> .)
    CONST           reduce using rule 42 (optionalTypeModifiers -> .)
    CONSTRUCTOR     reduce using rule 42 (optionalTypeModifiers -> .)
    EOF             reduce using rule 42 (optionalTypeModifiers -> .)
    FALSE           reduce using rule 42 (optionalTypeModifiers -> .)
    FUNCTION        reduce using rule 42 (optionalTypeModifiers -> .)
    NULL            reduce using rule 42 (optionalTypeModifiers -> .)
    NULLABLE        reduce using rule 42 (optionalTypeModifiers -> .)
    NUMBER          reduce using rule 42 (optionalTypeModifiers -> .)
    OPERATOR        reduce using rule 42 (optionalTypeModifiers -> .)
    SMARTCAST       reduce using rule 42 (optionalTypeModifiers -> .)
    THIS            reduce using rule 42 (optionalTypeModifiers -> .)
    TRUE            reduce using rule 42 (optionalTypeModifiers -> .)
    VAL             reduce using rule 42 (optionalTypeModifiers -> .)
    VAR             reduce using rule 42 (optionalTypeModifiers -> .)
    WHEN            reduce using rule 42 (optionalTypeModifiers -> .)
    LONG            reduce using rule 42 (optionalTypeModifiers -> .)
    ARRAY           reduce using rule 42 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! LPAREN          [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! ID              [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! CROSSINLINE     [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! IMPORT          [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! INIT            [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! NOINLINE        [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! OUT             [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! VARARG          [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! WHERE           [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! OBJECT          [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! CONST           [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! CONSTRUCTOR     [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! EOF             [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! FALSE           [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! FUNCTION        [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! NULL            [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! NULLABLE        [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! NUMBER          [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! OPERATOR        [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! SMARTCAST       [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! THIS            [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! TRUE            [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! VAL             [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! VAR             [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! WHEN            [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! LONG            [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! ARRAY           [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! SUSPEND         [ reduce using rule 42 (optionalTypeModifiers -> .) ]

    type                           shift and go to state 337
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 339

    (57) typeProjectionModifiers -> typeProjection .

    SUSPEND         reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    LPAREN          reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    ID              reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    CROSSINLINE     reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    IMPORT          reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    INIT            reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    NOINLINE        reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    OUT             reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    VARARG          reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    WHERE           reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    OBJECT          reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    CONST           reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    CONSTRUCTOR     reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    EOF             reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    FALSE           reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    FUNCTION        reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    NULL            reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    NULLABLE        reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    NUMBER          reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    OPERATOR        reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    SMARTCAST       reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    THIS            reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    TRUE            reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    VAL             reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    VAR             reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    WHEN            reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    LONG            reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    ARRAY           reduce using rule 57 (typeProjectionModifiers -> typeProjection .)


state 340

    (146) indexingSuffix -> LCCT indexingSuffixRecursive RCCT .

    ATRIBUICAO      reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    RPAREN          reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    INCREMENTO      reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    DECREMENTO      reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MENOR           reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    LCCT            reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    COLONCOLON      reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    PONTO           reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    LPAREN          reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    RCHAVE          reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    AS              reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MAISIGUAL       reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MENOSIGUAL      reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MULTIGUAL       reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    DIVIGUAL        reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MODIGUAL        reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MULT            reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    DIVIDE          reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MOD             reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    PLUS            reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MINUS           reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    PONTOPONTO      reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    ID              reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    CROSSINLINE     reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    IMPORT          reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    INIT            reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    NOINLINE        reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    OUT             reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    VARARG          reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    WHERE           reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    OBJECT          reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    CONST           reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    CONSTRUCTOR     reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    EOF             reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    FALSE           reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    FUNCTION        reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    NULL            reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    NULLABLE        reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    NUMBER          reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    OPERATOR        reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    SMARTCAST       reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    THIS            reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    TRUE            reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    VAL             reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    VAR             reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    WHEN            reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    LONG            reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    ARRAY           reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    ELVIS           reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    IN              reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    NOT_IN          reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    IS              reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    NOT_IS          reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MAIOR           reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MENORIGUAL      reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MAIORIGUAL      reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    DIFERENTE       reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    IDENTIDADE      reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    IGUALDADE       reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    SEMIDENTIDADE   reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    AND             reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    OR              reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    FUN             reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    FOR             reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    WHILE           reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    DO              reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    LITERAL_STRING  reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    IF              reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    RETURN          reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    RETURN_AT       reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    CONTINUE        reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    CONTINUE_AT     reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    BREAK           reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    BREAK_AT        reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    NOT             reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    SUSPEND         reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    COMMA           reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    LCHAVE          reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    RCCT            reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    PV              reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    ELSE            reduce using rule 146 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)


state 341

    (149) indexingSuffixRecursive -> expression COMMA . indexingSuffixRecursive
    (148) indexingSuffixRecursive -> . expression
    (149) indexingSuffixRecursive -> . expression COMMA indexingSuffixRecursive
    (12) expression -> . disjunction
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 86
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 136
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 275
    indexingSuffixRecursive        shift and go to state 375
    disjunction                    shift and go to state 69
    conjunction                    shift and go to state 79
    equality                       shift and go to state 84
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 107
    elvisExpression                shift and go to state 114
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    simpleIdentifier               shift and go to state 133
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120
    prefixUnaryExpression          shift and go to state 134
    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 135
    unaryPrefix                    shift and go to state 92
    primaryExpression              shift and go to state 82
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    typeModifier                   shift and go to state 115

state 342

    (150) navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .

    ATRIBUICAO      reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    RPAREN          reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    INCREMENTO      reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DECREMENTO      reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MENOR           reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    LCCT            reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    COLONCOLON      reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    PONTO           reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    LPAREN          reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    RCHAVE          reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    AS              reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MAISIGUAL       reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MENOSIGUAL      reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MULTIGUAL       reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DIVIGUAL        reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MODIGUAL        reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MULT            reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DIVIDE          reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MOD             reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    PLUS            reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MINUS           reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    PONTOPONTO      reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    ID              reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    CROSSINLINE     reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IMPORT          reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    INIT            reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NOINLINE        reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    OUT             reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    VARARG          reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    WHERE           reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    OBJECT          reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    CONST           reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    CONSTRUCTOR     reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    EOF             reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    FALSE           reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    FUNCTION        reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NULL            reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NULLABLE        reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NUMBER          reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    OPERATOR        reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    SMARTCAST       reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    THIS            reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    TRUE            reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    VAL             reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    VAR             reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    WHEN            reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    LONG            reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    ARRAY           reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    ELVIS           reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IN              reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NOT_IN          reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IS              reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NOT_IS          reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MAIOR           reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MENORIGUAL      reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MAIORIGUAL      reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DIFERENTE       reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IDENTIDADE      reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IGUALDADE       reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    SEMIDENTIDADE   reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    AND             reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    OR              reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    FUN             reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    FOR             reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    WHILE           reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DO              reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    LITERAL_STRING  reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IF              reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    RETURN          reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    RETURN_AT       reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    CONTINUE        reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    CONTINUE_AT     reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    BREAK           reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    BREAK_AT        reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NOT             reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    SUSPEND         reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    COMMA           reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    LCHAVE          reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    RCCT            reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    PV              reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    ELSE            reduce using rule 150 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)


state 343

    (151) navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .

    ATRIBUICAO      reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    RPAREN          reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    INCREMENTO      reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DECREMENTO      reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MENOR           reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    LCCT            reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    COLONCOLON      reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    PONTO           reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    LPAREN          reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    RCHAVE          reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    AS              reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MAISIGUAL       reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MENOSIGUAL      reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MULTIGUAL       reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DIVIGUAL        reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MODIGUAL        reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MULT            reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DIVIDE          reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MOD             reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    PLUS            reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MINUS           reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    PONTOPONTO      reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    ID              reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    CROSSINLINE     reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IMPORT          reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    INIT            reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NOINLINE        reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    OUT             reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    VARARG          reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    WHERE           reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    OBJECT          reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    CONST           reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    CONSTRUCTOR     reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    EOF             reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    FALSE           reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    FUNCTION        reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NULL            reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NULLABLE        reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NUMBER          reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    OPERATOR        reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    SMARTCAST       reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    THIS            reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    TRUE            reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    VAL             reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    VAR             reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    WHEN            reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    LONG            reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    ARRAY           reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    ELVIS           reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IN              reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NOT_IN          reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IS              reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NOT_IS          reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MAIOR           reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MENORIGUAL      reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MAIORIGUAL      reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DIFERENTE       reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IDENTIDADE      reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IGUALDADE       reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    SEMIDENTIDADE   reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    AND             reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    OR              reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    FUN             reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    FOR             reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    WHILE           reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DO              reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    LITERAL_STRING  reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IF              reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    RETURN          reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    RETURN_AT       reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    CONTINUE        reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    CONTINUE_AT     reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    BREAK           reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    BREAK_AT        reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NOT             reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    SUSPEND         reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    COMMA           reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    LCHAVE          reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    RCCT            reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    PV              reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    ELSE            reduce using rule 151 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)


state 344

    (85) forStatement -> FOR LPAREN genericVariableDeclaration IN . expression RPAREN optionalControlStructureBody
    (12) expression -> . disjunction
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 86
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 136
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 376
    disjunction                    shift and go to state 69
    conjunction                    shift and go to state 79
    equality                       shift and go to state 84
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 107
    elvisExpression                shift and go to state 114
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    simpleIdentifier               shift and go to state 133
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120
    prefixUnaryExpression          shift and go to state 134
    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 135
    unaryPrefix                    shift and go to state 92
    primaryExpression              shift and go to state 82
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    typeModifier                   shift and go to state 115

state 345

    (86) whileStatement -> WHILE LPAREN expression RPAREN . controlStructureBody
    (87) whileStatement -> WHILE LPAREN expression RPAREN . PV
    (77) controlStructureBody -> . block
    (78) controlStructureBody -> . statement
    (79) block -> . LCHAVE statements RCHAVE
    (72) statement -> . functionDeclaration
    (73) statement -> . assignment
    (74) statement -> . loopStatement
    (75) statement -> . expression
    (76) statement -> . propertyDeclaration
    (7) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (90) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (91) assignment -> . assignableExpression assignmentAndOperator expression
    (80) loopStatement -> . forStatement
    (81) loopStatement -> . whileStatement
    (82) loopStatement -> . doWhileStatement
    (12) expression -> . disjunction
    (17) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (136) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (137) directlyAssignableExpression -> . simpleIdentifier
    (138) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (140) assignableExpression -> . prefixUnaryExpression
    (141) assignableExpression -> . parenthesizedAssignableExpression
    (85) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody
    (86) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (87) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (88) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (89) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (13) varOrVal -> . VAR
    (14) varOrVal -> . VAL
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (139) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (142) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (69) receiverType -> . typeModifier parenthesizedType
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (48) typeModifier -> . SUSPEND
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type

    PV              shift and go to state 378
    LCHAVE          shift and go to state 43
    FUN             shift and go to state 62
    FOR             shift and go to state 75
    WHILE           shift and go to state 77
    DO              shift and go to state 78
    VAR             shift and go to state 80
    VAL             shift and go to state 81
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 76
    LITERAL_STRING  shift and go to state 86
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 60
    controlStructureBody           shift and go to state 377
    block                          shift and go to state 181
    statement                      shift and go to state 182
    functionDeclaration            shift and go to state 57
    assignment                     shift and go to state 58
    loopStatement                  shift and go to state 59
    propertyDeclaration            shift and go to state 61
    simpleIdentifier               shift and go to state 63
    directlyAssignableExpression   shift and go to state 64
    assignableExpression           shift and go to state 65
    forStatement                   shift and go to state 66
    whileStatement                 shift and go to state 67
    doWhileStatement               shift and go to state 68
    disjunction                    shift and go to state 69
    varOrVal                       shift and go to state 70
    postfixUnaryExpression         shift and go to state 71
    parenthesizedDirectlyAssignableExpression shift and go to state 72
    prefixUnaryExpression          shift and go to state 73
    parenthesizedAssignableExpression shift and go to state 74
    conjunction                    shift and go to state 79
    primaryExpression              shift and go to state 82
    prefixUnaryExpressionRecursive shift and go to state 83
    equality                       shift and go to state 84
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    unaryPrefix                    shift and go to state 92
    comparison                     shift and go to state 93
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    infixOperation                 shift and go to state 107
    receiverType                   shift and go to state 108
    elvisExpression                shift and go to state 114
    typeModifier                   shift and go to state 115
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120

state 346

    (88) doWhileStatement -> DO controlStructureBody WHILE LPAREN . expression RPAREN
    (12) expression -> . disjunction
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 86
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 136
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 379
    disjunction                    shift and go to state 69
    conjunction                    shift and go to state 79
    equality                       shift and go to state 84
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 107
    elvisExpression                shift and go to state 114
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    simpleIdentifier               shift and go to state 133
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120
    prefixUnaryExpression          shift and go to state 134
    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 135
    unaryPrefix                    shift and go to state 92
    primaryExpression              shift and go to state 82
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    typeModifier                   shift and go to state 115

state 347

    (89) doWhileStatement -> DO WHILE LPAREN expression . RPAREN
    (86) whileStatement -> WHILE LPAREN expression . RPAREN controlStructureBody
    (87) whileStatement -> WHILE LPAREN expression . RPAREN PV
    (219) jumpExpression -> expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 380
    PLUS            reduce using rule 219 (jumpExpression -> expression .)
    MINUS           reduce using rule 219 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 219 (jumpExpression -> expression .)
    ID              reduce using rule 219 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 219 (jumpExpression -> expression .)
    IMPORT          reduce using rule 219 (jumpExpression -> expression .)
    INIT            reduce using rule 219 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 219 (jumpExpression -> expression .)
    OUT             reduce using rule 219 (jumpExpression -> expression .)
    VARARG          reduce using rule 219 (jumpExpression -> expression .)
    WHERE           reduce using rule 219 (jumpExpression -> expression .)
    OBJECT          reduce using rule 219 (jumpExpression -> expression .)
    CONST           reduce using rule 219 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 219 (jumpExpression -> expression .)
    EOF             reduce using rule 219 (jumpExpression -> expression .)
    FALSE           reduce using rule 219 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 219 (jumpExpression -> expression .)
    NULL            reduce using rule 219 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 219 (jumpExpression -> expression .)
    NUMBER          reduce using rule 219 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 219 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 219 (jumpExpression -> expression .)
    THIS            reduce using rule 219 (jumpExpression -> expression .)
    TRUE            reduce using rule 219 (jumpExpression -> expression .)
    VAL             reduce using rule 219 (jumpExpression -> expression .)
    VAR             reduce using rule 219 (jumpExpression -> expression .)
    WHEN            reduce using rule 219 (jumpExpression -> expression .)
    LONG            reduce using rule 219 (jumpExpression -> expression .)
    ARRAY           reduce using rule 219 (jumpExpression -> expression .)
    ELVIS           reduce using rule 219 (jumpExpression -> expression .)
    IN              reduce using rule 219 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 219 (jumpExpression -> expression .)
    IS              reduce using rule 219 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 219 (jumpExpression -> expression .)
    MENOR           reduce using rule 219 (jumpExpression -> expression .)
    MAIOR           reduce using rule 219 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 219 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 219 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 219 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 219 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 219 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 219 (jumpExpression -> expression .)
    AND             reduce using rule 219 (jumpExpression -> expression .)
    OR              reduce using rule 219 (jumpExpression -> expression .)
    INCREMENTO      reduce using rule 219 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 219 (jumpExpression -> expression .)
    LCCT            reduce using rule 219 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 219 (jumpExpression -> expression .)
    PONTO           reduce using rule 219 (jumpExpression -> expression .)
    LPAREN          reduce using rule 219 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 219 (jumpExpression -> expression .)
    AS              reduce using rule 219 (jumpExpression -> expression .)
    MULT            reduce using rule 219 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 219 (jumpExpression -> expression .)
    MOD             reduce using rule 219 (jumpExpression -> expression .)

  ! RPAREN          [ reduce using rule 219 (jumpExpression -> expression .) ]


state 348

    (152) callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .

    INCREMENTO      reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    DECREMENTO      reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MENOR           reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    LCCT            reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    COLONCOLON      reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    PONTO           reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    LPAREN          reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    RCHAVE          reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    AS              reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MAISIGUAL       reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MENOSIGUAL      reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MULTIGUAL       reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    DIVIGUAL        reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MODIGUAL        reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MULT            reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    DIVIDE          reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MOD             reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    PLUS            reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MINUS           reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    PONTOPONTO      reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    ID              reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    CROSSINLINE     reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    IMPORT          reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    INIT            reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    NOINLINE        reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    OUT             reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    VARARG          reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    WHERE           reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    OBJECT          reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    CONST           reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    CONSTRUCTOR     reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    EOF             reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    FALSE           reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    FUNCTION        reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    NULL            reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    NULLABLE        reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    NUMBER          reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    OPERATOR        reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    SMARTCAST       reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    THIS            reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    TRUE            reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    VAL             reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    VAR             reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    WHEN            reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    LONG            reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    ARRAY           reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    ELVIS           reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    IN              reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    NOT_IN          reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    IS              reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    NOT_IS          reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MAIOR           reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MENORIGUAL      reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MAIORIGUAL      reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    DIFERENTE       reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    IDENTIDADE      reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    IGUALDADE       reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    SEMIDENTIDADE   reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    AND             reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    OR              reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    FUN             reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    FOR             reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    WHILE           reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    DO              reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    LITERAL_STRING  reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    IF              reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    RETURN          reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    RETURN_AT       reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    CONTINUE        reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    CONTINUE_AT     reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    BREAK           reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    BREAK_AT        reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    NOT             reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    SUSPEND         reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    COMMA           reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    RPAREN          reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    LCHAVE          reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    RCCT            reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    PV              reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    ELSE            reduce using rule 152 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)


state 349

    (158) annotatedLambda -> lambdaLiteral .

    INCREMENTO      reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    DECREMENTO      reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    MENOR           reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    LCCT            reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    COLONCOLON      reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    PONTO           reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    LPAREN          reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    RCHAVE          reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    AS              reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    MAISIGUAL       reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    MENOSIGUAL      reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    MULTIGUAL       reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    DIVIGUAL        reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    MODIGUAL        reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    MULT            reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    DIVIDE          reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    MOD             reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    PLUS            reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    MINUS           reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    PONTOPONTO      reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    ID              reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    CROSSINLINE     reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    IMPORT          reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    INIT            reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    NOINLINE        reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    OUT             reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    VARARG          reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    WHERE           reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    OBJECT          reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    CONST           reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    CONSTRUCTOR     reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    EOF             reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    FALSE           reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    FUNCTION        reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    NULL            reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    NULLABLE        reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    NUMBER          reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    OPERATOR        reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    SMARTCAST       reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    THIS            reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    TRUE            reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    VAL             reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    VAR             reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    WHEN            reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    LONG            reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    ARRAY           reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    ELVIS           reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    IN              reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    NOT_IN          reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    IS              reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    NOT_IS          reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    MAIOR           reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    MENORIGUAL      reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    MAIORIGUAL      reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    DIFERENTE       reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    IDENTIDADE      reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    IGUALDADE       reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    SEMIDENTIDADE   reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    AND             reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    OR              reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    FUN             reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    FOR             reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    WHILE           reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    DO              reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    LITERAL_STRING  reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    IF              reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    RETURN          reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    RETURN_AT       reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    CONTINUE        reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    CONTINUE_AT     reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    BREAK           reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    BREAK_AT        reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    NOT             reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    SUSPEND         reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    COMMA           reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    RPAREN          reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    LCHAVE          reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    RCCT            reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    PV              reduce using rule 158 (annotatedLambda -> lambdaLiteral .)
    ELSE            reduce using rule 158 (annotatedLambda -> lambdaLiteral .)


state 350

    (165) valueArguments -> LPAREN RPAREN .

    RCHAVE          reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    INCREMENTO      reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    DECREMENTO      reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    MENOR           reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    LCCT            reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    COLONCOLON      reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    PONTO           reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    LPAREN          reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    AS              reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    MAISIGUAL       reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    MENOSIGUAL      reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    MULTIGUAL       reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    DIVIGUAL        reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    MODIGUAL        reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    MULT            reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    MOD             reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    PLUS            reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    MINUS           reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    PONTOPONTO      reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    ID              reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    CROSSINLINE     reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    IMPORT          reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    INIT            reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    NOINLINE        reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    OUT             reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    VARARG          reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    WHERE           reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    OBJECT          reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    CONST           reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    CONSTRUCTOR     reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    EOF             reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    FALSE           reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    FUNCTION        reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    NULL            reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    NULLABLE        reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    NUMBER          reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    OPERATOR        reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    SMARTCAST       reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    THIS            reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    TRUE            reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    VAL             reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    VAR             reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    WHEN            reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    LONG            reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    ARRAY           reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    ELVIS           reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    IN              reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    NOT_IN          reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    IS              reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    NOT_IS          reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    MAIOR           reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    MENORIGUAL      reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    MAIORIGUAL      reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    DIFERENTE       reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    IDENTIDADE      reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    IGUALDADE       reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    SEMIDENTIDADE   reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    AND             reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    OR              reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    FUN             reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    FOR             reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    WHILE           reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    DO              reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    LITERAL_STRING  reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    IF              reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    RETURN          reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    RETURN_AT       reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    CONTINUE        reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    CONTINUE_AT     reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    BREAK           reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    BREAK_AT        reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    NOT             reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    SUSPEND         reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    COMMA           reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    RPAREN          reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    LCHAVE          reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    RCCT            reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    PV              reduce using rule 165 (valueArguments -> LPAREN RPAREN .)
    ELSE            reduce using rule 165 (valueArguments -> LPAREN RPAREN .)


state 351

    (166) valueArguments -> LPAREN valueArgumentsRecursive . RPAREN

    RPAREN          shift and go to state 381


state 352

    (163) valueArgumentsRecursive -> valueArgument .
    (164) valueArgumentsRecursive -> valueArgument . COMMA valueArgumentsRecursive

    RPAREN          reduce using rule 163 (valueArgumentsRecursive -> valueArgument .)
    COMMA           shift and go to state 382


state 353

    (167) valueArgument -> simpleIdentifier . ATRIBUICAO MULT expression
    (168) valueArgument -> simpleIdentifier . ATRIBUICAO expression
    (171) primaryExpression -> simpleIdentifier .
    (126) label -> simpleIdentifier .

  ! reduce/reduce conflict for INCREMENTO resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OBJECT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONST resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for EOF resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FALSE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NULL resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NUMBER resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for THIS resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for TRUE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VAL resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VAR resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHEN resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LONG resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ARRAY resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 126 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 126 (label -> simpleIdentifier .)
    ATRIBUICAO      shift and go to state 383
    PONTOPONTO      reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    ELVIS           reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    IN              reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    NOT_IN          reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    IS              reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    NOT_IS          reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MENOR           reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MAIOR           reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    DIFERENTE       reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    IGUALDADE       reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    AND             reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    OR              reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    COMMA           reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    RPAREN          reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    PONTO           reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    AS              reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MULT            reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    DIVIDE          reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    MOD             reduce using rule 171 (primaryExpression -> simpleIdentifier .)
    INCREMENTO      reduce using rule 126 (label -> simpleIdentifier .)
    DECREMENTO      reduce using rule 126 (label -> simpleIdentifier .)
    MINUS           reduce using rule 126 (label -> simpleIdentifier .)
    PLUS            reduce using rule 126 (label -> simpleIdentifier .)
    NOT             reduce using rule 126 (label -> simpleIdentifier .)
    ID              reduce using rule 126 (label -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 126 (label -> simpleIdentifier .)
    IMPORT          reduce using rule 126 (label -> simpleIdentifier .)
    INIT            reduce using rule 126 (label -> simpleIdentifier .)
    NOINLINE        reduce using rule 126 (label -> simpleIdentifier .)
    OUT             reduce using rule 126 (label -> simpleIdentifier .)
    VARARG          reduce using rule 126 (label -> simpleIdentifier .)
    WHERE           reduce using rule 126 (label -> simpleIdentifier .)
    OBJECT          reduce using rule 126 (label -> simpleIdentifier .)
    CONST           reduce using rule 126 (label -> simpleIdentifier .)
    CONSTRUCTOR     reduce using rule 126 (label -> simpleIdentifier .)
    EOF             reduce using rule 126 (label -> simpleIdentifier .)
    FALSE           reduce using rule 126 (label -> simpleIdentifier .)
    FUNCTION        reduce using rule 126 (label -> simpleIdentifier .)
    NULL            reduce using rule 126 (label -> simpleIdentifier .)
    NULLABLE        reduce using rule 126 (label -> simpleIdentifier .)
    NUMBER          reduce using rule 126 (label -> simpleIdentifier .)
    OPERATOR        reduce using rule 126 (label -> simpleIdentifier .)
    SMARTCAST       reduce using rule 126 (label -> simpleIdentifier .)
    THIS            reduce using rule 126 (label -> simpleIdentifier .)
    TRUE            reduce using rule 126 (label -> simpleIdentifier .)
    VAL             reduce using rule 126 (label -> simpleIdentifier .)
    VAR             reduce using rule 126 (label -> simpleIdentifier .)
    WHEN            reduce using rule 126 (label -> simpleIdentifier .)
    LONG            reduce using rule 126 (label -> simpleIdentifier .)
    ARRAY           reduce using rule 126 (label -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 126 (label -> simpleIdentifier .)
    LPAREN          reduce using rule 126 (label -> simpleIdentifier .)
    LCCT            reduce using rule 126 (label -> simpleIdentifier .)
    IF              reduce using rule 126 (label -> simpleIdentifier .)
    RETURN          reduce using rule 126 (label -> simpleIdentifier .)
    RETURN_AT       reduce using rule 126 (label -> simpleIdentifier .)
    CONTINUE        reduce using rule 126 (label -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 126 (label -> simpleIdentifier .)
    BREAK           reduce using rule 126 (label -> simpleIdentifier .)
    BREAK_AT        reduce using rule 126 (label -> simpleIdentifier .)
    RCHAVE          reduce using rule 126 (label -> simpleIdentifier .)
    FUN             reduce using rule 126 (label -> simpleIdentifier .)
    SUSPEND         reduce using rule 126 (label -> simpleIdentifier .)
    COLONCOLON      reduce using rule 126 (label -> simpleIdentifier .)

  ! PLUS            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! OBJECT          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! CONST           [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! CONSTRUCTOR     [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! EOF             [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! FALSE           [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! FUNCTION        [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! NULL            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! NULLABLE        [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! NUMBER          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! OPERATOR        [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! SMARTCAST       [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! THIS            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! TRUE            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! VAL             [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! VAR             [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! WHEN            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! LONG            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! ARRAY           [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! INCREMENTO      [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]
  ! RCHAVE          [ reduce using rule 171 (primaryExpression -> simpleIdentifier .) ]


state 354

    (169) valueArgument -> expression .
    (219) jumpExpression -> expression .

  ! reduce/reduce conflict for COMMA resolved using rule 169 (valueArgument -> expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 169 (valueArgument -> expression .)
    COMMA           reduce using rule 169 (valueArgument -> expression .)
    RPAREN          reduce using rule 169 (valueArgument -> expression .)
    PLUS            reduce using rule 219 (jumpExpression -> expression .)
    MINUS           reduce using rule 219 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 219 (jumpExpression -> expression .)
    ID              reduce using rule 219 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 219 (jumpExpression -> expression .)
    IMPORT          reduce using rule 219 (jumpExpression -> expression .)
    INIT            reduce using rule 219 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 219 (jumpExpression -> expression .)
    OUT             reduce using rule 219 (jumpExpression -> expression .)
    VARARG          reduce using rule 219 (jumpExpression -> expression .)
    WHERE           reduce using rule 219 (jumpExpression -> expression .)
    OBJECT          reduce using rule 219 (jumpExpression -> expression .)
    CONST           reduce using rule 219 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 219 (jumpExpression -> expression .)
    EOF             reduce using rule 219 (jumpExpression -> expression .)
    FALSE           reduce using rule 219 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 219 (jumpExpression -> expression .)
    NULL            reduce using rule 219 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 219 (jumpExpression -> expression .)
    NUMBER          reduce using rule 219 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 219 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 219 (jumpExpression -> expression .)
    THIS            reduce using rule 219 (jumpExpression -> expression .)
    TRUE            reduce using rule 219 (jumpExpression -> expression .)
    VAL             reduce using rule 219 (jumpExpression -> expression .)
    VAR             reduce using rule 219 (jumpExpression -> expression .)
    WHEN            reduce using rule 219 (jumpExpression -> expression .)
    LONG            reduce using rule 219 (jumpExpression -> expression .)
    ARRAY           reduce using rule 219 (jumpExpression -> expression .)
    ELVIS           reduce using rule 219 (jumpExpression -> expression .)
    IN              reduce using rule 219 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 219 (jumpExpression -> expression .)
    IS              reduce using rule 219 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 219 (jumpExpression -> expression .)
    MENOR           reduce using rule 219 (jumpExpression -> expression .)
    MAIOR           reduce using rule 219 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 219 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 219 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 219 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 219 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 219 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 219 (jumpExpression -> expression .)
    AND             reduce using rule 219 (jumpExpression -> expression .)
    OR              reduce using rule 219 (jumpExpression -> expression .)
    INCREMENTO      reduce using rule 219 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 219 (jumpExpression -> expression .)
    LCCT            reduce using rule 219 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 219 (jumpExpression -> expression .)
    PONTO           reduce using rule 219 (jumpExpression -> expression .)
    LPAREN          reduce using rule 219 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 219 (jumpExpression -> expression .)
    AS              reduce using rule 219 (jumpExpression -> expression .)
    MULT            reduce using rule 219 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 219 (jumpExpression -> expression .)
    MOD             reduce using rule 219 (jumpExpression -> expression .)

  ! COMMA           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 219 (jumpExpression -> expression .) ]


state 355

    (182) collectionLiteralRecursive -> expression COMMA collectionLiteralRecursive .

    RCCT            reduce using rule 182 (collectionLiteralRecursive -> expression COMMA collectionLiteralRecursive .)


state 356

    (211) ifExpression -> IF LPAREN expression RPAREN . controlStructureBodyOrPV
    (212) ifExpression -> IF LPAREN expression RPAREN . optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (213) controlStructureBodyOrPV -> . controlStructureBody
    (214) controlStructureBodyOrPV -> . PV
    (83) optionalControlStructureBody -> . controlStructureBody
    (84) optionalControlStructureBody -> .
    (77) controlStructureBody -> . block
    (78) controlStructureBody -> . statement
    (79) block -> . LCHAVE statements RCHAVE
    (72) statement -> . functionDeclaration
    (73) statement -> . assignment
    (74) statement -> . loopStatement
    (75) statement -> . expression
    (76) statement -> . propertyDeclaration
    (7) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (90) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (91) assignment -> . assignableExpression assignmentAndOperator expression
    (80) loopStatement -> . forStatement
    (81) loopStatement -> . whileStatement
    (82) loopStatement -> . doWhileStatement
    (12) expression -> . disjunction
    (17) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (136) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (137) directlyAssignableExpression -> . simpleIdentifier
    (138) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (140) assignableExpression -> . prefixUnaryExpression
    (141) assignableExpression -> . parenthesizedAssignableExpression
    (85) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody
    (86) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (87) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (88) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (89) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (13) varOrVal -> . VAR
    (14) varOrVal -> . VAL
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (139) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (142) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (69) receiverType -> . typeModifier parenthesizedType
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (48) typeModifier -> . SUSPEND
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type

  ! shift/reduce conflict for PV resolved as shift
    PV              shift and go to state 387
    ELSE            reduce using rule 84 (optionalControlStructureBody -> .)
    LCHAVE          shift and go to state 43
    FUN             shift and go to state 62
    FOR             shift and go to state 75
    WHILE           shift and go to state 77
    DO              shift and go to state 78
    VAR             shift and go to state 80
    VAL             shift and go to state 81
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 76
    LITERAL_STRING  shift and go to state 86
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    SUSPEND         shift and go to state 48

  ! PV              [ reduce using rule 84 (optionalControlStructureBody -> .) ]

    expression                     shift and go to state 60
    controlStructureBodyOrPV       shift and go to state 384
    optionalControlStructureBody   shift and go to state 385
    controlStructureBody           shift and go to state 386
    block                          shift and go to state 181
    statement                      shift and go to state 182
    functionDeclaration            shift and go to state 57
    assignment                     shift and go to state 58
    loopStatement                  shift and go to state 59
    propertyDeclaration            shift and go to state 61
    simpleIdentifier               shift and go to state 63
    directlyAssignableExpression   shift and go to state 64
    assignableExpression           shift and go to state 65
    forStatement                   shift and go to state 66
    whileStatement                 shift and go to state 67
    doWhileStatement               shift and go to state 68
    disjunction                    shift and go to state 69
    varOrVal                       shift and go to state 70
    postfixUnaryExpression         shift and go to state 71
    parenthesizedDirectlyAssignableExpression shift and go to state 72
    prefixUnaryExpression          shift and go to state 73
    parenthesizedAssignableExpression shift and go to state 74
    conjunction                    shift and go to state 79
    primaryExpression              shift and go to state 82
    prefixUnaryExpressionRecursive shift and go to state 83
    equality                       shift and go to state 84
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    unaryPrefix                    shift and go to state 92
    comparison                     shift and go to state 93
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    infixOperation                 shift and go to state 107
    receiverType                   shift and go to state 108
    elvisExpression                shift and go to state 114
    typeModifier                   shift and go to state 115
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120

state 357

    (103) infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .

    FUN             reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    FOR             reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    WHILE           reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    DO              reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    VAR             reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    VAL             reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    ID              reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    CROSSINLINE     reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    IMPORT          reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    INIT            reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    NOINLINE        reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    OUT             reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    VARARG          reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    WHERE           reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    OBJECT          reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    CONST           reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    CONSTRUCTOR     reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    EOF             reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    FALSE           reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    FUNCTION        reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    NULL            reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    NULLABLE        reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    NUMBER          reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    OPERATOR        reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    SMARTCAST       reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    THIS            reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    TRUE            reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    WHEN            reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    LONG            reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    ARRAY           reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    LPAREN          reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    LITERAL_STRING  reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    LCCT            reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    IF              reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    RETURN          reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    RETURN_AT       reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    CONTINUE        reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    CONTINUE_AT     reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    BREAK           reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    BREAK_AT        reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    RCHAVE          reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    INCREMENTO      reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    DECREMENTO      reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MINUS           reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    PLUS            reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    NOT             reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    SUSPEND         reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    COLONCOLON      reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    LCHAVE          reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MENOR           reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    PONTO           reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    AS              reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MAISIGUAL       reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MENOSIGUAL      reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MULTIGUAL       reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    DIVIGUAL        reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MODIGUAL        reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MULT            reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    DIVIDE          reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MOD             reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    PONTOPONTO      reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    ELVIS           reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    IN              reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    NOT_IN          reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    IS              reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    NOT_IS          reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MAIOR           reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MENORIGUAL      reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MAIORIGUAL      reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    DIFERENTE       reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    IDENTIDADE      reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    IGUALDADE       reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    SEMIDENTIDADE   reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    AND             reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    OR              reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    COMMA           reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    RPAREN          reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    RCCT            reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    PV              reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    ELSE            reduce using rule 103 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)


state 358

    (67) functionTypeParameters -> LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA . RPAREN

    RPAREN          shift and go to state 388


state 359

    (21) optionalCOMMA -> COMMA .

    RPAREN          reduce using rule 21 (optionalCOMMA -> COMMA .)
    MAIOR           reduce using rule 21 (optionalCOMMA -> COMMA .)


state 360

    (64) parameterOrTypeRecursive -> COMMA optionalParameterOrType .
    (65) parameterOrTypeRecursive -> COMMA optionalParameterOrType . parameterOrTypeRecursive
    (64) parameterOrTypeRecursive -> . COMMA optionalParameterOrType
    (65) parameterOrTypeRecursive -> . COMMA optionalParameterOrType parameterOrTypeRecursive
    (66) parameterOrTypeRecursive -> .

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 64 (parameterOrTypeRecursive -> COMMA optionalParameterOrType .)
    RPAREN          reduce using rule 64 (parameterOrTypeRecursive -> COMMA optionalParameterOrType .)
    COMMA           shift and go to state 313

  ! COMMA           [ reduce using rule 64 (parameterOrTypeRecursive -> COMMA optionalParameterOrType .) ]
  ! COMMA           [ reduce using rule 66 (parameterOrTypeRecursive -> .) ]
  ! RPAREN          [ reduce using rule 66 (parameterOrTypeRecursive -> .) ]

    parameterOrTypeRecursive       shift and go to state 389

state 361

    (62) optionalParameterOrType -> type .

    COMMA           reduce using rule 62 (optionalParameterOrType -> type .)
    RPAREN          reduce using rule 62 (optionalParameterOrType -> type .)


state 362

    (59) functionType -> receiverType PONTO functionTypeParameters SETA . type
    (40) type -> . optionalTypeModifiers optype
    (41) optionalTypeModifiers -> . typeModifiers
    (42) optionalTypeModifiers -> .
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (48) typeModifier -> . SUSPEND

  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 42 (optionalTypeModifiers -> .)
    ID              reduce using rule 42 (optionalTypeModifiers -> .)
    CROSSINLINE     reduce using rule 42 (optionalTypeModifiers -> .)
    IMPORT          reduce using rule 42 (optionalTypeModifiers -> .)
    INIT            reduce using rule 42 (optionalTypeModifiers -> .)
    NOINLINE        reduce using rule 42 (optionalTypeModifiers -> .)
    OUT             reduce using rule 42 (optionalTypeModifiers -> .)
    VARARG          reduce using rule 42 (optionalTypeModifiers -> .)
    WHERE           reduce using rule 42 (optionalTypeModifiers -> .)
    OBJECT          reduce using rule 42 (optionalTypeModifiers -> .)
    CONST           reduce using rule 42 (optionalTypeModifiers -> .)
    CONSTRUCTOR     reduce using rule 42 (optionalTypeModifiers -> .)
    EOF             reduce using rule 42 (optionalTypeModifiers -> .)
    FALSE           reduce using rule 42 (optionalTypeModifiers -> .)
    FUNCTION        reduce using rule 42 (optionalTypeModifiers -> .)
    NULL            reduce using rule 42 (optionalTypeModifiers -> .)
    NULLABLE        reduce using rule 42 (optionalTypeModifiers -> .)
    NUMBER          reduce using rule 42 (optionalTypeModifiers -> .)
    OPERATOR        reduce using rule 42 (optionalTypeModifiers -> .)
    SMARTCAST       reduce using rule 42 (optionalTypeModifiers -> .)
    THIS            reduce using rule 42 (optionalTypeModifiers -> .)
    TRUE            reduce using rule 42 (optionalTypeModifiers -> .)
    VAL             reduce using rule 42 (optionalTypeModifiers -> .)
    VAR             reduce using rule 42 (optionalTypeModifiers -> .)
    WHEN            reduce using rule 42 (optionalTypeModifiers -> .)
    LONG            reduce using rule 42 (optionalTypeModifiers -> .)
    ARRAY           reduce using rule 42 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 42 (optionalTypeModifiers -> .) ]

    type                           shift and go to state 390
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 363

    (38) multiVariableDeclarationRecursive -> variableDeclaration COMMA multiVariableDeclarationRecursive .

    RPAREN          reduce using rule 38 (multiVariableDeclarationRecursive -> variableDeclaration COMMA multiVariableDeclarationRecursive .)


state 364

    (207) anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints . optionalFunctionBody
    (205) optionalFunctionBody -> . functionBody
    (206) optionalFunctionBody -> .
    (25) functionBody -> . block
    (26) functionBody -> . ATRIBUICAO expression
    (79) block -> . LCHAVE statements RCHAVE

  ! shift/reduce conflict for LCHAVE resolved as shift
    FUN             reduce using rule 206 (optionalFunctionBody -> .)
    FOR             reduce using rule 206 (optionalFunctionBody -> .)
    WHILE           reduce using rule 206 (optionalFunctionBody -> .)
    DO              reduce using rule 206 (optionalFunctionBody -> .)
    VAR             reduce using rule 206 (optionalFunctionBody -> .)
    VAL             reduce using rule 206 (optionalFunctionBody -> .)
    ID              reduce using rule 206 (optionalFunctionBody -> .)
    CROSSINLINE     reduce using rule 206 (optionalFunctionBody -> .)
    IMPORT          reduce using rule 206 (optionalFunctionBody -> .)
    INIT            reduce using rule 206 (optionalFunctionBody -> .)
    NOINLINE        reduce using rule 206 (optionalFunctionBody -> .)
    OUT             reduce using rule 206 (optionalFunctionBody -> .)
    VARARG          reduce using rule 206 (optionalFunctionBody -> .)
    WHERE           reduce using rule 206 (optionalFunctionBody -> .)
    OBJECT          reduce using rule 206 (optionalFunctionBody -> .)
    CONST           reduce using rule 206 (optionalFunctionBody -> .)
    CONSTRUCTOR     reduce using rule 206 (optionalFunctionBody -> .)
    EOF             reduce using rule 206 (optionalFunctionBody -> .)
    FALSE           reduce using rule 206 (optionalFunctionBody -> .)
    FUNCTION        reduce using rule 206 (optionalFunctionBody -> .)
    NULL            reduce using rule 206 (optionalFunctionBody -> .)
    NULLABLE        reduce using rule 206 (optionalFunctionBody -> .)
    NUMBER          reduce using rule 206 (optionalFunctionBody -> .)
    OPERATOR        reduce using rule 206 (optionalFunctionBody -> .)
    SMARTCAST       reduce using rule 206 (optionalFunctionBody -> .)
    THIS            reduce using rule 206 (optionalFunctionBody -> .)
    TRUE            reduce using rule 206 (optionalFunctionBody -> .)
    WHEN            reduce using rule 206 (optionalFunctionBody -> .)
    LONG            reduce using rule 206 (optionalFunctionBody -> .)
    ARRAY           reduce using rule 206 (optionalFunctionBody -> .)
    LPAREN          reduce using rule 206 (optionalFunctionBody -> .)
    LITERAL_STRING  reduce using rule 206 (optionalFunctionBody -> .)
    LCCT            reduce using rule 206 (optionalFunctionBody -> .)
    IF              reduce using rule 206 (optionalFunctionBody -> .)
    RETURN          reduce using rule 206 (optionalFunctionBody -> .)
    RETURN_AT       reduce using rule 206 (optionalFunctionBody -> .)
    CONTINUE        reduce using rule 206 (optionalFunctionBody -> .)
    CONTINUE_AT     reduce using rule 206 (optionalFunctionBody -> .)
    BREAK           reduce using rule 206 (optionalFunctionBody -> .)
    BREAK_AT        reduce using rule 206 (optionalFunctionBody -> .)
    RCHAVE          reduce using rule 206 (optionalFunctionBody -> .)
    INCREMENTO      reduce using rule 206 (optionalFunctionBody -> .)
    DECREMENTO      reduce using rule 206 (optionalFunctionBody -> .)
    MINUS           reduce using rule 206 (optionalFunctionBody -> .)
    PLUS            reduce using rule 206 (optionalFunctionBody -> .)
    NOT             reduce using rule 206 (optionalFunctionBody -> .)
    SUSPEND         reduce using rule 206 (optionalFunctionBody -> .)
    COLONCOLON      reduce using rule 206 (optionalFunctionBody -> .)
    MENOR           reduce using rule 206 (optionalFunctionBody -> .)
    PONTO           reduce using rule 206 (optionalFunctionBody -> .)
    AS              reduce using rule 206 (optionalFunctionBody -> .)
    MAISIGUAL       reduce using rule 206 (optionalFunctionBody -> .)
    MENOSIGUAL      reduce using rule 206 (optionalFunctionBody -> .)
    MULTIGUAL       reduce using rule 206 (optionalFunctionBody -> .)
    DIVIGUAL        reduce using rule 206 (optionalFunctionBody -> .)
    MODIGUAL        reduce using rule 206 (optionalFunctionBody -> .)
    MULT            reduce using rule 206 (optionalFunctionBody -> .)
    DIVIDE          reduce using rule 206 (optionalFunctionBody -> .)
    MOD             reduce using rule 206 (optionalFunctionBody -> .)
    PONTOPONTO      reduce using rule 206 (optionalFunctionBody -> .)
    ELVIS           reduce using rule 206 (optionalFunctionBody -> .)
    IN              reduce using rule 206 (optionalFunctionBody -> .)
    NOT_IN          reduce using rule 206 (optionalFunctionBody -> .)
    IS              reduce using rule 206 (optionalFunctionBody -> .)
    NOT_IS          reduce using rule 206 (optionalFunctionBody -> .)
    MAIOR           reduce using rule 206 (optionalFunctionBody -> .)
    MENORIGUAL      reduce using rule 206 (optionalFunctionBody -> .)
    MAIORIGUAL      reduce using rule 206 (optionalFunctionBody -> .)
    DIFERENTE       reduce using rule 206 (optionalFunctionBody -> .)
    IDENTIDADE      reduce using rule 206 (optionalFunctionBody -> .)
    IGUALDADE       reduce using rule 206 (optionalFunctionBody -> .)
    SEMIDENTIDADE   reduce using rule 206 (optionalFunctionBody -> .)
    AND             reduce using rule 206 (optionalFunctionBody -> .)
    OR              reduce using rule 206 (optionalFunctionBody -> .)
    COMMA           reduce using rule 206 (optionalFunctionBody -> .)
    RPAREN          reduce using rule 206 (optionalFunctionBody -> .)
    RCCT            reduce using rule 206 (optionalFunctionBody -> .)
    PV              reduce using rule 206 (optionalFunctionBody -> .)
    ELSE            reduce using rule 206 (optionalFunctionBody -> .)
    ATRIBUICAO      shift and go to state 394
    LCHAVE          shift and go to state 43

  ! LCHAVE          [ reduce using rule 206 (optionalFunctionBody -> .) ]

    optionalFunctionBody           shift and go to state 391
    functionBody                   shift and go to state 392
    block                          shift and go to state 393

state 365

    (203) optionalTypeConstraints -> typeConstraints .

    ATRIBUICAO      reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    LCHAVE          reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    INCREMENTO      reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    DECREMENTO      reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    MENOR           reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    LCCT            reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    COLONCOLON      reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    PONTO           reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    LPAREN          reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    RCHAVE          reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    AS              reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    MAISIGUAL       reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    MENOSIGUAL      reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    MULTIGUAL       reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    DIVIGUAL        reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    MODIGUAL        reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    MULT            reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    DIVIDE          reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    MOD             reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    PLUS            reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    MINUS           reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    PONTOPONTO      reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    ID              reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    CROSSINLINE     reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    IMPORT          reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    INIT            reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    NOINLINE        reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    OUT             reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    VARARG          reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    WHERE           reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    OBJECT          reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    CONST           reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    CONSTRUCTOR     reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    EOF             reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    FALSE           reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    FUNCTION        reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    NULL            reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    NULLABLE        reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    NUMBER          reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    OPERATOR        reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    SMARTCAST       reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    THIS            reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    TRUE            reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    VAL             reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    VAR             reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    WHEN            reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    LONG            reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    ARRAY           reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    ELVIS           reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    IN              reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    NOT_IN          reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    IS              reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    NOT_IS          reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    MAIOR           reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    MENORIGUAL      reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    MAIORIGUAL      reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    DIFERENTE       reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    IDENTIDADE      reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    IGUALDADE       reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    SEMIDENTIDADE   reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    AND             reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    OR              reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    FUN             reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    FOR             reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    WHILE           reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    DO              reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    LITERAL_STRING  reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    IF              reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    RETURN          reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    RETURN_AT       reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    CONTINUE        reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    CONTINUE_AT     reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    BREAK           reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    BREAK_AT        reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    NOT             reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    SUSPEND         reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    COMMA           reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    RPAREN          reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    RCCT            reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    PV              reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)
    ELSE            reduce using rule 203 (optionalTypeConstraints -> typeConstraints .)


state 366

    (210) typeConstraints -> simpleIdentifier . DOISP type

    DOISP           shift and go to state 395


state 367

    (183) parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .

    DOISP           reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    ID              reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    CROSSINLINE     reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    IMPORT          reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    INIT            reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    NOINLINE        reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    OUT             reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    VARARG          reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    WHERE           reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    OBJECT          reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    CONST           reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    CONSTRUCTOR     reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    EOF             reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    FALSE           reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    FUNCTION        reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    NULL            reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    NULLABLE        reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    NUMBER          reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    OPERATOR        reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    SMARTCAST       reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    THIS            reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    TRUE            reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    VAL             reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    VAR             reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    WHEN            reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    LONG            reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    ARRAY           reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    ATRIBUICAO      reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    LCHAVE          reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    INCREMENTO      reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    DECREMENTO      reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MENOR           reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    LCCT            reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    COLONCOLON      reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    PONTO           reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    LPAREN          reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    RCHAVE          reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    AS              reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MAISIGUAL       reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MENOSIGUAL      reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MULTIGUAL       reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    DIVIGUAL        reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MODIGUAL        reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MULT            reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    DIVIDE          reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MOD             reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    PLUS            reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MINUS           reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    PONTOPONTO      reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    ELVIS           reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    IN              reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    NOT_IN          reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    IS              reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    NOT_IS          reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MAIOR           reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MENORIGUAL      reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MAIORIGUAL      reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    DIFERENTE       reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    IDENTIDADE      reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    IGUALDADE       reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    SEMIDENTIDADE   reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    AND             reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    OR              reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    FUN             reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    FOR             reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    WHILE           reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    DO              reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    LITERAL_STRING  reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    IF              reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    RETURN          reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    RETURN_AT       reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    CONTINUE        reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    CONTINUE_AT     reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    BREAK           reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    BREAK_AT        reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    NOT             reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    SUSPEND         reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    COMMA           reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    RPAREN          reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    RCCT            reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    PV              reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    ELSE            reduce using rule 183 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)


state 368

    (186) parametersWithOptionalTypeRecursive -> parameterWithOptionalType COMMA . parametersWithOptionalTypeRecursive COMMA
    (185) parametersWithOptionalTypeRecursive -> . parameterWithOptionalType
    (186) parametersWithOptionalTypeRecursive -> . parameterWithOptionalType COMMA parametersWithOptionalTypeRecursive COMMA
    (187) parameterWithOptionalType -> . optionalParameterModifiers simpleIdentifier optionalType
    (188) optionalParameterModifiers -> . parameterModifiers
    (189) optionalParameterModifiers -> .
    (190) parameterModifiers -> . VARARG
    (191) parameterModifiers -> . NOINLINE
    (192) parameterModifiers -> . CROSSINLINE

  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
    ID              reduce using rule 189 (optionalParameterModifiers -> .)
    IMPORT          reduce using rule 189 (optionalParameterModifiers -> .)
    INIT            reduce using rule 189 (optionalParameterModifiers -> .)
    OUT             reduce using rule 189 (optionalParameterModifiers -> .)
    WHERE           reduce using rule 189 (optionalParameterModifiers -> .)
    OBJECT          reduce using rule 189 (optionalParameterModifiers -> .)
    CONST           reduce using rule 189 (optionalParameterModifiers -> .)
    CONSTRUCTOR     reduce using rule 189 (optionalParameterModifiers -> .)
    EOF             reduce using rule 189 (optionalParameterModifiers -> .)
    FALSE           reduce using rule 189 (optionalParameterModifiers -> .)
    FUNCTION        reduce using rule 189 (optionalParameterModifiers -> .)
    NULL            reduce using rule 189 (optionalParameterModifiers -> .)
    NULLABLE        reduce using rule 189 (optionalParameterModifiers -> .)
    NUMBER          reduce using rule 189 (optionalParameterModifiers -> .)
    OPERATOR        reduce using rule 189 (optionalParameterModifiers -> .)
    SMARTCAST       reduce using rule 189 (optionalParameterModifiers -> .)
    THIS            reduce using rule 189 (optionalParameterModifiers -> .)
    TRUE            reduce using rule 189 (optionalParameterModifiers -> .)
    VAL             reduce using rule 189 (optionalParameterModifiers -> .)
    VAR             reduce using rule 189 (optionalParameterModifiers -> .)
    WHEN            reduce using rule 189 (optionalParameterModifiers -> .)
    LONG            reduce using rule 189 (optionalParameterModifiers -> .)
    ARRAY           reduce using rule 189 (optionalParameterModifiers -> .)
    VARARG          shift and go to state 328
    NOINLINE        shift and go to state 329
    CROSSINLINE     shift and go to state 330

  ! CROSSINLINE     [ reduce using rule 189 (optionalParameterModifiers -> .) ]
  ! NOINLINE        [ reduce using rule 189 (optionalParameterModifiers -> .) ]
  ! VARARG          [ reduce using rule 189 (optionalParameterModifiers -> .) ]

    parameterWithOptionalType      shift and go to state 325
    parametersWithOptionalTypeRecursive shift and go to state 396
    optionalParameterModifiers     shift and go to state 326
    parameterModifiers             shift and go to state 327

state 369

    (187) parameterWithOptionalType -> optionalParameterModifiers simpleIdentifier . optionalType
    (3) optionalType -> . DOISP type
    (4) optionalType -> .

    DOISP           shift and go to state 35
    COMMA           reduce using rule 4 (optionalType -> .)
    RPAREN          reduce using rule 4 (optionalType -> .)

    optionalType                   shift and go to state 397

state 370

    (17) propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression . optionalPv
    (219) jumpExpression -> expression .
    (8) optionalPv -> . PV
    (9) optionalPv -> .

  ! shift/reduce conflict for PV resolved as shift
  ! reduce/reduce conflict for FUN resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for FOR resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for DO resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for VAR resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for VAL resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for ID resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for IMPORT resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for INIT resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for OUT resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for VARARG resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for WHERE resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for OBJECT resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for CONST resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for EOF resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for FALSE resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for NULL resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for NUMBER resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for THIS resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for TRUE resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for WHEN resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for LONG resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for ARRAY resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for LPAREN resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for LCCT resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for IF resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for RETURN resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for PLUS resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for NOT resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for MENOR resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for PONTO resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for AS resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for MULT resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for MOD resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for ELVIS resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for IN resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for IS resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for AND resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for OR resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for RCCT resolved using rule 9 (optionalPv -> .)
  ! shift/reduce conflict for PV resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 9 (optionalPv -> .)
    PV              shift and go to state 399
    FUN             reduce using rule 9 (optionalPv -> .)
    FOR             reduce using rule 9 (optionalPv -> .)
    WHILE           reduce using rule 9 (optionalPv -> .)
    DO              reduce using rule 9 (optionalPv -> .)
    VAR             reduce using rule 9 (optionalPv -> .)
    VAL             reduce using rule 9 (optionalPv -> .)
    ID              reduce using rule 9 (optionalPv -> .)
    CROSSINLINE     reduce using rule 9 (optionalPv -> .)
    IMPORT          reduce using rule 9 (optionalPv -> .)
    INIT            reduce using rule 9 (optionalPv -> .)
    NOINLINE        reduce using rule 9 (optionalPv -> .)
    OUT             reduce using rule 9 (optionalPv -> .)
    VARARG          reduce using rule 9 (optionalPv -> .)
    WHERE           reduce using rule 9 (optionalPv -> .)
    OBJECT          reduce using rule 9 (optionalPv -> .)
    CONST           reduce using rule 9 (optionalPv -> .)
    CONSTRUCTOR     reduce using rule 9 (optionalPv -> .)
    EOF             reduce using rule 9 (optionalPv -> .)
    FALSE           reduce using rule 9 (optionalPv -> .)
    FUNCTION        reduce using rule 9 (optionalPv -> .)
    NULL            reduce using rule 9 (optionalPv -> .)
    NULLABLE        reduce using rule 9 (optionalPv -> .)
    NUMBER          reduce using rule 9 (optionalPv -> .)
    OPERATOR        reduce using rule 9 (optionalPv -> .)
    SMARTCAST       reduce using rule 9 (optionalPv -> .)
    THIS            reduce using rule 9 (optionalPv -> .)
    TRUE            reduce using rule 9 (optionalPv -> .)
    WHEN            reduce using rule 9 (optionalPv -> .)
    LONG            reduce using rule 9 (optionalPv -> .)
    ARRAY           reduce using rule 9 (optionalPv -> .)
    LPAREN          reduce using rule 9 (optionalPv -> .)
    LITERAL_STRING  reduce using rule 9 (optionalPv -> .)
    LCCT            reduce using rule 9 (optionalPv -> .)
    IF              reduce using rule 9 (optionalPv -> .)
    RETURN          reduce using rule 9 (optionalPv -> .)
    RETURN_AT       reduce using rule 9 (optionalPv -> .)
    CONTINUE        reduce using rule 9 (optionalPv -> .)
    CONTINUE_AT     reduce using rule 9 (optionalPv -> .)
    BREAK           reduce using rule 9 (optionalPv -> .)
    BREAK_AT        reduce using rule 9 (optionalPv -> .)
    RCHAVE          reduce using rule 9 (optionalPv -> .)
    INCREMENTO      reduce using rule 9 (optionalPv -> .)
    DECREMENTO      reduce using rule 9 (optionalPv -> .)
    MINUS           reduce using rule 9 (optionalPv -> .)
    PLUS            reduce using rule 9 (optionalPv -> .)
    NOT             reduce using rule 9 (optionalPv -> .)
    SUSPEND         reduce using rule 9 (optionalPv -> .)
    COLONCOLON      reduce using rule 9 (optionalPv -> .)
    LCHAVE          reduce using rule 9 (optionalPv -> .)
    MENOR           reduce using rule 9 (optionalPv -> .)
    PONTO           reduce using rule 9 (optionalPv -> .)
    AS              reduce using rule 9 (optionalPv -> .)
    MAISIGUAL       reduce using rule 9 (optionalPv -> .)
    MENOSIGUAL      reduce using rule 9 (optionalPv -> .)
    MULTIGUAL       reduce using rule 9 (optionalPv -> .)
    DIVIGUAL        reduce using rule 9 (optionalPv -> .)
    MODIGUAL        reduce using rule 9 (optionalPv -> .)
    MULT            reduce using rule 9 (optionalPv -> .)
    DIVIDE          reduce using rule 9 (optionalPv -> .)
    MOD             reduce using rule 9 (optionalPv -> .)
    PONTOPONTO      reduce using rule 9 (optionalPv -> .)
    ELVIS           reduce using rule 9 (optionalPv -> .)
    IN              reduce using rule 9 (optionalPv -> .)
    NOT_IN          reduce using rule 9 (optionalPv -> .)
    IS              reduce using rule 9 (optionalPv -> .)
    NOT_IS          reduce using rule 9 (optionalPv -> .)
    MAIOR           reduce using rule 9 (optionalPv -> .)
    MENORIGUAL      reduce using rule 9 (optionalPv -> .)
    MAIORIGUAL      reduce using rule 9 (optionalPv -> .)
    DIFERENTE       reduce using rule 9 (optionalPv -> .)
    IDENTIDADE      reduce using rule 9 (optionalPv -> .)
    IGUALDADE       reduce using rule 9 (optionalPv -> .)
    SEMIDENTIDADE   reduce using rule 9 (optionalPv -> .)
    AND             reduce using rule 9 (optionalPv -> .)
    OR              reduce using rule 9 (optionalPv -> .)
    COMMA           reduce using rule 9 (optionalPv -> .)
    RPAREN          reduce using rule 9 (optionalPv -> .)
    RCCT            reduce using rule 9 (optionalPv -> .)
    ELSE            reduce using rule 9 (optionalPv -> .)

  ! FUN             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! FOR             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! WHILE           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DO              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! VAR             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! VAL             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! ID              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CROSSINLINE     [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IMPORT          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! INIT            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NOINLINE        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! OUT             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! VARARG          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! WHERE           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! OBJECT          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CONST           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CONSTRUCTOR     [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! EOF             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! FALSE           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! FUNCTION        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NULL            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NULLABLE        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NUMBER          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! OPERATOR        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! SMARTCAST       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! THIS            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! TRUE            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! WHEN            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LONG            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! ARRAY           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LPAREN          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LITERAL_STRING  [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LCCT            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IF              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RETURN          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RETURN_AT       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CONTINUE        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CONTINUE_AT     [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! BREAK           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! BREAK_AT        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RCHAVE          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! INCREMENTO      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DECREMENTO      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MINUS           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! PLUS            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NOT             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! SUSPEND         [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! COLONCOLON      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LCHAVE          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MENOR           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! PONTO           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! AS              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MAISIGUAL       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MENOSIGUAL      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MULTIGUAL       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DIVIGUAL        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MODIGUAL        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MULT            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DIVIDE          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MOD             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! PONTOPONTO      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! ELVIS           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IN              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NOT_IN          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IS              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NOT_IS          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MAIOR           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MENORIGUAL      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MAIORIGUAL      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DIFERENTE       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IDENTIDADE      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IGUALDADE       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! AND             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! OR              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! COMMA           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RCCT            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! PV              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! ELSE            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! PV              [ reduce using rule 9 (optionalPv -> .) ]

    optionalPv                     shift and go to state 398

state 371

    (18) typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA . MAIOR

    MAIOR           shift and go to state 400


state 372

    (19) typeParametersRecursive -> COMMA typeParameter .
    (20) typeParametersRecursive -> COMMA typeParameter . typeParametersRecursive
    (19) typeParametersRecursive -> . COMMA typeParameter
    (20) typeParametersRecursive -> . COMMA typeParameter typeParametersRecursive

  ! shift/reduce conflict for COMMA resolved as shift
    MAIOR           reduce using rule 19 (typeParametersRecursive -> COMMA typeParameter .)
    COMMA           shift and go to state 333

  ! COMMA           [ reduce using rule 19 (typeParametersRecursive -> COMMA typeParameter .) ]

    typeParametersRecursive        shift and go to state 401

state 373

    (24) typeParameter -> simpleIdentifier DOISP type .

    COMMA           reduce using rule 24 (typeParameter -> simpleIdentifier DOISP type .)
    MAIOR           reduce using rule 24 (typeParameter -> simpleIdentifier DOISP type .)


state 374

    (162) typeArgumentsRecursive -> typeProjection COMMA typeArgumentsRecursive .

    MAIOR           reduce using rule 162 (typeArgumentsRecursive -> typeProjection COMMA typeArgumentsRecursive .)


state 375

    (149) indexingSuffixRecursive -> expression COMMA indexingSuffixRecursive .

    RCCT            reduce using rule 149 (indexingSuffixRecursive -> expression COMMA indexingSuffixRecursive .)


state 376

    (85) forStatement -> FOR LPAREN genericVariableDeclaration IN expression . RPAREN optionalControlStructureBody
    (219) jumpExpression -> expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 402
    PLUS            reduce using rule 219 (jumpExpression -> expression .)
    MINUS           reduce using rule 219 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 219 (jumpExpression -> expression .)
    ID              reduce using rule 219 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 219 (jumpExpression -> expression .)
    IMPORT          reduce using rule 219 (jumpExpression -> expression .)
    INIT            reduce using rule 219 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 219 (jumpExpression -> expression .)
    OUT             reduce using rule 219 (jumpExpression -> expression .)
    VARARG          reduce using rule 219 (jumpExpression -> expression .)
    WHERE           reduce using rule 219 (jumpExpression -> expression .)
    OBJECT          reduce using rule 219 (jumpExpression -> expression .)
    CONST           reduce using rule 219 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 219 (jumpExpression -> expression .)
    EOF             reduce using rule 219 (jumpExpression -> expression .)
    FALSE           reduce using rule 219 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 219 (jumpExpression -> expression .)
    NULL            reduce using rule 219 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 219 (jumpExpression -> expression .)
    NUMBER          reduce using rule 219 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 219 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 219 (jumpExpression -> expression .)
    THIS            reduce using rule 219 (jumpExpression -> expression .)
    TRUE            reduce using rule 219 (jumpExpression -> expression .)
    VAL             reduce using rule 219 (jumpExpression -> expression .)
    VAR             reduce using rule 219 (jumpExpression -> expression .)
    WHEN            reduce using rule 219 (jumpExpression -> expression .)
    LONG            reduce using rule 219 (jumpExpression -> expression .)
    ARRAY           reduce using rule 219 (jumpExpression -> expression .)
    ELVIS           reduce using rule 219 (jumpExpression -> expression .)
    IN              reduce using rule 219 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 219 (jumpExpression -> expression .)
    IS              reduce using rule 219 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 219 (jumpExpression -> expression .)
    MENOR           reduce using rule 219 (jumpExpression -> expression .)
    MAIOR           reduce using rule 219 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 219 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 219 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 219 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 219 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 219 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 219 (jumpExpression -> expression .)
    AND             reduce using rule 219 (jumpExpression -> expression .)
    OR              reduce using rule 219 (jumpExpression -> expression .)
    INCREMENTO      reduce using rule 219 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 219 (jumpExpression -> expression .)
    LCCT            reduce using rule 219 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 219 (jumpExpression -> expression .)
    PONTO           reduce using rule 219 (jumpExpression -> expression .)
    LPAREN          reduce using rule 219 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 219 (jumpExpression -> expression .)
    AS              reduce using rule 219 (jumpExpression -> expression .)
    MULT            reduce using rule 219 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 219 (jumpExpression -> expression .)
    MOD             reduce using rule 219 (jumpExpression -> expression .)

  ! RPAREN          [ reduce using rule 219 (jumpExpression -> expression .) ]


state 377

    (86) whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .

    FUN             reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    FOR             reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    WHILE           reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DO              reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    VAR             reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    VAL             reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    ID              reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    CROSSINLINE     reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IMPORT          reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    INIT            reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NOINLINE        reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    OUT             reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    VARARG          reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    WHERE           reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    OBJECT          reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    CONST           reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    CONSTRUCTOR     reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    EOF             reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    FALSE           reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    FUNCTION        reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NULL            reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NULLABLE        reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NUMBER          reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    OPERATOR        reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    SMARTCAST       reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    THIS            reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    TRUE            reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    WHEN            reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    LONG            reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    ARRAY           reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    LPAREN          reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    LITERAL_STRING  reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    LCCT            reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IF              reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    RETURN          reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    RETURN_AT       reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    CONTINUE        reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    CONTINUE_AT     reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    BREAK           reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    BREAK_AT        reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    RCHAVE          reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    INCREMENTO      reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DECREMENTO      reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MINUS           reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    PLUS            reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NOT             reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    SUSPEND         reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    COLONCOLON      reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    LCHAVE          reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MENOR           reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    PONTO           reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    AS              reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MAISIGUAL       reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MENOSIGUAL      reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MULTIGUAL       reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DIVIGUAL        reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MODIGUAL        reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MULT            reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DIVIDE          reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MOD             reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    PONTOPONTO      reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    ELVIS           reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IN              reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NOT_IN          reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IS              reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NOT_IS          reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MAIOR           reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MENORIGUAL      reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MAIORIGUAL      reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DIFERENTE       reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IDENTIDADE      reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IGUALDADE       reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    SEMIDENTIDADE   reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    AND             reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    OR              reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    COMMA           reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    RPAREN          reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    RCCT            reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    PV              reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    ELSE            reduce using rule 86 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)


state 378

    (87) whileStatement -> WHILE LPAREN expression RPAREN PV .

    FUN             reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    FOR             reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    WHILE           reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DO              reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    VAR             reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    VAL             reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    ID              reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    CROSSINLINE     reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IMPORT          reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    INIT            reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NOINLINE        reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    OUT             reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    VARARG          reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    WHERE           reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    OBJECT          reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    CONST           reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    CONSTRUCTOR     reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    EOF             reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    FALSE           reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    FUNCTION        reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NULL            reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NULLABLE        reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NUMBER          reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    OPERATOR        reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    SMARTCAST       reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    THIS            reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    TRUE            reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    WHEN            reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    LONG            reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    ARRAY           reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    LPAREN          reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    LITERAL_STRING  reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    LCCT            reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IF              reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    RETURN          reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    RETURN_AT       reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    CONTINUE        reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    CONTINUE_AT     reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    BREAK           reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    BREAK_AT        reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    RCHAVE          reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    INCREMENTO      reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DECREMENTO      reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MINUS           reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    PLUS            reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NOT             reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    SUSPEND         reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    COLONCOLON      reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    LCHAVE          reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MENOR           reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    PONTO           reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    AS              reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MAISIGUAL       reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MENOSIGUAL      reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MULTIGUAL       reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DIVIGUAL        reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MODIGUAL        reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MULT            reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DIVIDE          reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MOD             reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    PONTOPONTO      reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    ELVIS           reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IN              reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NOT_IN          reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IS              reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NOT_IS          reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MAIOR           reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MENORIGUAL      reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MAIORIGUAL      reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DIFERENTE       reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IDENTIDADE      reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IGUALDADE       reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    SEMIDENTIDADE   reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    AND             reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    OR              reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    COMMA           reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    RPAREN          reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    RCCT            reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    PV              reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    ELSE            reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN PV .)


state 379

    (88) doWhileStatement -> DO controlStructureBody WHILE LPAREN expression . RPAREN
    (219) jumpExpression -> expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 403
    PLUS            reduce using rule 219 (jumpExpression -> expression .)
    MINUS           reduce using rule 219 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 219 (jumpExpression -> expression .)
    ID              reduce using rule 219 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 219 (jumpExpression -> expression .)
    IMPORT          reduce using rule 219 (jumpExpression -> expression .)
    INIT            reduce using rule 219 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 219 (jumpExpression -> expression .)
    OUT             reduce using rule 219 (jumpExpression -> expression .)
    VARARG          reduce using rule 219 (jumpExpression -> expression .)
    WHERE           reduce using rule 219 (jumpExpression -> expression .)
    OBJECT          reduce using rule 219 (jumpExpression -> expression .)
    CONST           reduce using rule 219 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 219 (jumpExpression -> expression .)
    EOF             reduce using rule 219 (jumpExpression -> expression .)
    FALSE           reduce using rule 219 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 219 (jumpExpression -> expression .)
    NULL            reduce using rule 219 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 219 (jumpExpression -> expression .)
    NUMBER          reduce using rule 219 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 219 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 219 (jumpExpression -> expression .)
    THIS            reduce using rule 219 (jumpExpression -> expression .)
    TRUE            reduce using rule 219 (jumpExpression -> expression .)
    VAL             reduce using rule 219 (jumpExpression -> expression .)
    VAR             reduce using rule 219 (jumpExpression -> expression .)
    WHEN            reduce using rule 219 (jumpExpression -> expression .)
    LONG            reduce using rule 219 (jumpExpression -> expression .)
    ARRAY           reduce using rule 219 (jumpExpression -> expression .)
    ELVIS           reduce using rule 219 (jumpExpression -> expression .)
    IN              reduce using rule 219 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 219 (jumpExpression -> expression .)
    IS              reduce using rule 219 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 219 (jumpExpression -> expression .)
    MENOR           reduce using rule 219 (jumpExpression -> expression .)
    MAIOR           reduce using rule 219 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 219 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 219 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 219 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 219 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 219 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 219 (jumpExpression -> expression .)
    AND             reduce using rule 219 (jumpExpression -> expression .)
    OR              reduce using rule 219 (jumpExpression -> expression .)
    INCREMENTO      reduce using rule 219 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 219 (jumpExpression -> expression .)
    LCCT            reduce using rule 219 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 219 (jumpExpression -> expression .)
    PONTO           reduce using rule 219 (jumpExpression -> expression .)
    LPAREN          reduce using rule 219 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 219 (jumpExpression -> expression .)
    AS              reduce using rule 219 (jumpExpression -> expression .)
    MULT            reduce using rule 219 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 219 (jumpExpression -> expression .)
    MOD             reduce using rule 219 (jumpExpression -> expression .)

  ! RPAREN          [ reduce using rule 219 (jumpExpression -> expression .) ]


state 380

    (89) doWhileStatement -> DO WHILE LPAREN expression RPAREN .
    (86) whileStatement -> WHILE LPAREN expression RPAREN . controlStructureBody
    (87) whileStatement -> WHILE LPAREN expression RPAREN . PV
    (77) controlStructureBody -> . block
    (78) controlStructureBody -> . statement
    (79) block -> . LCHAVE statements RCHAVE
    (72) statement -> . functionDeclaration
    (73) statement -> . assignment
    (74) statement -> . loopStatement
    (75) statement -> . expression
    (76) statement -> . propertyDeclaration
    (7) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (90) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (91) assignment -> . assignableExpression assignmentAndOperator expression
    (80) loopStatement -> . forStatement
    (81) loopStatement -> . whileStatement
    (82) loopStatement -> . doWhileStatement
    (12) expression -> . disjunction
    (17) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (136) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (137) directlyAssignableExpression -> . simpleIdentifier
    (138) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (140) assignableExpression -> . prefixUnaryExpression
    (141) assignableExpression -> . parenthesizedAssignableExpression
    (85) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody
    (86) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (87) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (88) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (89) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (13) varOrVal -> . VAR
    (14) varOrVal -> . VAL
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (139) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (142) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (69) receiverType -> . typeModifier parenthesizedType
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (48) typeModifier -> . SUSPEND
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type

  ! shift/reduce conflict for PV resolved as shift
  ! shift/reduce conflict for LCHAVE resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! reduce/reduce conflict for COLONCOLON resolved using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
    COLONCOLON      reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MENOR           reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    PONTO           reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    AS              reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MAISIGUAL       reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MENOSIGUAL      reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MULTIGUAL       reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    DIVIGUAL        reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MODIGUAL        reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MULT            reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MOD             reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    PONTOPONTO      reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    ELVIS           reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    IN              reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    NOT_IN          reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    IS              reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    NOT_IS          reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MAIOR           reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MENORIGUAL      reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MAIORIGUAL      reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    DIFERENTE       reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    IDENTIDADE      reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    IGUALDADE       reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    SEMIDENTIDADE   reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    AND             reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    OR              reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    COMMA           reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    RPAREN          reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    RCCT            reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    ELSE            reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    PV              shift and go to state 378
    LCHAVE          shift and go to state 43
    FUN             shift and go to state 62
    FOR             shift and go to state 75
    WHILE           shift and go to state 77
    DO              shift and go to state 78
    VAR             shift and go to state 80
    VAL             shift and go to state 81
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 76
    LITERAL_STRING  shift and go to state 86
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    RCHAVE          shift and go to state 55
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    SUSPEND         shift and go to state 48

  ! FUN             [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! FOR             [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! WHILE           [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! DO              [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! VAR             [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! VAL             [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! ID              [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! CROSSINLINE     [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! IMPORT          [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! INIT            [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! NOINLINE        [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! OUT             [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! VARARG          [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! WHERE           [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! OBJECT          [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! CONST           [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! CONSTRUCTOR     [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! EOF             [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! FALSE           [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! FUNCTION        [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! NULL            [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! NULLABLE        [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! NUMBER          [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! OPERATOR        [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! SMARTCAST       [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! THIS            [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! TRUE            [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! WHEN            [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! LONG            [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! ARRAY           [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! LPAREN          [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! LITERAL_STRING  [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! LCCT            [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! IF              [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! RETURN          [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! RETURN_AT       [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! CONTINUE        [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! CONTINUE_AT     [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! BREAK           [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! BREAK_AT        [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! RCHAVE          [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! INCREMENTO      [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! DECREMENTO      [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! MINUS           [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! PLUS            [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! NOT             [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! SUSPEND         [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! LCHAVE          [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! PV              [ reduce using rule 89 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! COLONCOLON      [ reduce using rule 226 (optionalReceiverType -> .) ]

    expression                     shift and go to state 60
    controlStructureBody           shift and go to state 377
    block                          shift and go to state 181
    statement                      shift and go to state 182
    functionDeclaration            shift and go to state 57
    assignment                     shift and go to state 58
    loopStatement                  shift and go to state 59
    propertyDeclaration            shift and go to state 61
    simpleIdentifier               shift and go to state 63
    directlyAssignableExpression   shift and go to state 64
    assignableExpression           shift and go to state 65
    forStatement                   shift and go to state 66
    whileStatement                 shift and go to state 67
    doWhileStatement               shift and go to state 68
    disjunction                    shift and go to state 69
    varOrVal                       shift and go to state 70
    postfixUnaryExpression         shift and go to state 71
    parenthesizedDirectlyAssignableExpression shift and go to state 72
    prefixUnaryExpression          shift and go to state 73
    parenthesizedAssignableExpression shift and go to state 74
    conjunction                    shift and go to state 79
    primaryExpression              shift and go to state 82
    prefixUnaryExpressionRecursive shift and go to state 83
    equality                       shift and go to state 84
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    unaryPrefix                    shift and go to state 92
    comparison                     shift and go to state 93
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    infixOperation                 shift and go to state 107
    receiverType                   shift and go to state 108
    elvisExpression                shift and go to state 114
    typeModifier                   shift and go to state 115
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120

state 381

    (166) valueArguments -> LPAREN valueArgumentsRecursive RPAREN .

    RCHAVE          reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    INCREMENTO      reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    DECREMENTO      reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MENOR           reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    LCCT            reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    COLONCOLON      reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    PONTO           reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    LPAREN          reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    AS              reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MAISIGUAL       reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MENOSIGUAL      reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MULTIGUAL       reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    DIVIGUAL        reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MODIGUAL        reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MULT            reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    DIVIDE          reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MOD             reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    PLUS            reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MINUS           reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    PONTOPONTO      reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    ID              reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    CROSSINLINE     reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    IMPORT          reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    INIT            reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    NOINLINE        reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    OUT             reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    VARARG          reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    WHERE           reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    OBJECT          reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    CONST           reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    CONSTRUCTOR     reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    EOF             reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    FALSE           reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    FUNCTION        reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    NULL            reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    NULLABLE        reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    NUMBER          reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    OPERATOR        reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    SMARTCAST       reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    THIS            reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    TRUE            reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    VAL             reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    VAR             reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    WHEN            reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    LONG            reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    ARRAY           reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    ELVIS           reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    IN              reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    NOT_IN          reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    IS              reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    NOT_IS          reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MAIOR           reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MENORIGUAL      reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MAIORIGUAL      reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    DIFERENTE       reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    IDENTIDADE      reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    IGUALDADE       reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    SEMIDENTIDADE   reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    AND             reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    OR              reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    FUN             reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    FOR             reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    WHILE           reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    DO              reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    LITERAL_STRING  reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    IF              reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    RETURN          reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    RETURN_AT       reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    CONTINUE        reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    CONTINUE_AT     reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    BREAK           reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    BREAK_AT        reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    NOT             reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    SUSPEND         reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    COMMA           reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    RPAREN          reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    LCHAVE          reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    RCCT            reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    PV              reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    ELSE            reduce using rule 166 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)


state 382

    (164) valueArgumentsRecursive -> valueArgument COMMA . valueArgumentsRecursive
    (163) valueArgumentsRecursive -> . valueArgument
    (164) valueArgumentsRecursive -> . valueArgument COMMA valueArgumentsRecursive
    (167) valueArgument -> . simpleIdentifier ATRIBUICAO MULT expression
    (168) valueArgument -> . simpleIdentifier ATRIBUICAO expression
    (169) valueArgument -> . expression
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (12) expression -> . disjunction
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LITERAL_STRING  shift and go to state 86
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 136
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    SUSPEND         shift and go to state 48

    valueArgument                  shift and go to state 352
    valueArgumentsRecursive        shift and go to state 404
    simpleIdentifier               shift and go to state 353
    expression                     shift and go to state 354
    disjunction                    shift and go to state 69
    conjunction                    shift and go to state 79
    equality                       shift and go to state 84
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 107
    elvisExpression                shift and go to state 114
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120
    prefixUnaryExpression          shift and go to state 134
    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 135
    unaryPrefix                    shift and go to state 92
    primaryExpression              shift and go to state 82
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    typeModifier                   shift and go to state 115

state 383

    (167) valueArgument -> simpleIdentifier ATRIBUICAO . MULT expression
    (168) valueArgument -> simpleIdentifier ATRIBUICAO . expression
    (12) expression -> . disjunction
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    MULT            shift and go to state 405
    LITERAL_STRING  shift and go to state 86
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 136
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    SUSPEND         shift and go to state 48

    simpleIdentifier               shift and go to state 133
    expression                     shift and go to state 406
    disjunction                    shift and go to state 69
    conjunction                    shift and go to state 79
    equality                       shift and go to state 84
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 107
    elvisExpression                shift and go to state 114
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120
    prefixUnaryExpression          shift and go to state 134
    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 135
    unaryPrefix                    shift and go to state 92
    primaryExpression              shift and go to state 82
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    typeModifier                   shift and go to state 115

state 384

    (211) ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .

    INCREMENTO      reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    DECREMENTO      reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MENOR           reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    LCCT            reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    COLONCOLON      reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    PONTO           reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    LPAREN          reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    RCHAVE          reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    AS              reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MAISIGUAL       reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MENOSIGUAL      reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MULTIGUAL       reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    DIVIGUAL        reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MODIGUAL        reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MULT            reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    DIVIDE          reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MOD             reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    PLUS            reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MINUS           reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    PONTOPONTO      reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    ID              reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    CROSSINLINE     reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    IMPORT          reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    INIT            reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    NOINLINE        reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    OUT             reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    VARARG          reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    WHERE           reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    OBJECT          reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    CONST           reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    CONSTRUCTOR     reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    EOF             reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    FALSE           reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    FUNCTION        reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    NULL            reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    NULLABLE        reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    NUMBER          reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    OPERATOR        reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    SMARTCAST       reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    THIS            reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    TRUE            reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    VAL             reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    VAR             reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    WHEN            reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    LONG            reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    ARRAY           reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    ELVIS           reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    IN              reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    NOT_IN          reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    IS              reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    NOT_IS          reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MAIOR           reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MENORIGUAL      reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MAIORIGUAL      reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    DIFERENTE       reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    IDENTIDADE      reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    IGUALDADE       reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    SEMIDENTIDADE   reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    AND             reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    OR              reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    FUN             reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    FOR             reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    WHILE           reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    DO              reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    LITERAL_STRING  reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    IF              reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    RETURN          reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    RETURN_AT       reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    CONTINUE        reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    CONTINUE_AT     reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    BREAK           reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    BREAK_AT        reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    NOT             reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    SUSPEND         reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    COMMA           reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    RPAREN          reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    LCHAVE          reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    RCCT            reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    PV              reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    ELSE            reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)


state 385

    (212) ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody . optionalPV ELSE controlStructureBodyOrPV
    (215) optionalPV -> . PV
    (216) optionalPV -> .

    PV              shift and go to state 408
    ELSE            reduce using rule 216 (optionalPV -> .)

    optionalPV                     shift and go to state 407

state 386

    (213) controlStructureBodyOrPV -> controlStructureBody .
    (83) optionalControlStructureBody -> controlStructureBody .

  ! reduce/reduce conflict for PV resolved using rule 83 (optionalControlStructureBody -> controlStructureBody .)
  ! reduce/reduce conflict for ELSE resolved using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    FUN             reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    FOR             reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    WHILE           reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    DO              reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    VAR             reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    VAL             reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    ID              reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    CROSSINLINE     reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    IMPORT          reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    INIT            reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    NOINLINE        reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    OUT             reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    VARARG          reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    WHERE           reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    OBJECT          reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    CONST           reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    CONSTRUCTOR     reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    EOF             reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    FALSE           reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    FUNCTION        reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    NULL            reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    NULLABLE        reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    NUMBER          reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    OPERATOR        reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    SMARTCAST       reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    THIS            reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    TRUE            reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    WHEN            reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    LONG            reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    ARRAY           reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    LPAREN          reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    LITERAL_STRING  reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    LCCT            reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    IF              reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    RETURN          reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    RETURN_AT       reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    CONTINUE        reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    CONTINUE_AT     reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    BREAK           reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    BREAK_AT        reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    RCHAVE          reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    INCREMENTO      reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    DECREMENTO      reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    MINUS           reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    PLUS            reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    NOT             reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    SUSPEND         reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    COLONCOLON      reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    LCHAVE          reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    MENOR           reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    PONTO           reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    AS              reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    MAISIGUAL       reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    MENOSIGUAL      reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    MULTIGUAL       reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    DIVIGUAL        reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    MODIGUAL        reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    MULT            reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    DIVIDE          reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    MOD             reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    PONTOPONTO      reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    ELVIS           reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    IN              reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    NOT_IN          reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    IS              reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    NOT_IS          reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    MAIOR           reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    MENORIGUAL      reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    MAIORIGUAL      reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    DIFERENTE       reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    IDENTIDADE      reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    IGUALDADE       reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    SEMIDENTIDADE   reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    AND             reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    OR              reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    COMMA           reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    RPAREN          reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    RCCT            reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    PV              reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    ELSE            reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)

  ! PV              [ reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .) ]
  ! ELSE            [ reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .) ]


state 387

    (214) controlStructureBodyOrPV -> PV .

    FUN             reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    FOR             reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    WHILE           reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    DO              reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    VAR             reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    VAL             reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    ID              reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    CROSSINLINE     reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    IMPORT          reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    INIT            reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    NOINLINE        reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    OUT             reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    VARARG          reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    WHERE           reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    OBJECT          reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    CONST           reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    CONSTRUCTOR     reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    EOF             reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    FALSE           reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    FUNCTION        reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    NULL            reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    NULLABLE        reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    NUMBER          reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    OPERATOR        reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    SMARTCAST       reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    THIS            reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    TRUE            reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    WHEN            reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    LONG            reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    ARRAY           reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    LPAREN          reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    LITERAL_STRING  reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    LCCT            reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    IF              reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    RETURN          reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    RETURN_AT       reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    CONTINUE        reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    CONTINUE_AT     reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    BREAK           reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    BREAK_AT        reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    RCHAVE          reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    INCREMENTO      reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    DECREMENTO      reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    MINUS           reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    PLUS            reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    NOT             reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    SUSPEND         reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    COLONCOLON      reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    LCHAVE          reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    MENOR           reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    PONTO           reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    AS              reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    MAISIGUAL       reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    MENOSIGUAL      reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    MULTIGUAL       reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    DIVIGUAL        reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    MODIGUAL        reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    MULT            reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    DIVIDE          reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    MOD             reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    PONTOPONTO      reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    ELVIS           reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    IN              reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    NOT_IN          reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    IS              reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    NOT_IS          reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    MAIOR           reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    MENORIGUAL      reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    MAIORIGUAL      reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    DIFERENTE       reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    IDENTIDADE      reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    IGUALDADE       reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    SEMIDENTIDADE   reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    AND             reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    OR              reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    COMMA           reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    RPAREN          reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    RCCT            reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    PV              reduce using rule 214 (controlStructureBodyOrPV -> PV .)
    ELSE            reduce using rule 214 (controlStructureBodyOrPV -> PV .)


state 388

    (67) functionTypeParameters -> LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN .

    SETA            reduce using rule 67 (functionTypeParameters -> LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN .)


state 389

    (65) parameterOrTypeRecursive -> COMMA optionalParameterOrType parameterOrTypeRecursive .

    COMMA           reduce using rule 65 (parameterOrTypeRecursive -> COMMA optionalParameterOrType parameterOrTypeRecursive .)
    RPAREN          reduce using rule 65 (parameterOrTypeRecursive -> COMMA optionalParameterOrType parameterOrTypeRecursive .)


state 390

    (59) functionType -> receiverType PONTO functionTypeParameters SETA type .

    LCHAVE          reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    FUN             reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    $end            reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    FOR             reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    WHILE           reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DO              reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    VAR             reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    VAL             reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    ID              reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    CROSSINLINE     reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IMPORT          reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    INIT            reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NOINLINE        reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    OUT             reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    VARARG          reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    WHERE           reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    OBJECT          reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    CONST           reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    CONSTRUCTOR     reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    EOF             reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    FALSE           reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    FUNCTION        reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NULL            reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NULLABLE        reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NUMBER          reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    OPERATOR        reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    SMARTCAST       reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    THIS            reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    TRUE            reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    WHEN            reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    LONG            reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    ARRAY           reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    LPAREN          reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    LITERAL_STRING  reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    LCCT            reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IF              reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    RETURN          reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    RETURN_AT       reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    CONTINUE        reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    CONTINUE_AT     reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    BREAK           reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    BREAK_AT        reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    RCHAVE          reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    INCREMENTO      reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DECREMENTO      reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MINUS           reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    PLUS            reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NOT             reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    SUSPEND         reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    COLONCOLON      reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MENOR           reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    PONTO           reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    AS              reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MAISIGUAL       reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MENOSIGUAL      reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MULTIGUAL       reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DIVIGUAL        reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MODIGUAL        reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MULT            reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DIVIDE          reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MOD             reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    PONTOPONTO      reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    ELVIS           reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IN              reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NOT_IN          reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IS              reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NOT_IS          reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MAIOR           reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MENORIGUAL      reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MAIORIGUAL      reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DIFERENTE       reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IDENTIDADE      reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IGUALDADE       reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    SEMIDENTIDADE   reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    AND             reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    OR              reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    COMMA           reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    RPAREN          reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    RCCT            reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    PV              reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    ELSE            reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    SETA            reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    ATRIBUICAO      reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)


state 391

    (207) anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .

    INCREMENTO      reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    DECREMENTO      reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MENOR           reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    LCCT            reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    COLONCOLON      reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    PONTO           reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    LPAREN          reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    RCHAVE          reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    AS              reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MAISIGUAL       reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MENOSIGUAL      reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MULTIGUAL       reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    DIVIGUAL        reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MODIGUAL        reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MULT            reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    DIVIDE          reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MOD             reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    PLUS            reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MINUS           reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    PONTOPONTO      reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    ID              reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    CROSSINLINE     reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    IMPORT          reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    INIT            reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    NOINLINE        reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    OUT             reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    VARARG          reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    WHERE           reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    OBJECT          reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    CONST           reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    CONSTRUCTOR     reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    EOF             reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    FALSE           reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    FUNCTION        reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    NULL            reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    NULLABLE        reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    NUMBER          reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    OPERATOR        reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    SMARTCAST       reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    THIS            reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    TRUE            reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    VAL             reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    VAR             reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    WHEN            reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    LONG            reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    ARRAY           reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    ELVIS           reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    IN              reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    NOT_IN          reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    IS              reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    NOT_IS          reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MAIOR           reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MENORIGUAL      reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MAIORIGUAL      reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    DIFERENTE       reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    IDENTIDADE      reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    IGUALDADE       reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    SEMIDENTIDADE   reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    AND             reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    OR              reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    FUN             reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    FOR             reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    WHILE           reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    DO              reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    LITERAL_STRING  reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    IF              reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    RETURN          reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    RETURN_AT       reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    CONTINUE        reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    CONTINUE_AT     reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    BREAK           reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    BREAK_AT        reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    NOT             reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    SUSPEND         reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    COMMA           reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    RPAREN          reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    LCHAVE          reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    RCCT            reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    PV              reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    ELSE            reduce using rule 207 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)


state 392

    (205) optionalFunctionBody -> functionBody .

    FUN             reduce using rule 205 (optionalFunctionBody -> functionBody .)
    FOR             reduce using rule 205 (optionalFunctionBody -> functionBody .)
    WHILE           reduce using rule 205 (optionalFunctionBody -> functionBody .)
    DO              reduce using rule 205 (optionalFunctionBody -> functionBody .)
    VAR             reduce using rule 205 (optionalFunctionBody -> functionBody .)
    VAL             reduce using rule 205 (optionalFunctionBody -> functionBody .)
    ID              reduce using rule 205 (optionalFunctionBody -> functionBody .)
    CROSSINLINE     reduce using rule 205 (optionalFunctionBody -> functionBody .)
    IMPORT          reduce using rule 205 (optionalFunctionBody -> functionBody .)
    INIT            reduce using rule 205 (optionalFunctionBody -> functionBody .)
    NOINLINE        reduce using rule 205 (optionalFunctionBody -> functionBody .)
    OUT             reduce using rule 205 (optionalFunctionBody -> functionBody .)
    VARARG          reduce using rule 205 (optionalFunctionBody -> functionBody .)
    WHERE           reduce using rule 205 (optionalFunctionBody -> functionBody .)
    OBJECT          reduce using rule 205 (optionalFunctionBody -> functionBody .)
    CONST           reduce using rule 205 (optionalFunctionBody -> functionBody .)
    CONSTRUCTOR     reduce using rule 205 (optionalFunctionBody -> functionBody .)
    EOF             reduce using rule 205 (optionalFunctionBody -> functionBody .)
    FALSE           reduce using rule 205 (optionalFunctionBody -> functionBody .)
    FUNCTION        reduce using rule 205 (optionalFunctionBody -> functionBody .)
    NULL            reduce using rule 205 (optionalFunctionBody -> functionBody .)
    NULLABLE        reduce using rule 205 (optionalFunctionBody -> functionBody .)
    NUMBER          reduce using rule 205 (optionalFunctionBody -> functionBody .)
    OPERATOR        reduce using rule 205 (optionalFunctionBody -> functionBody .)
    SMARTCAST       reduce using rule 205 (optionalFunctionBody -> functionBody .)
    THIS            reduce using rule 205 (optionalFunctionBody -> functionBody .)
    TRUE            reduce using rule 205 (optionalFunctionBody -> functionBody .)
    WHEN            reduce using rule 205 (optionalFunctionBody -> functionBody .)
    LONG            reduce using rule 205 (optionalFunctionBody -> functionBody .)
    ARRAY           reduce using rule 205 (optionalFunctionBody -> functionBody .)
    LPAREN          reduce using rule 205 (optionalFunctionBody -> functionBody .)
    LITERAL_STRING  reduce using rule 205 (optionalFunctionBody -> functionBody .)
    LCCT            reduce using rule 205 (optionalFunctionBody -> functionBody .)
    IF              reduce using rule 205 (optionalFunctionBody -> functionBody .)
    RETURN          reduce using rule 205 (optionalFunctionBody -> functionBody .)
    RETURN_AT       reduce using rule 205 (optionalFunctionBody -> functionBody .)
    CONTINUE        reduce using rule 205 (optionalFunctionBody -> functionBody .)
    CONTINUE_AT     reduce using rule 205 (optionalFunctionBody -> functionBody .)
    BREAK           reduce using rule 205 (optionalFunctionBody -> functionBody .)
    BREAK_AT        reduce using rule 205 (optionalFunctionBody -> functionBody .)
    RCHAVE          reduce using rule 205 (optionalFunctionBody -> functionBody .)
    INCREMENTO      reduce using rule 205 (optionalFunctionBody -> functionBody .)
    DECREMENTO      reduce using rule 205 (optionalFunctionBody -> functionBody .)
    MINUS           reduce using rule 205 (optionalFunctionBody -> functionBody .)
    PLUS            reduce using rule 205 (optionalFunctionBody -> functionBody .)
    NOT             reduce using rule 205 (optionalFunctionBody -> functionBody .)
    SUSPEND         reduce using rule 205 (optionalFunctionBody -> functionBody .)
    COLONCOLON      reduce using rule 205 (optionalFunctionBody -> functionBody .)
    LCHAVE          reduce using rule 205 (optionalFunctionBody -> functionBody .)
    MENOR           reduce using rule 205 (optionalFunctionBody -> functionBody .)
    PONTO           reduce using rule 205 (optionalFunctionBody -> functionBody .)
    AS              reduce using rule 205 (optionalFunctionBody -> functionBody .)
    MAISIGUAL       reduce using rule 205 (optionalFunctionBody -> functionBody .)
    MENOSIGUAL      reduce using rule 205 (optionalFunctionBody -> functionBody .)
    MULTIGUAL       reduce using rule 205 (optionalFunctionBody -> functionBody .)
    DIVIGUAL        reduce using rule 205 (optionalFunctionBody -> functionBody .)
    MODIGUAL        reduce using rule 205 (optionalFunctionBody -> functionBody .)
    MULT            reduce using rule 205 (optionalFunctionBody -> functionBody .)
    DIVIDE          reduce using rule 205 (optionalFunctionBody -> functionBody .)
    MOD             reduce using rule 205 (optionalFunctionBody -> functionBody .)
    PONTOPONTO      reduce using rule 205 (optionalFunctionBody -> functionBody .)
    ELVIS           reduce using rule 205 (optionalFunctionBody -> functionBody .)
    IN              reduce using rule 205 (optionalFunctionBody -> functionBody .)
    NOT_IN          reduce using rule 205 (optionalFunctionBody -> functionBody .)
    IS              reduce using rule 205 (optionalFunctionBody -> functionBody .)
    NOT_IS          reduce using rule 205 (optionalFunctionBody -> functionBody .)
    MAIOR           reduce using rule 205 (optionalFunctionBody -> functionBody .)
    MENORIGUAL      reduce using rule 205 (optionalFunctionBody -> functionBody .)
    MAIORIGUAL      reduce using rule 205 (optionalFunctionBody -> functionBody .)
    DIFERENTE       reduce using rule 205 (optionalFunctionBody -> functionBody .)
    IDENTIDADE      reduce using rule 205 (optionalFunctionBody -> functionBody .)
    IGUALDADE       reduce using rule 205 (optionalFunctionBody -> functionBody .)
    SEMIDENTIDADE   reduce using rule 205 (optionalFunctionBody -> functionBody .)
    AND             reduce using rule 205 (optionalFunctionBody -> functionBody .)
    OR              reduce using rule 205 (optionalFunctionBody -> functionBody .)
    COMMA           reduce using rule 205 (optionalFunctionBody -> functionBody .)
    RPAREN          reduce using rule 205 (optionalFunctionBody -> functionBody .)
    RCCT            reduce using rule 205 (optionalFunctionBody -> functionBody .)
    PV              reduce using rule 205 (optionalFunctionBody -> functionBody .)
    ELSE            reduce using rule 205 (optionalFunctionBody -> functionBody .)


state 393

    (25) functionBody -> block .

    FUN             reduce using rule 25 (functionBody -> block .)
    FOR             reduce using rule 25 (functionBody -> block .)
    WHILE           reduce using rule 25 (functionBody -> block .)
    DO              reduce using rule 25 (functionBody -> block .)
    VAR             reduce using rule 25 (functionBody -> block .)
    VAL             reduce using rule 25 (functionBody -> block .)
    ID              reduce using rule 25 (functionBody -> block .)
    CROSSINLINE     reduce using rule 25 (functionBody -> block .)
    IMPORT          reduce using rule 25 (functionBody -> block .)
    INIT            reduce using rule 25 (functionBody -> block .)
    NOINLINE        reduce using rule 25 (functionBody -> block .)
    OUT             reduce using rule 25 (functionBody -> block .)
    VARARG          reduce using rule 25 (functionBody -> block .)
    WHERE           reduce using rule 25 (functionBody -> block .)
    OBJECT          reduce using rule 25 (functionBody -> block .)
    CONST           reduce using rule 25 (functionBody -> block .)
    CONSTRUCTOR     reduce using rule 25 (functionBody -> block .)
    EOF             reduce using rule 25 (functionBody -> block .)
    FALSE           reduce using rule 25 (functionBody -> block .)
    FUNCTION        reduce using rule 25 (functionBody -> block .)
    NULL            reduce using rule 25 (functionBody -> block .)
    NULLABLE        reduce using rule 25 (functionBody -> block .)
    NUMBER          reduce using rule 25 (functionBody -> block .)
    OPERATOR        reduce using rule 25 (functionBody -> block .)
    SMARTCAST       reduce using rule 25 (functionBody -> block .)
    THIS            reduce using rule 25 (functionBody -> block .)
    TRUE            reduce using rule 25 (functionBody -> block .)
    WHEN            reduce using rule 25 (functionBody -> block .)
    LONG            reduce using rule 25 (functionBody -> block .)
    ARRAY           reduce using rule 25 (functionBody -> block .)
    LPAREN          reduce using rule 25 (functionBody -> block .)
    LITERAL_STRING  reduce using rule 25 (functionBody -> block .)
    LCCT            reduce using rule 25 (functionBody -> block .)
    IF              reduce using rule 25 (functionBody -> block .)
    RETURN          reduce using rule 25 (functionBody -> block .)
    RETURN_AT       reduce using rule 25 (functionBody -> block .)
    CONTINUE        reduce using rule 25 (functionBody -> block .)
    CONTINUE_AT     reduce using rule 25 (functionBody -> block .)
    BREAK           reduce using rule 25 (functionBody -> block .)
    BREAK_AT        reduce using rule 25 (functionBody -> block .)
    RCHAVE          reduce using rule 25 (functionBody -> block .)
    INCREMENTO      reduce using rule 25 (functionBody -> block .)
    DECREMENTO      reduce using rule 25 (functionBody -> block .)
    MINUS           reduce using rule 25 (functionBody -> block .)
    PLUS            reduce using rule 25 (functionBody -> block .)
    NOT             reduce using rule 25 (functionBody -> block .)
    SUSPEND         reduce using rule 25 (functionBody -> block .)
    COLONCOLON      reduce using rule 25 (functionBody -> block .)
    LCHAVE          reduce using rule 25 (functionBody -> block .)
    MENOR           reduce using rule 25 (functionBody -> block .)
    PONTO           reduce using rule 25 (functionBody -> block .)
    AS              reduce using rule 25 (functionBody -> block .)
    MAISIGUAL       reduce using rule 25 (functionBody -> block .)
    MENOSIGUAL      reduce using rule 25 (functionBody -> block .)
    MULTIGUAL       reduce using rule 25 (functionBody -> block .)
    DIVIGUAL        reduce using rule 25 (functionBody -> block .)
    MODIGUAL        reduce using rule 25 (functionBody -> block .)
    MULT            reduce using rule 25 (functionBody -> block .)
    DIVIDE          reduce using rule 25 (functionBody -> block .)
    MOD             reduce using rule 25 (functionBody -> block .)
    PONTOPONTO      reduce using rule 25 (functionBody -> block .)
    ELVIS           reduce using rule 25 (functionBody -> block .)
    IN              reduce using rule 25 (functionBody -> block .)
    NOT_IN          reduce using rule 25 (functionBody -> block .)
    IS              reduce using rule 25 (functionBody -> block .)
    NOT_IS          reduce using rule 25 (functionBody -> block .)
    MAIOR           reduce using rule 25 (functionBody -> block .)
    MENORIGUAL      reduce using rule 25 (functionBody -> block .)
    MAIORIGUAL      reduce using rule 25 (functionBody -> block .)
    DIFERENTE       reduce using rule 25 (functionBody -> block .)
    IDENTIDADE      reduce using rule 25 (functionBody -> block .)
    IGUALDADE       reduce using rule 25 (functionBody -> block .)
    SEMIDENTIDADE   reduce using rule 25 (functionBody -> block .)
    AND             reduce using rule 25 (functionBody -> block .)
    OR              reduce using rule 25 (functionBody -> block .)
    COMMA           reduce using rule 25 (functionBody -> block .)
    RPAREN          reduce using rule 25 (functionBody -> block .)
    RCCT            reduce using rule 25 (functionBody -> block .)
    PV              reduce using rule 25 (functionBody -> block .)
    ELSE            reduce using rule 25 (functionBody -> block .)


state 394

    (26) functionBody -> ATRIBUICAO . expression
    (12) expression -> . disjunction
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 86
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 136
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 409
    disjunction                    shift and go to state 69
    conjunction                    shift and go to state 79
    equality                       shift and go to state 84
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 107
    elvisExpression                shift and go to state 114
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    simpleIdentifier               shift and go to state 133
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120
    prefixUnaryExpression          shift and go to state 134
    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 135
    unaryPrefix                    shift and go to state 92
    primaryExpression              shift and go to state 82
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    typeModifier                   shift and go to state 115

state 395

    (210) typeConstraints -> simpleIdentifier DOISP . type
    (40) type -> . optionalTypeModifiers optype
    (41) optionalTypeModifiers -> . typeModifiers
    (42) optionalTypeModifiers -> .
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (48) typeModifier -> . SUSPEND

  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 42 (optionalTypeModifiers -> .)
    ID              reduce using rule 42 (optionalTypeModifiers -> .)
    CROSSINLINE     reduce using rule 42 (optionalTypeModifiers -> .)
    IMPORT          reduce using rule 42 (optionalTypeModifiers -> .)
    INIT            reduce using rule 42 (optionalTypeModifiers -> .)
    NOINLINE        reduce using rule 42 (optionalTypeModifiers -> .)
    OUT             reduce using rule 42 (optionalTypeModifiers -> .)
    VARARG          reduce using rule 42 (optionalTypeModifiers -> .)
    WHERE           reduce using rule 42 (optionalTypeModifiers -> .)
    OBJECT          reduce using rule 42 (optionalTypeModifiers -> .)
    CONST           reduce using rule 42 (optionalTypeModifiers -> .)
    CONSTRUCTOR     reduce using rule 42 (optionalTypeModifiers -> .)
    EOF             reduce using rule 42 (optionalTypeModifiers -> .)
    FALSE           reduce using rule 42 (optionalTypeModifiers -> .)
    FUNCTION        reduce using rule 42 (optionalTypeModifiers -> .)
    NULL            reduce using rule 42 (optionalTypeModifiers -> .)
    NULLABLE        reduce using rule 42 (optionalTypeModifiers -> .)
    NUMBER          reduce using rule 42 (optionalTypeModifiers -> .)
    OPERATOR        reduce using rule 42 (optionalTypeModifiers -> .)
    SMARTCAST       reduce using rule 42 (optionalTypeModifiers -> .)
    THIS            reduce using rule 42 (optionalTypeModifiers -> .)
    TRUE            reduce using rule 42 (optionalTypeModifiers -> .)
    VAL             reduce using rule 42 (optionalTypeModifiers -> .)
    VAR             reduce using rule 42 (optionalTypeModifiers -> .)
    WHEN            reduce using rule 42 (optionalTypeModifiers -> .)
    LONG            reduce using rule 42 (optionalTypeModifiers -> .)
    ARRAY           reduce using rule 42 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 42 (optionalTypeModifiers -> .) ]

    type                           shift and go to state 410
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 396

    (186) parametersWithOptionalTypeRecursive -> parameterWithOptionalType COMMA parametersWithOptionalTypeRecursive . COMMA

    COMMA           shift and go to state 411


state 397

    (187) parameterWithOptionalType -> optionalParameterModifiers simpleIdentifier optionalType .

    COMMA           reduce using rule 187 (parameterWithOptionalType -> optionalParameterModifiers simpleIdentifier optionalType .)
    RPAREN          reduce using rule 187 (parameterWithOptionalType -> optionalParameterModifiers simpleIdentifier optionalType .)


state 398

    (17) propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .

    FUN             reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    FOR             reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    WHILE           reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    DO              reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    VAR             reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    VAL             reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    ID              reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    CROSSINLINE     reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    IMPORT          reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    INIT            reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    NOINLINE        reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    OUT             reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    VARARG          reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    WHERE           reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    OBJECT          reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    CONST           reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    CONSTRUCTOR     reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    EOF             reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    FALSE           reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    FUNCTION        reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    NULL            reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    NULLABLE        reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    NUMBER          reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    OPERATOR        reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    SMARTCAST       reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    THIS            reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    TRUE            reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    WHEN            reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    LONG            reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    ARRAY           reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    LPAREN          reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    LITERAL_STRING  reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    LCCT            reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    IF              reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    RETURN          reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    RETURN_AT       reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    CONTINUE        reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    CONTINUE_AT     reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    BREAK           reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    BREAK_AT        reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    RCHAVE          reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    INCREMENTO      reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    DECREMENTO      reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MINUS           reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    PLUS            reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    NOT             reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    SUSPEND         reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    COLONCOLON      reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    LCHAVE          reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MENOR           reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    PONTO           reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    AS              reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MAISIGUAL       reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MENOSIGUAL      reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MULTIGUAL       reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    DIVIGUAL        reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MODIGUAL        reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MULT            reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    DIVIDE          reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MOD             reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    PONTOPONTO      reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    ELVIS           reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    IN              reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    NOT_IN          reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    IS              reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    NOT_IS          reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MAIOR           reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MENORIGUAL      reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MAIORIGUAL      reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    DIFERENTE       reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    IDENTIDADE      reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    IGUALDADE       reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    SEMIDENTIDADE   reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    AND             reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    OR              reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    COMMA           reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    RPAREN          reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    RCCT            reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    PV              reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    ELSE            reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)


state 399

    (8) optionalPv -> PV .

    FUN             reduce using rule 8 (optionalPv -> PV .)
    FOR             reduce using rule 8 (optionalPv -> PV .)
    WHILE           reduce using rule 8 (optionalPv -> PV .)
    DO              reduce using rule 8 (optionalPv -> PV .)
    VAR             reduce using rule 8 (optionalPv -> PV .)
    VAL             reduce using rule 8 (optionalPv -> PV .)
    ID              reduce using rule 8 (optionalPv -> PV .)
    CROSSINLINE     reduce using rule 8 (optionalPv -> PV .)
    IMPORT          reduce using rule 8 (optionalPv -> PV .)
    INIT            reduce using rule 8 (optionalPv -> PV .)
    NOINLINE        reduce using rule 8 (optionalPv -> PV .)
    OUT             reduce using rule 8 (optionalPv -> PV .)
    VARARG          reduce using rule 8 (optionalPv -> PV .)
    WHERE           reduce using rule 8 (optionalPv -> PV .)
    OBJECT          reduce using rule 8 (optionalPv -> PV .)
    CONST           reduce using rule 8 (optionalPv -> PV .)
    CONSTRUCTOR     reduce using rule 8 (optionalPv -> PV .)
    EOF             reduce using rule 8 (optionalPv -> PV .)
    FALSE           reduce using rule 8 (optionalPv -> PV .)
    FUNCTION        reduce using rule 8 (optionalPv -> PV .)
    NULL            reduce using rule 8 (optionalPv -> PV .)
    NULLABLE        reduce using rule 8 (optionalPv -> PV .)
    NUMBER          reduce using rule 8 (optionalPv -> PV .)
    OPERATOR        reduce using rule 8 (optionalPv -> PV .)
    SMARTCAST       reduce using rule 8 (optionalPv -> PV .)
    THIS            reduce using rule 8 (optionalPv -> PV .)
    TRUE            reduce using rule 8 (optionalPv -> PV .)
    WHEN            reduce using rule 8 (optionalPv -> PV .)
    LONG            reduce using rule 8 (optionalPv -> PV .)
    ARRAY           reduce using rule 8 (optionalPv -> PV .)
    LPAREN          reduce using rule 8 (optionalPv -> PV .)
    LITERAL_STRING  reduce using rule 8 (optionalPv -> PV .)
    LCCT            reduce using rule 8 (optionalPv -> PV .)
    IF              reduce using rule 8 (optionalPv -> PV .)
    RETURN          reduce using rule 8 (optionalPv -> PV .)
    RETURN_AT       reduce using rule 8 (optionalPv -> PV .)
    CONTINUE        reduce using rule 8 (optionalPv -> PV .)
    CONTINUE_AT     reduce using rule 8 (optionalPv -> PV .)
    BREAK           reduce using rule 8 (optionalPv -> PV .)
    BREAK_AT        reduce using rule 8 (optionalPv -> PV .)
    RCHAVE          reduce using rule 8 (optionalPv -> PV .)
    INCREMENTO      reduce using rule 8 (optionalPv -> PV .)
    DECREMENTO      reduce using rule 8 (optionalPv -> PV .)
    MINUS           reduce using rule 8 (optionalPv -> PV .)
    PLUS            reduce using rule 8 (optionalPv -> PV .)
    NOT             reduce using rule 8 (optionalPv -> PV .)
    SUSPEND         reduce using rule 8 (optionalPv -> PV .)
    COLONCOLON      reduce using rule 8 (optionalPv -> PV .)
    LCHAVE          reduce using rule 8 (optionalPv -> PV .)
    MENOR           reduce using rule 8 (optionalPv -> PV .)
    PONTO           reduce using rule 8 (optionalPv -> PV .)
    AS              reduce using rule 8 (optionalPv -> PV .)
    MAISIGUAL       reduce using rule 8 (optionalPv -> PV .)
    MENOSIGUAL      reduce using rule 8 (optionalPv -> PV .)
    MULTIGUAL       reduce using rule 8 (optionalPv -> PV .)
    DIVIGUAL        reduce using rule 8 (optionalPv -> PV .)
    MODIGUAL        reduce using rule 8 (optionalPv -> PV .)
    MULT            reduce using rule 8 (optionalPv -> PV .)
    DIVIDE          reduce using rule 8 (optionalPv -> PV .)
    MOD             reduce using rule 8 (optionalPv -> PV .)
    PONTOPONTO      reduce using rule 8 (optionalPv -> PV .)
    ELVIS           reduce using rule 8 (optionalPv -> PV .)
    IN              reduce using rule 8 (optionalPv -> PV .)
    NOT_IN          reduce using rule 8 (optionalPv -> PV .)
    IS              reduce using rule 8 (optionalPv -> PV .)
    NOT_IS          reduce using rule 8 (optionalPv -> PV .)
    MAIOR           reduce using rule 8 (optionalPv -> PV .)
    MENORIGUAL      reduce using rule 8 (optionalPv -> PV .)
    MAIORIGUAL      reduce using rule 8 (optionalPv -> PV .)
    DIFERENTE       reduce using rule 8 (optionalPv -> PV .)
    IDENTIDADE      reduce using rule 8 (optionalPv -> PV .)
    IGUALDADE       reduce using rule 8 (optionalPv -> PV .)
    SEMIDENTIDADE   reduce using rule 8 (optionalPv -> PV .)
    AND             reduce using rule 8 (optionalPv -> PV .)
    OR              reduce using rule 8 (optionalPv -> PV .)
    COMMA           reduce using rule 8 (optionalPv -> PV .)
    RPAREN          reduce using rule 8 (optionalPv -> PV .)
    RCCT            reduce using rule 8 (optionalPv -> PV .)
    PV              reduce using rule 8 (optionalPv -> PV .)
    ELSE            reduce using rule 8 (optionalPv -> PV .)


state 400

    (18) typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .

    LPAREN          reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    ID              reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    CROSSINLINE     reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    IMPORT          reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    INIT            reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    NOINLINE        reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    OUT             reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    VARARG          reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    WHERE           reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    OBJECT          reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    CONST           reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    CONSTRUCTOR     reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    EOF             reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    FALSE           reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    FUNCTION        reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    NULL            reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    NULLABLE        reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    NUMBER          reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    OPERATOR        reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    SMARTCAST       reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    THIS            reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    TRUE            reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    VAL             reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    VAR             reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    WHEN            reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    LONG            reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    ARRAY           reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)


state 401

    (20) typeParametersRecursive -> COMMA typeParameter typeParametersRecursive .

    COMMA           reduce using rule 20 (typeParametersRecursive -> COMMA typeParameter typeParametersRecursive .)
    MAIOR           reduce using rule 20 (typeParametersRecursive -> COMMA typeParameter typeParametersRecursive .)


state 402

    (85) forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN . optionalControlStructureBody
    (83) optionalControlStructureBody -> . controlStructureBody
    (84) optionalControlStructureBody -> .
    (77) controlStructureBody -> . block
    (78) controlStructureBody -> . statement
    (79) block -> . LCHAVE statements RCHAVE
    (72) statement -> . functionDeclaration
    (73) statement -> . assignment
    (74) statement -> . loopStatement
    (75) statement -> . expression
    (76) statement -> . propertyDeclaration
    (7) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (90) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (91) assignment -> . assignableExpression assignmentAndOperator expression
    (80) loopStatement -> . forStatement
    (81) loopStatement -> . whileStatement
    (82) loopStatement -> . doWhileStatement
    (12) expression -> . disjunction
    (17) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (136) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (137) directlyAssignableExpression -> . simpleIdentifier
    (138) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (140) assignableExpression -> . prefixUnaryExpression
    (141) assignableExpression -> . parenthesizedAssignableExpression
    (85) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody
    (86) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (87) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (88) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (89) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (13) varOrVal -> . VAR
    (14) varOrVal -> . VAL
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (139) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (142) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (69) receiverType -> . typeModifier parenthesizedType
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (48) typeModifier -> . SUSPEND
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type

  ! shift/reduce conflict for LCHAVE resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! reduce/reduce conflict for COLONCOLON resolved using rule 84 (optionalControlStructureBody -> .)
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
    COLONCOLON      reduce using rule 84 (optionalControlStructureBody -> .)
    MENOR           reduce using rule 84 (optionalControlStructureBody -> .)
    PONTO           reduce using rule 84 (optionalControlStructureBody -> .)
    AS              reduce using rule 84 (optionalControlStructureBody -> .)
    MAISIGUAL       reduce using rule 84 (optionalControlStructureBody -> .)
    MENOSIGUAL      reduce using rule 84 (optionalControlStructureBody -> .)
    MULTIGUAL       reduce using rule 84 (optionalControlStructureBody -> .)
    DIVIGUAL        reduce using rule 84 (optionalControlStructureBody -> .)
    MODIGUAL        reduce using rule 84 (optionalControlStructureBody -> .)
    MULT            reduce using rule 84 (optionalControlStructureBody -> .)
    DIVIDE          reduce using rule 84 (optionalControlStructureBody -> .)
    MOD             reduce using rule 84 (optionalControlStructureBody -> .)
    PONTOPONTO      reduce using rule 84 (optionalControlStructureBody -> .)
    ELVIS           reduce using rule 84 (optionalControlStructureBody -> .)
    IN              reduce using rule 84 (optionalControlStructureBody -> .)
    NOT_IN          reduce using rule 84 (optionalControlStructureBody -> .)
    IS              reduce using rule 84 (optionalControlStructureBody -> .)
    NOT_IS          reduce using rule 84 (optionalControlStructureBody -> .)
    MAIOR           reduce using rule 84 (optionalControlStructureBody -> .)
    MENORIGUAL      reduce using rule 84 (optionalControlStructureBody -> .)
    MAIORIGUAL      reduce using rule 84 (optionalControlStructureBody -> .)
    DIFERENTE       reduce using rule 84 (optionalControlStructureBody -> .)
    IDENTIDADE      reduce using rule 84 (optionalControlStructureBody -> .)
    IGUALDADE       reduce using rule 84 (optionalControlStructureBody -> .)
    SEMIDENTIDADE   reduce using rule 84 (optionalControlStructureBody -> .)
    AND             reduce using rule 84 (optionalControlStructureBody -> .)
    OR              reduce using rule 84 (optionalControlStructureBody -> .)
    COMMA           reduce using rule 84 (optionalControlStructureBody -> .)
    RPAREN          reduce using rule 84 (optionalControlStructureBody -> .)
    RCCT            reduce using rule 84 (optionalControlStructureBody -> .)
    PV              reduce using rule 84 (optionalControlStructureBody -> .)
    ELSE            reduce using rule 84 (optionalControlStructureBody -> .)
    LCHAVE          shift and go to state 43
    FUN             shift and go to state 62
    FOR             shift and go to state 75
    WHILE           shift and go to state 77
    DO              shift and go to state 78
    VAR             shift and go to state 80
    VAL             shift and go to state 81
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 76
    LITERAL_STRING  shift and go to state 86
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    RCHAVE          shift and go to state 55
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    SUSPEND         shift and go to state 48

  ! FUN             [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! FOR             [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! WHILE           [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! DO              [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! VAR             [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! VAL             [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! ID              [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! CROSSINLINE     [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! IMPORT          [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! INIT            [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! NOINLINE        [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! OUT             [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! VARARG          [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! WHERE           [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! OBJECT          [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! CONST           [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! CONSTRUCTOR     [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! EOF             [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! FALSE           [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! FUNCTION        [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! NULL            [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! NULLABLE        [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! NUMBER          [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! OPERATOR        [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! SMARTCAST       [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! THIS            [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! TRUE            [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! WHEN            [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! LONG            [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! ARRAY           [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! LPAREN          [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! LITERAL_STRING  [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! LCCT            [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! IF              [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! RETURN          [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! RETURN_AT       [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! CONTINUE        [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! CONTINUE_AT     [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! BREAK           [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! BREAK_AT        [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! RCHAVE          [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! INCREMENTO      [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! DECREMENTO      [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! MINUS           [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! PLUS            [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! NOT             [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! SUSPEND         [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! LCHAVE          [ reduce using rule 84 (optionalControlStructureBody -> .) ]
  ! COLONCOLON      [ reduce using rule 226 (optionalReceiverType -> .) ]

    expression                     shift and go to state 60
    optionalControlStructureBody   shift and go to state 412
    controlStructureBody           shift and go to state 413
    block                          shift and go to state 181
    statement                      shift and go to state 182
    functionDeclaration            shift and go to state 57
    assignment                     shift and go to state 58
    loopStatement                  shift and go to state 59
    propertyDeclaration            shift and go to state 61
    simpleIdentifier               shift and go to state 63
    directlyAssignableExpression   shift and go to state 64
    assignableExpression           shift and go to state 65
    forStatement                   shift and go to state 66
    whileStatement                 shift and go to state 67
    doWhileStatement               shift and go to state 68
    disjunction                    shift and go to state 69
    varOrVal                       shift and go to state 70
    postfixUnaryExpression         shift and go to state 71
    parenthesizedDirectlyAssignableExpression shift and go to state 72
    prefixUnaryExpression          shift and go to state 73
    parenthesizedAssignableExpression shift and go to state 74
    conjunction                    shift and go to state 79
    primaryExpression              shift and go to state 82
    prefixUnaryExpressionRecursive shift and go to state 83
    equality                       shift and go to state 84
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    unaryPrefix                    shift and go to state 92
    comparison                     shift and go to state 93
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    infixOperation                 shift and go to state 107
    receiverType                   shift and go to state 108
    elvisExpression                shift and go to state 114
    typeModifier                   shift and go to state 115
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120

state 403

    (88) doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .

    FUN             reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    FOR             reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    WHILE           reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DO              reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    VAR             reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    VAL             reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    ID              reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    CROSSINLINE     reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IMPORT          reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    INIT            reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NOINLINE        reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    OUT             reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    VARARG          reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    WHERE           reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    OBJECT          reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    CONST           reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    CONSTRUCTOR     reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    EOF             reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    FALSE           reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NULL            reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NULLABLE        reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NUMBER          reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    OPERATOR        reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    SMARTCAST       reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    THIS            reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    TRUE            reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    WHEN            reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    LONG            reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    ARRAY           reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    LPAREN          reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    LITERAL_STRING  reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    LCCT            reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IF              reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    RETURN          reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    RETURN_AT       reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    CONTINUE_AT     reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    BREAK           reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    BREAK_AT        reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    RCHAVE          reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    INCREMENTO      reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DECREMENTO      reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MINUS           reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    PLUS            reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NOT             reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    SUSPEND         reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    COLONCOLON      reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    LCHAVE          reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MENOR           reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    PONTO           reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    AS              reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MAISIGUAL       reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MENOSIGUAL      reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MULTIGUAL       reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DIVIGUAL        reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MODIGUAL        reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MULT            reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MOD             reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    PONTOPONTO      reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    ELVIS           reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IN              reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NOT_IN          reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IS              reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NOT_IS          reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MAIOR           reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MENORIGUAL      reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MAIORIGUAL      reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DIFERENTE       reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IDENTIDADE      reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IGUALDADE       reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    SEMIDENTIDADE   reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    AND             reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    OR              reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    COMMA           reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    RPAREN          reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    RCCT            reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    PV              reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    ELSE            reduce using rule 88 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)


state 404

    (164) valueArgumentsRecursive -> valueArgument COMMA valueArgumentsRecursive .

    RPAREN          reduce using rule 164 (valueArgumentsRecursive -> valueArgument COMMA valueArgumentsRecursive .)


state 405

    (167) valueArgument -> simpleIdentifier ATRIBUICAO MULT . expression
    (12) expression -> . disjunction
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 86
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 136
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 137
    SUSPEND         shift and go to state 48

    simpleIdentifier               shift and go to state 133
    expression                     shift and go to state 414
    disjunction                    shift and go to state 69
    conjunction                    shift and go to state 79
    equality                       shift and go to state 84
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 107
    elvisExpression                shift and go to state 114
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120
    prefixUnaryExpression          shift and go to state 134
    prefixUnaryExpressionRecursive shift and go to state 83
    postfixUnaryExpression         shift and go to state 135
    unaryPrefix                    shift and go to state 92
    primaryExpression              shift and go to state 82
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    receiverType                   shift and go to state 108
    typeModifier                   shift and go to state 115

state 406

    (168) valueArgument -> simpleIdentifier ATRIBUICAO expression .
    (219) jumpExpression -> expression .

  ! reduce/reduce conflict for COMMA resolved using rule 168 (valueArgument -> simpleIdentifier ATRIBUICAO expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 168 (valueArgument -> simpleIdentifier ATRIBUICAO expression .)
    COMMA           reduce using rule 168 (valueArgument -> simpleIdentifier ATRIBUICAO expression .)
    RPAREN          reduce using rule 168 (valueArgument -> simpleIdentifier ATRIBUICAO expression .)
    PLUS            reduce using rule 219 (jumpExpression -> expression .)
    MINUS           reduce using rule 219 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 219 (jumpExpression -> expression .)
    ID              reduce using rule 219 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 219 (jumpExpression -> expression .)
    IMPORT          reduce using rule 219 (jumpExpression -> expression .)
    INIT            reduce using rule 219 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 219 (jumpExpression -> expression .)
    OUT             reduce using rule 219 (jumpExpression -> expression .)
    VARARG          reduce using rule 219 (jumpExpression -> expression .)
    WHERE           reduce using rule 219 (jumpExpression -> expression .)
    OBJECT          reduce using rule 219 (jumpExpression -> expression .)
    CONST           reduce using rule 219 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 219 (jumpExpression -> expression .)
    EOF             reduce using rule 219 (jumpExpression -> expression .)
    FALSE           reduce using rule 219 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 219 (jumpExpression -> expression .)
    NULL            reduce using rule 219 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 219 (jumpExpression -> expression .)
    NUMBER          reduce using rule 219 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 219 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 219 (jumpExpression -> expression .)
    THIS            reduce using rule 219 (jumpExpression -> expression .)
    TRUE            reduce using rule 219 (jumpExpression -> expression .)
    VAL             reduce using rule 219 (jumpExpression -> expression .)
    VAR             reduce using rule 219 (jumpExpression -> expression .)
    WHEN            reduce using rule 219 (jumpExpression -> expression .)
    LONG            reduce using rule 219 (jumpExpression -> expression .)
    ARRAY           reduce using rule 219 (jumpExpression -> expression .)
    ELVIS           reduce using rule 219 (jumpExpression -> expression .)
    IN              reduce using rule 219 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 219 (jumpExpression -> expression .)
    IS              reduce using rule 219 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 219 (jumpExpression -> expression .)
    MENOR           reduce using rule 219 (jumpExpression -> expression .)
    MAIOR           reduce using rule 219 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 219 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 219 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 219 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 219 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 219 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 219 (jumpExpression -> expression .)
    AND             reduce using rule 219 (jumpExpression -> expression .)
    OR              reduce using rule 219 (jumpExpression -> expression .)
    INCREMENTO      reduce using rule 219 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 219 (jumpExpression -> expression .)
    LCCT            reduce using rule 219 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 219 (jumpExpression -> expression .)
    PONTO           reduce using rule 219 (jumpExpression -> expression .)
    LPAREN          reduce using rule 219 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 219 (jumpExpression -> expression .)
    AS              reduce using rule 219 (jumpExpression -> expression .)
    MULT            reduce using rule 219 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 219 (jumpExpression -> expression .)
    MOD             reduce using rule 219 (jumpExpression -> expression .)

  ! COMMA           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 219 (jumpExpression -> expression .) ]


state 407

    (212) ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV . ELSE controlStructureBodyOrPV

    ELSE            shift and go to state 415


state 408

    (215) optionalPV -> PV .

    ELSE            reduce using rule 215 (optionalPV -> PV .)


state 409

    (26) functionBody -> ATRIBUICAO expression .
    (219) jumpExpression -> expression .

  ! reduce/reduce conflict for FUN resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for FOR resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for DO resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for VAR resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for VAL resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for ID resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for INIT resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for OUT resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for VARARG resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for WHERE resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for CONST resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for EOF resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for FALSE resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for NULL resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for THIS resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for TRUE resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for WHEN resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for LONG resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for LCCT resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for IF resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for RETURN resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for BREAK resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for NOT resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MENOR resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for PONTO resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for AS resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MULT resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MOD resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for IN resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for IS resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for AND resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for OR resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for RCCT resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for PV resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 26 (functionBody -> ATRIBUICAO expression .)
    FUN             reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    FOR             reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    WHILE           reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    DO              reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    VAR             reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    VAL             reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    ID              reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    CROSSINLINE     reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    IMPORT          reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    INIT            reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    NOINLINE        reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    OUT             reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    VARARG          reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    WHERE           reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    OBJECT          reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    CONST           reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    CONSTRUCTOR     reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    EOF             reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    FALSE           reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    FUNCTION        reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    NULL            reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    NULLABLE        reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    NUMBER          reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    OPERATOR        reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    SMARTCAST       reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    THIS            reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    TRUE            reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    WHEN            reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    LONG            reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    ARRAY           reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    LPAREN          reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    LITERAL_STRING  reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    LCCT            reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    IF              reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    RETURN          reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    RETURN_AT       reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    CONTINUE        reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    CONTINUE_AT     reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    BREAK           reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    BREAK_AT        reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    RCHAVE          reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    INCREMENTO      reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    DECREMENTO      reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    MINUS           reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    PLUS            reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    NOT             reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    SUSPEND         reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    COLONCOLON      reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    LCHAVE          reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    MENOR           reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    PONTO           reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    AS              reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    MAISIGUAL       reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    MENOSIGUAL      reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    MULTIGUAL       reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    DIVIGUAL        reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    MODIGUAL        reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    MULT            reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    DIVIDE          reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    MOD             reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    PONTOPONTO      reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    ELVIS           reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    IN              reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    NOT_IN          reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    IS              reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    NOT_IS          reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    MAIOR           reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    MENORIGUAL      reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    MAIORIGUAL      reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    DIFERENTE       reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    IDENTIDADE      reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    IGUALDADE       reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    SEMIDENTIDADE   reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    AND             reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    OR              reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    COMMA           reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    RPAREN          reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    RCCT            reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    PV              reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    ELSE            reduce using rule 26 (functionBody -> ATRIBUICAO expression .)

  ! FUN             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! FOR             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! WHILE           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DO              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! VAR             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! VAL             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! ID              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CROSSINLINE     [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IMPORT          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! INIT            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NOINLINE        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! OUT             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! VARARG          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! WHERE           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! OBJECT          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CONST           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CONSTRUCTOR     [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! EOF             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! FALSE           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! FUNCTION        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NULL            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NULLABLE        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NUMBER          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! OPERATOR        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! SMARTCAST       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! THIS            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! TRUE            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! WHEN            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LONG            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! ARRAY           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LPAREN          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LITERAL_STRING  [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LCCT            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IF              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RETURN          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RETURN_AT       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CONTINUE        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! CONTINUE_AT     [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! BREAK           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! BREAK_AT        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RCHAVE          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! INCREMENTO      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DECREMENTO      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MINUS           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! PLUS            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NOT             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! SUSPEND         [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! COLONCOLON      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! LCHAVE          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MENOR           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! PONTO           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! AS              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MAISIGUAL       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MENOSIGUAL      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MULTIGUAL       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DIVIGUAL        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MODIGUAL        [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MULT            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DIVIDE          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MOD             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! PONTOPONTO      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! ELVIS           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IN              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NOT_IN          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IS              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! NOT_IS          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MAIOR           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MENORIGUAL      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! MAIORIGUAL      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! DIFERENTE       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IDENTIDADE      [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! IGUALDADE       [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! AND             [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! OR              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! COMMA           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RCCT            [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! PV              [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! ELSE            [ reduce using rule 219 (jumpExpression -> expression .) ]


state 410

    (210) typeConstraints -> simpleIdentifier DOISP type .

    ATRIBUICAO      reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    LCHAVE          reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    INCREMENTO      reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    DECREMENTO      reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    MENOR           reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    LCCT            reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    COLONCOLON      reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    PONTO           reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    LPAREN          reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    RCHAVE          reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    AS              reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    MAISIGUAL       reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    MENOSIGUAL      reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    MULTIGUAL       reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    DIVIGUAL        reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    MODIGUAL        reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    MULT            reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    DIVIDE          reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    MOD             reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    PLUS            reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    MINUS           reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    PONTOPONTO      reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    ID              reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    CROSSINLINE     reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    IMPORT          reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    INIT            reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    NOINLINE        reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    OUT             reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    VARARG          reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    WHERE           reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    OBJECT          reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    CONST           reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    CONSTRUCTOR     reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    EOF             reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    FALSE           reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    FUNCTION        reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    NULL            reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    NULLABLE        reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    NUMBER          reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    OPERATOR        reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    SMARTCAST       reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    THIS            reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    TRUE            reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    VAL             reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    VAR             reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    WHEN            reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    LONG            reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    ARRAY           reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    ELVIS           reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    IN              reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    NOT_IN          reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    IS              reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    NOT_IS          reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    MAIOR           reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    MENORIGUAL      reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    MAIORIGUAL      reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    DIFERENTE       reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    IDENTIDADE      reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    IGUALDADE       reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    SEMIDENTIDADE   reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    AND             reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    OR              reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    FUN             reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    FOR             reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    WHILE           reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    DO              reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    LITERAL_STRING  reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    IF              reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    RETURN          reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    RETURN_AT       reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    CONTINUE        reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    CONTINUE_AT     reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    BREAK           reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    BREAK_AT        reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    NOT             reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    SUSPEND         reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    COMMA           reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    RPAREN          reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    RCCT            reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    PV              reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)
    ELSE            reduce using rule 210 (typeConstraints -> simpleIdentifier DOISP type .)


state 411

    (186) parametersWithOptionalTypeRecursive -> parameterWithOptionalType COMMA parametersWithOptionalTypeRecursive COMMA .

    RPAREN          reduce using rule 186 (parametersWithOptionalTypeRecursive -> parameterWithOptionalType COMMA parametersWithOptionalTypeRecursive COMMA .)
    COMMA           reduce using rule 186 (parametersWithOptionalTypeRecursive -> parameterWithOptionalType COMMA parametersWithOptionalTypeRecursive COMMA .)


state 412

    (85) forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .

    FUN             reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    FOR             reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    WHILE           reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    DO              reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    VAR             reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    VAL             reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    ID              reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    CROSSINLINE     reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    IMPORT          reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    INIT            reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    NOINLINE        reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    OUT             reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    VARARG          reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    WHERE           reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    OBJECT          reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    CONST           reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    CONSTRUCTOR     reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    EOF             reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    FALSE           reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    FUNCTION        reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    NULL            reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    NULLABLE        reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    NUMBER          reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    OPERATOR        reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    SMARTCAST       reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    THIS            reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    TRUE            reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    WHEN            reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    LONG            reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    ARRAY           reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    LPAREN          reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    LITERAL_STRING  reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    LCCT            reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    IF              reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    RETURN          reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    RETURN_AT       reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    CONTINUE        reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    CONTINUE_AT     reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    BREAK           reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    BREAK_AT        reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    RCHAVE          reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    INCREMENTO      reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    DECREMENTO      reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    MINUS           reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    PLUS            reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    NOT             reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    SUSPEND         reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    COLONCOLON      reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    LCHAVE          reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    MENOR           reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    PONTO           reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    AS              reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    MAISIGUAL       reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    MENOSIGUAL      reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    MULTIGUAL       reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    DIVIGUAL        reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    MODIGUAL        reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    MULT            reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    DIVIDE          reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    MOD             reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    PONTOPONTO      reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    ELVIS           reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    IN              reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    NOT_IN          reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    IS              reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    NOT_IS          reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    MAIOR           reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    MENORIGUAL      reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    MAIORIGUAL      reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    DIFERENTE       reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    IDENTIDADE      reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    IGUALDADE       reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    SEMIDENTIDADE   reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    AND             reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    OR              reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    COMMA           reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    RPAREN          reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    RCCT            reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    PV              reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)
    ELSE            reduce using rule 85 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody .)


state 413

    (83) optionalControlStructureBody -> controlStructureBody .

    FUN             reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    FOR             reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    WHILE           reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    DO              reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    VAR             reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    VAL             reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    ID              reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    CROSSINLINE     reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    IMPORT          reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    INIT            reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    NOINLINE        reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    OUT             reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    VARARG          reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    WHERE           reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    OBJECT          reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    CONST           reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    CONSTRUCTOR     reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    EOF             reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    FALSE           reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    FUNCTION        reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    NULL            reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    NULLABLE        reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    NUMBER          reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    OPERATOR        reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    SMARTCAST       reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    THIS            reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    TRUE            reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    WHEN            reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    LONG            reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    ARRAY           reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    LPAREN          reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    LITERAL_STRING  reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    LCCT            reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    IF              reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    RETURN          reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    RETURN_AT       reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    CONTINUE        reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    CONTINUE_AT     reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    BREAK           reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    BREAK_AT        reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    RCHAVE          reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    INCREMENTO      reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    DECREMENTO      reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    MINUS           reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    PLUS            reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    NOT             reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    SUSPEND         reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    COLONCOLON      reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    LCHAVE          reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    MENOR           reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    PONTO           reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    AS              reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    MAISIGUAL       reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    MENOSIGUAL      reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    MULTIGUAL       reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    DIVIGUAL        reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    MODIGUAL        reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    MULT            reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    DIVIDE          reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    MOD             reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    PONTOPONTO      reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    ELVIS           reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    IN              reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    NOT_IN          reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    IS              reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    NOT_IS          reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    MAIOR           reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    MENORIGUAL      reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    MAIORIGUAL      reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    DIFERENTE       reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    IDENTIDADE      reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    IGUALDADE       reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    SEMIDENTIDADE   reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    AND             reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    OR              reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    COMMA           reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    RPAREN          reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    RCCT            reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    PV              reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)
    ELSE            reduce using rule 83 (optionalControlStructureBody -> controlStructureBody .)


state 414

    (167) valueArgument -> simpleIdentifier ATRIBUICAO MULT expression .
    (219) jumpExpression -> expression .

  ! reduce/reduce conflict for COMMA resolved using rule 167 (valueArgument -> simpleIdentifier ATRIBUICAO MULT expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 167 (valueArgument -> simpleIdentifier ATRIBUICAO MULT expression .)
    COMMA           reduce using rule 167 (valueArgument -> simpleIdentifier ATRIBUICAO MULT expression .)
    RPAREN          reduce using rule 167 (valueArgument -> simpleIdentifier ATRIBUICAO MULT expression .)
    INCREMENTO      reduce using rule 219 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 219 (jumpExpression -> expression .)
    MENOR           reduce using rule 219 (jumpExpression -> expression .)
    LCCT            reduce using rule 219 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 219 (jumpExpression -> expression .)
    PONTO           reduce using rule 219 (jumpExpression -> expression .)
    LPAREN          reduce using rule 219 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 219 (jumpExpression -> expression .)
    AS              reduce using rule 219 (jumpExpression -> expression .)
    MULT            reduce using rule 219 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 219 (jumpExpression -> expression .)
    MOD             reduce using rule 219 (jumpExpression -> expression .)
    PLUS            reduce using rule 219 (jumpExpression -> expression .)
    MINUS           reduce using rule 219 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 219 (jumpExpression -> expression .)
    ID              reduce using rule 219 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 219 (jumpExpression -> expression .)
    IMPORT          reduce using rule 219 (jumpExpression -> expression .)
    INIT            reduce using rule 219 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 219 (jumpExpression -> expression .)
    OUT             reduce using rule 219 (jumpExpression -> expression .)
    VARARG          reduce using rule 219 (jumpExpression -> expression .)
    WHERE           reduce using rule 219 (jumpExpression -> expression .)
    OBJECT          reduce using rule 219 (jumpExpression -> expression .)
    CONST           reduce using rule 219 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 219 (jumpExpression -> expression .)
    EOF             reduce using rule 219 (jumpExpression -> expression .)
    FALSE           reduce using rule 219 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 219 (jumpExpression -> expression .)
    NULL            reduce using rule 219 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 219 (jumpExpression -> expression .)
    NUMBER          reduce using rule 219 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 219 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 219 (jumpExpression -> expression .)
    THIS            reduce using rule 219 (jumpExpression -> expression .)
    TRUE            reduce using rule 219 (jumpExpression -> expression .)
    VAL             reduce using rule 219 (jumpExpression -> expression .)
    VAR             reduce using rule 219 (jumpExpression -> expression .)
    WHEN            reduce using rule 219 (jumpExpression -> expression .)
    LONG            reduce using rule 219 (jumpExpression -> expression .)
    ARRAY           reduce using rule 219 (jumpExpression -> expression .)
    ELVIS           reduce using rule 219 (jumpExpression -> expression .)
    IN              reduce using rule 219 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 219 (jumpExpression -> expression .)
    IS              reduce using rule 219 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 219 (jumpExpression -> expression .)
    MAIOR           reduce using rule 219 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 219 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 219 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 219 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 219 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 219 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 219 (jumpExpression -> expression .)
    AND             reduce using rule 219 (jumpExpression -> expression .)
    OR              reduce using rule 219 (jumpExpression -> expression .)

  ! COMMA           [ reduce using rule 219 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 219 (jumpExpression -> expression .) ]


state 415

    (212) ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE . controlStructureBodyOrPV
    (213) controlStructureBodyOrPV -> . controlStructureBody
    (214) controlStructureBodyOrPV -> . PV
    (77) controlStructureBody -> . block
    (78) controlStructureBody -> . statement
    (79) block -> . LCHAVE statements RCHAVE
    (72) statement -> . functionDeclaration
    (73) statement -> . assignment
    (74) statement -> . loopStatement
    (75) statement -> . expression
    (76) statement -> . propertyDeclaration
    (7) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (90) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (91) assignment -> . assignableExpression assignmentAndOperator expression
    (80) loopStatement -> . forStatement
    (81) loopStatement -> . whileStatement
    (82) loopStatement -> . doWhileStatement
    (12) expression -> . disjunction
    (17) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (136) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (137) directlyAssignableExpression -> . simpleIdentifier
    (138) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (140) assignableExpression -> . prefixUnaryExpression
    (141) assignableExpression -> . parenthesizedAssignableExpression
    (85) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN optionalControlStructureBody
    (86) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (87) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (88) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (89) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (92) disjunction -> . conjunction
    (93) disjunction -> . conjunction OR disjunction
    (13) varOrVal -> . VAR
    (14) varOrVal -> . VAL
    (129) postfixUnaryExpression -> . primaryExpression
    (130) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (263) simpleIdentifier -> . ID
    (264) simpleIdentifier -> . CROSSINLINE
    (265) simpleIdentifier -> . IMPORT
    (266) simpleIdentifier -> . INIT
    (267) simpleIdentifier -> . NOINLINE
    (268) simpleIdentifier -> . OUT
    (269) simpleIdentifier -> . VARARG
    (270) simpleIdentifier -> . WHERE
    (271) simpleIdentifier -> . OBJECT
    (272) simpleIdentifier -> . CONST
    (273) simpleIdentifier -> . CONSTRUCTOR
    (274) simpleIdentifier -> . EOF
    (275) simpleIdentifier -> . FALSE
    (276) simpleIdentifier -> . FUNCTION
    (277) simpleIdentifier -> . NULL
    (278) simpleIdentifier -> . NULLABLE
    (279) simpleIdentifier -> . NUMBER
    (280) simpleIdentifier -> . OPERATOR
    (281) simpleIdentifier -> . SMARTCAST
    (282) simpleIdentifier -> . THIS
    (283) simpleIdentifier -> . TRUE
    (284) simpleIdentifier -> . VAL
    (285) simpleIdentifier -> . VAR
    (286) simpleIdentifier -> . WHEN
    (287) simpleIdentifier -> . LONG
    (288) simpleIdentifier -> . ARRAY
    (139) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (120) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (121) prefixUnaryExpression -> . postfixUnaryExpression
    (142) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (94) conjunction -> . equality
    (95) conjunction -> . equality AND conjunction
    (170) primaryExpression -> . parenthesizedExpression
    (171) primaryExpression -> . simpleIdentifier
    (172) primaryExpression -> . LITERAL_STRING
    (173) primaryExpression -> . callableReference
    (174) primaryExpression -> . functionLiteral
    (175) primaryExpression -> . collectionLiteral
    (176) primaryExpression -> . ifExpression
    (177) primaryExpression -> . jumpExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (96) equality -> . comparison
    (97) equality -> . comparison equalityOperator equality
    (178) parenthesizedExpression -> . LPAREN expression RPAREN
    (224) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (179) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (180) collectionLiteral -> . LCCT RCCT
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (212) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (217) jumpExpression -> . RETURN expression
    (218) jumpExpression -> . RETURN_AT expression
    (219) jumpExpression -> . expression
    (220) jumpExpression -> . CONTINUE
    (221) jumpExpression -> . CONTINUE_AT
    (222) jumpExpression -> . BREAK
    (223) jumpExpression -> . BREAK_AT
    (122) unaryPrefix -> . label
    (123) unaryPrefix -> . prefixUnaryOperator
    (98) comparison -> . infixOperation
    (99) comparison -> . infixOperation comparisonOperator infixOperation
    (225) optionalReceiverType -> . receiverType
    (226) optionalReceiverType -> .
    (193) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (207) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (126) label -> . simpleIdentifier
    (253) prefixUnaryOperator -> . INCREMENTO
    (254) prefixUnaryOperator -> . DECREMENTO
    (255) prefixUnaryOperator -> . MINUS
    (256) prefixUnaryOperator -> . PLUS
    (257) prefixUnaryOperator -> . NOT
    (100) infixOperation -> . elvisExpression infixOperationRecursive
    (101) infixOperation -> . elvisExpression
    (69) receiverType -> . typeModifier parenthesizedType
    (108) elvisExpression -> . infixFunctionCall
    (109) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (48) typeModifier -> . SUSPEND
    (110) infixFunctionCall -> . rangeExpression
    (111) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (112) rangeExpression -> . additiveExpression
    (113) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (114) additiveExpression -> . multiplicativeExpression
    (115) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (116) multiplicativeExpression -> . asExpression
    (117) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (118) asExpression -> . prefixUnaryExpression
    (119) asExpression -> . prefixUnaryExpression asOperator type

    PV              shift and go to state 387
    LCHAVE          shift and go to state 43
    FUN             shift and go to state 62
    FOR             shift and go to state 75
    WHILE           shift and go to state 77
    DO              shift and go to state 78
    VAR             shift and go to state 80
    VAL             shift and go to state 81
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 76
    LITERAL_STRING  shift and go to state 86
    LCCT            shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    RETURN_AT       shift and go to state 100
    CONTINUE        shift and go to state 101
    CONTINUE_AT     shift and go to state 102
    BREAK           shift and go to state 103
    BREAK_AT        shift and go to state 104
    COLONCOLON      reduce using rule 226 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    INCREMENTO      shift and go to state 109
    DECREMENTO      shift and go to state 110
    MINUS           shift and go to state 111
    PLUS            shift and go to state 112
    NOT             shift and go to state 113
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 60
    controlStructureBodyOrPV       shift and go to state 416
    controlStructureBody           shift and go to state 417
    block                          shift and go to state 181
    statement                      shift and go to state 182
    functionDeclaration            shift and go to state 57
    assignment                     shift and go to state 58
    loopStatement                  shift and go to state 59
    propertyDeclaration            shift and go to state 61
    simpleIdentifier               shift and go to state 63
    directlyAssignableExpression   shift and go to state 64
    assignableExpression           shift and go to state 65
    forStatement                   shift and go to state 66
    whileStatement                 shift and go to state 67
    doWhileStatement               shift and go to state 68
    disjunction                    shift and go to state 69
    varOrVal                       shift and go to state 70
    postfixUnaryExpression         shift and go to state 71
    parenthesizedDirectlyAssignableExpression shift and go to state 72
    prefixUnaryExpression          shift and go to state 73
    parenthesizedAssignableExpression shift and go to state 74
    conjunction                    shift and go to state 79
    primaryExpression              shift and go to state 82
    prefixUnaryExpressionRecursive shift and go to state 83
    equality                       shift and go to state 84
    parenthesizedExpression        shift and go to state 85
    callableReference              shift and go to state 87
    functionLiteral                shift and go to state 88
    collectionLiteral              shift and go to state 89
    ifExpression                   shift and go to state 90
    jumpExpression                 shift and go to state 91
    unaryPrefix                    shift and go to state 92
    comparison                     shift and go to state 93
    optionalReceiverType           shift and go to state 94
    lambdaLiteral                  shift and go to state 95
    anonymousFunction              shift and go to state 96
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    infixOperation                 shift and go to state 107
    receiverType                   shift and go to state 108
    elvisExpression                shift and go to state 114
    typeModifier                   shift and go to state 115
    infixFunctionCall              shift and go to state 116
    rangeExpression                shift and go to state 117
    additiveExpression             shift and go to state 118
    multiplicativeExpression       shift and go to state 119
    asExpression                   shift and go to state 120

state 416

    (212) ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .

    INCREMENTO      reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    DECREMENTO      reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MENOR           reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    LCCT            reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    COLONCOLON      reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    PONTO           reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    LPAREN          reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    RCHAVE          reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    AS              reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MAISIGUAL       reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MENOSIGUAL      reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MULTIGUAL       reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    DIVIGUAL        reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MODIGUAL        reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MULT            reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    DIVIDE          reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MOD             reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    PLUS            reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MINUS           reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    PONTOPONTO      reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    ID              reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    CROSSINLINE     reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    IMPORT          reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    INIT            reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    NOINLINE        reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    OUT             reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    VARARG          reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    WHERE           reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    OBJECT          reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    CONST           reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    CONSTRUCTOR     reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    EOF             reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    FALSE           reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    FUNCTION        reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    NULL            reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    NULLABLE        reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    NUMBER          reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    OPERATOR        reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    SMARTCAST       reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    THIS            reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    TRUE            reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    VAL             reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    VAR             reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    WHEN            reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    LONG            reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    ARRAY           reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    ELVIS           reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    IN              reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    NOT_IN          reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    IS              reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    NOT_IS          reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MAIOR           reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MENORIGUAL      reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MAIORIGUAL      reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    DIFERENTE       reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    IDENTIDADE      reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    IGUALDADE       reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    SEMIDENTIDADE   reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    AND             reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    OR              reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    FUN             reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    FOR             reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    WHILE           reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    DO              reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    LITERAL_STRING  reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    IF              reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    RETURN          reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    RETURN_AT       reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    CONTINUE        reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    CONTINUE_AT     reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    BREAK           reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    BREAK_AT        reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    NOT             reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    SUSPEND         reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    COMMA           reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    RPAREN          reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    LCHAVE          reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    RCCT            reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    PV              reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    ELSE            reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)


state 417

    (213) controlStructureBodyOrPV -> controlStructureBody .

    FUN             reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    FOR             reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    WHILE           reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    DO              reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    VAR             reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    VAL             reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    ID              reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    CROSSINLINE     reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    IMPORT          reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    INIT            reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    NOINLINE        reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    OUT             reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    VARARG          reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    WHERE           reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    OBJECT          reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    CONST           reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    CONSTRUCTOR     reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    EOF             reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    FALSE           reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    FUNCTION        reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    NULL            reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    NULLABLE        reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    NUMBER          reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    OPERATOR        reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    SMARTCAST       reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    THIS            reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    TRUE            reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    WHEN            reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    LONG            reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    ARRAY           reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    LPAREN          reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    LITERAL_STRING  reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    LCCT            reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    IF              reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    RETURN          reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    RETURN_AT       reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    CONTINUE        reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    CONTINUE_AT     reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    BREAK           reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    BREAK_AT        reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    RCHAVE          reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    INCREMENTO      reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    DECREMENTO      reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    MINUS           reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    PLUS            reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    NOT             reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    SUSPEND         reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    COLONCOLON      reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    LCHAVE          reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    MENOR           reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    PONTO           reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    AS              reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    MAISIGUAL       reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    MENOSIGUAL      reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    MULTIGUAL       reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    DIVIGUAL        reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    MODIGUAL        reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    MULT            reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    DIVIDE          reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    MOD             reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    PONTOPONTO      reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    ELVIS           reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    IN              reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    NOT_IN          reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    IS              reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    NOT_IS          reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    MAIOR           reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    MENORIGUAL      reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    MAIORIGUAL      reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    DIFERENTE       reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    IDENTIDADE      reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    IGUALDADE       reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    SEMIDENTIDADE   reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    AND             reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    OR              reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    COMMA           reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    RPAREN          reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    RCCT            reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    PV              reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)
    ELSE            reduce using rule 213 (controlStructureBodyOrPV -> controlStructureBody .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LCHAVE in state 34 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 35 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 47 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 53 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 56 resolved as shift
WARNING: shift/reduce conflict for ID in state 62 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 62 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 62 resolved as shift
WARNING: shift/reduce conflict for INIT in state 62 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 62 resolved as shift
WARNING: shift/reduce conflict for OUT in state 62 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 62 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 62 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 62 resolved as shift
WARNING: shift/reduce conflict for CONST in state 62 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 62 resolved as shift
WARNING: shift/reduce conflict for EOF in state 62 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 62 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 62 resolved as shift
WARNING: shift/reduce conflict for NULL in state 62 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 62 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 62 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 62 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 62 resolved as shift
WARNING: shift/reduce conflict for THIS in state 62 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 62 resolved as shift
WARNING: shift/reduce conflict for VAL in state 62 resolved as shift
WARNING: shift/reduce conflict for VAR in state 62 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 62 resolved as shift
WARNING: shift/reduce conflict for LONG in state 62 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 62 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 62 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 71 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 71 resolved as shift
WARNING: shift/reduce conflict for COLONCOLON in state 71 resolved as shift
WARNING: shift/reduce conflict for PONTO in state 71 resolved as shift
WARNING: shift/reduce conflict for AS in state 73 resolved as shift
WARNING: shift/reduce conflict for OR in state 79 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 82 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 82 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 82 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 82 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 82 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 82 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 82 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 82 resolved as shift
WARNING: shift/reduce conflict for COLONCOLON in state 82 resolved as shift
WARNING: shift/reduce conflict for PONTO in state 82 resolved as shift
WARNING: shift/reduce conflict for AND in state 84 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 92 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 92 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 92 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 92 resolved as shift
WARNING: shift/reduce conflict for NOT in state 92 resolved as shift
WARNING: shift/reduce conflict for ID in state 92 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 92 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 92 resolved as shift
WARNING: shift/reduce conflict for INIT in state 92 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 92 resolved as shift
WARNING: shift/reduce conflict for OUT in state 92 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 92 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 92 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 92 resolved as shift
WARNING: shift/reduce conflict for CONST in state 92 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 92 resolved as shift
WARNING: shift/reduce conflict for EOF in state 92 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 92 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 92 resolved as shift
WARNING: shift/reduce conflict for NULL in state 92 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 92 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 92 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 92 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 92 resolved as shift
WARNING: shift/reduce conflict for THIS in state 92 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 92 resolved as shift
WARNING: shift/reduce conflict for VAL in state 92 resolved as shift
WARNING: shift/reduce conflict for VAR in state 92 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 92 resolved as shift
WARNING: shift/reduce conflict for LONG in state 92 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 92 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 93 resolved as shift
WARNING: shift/reduce conflict for IDENTIDADE in state 93 resolved as shift
WARNING: shift/reduce conflict for IGUALDADE in state 93 resolved as shift
WARNING: shift/reduce conflict for SEMIDENTIDADE in state 93 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 107 resolved as shift
WARNING: shift/reduce conflict for MAIOR in state 107 resolved as shift
WARNING: shift/reduce conflict for MENORIGUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for MAIORIGUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for IN in state 114 resolved as shift
WARNING: shift/reduce conflict for NOT_IN in state 114 resolved as shift
WARNING: shift/reduce conflict for IS in state 114 resolved as shift
WARNING: shift/reduce conflict for NOT_IS in state 114 resolved as shift
WARNING: shift/reduce conflict for ELVIS in state 116 resolved as shift
WARNING: shift/reduce conflict for ID in state 117 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 117 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 117 resolved as shift
WARNING: shift/reduce conflict for INIT in state 117 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 117 resolved as shift
WARNING: shift/reduce conflict for OUT in state 117 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 117 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 117 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 117 resolved as shift
WARNING: shift/reduce conflict for CONST in state 117 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 117 resolved as shift
WARNING: shift/reduce conflict for EOF in state 117 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 117 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 117 resolved as shift
WARNING: shift/reduce conflict for NULL in state 117 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 117 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 117 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 117 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 117 resolved as shift
WARNING: shift/reduce conflict for THIS in state 117 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 117 resolved as shift
WARNING: shift/reduce conflict for VAL in state 117 resolved as shift
WARNING: shift/reduce conflict for VAR in state 117 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 117 resolved as shift
WARNING: shift/reduce conflict for LONG in state 117 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 117 resolved as shift
WARNING: shift/reduce conflict for PONTOPONTO in state 118 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 119 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 119 resolved as shift
WARNING: shift/reduce conflict for MULT in state 120 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 120 resolved as shift
WARNING: shift/reduce conflict for MOD in state 120 resolved as shift
WARNING: shift/reduce conflict for ID in state 125 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 125 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 125 resolved as shift
WARNING: shift/reduce conflict for INIT in state 125 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 125 resolved as shift
WARNING: shift/reduce conflict for OUT in state 125 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 125 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 125 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 125 resolved as shift
WARNING: shift/reduce conflict for CONST in state 125 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 125 resolved as shift
WARNING: shift/reduce conflict for EOF in state 125 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 125 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 125 resolved as shift
WARNING: shift/reduce conflict for NULL in state 125 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 125 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 125 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 125 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 125 resolved as shift
WARNING: shift/reduce conflict for THIS in state 125 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 125 resolved as shift
WARNING: shift/reduce conflict for VAL in state 125 resolved as shift
WARNING: shift/reduce conflict for VAR in state 125 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 125 resolved as shift
WARNING: shift/reduce conflict for LONG in state 125 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 125 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 125 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 129 resolved as shift
WARNING: shift/reduce conflict for AS in state 134 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 137 resolved as shift
WARNING: shift/reduce conflict for OUT in state 166 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 166 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 172 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 177 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 185 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 185 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 185 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 185 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 185 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 185 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 185 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 185 resolved as shift
WARNING: shift/reduce conflict for COLONCOLON in state 185 resolved as shift
WARNING: shift/reduce conflict for PONTO in state 185 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 193 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 207 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 217 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 217 resolved as shift
WARNING: shift/reduce conflict for ID in state 217 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 217 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 217 resolved as shift
WARNING: shift/reduce conflict for INIT in state 217 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 217 resolved as shift
WARNING: shift/reduce conflict for OUT in state 217 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 217 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 217 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 217 resolved as shift
WARNING: shift/reduce conflict for CONST in state 217 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 217 resolved as shift
WARNING: shift/reduce conflict for EOF in state 217 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 217 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 217 resolved as shift
WARNING: shift/reduce conflict for NULL in state 217 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 217 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 217 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 217 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 217 resolved as shift
WARNING: shift/reduce conflict for THIS in state 217 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 217 resolved as shift
WARNING: shift/reduce conflict for VAL in state 217 resolved as shift
WARNING: shift/reduce conflict for VAR in state 217 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 217 resolved as shift
WARNING: shift/reduce conflict for LONG in state 217 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 217 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 225 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 236 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 237 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 240 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 247 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 253 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 253 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 253 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 267 resolved as shift
WARNING: shift/reduce conflict for OUT in state 269 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 269 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 275 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 284 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 289 resolved as shift
WARNING: shift/reduce conflict for OR in state 292 resolved as shift
WARNING: shift/reduce conflict for AND in state 293 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 299 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 300 resolved as shift
WARNING: shift/reduce conflict for MAIOR in state 300 resolved as shift
WARNING: shift/reduce conflict for MENORIGUAL in state 300 resolved as shift
WARNING: shift/reduce conflict for MAIORIGUAL in state 300 resolved as shift
WARNING: shift/reduce conflict for IN in state 301 resolved as shift
WARNING: shift/reduce conflict for NOT_IN in state 301 resolved as shift
WARNING: shift/reduce conflict for IS in state 301 resolved as shift
WARNING: shift/reduce conflict for NOT_IS in state 301 resolved as shift
WARNING: shift/reduce conflict for IN in state 302 resolved as shift
WARNING: shift/reduce conflict for NOT_IN in state 302 resolved as shift
WARNING: shift/reduce conflict for IS in state 302 resolved as shift
WARNING: shift/reduce conflict for NOT_IS in state 302 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 304 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 304 resolved as shift
WARNING: shift/reduce conflict for IN in state 306 resolved as shift
WARNING: shift/reduce conflict for NOT_IN in state 306 resolved as shift
WARNING: shift/reduce conflict for IS in state 306 resolved as shift
WARNING: shift/reduce conflict for NOT_IS in state 306 resolved as shift
WARNING: shift/reduce conflict for ELVIS in state 307 resolved as shift
WARNING: shift/reduce conflict for ID in state 308 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 308 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 308 resolved as shift
WARNING: shift/reduce conflict for INIT in state 308 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 308 resolved as shift
WARNING: shift/reduce conflict for OUT in state 308 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 308 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 308 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 308 resolved as shift
WARNING: shift/reduce conflict for CONST in state 308 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 308 resolved as shift
WARNING: shift/reduce conflict for EOF in state 308 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 308 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 308 resolved as shift
WARNING: shift/reduce conflict for NULL in state 308 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 308 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 308 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 308 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 308 resolved as shift
WARNING: shift/reduce conflict for THIS in state 308 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 308 resolved as shift
WARNING: shift/reduce conflict for VAL in state 308 resolved as shift
WARNING: shift/reduce conflict for VAR in state 308 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 308 resolved as shift
WARNING: shift/reduce conflict for LONG in state 308 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 308 resolved as shift
WARNING: shift/reduce conflict for PONTOPONTO in state 309 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 310 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 310 resolved as shift
WARNING: shift/reduce conflict for ID in state 313 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 313 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 313 resolved as shift
WARNING: shift/reduce conflict for INIT in state 313 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 313 resolved as shift
WARNING: shift/reduce conflict for OUT in state 313 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 313 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 313 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 313 resolved as shift
WARNING: shift/reduce conflict for CONST in state 313 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 313 resolved as shift
WARNING: shift/reduce conflict for EOF in state 313 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 313 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 313 resolved as shift
WARNING: shift/reduce conflict for NULL in state 313 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 313 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 313 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 313 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 313 resolved as shift
WARNING: shift/reduce conflict for THIS in state 313 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 313 resolved as shift
WARNING: shift/reduce conflict for VAL in state 313 resolved as shift
WARNING: shift/reduce conflict for VAR in state 313 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 313 resolved as shift
WARNING: shift/reduce conflict for LONG in state 313 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 313 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 313 resolved as shift
WARNING: shift/reduce conflict for ID in state 315 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 315 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 315 resolved as shift
WARNING: shift/reduce conflict for INIT in state 315 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 315 resolved as shift
WARNING: shift/reduce conflict for OUT in state 315 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 315 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 315 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 315 resolved as shift
WARNING: shift/reduce conflict for CONST in state 315 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 315 resolved as shift
WARNING: shift/reduce conflict for EOF in state 315 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 315 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 315 resolved as shift
WARNING: shift/reduce conflict for NULL in state 315 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 315 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 315 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 315 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 315 resolved as shift
WARNING: shift/reduce conflict for THIS in state 315 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 315 resolved as shift
WARNING: shift/reduce conflict for VAL in state 315 resolved as shift
WARNING: shift/reduce conflict for VAR in state 315 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 315 resolved as shift
WARNING: shift/reduce conflict for LONG in state 315 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 315 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 315 resolved as shift
WARNING: shift/reduce conflict for ID in state 322 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 322 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 322 resolved as shift
WARNING: shift/reduce conflict for INIT in state 322 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 322 resolved as shift
WARNING: shift/reduce conflict for OUT in state 322 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 322 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 322 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 322 resolved as shift
WARNING: shift/reduce conflict for CONST in state 322 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 322 resolved as shift
WARNING: shift/reduce conflict for EOF in state 322 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 322 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 322 resolved as shift
WARNING: shift/reduce conflict for NULL in state 322 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 322 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 322 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 322 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 322 resolved as shift
WARNING: shift/reduce conflict for THIS in state 322 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 322 resolved as shift
WARNING: shift/reduce conflict for VAL in state 322 resolved as shift
WARNING: shift/reduce conflict for VAR in state 322 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 322 resolved as shift
WARNING: shift/reduce conflict for LONG in state 322 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 322 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 325 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 334 resolved as shift
WARNING: shift/reduce conflict for OUT in state 336 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 336 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 338 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 347 resolved as shift
WARNING: shift/reduce conflict for PV in state 356 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 360 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 360 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 362 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 364 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 368 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 368 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 368 resolved as shift
WARNING: shift/reduce conflict for PV in state 370 resolved as shift
WARNING: shift/reduce conflict for PV in state 370 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 372 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 376 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 379 resolved as shift
WARNING: shift/reduce conflict for PV in state 380 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 380 resolved as shift
WARNING: shift/reduce conflict for FUN in state 380 resolved as shift
WARNING: shift/reduce conflict for FOR in state 380 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 380 resolved as shift
WARNING: shift/reduce conflict for DO in state 380 resolved as shift
WARNING: shift/reduce conflict for VAR in state 380 resolved as shift
WARNING: shift/reduce conflict for VAL in state 380 resolved as shift
WARNING: shift/reduce conflict for ID in state 380 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 380 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 380 resolved as shift
WARNING: shift/reduce conflict for INIT in state 380 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 380 resolved as shift
WARNING: shift/reduce conflict for OUT in state 380 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 380 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 380 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 380 resolved as shift
WARNING: shift/reduce conflict for CONST in state 380 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 380 resolved as shift
WARNING: shift/reduce conflict for EOF in state 380 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 380 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 380 resolved as shift
WARNING: shift/reduce conflict for NULL in state 380 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 380 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 380 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 380 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 380 resolved as shift
WARNING: shift/reduce conflict for THIS in state 380 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 380 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 380 resolved as shift
WARNING: shift/reduce conflict for LONG in state 380 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 380 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 380 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 380 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 380 resolved as shift
WARNING: shift/reduce conflict for IF in state 380 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 380 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 380 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 380 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 380 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 380 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 380 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 380 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 380 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 380 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 380 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 380 resolved as shift
WARNING: shift/reduce conflict for NOT in state 380 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 380 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 395 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 402 resolved as shift
WARNING: shift/reduce conflict for FUN in state 402 resolved as shift
WARNING: shift/reduce conflict for FOR in state 402 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 402 resolved as shift
WARNING: shift/reduce conflict for DO in state 402 resolved as shift
WARNING: shift/reduce conflict for VAR in state 402 resolved as shift
WARNING: shift/reduce conflict for VAL in state 402 resolved as shift
WARNING: shift/reduce conflict for ID in state 402 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 402 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 402 resolved as shift
WARNING: shift/reduce conflict for INIT in state 402 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 402 resolved as shift
WARNING: shift/reduce conflict for OUT in state 402 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 402 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 402 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 402 resolved as shift
WARNING: shift/reduce conflict for CONST in state 402 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 402 resolved as shift
WARNING: shift/reduce conflict for EOF in state 402 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 402 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 402 resolved as shift
WARNING: shift/reduce conflict for NULL in state 402 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 402 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 402 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 402 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 402 resolved as shift
WARNING: shift/reduce conflict for THIS in state 402 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 402 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 402 resolved as shift
WARNING: shift/reduce conflict for LONG in state 402 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 402 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 402 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 402 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 402 resolved as shift
WARNING: shift/reduce conflict for IF in state 402 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 402 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 402 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 402 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 402 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 402 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 402 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 402 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 402 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 402 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 402 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 402 resolved as shift
WARNING: shift/reduce conflict for NOT in state 402 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 402 resolved as shift
WARNING: reduce/reduce conflict in state 60 resolved using rule (statement -> expression)
WARNING: rejected rule (jumpExpression -> expression) in state 60
WARNING: reduce/reduce conflict in state 62 resolved using rule (optionalTypeModifiers -> <empty>)
WARNING: rejected rule (optionalTypePonto -> <empty>) in state 62
WARNING: reduce/reduce conflict in state 63 resolved using rule (directlyAssignableExpression -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 63
WARNING: reduce/reduce conflict in state 63 resolved using rule (label -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 63
WARNING: reduce/reduce conflict in state 73 resolved using rule (asExpression -> prefixUnaryExpression)
WARNING: rejected rule (assignableExpression -> prefixUnaryExpression) in state 73
WARNING: reduce/reduce conflict in state 80 resolved using rule (varOrVal -> VAR)
WARNING: rejected rule (simpleIdentifier -> VAR) in state 80
WARNING: reduce/reduce conflict in state 81 resolved using rule (varOrVal -> VAL)
WARNING: rejected rule (simpleIdentifier -> VAL) in state 81
WARNING: reduce/reduce conflict in state 82 resolved using rule (postfixUnaryExpression -> primaryExpression)
WARNING: rejected rule (optionalTypeArguments -> <empty>) in state 82
WARNING: reduce/reduce conflict in state 132 resolved using rule (functionValueParameter -> parameter ATRIBUICAO expression)
WARNING: rejected rule (jumpExpression -> expression) in state 132
WARNING: reduce/reduce conflict in state 133 resolved using rule (label -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 133
WARNING: reduce/reduce conflict in state 137 resolved using rule (optionalTypeModifiers -> <empty>)
WARNING: rejected rule (optionalTypePonto -> <empty>) in state 137
WARNING: reduce/reduce conflict in state 147 resolved using rule (label -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 147
WARNING: reduce/reduce conflict in state 185 resolved using rule (postfixUnaryExpressionRecursive -> postfixUnarySuffix)
WARNING: rejected rule (optionalTypeArguments -> <empty>) in state 185
WARNING: reduce/reduce conflict in state 187 resolved using rule (postfixUnarySuffix -> typeArguments)
WARNING: rejected rule (optionalTypeArguments -> typeArguments) in state 187
WARNING: reduce/reduce conflict in state 194 resolved using rule (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression)
WARNING: rejected rule (prefixUnaryExpression -> postfixUnaryExpression) in state 194
WARNING: reduce/reduce conflict in state 207 resolved using rule (collectionLiteralRecursive -> expression)
WARNING: rejected rule (jumpExpression -> expression) in state 207
WARNING: reduce/reduce conflict in state 209 resolved using rule (jumpExpression -> RETURN expression)
WARNING: rejected rule (jumpExpression -> expression) in state 209
WARNING: reduce/reduce conflict in state 210 resolved using rule (jumpExpression -> RETURN_AT expression)
WARNING: rejected rule (jumpExpression -> expression) in state 210
WARNING: reduce/reduce conflict in state 251 resolved using rule (variableDeclaration -> simpleIdentifier)
WARNING: rejected rule (directlyAssignableExpression -> simpleIdentifier) in state 251
WARNING: reduce/reduce conflict in state 251 resolved using rule (variableDeclaration -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 251
WARNING: reduce/reduce conflict in state 251 resolved using rule (label -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 251
WARNING: reduce/reduce conflict in state 255 resolved using rule (assignment -> directlyAssignableExpression ATRIBUICAO expression)
WARNING: rejected rule (jumpExpression -> expression) in state 255
WARNING: reduce/reduce conflict in state 256 resolved using rule (assignment -> assignableExpression assignmentAndOperator expression)
WARNING: rejected rule (jumpExpression -> expression) in state 256
WARNING: reduce/reduce conflict in state 275 resolved using rule (indexingSuffixRecursive -> expression)
WARNING: rejected rule (jumpExpression -> expression) in state 275
WARNING: reduce/reduce conflict in state 287 resolved using rule (expression -> disjunction)
WARNING: rejected rule (disjunction -> conjunction OR disjunction) in state 287
WARNING: reduce/reduce conflict in state 292 resolved using rule (disjunction -> conjunction)
WARNING: rejected rule (conjunction -> equality AND conjunction) in state 292
WARNING: reduce/reduce conflict in state 293 resolved using rule (conjunction -> equality)
WARNING: rejected rule (equality -> comparison equalityOperator equality) in state 293
WARNING: reduce/reduce conflict in state 300 resolved using rule (comparison -> infixOperation)
WARNING: rejected rule (comparison -> infixOperation comparisonOperator infixOperation) in state 300
WARNING: reduce/reduce conflict in state 302 resolved using rule (infixOperation -> elvisExpression)
WARNING: rejected rule (elvisOrType -> elvisExpression) in state 302
WARNING: reduce/reduce conflict in state 306 resolved using rule (infixOperation -> elvisExpression)
WARNING: rejected rule (elvisExpression -> infixFunctionCall ELVIS elvisExpression) in state 306
WARNING: reduce/reduce conflict in state 307 resolved using rule (elvisExpression -> infixFunctionCall)
WARNING: rejected rule (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall) in state 307
WARNING: reduce/reduce conflict in state 308 resolved using rule (infixFunctionCall -> rangeExpression)
WARNING: rejected rule (rangeExpression -> additiveExpression PONTOPONTO rangeExpression) in state 308
WARNING: reduce/reduce conflict in state 309 resolved using rule (rangeExpression -> additiveExpression)
WARNING: rejected rule (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression) in state 309
WARNING: reduce/reduce conflict in state 310 resolved using rule (additiveExpression -> multiplicativeExpression)
WARNING: rejected rule (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression) in state 310
WARNING: reduce/reduce conflict in state 338 resolved using rule (optionalTypeModifiers -> <empty>)
WARNING: rejected rule (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers) in state 338
WARNING: reduce/reduce conflict in state 353 resolved using rule (label -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 353
WARNING: reduce/reduce conflict in state 354 resolved using rule (valueArgument -> expression)
WARNING: rejected rule (jumpExpression -> expression) in state 354
WARNING: reduce/reduce conflict in state 360 resolved using rule (parameterOrTypeRecursive -> COMMA optionalParameterOrType)
WARNING: rejected rule (parameterOrTypeRecursive -> <empty>) in state 360
WARNING: reduce/reduce conflict in state 370 resolved using rule (optionalPv -> <empty>)
WARNING: rejected rule (jumpExpression -> expression) in state 370
WARNING: reduce/reduce conflict in state 380 resolved using rule (doWhileStatement -> DO WHILE LPAREN expression RPAREN)
WARNING: rejected rule (optionalReceiverType -> <empty>) in state 380
WARNING: reduce/reduce conflict in state 386 resolved using rule (optionalControlStructureBody -> controlStructureBody)
WARNING: rejected rule (controlStructureBodyOrPV -> controlStructureBody) in state 386
WARNING: reduce/reduce conflict in state 402 resolved using rule (optionalControlStructureBody -> <empty>)
WARNING: rejected rule (optionalReceiverType -> <empty>) in state 402
WARNING: reduce/reduce conflict in state 406 resolved using rule (valueArgument -> simpleIdentifier ATRIBUICAO expression)
WARNING: rejected rule (jumpExpression -> expression) in state 406
WARNING: reduce/reduce conflict in state 409 resolved using rule (functionBody -> ATRIBUICAO expression)
WARNING: rejected rule (jumpExpression -> expression) in state 409
WARNING: reduce/reduce conflict in state 414 resolved using rule (valueArgument -> simpleIdentifier ATRIBUICAO MULT expression)
WARNING: rejected rule (jumpExpression -> expression) in state 414
WARNING: Rule (optionalTypePonto -> <empty>) is never reduced
WARNING: Rule (assignableExpression -> prefixUnaryExpression) is never reduced
WARNING: Rule (optionalTypeArguments -> <empty>) is never reduced
WARNING: Rule (optionalTypeArguments -> typeArguments) is never reduced
WARNING: Rule (disjunction -> conjunction OR disjunction) is never reduced
WARNING: Rule (conjunction -> equality AND conjunction) is never reduced
WARNING: Rule (equality -> comparison equalityOperator equality) is never reduced
WARNING: Rule (comparison -> infixOperation comparisonOperator infixOperation) is never reduced
WARNING: Rule (elvisOrType -> elvisExpression) is never reduced
WARNING: Rule (elvisExpression -> infixFunctionCall ELVIS elvisExpression) is never reduced
WARNING: Rule (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall) is never reduced
WARNING: Rule (rangeExpression -> additiveExpression PONTOPONTO rangeExpression) is never reduced
WARNING: Rule (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression) is never reduced
WARNING: Rule (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression) is never reduced
WARNING: Rule (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers) is never reduced
