Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> kotlinFile
Rule 1     kotlinFile -> functionDeclaration kotlinFile
Rule 2     kotlinFile -> functionDeclaration
Rule 3     functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3
Rule 4     fd1 -> simpleIdentifier
Rule 5     fd1 -> <empty>
Rule 6     fd2 -> DOISP type
Rule 7     fd2 -> <empty>
Rule 8     fd3 -> block
Rule 9     fd3 -> <empty>
Rule 10    functionBody -> block
Rule 11    functionBody -> ATRIBUICAO expression
Rule 12    functionValueParameters -> LPAREN fvps RPAREN
Rule 13    functionValueParameters -> LPAREN RPAREN
Rule 14    fvps -> functionValueParameter
Rule 15    fvps -> functionValueParameter COMMA fvps
Rule 16    fvps -> functionValueParameter fvps
Rule 17    functionValueParameter -> parameter ATRIBUICAO expression
Rule 18    functionValueParameter -> parameter
Rule 19    variableDeclaration -> simpleIdentifier DOISP type
Rule 20    variableDeclaration -> simpleIdentifier
Rule 21    multiVariableDeclaration -> LPAREN mvd RPAREN
Rule 22    multiVariableDeclaration -> LPAREN RPAREN
Rule 23    mvd -> variableDeclaration
Rule 24    mvd -> variableDeclaration COMMA mvd
Rule 25    parameter -> simpleIdentifier DOISP type
Rule 26    type -> typeModifiers optype
Rule 27    type -> optype
Rule 28    optype -> parenthesizedType
Rule 29    optype -> functionType
Rule 30    optype -> userType
Rule 31    typeModifiers -> typeModifier
Rule 32    typeModifiers -> typeModifier typeModifiers
Rule 33    typeModifier -> SUSPEND
Rule 34    typeProjectionModifier -> varianceModifier
Rule 35    varianceModifier -> IN
Rule 36    varianceModifier -> OUT
Rule 37    userType -> simpleUserType
Rule 38    simpleUserType -> simpleIdentifier typeArguments
Rule 39    simpleUserType -> simpleIdentifier
Rule 40    typeProjection -> typeProjectionModifiers type
Rule 41    typeProjection -> type
Rule 42    typeProjectionModifiers -> typeProjection
Rule 43    typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers
Rule 44    functionType -> receiverType PONTO functionTypeParameters SETA type
Rule 45    functionType -> functionTypeParameters SETA type
Rule 46    functionTypeParameters -> functionTypeParameters_p
Rule 47    functionTypeParameters -> functionTypeParameters_t
Rule 48    functionTypeParameters_p -> LPAREN parameter ftp RPAREN
Rule 49    functionTypeParameters_p -> LPAREN parameter RPAREN
Rule 50    functionTypeParameters_t -> LPAREN type RPAREN
Rule 51    functionTypeParameters_t -> LPAREN type ftp RPAREN
Rule 52    ftp -> COMMA parameter
Rule 53    ftp -> COMMA type
Rule 54    ftp -> COMMA parameter ftp
Rule 55    ftp -> COMMA type ftp
Rule 56    parenthesizedType -> LPAREN type RPAREN
Rule 57    receiverType -> typeModifier rt
Rule 58    rt -> parenthesizedType
Rule 59    statements -> statement
Rule 60    statements -> statement statements
Rule 61    statement -> functionDeclaration
Rule 62    statement -> assignment
Rule 63    statement -> loopStatement
Rule 64    statement -> expression
Rule 65    controlStructureBody -> block
Rule 66    controlStructureBody -> statement
Rule 67    block -> LCHAVE statements RCHAVE
Rule 68    loopStatement -> forStatement_MD
Rule 69    loopStatement -> forStatement_VD
Rule 70    loopStatement -> whileStatement
Rule 71    loopStatement -> doWhileStatement
Rule 72    forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
Rule 73    forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN
Rule 74    forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
Rule 75    forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN
Rule 76    whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody
Rule 77    whileStatement -> WHILE LPAREN expression RPAREN PV
Rule 78    doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN
Rule 79    doWhileStatement -> DO WHILE LPAREN expression RPAREN
Rule 80    assignment -> directlyAssignableExpression IGUALDADE expression
Rule 81    assignment -> assignableExpression assignmentAndOperator expression
Rule 82    expression -> disjunction
Rule 83    disjunction -> conjunction
Rule 84    disjunction -> conjunction OR disjunction
Rule 85    conjunction -> equality
Rule 86    conjunction -> equality AND conjunction
Rule 87    equality -> comparison
Rule 88    equality -> comparison equalityOperator equality
Rule 89    comparison -> infixOperation
Rule 90    comparison -> infixOperation comparisonOperator infixOperation
Rule 91    infixOperation -> elvisExpression io
Rule 92    infixOperation -> elvisExpression
Rule 93    io -> inOperator elvisExpression
Rule 94    io -> inOperator elvisExpression io
Rule 95    io -> isOperator type
Rule 96    io -> isOperator type io
Rule 97    elvisExpression -> infixFunctionCall
Rule 98    elvisExpression -> infixFunctionCall ELVIS elvisExpression
Rule 99    infixFunctionCall -> rangeExpression
Rule 100   infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall
Rule 101   rangeExpression -> additiveExpression
Rule 102   rangeExpression -> additiveExpression PONTOPONTO rangeExpression
Rule 103   additiveExpression -> multiplicativeExpression
Rule 104   additiveExpression -> multiplicativeExpression additiveOperator additiveExpression
Rule 105   multiplicativeExpression -> asExpression
Rule 106   multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression
Rule 107   asExpression -> prefixUnaryExpression
Rule 108   asExpression -> prefixUnaryExpression asOperator type
Rule 109   prefixUnaryExpression -> preue postfixUnaryExpression
Rule 110   prefixUnaryExpression -> postfixUnaryExpression
Rule 111   preue -> unaryPrefix
Rule 112   preue -> unaryPrefix preue
Rule 113   unaryPrefix -> label
Rule 114   unaryPrefix -> prefixUnaryOperator
Rule 115   label -> simpleIdentifier
Rule 116   postfixUnaryExpression -> primaryExpression
Rule 117   postfixUnaryExpression -> primaryExpression posue
Rule 118   posue -> postfixUnarySuffix
Rule 119   posue -> postfixUnarySuffix posue
Rule 120   postfixUnarySuffix -> postfixUnaryOperator
Rule 121   postfixUnarySuffix -> typeArguments
Rule 122   postfixUnarySuffix -> callSuffix
Rule 123   postfixUnarySuffix -> indexingSuffix
Rule 124   postfixUnarySuffix -> navigationSuffix
Rule 125   directlyAssignableExpression -> postfixUnaryExpression assignableSuffix
Rule 126   directlyAssignableExpression -> simpleIdentifier
Rule 127   directlyAssignableExpression -> parenthesizedDirectlyAssignableExpression
Rule 128   parenthesizedDirectlyAssignableExpression -> LPAREN directlyAssignableExpression RPAREN
Rule 129   assignableExpression -> prefixUnaryExpression
Rule 130   assignableExpression -> parenthesizedAssignableExpression
Rule 131   parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN
Rule 132   assignableSuffix -> typeArguments
Rule 133   assignableSuffix -> indexingSuffix
Rule 134   assignableSuffix -> navigationSuffix
Rule 135   indexingSuffix -> LCCT isuf RCCT
Rule 136   indexingSuffix -> LCCT RCCT
Rule 137   isuf -> expression
Rule 138   isuf -> expression COMMA isuf
Rule 139   navigationSuffix -> memberAccessOperator simpleIdentifier CLASS
Rule 140   navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS
Rule 141   callSuffix -> typeArguments valueArguments annotatedLambda
Rule 142   callSuffix -> valueArguments annotatedLambda
Rule 143   callSuffix -> typeArguments annotatedLambda
Rule 144   callSuffix -> annotatedLambda
Rule 145   callSuffix -> typeArguments valueArguments
Rule 146   callSuffix -> valueArguments
Rule 147   annotatedLambda -> lambdaLiteral
Rule 148   typeArguments -> MENOR ta MAIOR
Rule 149   typeArguments -> MENOR MAIOR
Rule 150   ta -> typeProjection
Rule 151   ta -> typeProjection COMMA ta
Rule 152   valueArguments -> LPAREN RPAREN
Rule 153   valueArguments -> LPAREN vas RPAREN
Rule 154   vas -> valueArgument
Rule 155   vas -> valueArgument COMMA vas
Rule 156   valueArgument -> simpleIdentifier IGUALDADE MULT expression
Rule 157   valueArgument -> simpleIdentifier IGUALDADE expression
Rule 158   valueArgument -> expression
Rule 159   primaryExpression -> parenthesizedExpression
Rule 160   primaryExpression -> simpleIdentifier
Rule 161   primaryExpression -> LITERAL_STRING
Rule 162   primaryExpression -> callableReference
Rule 163   primaryExpression -> functionLiteral
Rule 164   primaryExpression -> collectionLiteral
Rule 165   primaryExpression -> ifExpression
Rule 166   primaryExpression -> jumpExpression
Rule 167   parenthesizedExpression -> LPAREN expression RPAREN
Rule 168   collectionLiteral -> LCCT cl RCCT
Rule 169   collectionLiteral -> LCCT RCCT
Rule 170   cl -> expression
Rule 171   cl -> expression COMMA cl
Rule 172   parametersWithOptionalType -> LPAREN pwot RPAREN
Rule 173   parametersWithOptionalType -> LPAREN RPAREN
Rule 174   pwot -> parameterWithOptionalType
Rule 175   pwot -> parameterWithOptionalType COMMA pwot COMMA
Rule 176   parameterWithOptionalType -> parameterModifiers simpleIdentifier DOISP type
Rule 177   parameterWithOptionalType -> simpleIdentifier DOISP type
Rule 178   parameterWithOptionalType -> parameterModifiers simpleIdentifier
Rule 179   parameterWithOptionalType -> simpleIdentifier
Rule 180   parameterModifiers -> VARARG
Rule 181   parameterModifiers -> NOINLINE
Rule 182   parameterModifiers -> CROSSINLINE
Rule 183   lambdaLiteral -> RCHAVE ll LCHAVE
Rule 184   ll -> statements
Rule 185   ll -> lambdaParameters SETA statements
Rule 186   ll -> SETA statements
Rule 187   lambdaParameters -> lambdaParameter
Rule 188   lambdaParameters -> lambdaParameter COMMA lambdaParameters
Rule 189   lambdaParameter -> variableDeclaration
Rule 190   lambdaParameter -> multiVariableDeclaration DOISP type
Rule 191   lambdaParameter -> multiVariableDeclaration
Rule 192   anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
Rule 193   anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody
Rule 194   anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody
Rule 195   anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody
Rule 196   anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
Rule 197   anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody
Rule 198   anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody
Rule 199   anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint
Rule 200   anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody
Rule 201   anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint
Rule 202   anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type
Rule 203   anonymousFunction -> FUN parametersWithOptionalType functionBody
Rule 204   anonymousFunction -> FUN parametersWithOptionalType typeConstraint
Rule 205   anonymousFunction -> FUN type PONTO parametersWithOptionalType
Rule 206   anonymousFunction -> FUN parametersWithOptionalType
Rule 207   functionLiteral -> lambdaLiteral
Rule 208   functionLiteral -> anonymousFunction
Rule 209   typeConstraint -> simpleIdentifier DOISP type
Rule 210   ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
Rule 211   if1 -> controlStructureBody
Rule 212   if1 -> <empty>
Rule 213   if2 -> PV
Rule 214   if2 -> <empty>
Rule 215   jumpExpression -> RETURN expression
Rule 216   jumpExpression -> RETURN_AT expression
Rule 217   jumpExpression -> expression
Rule 218   jumpExpression -> CONTINUE
Rule 219   jumpExpression -> CONTINUE_AT
Rule 220   jumpExpression -> BREAK
Rule 221   jumpExpression -> BREAK_AT
Rule 222   callableReference -> receiverType COLONCOLON simpleIdentifier
Rule 223   callableReference -> COLONCOLON simpleIdentifier
Rule 224   callableReference -> receiverType COLONCOLON CLASS
Rule 225   callableReference -> COLONCOLON CLASS
Rule 226   assignmentAndOperator -> MAISIGUAL
Rule 227   assignmentAndOperator -> MENOSIGUAL
Rule 228   assignmentAndOperator -> MULTIGUAL
Rule 229   assignmentAndOperator -> DIVIGUAL
Rule 230   assignmentAndOperator -> MODIGUAL
Rule 231   equalityOperator -> DIFERENTE
Rule 232   equalityOperator -> IDENTIDADE
Rule 233   equalityOperator -> IGUALDADE
Rule 234   equalityOperator -> SEMIDENTIDADE
Rule 235   comparisonOperator -> MENOR
Rule 236   comparisonOperator -> MAIOR
Rule 237   comparisonOperator -> MENORIGUAL
Rule 238   comparisonOperator -> MAIORIGUAL
Rule 239   inOperator -> IN
Rule 240   inOperator -> NOT_IN
Rule 241   isOperator -> IS
Rule 242   isOperator -> NOT_IS
Rule 243   additiveOperator -> PLUS
Rule 244   additiveOperator -> MINUS
Rule 245   multiplicativeOperator -> MULT
Rule 246   multiplicativeOperator -> DIVIDE
Rule 247   multiplicativeOperator -> MOD
Rule 248   asOperator -> AS
Rule 249   asOperator -> AS asOperator
Rule 250   prefixUnaryOperator -> INCREMENTO
Rule 251   prefixUnaryOperator -> DECREMENTO
Rule 252   prefixUnaryOperator -> MINUS
Rule 253   prefixUnaryOperator -> PLUS
Rule 254   prefixUnaryOperator -> NOT
Rule 255   postfixUnaryOperator -> INCREMENTO
Rule 256   postfixUnaryOperator -> DECREMENTO
Rule 257   memberAccessOperator -> safeNav
Rule 258   memberAccessOperator -> COLONCOLON
Rule 259   safeNav -> PONTO
Rule 260   simpleIdentifier -> ID
Rule 261   simpleIdentifier -> CROSSINLINE
Rule 262   simpleIdentifier -> IMPORT
Rule 263   simpleIdentifier -> INIT
Rule 264   simpleIdentifier -> NOINLINE
Rule 265   simpleIdentifier -> OUT
Rule 266   simpleIdentifier -> VARARG
Rule 267   simpleIdentifier -> WHERE
Rule 268   simpleIdentifier -> INT
Rule 269   simpleIdentifier -> FLOAT
Rule 270   simpleIdentifier -> BOOLEAN
Rule 271   simpleIdentifier -> STRING
Rule 272   simpleIdentifier -> ARRAY
Rule 273   simpleIdentifier -> CHAR
Rule 274   simpleIdentifier -> OBJECT
Rule 275   simpleIdentifier -> CONST
Rule 276   simpleIdentifier -> CONSTRUCTOR
Rule 277   simpleIdentifier -> EOF
Rule 278   simpleIdentifier -> FALSE
Rule 279   simpleIdentifier -> FUNCTION
Rule 280   simpleIdentifier -> NULL
Rule 281   simpleIdentifier -> NULLABLE
Rule 282   simpleIdentifier -> NUMBER
Rule 283   simpleIdentifier -> OPERATOR
Rule 284   simpleIdentifier -> SMARTCAST
Rule 285   simpleIdentifier -> THIS
Rule 286   simpleIdentifier -> TRUE
Rule 287   simpleIdentifier -> VAL
Rule 288   simpleIdentifier -> VAR
Rule 289   simpleIdentifier -> DOUBLE
Rule 290   simpleIdentifier -> WHEN
Rule 291   simpleIdentifier -> LONG

Terminals, with rules where they appear

AND                  : 86
ARRAY                : 272
AS                   : 248 249
ATRIBUICAO           : 11 17
BOOLEAN              : 270
BREAK                : 220
BREAK_AT             : 221
CHAR                 : 273
CLASS                : 139 140 224 225
COLONCOLON           : 222 223 224 225 258
COMMA                : 15 24 52 53 54 55 138 151 155 171 175 175 188
CONST                : 275
CONSTRUCTOR          : 276
CONTINUE             : 218
CONTINUE_AT          : 219
CROSSINLINE          : 182 261
DECREMENTO           : 251 256
DIFERENTE            : 231
DIVIDE               : 246
DIVIGUAL             : 229
DO                   : 78 79
DOISP                : 6 19 25 176 177 190 192 193 195 196 198 199 202 209
DOUBLE               : 289
ELSE                 : 210
ELVIS                : 98
EOF                  : 277
FALSE                : 278
FLOAT                : 269
FOR                  : 72 73 74 75
FUN                  : 3 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206
FUNCTION             : 279
ID                   : 260
IDENTIDADE           : 232
IF                   : 210
IGUALDADE            : 80 156 157 233
IMPORT               : 262
IN                   : 35 72 73 74 75 239
INCREMENTO           : 250 255
INIT                 : 263
INT                  : 268
IS                   : 241
LCCT                 : 135 136 168 169
LCHAVE               : 67 183
LITERAL_STRING       : 161
LONG                 : 291
LPAREN               : 12 13 21 22 48 49 50 51 56 72 73 74 75 76 77 78 79 128 131 152 153 167 172 173 210
MAIOR                : 148 149 236
MAIORIGUAL           : 238
MAISIGUAL            : 226
MENOR                : 148 149 235
MENORIGUAL           : 237
MENOSIGUAL           : 227
MINUS                : 244 252
MOD                  : 247
MODIGUAL             : 230
MULT                 : 156 245
MULTIGUAL            : 228
NOINLINE             : 181 264
NOT                  : 254
NOT_IN               : 240
NOT_IS               : 242
NULL                 : 280
NULLABLE             : 281
NUMBER               : 282
OBJECT               : 274
OPERATOR             : 283
OR                   : 84
OUT                  : 36 265
PLUS                 : 243 253
PONTO                : 44 192 194 195 196 200 201 202 205 259
PONTOPONTO           : 102
PV                   : 77 213
RCCT                 : 135 136 168 169
RCHAVE               : 67 183
RETURN               : 215
RETURN_AT            : 216
RPAREN               : 12 13 21 22 48 49 50 51 56 72 73 74 75 76 77 78 79 128 131 152 153 167 172 173 210
SEMIDENTIDADE        : 234
SETA                 : 44 45 185 186
SMARTCAST            : 284
STRING               : 271
SUSPEND              : 33
THIS                 : 285
TRUE                 : 286
VAL                  : 287
VAR                  : 288
VARARG               : 180 266
WHEN                 : 290
WHERE                : 267
WHILE                : 76 77 78 79
error                : 

Nonterminals, with rules where they appear

additiveExpression   : 101 102 104
additiveOperator     : 104
annotatedLambda      : 141 142 143 144
anonymousFunction    : 208
asExpression         : 105 106
asOperator           : 108 249
assignableExpression : 81 131
assignableSuffix     : 125
assignment           : 62
assignmentAndOperator : 81
block                : 8 10 65
callSuffix           : 122
callableReference    : 162
cl                   : 168 171
collectionLiteral    : 164
comparison           : 87 88
comparisonOperator   : 90
conjunction          : 83 84 86
controlStructureBody : 72 74 76 78 211
directlyAssignableExpression : 80 128
disjunction          : 82 84
doWhileStatement     : 71
elvisExpression      : 91 92 93 94 98
equality             : 85 86 88
equalityOperator     : 88
expression           : 11 17 64 72 73 74 75 76 77 78 79 80 81 137 138 156 157 158 167 170 171 210 215 216 217
fd1                  : 
fd2                  : 3
fd3                  : 3
forStatement_MD      : 68
forStatement_VD      : 69
ftp                  : 48 51 54 55
functionBody         : 192 193 194 195 197 198 200 203
functionDeclaration  : 1 2 61
functionLiteral      : 163
functionType         : 29
functionTypeParameters : 44 45
functionTypeParameters_p : 46
functionTypeParameters_t : 47
functionValueParameter : 14 15 16
functionValueParameters : 3
fvps                 : 12 15 16
if1                  : 210 210
if2                  : 210 210
ifExpression         : 165
inOperator           : 93 94
indexingSuffix       : 123 133
infixFunctionCall    : 97 98 100
infixOperation       : 89 90 90
io                   : 91 94 96
isOperator           : 95 96
isuf                 : 135 138
jumpExpression       : 166
kotlinFile           : 1 0
label                : 113
lambdaLiteral        : 147 207
lambdaParameter      : 187 188
lambdaParameters     : 185 188
ll                   : 183
loopStatement        : 63
memberAccessOperator : 139 140
multiVariableDeclaration : 72 73 190 191
multiplicativeExpression : 103 104 106
multiplicativeOperator : 106
mvd                  : 21 24
navigationSuffix     : 124 134
optype               : 26 27
parameter            : 17 18 48 49 52 54
parameterModifiers   : 176 178
parameterWithOptionalType : 174 175
parametersWithOptionalType : 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206
parenthesizedAssignableExpression : 130
parenthesizedDirectlyAssignableExpression : 127
parenthesizedExpression : 140 159
parenthesizedType    : 28 58
postfixUnaryExpression : 109 110 125
postfixUnaryOperator : 120
postfixUnarySuffix   : 118 119
posue                : 117 119
prefixUnaryExpression : 107 108 129
prefixUnaryOperator  : 114
preue                : 109 112
primaryExpression    : 116 117
pwot                 : 172 175
rangeExpression      : 99 100 102
receiverType         : 44 222 224
rt                   : 57
safeNav              : 257
simpleIdentifier     : 3 4 19 20 25 38 39 100 115 126 139 156 157 160 176 177 178 179 209 222 223
simpleUserType       : 37
statement            : 59 60 66
statements           : 60 67 184 185 186
ta                   : 148 151
type                 : 6 19 25 40 41 44 45 50 51 53 55 56 95 96 108 176 177 190 192 192 193 194 195 195 196 196 198 199 200 201 202 202 205 209
typeArguments        : 38 121 132 141 143 145
typeConstraint       : 192 193 194 196 197 199 201 204
typeModifier         : 31 32 57
typeModifiers        : 26 32
typeProjection       : 42 150 151
typeProjectionModifier : 43
typeProjectionModifiers : 40 43
unaryPrefix          : 111 112
userType             : 30
valueArgument        : 154 155
valueArguments       : 141 142 145 146
variableDeclaration  : 23 24 74 75 189
varianceModifier     : 34
vas                  : 153 155
whileStatement       : 70

Parsing method: LALR

state 0

    (0) S' -> . kotlinFile
    (1) kotlinFile -> . functionDeclaration kotlinFile
    (2) kotlinFile -> . functionDeclaration
    (3) functionDeclaration -> . FUN simpleIdentifier functionValueParameters fd2 fd3

    FUN             shift and go to state 3

    kotlinFile                     shift and go to state 1
    functionDeclaration            shift and go to state 2

state 1

    (0) S' -> kotlinFile .



state 2

    (1) kotlinFile -> functionDeclaration . kotlinFile
    (2) kotlinFile -> functionDeclaration .
    (1) kotlinFile -> . functionDeclaration kotlinFile
    (2) kotlinFile -> . functionDeclaration
    (3) functionDeclaration -> . FUN simpleIdentifier functionValueParameters fd2 fd3

    $end            reduce using rule 2 (kotlinFile -> functionDeclaration .)
    FUN             shift and go to state 3

    functionDeclaration            shift and go to state 2
    kotlinFile                     shift and go to state 4

state 3

    (3) functionDeclaration -> FUN . simpleIdentifier functionValueParameters fd2 fd3
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    simpleIdentifier               shift and go to state 5

state 4

    (1) kotlinFile -> functionDeclaration kotlinFile .

    $end            reduce using rule 1 (kotlinFile -> functionDeclaration kotlinFile .)


state 5

    (3) functionDeclaration -> FUN simpleIdentifier . functionValueParameters fd2 fd3
    (12) functionValueParameters -> . LPAREN fvps RPAREN
    (13) functionValueParameters -> . LPAREN RPAREN

    LPAREN          shift and go to state 39

    functionValueParameters        shift and go to state 38

state 6

    (260) simpleIdentifier -> ID .

    LPAREN          reduce using rule 260 (simpleIdentifier -> ID .)
    DOISP           reduce using rule 260 (simpleIdentifier -> ID .)
    MENOR           reduce using rule 260 (simpleIdentifier -> ID .)
    LCHAVE          reduce using rule 260 (simpleIdentifier -> ID .)
    FUN             reduce using rule 260 (simpleIdentifier -> ID .)
    $end            reduce using rule 260 (simpleIdentifier -> ID .)
    FOR             reduce using rule 260 (simpleIdentifier -> ID .)
    WHILE           reduce using rule 260 (simpleIdentifier -> ID .)
    DO              reduce using rule 260 (simpleIdentifier -> ID .)
    ID              reduce using rule 260 (simpleIdentifier -> ID .)
    CROSSINLINE     reduce using rule 260 (simpleIdentifier -> ID .)
    IMPORT          reduce using rule 260 (simpleIdentifier -> ID .)
    INIT            reduce using rule 260 (simpleIdentifier -> ID .)
    NOINLINE        reduce using rule 260 (simpleIdentifier -> ID .)
    OUT             reduce using rule 260 (simpleIdentifier -> ID .)
    VARARG          reduce using rule 260 (simpleIdentifier -> ID .)
    WHERE           reduce using rule 260 (simpleIdentifier -> ID .)
    INT             reduce using rule 260 (simpleIdentifier -> ID .)
    FLOAT           reduce using rule 260 (simpleIdentifier -> ID .)
    BOOLEAN         reduce using rule 260 (simpleIdentifier -> ID .)
    STRING          reduce using rule 260 (simpleIdentifier -> ID .)
    ARRAY           reduce using rule 260 (simpleIdentifier -> ID .)
    CHAR            reduce using rule 260 (simpleIdentifier -> ID .)
    OBJECT          reduce using rule 260 (simpleIdentifier -> ID .)
    CONST           reduce using rule 260 (simpleIdentifier -> ID .)
    CONSTRUCTOR     reduce using rule 260 (simpleIdentifier -> ID .)
    EOF             reduce using rule 260 (simpleIdentifier -> ID .)
    FALSE           reduce using rule 260 (simpleIdentifier -> ID .)
    FUNCTION        reduce using rule 260 (simpleIdentifier -> ID .)
    NULL            reduce using rule 260 (simpleIdentifier -> ID .)
    NULLABLE        reduce using rule 260 (simpleIdentifier -> ID .)
    NUMBER          reduce using rule 260 (simpleIdentifier -> ID .)
    OPERATOR        reduce using rule 260 (simpleIdentifier -> ID .)
    SMARTCAST       reduce using rule 260 (simpleIdentifier -> ID .)
    THIS            reduce using rule 260 (simpleIdentifier -> ID .)
    TRUE            reduce using rule 260 (simpleIdentifier -> ID .)
    VAL             reduce using rule 260 (simpleIdentifier -> ID .)
    VAR             reduce using rule 260 (simpleIdentifier -> ID .)
    DOUBLE          reduce using rule 260 (simpleIdentifier -> ID .)
    WHEN            reduce using rule 260 (simpleIdentifier -> ID .)
    LONG            reduce using rule 260 (simpleIdentifier -> ID .)
    LITERAL_STRING  reduce using rule 260 (simpleIdentifier -> ID .)
    COLONCOLON      reduce using rule 260 (simpleIdentifier -> ID .)
    LCCT            reduce using rule 260 (simpleIdentifier -> ID .)
    IF              reduce using rule 260 (simpleIdentifier -> ID .)
    RETURN          reduce using rule 260 (simpleIdentifier -> ID .)
    RETURN_AT       reduce using rule 260 (simpleIdentifier -> ID .)
    CONTINUE        reduce using rule 260 (simpleIdentifier -> ID .)
    CONTINUE_AT     reduce using rule 260 (simpleIdentifier -> ID .)
    BREAK           reduce using rule 260 (simpleIdentifier -> ID .)
    BREAK_AT        reduce using rule 260 (simpleIdentifier -> ID .)
    RCHAVE          reduce using rule 260 (simpleIdentifier -> ID .)
    INCREMENTO      reduce using rule 260 (simpleIdentifier -> ID .)
    DECREMENTO      reduce using rule 260 (simpleIdentifier -> ID .)
    MINUS           reduce using rule 260 (simpleIdentifier -> ID .)
    PLUS            reduce using rule 260 (simpleIdentifier -> ID .)
    NOT             reduce using rule 260 (simpleIdentifier -> ID .)
    SUSPEND         reduce using rule 260 (simpleIdentifier -> ID .)
    PV              reduce using rule 260 (simpleIdentifier -> ID .)
    ELSE            reduce using rule 260 (simpleIdentifier -> ID .)
    PONTO           reduce using rule 260 (simpleIdentifier -> ID .)
    AS              reduce using rule 260 (simpleIdentifier -> ID .)
    MAISIGUAL       reduce using rule 260 (simpleIdentifier -> ID .)
    MENOSIGUAL      reduce using rule 260 (simpleIdentifier -> ID .)
    MULTIGUAL       reduce using rule 260 (simpleIdentifier -> ID .)
    DIVIGUAL        reduce using rule 260 (simpleIdentifier -> ID .)
    MODIGUAL        reduce using rule 260 (simpleIdentifier -> ID .)
    MULT            reduce using rule 260 (simpleIdentifier -> ID .)
    DIVIDE          reduce using rule 260 (simpleIdentifier -> ID .)
    MOD             reduce using rule 260 (simpleIdentifier -> ID .)
    PONTOPONTO      reduce using rule 260 (simpleIdentifier -> ID .)
    ELVIS           reduce using rule 260 (simpleIdentifier -> ID .)
    IN              reduce using rule 260 (simpleIdentifier -> ID .)
    NOT_IN          reduce using rule 260 (simpleIdentifier -> ID .)
    IS              reduce using rule 260 (simpleIdentifier -> ID .)
    NOT_IS          reduce using rule 260 (simpleIdentifier -> ID .)
    MAIOR           reduce using rule 260 (simpleIdentifier -> ID .)
    MENORIGUAL      reduce using rule 260 (simpleIdentifier -> ID .)
    MAIORIGUAL      reduce using rule 260 (simpleIdentifier -> ID .)
    DIFERENTE       reduce using rule 260 (simpleIdentifier -> ID .)
    IDENTIDADE      reduce using rule 260 (simpleIdentifier -> ID .)
    IGUALDADE       reduce using rule 260 (simpleIdentifier -> ID .)
    SEMIDENTIDADE   reduce using rule 260 (simpleIdentifier -> ID .)
    AND             reduce using rule 260 (simpleIdentifier -> ID .)
    OR              reduce using rule 260 (simpleIdentifier -> ID .)
    COMMA           reduce using rule 260 (simpleIdentifier -> ID .)
    RPAREN          reduce using rule 260 (simpleIdentifier -> ID .)
    RCCT            reduce using rule 260 (simpleIdentifier -> ID .)
    ATRIBUICAO      reduce using rule 260 (simpleIdentifier -> ID .)
    SETA            reduce using rule 260 (simpleIdentifier -> ID .)
    CLASS           reduce using rule 260 (simpleIdentifier -> ID .)


state 7

    (261) simpleIdentifier -> CROSSINLINE .

    LPAREN          reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    DOISP           reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    MENOR           reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    LCHAVE          reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    FUN             reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    $end            reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    FOR             reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    WHILE           reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    DO              reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    ID              reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    CROSSINLINE     reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    IMPORT          reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    INIT            reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    NOINLINE        reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    OUT             reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    VARARG          reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    WHERE           reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    INT             reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    FLOAT           reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    BOOLEAN         reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    STRING          reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    ARRAY           reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    CHAR            reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    OBJECT          reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    CONST           reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    CONSTRUCTOR     reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    EOF             reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    FALSE           reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    FUNCTION        reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    NULL            reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    NULLABLE        reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    NUMBER          reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    OPERATOR        reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    SMARTCAST       reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    THIS            reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    TRUE            reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    VAL             reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    VAR             reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    DOUBLE          reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    WHEN            reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    LONG            reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    LITERAL_STRING  reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    COLONCOLON      reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    LCCT            reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    IF              reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    RETURN          reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    RETURN_AT       reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    CONTINUE        reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    CONTINUE_AT     reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    BREAK           reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    BREAK_AT        reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    RCHAVE          reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    INCREMENTO      reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    DECREMENTO      reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    MINUS           reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    PLUS            reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    NOT             reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    SUSPEND         reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    PV              reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    ELSE            reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    PONTO           reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    AS              reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    MAISIGUAL       reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    MENOSIGUAL      reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    MULTIGUAL       reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    DIVIGUAL        reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    MODIGUAL        reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    MULT            reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    DIVIDE          reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    MOD             reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    PONTOPONTO      reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    ELVIS           reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    IN              reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    NOT_IN          reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    IS              reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    NOT_IS          reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    MAIOR           reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    MENORIGUAL      reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    MAIORIGUAL      reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    DIFERENTE       reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    IDENTIDADE      reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    IGUALDADE       reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    SEMIDENTIDADE   reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    AND             reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    OR              reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    COMMA           reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    RPAREN          reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    RCCT            reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    ATRIBUICAO      reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    SETA            reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    CLASS           reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)


state 8

    (262) simpleIdentifier -> IMPORT .

    LPAREN          reduce using rule 262 (simpleIdentifier -> IMPORT .)
    DOISP           reduce using rule 262 (simpleIdentifier -> IMPORT .)
    MENOR           reduce using rule 262 (simpleIdentifier -> IMPORT .)
    LCHAVE          reduce using rule 262 (simpleIdentifier -> IMPORT .)
    FUN             reduce using rule 262 (simpleIdentifier -> IMPORT .)
    $end            reduce using rule 262 (simpleIdentifier -> IMPORT .)
    FOR             reduce using rule 262 (simpleIdentifier -> IMPORT .)
    WHILE           reduce using rule 262 (simpleIdentifier -> IMPORT .)
    DO              reduce using rule 262 (simpleIdentifier -> IMPORT .)
    ID              reduce using rule 262 (simpleIdentifier -> IMPORT .)
    CROSSINLINE     reduce using rule 262 (simpleIdentifier -> IMPORT .)
    IMPORT          reduce using rule 262 (simpleIdentifier -> IMPORT .)
    INIT            reduce using rule 262 (simpleIdentifier -> IMPORT .)
    NOINLINE        reduce using rule 262 (simpleIdentifier -> IMPORT .)
    OUT             reduce using rule 262 (simpleIdentifier -> IMPORT .)
    VARARG          reduce using rule 262 (simpleIdentifier -> IMPORT .)
    WHERE           reduce using rule 262 (simpleIdentifier -> IMPORT .)
    INT             reduce using rule 262 (simpleIdentifier -> IMPORT .)
    FLOAT           reduce using rule 262 (simpleIdentifier -> IMPORT .)
    BOOLEAN         reduce using rule 262 (simpleIdentifier -> IMPORT .)
    STRING          reduce using rule 262 (simpleIdentifier -> IMPORT .)
    ARRAY           reduce using rule 262 (simpleIdentifier -> IMPORT .)
    CHAR            reduce using rule 262 (simpleIdentifier -> IMPORT .)
    OBJECT          reduce using rule 262 (simpleIdentifier -> IMPORT .)
    CONST           reduce using rule 262 (simpleIdentifier -> IMPORT .)
    CONSTRUCTOR     reduce using rule 262 (simpleIdentifier -> IMPORT .)
    EOF             reduce using rule 262 (simpleIdentifier -> IMPORT .)
    FALSE           reduce using rule 262 (simpleIdentifier -> IMPORT .)
    FUNCTION        reduce using rule 262 (simpleIdentifier -> IMPORT .)
    NULL            reduce using rule 262 (simpleIdentifier -> IMPORT .)
    NULLABLE        reduce using rule 262 (simpleIdentifier -> IMPORT .)
    NUMBER          reduce using rule 262 (simpleIdentifier -> IMPORT .)
    OPERATOR        reduce using rule 262 (simpleIdentifier -> IMPORT .)
    SMARTCAST       reduce using rule 262 (simpleIdentifier -> IMPORT .)
    THIS            reduce using rule 262 (simpleIdentifier -> IMPORT .)
    TRUE            reduce using rule 262 (simpleIdentifier -> IMPORT .)
    VAL             reduce using rule 262 (simpleIdentifier -> IMPORT .)
    VAR             reduce using rule 262 (simpleIdentifier -> IMPORT .)
    DOUBLE          reduce using rule 262 (simpleIdentifier -> IMPORT .)
    WHEN            reduce using rule 262 (simpleIdentifier -> IMPORT .)
    LONG            reduce using rule 262 (simpleIdentifier -> IMPORT .)
    LITERAL_STRING  reduce using rule 262 (simpleIdentifier -> IMPORT .)
    COLONCOLON      reduce using rule 262 (simpleIdentifier -> IMPORT .)
    LCCT            reduce using rule 262 (simpleIdentifier -> IMPORT .)
    IF              reduce using rule 262 (simpleIdentifier -> IMPORT .)
    RETURN          reduce using rule 262 (simpleIdentifier -> IMPORT .)
    RETURN_AT       reduce using rule 262 (simpleIdentifier -> IMPORT .)
    CONTINUE        reduce using rule 262 (simpleIdentifier -> IMPORT .)
    CONTINUE_AT     reduce using rule 262 (simpleIdentifier -> IMPORT .)
    BREAK           reduce using rule 262 (simpleIdentifier -> IMPORT .)
    BREAK_AT        reduce using rule 262 (simpleIdentifier -> IMPORT .)
    RCHAVE          reduce using rule 262 (simpleIdentifier -> IMPORT .)
    INCREMENTO      reduce using rule 262 (simpleIdentifier -> IMPORT .)
    DECREMENTO      reduce using rule 262 (simpleIdentifier -> IMPORT .)
    MINUS           reduce using rule 262 (simpleIdentifier -> IMPORT .)
    PLUS            reduce using rule 262 (simpleIdentifier -> IMPORT .)
    NOT             reduce using rule 262 (simpleIdentifier -> IMPORT .)
    SUSPEND         reduce using rule 262 (simpleIdentifier -> IMPORT .)
    PV              reduce using rule 262 (simpleIdentifier -> IMPORT .)
    ELSE            reduce using rule 262 (simpleIdentifier -> IMPORT .)
    PONTO           reduce using rule 262 (simpleIdentifier -> IMPORT .)
    AS              reduce using rule 262 (simpleIdentifier -> IMPORT .)
    MAISIGUAL       reduce using rule 262 (simpleIdentifier -> IMPORT .)
    MENOSIGUAL      reduce using rule 262 (simpleIdentifier -> IMPORT .)
    MULTIGUAL       reduce using rule 262 (simpleIdentifier -> IMPORT .)
    DIVIGUAL        reduce using rule 262 (simpleIdentifier -> IMPORT .)
    MODIGUAL        reduce using rule 262 (simpleIdentifier -> IMPORT .)
    MULT            reduce using rule 262 (simpleIdentifier -> IMPORT .)
    DIVIDE          reduce using rule 262 (simpleIdentifier -> IMPORT .)
    MOD             reduce using rule 262 (simpleIdentifier -> IMPORT .)
    PONTOPONTO      reduce using rule 262 (simpleIdentifier -> IMPORT .)
    ELVIS           reduce using rule 262 (simpleIdentifier -> IMPORT .)
    IN              reduce using rule 262 (simpleIdentifier -> IMPORT .)
    NOT_IN          reduce using rule 262 (simpleIdentifier -> IMPORT .)
    IS              reduce using rule 262 (simpleIdentifier -> IMPORT .)
    NOT_IS          reduce using rule 262 (simpleIdentifier -> IMPORT .)
    MAIOR           reduce using rule 262 (simpleIdentifier -> IMPORT .)
    MENORIGUAL      reduce using rule 262 (simpleIdentifier -> IMPORT .)
    MAIORIGUAL      reduce using rule 262 (simpleIdentifier -> IMPORT .)
    DIFERENTE       reduce using rule 262 (simpleIdentifier -> IMPORT .)
    IDENTIDADE      reduce using rule 262 (simpleIdentifier -> IMPORT .)
    IGUALDADE       reduce using rule 262 (simpleIdentifier -> IMPORT .)
    SEMIDENTIDADE   reduce using rule 262 (simpleIdentifier -> IMPORT .)
    AND             reduce using rule 262 (simpleIdentifier -> IMPORT .)
    OR              reduce using rule 262 (simpleIdentifier -> IMPORT .)
    COMMA           reduce using rule 262 (simpleIdentifier -> IMPORT .)
    RPAREN          reduce using rule 262 (simpleIdentifier -> IMPORT .)
    RCCT            reduce using rule 262 (simpleIdentifier -> IMPORT .)
    ATRIBUICAO      reduce using rule 262 (simpleIdentifier -> IMPORT .)
    SETA            reduce using rule 262 (simpleIdentifier -> IMPORT .)
    CLASS           reduce using rule 262 (simpleIdentifier -> IMPORT .)


state 9

    (263) simpleIdentifier -> INIT .

    LPAREN          reduce using rule 263 (simpleIdentifier -> INIT .)
    DOISP           reduce using rule 263 (simpleIdentifier -> INIT .)
    MENOR           reduce using rule 263 (simpleIdentifier -> INIT .)
    LCHAVE          reduce using rule 263 (simpleIdentifier -> INIT .)
    FUN             reduce using rule 263 (simpleIdentifier -> INIT .)
    $end            reduce using rule 263 (simpleIdentifier -> INIT .)
    FOR             reduce using rule 263 (simpleIdentifier -> INIT .)
    WHILE           reduce using rule 263 (simpleIdentifier -> INIT .)
    DO              reduce using rule 263 (simpleIdentifier -> INIT .)
    ID              reduce using rule 263 (simpleIdentifier -> INIT .)
    CROSSINLINE     reduce using rule 263 (simpleIdentifier -> INIT .)
    IMPORT          reduce using rule 263 (simpleIdentifier -> INIT .)
    INIT            reduce using rule 263 (simpleIdentifier -> INIT .)
    NOINLINE        reduce using rule 263 (simpleIdentifier -> INIT .)
    OUT             reduce using rule 263 (simpleIdentifier -> INIT .)
    VARARG          reduce using rule 263 (simpleIdentifier -> INIT .)
    WHERE           reduce using rule 263 (simpleIdentifier -> INIT .)
    INT             reduce using rule 263 (simpleIdentifier -> INIT .)
    FLOAT           reduce using rule 263 (simpleIdentifier -> INIT .)
    BOOLEAN         reduce using rule 263 (simpleIdentifier -> INIT .)
    STRING          reduce using rule 263 (simpleIdentifier -> INIT .)
    ARRAY           reduce using rule 263 (simpleIdentifier -> INIT .)
    CHAR            reduce using rule 263 (simpleIdentifier -> INIT .)
    OBJECT          reduce using rule 263 (simpleIdentifier -> INIT .)
    CONST           reduce using rule 263 (simpleIdentifier -> INIT .)
    CONSTRUCTOR     reduce using rule 263 (simpleIdentifier -> INIT .)
    EOF             reduce using rule 263 (simpleIdentifier -> INIT .)
    FALSE           reduce using rule 263 (simpleIdentifier -> INIT .)
    FUNCTION        reduce using rule 263 (simpleIdentifier -> INIT .)
    NULL            reduce using rule 263 (simpleIdentifier -> INIT .)
    NULLABLE        reduce using rule 263 (simpleIdentifier -> INIT .)
    NUMBER          reduce using rule 263 (simpleIdentifier -> INIT .)
    OPERATOR        reduce using rule 263 (simpleIdentifier -> INIT .)
    SMARTCAST       reduce using rule 263 (simpleIdentifier -> INIT .)
    THIS            reduce using rule 263 (simpleIdentifier -> INIT .)
    TRUE            reduce using rule 263 (simpleIdentifier -> INIT .)
    VAL             reduce using rule 263 (simpleIdentifier -> INIT .)
    VAR             reduce using rule 263 (simpleIdentifier -> INIT .)
    DOUBLE          reduce using rule 263 (simpleIdentifier -> INIT .)
    WHEN            reduce using rule 263 (simpleIdentifier -> INIT .)
    LONG            reduce using rule 263 (simpleIdentifier -> INIT .)
    LITERAL_STRING  reduce using rule 263 (simpleIdentifier -> INIT .)
    COLONCOLON      reduce using rule 263 (simpleIdentifier -> INIT .)
    LCCT            reduce using rule 263 (simpleIdentifier -> INIT .)
    IF              reduce using rule 263 (simpleIdentifier -> INIT .)
    RETURN          reduce using rule 263 (simpleIdentifier -> INIT .)
    RETURN_AT       reduce using rule 263 (simpleIdentifier -> INIT .)
    CONTINUE        reduce using rule 263 (simpleIdentifier -> INIT .)
    CONTINUE_AT     reduce using rule 263 (simpleIdentifier -> INIT .)
    BREAK           reduce using rule 263 (simpleIdentifier -> INIT .)
    BREAK_AT        reduce using rule 263 (simpleIdentifier -> INIT .)
    RCHAVE          reduce using rule 263 (simpleIdentifier -> INIT .)
    INCREMENTO      reduce using rule 263 (simpleIdentifier -> INIT .)
    DECREMENTO      reduce using rule 263 (simpleIdentifier -> INIT .)
    MINUS           reduce using rule 263 (simpleIdentifier -> INIT .)
    PLUS            reduce using rule 263 (simpleIdentifier -> INIT .)
    NOT             reduce using rule 263 (simpleIdentifier -> INIT .)
    SUSPEND         reduce using rule 263 (simpleIdentifier -> INIT .)
    PV              reduce using rule 263 (simpleIdentifier -> INIT .)
    ELSE            reduce using rule 263 (simpleIdentifier -> INIT .)
    PONTO           reduce using rule 263 (simpleIdentifier -> INIT .)
    AS              reduce using rule 263 (simpleIdentifier -> INIT .)
    MAISIGUAL       reduce using rule 263 (simpleIdentifier -> INIT .)
    MENOSIGUAL      reduce using rule 263 (simpleIdentifier -> INIT .)
    MULTIGUAL       reduce using rule 263 (simpleIdentifier -> INIT .)
    DIVIGUAL        reduce using rule 263 (simpleIdentifier -> INIT .)
    MODIGUAL        reduce using rule 263 (simpleIdentifier -> INIT .)
    MULT            reduce using rule 263 (simpleIdentifier -> INIT .)
    DIVIDE          reduce using rule 263 (simpleIdentifier -> INIT .)
    MOD             reduce using rule 263 (simpleIdentifier -> INIT .)
    PONTOPONTO      reduce using rule 263 (simpleIdentifier -> INIT .)
    ELVIS           reduce using rule 263 (simpleIdentifier -> INIT .)
    IN              reduce using rule 263 (simpleIdentifier -> INIT .)
    NOT_IN          reduce using rule 263 (simpleIdentifier -> INIT .)
    IS              reduce using rule 263 (simpleIdentifier -> INIT .)
    NOT_IS          reduce using rule 263 (simpleIdentifier -> INIT .)
    MAIOR           reduce using rule 263 (simpleIdentifier -> INIT .)
    MENORIGUAL      reduce using rule 263 (simpleIdentifier -> INIT .)
    MAIORIGUAL      reduce using rule 263 (simpleIdentifier -> INIT .)
    DIFERENTE       reduce using rule 263 (simpleIdentifier -> INIT .)
    IDENTIDADE      reduce using rule 263 (simpleIdentifier -> INIT .)
    IGUALDADE       reduce using rule 263 (simpleIdentifier -> INIT .)
    SEMIDENTIDADE   reduce using rule 263 (simpleIdentifier -> INIT .)
    AND             reduce using rule 263 (simpleIdentifier -> INIT .)
    OR              reduce using rule 263 (simpleIdentifier -> INIT .)
    COMMA           reduce using rule 263 (simpleIdentifier -> INIT .)
    RPAREN          reduce using rule 263 (simpleIdentifier -> INIT .)
    RCCT            reduce using rule 263 (simpleIdentifier -> INIT .)
    ATRIBUICAO      reduce using rule 263 (simpleIdentifier -> INIT .)
    SETA            reduce using rule 263 (simpleIdentifier -> INIT .)
    CLASS           reduce using rule 263 (simpleIdentifier -> INIT .)


state 10

    (264) simpleIdentifier -> NOINLINE .

    LPAREN          reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    DOISP           reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    MENOR           reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    LCHAVE          reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    FUN             reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    $end            reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    FOR             reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    WHILE           reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    DO              reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    ID              reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    CROSSINLINE     reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    IMPORT          reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    INIT            reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    NOINLINE        reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    OUT             reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    VARARG          reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    WHERE           reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    INT             reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    FLOAT           reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    BOOLEAN         reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    STRING          reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    ARRAY           reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    CHAR            reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    OBJECT          reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    CONST           reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    CONSTRUCTOR     reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    EOF             reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    FALSE           reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    FUNCTION        reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    NULL            reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    NULLABLE        reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    NUMBER          reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    OPERATOR        reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    SMARTCAST       reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    THIS            reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    TRUE            reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    VAL             reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    VAR             reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    DOUBLE          reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    WHEN            reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    LONG            reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    LITERAL_STRING  reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    COLONCOLON      reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    LCCT            reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    IF              reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    RETURN          reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    RETURN_AT       reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    CONTINUE        reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    CONTINUE_AT     reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    BREAK           reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    BREAK_AT        reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    RCHAVE          reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    INCREMENTO      reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    DECREMENTO      reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    MINUS           reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    PLUS            reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    NOT             reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    SUSPEND         reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    PV              reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    ELSE            reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    PONTO           reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    AS              reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    MAISIGUAL       reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    MENOSIGUAL      reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    MULTIGUAL       reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    DIVIGUAL        reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    MODIGUAL        reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    MULT            reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    DIVIDE          reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    MOD             reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    PONTOPONTO      reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    ELVIS           reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    IN              reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    NOT_IN          reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    IS              reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    NOT_IS          reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    MAIOR           reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    MENORIGUAL      reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    MAIORIGUAL      reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    DIFERENTE       reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    IDENTIDADE      reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    IGUALDADE       reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    SEMIDENTIDADE   reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    AND             reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    OR              reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    COMMA           reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    RPAREN          reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    RCCT            reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    ATRIBUICAO      reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    SETA            reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    CLASS           reduce using rule 264 (simpleIdentifier -> NOINLINE .)


state 11

    (265) simpleIdentifier -> OUT .

    LPAREN          reduce using rule 265 (simpleIdentifier -> OUT .)
    DOISP           reduce using rule 265 (simpleIdentifier -> OUT .)
    MENOR           reduce using rule 265 (simpleIdentifier -> OUT .)
    LCHAVE          reduce using rule 265 (simpleIdentifier -> OUT .)
    FUN             reduce using rule 265 (simpleIdentifier -> OUT .)
    $end            reduce using rule 265 (simpleIdentifier -> OUT .)
    FOR             reduce using rule 265 (simpleIdentifier -> OUT .)
    WHILE           reduce using rule 265 (simpleIdentifier -> OUT .)
    DO              reduce using rule 265 (simpleIdentifier -> OUT .)
    ID              reduce using rule 265 (simpleIdentifier -> OUT .)
    CROSSINLINE     reduce using rule 265 (simpleIdentifier -> OUT .)
    IMPORT          reduce using rule 265 (simpleIdentifier -> OUT .)
    INIT            reduce using rule 265 (simpleIdentifier -> OUT .)
    NOINLINE        reduce using rule 265 (simpleIdentifier -> OUT .)
    OUT             reduce using rule 265 (simpleIdentifier -> OUT .)
    VARARG          reduce using rule 265 (simpleIdentifier -> OUT .)
    WHERE           reduce using rule 265 (simpleIdentifier -> OUT .)
    INT             reduce using rule 265 (simpleIdentifier -> OUT .)
    FLOAT           reduce using rule 265 (simpleIdentifier -> OUT .)
    BOOLEAN         reduce using rule 265 (simpleIdentifier -> OUT .)
    STRING          reduce using rule 265 (simpleIdentifier -> OUT .)
    ARRAY           reduce using rule 265 (simpleIdentifier -> OUT .)
    CHAR            reduce using rule 265 (simpleIdentifier -> OUT .)
    OBJECT          reduce using rule 265 (simpleIdentifier -> OUT .)
    CONST           reduce using rule 265 (simpleIdentifier -> OUT .)
    CONSTRUCTOR     reduce using rule 265 (simpleIdentifier -> OUT .)
    EOF             reduce using rule 265 (simpleIdentifier -> OUT .)
    FALSE           reduce using rule 265 (simpleIdentifier -> OUT .)
    FUNCTION        reduce using rule 265 (simpleIdentifier -> OUT .)
    NULL            reduce using rule 265 (simpleIdentifier -> OUT .)
    NULLABLE        reduce using rule 265 (simpleIdentifier -> OUT .)
    NUMBER          reduce using rule 265 (simpleIdentifier -> OUT .)
    OPERATOR        reduce using rule 265 (simpleIdentifier -> OUT .)
    SMARTCAST       reduce using rule 265 (simpleIdentifier -> OUT .)
    THIS            reduce using rule 265 (simpleIdentifier -> OUT .)
    TRUE            reduce using rule 265 (simpleIdentifier -> OUT .)
    VAL             reduce using rule 265 (simpleIdentifier -> OUT .)
    VAR             reduce using rule 265 (simpleIdentifier -> OUT .)
    DOUBLE          reduce using rule 265 (simpleIdentifier -> OUT .)
    WHEN            reduce using rule 265 (simpleIdentifier -> OUT .)
    LONG            reduce using rule 265 (simpleIdentifier -> OUT .)
    LITERAL_STRING  reduce using rule 265 (simpleIdentifier -> OUT .)
    COLONCOLON      reduce using rule 265 (simpleIdentifier -> OUT .)
    LCCT            reduce using rule 265 (simpleIdentifier -> OUT .)
    IF              reduce using rule 265 (simpleIdentifier -> OUT .)
    RETURN          reduce using rule 265 (simpleIdentifier -> OUT .)
    RETURN_AT       reduce using rule 265 (simpleIdentifier -> OUT .)
    CONTINUE        reduce using rule 265 (simpleIdentifier -> OUT .)
    CONTINUE_AT     reduce using rule 265 (simpleIdentifier -> OUT .)
    BREAK           reduce using rule 265 (simpleIdentifier -> OUT .)
    BREAK_AT        reduce using rule 265 (simpleIdentifier -> OUT .)
    RCHAVE          reduce using rule 265 (simpleIdentifier -> OUT .)
    INCREMENTO      reduce using rule 265 (simpleIdentifier -> OUT .)
    DECREMENTO      reduce using rule 265 (simpleIdentifier -> OUT .)
    MINUS           reduce using rule 265 (simpleIdentifier -> OUT .)
    PLUS            reduce using rule 265 (simpleIdentifier -> OUT .)
    NOT             reduce using rule 265 (simpleIdentifier -> OUT .)
    SUSPEND         reduce using rule 265 (simpleIdentifier -> OUT .)
    PV              reduce using rule 265 (simpleIdentifier -> OUT .)
    ELSE            reduce using rule 265 (simpleIdentifier -> OUT .)
    PONTO           reduce using rule 265 (simpleIdentifier -> OUT .)
    AS              reduce using rule 265 (simpleIdentifier -> OUT .)
    MAISIGUAL       reduce using rule 265 (simpleIdentifier -> OUT .)
    MENOSIGUAL      reduce using rule 265 (simpleIdentifier -> OUT .)
    MULTIGUAL       reduce using rule 265 (simpleIdentifier -> OUT .)
    DIVIGUAL        reduce using rule 265 (simpleIdentifier -> OUT .)
    MODIGUAL        reduce using rule 265 (simpleIdentifier -> OUT .)
    MULT            reduce using rule 265 (simpleIdentifier -> OUT .)
    DIVIDE          reduce using rule 265 (simpleIdentifier -> OUT .)
    MOD             reduce using rule 265 (simpleIdentifier -> OUT .)
    PONTOPONTO      reduce using rule 265 (simpleIdentifier -> OUT .)
    ELVIS           reduce using rule 265 (simpleIdentifier -> OUT .)
    IN              reduce using rule 265 (simpleIdentifier -> OUT .)
    NOT_IN          reduce using rule 265 (simpleIdentifier -> OUT .)
    IS              reduce using rule 265 (simpleIdentifier -> OUT .)
    NOT_IS          reduce using rule 265 (simpleIdentifier -> OUT .)
    MAIOR           reduce using rule 265 (simpleIdentifier -> OUT .)
    MENORIGUAL      reduce using rule 265 (simpleIdentifier -> OUT .)
    MAIORIGUAL      reduce using rule 265 (simpleIdentifier -> OUT .)
    DIFERENTE       reduce using rule 265 (simpleIdentifier -> OUT .)
    IDENTIDADE      reduce using rule 265 (simpleIdentifier -> OUT .)
    IGUALDADE       reduce using rule 265 (simpleIdentifier -> OUT .)
    SEMIDENTIDADE   reduce using rule 265 (simpleIdentifier -> OUT .)
    AND             reduce using rule 265 (simpleIdentifier -> OUT .)
    OR              reduce using rule 265 (simpleIdentifier -> OUT .)
    COMMA           reduce using rule 265 (simpleIdentifier -> OUT .)
    RPAREN          reduce using rule 265 (simpleIdentifier -> OUT .)
    RCCT            reduce using rule 265 (simpleIdentifier -> OUT .)
    ATRIBUICAO      reduce using rule 265 (simpleIdentifier -> OUT .)
    SETA            reduce using rule 265 (simpleIdentifier -> OUT .)
    CLASS           reduce using rule 265 (simpleIdentifier -> OUT .)


state 12

    (266) simpleIdentifier -> VARARG .

    LPAREN          reduce using rule 266 (simpleIdentifier -> VARARG .)
    DOISP           reduce using rule 266 (simpleIdentifier -> VARARG .)
    MENOR           reduce using rule 266 (simpleIdentifier -> VARARG .)
    LCHAVE          reduce using rule 266 (simpleIdentifier -> VARARG .)
    FUN             reduce using rule 266 (simpleIdentifier -> VARARG .)
    $end            reduce using rule 266 (simpleIdentifier -> VARARG .)
    FOR             reduce using rule 266 (simpleIdentifier -> VARARG .)
    WHILE           reduce using rule 266 (simpleIdentifier -> VARARG .)
    DO              reduce using rule 266 (simpleIdentifier -> VARARG .)
    ID              reduce using rule 266 (simpleIdentifier -> VARARG .)
    CROSSINLINE     reduce using rule 266 (simpleIdentifier -> VARARG .)
    IMPORT          reduce using rule 266 (simpleIdentifier -> VARARG .)
    INIT            reduce using rule 266 (simpleIdentifier -> VARARG .)
    NOINLINE        reduce using rule 266 (simpleIdentifier -> VARARG .)
    OUT             reduce using rule 266 (simpleIdentifier -> VARARG .)
    VARARG          reduce using rule 266 (simpleIdentifier -> VARARG .)
    WHERE           reduce using rule 266 (simpleIdentifier -> VARARG .)
    INT             reduce using rule 266 (simpleIdentifier -> VARARG .)
    FLOAT           reduce using rule 266 (simpleIdentifier -> VARARG .)
    BOOLEAN         reduce using rule 266 (simpleIdentifier -> VARARG .)
    STRING          reduce using rule 266 (simpleIdentifier -> VARARG .)
    ARRAY           reduce using rule 266 (simpleIdentifier -> VARARG .)
    CHAR            reduce using rule 266 (simpleIdentifier -> VARARG .)
    OBJECT          reduce using rule 266 (simpleIdentifier -> VARARG .)
    CONST           reduce using rule 266 (simpleIdentifier -> VARARG .)
    CONSTRUCTOR     reduce using rule 266 (simpleIdentifier -> VARARG .)
    EOF             reduce using rule 266 (simpleIdentifier -> VARARG .)
    FALSE           reduce using rule 266 (simpleIdentifier -> VARARG .)
    FUNCTION        reduce using rule 266 (simpleIdentifier -> VARARG .)
    NULL            reduce using rule 266 (simpleIdentifier -> VARARG .)
    NULLABLE        reduce using rule 266 (simpleIdentifier -> VARARG .)
    NUMBER          reduce using rule 266 (simpleIdentifier -> VARARG .)
    OPERATOR        reduce using rule 266 (simpleIdentifier -> VARARG .)
    SMARTCAST       reduce using rule 266 (simpleIdentifier -> VARARG .)
    THIS            reduce using rule 266 (simpleIdentifier -> VARARG .)
    TRUE            reduce using rule 266 (simpleIdentifier -> VARARG .)
    VAL             reduce using rule 266 (simpleIdentifier -> VARARG .)
    VAR             reduce using rule 266 (simpleIdentifier -> VARARG .)
    DOUBLE          reduce using rule 266 (simpleIdentifier -> VARARG .)
    WHEN            reduce using rule 266 (simpleIdentifier -> VARARG .)
    LONG            reduce using rule 266 (simpleIdentifier -> VARARG .)
    LITERAL_STRING  reduce using rule 266 (simpleIdentifier -> VARARG .)
    COLONCOLON      reduce using rule 266 (simpleIdentifier -> VARARG .)
    LCCT            reduce using rule 266 (simpleIdentifier -> VARARG .)
    IF              reduce using rule 266 (simpleIdentifier -> VARARG .)
    RETURN          reduce using rule 266 (simpleIdentifier -> VARARG .)
    RETURN_AT       reduce using rule 266 (simpleIdentifier -> VARARG .)
    CONTINUE        reduce using rule 266 (simpleIdentifier -> VARARG .)
    CONTINUE_AT     reduce using rule 266 (simpleIdentifier -> VARARG .)
    BREAK           reduce using rule 266 (simpleIdentifier -> VARARG .)
    BREAK_AT        reduce using rule 266 (simpleIdentifier -> VARARG .)
    RCHAVE          reduce using rule 266 (simpleIdentifier -> VARARG .)
    INCREMENTO      reduce using rule 266 (simpleIdentifier -> VARARG .)
    DECREMENTO      reduce using rule 266 (simpleIdentifier -> VARARG .)
    MINUS           reduce using rule 266 (simpleIdentifier -> VARARG .)
    PLUS            reduce using rule 266 (simpleIdentifier -> VARARG .)
    NOT             reduce using rule 266 (simpleIdentifier -> VARARG .)
    SUSPEND         reduce using rule 266 (simpleIdentifier -> VARARG .)
    PV              reduce using rule 266 (simpleIdentifier -> VARARG .)
    ELSE            reduce using rule 266 (simpleIdentifier -> VARARG .)
    PONTO           reduce using rule 266 (simpleIdentifier -> VARARG .)
    AS              reduce using rule 266 (simpleIdentifier -> VARARG .)
    MAISIGUAL       reduce using rule 266 (simpleIdentifier -> VARARG .)
    MENOSIGUAL      reduce using rule 266 (simpleIdentifier -> VARARG .)
    MULTIGUAL       reduce using rule 266 (simpleIdentifier -> VARARG .)
    DIVIGUAL        reduce using rule 266 (simpleIdentifier -> VARARG .)
    MODIGUAL        reduce using rule 266 (simpleIdentifier -> VARARG .)
    MULT            reduce using rule 266 (simpleIdentifier -> VARARG .)
    DIVIDE          reduce using rule 266 (simpleIdentifier -> VARARG .)
    MOD             reduce using rule 266 (simpleIdentifier -> VARARG .)
    PONTOPONTO      reduce using rule 266 (simpleIdentifier -> VARARG .)
    ELVIS           reduce using rule 266 (simpleIdentifier -> VARARG .)
    IN              reduce using rule 266 (simpleIdentifier -> VARARG .)
    NOT_IN          reduce using rule 266 (simpleIdentifier -> VARARG .)
    IS              reduce using rule 266 (simpleIdentifier -> VARARG .)
    NOT_IS          reduce using rule 266 (simpleIdentifier -> VARARG .)
    MAIOR           reduce using rule 266 (simpleIdentifier -> VARARG .)
    MENORIGUAL      reduce using rule 266 (simpleIdentifier -> VARARG .)
    MAIORIGUAL      reduce using rule 266 (simpleIdentifier -> VARARG .)
    DIFERENTE       reduce using rule 266 (simpleIdentifier -> VARARG .)
    IDENTIDADE      reduce using rule 266 (simpleIdentifier -> VARARG .)
    IGUALDADE       reduce using rule 266 (simpleIdentifier -> VARARG .)
    SEMIDENTIDADE   reduce using rule 266 (simpleIdentifier -> VARARG .)
    AND             reduce using rule 266 (simpleIdentifier -> VARARG .)
    OR              reduce using rule 266 (simpleIdentifier -> VARARG .)
    COMMA           reduce using rule 266 (simpleIdentifier -> VARARG .)
    RPAREN          reduce using rule 266 (simpleIdentifier -> VARARG .)
    RCCT            reduce using rule 266 (simpleIdentifier -> VARARG .)
    ATRIBUICAO      reduce using rule 266 (simpleIdentifier -> VARARG .)
    SETA            reduce using rule 266 (simpleIdentifier -> VARARG .)
    CLASS           reduce using rule 266 (simpleIdentifier -> VARARG .)


state 13

    (267) simpleIdentifier -> WHERE .

    LPAREN          reduce using rule 267 (simpleIdentifier -> WHERE .)
    DOISP           reduce using rule 267 (simpleIdentifier -> WHERE .)
    MENOR           reduce using rule 267 (simpleIdentifier -> WHERE .)
    LCHAVE          reduce using rule 267 (simpleIdentifier -> WHERE .)
    FUN             reduce using rule 267 (simpleIdentifier -> WHERE .)
    $end            reduce using rule 267 (simpleIdentifier -> WHERE .)
    FOR             reduce using rule 267 (simpleIdentifier -> WHERE .)
    WHILE           reduce using rule 267 (simpleIdentifier -> WHERE .)
    DO              reduce using rule 267 (simpleIdentifier -> WHERE .)
    ID              reduce using rule 267 (simpleIdentifier -> WHERE .)
    CROSSINLINE     reduce using rule 267 (simpleIdentifier -> WHERE .)
    IMPORT          reduce using rule 267 (simpleIdentifier -> WHERE .)
    INIT            reduce using rule 267 (simpleIdentifier -> WHERE .)
    NOINLINE        reduce using rule 267 (simpleIdentifier -> WHERE .)
    OUT             reduce using rule 267 (simpleIdentifier -> WHERE .)
    VARARG          reduce using rule 267 (simpleIdentifier -> WHERE .)
    WHERE           reduce using rule 267 (simpleIdentifier -> WHERE .)
    INT             reduce using rule 267 (simpleIdentifier -> WHERE .)
    FLOAT           reduce using rule 267 (simpleIdentifier -> WHERE .)
    BOOLEAN         reduce using rule 267 (simpleIdentifier -> WHERE .)
    STRING          reduce using rule 267 (simpleIdentifier -> WHERE .)
    ARRAY           reduce using rule 267 (simpleIdentifier -> WHERE .)
    CHAR            reduce using rule 267 (simpleIdentifier -> WHERE .)
    OBJECT          reduce using rule 267 (simpleIdentifier -> WHERE .)
    CONST           reduce using rule 267 (simpleIdentifier -> WHERE .)
    CONSTRUCTOR     reduce using rule 267 (simpleIdentifier -> WHERE .)
    EOF             reduce using rule 267 (simpleIdentifier -> WHERE .)
    FALSE           reduce using rule 267 (simpleIdentifier -> WHERE .)
    FUNCTION        reduce using rule 267 (simpleIdentifier -> WHERE .)
    NULL            reduce using rule 267 (simpleIdentifier -> WHERE .)
    NULLABLE        reduce using rule 267 (simpleIdentifier -> WHERE .)
    NUMBER          reduce using rule 267 (simpleIdentifier -> WHERE .)
    OPERATOR        reduce using rule 267 (simpleIdentifier -> WHERE .)
    SMARTCAST       reduce using rule 267 (simpleIdentifier -> WHERE .)
    THIS            reduce using rule 267 (simpleIdentifier -> WHERE .)
    TRUE            reduce using rule 267 (simpleIdentifier -> WHERE .)
    VAL             reduce using rule 267 (simpleIdentifier -> WHERE .)
    VAR             reduce using rule 267 (simpleIdentifier -> WHERE .)
    DOUBLE          reduce using rule 267 (simpleIdentifier -> WHERE .)
    WHEN            reduce using rule 267 (simpleIdentifier -> WHERE .)
    LONG            reduce using rule 267 (simpleIdentifier -> WHERE .)
    LITERAL_STRING  reduce using rule 267 (simpleIdentifier -> WHERE .)
    COLONCOLON      reduce using rule 267 (simpleIdentifier -> WHERE .)
    LCCT            reduce using rule 267 (simpleIdentifier -> WHERE .)
    IF              reduce using rule 267 (simpleIdentifier -> WHERE .)
    RETURN          reduce using rule 267 (simpleIdentifier -> WHERE .)
    RETURN_AT       reduce using rule 267 (simpleIdentifier -> WHERE .)
    CONTINUE        reduce using rule 267 (simpleIdentifier -> WHERE .)
    CONTINUE_AT     reduce using rule 267 (simpleIdentifier -> WHERE .)
    BREAK           reduce using rule 267 (simpleIdentifier -> WHERE .)
    BREAK_AT        reduce using rule 267 (simpleIdentifier -> WHERE .)
    RCHAVE          reduce using rule 267 (simpleIdentifier -> WHERE .)
    INCREMENTO      reduce using rule 267 (simpleIdentifier -> WHERE .)
    DECREMENTO      reduce using rule 267 (simpleIdentifier -> WHERE .)
    MINUS           reduce using rule 267 (simpleIdentifier -> WHERE .)
    PLUS            reduce using rule 267 (simpleIdentifier -> WHERE .)
    NOT             reduce using rule 267 (simpleIdentifier -> WHERE .)
    SUSPEND         reduce using rule 267 (simpleIdentifier -> WHERE .)
    PV              reduce using rule 267 (simpleIdentifier -> WHERE .)
    ELSE            reduce using rule 267 (simpleIdentifier -> WHERE .)
    PONTO           reduce using rule 267 (simpleIdentifier -> WHERE .)
    AS              reduce using rule 267 (simpleIdentifier -> WHERE .)
    MAISIGUAL       reduce using rule 267 (simpleIdentifier -> WHERE .)
    MENOSIGUAL      reduce using rule 267 (simpleIdentifier -> WHERE .)
    MULTIGUAL       reduce using rule 267 (simpleIdentifier -> WHERE .)
    DIVIGUAL        reduce using rule 267 (simpleIdentifier -> WHERE .)
    MODIGUAL        reduce using rule 267 (simpleIdentifier -> WHERE .)
    MULT            reduce using rule 267 (simpleIdentifier -> WHERE .)
    DIVIDE          reduce using rule 267 (simpleIdentifier -> WHERE .)
    MOD             reduce using rule 267 (simpleIdentifier -> WHERE .)
    PONTOPONTO      reduce using rule 267 (simpleIdentifier -> WHERE .)
    ELVIS           reduce using rule 267 (simpleIdentifier -> WHERE .)
    IN              reduce using rule 267 (simpleIdentifier -> WHERE .)
    NOT_IN          reduce using rule 267 (simpleIdentifier -> WHERE .)
    IS              reduce using rule 267 (simpleIdentifier -> WHERE .)
    NOT_IS          reduce using rule 267 (simpleIdentifier -> WHERE .)
    MAIOR           reduce using rule 267 (simpleIdentifier -> WHERE .)
    MENORIGUAL      reduce using rule 267 (simpleIdentifier -> WHERE .)
    MAIORIGUAL      reduce using rule 267 (simpleIdentifier -> WHERE .)
    DIFERENTE       reduce using rule 267 (simpleIdentifier -> WHERE .)
    IDENTIDADE      reduce using rule 267 (simpleIdentifier -> WHERE .)
    IGUALDADE       reduce using rule 267 (simpleIdentifier -> WHERE .)
    SEMIDENTIDADE   reduce using rule 267 (simpleIdentifier -> WHERE .)
    AND             reduce using rule 267 (simpleIdentifier -> WHERE .)
    OR              reduce using rule 267 (simpleIdentifier -> WHERE .)
    COMMA           reduce using rule 267 (simpleIdentifier -> WHERE .)
    RPAREN          reduce using rule 267 (simpleIdentifier -> WHERE .)
    RCCT            reduce using rule 267 (simpleIdentifier -> WHERE .)
    ATRIBUICAO      reduce using rule 267 (simpleIdentifier -> WHERE .)
    SETA            reduce using rule 267 (simpleIdentifier -> WHERE .)
    CLASS           reduce using rule 267 (simpleIdentifier -> WHERE .)


state 14

    (268) simpleIdentifier -> INT .

    LPAREN          reduce using rule 268 (simpleIdentifier -> INT .)
    DOISP           reduce using rule 268 (simpleIdentifier -> INT .)
    MENOR           reduce using rule 268 (simpleIdentifier -> INT .)
    LCHAVE          reduce using rule 268 (simpleIdentifier -> INT .)
    FUN             reduce using rule 268 (simpleIdentifier -> INT .)
    $end            reduce using rule 268 (simpleIdentifier -> INT .)
    FOR             reduce using rule 268 (simpleIdentifier -> INT .)
    WHILE           reduce using rule 268 (simpleIdentifier -> INT .)
    DO              reduce using rule 268 (simpleIdentifier -> INT .)
    ID              reduce using rule 268 (simpleIdentifier -> INT .)
    CROSSINLINE     reduce using rule 268 (simpleIdentifier -> INT .)
    IMPORT          reduce using rule 268 (simpleIdentifier -> INT .)
    INIT            reduce using rule 268 (simpleIdentifier -> INT .)
    NOINLINE        reduce using rule 268 (simpleIdentifier -> INT .)
    OUT             reduce using rule 268 (simpleIdentifier -> INT .)
    VARARG          reduce using rule 268 (simpleIdentifier -> INT .)
    WHERE           reduce using rule 268 (simpleIdentifier -> INT .)
    INT             reduce using rule 268 (simpleIdentifier -> INT .)
    FLOAT           reduce using rule 268 (simpleIdentifier -> INT .)
    BOOLEAN         reduce using rule 268 (simpleIdentifier -> INT .)
    STRING          reduce using rule 268 (simpleIdentifier -> INT .)
    ARRAY           reduce using rule 268 (simpleIdentifier -> INT .)
    CHAR            reduce using rule 268 (simpleIdentifier -> INT .)
    OBJECT          reduce using rule 268 (simpleIdentifier -> INT .)
    CONST           reduce using rule 268 (simpleIdentifier -> INT .)
    CONSTRUCTOR     reduce using rule 268 (simpleIdentifier -> INT .)
    EOF             reduce using rule 268 (simpleIdentifier -> INT .)
    FALSE           reduce using rule 268 (simpleIdentifier -> INT .)
    FUNCTION        reduce using rule 268 (simpleIdentifier -> INT .)
    NULL            reduce using rule 268 (simpleIdentifier -> INT .)
    NULLABLE        reduce using rule 268 (simpleIdentifier -> INT .)
    NUMBER          reduce using rule 268 (simpleIdentifier -> INT .)
    OPERATOR        reduce using rule 268 (simpleIdentifier -> INT .)
    SMARTCAST       reduce using rule 268 (simpleIdentifier -> INT .)
    THIS            reduce using rule 268 (simpleIdentifier -> INT .)
    TRUE            reduce using rule 268 (simpleIdentifier -> INT .)
    VAL             reduce using rule 268 (simpleIdentifier -> INT .)
    VAR             reduce using rule 268 (simpleIdentifier -> INT .)
    DOUBLE          reduce using rule 268 (simpleIdentifier -> INT .)
    WHEN            reduce using rule 268 (simpleIdentifier -> INT .)
    LONG            reduce using rule 268 (simpleIdentifier -> INT .)
    LITERAL_STRING  reduce using rule 268 (simpleIdentifier -> INT .)
    COLONCOLON      reduce using rule 268 (simpleIdentifier -> INT .)
    LCCT            reduce using rule 268 (simpleIdentifier -> INT .)
    IF              reduce using rule 268 (simpleIdentifier -> INT .)
    RETURN          reduce using rule 268 (simpleIdentifier -> INT .)
    RETURN_AT       reduce using rule 268 (simpleIdentifier -> INT .)
    CONTINUE        reduce using rule 268 (simpleIdentifier -> INT .)
    CONTINUE_AT     reduce using rule 268 (simpleIdentifier -> INT .)
    BREAK           reduce using rule 268 (simpleIdentifier -> INT .)
    BREAK_AT        reduce using rule 268 (simpleIdentifier -> INT .)
    RCHAVE          reduce using rule 268 (simpleIdentifier -> INT .)
    INCREMENTO      reduce using rule 268 (simpleIdentifier -> INT .)
    DECREMENTO      reduce using rule 268 (simpleIdentifier -> INT .)
    MINUS           reduce using rule 268 (simpleIdentifier -> INT .)
    PLUS            reduce using rule 268 (simpleIdentifier -> INT .)
    NOT             reduce using rule 268 (simpleIdentifier -> INT .)
    SUSPEND         reduce using rule 268 (simpleIdentifier -> INT .)
    PV              reduce using rule 268 (simpleIdentifier -> INT .)
    ELSE            reduce using rule 268 (simpleIdentifier -> INT .)
    PONTO           reduce using rule 268 (simpleIdentifier -> INT .)
    AS              reduce using rule 268 (simpleIdentifier -> INT .)
    MAISIGUAL       reduce using rule 268 (simpleIdentifier -> INT .)
    MENOSIGUAL      reduce using rule 268 (simpleIdentifier -> INT .)
    MULTIGUAL       reduce using rule 268 (simpleIdentifier -> INT .)
    DIVIGUAL        reduce using rule 268 (simpleIdentifier -> INT .)
    MODIGUAL        reduce using rule 268 (simpleIdentifier -> INT .)
    MULT            reduce using rule 268 (simpleIdentifier -> INT .)
    DIVIDE          reduce using rule 268 (simpleIdentifier -> INT .)
    MOD             reduce using rule 268 (simpleIdentifier -> INT .)
    PONTOPONTO      reduce using rule 268 (simpleIdentifier -> INT .)
    ELVIS           reduce using rule 268 (simpleIdentifier -> INT .)
    IN              reduce using rule 268 (simpleIdentifier -> INT .)
    NOT_IN          reduce using rule 268 (simpleIdentifier -> INT .)
    IS              reduce using rule 268 (simpleIdentifier -> INT .)
    NOT_IS          reduce using rule 268 (simpleIdentifier -> INT .)
    MAIOR           reduce using rule 268 (simpleIdentifier -> INT .)
    MENORIGUAL      reduce using rule 268 (simpleIdentifier -> INT .)
    MAIORIGUAL      reduce using rule 268 (simpleIdentifier -> INT .)
    DIFERENTE       reduce using rule 268 (simpleIdentifier -> INT .)
    IDENTIDADE      reduce using rule 268 (simpleIdentifier -> INT .)
    IGUALDADE       reduce using rule 268 (simpleIdentifier -> INT .)
    SEMIDENTIDADE   reduce using rule 268 (simpleIdentifier -> INT .)
    AND             reduce using rule 268 (simpleIdentifier -> INT .)
    OR              reduce using rule 268 (simpleIdentifier -> INT .)
    COMMA           reduce using rule 268 (simpleIdentifier -> INT .)
    RPAREN          reduce using rule 268 (simpleIdentifier -> INT .)
    RCCT            reduce using rule 268 (simpleIdentifier -> INT .)
    ATRIBUICAO      reduce using rule 268 (simpleIdentifier -> INT .)
    SETA            reduce using rule 268 (simpleIdentifier -> INT .)
    CLASS           reduce using rule 268 (simpleIdentifier -> INT .)


state 15

    (269) simpleIdentifier -> FLOAT .

    LPAREN          reduce using rule 269 (simpleIdentifier -> FLOAT .)
    DOISP           reduce using rule 269 (simpleIdentifier -> FLOAT .)
    MENOR           reduce using rule 269 (simpleIdentifier -> FLOAT .)
    LCHAVE          reduce using rule 269 (simpleIdentifier -> FLOAT .)
    FUN             reduce using rule 269 (simpleIdentifier -> FLOAT .)
    $end            reduce using rule 269 (simpleIdentifier -> FLOAT .)
    FOR             reduce using rule 269 (simpleIdentifier -> FLOAT .)
    WHILE           reduce using rule 269 (simpleIdentifier -> FLOAT .)
    DO              reduce using rule 269 (simpleIdentifier -> FLOAT .)
    ID              reduce using rule 269 (simpleIdentifier -> FLOAT .)
    CROSSINLINE     reduce using rule 269 (simpleIdentifier -> FLOAT .)
    IMPORT          reduce using rule 269 (simpleIdentifier -> FLOAT .)
    INIT            reduce using rule 269 (simpleIdentifier -> FLOAT .)
    NOINLINE        reduce using rule 269 (simpleIdentifier -> FLOAT .)
    OUT             reduce using rule 269 (simpleIdentifier -> FLOAT .)
    VARARG          reduce using rule 269 (simpleIdentifier -> FLOAT .)
    WHERE           reduce using rule 269 (simpleIdentifier -> FLOAT .)
    INT             reduce using rule 269 (simpleIdentifier -> FLOAT .)
    FLOAT           reduce using rule 269 (simpleIdentifier -> FLOAT .)
    BOOLEAN         reduce using rule 269 (simpleIdentifier -> FLOAT .)
    STRING          reduce using rule 269 (simpleIdentifier -> FLOAT .)
    ARRAY           reduce using rule 269 (simpleIdentifier -> FLOAT .)
    CHAR            reduce using rule 269 (simpleIdentifier -> FLOAT .)
    OBJECT          reduce using rule 269 (simpleIdentifier -> FLOAT .)
    CONST           reduce using rule 269 (simpleIdentifier -> FLOAT .)
    CONSTRUCTOR     reduce using rule 269 (simpleIdentifier -> FLOAT .)
    EOF             reduce using rule 269 (simpleIdentifier -> FLOAT .)
    FALSE           reduce using rule 269 (simpleIdentifier -> FLOAT .)
    FUNCTION        reduce using rule 269 (simpleIdentifier -> FLOAT .)
    NULL            reduce using rule 269 (simpleIdentifier -> FLOAT .)
    NULLABLE        reduce using rule 269 (simpleIdentifier -> FLOAT .)
    NUMBER          reduce using rule 269 (simpleIdentifier -> FLOAT .)
    OPERATOR        reduce using rule 269 (simpleIdentifier -> FLOAT .)
    SMARTCAST       reduce using rule 269 (simpleIdentifier -> FLOAT .)
    THIS            reduce using rule 269 (simpleIdentifier -> FLOAT .)
    TRUE            reduce using rule 269 (simpleIdentifier -> FLOAT .)
    VAL             reduce using rule 269 (simpleIdentifier -> FLOAT .)
    VAR             reduce using rule 269 (simpleIdentifier -> FLOAT .)
    DOUBLE          reduce using rule 269 (simpleIdentifier -> FLOAT .)
    WHEN            reduce using rule 269 (simpleIdentifier -> FLOAT .)
    LONG            reduce using rule 269 (simpleIdentifier -> FLOAT .)
    LITERAL_STRING  reduce using rule 269 (simpleIdentifier -> FLOAT .)
    COLONCOLON      reduce using rule 269 (simpleIdentifier -> FLOAT .)
    LCCT            reduce using rule 269 (simpleIdentifier -> FLOAT .)
    IF              reduce using rule 269 (simpleIdentifier -> FLOAT .)
    RETURN          reduce using rule 269 (simpleIdentifier -> FLOAT .)
    RETURN_AT       reduce using rule 269 (simpleIdentifier -> FLOAT .)
    CONTINUE        reduce using rule 269 (simpleIdentifier -> FLOAT .)
    CONTINUE_AT     reduce using rule 269 (simpleIdentifier -> FLOAT .)
    BREAK           reduce using rule 269 (simpleIdentifier -> FLOAT .)
    BREAK_AT        reduce using rule 269 (simpleIdentifier -> FLOAT .)
    RCHAVE          reduce using rule 269 (simpleIdentifier -> FLOAT .)
    INCREMENTO      reduce using rule 269 (simpleIdentifier -> FLOAT .)
    DECREMENTO      reduce using rule 269 (simpleIdentifier -> FLOAT .)
    MINUS           reduce using rule 269 (simpleIdentifier -> FLOAT .)
    PLUS            reduce using rule 269 (simpleIdentifier -> FLOAT .)
    NOT             reduce using rule 269 (simpleIdentifier -> FLOAT .)
    SUSPEND         reduce using rule 269 (simpleIdentifier -> FLOAT .)
    PV              reduce using rule 269 (simpleIdentifier -> FLOAT .)
    ELSE            reduce using rule 269 (simpleIdentifier -> FLOAT .)
    PONTO           reduce using rule 269 (simpleIdentifier -> FLOAT .)
    AS              reduce using rule 269 (simpleIdentifier -> FLOAT .)
    MAISIGUAL       reduce using rule 269 (simpleIdentifier -> FLOAT .)
    MENOSIGUAL      reduce using rule 269 (simpleIdentifier -> FLOAT .)
    MULTIGUAL       reduce using rule 269 (simpleIdentifier -> FLOAT .)
    DIVIGUAL        reduce using rule 269 (simpleIdentifier -> FLOAT .)
    MODIGUAL        reduce using rule 269 (simpleIdentifier -> FLOAT .)
    MULT            reduce using rule 269 (simpleIdentifier -> FLOAT .)
    DIVIDE          reduce using rule 269 (simpleIdentifier -> FLOAT .)
    MOD             reduce using rule 269 (simpleIdentifier -> FLOAT .)
    PONTOPONTO      reduce using rule 269 (simpleIdentifier -> FLOAT .)
    ELVIS           reduce using rule 269 (simpleIdentifier -> FLOAT .)
    IN              reduce using rule 269 (simpleIdentifier -> FLOAT .)
    NOT_IN          reduce using rule 269 (simpleIdentifier -> FLOAT .)
    IS              reduce using rule 269 (simpleIdentifier -> FLOAT .)
    NOT_IS          reduce using rule 269 (simpleIdentifier -> FLOAT .)
    MAIOR           reduce using rule 269 (simpleIdentifier -> FLOAT .)
    MENORIGUAL      reduce using rule 269 (simpleIdentifier -> FLOAT .)
    MAIORIGUAL      reduce using rule 269 (simpleIdentifier -> FLOAT .)
    DIFERENTE       reduce using rule 269 (simpleIdentifier -> FLOAT .)
    IDENTIDADE      reduce using rule 269 (simpleIdentifier -> FLOAT .)
    IGUALDADE       reduce using rule 269 (simpleIdentifier -> FLOAT .)
    SEMIDENTIDADE   reduce using rule 269 (simpleIdentifier -> FLOAT .)
    AND             reduce using rule 269 (simpleIdentifier -> FLOAT .)
    OR              reduce using rule 269 (simpleIdentifier -> FLOAT .)
    COMMA           reduce using rule 269 (simpleIdentifier -> FLOAT .)
    RPAREN          reduce using rule 269 (simpleIdentifier -> FLOAT .)
    RCCT            reduce using rule 269 (simpleIdentifier -> FLOAT .)
    ATRIBUICAO      reduce using rule 269 (simpleIdentifier -> FLOAT .)
    SETA            reduce using rule 269 (simpleIdentifier -> FLOAT .)
    CLASS           reduce using rule 269 (simpleIdentifier -> FLOAT .)


state 16

    (270) simpleIdentifier -> BOOLEAN .

    LPAREN          reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    DOISP           reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    MENOR           reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    LCHAVE          reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    FUN             reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    $end            reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    FOR             reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    WHILE           reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    DO              reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    ID              reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    CROSSINLINE     reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    IMPORT          reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    INIT            reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    NOINLINE        reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    OUT             reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    VARARG          reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    WHERE           reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    INT             reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    FLOAT           reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    BOOLEAN         reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    STRING          reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    ARRAY           reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    CHAR            reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    OBJECT          reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    CONST           reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    CONSTRUCTOR     reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    EOF             reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    FALSE           reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    FUNCTION        reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    NULL            reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    NULLABLE        reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    NUMBER          reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    OPERATOR        reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    SMARTCAST       reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    THIS            reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    TRUE            reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    VAL             reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    VAR             reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    DOUBLE          reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    WHEN            reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    LONG            reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    LITERAL_STRING  reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    COLONCOLON      reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    LCCT            reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    IF              reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    RETURN          reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    RETURN_AT       reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    CONTINUE        reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    CONTINUE_AT     reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    BREAK           reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    BREAK_AT        reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    RCHAVE          reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    INCREMENTO      reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    DECREMENTO      reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    MINUS           reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    PLUS            reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    NOT             reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    SUSPEND         reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    PV              reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    ELSE            reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    PONTO           reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    AS              reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    MAISIGUAL       reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    MENOSIGUAL      reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    MULTIGUAL       reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    DIVIGUAL        reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    MODIGUAL        reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    MULT            reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    DIVIDE          reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    MOD             reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    PONTOPONTO      reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    ELVIS           reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    IN              reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    NOT_IN          reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    IS              reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    NOT_IS          reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    MAIOR           reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    MENORIGUAL      reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    MAIORIGUAL      reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    DIFERENTE       reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    IDENTIDADE      reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    IGUALDADE       reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    SEMIDENTIDADE   reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    AND             reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    OR              reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    COMMA           reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    RPAREN          reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    RCCT            reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    ATRIBUICAO      reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    SETA            reduce using rule 270 (simpleIdentifier -> BOOLEAN .)
    CLASS           reduce using rule 270 (simpleIdentifier -> BOOLEAN .)


state 17

    (271) simpleIdentifier -> STRING .

    LPAREN          reduce using rule 271 (simpleIdentifier -> STRING .)
    DOISP           reduce using rule 271 (simpleIdentifier -> STRING .)
    MENOR           reduce using rule 271 (simpleIdentifier -> STRING .)
    LCHAVE          reduce using rule 271 (simpleIdentifier -> STRING .)
    FUN             reduce using rule 271 (simpleIdentifier -> STRING .)
    $end            reduce using rule 271 (simpleIdentifier -> STRING .)
    FOR             reduce using rule 271 (simpleIdentifier -> STRING .)
    WHILE           reduce using rule 271 (simpleIdentifier -> STRING .)
    DO              reduce using rule 271 (simpleIdentifier -> STRING .)
    ID              reduce using rule 271 (simpleIdentifier -> STRING .)
    CROSSINLINE     reduce using rule 271 (simpleIdentifier -> STRING .)
    IMPORT          reduce using rule 271 (simpleIdentifier -> STRING .)
    INIT            reduce using rule 271 (simpleIdentifier -> STRING .)
    NOINLINE        reduce using rule 271 (simpleIdentifier -> STRING .)
    OUT             reduce using rule 271 (simpleIdentifier -> STRING .)
    VARARG          reduce using rule 271 (simpleIdentifier -> STRING .)
    WHERE           reduce using rule 271 (simpleIdentifier -> STRING .)
    INT             reduce using rule 271 (simpleIdentifier -> STRING .)
    FLOAT           reduce using rule 271 (simpleIdentifier -> STRING .)
    BOOLEAN         reduce using rule 271 (simpleIdentifier -> STRING .)
    STRING          reduce using rule 271 (simpleIdentifier -> STRING .)
    ARRAY           reduce using rule 271 (simpleIdentifier -> STRING .)
    CHAR            reduce using rule 271 (simpleIdentifier -> STRING .)
    OBJECT          reduce using rule 271 (simpleIdentifier -> STRING .)
    CONST           reduce using rule 271 (simpleIdentifier -> STRING .)
    CONSTRUCTOR     reduce using rule 271 (simpleIdentifier -> STRING .)
    EOF             reduce using rule 271 (simpleIdentifier -> STRING .)
    FALSE           reduce using rule 271 (simpleIdentifier -> STRING .)
    FUNCTION        reduce using rule 271 (simpleIdentifier -> STRING .)
    NULL            reduce using rule 271 (simpleIdentifier -> STRING .)
    NULLABLE        reduce using rule 271 (simpleIdentifier -> STRING .)
    NUMBER          reduce using rule 271 (simpleIdentifier -> STRING .)
    OPERATOR        reduce using rule 271 (simpleIdentifier -> STRING .)
    SMARTCAST       reduce using rule 271 (simpleIdentifier -> STRING .)
    THIS            reduce using rule 271 (simpleIdentifier -> STRING .)
    TRUE            reduce using rule 271 (simpleIdentifier -> STRING .)
    VAL             reduce using rule 271 (simpleIdentifier -> STRING .)
    VAR             reduce using rule 271 (simpleIdentifier -> STRING .)
    DOUBLE          reduce using rule 271 (simpleIdentifier -> STRING .)
    WHEN            reduce using rule 271 (simpleIdentifier -> STRING .)
    LONG            reduce using rule 271 (simpleIdentifier -> STRING .)
    LITERAL_STRING  reduce using rule 271 (simpleIdentifier -> STRING .)
    COLONCOLON      reduce using rule 271 (simpleIdentifier -> STRING .)
    LCCT            reduce using rule 271 (simpleIdentifier -> STRING .)
    IF              reduce using rule 271 (simpleIdentifier -> STRING .)
    RETURN          reduce using rule 271 (simpleIdentifier -> STRING .)
    RETURN_AT       reduce using rule 271 (simpleIdentifier -> STRING .)
    CONTINUE        reduce using rule 271 (simpleIdentifier -> STRING .)
    CONTINUE_AT     reduce using rule 271 (simpleIdentifier -> STRING .)
    BREAK           reduce using rule 271 (simpleIdentifier -> STRING .)
    BREAK_AT        reduce using rule 271 (simpleIdentifier -> STRING .)
    RCHAVE          reduce using rule 271 (simpleIdentifier -> STRING .)
    INCREMENTO      reduce using rule 271 (simpleIdentifier -> STRING .)
    DECREMENTO      reduce using rule 271 (simpleIdentifier -> STRING .)
    MINUS           reduce using rule 271 (simpleIdentifier -> STRING .)
    PLUS            reduce using rule 271 (simpleIdentifier -> STRING .)
    NOT             reduce using rule 271 (simpleIdentifier -> STRING .)
    SUSPEND         reduce using rule 271 (simpleIdentifier -> STRING .)
    PV              reduce using rule 271 (simpleIdentifier -> STRING .)
    ELSE            reduce using rule 271 (simpleIdentifier -> STRING .)
    PONTO           reduce using rule 271 (simpleIdentifier -> STRING .)
    AS              reduce using rule 271 (simpleIdentifier -> STRING .)
    MAISIGUAL       reduce using rule 271 (simpleIdentifier -> STRING .)
    MENOSIGUAL      reduce using rule 271 (simpleIdentifier -> STRING .)
    MULTIGUAL       reduce using rule 271 (simpleIdentifier -> STRING .)
    DIVIGUAL        reduce using rule 271 (simpleIdentifier -> STRING .)
    MODIGUAL        reduce using rule 271 (simpleIdentifier -> STRING .)
    MULT            reduce using rule 271 (simpleIdentifier -> STRING .)
    DIVIDE          reduce using rule 271 (simpleIdentifier -> STRING .)
    MOD             reduce using rule 271 (simpleIdentifier -> STRING .)
    PONTOPONTO      reduce using rule 271 (simpleIdentifier -> STRING .)
    ELVIS           reduce using rule 271 (simpleIdentifier -> STRING .)
    IN              reduce using rule 271 (simpleIdentifier -> STRING .)
    NOT_IN          reduce using rule 271 (simpleIdentifier -> STRING .)
    IS              reduce using rule 271 (simpleIdentifier -> STRING .)
    NOT_IS          reduce using rule 271 (simpleIdentifier -> STRING .)
    MAIOR           reduce using rule 271 (simpleIdentifier -> STRING .)
    MENORIGUAL      reduce using rule 271 (simpleIdentifier -> STRING .)
    MAIORIGUAL      reduce using rule 271 (simpleIdentifier -> STRING .)
    DIFERENTE       reduce using rule 271 (simpleIdentifier -> STRING .)
    IDENTIDADE      reduce using rule 271 (simpleIdentifier -> STRING .)
    IGUALDADE       reduce using rule 271 (simpleIdentifier -> STRING .)
    SEMIDENTIDADE   reduce using rule 271 (simpleIdentifier -> STRING .)
    AND             reduce using rule 271 (simpleIdentifier -> STRING .)
    OR              reduce using rule 271 (simpleIdentifier -> STRING .)
    COMMA           reduce using rule 271 (simpleIdentifier -> STRING .)
    RPAREN          reduce using rule 271 (simpleIdentifier -> STRING .)
    RCCT            reduce using rule 271 (simpleIdentifier -> STRING .)
    ATRIBUICAO      reduce using rule 271 (simpleIdentifier -> STRING .)
    SETA            reduce using rule 271 (simpleIdentifier -> STRING .)
    CLASS           reduce using rule 271 (simpleIdentifier -> STRING .)


state 18

    (272) simpleIdentifier -> ARRAY .

    LPAREN          reduce using rule 272 (simpleIdentifier -> ARRAY .)
    DOISP           reduce using rule 272 (simpleIdentifier -> ARRAY .)
    MENOR           reduce using rule 272 (simpleIdentifier -> ARRAY .)
    LCHAVE          reduce using rule 272 (simpleIdentifier -> ARRAY .)
    FUN             reduce using rule 272 (simpleIdentifier -> ARRAY .)
    $end            reduce using rule 272 (simpleIdentifier -> ARRAY .)
    FOR             reduce using rule 272 (simpleIdentifier -> ARRAY .)
    WHILE           reduce using rule 272 (simpleIdentifier -> ARRAY .)
    DO              reduce using rule 272 (simpleIdentifier -> ARRAY .)
    ID              reduce using rule 272 (simpleIdentifier -> ARRAY .)
    CROSSINLINE     reduce using rule 272 (simpleIdentifier -> ARRAY .)
    IMPORT          reduce using rule 272 (simpleIdentifier -> ARRAY .)
    INIT            reduce using rule 272 (simpleIdentifier -> ARRAY .)
    NOINLINE        reduce using rule 272 (simpleIdentifier -> ARRAY .)
    OUT             reduce using rule 272 (simpleIdentifier -> ARRAY .)
    VARARG          reduce using rule 272 (simpleIdentifier -> ARRAY .)
    WHERE           reduce using rule 272 (simpleIdentifier -> ARRAY .)
    INT             reduce using rule 272 (simpleIdentifier -> ARRAY .)
    FLOAT           reduce using rule 272 (simpleIdentifier -> ARRAY .)
    BOOLEAN         reduce using rule 272 (simpleIdentifier -> ARRAY .)
    STRING          reduce using rule 272 (simpleIdentifier -> ARRAY .)
    ARRAY           reduce using rule 272 (simpleIdentifier -> ARRAY .)
    CHAR            reduce using rule 272 (simpleIdentifier -> ARRAY .)
    OBJECT          reduce using rule 272 (simpleIdentifier -> ARRAY .)
    CONST           reduce using rule 272 (simpleIdentifier -> ARRAY .)
    CONSTRUCTOR     reduce using rule 272 (simpleIdentifier -> ARRAY .)
    EOF             reduce using rule 272 (simpleIdentifier -> ARRAY .)
    FALSE           reduce using rule 272 (simpleIdentifier -> ARRAY .)
    FUNCTION        reduce using rule 272 (simpleIdentifier -> ARRAY .)
    NULL            reduce using rule 272 (simpleIdentifier -> ARRAY .)
    NULLABLE        reduce using rule 272 (simpleIdentifier -> ARRAY .)
    NUMBER          reduce using rule 272 (simpleIdentifier -> ARRAY .)
    OPERATOR        reduce using rule 272 (simpleIdentifier -> ARRAY .)
    SMARTCAST       reduce using rule 272 (simpleIdentifier -> ARRAY .)
    THIS            reduce using rule 272 (simpleIdentifier -> ARRAY .)
    TRUE            reduce using rule 272 (simpleIdentifier -> ARRAY .)
    VAL             reduce using rule 272 (simpleIdentifier -> ARRAY .)
    VAR             reduce using rule 272 (simpleIdentifier -> ARRAY .)
    DOUBLE          reduce using rule 272 (simpleIdentifier -> ARRAY .)
    WHEN            reduce using rule 272 (simpleIdentifier -> ARRAY .)
    LONG            reduce using rule 272 (simpleIdentifier -> ARRAY .)
    LITERAL_STRING  reduce using rule 272 (simpleIdentifier -> ARRAY .)
    COLONCOLON      reduce using rule 272 (simpleIdentifier -> ARRAY .)
    LCCT            reduce using rule 272 (simpleIdentifier -> ARRAY .)
    IF              reduce using rule 272 (simpleIdentifier -> ARRAY .)
    RETURN          reduce using rule 272 (simpleIdentifier -> ARRAY .)
    RETURN_AT       reduce using rule 272 (simpleIdentifier -> ARRAY .)
    CONTINUE        reduce using rule 272 (simpleIdentifier -> ARRAY .)
    CONTINUE_AT     reduce using rule 272 (simpleIdentifier -> ARRAY .)
    BREAK           reduce using rule 272 (simpleIdentifier -> ARRAY .)
    BREAK_AT        reduce using rule 272 (simpleIdentifier -> ARRAY .)
    RCHAVE          reduce using rule 272 (simpleIdentifier -> ARRAY .)
    INCREMENTO      reduce using rule 272 (simpleIdentifier -> ARRAY .)
    DECREMENTO      reduce using rule 272 (simpleIdentifier -> ARRAY .)
    MINUS           reduce using rule 272 (simpleIdentifier -> ARRAY .)
    PLUS            reduce using rule 272 (simpleIdentifier -> ARRAY .)
    NOT             reduce using rule 272 (simpleIdentifier -> ARRAY .)
    SUSPEND         reduce using rule 272 (simpleIdentifier -> ARRAY .)
    PV              reduce using rule 272 (simpleIdentifier -> ARRAY .)
    ELSE            reduce using rule 272 (simpleIdentifier -> ARRAY .)
    PONTO           reduce using rule 272 (simpleIdentifier -> ARRAY .)
    AS              reduce using rule 272 (simpleIdentifier -> ARRAY .)
    MAISIGUAL       reduce using rule 272 (simpleIdentifier -> ARRAY .)
    MENOSIGUAL      reduce using rule 272 (simpleIdentifier -> ARRAY .)
    MULTIGUAL       reduce using rule 272 (simpleIdentifier -> ARRAY .)
    DIVIGUAL        reduce using rule 272 (simpleIdentifier -> ARRAY .)
    MODIGUAL        reduce using rule 272 (simpleIdentifier -> ARRAY .)
    MULT            reduce using rule 272 (simpleIdentifier -> ARRAY .)
    DIVIDE          reduce using rule 272 (simpleIdentifier -> ARRAY .)
    MOD             reduce using rule 272 (simpleIdentifier -> ARRAY .)
    PONTOPONTO      reduce using rule 272 (simpleIdentifier -> ARRAY .)
    ELVIS           reduce using rule 272 (simpleIdentifier -> ARRAY .)
    IN              reduce using rule 272 (simpleIdentifier -> ARRAY .)
    NOT_IN          reduce using rule 272 (simpleIdentifier -> ARRAY .)
    IS              reduce using rule 272 (simpleIdentifier -> ARRAY .)
    NOT_IS          reduce using rule 272 (simpleIdentifier -> ARRAY .)
    MAIOR           reduce using rule 272 (simpleIdentifier -> ARRAY .)
    MENORIGUAL      reduce using rule 272 (simpleIdentifier -> ARRAY .)
    MAIORIGUAL      reduce using rule 272 (simpleIdentifier -> ARRAY .)
    DIFERENTE       reduce using rule 272 (simpleIdentifier -> ARRAY .)
    IDENTIDADE      reduce using rule 272 (simpleIdentifier -> ARRAY .)
    IGUALDADE       reduce using rule 272 (simpleIdentifier -> ARRAY .)
    SEMIDENTIDADE   reduce using rule 272 (simpleIdentifier -> ARRAY .)
    AND             reduce using rule 272 (simpleIdentifier -> ARRAY .)
    OR              reduce using rule 272 (simpleIdentifier -> ARRAY .)
    COMMA           reduce using rule 272 (simpleIdentifier -> ARRAY .)
    RPAREN          reduce using rule 272 (simpleIdentifier -> ARRAY .)
    RCCT            reduce using rule 272 (simpleIdentifier -> ARRAY .)
    ATRIBUICAO      reduce using rule 272 (simpleIdentifier -> ARRAY .)
    SETA            reduce using rule 272 (simpleIdentifier -> ARRAY .)
    CLASS           reduce using rule 272 (simpleIdentifier -> ARRAY .)


state 19

    (273) simpleIdentifier -> CHAR .

    LPAREN          reduce using rule 273 (simpleIdentifier -> CHAR .)
    DOISP           reduce using rule 273 (simpleIdentifier -> CHAR .)
    MENOR           reduce using rule 273 (simpleIdentifier -> CHAR .)
    LCHAVE          reduce using rule 273 (simpleIdentifier -> CHAR .)
    FUN             reduce using rule 273 (simpleIdentifier -> CHAR .)
    $end            reduce using rule 273 (simpleIdentifier -> CHAR .)
    FOR             reduce using rule 273 (simpleIdentifier -> CHAR .)
    WHILE           reduce using rule 273 (simpleIdentifier -> CHAR .)
    DO              reduce using rule 273 (simpleIdentifier -> CHAR .)
    ID              reduce using rule 273 (simpleIdentifier -> CHAR .)
    CROSSINLINE     reduce using rule 273 (simpleIdentifier -> CHAR .)
    IMPORT          reduce using rule 273 (simpleIdentifier -> CHAR .)
    INIT            reduce using rule 273 (simpleIdentifier -> CHAR .)
    NOINLINE        reduce using rule 273 (simpleIdentifier -> CHAR .)
    OUT             reduce using rule 273 (simpleIdentifier -> CHAR .)
    VARARG          reduce using rule 273 (simpleIdentifier -> CHAR .)
    WHERE           reduce using rule 273 (simpleIdentifier -> CHAR .)
    INT             reduce using rule 273 (simpleIdentifier -> CHAR .)
    FLOAT           reduce using rule 273 (simpleIdentifier -> CHAR .)
    BOOLEAN         reduce using rule 273 (simpleIdentifier -> CHAR .)
    STRING          reduce using rule 273 (simpleIdentifier -> CHAR .)
    ARRAY           reduce using rule 273 (simpleIdentifier -> CHAR .)
    CHAR            reduce using rule 273 (simpleIdentifier -> CHAR .)
    OBJECT          reduce using rule 273 (simpleIdentifier -> CHAR .)
    CONST           reduce using rule 273 (simpleIdentifier -> CHAR .)
    CONSTRUCTOR     reduce using rule 273 (simpleIdentifier -> CHAR .)
    EOF             reduce using rule 273 (simpleIdentifier -> CHAR .)
    FALSE           reduce using rule 273 (simpleIdentifier -> CHAR .)
    FUNCTION        reduce using rule 273 (simpleIdentifier -> CHAR .)
    NULL            reduce using rule 273 (simpleIdentifier -> CHAR .)
    NULLABLE        reduce using rule 273 (simpleIdentifier -> CHAR .)
    NUMBER          reduce using rule 273 (simpleIdentifier -> CHAR .)
    OPERATOR        reduce using rule 273 (simpleIdentifier -> CHAR .)
    SMARTCAST       reduce using rule 273 (simpleIdentifier -> CHAR .)
    THIS            reduce using rule 273 (simpleIdentifier -> CHAR .)
    TRUE            reduce using rule 273 (simpleIdentifier -> CHAR .)
    VAL             reduce using rule 273 (simpleIdentifier -> CHAR .)
    VAR             reduce using rule 273 (simpleIdentifier -> CHAR .)
    DOUBLE          reduce using rule 273 (simpleIdentifier -> CHAR .)
    WHEN            reduce using rule 273 (simpleIdentifier -> CHAR .)
    LONG            reduce using rule 273 (simpleIdentifier -> CHAR .)
    LITERAL_STRING  reduce using rule 273 (simpleIdentifier -> CHAR .)
    COLONCOLON      reduce using rule 273 (simpleIdentifier -> CHAR .)
    LCCT            reduce using rule 273 (simpleIdentifier -> CHAR .)
    IF              reduce using rule 273 (simpleIdentifier -> CHAR .)
    RETURN          reduce using rule 273 (simpleIdentifier -> CHAR .)
    RETURN_AT       reduce using rule 273 (simpleIdentifier -> CHAR .)
    CONTINUE        reduce using rule 273 (simpleIdentifier -> CHAR .)
    CONTINUE_AT     reduce using rule 273 (simpleIdentifier -> CHAR .)
    BREAK           reduce using rule 273 (simpleIdentifier -> CHAR .)
    BREAK_AT        reduce using rule 273 (simpleIdentifier -> CHAR .)
    RCHAVE          reduce using rule 273 (simpleIdentifier -> CHAR .)
    INCREMENTO      reduce using rule 273 (simpleIdentifier -> CHAR .)
    DECREMENTO      reduce using rule 273 (simpleIdentifier -> CHAR .)
    MINUS           reduce using rule 273 (simpleIdentifier -> CHAR .)
    PLUS            reduce using rule 273 (simpleIdentifier -> CHAR .)
    NOT             reduce using rule 273 (simpleIdentifier -> CHAR .)
    SUSPEND         reduce using rule 273 (simpleIdentifier -> CHAR .)
    PV              reduce using rule 273 (simpleIdentifier -> CHAR .)
    ELSE            reduce using rule 273 (simpleIdentifier -> CHAR .)
    PONTO           reduce using rule 273 (simpleIdentifier -> CHAR .)
    AS              reduce using rule 273 (simpleIdentifier -> CHAR .)
    MAISIGUAL       reduce using rule 273 (simpleIdentifier -> CHAR .)
    MENOSIGUAL      reduce using rule 273 (simpleIdentifier -> CHAR .)
    MULTIGUAL       reduce using rule 273 (simpleIdentifier -> CHAR .)
    DIVIGUAL        reduce using rule 273 (simpleIdentifier -> CHAR .)
    MODIGUAL        reduce using rule 273 (simpleIdentifier -> CHAR .)
    MULT            reduce using rule 273 (simpleIdentifier -> CHAR .)
    DIVIDE          reduce using rule 273 (simpleIdentifier -> CHAR .)
    MOD             reduce using rule 273 (simpleIdentifier -> CHAR .)
    PONTOPONTO      reduce using rule 273 (simpleIdentifier -> CHAR .)
    ELVIS           reduce using rule 273 (simpleIdentifier -> CHAR .)
    IN              reduce using rule 273 (simpleIdentifier -> CHAR .)
    NOT_IN          reduce using rule 273 (simpleIdentifier -> CHAR .)
    IS              reduce using rule 273 (simpleIdentifier -> CHAR .)
    NOT_IS          reduce using rule 273 (simpleIdentifier -> CHAR .)
    MAIOR           reduce using rule 273 (simpleIdentifier -> CHAR .)
    MENORIGUAL      reduce using rule 273 (simpleIdentifier -> CHAR .)
    MAIORIGUAL      reduce using rule 273 (simpleIdentifier -> CHAR .)
    DIFERENTE       reduce using rule 273 (simpleIdentifier -> CHAR .)
    IDENTIDADE      reduce using rule 273 (simpleIdentifier -> CHAR .)
    IGUALDADE       reduce using rule 273 (simpleIdentifier -> CHAR .)
    SEMIDENTIDADE   reduce using rule 273 (simpleIdentifier -> CHAR .)
    AND             reduce using rule 273 (simpleIdentifier -> CHAR .)
    OR              reduce using rule 273 (simpleIdentifier -> CHAR .)
    COMMA           reduce using rule 273 (simpleIdentifier -> CHAR .)
    RPAREN          reduce using rule 273 (simpleIdentifier -> CHAR .)
    RCCT            reduce using rule 273 (simpleIdentifier -> CHAR .)
    ATRIBUICAO      reduce using rule 273 (simpleIdentifier -> CHAR .)
    SETA            reduce using rule 273 (simpleIdentifier -> CHAR .)
    CLASS           reduce using rule 273 (simpleIdentifier -> CHAR .)


state 20

    (274) simpleIdentifier -> OBJECT .

    LPAREN          reduce using rule 274 (simpleIdentifier -> OBJECT .)
    DOISP           reduce using rule 274 (simpleIdentifier -> OBJECT .)
    MENOR           reduce using rule 274 (simpleIdentifier -> OBJECT .)
    LCHAVE          reduce using rule 274 (simpleIdentifier -> OBJECT .)
    FUN             reduce using rule 274 (simpleIdentifier -> OBJECT .)
    $end            reduce using rule 274 (simpleIdentifier -> OBJECT .)
    FOR             reduce using rule 274 (simpleIdentifier -> OBJECT .)
    WHILE           reduce using rule 274 (simpleIdentifier -> OBJECT .)
    DO              reduce using rule 274 (simpleIdentifier -> OBJECT .)
    ID              reduce using rule 274 (simpleIdentifier -> OBJECT .)
    CROSSINLINE     reduce using rule 274 (simpleIdentifier -> OBJECT .)
    IMPORT          reduce using rule 274 (simpleIdentifier -> OBJECT .)
    INIT            reduce using rule 274 (simpleIdentifier -> OBJECT .)
    NOINLINE        reduce using rule 274 (simpleIdentifier -> OBJECT .)
    OUT             reduce using rule 274 (simpleIdentifier -> OBJECT .)
    VARARG          reduce using rule 274 (simpleIdentifier -> OBJECT .)
    WHERE           reduce using rule 274 (simpleIdentifier -> OBJECT .)
    INT             reduce using rule 274 (simpleIdentifier -> OBJECT .)
    FLOAT           reduce using rule 274 (simpleIdentifier -> OBJECT .)
    BOOLEAN         reduce using rule 274 (simpleIdentifier -> OBJECT .)
    STRING          reduce using rule 274 (simpleIdentifier -> OBJECT .)
    ARRAY           reduce using rule 274 (simpleIdentifier -> OBJECT .)
    CHAR            reduce using rule 274 (simpleIdentifier -> OBJECT .)
    OBJECT          reduce using rule 274 (simpleIdentifier -> OBJECT .)
    CONST           reduce using rule 274 (simpleIdentifier -> OBJECT .)
    CONSTRUCTOR     reduce using rule 274 (simpleIdentifier -> OBJECT .)
    EOF             reduce using rule 274 (simpleIdentifier -> OBJECT .)
    FALSE           reduce using rule 274 (simpleIdentifier -> OBJECT .)
    FUNCTION        reduce using rule 274 (simpleIdentifier -> OBJECT .)
    NULL            reduce using rule 274 (simpleIdentifier -> OBJECT .)
    NULLABLE        reduce using rule 274 (simpleIdentifier -> OBJECT .)
    NUMBER          reduce using rule 274 (simpleIdentifier -> OBJECT .)
    OPERATOR        reduce using rule 274 (simpleIdentifier -> OBJECT .)
    SMARTCAST       reduce using rule 274 (simpleIdentifier -> OBJECT .)
    THIS            reduce using rule 274 (simpleIdentifier -> OBJECT .)
    TRUE            reduce using rule 274 (simpleIdentifier -> OBJECT .)
    VAL             reduce using rule 274 (simpleIdentifier -> OBJECT .)
    VAR             reduce using rule 274 (simpleIdentifier -> OBJECT .)
    DOUBLE          reduce using rule 274 (simpleIdentifier -> OBJECT .)
    WHEN            reduce using rule 274 (simpleIdentifier -> OBJECT .)
    LONG            reduce using rule 274 (simpleIdentifier -> OBJECT .)
    LITERAL_STRING  reduce using rule 274 (simpleIdentifier -> OBJECT .)
    COLONCOLON      reduce using rule 274 (simpleIdentifier -> OBJECT .)
    LCCT            reduce using rule 274 (simpleIdentifier -> OBJECT .)
    IF              reduce using rule 274 (simpleIdentifier -> OBJECT .)
    RETURN          reduce using rule 274 (simpleIdentifier -> OBJECT .)
    RETURN_AT       reduce using rule 274 (simpleIdentifier -> OBJECT .)
    CONTINUE        reduce using rule 274 (simpleIdentifier -> OBJECT .)
    CONTINUE_AT     reduce using rule 274 (simpleIdentifier -> OBJECT .)
    BREAK           reduce using rule 274 (simpleIdentifier -> OBJECT .)
    BREAK_AT        reduce using rule 274 (simpleIdentifier -> OBJECT .)
    RCHAVE          reduce using rule 274 (simpleIdentifier -> OBJECT .)
    INCREMENTO      reduce using rule 274 (simpleIdentifier -> OBJECT .)
    DECREMENTO      reduce using rule 274 (simpleIdentifier -> OBJECT .)
    MINUS           reduce using rule 274 (simpleIdentifier -> OBJECT .)
    PLUS            reduce using rule 274 (simpleIdentifier -> OBJECT .)
    NOT             reduce using rule 274 (simpleIdentifier -> OBJECT .)
    SUSPEND         reduce using rule 274 (simpleIdentifier -> OBJECT .)
    PV              reduce using rule 274 (simpleIdentifier -> OBJECT .)
    ELSE            reduce using rule 274 (simpleIdentifier -> OBJECT .)
    PONTO           reduce using rule 274 (simpleIdentifier -> OBJECT .)
    AS              reduce using rule 274 (simpleIdentifier -> OBJECT .)
    MAISIGUAL       reduce using rule 274 (simpleIdentifier -> OBJECT .)
    MENOSIGUAL      reduce using rule 274 (simpleIdentifier -> OBJECT .)
    MULTIGUAL       reduce using rule 274 (simpleIdentifier -> OBJECT .)
    DIVIGUAL        reduce using rule 274 (simpleIdentifier -> OBJECT .)
    MODIGUAL        reduce using rule 274 (simpleIdentifier -> OBJECT .)
    MULT            reduce using rule 274 (simpleIdentifier -> OBJECT .)
    DIVIDE          reduce using rule 274 (simpleIdentifier -> OBJECT .)
    MOD             reduce using rule 274 (simpleIdentifier -> OBJECT .)
    PONTOPONTO      reduce using rule 274 (simpleIdentifier -> OBJECT .)
    ELVIS           reduce using rule 274 (simpleIdentifier -> OBJECT .)
    IN              reduce using rule 274 (simpleIdentifier -> OBJECT .)
    NOT_IN          reduce using rule 274 (simpleIdentifier -> OBJECT .)
    IS              reduce using rule 274 (simpleIdentifier -> OBJECT .)
    NOT_IS          reduce using rule 274 (simpleIdentifier -> OBJECT .)
    MAIOR           reduce using rule 274 (simpleIdentifier -> OBJECT .)
    MENORIGUAL      reduce using rule 274 (simpleIdentifier -> OBJECT .)
    MAIORIGUAL      reduce using rule 274 (simpleIdentifier -> OBJECT .)
    DIFERENTE       reduce using rule 274 (simpleIdentifier -> OBJECT .)
    IDENTIDADE      reduce using rule 274 (simpleIdentifier -> OBJECT .)
    IGUALDADE       reduce using rule 274 (simpleIdentifier -> OBJECT .)
    SEMIDENTIDADE   reduce using rule 274 (simpleIdentifier -> OBJECT .)
    AND             reduce using rule 274 (simpleIdentifier -> OBJECT .)
    OR              reduce using rule 274 (simpleIdentifier -> OBJECT .)
    COMMA           reduce using rule 274 (simpleIdentifier -> OBJECT .)
    RPAREN          reduce using rule 274 (simpleIdentifier -> OBJECT .)
    RCCT            reduce using rule 274 (simpleIdentifier -> OBJECT .)
    ATRIBUICAO      reduce using rule 274 (simpleIdentifier -> OBJECT .)
    SETA            reduce using rule 274 (simpleIdentifier -> OBJECT .)
    CLASS           reduce using rule 274 (simpleIdentifier -> OBJECT .)


state 21

    (275) simpleIdentifier -> CONST .

    LPAREN          reduce using rule 275 (simpleIdentifier -> CONST .)
    DOISP           reduce using rule 275 (simpleIdentifier -> CONST .)
    MENOR           reduce using rule 275 (simpleIdentifier -> CONST .)
    LCHAVE          reduce using rule 275 (simpleIdentifier -> CONST .)
    FUN             reduce using rule 275 (simpleIdentifier -> CONST .)
    $end            reduce using rule 275 (simpleIdentifier -> CONST .)
    FOR             reduce using rule 275 (simpleIdentifier -> CONST .)
    WHILE           reduce using rule 275 (simpleIdentifier -> CONST .)
    DO              reduce using rule 275 (simpleIdentifier -> CONST .)
    ID              reduce using rule 275 (simpleIdentifier -> CONST .)
    CROSSINLINE     reduce using rule 275 (simpleIdentifier -> CONST .)
    IMPORT          reduce using rule 275 (simpleIdentifier -> CONST .)
    INIT            reduce using rule 275 (simpleIdentifier -> CONST .)
    NOINLINE        reduce using rule 275 (simpleIdentifier -> CONST .)
    OUT             reduce using rule 275 (simpleIdentifier -> CONST .)
    VARARG          reduce using rule 275 (simpleIdentifier -> CONST .)
    WHERE           reduce using rule 275 (simpleIdentifier -> CONST .)
    INT             reduce using rule 275 (simpleIdentifier -> CONST .)
    FLOAT           reduce using rule 275 (simpleIdentifier -> CONST .)
    BOOLEAN         reduce using rule 275 (simpleIdentifier -> CONST .)
    STRING          reduce using rule 275 (simpleIdentifier -> CONST .)
    ARRAY           reduce using rule 275 (simpleIdentifier -> CONST .)
    CHAR            reduce using rule 275 (simpleIdentifier -> CONST .)
    OBJECT          reduce using rule 275 (simpleIdentifier -> CONST .)
    CONST           reduce using rule 275 (simpleIdentifier -> CONST .)
    CONSTRUCTOR     reduce using rule 275 (simpleIdentifier -> CONST .)
    EOF             reduce using rule 275 (simpleIdentifier -> CONST .)
    FALSE           reduce using rule 275 (simpleIdentifier -> CONST .)
    FUNCTION        reduce using rule 275 (simpleIdentifier -> CONST .)
    NULL            reduce using rule 275 (simpleIdentifier -> CONST .)
    NULLABLE        reduce using rule 275 (simpleIdentifier -> CONST .)
    NUMBER          reduce using rule 275 (simpleIdentifier -> CONST .)
    OPERATOR        reduce using rule 275 (simpleIdentifier -> CONST .)
    SMARTCAST       reduce using rule 275 (simpleIdentifier -> CONST .)
    THIS            reduce using rule 275 (simpleIdentifier -> CONST .)
    TRUE            reduce using rule 275 (simpleIdentifier -> CONST .)
    VAL             reduce using rule 275 (simpleIdentifier -> CONST .)
    VAR             reduce using rule 275 (simpleIdentifier -> CONST .)
    DOUBLE          reduce using rule 275 (simpleIdentifier -> CONST .)
    WHEN            reduce using rule 275 (simpleIdentifier -> CONST .)
    LONG            reduce using rule 275 (simpleIdentifier -> CONST .)
    LITERAL_STRING  reduce using rule 275 (simpleIdentifier -> CONST .)
    COLONCOLON      reduce using rule 275 (simpleIdentifier -> CONST .)
    LCCT            reduce using rule 275 (simpleIdentifier -> CONST .)
    IF              reduce using rule 275 (simpleIdentifier -> CONST .)
    RETURN          reduce using rule 275 (simpleIdentifier -> CONST .)
    RETURN_AT       reduce using rule 275 (simpleIdentifier -> CONST .)
    CONTINUE        reduce using rule 275 (simpleIdentifier -> CONST .)
    CONTINUE_AT     reduce using rule 275 (simpleIdentifier -> CONST .)
    BREAK           reduce using rule 275 (simpleIdentifier -> CONST .)
    BREAK_AT        reduce using rule 275 (simpleIdentifier -> CONST .)
    RCHAVE          reduce using rule 275 (simpleIdentifier -> CONST .)
    INCREMENTO      reduce using rule 275 (simpleIdentifier -> CONST .)
    DECREMENTO      reduce using rule 275 (simpleIdentifier -> CONST .)
    MINUS           reduce using rule 275 (simpleIdentifier -> CONST .)
    PLUS            reduce using rule 275 (simpleIdentifier -> CONST .)
    NOT             reduce using rule 275 (simpleIdentifier -> CONST .)
    SUSPEND         reduce using rule 275 (simpleIdentifier -> CONST .)
    PV              reduce using rule 275 (simpleIdentifier -> CONST .)
    ELSE            reduce using rule 275 (simpleIdentifier -> CONST .)
    PONTO           reduce using rule 275 (simpleIdentifier -> CONST .)
    AS              reduce using rule 275 (simpleIdentifier -> CONST .)
    MAISIGUAL       reduce using rule 275 (simpleIdentifier -> CONST .)
    MENOSIGUAL      reduce using rule 275 (simpleIdentifier -> CONST .)
    MULTIGUAL       reduce using rule 275 (simpleIdentifier -> CONST .)
    DIVIGUAL        reduce using rule 275 (simpleIdentifier -> CONST .)
    MODIGUAL        reduce using rule 275 (simpleIdentifier -> CONST .)
    MULT            reduce using rule 275 (simpleIdentifier -> CONST .)
    DIVIDE          reduce using rule 275 (simpleIdentifier -> CONST .)
    MOD             reduce using rule 275 (simpleIdentifier -> CONST .)
    PONTOPONTO      reduce using rule 275 (simpleIdentifier -> CONST .)
    ELVIS           reduce using rule 275 (simpleIdentifier -> CONST .)
    IN              reduce using rule 275 (simpleIdentifier -> CONST .)
    NOT_IN          reduce using rule 275 (simpleIdentifier -> CONST .)
    IS              reduce using rule 275 (simpleIdentifier -> CONST .)
    NOT_IS          reduce using rule 275 (simpleIdentifier -> CONST .)
    MAIOR           reduce using rule 275 (simpleIdentifier -> CONST .)
    MENORIGUAL      reduce using rule 275 (simpleIdentifier -> CONST .)
    MAIORIGUAL      reduce using rule 275 (simpleIdentifier -> CONST .)
    DIFERENTE       reduce using rule 275 (simpleIdentifier -> CONST .)
    IDENTIDADE      reduce using rule 275 (simpleIdentifier -> CONST .)
    IGUALDADE       reduce using rule 275 (simpleIdentifier -> CONST .)
    SEMIDENTIDADE   reduce using rule 275 (simpleIdentifier -> CONST .)
    AND             reduce using rule 275 (simpleIdentifier -> CONST .)
    OR              reduce using rule 275 (simpleIdentifier -> CONST .)
    COMMA           reduce using rule 275 (simpleIdentifier -> CONST .)
    RPAREN          reduce using rule 275 (simpleIdentifier -> CONST .)
    RCCT            reduce using rule 275 (simpleIdentifier -> CONST .)
    ATRIBUICAO      reduce using rule 275 (simpleIdentifier -> CONST .)
    SETA            reduce using rule 275 (simpleIdentifier -> CONST .)
    CLASS           reduce using rule 275 (simpleIdentifier -> CONST .)


state 22

    (276) simpleIdentifier -> CONSTRUCTOR .

    LPAREN          reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    DOISP           reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    MENOR           reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    LCHAVE          reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    FUN             reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    $end            reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    FOR             reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    WHILE           reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    DO              reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    ID              reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    CROSSINLINE     reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    IMPORT          reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    INIT            reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    NOINLINE        reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    OUT             reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    VARARG          reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    WHERE           reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    INT             reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    FLOAT           reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    BOOLEAN         reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    STRING          reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    ARRAY           reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    CHAR            reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    OBJECT          reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    CONST           reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    CONSTRUCTOR     reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    EOF             reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    FALSE           reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    FUNCTION        reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    NULL            reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    NULLABLE        reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    NUMBER          reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    OPERATOR        reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    SMARTCAST       reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    THIS            reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    TRUE            reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    VAL             reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    VAR             reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    DOUBLE          reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    WHEN            reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    LONG            reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    LITERAL_STRING  reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    COLONCOLON      reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    LCCT            reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    IF              reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    RETURN          reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    RETURN_AT       reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    CONTINUE        reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    CONTINUE_AT     reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    BREAK           reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    BREAK_AT        reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    RCHAVE          reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    INCREMENTO      reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    DECREMENTO      reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    MINUS           reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    PLUS            reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    NOT             reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    SUSPEND         reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    PV              reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    ELSE            reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    PONTO           reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    AS              reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    MAISIGUAL       reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    MENOSIGUAL      reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    MULTIGUAL       reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    DIVIGUAL        reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    MODIGUAL        reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    MULT            reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    DIVIDE          reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    MOD             reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    PONTOPONTO      reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    ELVIS           reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    IN              reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    NOT_IN          reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    IS              reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    NOT_IS          reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    MAIOR           reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    MENORIGUAL      reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    MAIORIGUAL      reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    DIFERENTE       reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    IDENTIDADE      reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    IGUALDADE       reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    SEMIDENTIDADE   reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    AND             reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    OR              reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    COMMA           reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    RPAREN          reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    RCCT            reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    ATRIBUICAO      reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    SETA            reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)
    CLASS           reduce using rule 276 (simpleIdentifier -> CONSTRUCTOR .)


state 23

    (277) simpleIdentifier -> EOF .

    LPAREN          reduce using rule 277 (simpleIdentifier -> EOF .)
    DOISP           reduce using rule 277 (simpleIdentifier -> EOF .)
    MENOR           reduce using rule 277 (simpleIdentifier -> EOF .)
    LCHAVE          reduce using rule 277 (simpleIdentifier -> EOF .)
    FUN             reduce using rule 277 (simpleIdentifier -> EOF .)
    $end            reduce using rule 277 (simpleIdentifier -> EOF .)
    FOR             reduce using rule 277 (simpleIdentifier -> EOF .)
    WHILE           reduce using rule 277 (simpleIdentifier -> EOF .)
    DO              reduce using rule 277 (simpleIdentifier -> EOF .)
    ID              reduce using rule 277 (simpleIdentifier -> EOF .)
    CROSSINLINE     reduce using rule 277 (simpleIdentifier -> EOF .)
    IMPORT          reduce using rule 277 (simpleIdentifier -> EOF .)
    INIT            reduce using rule 277 (simpleIdentifier -> EOF .)
    NOINLINE        reduce using rule 277 (simpleIdentifier -> EOF .)
    OUT             reduce using rule 277 (simpleIdentifier -> EOF .)
    VARARG          reduce using rule 277 (simpleIdentifier -> EOF .)
    WHERE           reduce using rule 277 (simpleIdentifier -> EOF .)
    INT             reduce using rule 277 (simpleIdentifier -> EOF .)
    FLOAT           reduce using rule 277 (simpleIdentifier -> EOF .)
    BOOLEAN         reduce using rule 277 (simpleIdentifier -> EOF .)
    STRING          reduce using rule 277 (simpleIdentifier -> EOF .)
    ARRAY           reduce using rule 277 (simpleIdentifier -> EOF .)
    CHAR            reduce using rule 277 (simpleIdentifier -> EOF .)
    OBJECT          reduce using rule 277 (simpleIdentifier -> EOF .)
    CONST           reduce using rule 277 (simpleIdentifier -> EOF .)
    CONSTRUCTOR     reduce using rule 277 (simpleIdentifier -> EOF .)
    EOF             reduce using rule 277 (simpleIdentifier -> EOF .)
    FALSE           reduce using rule 277 (simpleIdentifier -> EOF .)
    FUNCTION        reduce using rule 277 (simpleIdentifier -> EOF .)
    NULL            reduce using rule 277 (simpleIdentifier -> EOF .)
    NULLABLE        reduce using rule 277 (simpleIdentifier -> EOF .)
    NUMBER          reduce using rule 277 (simpleIdentifier -> EOF .)
    OPERATOR        reduce using rule 277 (simpleIdentifier -> EOF .)
    SMARTCAST       reduce using rule 277 (simpleIdentifier -> EOF .)
    THIS            reduce using rule 277 (simpleIdentifier -> EOF .)
    TRUE            reduce using rule 277 (simpleIdentifier -> EOF .)
    VAL             reduce using rule 277 (simpleIdentifier -> EOF .)
    VAR             reduce using rule 277 (simpleIdentifier -> EOF .)
    DOUBLE          reduce using rule 277 (simpleIdentifier -> EOF .)
    WHEN            reduce using rule 277 (simpleIdentifier -> EOF .)
    LONG            reduce using rule 277 (simpleIdentifier -> EOF .)
    LITERAL_STRING  reduce using rule 277 (simpleIdentifier -> EOF .)
    COLONCOLON      reduce using rule 277 (simpleIdentifier -> EOF .)
    LCCT            reduce using rule 277 (simpleIdentifier -> EOF .)
    IF              reduce using rule 277 (simpleIdentifier -> EOF .)
    RETURN          reduce using rule 277 (simpleIdentifier -> EOF .)
    RETURN_AT       reduce using rule 277 (simpleIdentifier -> EOF .)
    CONTINUE        reduce using rule 277 (simpleIdentifier -> EOF .)
    CONTINUE_AT     reduce using rule 277 (simpleIdentifier -> EOF .)
    BREAK           reduce using rule 277 (simpleIdentifier -> EOF .)
    BREAK_AT        reduce using rule 277 (simpleIdentifier -> EOF .)
    RCHAVE          reduce using rule 277 (simpleIdentifier -> EOF .)
    INCREMENTO      reduce using rule 277 (simpleIdentifier -> EOF .)
    DECREMENTO      reduce using rule 277 (simpleIdentifier -> EOF .)
    MINUS           reduce using rule 277 (simpleIdentifier -> EOF .)
    PLUS            reduce using rule 277 (simpleIdentifier -> EOF .)
    NOT             reduce using rule 277 (simpleIdentifier -> EOF .)
    SUSPEND         reduce using rule 277 (simpleIdentifier -> EOF .)
    PV              reduce using rule 277 (simpleIdentifier -> EOF .)
    ELSE            reduce using rule 277 (simpleIdentifier -> EOF .)
    PONTO           reduce using rule 277 (simpleIdentifier -> EOF .)
    AS              reduce using rule 277 (simpleIdentifier -> EOF .)
    MAISIGUAL       reduce using rule 277 (simpleIdentifier -> EOF .)
    MENOSIGUAL      reduce using rule 277 (simpleIdentifier -> EOF .)
    MULTIGUAL       reduce using rule 277 (simpleIdentifier -> EOF .)
    DIVIGUAL        reduce using rule 277 (simpleIdentifier -> EOF .)
    MODIGUAL        reduce using rule 277 (simpleIdentifier -> EOF .)
    MULT            reduce using rule 277 (simpleIdentifier -> EOF .)
    DIVIDE          reduce using rule 277 (simpleIdentifier -> EOF .)
    MOD             reduce using rule 277 (simpleIdentifier -> EOF .)
    PONTOPONTO      reduce using rule 277 (simpleIdentifier -> EOF .)
    ELVIS           reduce using rule 277 (simpleIdentifier -> EOF .)
    IN              reduce using rule 277 (simpleIdentifier -> EOF .)
    NOT_IN          reduce using rule 277 (simpleIdentifier -> EOF .)
    IS              reduce using rule 277 (simpleIdentifier -> EOF .)
    NOT_IS          reduce using rule 277 (simpleIdentifier -> EOF .)
    MAIOR           reduce using rule 277 (simpleIdentifier -> EOF .)
    MENORIGUAL      reduce using rule 277 (simpleIdentifier -> EOF .)
    MAIORIGUAL      reduce using rule 277 (simpleIdentifier -> EOF .)
    DIFERENTE       reduce using rule 277 (simpleIdentifier -> EOF .)
    IDENTIDADE      reduce using rule 277 (simpleIdentifier -> EOF .)
    IGUALDADE       reduce using rule 277 (simpleIdentifier -> EOF .)
    SEMIDENTIDADE   reduce using rule 277 (simpleIdentifier -> EOF .)
    AND             reduce using rule 277 (simpleIdentifier -> EOF .)
    OR              reduce using rule 277 (simpleIdentifier -> EOF .)
    COMMA           reduce using rule 277 (simpleIdentifier -> EOF .)
    RPAREN          reduce using rule 277 (simpleIdentifier -> EOF .)
    RCCT            reduce using rule 277 (simpleIdentifier -> EOF .)
    ATRIBUICAO      reduce using rule 277 (simpleIdentifier -> EOF .)
    SETA            reduce using rule 277 (simpleIdentifier -> EOF .)
    CLASS           reduce using rule 277 (simpleIdentifier -> EOF .)


state 24

    (278) simpleIdentifier -> FALSE .

    LPAREN          reduce using rule 278 (simpleIdentifier -> FALSE .)
    DOISP           reduce using rule 278 (simpleIdentifier -> FALSE .)
    MENOR           reduce using rule 278 (simpleIdentifier -> FALSE .)
    LCHAVE          reduce using rule 278 (simpleIdentifier -> FALSE .)
    FUN             reduce using rule 278 (simpleIdentifier -> FALSE .)
    $end            reduce using rule 278 (simpleIdentifier -> FALSE .)
    FOR             reduce using rule 278 (simpleIdentifier -> FALSE .)
    WHILE           reduce using rule 278 (simpleIdentifier -> FALSE .)
    DO              reduce using rule 278 (simpleIdentifier -> FALSE .)
    ID              reduce using rule 278 (simpleIdentifier -> FALSE .)
    CROSSINLINE     reduce using rule 278 (simpleIdentifier -> FALSE .)
    IMPORT          reduce using rule 278 (simpleIdentifier -> FALSE .)
    INIT            reduce using rule 278 (simpleIdentifier -> FALSE .)
    NOINLINE        reduce using rule 278 (simpleIdentifier -> FALSE .)
    OUT             reduce using rule 278 (simpleIdentifier -> FALSE .)
    VARARG          reduce using rule 278 (simpleIdentifier -> FALSE .)
    WHERE           reduce using rule 278 (simpleIdentifier -> FALSE .)
    INT             reduce using rule 278 (simpleIdentifier -> FALSE .)
    FLOAT           reduce using rule 278 (simpleIdentifier -> FALSE .)
    BOOLEAN         reduce using rule 278 (simpleIdentifier -> FALSE .)
    STRING          reduce using rule 278 (simpleIdentifier -> FALSE .)
    ARRAY           reduce using rule 278 (simpleIdentifier -> FALSE .)
    CHAR            reduce using rule 278 (simpleIdentifier -> FALSE .)
    OBJECT          reduce using rule 278 (simpleIdentifier -> FALSE .)
    CONST           reduce using rule 278 (simpleIdentifier -> FALSE .)
    CONSTRUCTOR     reduce using rule 278 (simpleIdentifier -> FALSE .)
    EOF             reduce using rule 278 (simpleIdentifier -> FALSE .)
    FALSE           reduce using rule 278 (simpleIdentifier -> FALSE .)
    FUNCTION        reduce using rule 278 (simpleIdentifier -> FALSE .)
    NULL            reduce using rule 278 (simpleIdentifier -> FALSE .)
    NULLABLE        reduce using rule 278 (simpleIdentifier -> FALSE .)
    NUMBER          reduce using rule 278 (simpleIdentifier -> FALSE .)
    OPERATOR        reduce using rule 278 (simpleIdentifier -> FALSE .)
    SMARTCAST       reduce using rule 278 (simpleIdentifier -> FALSE .)
    THIS            reduce using rule 278 (simpleIdentifier -> FALSE .)
    TRUE            reduce using rule 278 (simpleIdentifier -> FALSE .)
    VAL             reduce using rule 278 (simpleIdentifier -> FALSE .)
    VAR             reduce using rule 278 (simpleIdentifier -> FALSE .)
    DOUBLE          reduce using rule 278 (simpleIdentifier -> FALSE .)
    WHEN            reduce using rule 278 (simpleIdentifier -> FALSE .)
    LONG            reduce using rule 278 (simpleIdentifier -> FALSE .)
    LITERAL_STRING  reduce using rule 278 (simpleIdentifier -> FALSE .)
    COLONCOLON      reduce using rule 278 (simpleIdentifier -> FALSE .)
    LCCT            reduce using rule 278 (simpleIdentifier -> FALSE .)
    IF              reduce using rule 278 (simpleIdentifier -> FALSE .)
    RETURN          reduce using rule 278 (simpleIdentifier -> FALSE .)
    RETURN_AT       reduce using rule 278 (simpleIdentifier -> FALSE .)
    CONTINUE        reduce using rule 278 (simpleIdentifier -> FALSE .)
    CONTINUE_AT     reduce using rule 278 (simpleIdentifier -> FALSE .)
    BREAK           reduce using rule 278 (simpleIdentifier -> FALSE .)
    BREAK_AT        reduce using rule 278 (simpleIdentifier -> FALSE .)
    RCHAVE          reduce using rule 278 (simpleIdentifier -> FALSE .)
    INCREMENTO      reduce using rule 278 (simpleIdentifier -> FALSE .)
    DECREMENTO      reduce using rule 278 (simpleIdentifier -> FALSE .)
    MINUS           reduce using rule 278 (simpleIdentifier -> FALSE .)
    PLUS            reduce using rule 278 (simpleIdentifier -> FALSE .)
    NOT             reduce using rule 278 (simpleIdentifier -> FALSE .)
    SUSPEND         reduce using rule 278 (simpleIdentifier -> FALSE .)
    PV              reduce using rule 278 (simpleIdentifier -> FALSE .)
    ELSE            reduce using rule 278 (simpleIdentifier -> FALSE .)
    PONTO           reduce using rule 278 (simpleIdentifier -> FALSE .)
    AS              reduce using rule 278 (simpleIdentifier -> FALSE .)
    MAISIGUAL       reduce using rule 278 (simpleIdentifier -> FALSE .)
    MENOSIGUAL      reduce using rule 278 (simpleIdentifier -> FALSE .)
    MULTIGUAL       reduce using rule 278 (simpleIdentifier -> FALSE .)
    DIVIGUAL        reduce using rule 278 (simpleIdentifier -> FALSE .)
    MODIGUAL        reduce using rule 278 (simpleIdentifier -> FALSE .)
    MULT            reduce using rule 278 (simpleIdentifier -> FALSE .)
    DIVIDE          reduce using rule 278 (simpleIdentifier -> FALSE .)
    MOD             reduce using rule 278 (simpleIdentifier -> FALSE .)
    PONTOPONTO      reduce using rule 278 (simpleIdentifier -> FALSE .)
    ELVIS           reduce using rule 278 (simpleIdentifier -> FALSE .)
    IN              reduce using rule 278 (simpleIdentifier -> FALSE .)
    NOT_IN          reduce using rule 278 (simpleIdentifier -> FALSE .)
    IS              reduce using rule 278 (simpleIdentifier -> FALSE .)
    NOT_IS          reduce using rule 278 (simpleIdentifier -> FALSE .)
    MAIOR           reduce using rule 278 (simpleIdentifier -> FALSE .)
    MENORIGUAL      reduce using rule 278 (simpleIdentifier -> FALSE .)
    MAIORIGUAL      reduce using rule 278 (simpleIdentifier -> FALSE .)
    DIFERENTE       reduce using rule 278 (simpleIdentifier -> FALSE .)
    IDENTIDADE      reduce using rule 278 (simpleIdentifier -> FALSE .)
    IGUALDADE       reduce using rule 278 (simpleIdentifier -> FALSE .)
    SEMIDENTIDADE   reduce using rule 278 (simpleIdentifier -> FALSE .)
    AND             reduce using rule 278 (simpleIdentifier -> FALSE .)
    OR              reduce using rule 278 (simpleIdentifier -> FALSE .)
    COMMA           reduce using rule 278 (simpleIdentifier -> FALSE .)
    RPAREN          reduce using rule 278 (simpleIdentifier -> FALSE .)
    RCCT            reduce using rule 278 (simpleIdentifier -> FALSE .)
    ATRIBUICAO      reduce using rule 278 (simpleIdentifier -> FALSE .)
    SETA            reduce using rule 278 (simpleIdentifier -> FALSE .)
    CLASS           reduce using rule 278 (simpleIdentifier -> FALSE .)


state 25

    (279) simpleIdentifier -> FUNCTION .

    LPAREN          reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    DOISP           reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    MENOR           reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    LCHAVE          reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    FUN             reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    $end            reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    FOR             reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    WHILE           reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    DO              reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    ID              reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    CROSSINLINE     reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    IMPORT          reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    INIT            reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    NOINLINE        reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    OUT             reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    VARARG          reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    WHERE           reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    INT             reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    FLOAT           reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    BOOLEAN         reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    STRING          reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    ARRAY           reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    CHAR            reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    OBJECT          reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    CONST           reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    CONSTRUCTOR     reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    EOF             reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    FALSE           reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    FUNCTION        reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    NULL            reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    NULLABLE        reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    NUMBER          reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    OPERATOR        reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    SMARTCAST       reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    THIS            reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    TRUE            reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    VAL             reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    VAR             reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    DOUBLE          reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    WHEN            reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    LONG            reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    LITERAL_STRING  reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    COLONCOLON      reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    LCCT            reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    IF              reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    RETURN          reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    RETURN_AT       reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    CONTINUE        reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    CONTINUE_AT     reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    BREAK           reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    BREAK_AT        reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    RCHAVE          reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    INCREMENTO      reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    DECREMENTO      reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    MINUS           reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    PLUS            reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    NOT             reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    SUSPEND         reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    PV              reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    ELSE            reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    PONTO           reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    AS              reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    MAISIGUAL       reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    MENOSIGUAL      reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    MULTIGUAL       reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    DIVIGUAL        reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    MODIGUAL        reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    MULT            reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    DIVIDE          reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    MOD             reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    PONTOPONTO      reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    ELVIS           reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    IN              reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    NOT_IN          reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    IS              reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    NOT_IS          reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    MAIOR           reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    MENORIGUAL      reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    MAIORIGUAL      reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    DIFERENTE       reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    IDENTIDADE      reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    IGUALDADE       reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    SEMIDENTIDADE   reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    AND             reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    OR              reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    COMMA           reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    RPAREN          reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    RCCT            reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    ATRIBUICAO      reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    SETA            reduce using rule 279 (simpleIdentifier -> FUNCTION .)
    CLASS           reduce using rule 279 (simpleIdentifier -> FUNCTION .)


state 26

    (280) simpleIdentifier -> NULL .

    LPAREN          reduce using rule 280 (simpleIdentifier -> NULL .)
    DOISP           reduce using rule 280 (simpleIdentifier -> NULL .)
    MENOR           reduce using rule 280 (simpleIdentifier -> NULL .)
    LCHAVE          reduce using rule 280 (simpleIdentifier -> NULL .)
    FUN             reduce using rule 280 (simpleIdentifier -> NULL .)
    $end            reduce using rule 280 (simpleIdentifier -> NULL .)
    FOR             reduce using rule 280 (simpleIdentifier -> NULL .)
    WHILE           reduce using rule 280 (simpleIdentifier -> NULL .)
    DO              reduce using rule 280 (simpleIdentifier -> NULL .)
    ID              reduce using rule 280 (simpleIdentifier -> NULL .)
    CROSSINLINE     reduce using rule 280 (simpleIdentifier -> NULL .)
    IMPORT          reduce using rule 280 (simpleIdentifier -> NULL .)
    INIT            reduce using rule 280 (simpleIdentifier -> NULL .)
    NOINLINE        reduce using rule 280 (simpleIdentifier -> NULL .)
    OUT             reduce using rule 280 (simpleIdentifier -> NULL .)
    VARARG          reduce using rule 280 (simpleIdentifier -> NULL .)
    WHERE           reduce using rule 280 (simpleIdentifier -> NULL .)
    INT             reduce using rule 280 (simpleIdentifier -> NULL .)
    FLOAT           reduce using rule 280 (simpleIdentifier -> NULL .)
    BOOLEAN         reduce using rule 280 (simpleIdentifier -> NULL .)
    STRING          reduce using rule 280 (simpleIdentifier -> NULL .)
    ARRAY           reduce using rule 280 (simpleIdentifier -> NULL .)
    CHAR            reduce using rule 280 (simpleIdentifier -> NULL .)
    OBJECT          reduce using rule 280 (simpleIdentifier -> NULL .)
    CONST           reduce using rule 280 (simpleIdentifier -> NULL .)
    CONSTRUCTOR     reduce using rule 280 (simpleIdentifier -> NULL .)
    EOF             reduce using rule 280 (simpleIdentifier -> NULL .)
    FALSE           reduce using rule 280 (simpleIdentifier -> NULL .)
    FUNCTION        reduce using rule 280 (simpleIdentifier -> NULL .)
    NULL            reduce using rule 280 (simpleIdentifier -> NULL .)
    NULLABLE        reduce using rule 280 (simpleIdentifier -> NULL .)
    NUMBER          reduce using rule 280 (simpleIdentifier -> NULL .)
    OPERATOR        reduce using rule 280 (simpleIdentifier -> NULL .)
    SMARTCAST       reduce using rule 280 (simpleIdentifier -> NULL .)
    THIS            reduce using rule 280 (simpleIdentifier -> NULL .)
    TRUE            reduce using rule 280 (simpleIdentifier -> NULL .)
    VAL             reduce using rule 280 (simpleIdentifier -> NULL .)
    VAR             reduce using rule 280 (simpleIdentifier -> NULL .)
    DOUBLE          reduce using rule 280 (simpleIdentifier -> NULL .)
    WHEN            reduce using rule 280 (simpleIdentifier -> NULL .)
    LONG            reduce using rule 280 (simpleIdentifier -> NULL .)
    LITERAL_STRING  reduce using rule 280 (simpleIdentifier -> NULL .)
    COLONCOLON      reduce using rule 280 (simpleIdentifier -> NULL .)
    LCCT            reduce using rule 280 (simpleIdentifier -> NULL .)
    IF              reduce using rule 280 (simpleIdentifier -> NULL .)
    RETURN          reduce using rule 280 (simpleIdentifier -> NULL .)
    RETURN_AT       reduce using rule 280 (simpleIdentifier -> NULL .)
    CONTINUE        reduce using rule 280 (simpleIdentifier -> NULL .)
    CONTINUE_AT     reduce using rule 280 (simpleIdentifier -> NULL .)
    BREAK           reduce using rule 280 (simpleIdentifier -> NULL .)
    BREAK_AT        reduce using rule 280 (simpleIdentifier -> NULL .)
    RCHAVE          reduce using rule 280 (simpleIdentifier -> NULL .)
    INCREMENTO      reduce using rule 280 (simpleIdentifier -> NULL .)
    DECREMENTO      reduce using rule 280 (simpleIdentifier -> NULL .)
    MINUS           reduce using rule 280 (simpleIdentifier -> NULL .)
    PLUS            reduce using rule 280 (simpleIdentifier -> NULL .)
    NOT             reduce using rule 280 (simpleIdentifier -> NULL .)
    SUSPEND         reduce using rule 280 (simpleIdentifier -> NULL .)
    PV              reduce using rule 280 (simpleIdentifier -> NULL .)
    ELSE            reduce using rule 280 (simpleIdentifier -> NULL .)
    PONTO           reduce using rule 280 (simpleIdentifier -> NULL .)
    AS              reduce using rule 280 (simpleIdentifier -> NULL .)
    MAISIGUAL       reduce using rule 280 (simpleIdentifier -> NULL .)
    MENOSIGUAL      reduce using rule 280 (simpleIdentifier -> NULL .)
    MULTIGUAL       reduce using rule 280 (simpleIdentifier -> NULL .)
    DIVIGUAL        reduce using rule 280 (simpleIdentifier -> NULL .)
    MODIGUAL        reduce using rule 280 (simpleIdentifier -> NULL .)
    MULT            reduce using rule 280 (simpleIdentifier -> NULL .)
    DIVIDE          reduce using rule 280 (simpleIdentifier -> NULL .)
    MOD             reduce using rule 280 (simpleIdentifier -> NULL .)
    PONTOPONTO      reduce using rule 280 (simpleIdentifier -> NULL .)
    ELVIS           reduce using rule 280 (simpleIdentifier -> NULL .)
    IN              reduce using rule 280 (simpleIdentifier -> NULL .)
    NOT_IN          reduce using rule 280 (simpleIdentifier -> NULL .)
    IS              reduce using rule 280 (simpleIdentifier -> NULL .)
    NOT_IS          reduce using rule 280 (simpleIdentifier -> NULL .)
    MAIOR           reduce using rule 280 (simpleIdentifier -> NULL .)
    MENORIGUAL      reduce using rule 280 (simpleIdentifier -> NULL .)
    MAIORIGUAL      reduce using rule 280 (simpleIdentifier -> NULL .)
    DIFERENTE       reduce using rule 280 (simpleIdentifier -> NULL .)
    IDENTIDADE      reduce using rule 280 (simpleIdentifier -> NULL .)
    IGUALDADE       reduce using rule 280 (simpleIdentifier -> NULL .)
    SEMIDENTIDADE   reduce using rule 280 (simpleIdentifier -> NULL .)
    AND             reduce using rule 280 (simpleIdentifier -> NULL .)
    OR              reduce using rule 280 (simpleIdentifier -> NULL .)
    COMMA           reduce using rule 280 (simpleIdentifier -> NULL .)
    RPAREN          reduce using rule 280 (simpleIdentifier -> NULL .)
    RCCT            reduce using rule 280 (simpleIdentifier -> NULL .)
    ATRIBUICAO      reduce using rule 280 (simpleIdentifier -> NULL .)
    SETA            reduce using rule 280 (simpleIdentifier -> NULL .)
    CLASS           reduce using rule 280 (simpleIdentifier -> NULL .)


state 27

    (281) simpleIdentifier -> NULLABLE .

    LPAREN          reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    DOISP           reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    MENOR           reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    LCHAVE          reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    FUN             reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    $end            reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    FOR             reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    WHILE           reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    DO              reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    ID              reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    CROSSINLINE     reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    IMPORT          reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    INIT            reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    NOINLINE        reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    OUT             reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    VARARG          reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    WHERE           reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    INT             reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    FLOAT           reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    BOOLEAN         reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    STRING          reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    ARRAY           reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    CHAR            reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    OBJECT          reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    CONST           reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    CONSTRUCTOR     reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    EOF             reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    FALSE           reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    FUNCTION        reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    NULL            reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    NULLABLE        reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    NUMBER          reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    OPERATOR        reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    SMARTCAST       reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    THIS            reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    TRUE            reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    VAL             reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    VAR             reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    DOUBLE          reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    WHEN            reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    LONG            reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    LITERAL_STRING  reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    COLONCOLON      reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    LCCT            reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    IF              reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    RETURN          reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    RETURN_AT       reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    CONTINUE        reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    CONTINUE_AT     reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    BREAK           reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    BREAK_AT        reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    RCHAVE          reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    INCREMENTO      reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    DECREMENTO      reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    MINUS           reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    PLUS            reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    NOT             reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    SUSPEND         reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    PV              reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    ELSE            reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    PONTO           reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    AS              reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    MAISIGUAL       reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    MENOSIGUAL      reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    MULTIGUAL       reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    DIVIGUAL        reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    MODIGUAL        reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    MULT            reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    DIVIDE          reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    MOD             reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    PONTOPONTO      reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    ELVIS           reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    IN              reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    NOT_IN          reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    IS              reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    NOT_IS          reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    MAIOR           reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    MENORIGUAL      reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    MAIORIGUAL      reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    DIFERENTE       reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    IDENTIDADE      reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    IGUALDADE       reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    SEMIDENTIDADE   reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    AND             reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    OR              reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    COMMA           reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    RPAREN          reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    RCCT            reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    ATRIBUICAO      reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    SETA            reduce using rule 281 (simpleIdentifier -> NULLABLE .)
    CLASS           reduce using rule 281 (simpleIdentifier -> NULLABLE .)


state 28

    (282) simpleIdentifier -> NUMBER .

    LPAREN          reduce using rule 282 (simpleIdentifier -> NUMBER .)
    DOISP           reduce using rule 282 (simpleIdentifier -> NUMBER .)
    MENOR           reduce using rule 282 (simpleIdentifier -> NUMBER .)
    LCHAVE          reduce using rule 282 (simpleIdentifier -> NUMBER .)
    FUN             reduce using rule 282 (simpleIdentifier -> NUMBER .)
    $end            reduce using rule 282 (simpleIdentifier -> NUMBER .)
    FOR             reduce using rule 282 (simpleIdentifier -> NUMBER .)
    WHILE           reduce using rule 282 (simpleIdentifier -> NUMBER .)
    DO              reduce using rule 282 (simpleIdentifier -> NUMBER .)
    ID              reduce using rule 282 (simpleIdentifier -> NUMBER .)
    CROSSINLINE     reduce using rule 282 (simpleIdentifier -> NUMBER .)
    IMPORT          reduce using rule 282 (simpleIdentifier -> NUMBER .)
    INIT            reduce using rule 282 (simpleIdentifier -> NUMBER .)
    NOINLINE        reduce using rule 282 (simpleIdentifier -> NUMBER .)
    OUT             reduce using rule 282 (simpleIdentifier -> NUMBER .)
    VARARG          reduce using rule 282 (simpleIdentifier -> NUMBER .)
    WHERE           reduce using rule 282 (simpleIdentifier -> NUMBER .)
    INT             reduce using rule 282 (simpleIdentifier -> NUMBER .)
    FLOAT           reduce using rule 282 (simpleIdentifier -> NUMBER .)
    BOOLEAN         reduce using rule 282 (simpleIdentifier -> NUMBER .)
    STRING          reduce using rule 282 (simpleIdentifier -> NUMBER .)
    ARRAY           reduce using rule 282 (simpleIdentifier -> NUMBER .)
    CHAR            reduce using rule 282 (simpleIdentifier -> NUMBER .)
    OBJECT          reduce using rule 282 (simpleIdentifier -> NUMBER .)
    CONST           reduce using rule 282 (simpleIdentifier -> NUMBER .)
    CONSTRUCTOR     reduce using rule 282 (simpleIdentifier -> NUMBER .)
    EOF             reduce using rule 282 (simpleIdentifier -> NUMBER .)
    FALSE           reduce using rule 282 (simpleIdentifier -> NUMBER .)
    FUNCTION        reduce using rule 282 (simpleIdentifier -> NUMBER .)
    NULL            reduce using rule 282 (simpleIdentifier -> NUMBER .)
    NULLABLE        reduce using rule 282 (simpleIdentifier -> NUMBER .)
    NUMBER          reduce using rule 282 (simpleIdentifier -> NUMBER .)
    OPERATOR        reduce using rule 282 (simpleIdentifier -> NUMBER .)
    SMARTCAST       reduce using rule 282 (simpleIdentifier -> NUMBER .)
    THIS            reduce using rule 282 (simpleIdentifier -> NUMBER .)
    TRUE            reduce using rule 282 (simpleIdentifier -> NUMBER .)
    VAL             reduce using rule 282 (simpleIdentifier -> NUMBER .)
    VAR             reduce using rule 282 (simpleIdentifier -> NUMBER .)
    DOUBLE          reduce using rule 282 (simpleIdentifier -> NUMBER .)
    WHEN            reduce using rule 282 (simpleIdentifier -> NUMBER .)
    LONG            reduce using rule 282 (simpleIdentifier -> NUMBER .)
    LITERAL_STRING  reduce using rule 282 (simpleIdentifier -> NUMBER .)
    COLONCOLON      reduce using rule 282 (simpleIdentifier -> NUMBER .)
    LCCT            reduce using rule 282 (simpleIdentifier -> NUMBER .)
    IF              reduce using rule 282 (simpleIdentifier -> NUMBER .)
    RETURN          reduce using rule 282 (simpleIdentifier -> NUMBER .)
    RETURN_AT       reduce using rule 282 (simpleIdentifier -> NUMBER .)
    CONTINUE        reduce using rule 282 (simpleIdentifier -> NUMBER .)
    CONTINUE_AT     reduce using rule 282 (simpleIdentifier -> NUMBER .)
    BREAK           reduce using rule 282 (simpleIdentifier -> NUMBER .)
    BREAK_AT        reduce using rule 282 (simpleIdentifier -> NUMBER .)
    RCHAVE          reduce using rule 282 (simpleIdentifier -> NUMBER .)
    INCREMENTO      reduce using rule 282 (simpleIdentifier -> NUMBER .)
    DECREMENTO      reduce using rule 282 (simpleIdentifier -> NUMBER .)
    MINUS           reduce using rule 282 (simpleIdentifier -> NUMBER .)
    PLUS            reduce using rule 282 (simpleIdentifier -> NUMBER .)
    NOT             reduce using rule 282 (simpleIdentifier -> NUMBER .)
    SUSPEND         reduce using rule 282 (simpleIdentifier -> NUMBER .)
    PV              reduce using rule 282 (simpleIdentifier -> NUMBER .)
    ELSE            reduce using rule 282 (simpleIdentifier -> NUMBER .)
    PONTO           reduce using rule 282 (simpleIdentifier -> NUMBER .)
    AS              reduce using rule 282 (simpleIdentifier -> NUMBER .)
    MAISIGUAL       reduce using rule 282 (simpleIdentifier -> NUMBER .)
    MENOSIGUAL      reduce using rule 282 (simpleIdentifier -> NUMBER .)
    MULTIGUAL       reduce using rule 282 (simpleIdentifier -> NUMBER .)
    DIVIGUAL        reduce using rule 282 (simpleIdentifier -> NUMBER .)
    MODIGUAL        reduce using rule 282 (simpleIdentifier -> NUMBER .)
    MULT            reduce using rule 282 (simpleIdentifier -> NUMBER .)
    DIVIDE          reduce using rule 282 (simpleIdentifier -> NUMBER .)
    MOD             reduce using rule 282 (simpleIdentifier -> NUMBER .)
    PONTOPONTO      reduce using rule 282 (simpleIdentifier -> NUMBER .)
    ELVIS           reduce using rule 282 (simpleIdentifier -> NUMBER .)
    IN              reduce using rule 282 (simpleIdentifier -> NUMBER .)
    NOT_IN          reduce using rule 282 (simpleIdentifier -> NUMBER .)
    IS              reduce using rule 282 (simpleIdentifier -> NUMBER .)
    NOT_IS          reduce using rule 282 (simpleIdentifier -> NUMBER .)
    MAIOR           reduce using rule 282 (simpleIdentifier -> NUMBER .)
    MENORIGUAL      reduce using rule 282 (simpleIdentifier -> NUMBER .)
    MAIORIGUAL      reduce using rule 282 (simpleIdentifier -> NUMBER .)
    DIFERENTE       reduce using rule 282 (simpleIdentifier -> NUMBER .)
    IDENTIDADE      reduce using rule 282 (simpleIdentifier -> NUMBER .)
    IGUALDADE       reduce using rule 282 (simpleIdentifier -> NUMBER .)
    SEMIDENTIDADE   reduce using rule 282 (simpleIdentifier -> NUMBER .)
    AND             reduce using rule 282 (simpleIdentifier -> NUMBER .)
    OR              reduce using rule 282 (simpleIdentifier -> NUMBER .)
    COMMA           reduce using rule 282 (simpleIdentifier -> NUMBER .)
    RPAREN          reduce using rule 282 (simpleIdentifier -> NUMBER .)
    RCCT            reduce using rule 282 (simpleIdentifier -> NUMBER .)
    ATRIBUICAO      reduce using rule 282 (simpleIdentifier -> NUMBER .)
    SETA            reduce using rule 282 (simpleIdentifier -> NUMBER .)
    CLASS           reduce using rule 282 (simpleIdentifier -> NUMBER .)


state 29

    (283) simpleIdentifier -> OPERATOR .

    LPAREN          reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    DOISP           reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    MENOR           reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    LCHAVE          reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    FUN             reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    $end            reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    FOR             reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    WHILE           reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    DO              reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    ID              reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    CROSSINLINE     reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    IMPORT          reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    INIT            reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    NOINLINE        reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    OUT             reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    VARARG          reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    WHERE           reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    INT             reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    FLOAT           reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    BOOLEAN         reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    STRING          reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    ARRAY           reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    CHAR            reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    OBJECT          reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    CONST           reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    CONSTRUCTOR     reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    EOF             reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    FALSE           reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    FUNCTION        reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    NULL            reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    NULLABLE        reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    NUMBER          reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    OPERATOR        reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    SMARTCAST       reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    THIS            reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    TRUE            reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    VAL             reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    VAR             reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    DOUBLE          reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    WHEN            reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    LONG            reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    LITERAL_STRING  reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    COLONCOLON      reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    LCCT            reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    IF              reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    RETURN          reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    RETURN_AT       reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    CONTINUE        reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    CONTINUE_AT     reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    BREAK           reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    BREAK_AT        reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    RCHAVE          reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    INCREMENTO      reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    DECREMENTO      reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    MINUS           reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    PLUS            reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    NOT             reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    SUSPEND         reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    PV              reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    ELSE            reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    PONTO           reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    AS              reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    MAISIGUAL       reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    MENOSIGUAL      reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    MULTIGUAL       reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    DIVIGUAL        reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    MODIGUAL        reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    MULT            reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    DIVIDE          reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    MOD             reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    PONTOPONTO      reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    ELVIS           reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    IN              reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    NOT_IN          reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    IS              reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    NOT_IS          reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    MAIOR           reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    MENORIGUAL      reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    MAIORIGUAL      reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    DIFERENTE       reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    IDENTIDADE      reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    IGUALDADE       reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    SEMIDENTIDADE   reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    AND             reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    OR              reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    COMMA           reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    RPAREN          reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    RCCT            reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    ATRIBUICAO      reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    SETA            reduce using rule 283 (simpleIdentifier -> OPERATOR .)
    CLASS           reduce using rule 283 (simpleIdentifier -> OPERATOR .)


state 30

    (284) simpleIdentifier -> SMARTCAST .

    LPAREN          reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    DOISP           reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    MENOR           reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    LCHAVE          reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    FUN             reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    $end            reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    FOR             reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    WHILE           reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    DO              reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    ID              reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    CROSSINLINE     reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    IMPORT          reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    INIT            reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    NOINLINE        reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    OUT             reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    VARARG          reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    WHERE           reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    INT             reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    FLOAT           reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    BOOLEAN         reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    STRING          reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    ARRAY           reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    CHAR            reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    OBJECT          reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    CONST           reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    CONSTRUCTOR     reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    EOF             reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    FALSE           reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    FUNCTION        reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    NULL            reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    NULLABLE        reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    NUMBER          reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    OPERATOR        reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    SMARTCAST       reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    THIS            reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    TRUE            reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    VAL             reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    VAR             reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    DOUBLE          reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    WHEN            reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    LONG            reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    LITERAL_STRING  reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    COLONCOLON      reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    LCCT            reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    IF              reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    RETURN          reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    RETURN_AT       reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    CONTINUE        reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    CONTINUE_AT     reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    BREAK           reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    BREAK_AT        reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    RCHAVE          reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    INCREMENTO      reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    DECREMENTO      reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    MINUS           reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    PLUS            reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    NOT             reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    SUSPEND         reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    PV              reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    ELSE            reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    PONTO           reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    AS              reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    MAISIGUAL       reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    MENOSIGUAL      reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    MULTIGUAL       reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    DIVIGUAL        reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    MODIGUAL        reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    MULT            reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    DIVIDE          reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    MOD             reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    PONTOPONTO      reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    ELVIS           reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    IN              reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    NOT_IN          reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    IS              reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    NOT_IS          reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    MAIOR           reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    MENORIGUAL      reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    MAIORIGUAL      reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    DIFERENTE       reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    IDENTIDADE      reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    IGUALDADE       reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    SEMIDENTIDADE   reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    AND             reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    OR              reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    COMMA           reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    RPAREN          reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    RCCT            reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    ATRIBUICAO      reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    SETA            reduce using rule 284 (simpleIdentifier -> SMARTCAST .)
    CLASS           reduce using rule 284 (simpleIdentifier -> SMARTCAST .)


state 31

    (285) simpleIdentifier -> THIS .

    LPAREN          reduce using rule 285 (simpleIdentifier -> THIS .)
    DOISP           reduce using rule 285 (simpleIdentifier -> THIS .)
    MENOR           reduce using rule 285 (simpleIdentifier -> THIS .)
    LCHAVE          reduce using rule 285 (simpleIdentifier -> THIS .)
    FUN             reduce using rule 285 (simpleIdentifier -> THIS .)
    $end            reduce using rule 285 (simpleIdentifier -> THIS .)
    FOR             reduce using rule 285 (simpleIdentifier -> THIS .)
    WHILE           reduce using rule 285 (simpleIdentifier -> THIS .)
    DO              reduce using rule 285 (simpleIdentifier -> THIS .)
    ID              reduce using rule 285 (simpleIdentifier -> THIS .)
    CROSSINLINE     reduce using rule 285 (simpleIdentifier -> THIS .)
    IMPORT          reduce using rule 285 (simpleIdentifier -> THIS .)
    INIT            reduce using rule 285 (simpleIdentifier -> THIS .)
    NOINLINE        reduce using rule 285 (simpleIdentifier -> THIS .)
    OUT             reduce using rule 285 (simpleIdentifier -> THIS .)
    VARARG          reduce using rule 285 (simpleIdentifier -> THIS .)
    WHERE           reduce using rule 285 (simpleIdentifier -> THIS .)
    INT             reduce using rule 285 (simpleIdentifier -> THIS .)
    FLOAT           reduce using rule 285 (simpleIdentifier -> THIS .)
    BOOLEAN         reduce using rule 285 (simpleIdentifier -> THIS .)
    STRING          reduce using rule 285 (simpleIdentifier -> THIS .)
    ARRAY           reduce using rule 285 (simpleIdentifier -> THIS .)
    CHAR            reduce using rule 285 (simpleIdentifier -> THIS .)
    OBJECT          reduce using rule 285 (simpleIdentifier -> THIS .)
    CONST           reduce using rule 285 (simpleIdentifier -> THIS .)
    CONSTRUCTOR     reduce using rule 285 (simpleIdentifier -> THIS .)
    EOF             reduce using rule 285 (simpleIdentifier -> THIS .)
    FALSE           reduce using rule 285 (simpleIdentifier -> THIS .)
    FUNCTION        reduce using rule 285 (simpleIdentifier -> THIS .)
    NULL            reduce using rule 285 (simpleIdentifier -> THIS .)
    NULLABLE        reduce using rule 285 (simpleIdentifier -> THIS .)
    NUMBER          reduce using rule 285 (simpleIdentifier -> THIS .)
    OPERATOR        reduce using rule 285 (simpleIdentifier -> THIS .)
    SMARTCAST       reduce using rule 285 (simpleIdentifier -> THIS .)
    THIS            reduce using rule 285 (simpleIdentifier -> THIS .)
    TRUE            reduce using rule 285 (simpleIdentifier -> THIS .)
    VAL             reduce using rule 285 (simpleIdentifier -> THIS .)
    VAR             reduce using rule 285 (simpleIdentifier -> THIS .)
    DOUBLE          reduce using rule 285 (simpleIdentifier -> THIS .)
    WHEN            reduce using rule 285 (simpleIdentifier -> THIS .)
    LONG            reduce using rule 285 (simpleIdentifier -> THIS .)
    LITERAL_STRING  reduce using rule 285 (simpleIdentifier -> THIS .)
    COLONCOLON      reduce using rule 285 (simpleIdentifier -> THIS .)
    LCCT            reduce using rule 285 (simpleIdentifier -> THIS .)
    IF              reduce using rule 285 (simpleIdentifier -> THIS .)
    RETURN          reduce using rule 285 (simpleIdentifier -> THIS .)
    RETURN_AT       reduce using rule 285 (simpleIdentifier -> THIS .)
    CONTINUE        reduce using rule 285 (simpleIdentifier -> THIS .)
    CONTINUE_AT     reduce using rule 285 (simpleIdentifier -> THIS .)
    BREAK           reduce using rule 285 (simpleIdentifier -> THIS .)
    BREAK_AT        reduce using rule 285 (simpleIdentifier -> THIS .)
    RCHAVE          reduce using rule 285 (simpleIdentifier -> THIS .)
    INCREMENTO      reduce using rule 285 (simpleIdentifier -> THIS .)
    DECREMENTO      reduce using rule 285 (simpleIdentifier -> THIS .)
    MINUS           reduce using rule 285 (simpleIdentifier -> THIS .)
    PLUS            reduce using rule 285 (simpleIdentifier -> THIS .)
    NOT             reduce using rule 285 (simpleIdentifier -> THIS .)
    SUSPEND         reduce using rule 285 (simpleIdentifier -> THIS .)
    PV              reduce using rule 285 (simpleIdentifier -> THIS .)
    ELSE            reduce using rule 285 (simpleIdentifier -> THIS .)
    PONTO           reduce using rule 285 (simpleIdentifier -> THIS .)
    AS              reduce using rule 285 (simpleIdentifier -> THIS .)
    MAISIGUAL       reduce using rule 285 (simpleIdentifier -> THIS .)
    MENOSIGUAL      reduce using rule 285 (simpleIdentifier -> THIS .)
    MULTIGUAL       reduce using rule 285 (simpleIdentifier -> THIS .)
    DIVIGUAL        reduce using rule 285 (simpleIdentifier -> THIS .)
    MODIGUAL        reduce using rule 285 (simpleIdentifier -> THIS .)
    MULT            reduce using rule 285 (simpleIdentifier -> THIS .)
    DIVIDE          reduce using rule 285 (simpleIdentifier -> THIS .)
    MOD             reduce using rule 285 (simpleIdentifier -> THIS .)
    PONTOPONTO      reduce using rule 285 (simpleIdentifier -> THIS .)
    ELVIS           reduce using rule 285 (simpleIdentifier -> THIS .)
    IN              reduce using rule 285 (simpleIdentifier -> THIS .)
    NOT_IN          reduce using rule 285 (simpleIdentifier -> THIS .)
    IS              reduce using rule 285 (simpleIdentifier -> THIS .)
    NOT_IS          reduce using rule 285 (simpleIdentifier -> THIS .)
    MAIOR           reduce using rule 285 (simpleIdentifier -> THIS .)
    MENORIGUAL      reduce using rule 285 (simpleIdentifier -> THIS .)
    MAIORIGUAL      reduce using rule 285 (simpleIdentifier -> THIS .)
    DIFERENTE       reduce using rule 285 (simpleIdentifier -> THIS .)
    IDENTIDADE      reduce using rule 285 (simpleIdentifier -> THIS .)
    IGUALDADE       reduce using rule 285 (simpleIdentifier -> THIS .)
    SEMIDENTIDADE   reduce using rule 285 (simpleIdentifier -> THIS .)
    AND             reduce using rule 285 (simpleIdentifier -> THIS .)
    OR              reduce using rule 285 (simpleIdentifier -> THIS .)
    COMMA           reduce using rule 285 (simpleIdentifier -> THIS .)
    RPAREN          reduce using rule 285 (simpleIdentifier -> THIS .)
    RCCT            reduce using rule 285 (simpleIdentifier -> THIS .)
    ATRIBUICAO      reduce using rule 285 (simpleIdentifier -> THIS .)
    SETA            reduce using rule 285 (simpleIdentifier -> THIS .)
    CLASS           reduce using rule 285 (simpleIdentifier -> THIS .)


state 32

    (286) simpleIdentifier -> TRUE .

    LPAREN          reduce using rule 286 (simpleIdentifier -> TRUE .)
    DOISP           reduce using rule 286 (simpleIdentifier -> TRUE .)
    MENOR           reduce using rule 286 (simpleIdentifier -> TRUE .)
    LCHAVE          reduce using rule 286 (simpleIdentifier -> TRUE .)
    FUN             reduce using rule 286 (simpleIdentifier -> TRUE .)
    $end            reduce using rule 286 (simpleIdentifier -> TRUE .)
    FOR             reduce using rule 286 (simpleIdentifier -> TRUE .)
    WHILE           reduce using rule 286 (simpleIdentifier -> TRUE .)
    DO              reduce using rule 286 (simpleIdentifier -> TRUE .)
    ID              reduce using rule 286 (simpleIdentifier -> TRUE .)
    CROSSINLINE     reduce using rule 286 (simpleIdentifier -> TRUE .)
    IMPORT          reduce using rule 286 (simpleIdentifier -> TRUE .)
    INIT            reduce using rule 286 (simpleIdentifier -> TRUE .)
    NOINLINE        reduce using rule 286 (simpleIdentifier -> TRUE .)
    OUT             reduce using rule 286 (simpleIdentifier -> TRUE .)
    VARARG          reduce using rule 286 (simpleIdentifier -> TRUE .)
    WHERE           reduce using rule 286 (simpleIdentifier -> TRUE .)
    INT             reduce using rule 286 (simpleIdentifier -> TRUE .)
    FLOAT           reduce using rule 286 (simpleIdentifier -> TRUE .)
    BOOLEAN         reduce using rule 286 (simpleIdentifier -> TRUE .)
    STRING          reduce using rule 286 (simpleIdentifier -> TRUE .)
    ARRAY           reduce using rule 286 (simpleIdentifier -> TRUE .)
    CHAR            reduce using rule 286 (simpleIdentifier -> TRUE .)
    OBJECT          reduce using rule 286 (simpleIdentifier -> TRUE .)
    CONST           reduce using rule 286 (simpleIdentifier -> TRUE .)
    CONSTRUCTOR     reduce using rule 286 (simpleIdentifier -> TRUE .)
    EOF             reduce using rule 286 (simpleIdentifier -> TRUE .)
    FALSE           reduce using rule 286 (simpleIdentifier -> TRUE .)
    FUNCTION        reduce using rule 286 (simpleIdentifier -> TRUE .)
    NULL            reduce using rule 286 (simpleIdentifier -> TRUE .)
    NULLABLE        reduce using rule 286 (simpleIdentifier -> TRUE .)
    NUMBER          reduce using rule 286 (simpleIdentifier -> TRUE .)
    OPERATOR        reduce using rule 286 (simpleIdentifier -> TRUE .)
    SMARTCAST       reduce using rule 286 (simpleIdentifier -> TRUE .)
    THIS            reduce using rule 286 (simpleIdentifier -> TRUE .)
    TRUE            reduce using rule 286 (simpleIdentifier -> TRUE .)
    VAL             reduce using rule 286 (simpleIdentifier -> TRUE .)
    VAR             reduce using rule 286 (simpleIdentifier -> TRUE .)
    DOUBLE          reduce using rule 286 (simpleIdentifier -> TRUE .)
    WHEN            reduce using rule 286 (simpleIdentifier -> TRUE .)
    LONG            reduce using rule 286 (simpleIdentifier -> TRUE .)
    LITERAL_STRING  reduce using rule 286 (simpleIdentifier -> TRUE .)
    COLONCOLON      reduce using rule 286 (simpleIdentifier -> TRUE .)
    LCCT            reduce using rule 286 (simpleIdentifier -> TRUE .)
    IF              reduce using rule 286 (simpleIdentifier -> TRUE .)
    RETURN          reduce using rule 286 (simpleIdentifier -> TRUE .)
    RETURN_AT       reduce using rule 286 (simpleIdentifier -> TRUE .)
    CONTINUE        reduce using rule 286 (simpleIdentifier -> TRUE .)
    CONTINUE_AT     reduce using rule 286 (simpleIdentifier -> TRUE .)
    BREAK           reduce using rule 286 (simpleIdentifier -> TRUE .)
    BREAK_AT        reduce using rule 286 (simpleIdentifier -> TRUE .)
    RCHAVE          reduce using rule 286 (simpleIdentifier -> TRUE .)
    INCREMENTO      reduce using rule 286 (simpleIdentifier -> TRUE .)
    DECREMENTO      reduce using rule 286 (simpleIdentifier -> TRUE .)
    MINUS           reduce using rule 286 (simpleIdentifier -> TRUE .)
    PLUS            reduce using rule 286 (simpleIdentifier -> TRUE .)
    NOT             reduce using rule 286 (simpleIdentifier -> TRUE .)
    SUSPEND         reduce using rule 286 (simpleIdentifier -> TRUE .)
    PV              reduce using rule 286 (simpleIdentifier -> TRUE .)
    ELSE            reduce using rule 286 (simpleIdentifier -> TRUE .)
    PONTO           reduce using rule 286 (simpleIdentifier -> TRUE .)
    AS              reduce using rule 286 (simpleIdentifier -> TRUE .)
    MAISIGUAL       reduce using rule 286 (simpleIdentifier -> TRUE .)
    MENOSIGUAL      reduce using rule 286 (simpleIdentifier -> TRUE .)
    MULTIGUAL       reduce using rule 286 (simpleIdentifier -> TRUE .)
    DIVIGUAL        reduce using rule 286 (simpleIdentifier -> TRUE .)
    MODIGUAL        reduce using rule 286 (simpleIdentifier -> TRUE .)
    MULT            reduce using rule 286 (simpleIdentifier -> TRUE .)
    DIVIDE          reduce using rule 286 (simpleIdentifier -> TRUE .)
    MOD             reduce using rule 286 (simpleIdentifier -> TRUE .)
    PONTOPONTO      reduce using rule 286 (simpleIdentifier -> TRUE .)
    ELVIS           reduce using rule 286 (simpleIdentifier -> TRUE .)
    IN              reduce using rule 286 (simpleIdentifier -> TRUE .)
    NOT_IN          reduce using rule 286 (simpleIdentifier -> TRUE .)
    IS              reduce using rule 286 (simpleIdentifier -> TRUE .)
    NOT_IS          reduce using rule 286 (simpleIdentifier -> TRUE .)
    MAIOR           reduce using rule 286 (simpleIdentifier -> TRUE .)
    MENORIGUAL      reduce using rule 286 (simpleIdentifier -> TRUE .)
    MAIORIGUAL      reduce using rule 286 (simpleIdentifier -> TRUE .)
    DIFERENTE       reduce using rule 286 (simpleIdentifier -> TRUE .)
    IDENTIDADE      reduce using rule 286 (simpleIdentifier -> TRUE .)
    IGUALDADE       reduce using rule 286 (simpleIdentifier -> TRUE .)
    SEMIDENTIDADE   reduce using rule 286 (simpleIdentifier -> TRUE .)
    AND             reduce using rule 286 (simpleIdentifier -> TRUE .)
    OR              reduce using rule 286 (simpleIdentifier -> TRUE .)
    COMMA           reduce using rule 286 (simpleIdentifier -> TRUE .)
    RPAREN          reduce using rule 286 (simpleIdentifier -> TRUE .)
    RCCT            reduce using rule 286 (simpleIdentifier -> TRUE .)
    ATRIBUICAO      reduce using rule 286 (simpleIdentifier -> TRUE .)
    SETA            reduce using rule 286 (simpleIdentifier -> TRUE .)
    CLASS           reduce using rule 286 (simpleIdentifier -> TRUE .)


state 33

    (287) simpleIdentifier -> VAL .

    LPAREN          reduce using rule 287 (simpleIdentifier -> VAL .)
    DOISP           reduce using rule 287 (simpleIdentifier -> VAL .)
    MENOR           reduce using rule 287 (simpleIdentifier -> VAL .)
    LCHAVE          reduce using rule 287 (simpleIdentifier -> VAL .)
    FUN             reduce using rule 287 (simpleIdentifier -> VAL .)
    $end            reduce using rule 287 (simpleIdentifier -> VAL .)
    FOR             reduce using rule 287 (simpleIdentifier -> VAL .)
    WHILE           reduce using rule 287 (simpleIdentifier -> VAL .)
    DO              reduce using rule 287 (simpleIdentifier -> VAL .)
    ID              reduce using rule 287 (simpleIdentifier -> VAL .)
    CROSSINLINE     reduce using rule 287 (simpleIdentifier -> VAL .)
    IMPORT          reduce using rule 287 (simpleIdentifier -> VAL .)
    INIT            reduce using rule 287 (simpleIdentifier -> VAL .)
    NOINLINE        reduce using rule 287 (simpleIdentifier -> VAL .)
    OUT             reduce using rule 287 (simpleIdentifier -> VAL .)
    VARARG          reduce using rule 287 (simpleIdentifier -> VAL .)
    WHERE           reduce using rule 287 (simpleIdentifier -> VAL .)
    INT             reduce using rule 287 (simpleIdentifier -> VAL .)
    FLOAT           reduce using rule 287 (simpleIdentifier -> VAL .)
    BOOLEAN         reduce using rule 287 (simpleIdentifier -> VAL .)
    STRING          reduce using rule 287 (simpleIdentifier -> VAL .)
    ARRAY           reduce using rule 287 (simpleIdentifier -> VAL .)
    CHAR            reduce using rule 287 (simpleIdentifier -> VAL .)
    OBJECT          reduce using rule 287 (simpleIdentifier -> VAL .)
    CONST           reduce using rule 287 (simpleIdentifier -> VAL .)
    CONSTRUCTOR     reduce using rule 287 (simpleIdentifier -> VAL .)
    EOF             reduce using rule 287 (simpleIdentifier -> VAL .)
    FALSE           reduce using rule 287 (simpleIdentifier -> VAL .)
    FUNCTION        reduce using rule 287 (simpleIdentifier -> VAL .)
    NULL            reduce using rule 287 (simpleIdentifier -> VAL .)
    NULLABLE        reduce using rule 287 (simpleIdentifier -> VAL .)
    NUMBER          reduce using rule 287 (simpleIdentifier -> VAL .)
    OPERATOR        reduce using rule 287 (simpleIdentifier -> VAL .)
    SMARTCAST       reduce using rule 287 (simpleIdentifier -> VAL .)
    THIS            reduce using rule 287 (simpleIdentifier -> VAL .)
    TRUE            reduce using rule 287 (simpleIdentifier -> VAL .)
    VAL             reduce using rule 287 (simpleIdentifier -> VAL .)
    VAR             reduce using rule 287 (simpleIdentifier -> VAL .)
    DOUBLE          reduce using rule 287 (simpleIdentifier -> VAL .)
    WHEN            reduce using rule 287 (simpleIdentifier -> VAL .)
    LONG            reduce using rule 287 (simpleIdentifier -> VAL .)
    LITERAL_STRING  reduce using rule 287 (simpleIdentifier -> VAL .)
    COLONCOLON      reduce using rule 287 (simpleIdentifier -> VAL .)
    LCCT            reduce using rule 287 (simpleIdentifier -> VAL .)
    IF              reduce using rule 287 (simpleIdentifier -> VAL .)
    RETURN          reduce using rule 287 (simpleIdentifier -> VAL .)
    RETURN_AT       reduce using rule 287 (simpleIdentifier -> VAL .)
    CONTINUE        reduce using rule 287 (simpleIdentifier -> VAL .)
    CONTINUE_AT     reduce using rule 287 (simpleIdentifier -> VAL .)
    BREAK           reduce using rule 287 (simpleIdentifier -> VAL .)
    BREAK_AT        reduce using rule 287 (simpleIdentifier -> VAL .)
    RCHAVE          reduce using rule 287 (simpleIdentifier -> VAL .)
    INCREMENTO      reduce using rule 287 (simpleIdentifier -> VAL .)
    DECREMENTO      reduce using rule 287 (simpleIdentifier -> VAL .)
    MINUS           reduce using rule 287 (simpleIdentifier -> VAL .)
    PLUS            reduce using rule 287 (simpleIdentifier -> VAL .)
    NOT             reduce using rule 287 (simpleIdentifier -> VAL .)
    SUSPEND         reduce using rule 287 (simpleIdentifier -> VAL .)
    PV              reduce using rule 287 (simpleIdentifier -> VAL .)
    ELSE            reduce using rule 287 (simpleIdentifier -> VAL .)
    PONTO           reduce using rule 287 (simpleIdentifier -> VAL .)
    AS              reduce using rule 287 (simpleIdentifier -> VAL .)
    MAISIGUAL       reduce using rule 287 (simpleIdentifier -> VAL .)
    MENOSIGUAL      reduce using rule 287 (simpleIdentifier -> VAL .)
    MULTIGUAL       reduce using rule 287 (simpleIdentifier -> VAL .)
    DIVIGUAL        reduce using rule 287 (simpleIdentifier -> VAL .)
    MODIGUAL        reduce using rule 287 (simpleIdentifier -> VAL .)
    MULT            reduce using rule 287 (simpleIdentifier -> VAL .)
    DIVIDE          reduce using rule 287 (simpleIdentifier -> VAL .)
    MOD             reduce using rule 287 (simpleIdentifier -> VAL .)
    PONTOPONTO      reduce using rule 287 (simpleIdentifier -> VAL .)
    ELVIS           reduce using rule 287 (simpleIdentifier -> VAL .)
    IN              reduce using rule 287 (simpleIdentifier -> VAL .)
    NOT_IN          reduce using rule 287 (simpleIdentifier -> VAL .)
    IS              reduce using rule 287 (simpleIdentifier -> VAL .)
    NOT_IS          reduce using rule 287 (simpleIdentifier -> VAL .)
    MAIOR           reduce using rule 287 (simpleIdentifier -> VAL .)
    MENORIGUAL      reduce using rule 287 (simpleIdentifier -> VAL .)
    MAIORIGUAL      reduce using rule 287 (simpleIdentifier -> VAL .)
    DIFERENTE       reduce using rule 287 (simpleIdentifier -> VAL .)
    IDENTIDADE      reduce using rule 287 (simpleIdentifier -> VAL .)
    IGUALDADE       reduce using rule 287 (simpleIdentifier -> VAL .)
    SEMIDENTIDADE   reduce using rule 287 (simpleIdentifier -> VAL .)
    AND             reduce using rule 287 (simpleIdentifier -> VAL .)
    OR              reduce using rule 287 (simpleIdentifier -> VAL .)
    COMMA           reduce using rule 287 (simpleIdentifier -> VAL .)
    RPAREN          reduce using rule 287 (simpleIdentifier -> VAL .)
    RCCT            reduce using rule 287 (simpleIdentifier -> VAL .)
    ATRIBUICAO      reduce using rule 287 (simpleIdentifier -> VAL .)
    SETA            reduce using rule 287 (simpleIdentifier -> VAL .)
    CLASS           reduce using rule 287 (simpleIdentifier -> VAL .)


state 34

    (288) simpleIdentifier -> VAR .

    LPAREN          reduce using rule 288 (simpleIdentifier -> VAR .)
    DOISP           reduce using rule 288 (simpleIdentifier -> VAR .)
    MENOR           reduce using rule 288 (simpleIdentifier -> VAR .)
    LCHAVE          reduce using rule 288 (simpleIdentifier -> VAR .)
    FUN             reduce using rule 288 (simpleIdentifier -> VAR .)
    $end            reduce using rule 288 (simpleIdentifier -> VAR .)
    FOR             reduce using rule 288 (simpleIdentifier -> VAR .)
    WHILE           reduce using rule 288 (simpleIdentifier -> VAR .)
    DO              reduce using rule 288 (simpleIdentifier -> VAR .)
    ID              reduce using rule 288 (simpleIdentifier -> VAR .)
    CROSSINLINE     reduce using rule 288 (simpleIdentifier -> VAR .)
    IMPORT          reduce using rule 288 (simpleIdentifier -> VAR .)
    INIT            reduce using rule 288 (simpleIdentifier -> VAR .)
    NOINLINE        reduce using rule 288 (simpleIdentifier -> VAR .)
    OUT             reduce using rule 288 (simpleIdentifier -> VAR .)
    VARARG          reduce using rule 288 (simpleIdentifier -> VAR .)
    WHERE           reduce using rule 288 (simpleIdentifier -> VAR .)
    INT             reduce using rule 288 (simpleIdentifier -> VAR .)
    FLOAT           reduce using rule 288 (simpleIdentifier -> VAR .)
    BOOLEAN         reduce using rule 288 (simpleIdentifier -> VAR .)
    STRING          reduce using rule 288 (simpleIdentifier -> VAR .)
    ARRAY           reduce using rule 288 (simpleIdentifier -> VAR .)
    CHAR            reduce using rule 288 (simpleIdentifier -> VAR .)
    OBJECT          reduce using rule 288 (simpleIdentifier -> VAR .)
    CONST           reduce using rule 288 (simpleIdentifier -> VAR .)
    CONSTRUCTOR     reduce using rule 288 (simpleIdentifier -> VAR .)
    EOF             reduce using rule 288 (simpleIdentifier -> VAR .)
    FALSE           reduce using rule 288 (simpleIdentifier -> VAR .)
    FUNCTION        reduce using rule 288 (simpleIdentifier -> VAR .)
    NULL            reduce using rule 288 (simpleIdentifier -> VAR .)
    NULLABLE        reduce using rule 288 (simpleIdentifier -> VAR .)
    NUMBER          reduce using rule 288 (simpleIdentifier -> VAR .)
    OPERATOR        reduce using rule 288 (simpleIdentifier -> VAR .)
    SMARTCAST       reduce using rule 288 (simpleIdentifier -> VAR .)
    THIS            reduce using rule 288 (simpleIdentifier -> VAR .)
    TRUE            reduce using rule 288 (simpleIdentifier -> VAR .)
    VAL             reduce using rule 288 (simpleIdentifier -> VAR .)
    VAR             reduce using rule 288 (simpleIdentifier -> VAR .)
    DOUBLE          reduce using rule 288 (simpleIdentifier -> VAR .)
    WHEN            reduce using rule 288 (simpleIdentifier -> VAR .)
    LONG            reduce using rule 288 (simpleIdentifier -> VAR .)
    LITERAL_STRING  reduce using rule 288 (simpleIdentifier -> VAR .)
    COLONCOLON      reduce using rule 288 (simpleIdentifier -> VAR .)
    LCCT            reduce using rule 288 (simpleIdentifier -> VAR .)
    IF              reduce using rule 288 (simpleIdentifier -> VAR .)
    RETURN          reduce using rule 288 (simpleIdentifier -> VAR .)
    RETURN_AT       reduce using rule 288 (simpleIdentifier -> VAR .)
    CONTINUE        reduce using rule 288 (simpleIdentifier -> VAR .)
    CONTINUE_AT     reduce using rule 288 (simpleIdentifier -> VAR .)
    BREAK           reduce using rule 288 (simpleIdentifier -> VAR .)
    BREAK_AT        reduce using rule 288 (simpleIdentifier -> VAR .)
    RCHAVE          reduce using rule 288 (simpleIdentifier -> VAR .)
    INCREMENTO      reduce using rule 288 (simpleIdentifier -> VAR .)
    DECREMENTO      reduce using rule 288 (simpleIdentifier -> VAR .)
    MINUS           reduce using rule 288 (simpleIdentifier -> VAR .)
    PLUS            reduce using rule 288 (simpleIdentifier -> VAR .)
    NOT             reduce using rule 288 (simpleIdentifier -> VAR .)
    SUSPEND         reduce using rule 288 (simpleIdentifier -> VAR .)
    PV              reduce using rule 288 (simpleIdentifier -> VAR .)
    ELSE            reduce using rule 288 (simpleIdentifier -> VAR .)
    PONTO           reduce using rule 288 (simpleIdentifier -> VAR .)
    AS              reduce using rule 288 (simpleIdentifier -> VAR .)
    MAISIGUAL       reduce using rule 288 (simpleIdentifier -> VAR .)
    MENOSIGUAL      reduce using rule 288 (simpleIdentifier -> VAR .)
    MULTIGUAL       reduce using rule 288 (simpleIdentifier -> VAR .)
    DIVIGUAL        reduce using rule 288 (simpleIdentifier -> VAR .)
    MODIGUAL        reduce using rule 288 (simpleIdentifier -> VAR .)
    MULT            reduce using rule 288 (simpleIdentifier -> VAR .)
    DIVIDE          reduce using rule 288 (simpleIdentifier -> VAR .)
    MOD             reduce using rule 288 (simpleIdentifier -> VAR .)
    PONTOPONTO      reduce using rule 288 (simpleIdentifier -> VAR .)
    ELVIS           reduce using rule 288 (simpleIdentifier -> VAR .)
    IN              reduce using rule 288 (simpleIdentifier -> VAR .)
    NOT_IN          reduce using rule 288 (simpleIdentifier -> VAR .)
    IS              reduce using rule 288 (simpleIdentifier -> VAR .)
    NOT_IS          reduce using rule 288 (simpleIdentifier -> VAR .)
    MAIOR           reduce using rule 288 (simpleIdentifier -> VAR .)
    MENORIGUAL      reduce using rule 288 (simpleIdentifier -> VAR .)
    MAIORIGUAL      reduce using rule 288 (simpleIdentifier -> VAR .)
    DIFERENTE       reduce using rule 288 (simpleIdentifier -> VAR .)
    IDENTIDADE      reduce using rule 288 (simpleIdentifier -> VAR .)
    IGUALDADE       reduce using rule 288 (simpleIdentifier -> VAR .)
    SEMIDENTIDADE   reduce using rule 288 (simpleIdentifier -> VAR .)
    AND             reduce using rule 288 (simpleIdentifier -> VAR .)
    OR              reduce using rule 288 (simpleIdentifier -> VAR .)
    COMMA           reduce using rule 288 (simpleIdentifier -> VAR .)
    RPAREN          reduce using rule 288 (simpleIdentifier -> VAR .)
    RCCT            reduce using rule 288 (simpleIdentifier -> VAR .)
    ATRIBUICAO      reduce using rule 288 (simpleIdentifier -> VAR .)
    SETA            reduce using rule 288 (simpleIdentifier -> VAR .)
    CLASS           reduce using rule 288 (simpleIdentifier -> VAR .)


state 35

    (289) simpleIdentifier -> DOUBLE .

    LPAREN          reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    DOISP           reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    MENOR           reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    LCHAVE          reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    FUN             reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    $end            reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    FOR             reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    WHILE           reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    DO              reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    ID              reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    CROSSINLINE     reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    IMPORT          reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    INIT            reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    NOINLINE        reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    OUT             reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    VARARG          reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    WHERE           reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    INT             reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    FLOAT           reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    BOOLEAN         reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    STRING          reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    ARRAY           reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    CHAR            reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    OBJECT          reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    CONST           reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    CONSTRUCTOR     reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    EOF             reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    FALSE           reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    FUNCTION        reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    NULL            reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    NULLABLE        reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    NUMBER          reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    OPERATOR        reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    SMARTCAST       reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    THIS            reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    TRUE            reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    VAL             reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    VAR             reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    DOUBLE          reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    WHEN            reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    LONG            reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    LITERAL_STRING  reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    COLONCOLON      reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    LCCT            reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    IF              reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    RETURN          reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    RETURN_AT       reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    CONTINUE        reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    CONTINUE_AT     reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    BREAK           reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    BREAK_AT        reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    RCHAVE          reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    INCREMENTO      reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    DECREMENTO      reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    MINUS           reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    PLUS            reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    NOT             reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    SUSPEND         reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    PV              reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    ELSE            reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    PONTO           reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    AS              reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    MAISIGUAL       reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    MENOSIGUAL      reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    MULTIGUAL       reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    DIVIGUAL        reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    MODIGUAL        reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    MULT            reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    DIVIDE          reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    MOD             reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    PONTOPONTO      reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    ELVIS           reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    IN              reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    NOT_IN          reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    IS              reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    NOT_IS          reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    MAIOR           reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    MENORIGUAL      reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    MAIORIGUAL      reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    DIFERENTE       reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    IDENTIDADE      reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    IGUALDADE       reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    SEMIDENTIDADE   reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    AND             reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    OR              reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    COMMA           reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    RPAREN          reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    RCCT            reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    ATRIBUICAO      reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    SETA            reduce using rule 289 (simpleIdentifier -> DOUBLE .)
    CLASS           reduce using rule 289 (simpleIdentifier -> DOUBLE .)


state 36

    (290) simpleIdentifier -> WHEN .

    LPAREN          reduce using rule 290 (simpleIdentifier -> WHEN .)
    DOISP           reduce using rule 290 (simpleIdentifier -> WHEN .)
    MENOR           reduce using rule 290 (simpleIdentifier -> WHEN .)
    LCHAVE          reduce using rule 290 (simpleIdentifier -> WHEN .)
    FUN             reduce using rule 290 (simpleIdentifier -> WHEN .)
    $end            reduce using rule 290 (simpleIdentifier -> WHEN .)
    FOR             reduce using rule 290 (simpleIdentifier -> WHEN .)
    WHILE           reduce using rule 290 (simpleIdentifier -> WHEN .)
    DO              reduce using rule 290 (simpleIdentifier -> WHEN .)
    ID              reduce using rule 290 (simpleIdentifier -> WHEN .)
    CROSSINLINE     reduce using rule 290 (simpleIdentifier -> WHEN .)
    IMPORT          reduce using rule 290 (simpleIdentifier -> WHEN .)
    INIT            reduce using rule 290 (simpleIdentifier -> WHEN .)
    NOINLINE        reduce using rule 290 (simpleIdentifier -> WHEN .)
    OUT             reduce using rule 290 (simpleIdentifier -> WHEN .)
    VARARG          reduce using rule 290 (simpleIdentifier -> WHEN .)
    WHERE           reduce using rule 290 (simpleIdentifier -> WHEN .)
    INT             reduce using rule 290 (simpleIdentifier -> WHEN .)
    FLOAT           reduce using rule 290 (simpleIdentifier -> WHEN .)
    BOOLEAN         reduce using rule 290 (simpleIdentifier -> WHEN .)
    STRING          reduce using rule 290 (simpleIdentifier -> WHEN .)
    ARRAY           reduce using rule 290 (simpleIdentifier -> WHEN .)
    CHAR            reduce using rule 290 (simpleIdentifier -> WHEN .)
    OBJECT          reduce using rule 290 (simpleIdentifier -> WHEN .)
    CONST           reduce using rule 290 (simpleIdentifier -> WHEN .)
    CONSTRUCTOR     reduce using rule 290 (simpleIdentifier -> WHEN .)
    EOF             reduce using rule 290 (simpleIdentifier -> WHEN .)
    FALSE           reduce using rule 290 (simpleIdentifier -> WHEN .)
    FUNCTION        reduce using rule 290 (simpleIdentifier -> WHEN .)
    NULL            reduce using rule 290 (simpleIdentifier -> WHEN .)
    NULLABLE        reduce using rule 290 (simpleIdentifier -> WHEN .)
    NUMBER          reduce using rule 290 (simpleIdentifier -> WHEN .)
    OPERATOR        reduce using rule 290 (simpleIdentifier -> WHEN .)
    SMARTCAST       reduce using rule 290 (simpleIdentifier -> WHEN .)
    THIS            reduce using rule 290 (simpleIdentifier -> WHEN .)
    TRUE            reduce using rule 290 (simpleIdentifier -> WHEN .)
    VAL             reduce using rule 290 (simpleIdentifier -> WHEN .)
    VAR             reduce using rule 290 (simpleIdentifier -> WHEN .)
    DOUBLE          reduce using rule 290 (simpleIdentifier -> WHEN .)
    WHEN            reduce using rule 290 (simpleIdentifier -> WHEN .)
    LONG            reduce using rule 290 (simpleIdentifier -> WHEN .)
    LITERAL_STRING  reduce using rule 290 (simpleIdentifier -> WHEN .)
    COLONCOLON      reduce using rule 290 (simpleIdentifier -> WHEN .)
    LCCT            reduce using rule 290 (simpleIdentifier -> WHEN .)
    IF              reduce using rule 290 (simpleIdentifier -> WHEN .)
    RETURN          reduce using rule 290 (simpleIdentifier -> WHEN .)
    RETURN_AT       reduce using rule 290 (simpleIdentifier -> WHEN .)
    CONTINUE        reduce using rule 290 (simpleIdentifier -> WHEN .)
    CONTINUE_AT     reduce using rule 290 (simpleIdentifier -> WHEN .)
    BREAK           reduce using rule 290 (simpleIdentifier -> WHEN .)
    BREAK_AT        reduce using rule 290 (simpleIdentifier -> WHEN .)
    RCHAVE          reduce using rule 290 (simpleIdentifier -> WHEN .)
    INCREMENTO      reduce using rule 290 (simpleIdentifier -> WHEN .)
    DECREMENTO      reduce using rule 290 (simpleIdentifier -> WHEN .)
    MINUS           reduce using rule 290 (simpleIdentifier -> WHEN .)
    PLUS            reduce using rule 290 (simpleIdentifier -> WHEN .)
    NOT             reduce using rule 290 (simpleIdentifier -> WHEN .)
    SUSPEND         reduce using rule 290 (simpleIdentifier -> WHEN .)
    PV              reduce using rule 290 (simpleIdentifier -> WHEN .)
    ELSE            reduce using rule 290 (simpleIdentifier -> WHEN .)
    PONTO           reduce using rule 290 (simpleIdentifier -> WHEN .)
    AS              reduce using rule 290 (simpleIdentifier -> WHEN .)
    MAISIGUAL       reduce using rule 290 (simpleIdentifier -> WHEN .)
    MENOSIGUAL      reduce using rule 290 (simpleIdentifier -> WHEN .)
    MULTIGUAL       reduce using rule 290 (simpleIdentifier -> WHEN .)
    DIVIGUAL        reduce using rule 290 (simpleIdentifier -> WHEN .)
    MODIGUAL        reduce using rule 290 (simpleIdentifier -> WHEN .)
    MULT            reduce using rule 290 (simpleIdentifier -> WHEN .)
    DIVIDE          reduce using rule 290 (simpleIdentifier -> WHEN .)
    MOD             reduce using rule 290 (simpleIdentifier -> WHEN .)
    PONTOPONTO      reduce using rule 290 (simpleIdentifier -> WHEN .)
    ELVIS           reduce using rule 290 (simpleIdentifier -> WHEN .)
    IN              reduce using rule 290 (simpleIdentifier -> WHEN .)
    NOT_IN          reduce using rule 290 (simpleIdentifier -> WHEN .)
    IS              reduce using rule 290 (simpleIdentifier -> WHEN .)
    NOT_IS          reduce using rule 290 (simpleIdentifier -> WHEN .)
    MAIOR           reduce using rule 290 (simpleIdentifier -> WHEN .)
    MENORIGUAL      reduce using rule 290 (simpleIdentifier -> WHEN .)
    MAIORIGUAL      reduce using rule 290 (simpleIdentifier -> WHEN .)
    DIFERENTE       reduce using rule 290 (simpleIdentifier -> WHEN .)
    IDENTIDADE      reduce using rule 290 (simpleIdentifier -> WHEN .)
    IGUALDADE       reduce using rule 290 (simpleIdentifier -> WHEN .)
    SEMIDENTIDADE   reduce using rule 290 (simpleIdentifier -> WHEN .)
    AND             reduce using rule 290 (simpleIdentifier -> WHEN .)
    OR              reduce using rule 290 (simpleIdentifier -> WHEN .)
    COMMA           reduce using rule 290 (simpleIdentifier -> WHEN .)
    RPAREN          reduce using rule 290 (simpleIdentifier -> WHEN .)
    RCCT            reduce using rule 290 (simpleIdentifier -> WHEN .)
    ATRIBUICAO      reduce using rule 290 (simpleIdentifier -> WHEN .)
    SETA            reduce using rule 290 (simpleIdentifier -> WHEN .)
    CLASS           reduce using rule 290 (simpleIdentifier -> WHEN .)


state 37

    (291) simpleIdentifier -> LONG .

    LPAREN          reduce using rule 291 (simpleIdentifier -> LONG .)
    DOISP           reduce using rule 291 (simpleIdentifier -> LONG .)
    MENOR           reduce using rule 291 (simpleIdentifier -> LONG .)
    LCHAVE          reduce using rule 291 (simpleIdentifier -> LONG .)
    FUN             reduce using rule 291 (simpleIdentifier -> LONG .)
    $end            reduce using rule 291 (simpleIdentifier -> LONG .)
    FOR             reduce using rule 291 (simpleIdentifier -> LONG .)
    WHILE           reduce using rule 291 (simpleIdentifier -> LONG .)
    DO              reduce using rule 291 (simpleIdentifier -> LONG .)
    ID              reduce using rule 291 (simpleIdentifier -> LONG .)
    CROSSINLINE     reduce using rule 291 (simpleIdentifier -> LONG .)
    IMPORT          reduce using rule 291 (simpleIdentifier -> LONG .)
    INIT            reduce using rule 291 (simpleIdentifier -> LONG .)
    NOINLINE        reduce using rule 291 (simpleIdentifier -> LONG .)
    OUT             reduce using rule 291 (simpleIdentifier -> LONG .)
    VARARG          reduce using rule 291 (simpleIdentifier -> LONG .)
    WHERE           reduce using rule 291 (simpleIdentifier -> LONG .)
    INT             reduce using rule 291 (simpleIdentifier -> LONG .)
    FLOAT           reduce using rule 291 (simpleIdentifier -> LONG .)
    BOOLEAN         reduce using rule 291 (simpleIdentifier -> LONG .)
    STRING          reduce using rule 291 (simpleIdentifier -> LONG .)
    ARRAY           reduce using rule 291 (simpleIdentifier -> LONG .)
    CHAR            reduce using rule 291 (simpleIdentifier -> LONG .)
    OBJECT          reduce using rule 291 (simpleIdentifier -> LONG .)
    CONST           reduce using rule 291 (simpleIdentifier -> LONG .)
    CONSTRUCTOR     reduce using rule 291 (simpleIdentifier -> LONG .)
    EOF             reduce using rule 291 (simpleIdentifier -> LONG .)
    FALSE           reduce using rule 291 (simpleIdentifier -> LONG .)
    FUNCTION        reduce using rule 291 (simpleIdentifier -> LONG .)
    NULL            reduce using rule 291 (simpleIdentifier -> LONG .)
    NULLABLE        reduce using rule 291 (simpleIdentifier -> LONG .)
    NUMBER          reduce using rule 291 (simpleIdentifier -> LONG .)
    OPERATOR        reduce using rule 291 (simpleIdentifier -> LONG .)
    SMARTCAST       reduce using rule 291 (simpleIdentifier -> LONG .)
    THIS            reduce using rule 291 (simpleIdentifier -> LONG .)
    TRUE            reduce using rule 291 (simpleIdentifier -> LONG .)
    VAL             reduce using rule 291 (simpleIdentifier -> LONG .)
    VAR             reduce using rule 291 (simpleIdentifier -> LONG .)
    DOUBLE          reduce using rule 291 (simpleIdentifier -> LONG .)
    WHEN            reduce using rule 291 (simpleIdentifier -> LONG .)
    LONG            reduce using rule 291 (simpleIdentifier -> LONG .)
    LITERAL_STRING  reduce using rule 291 (simpleIdentifier -> LONG .)
    COLONCOLON      reduce using rule 291 (simpleIdentifier -> LONG .)
    LCCT            reduce using rule 291 (simpleIdentifier -> LONG .)
    IF              reduce using rule 291 (simpleIdentifier -> LONG .)
    RETURN          reduce using rule 291 (simpleIdentifier -> LONG .)
    RETURN_AT       reduce using rule 291 (simpleIdentifier -> LONG .)
    CONTINUE        reduce using rule 291 (simpleIdentifier -> LONG .)
    CONTINUE_AT     reduce using rule 291 (simpleIdentifier -> LONG .)
    BREAK           reduce using rule 291 (simpleIdentifier -> LONG .)
    BREAK_AT        reduce using rule 291 (simpleIdentifier -> LONG .)
    RCHAVE          reduce using rule 291 (simpleIdentifier -> LONG .)
    INCREMENTO      reduce using rule 291 (simpleIdentifier -> LONG .)
    DECREMENTO      reduce using rule 291 (simpleIdentifier -> LONG .)
    MINUS           reduce using rule 291 (simpleIdentifier -> LONG .)
    PLUS            reduce using rule 291 (simpleIdentifier -> LONG .)
    NOT             reduce using rule 291 (simpleIdentifier -> LONG .)
    SUSPEND         reduce using rule 291 (simpleIdentifier -> LONG .)
    PV              reduce using rule 291 (simpleIdentifier -> LONG .)
    ELSE            reduce using rule 291 (simpleIdentifier -> LONG .)
    PONTO           reduce using rule 291 (simpleIdentifier -> LONG .)
    AS              reduce using rule 291 (simpleIdentifier -> LONG .)
    MAISIGUAL       reduce using rule 291 (simpleIdentifier -> LONG .)
    MENOSIGUAL      reduce using rule 291 (simpleIdentifier -> LONG .)
    MULTIGUAL       reduce using rule 291 (simpleIdentifier -> LONG .)
    DIVIGUAL        reduce using rule 291 (simpleIdentifier -> LONG .)
    MODIGUAL        reduce using rule 291 (simpleIdentifier -> LONG .)
    MULT            reduce using rule 291 (simpleIdentifier -> LONG .)
    DIVIDE          reduce using rule 291 (simpleIdentifier -> LONG .)
    MOD             reduce using rule 291 (simpleIdentifier -> LONG .)
    PONTOPONTO      reduce using rule 291 (simpleIdentifier -> LONG .)
    ELVIS           reduce using rule 291 (simpleIdentifier -> LONG .)
    IN              reduce using rule 291 (simpleIdentifier -> LONG .)
    NOT_IN          reduce using rule 291 (simpleIdentifier -> LONG .)
    IS              reduce using rule 291 (simpleIdentifier -> LONG .)
    NOT_IS          reduce using rule 291 (simpleIdentifier -> LONG .)
    MAIOR           reduce using rule 291 (simpleIdentifier -> LONG .)
    MENORIGUAL      reduce using rule 291 (simpleIdentifier -> LONG .)
    MAIORIGUAL      reduce using rule 291 (simpleIdentifier -> LONG .)
    DIFERENTE       reduce using rule 291 (simpleIdentifier -> LONG .)
    IDENTIDADE      reduce using rule 291 (simpleIdentifier -> LONG .)
    IGUALDADE       reduce using rule 291 (simpleIdentifier -> LONG .)
    SEMIDENTIDADE   reduce using rule 291 (simpleIdentifier -> LONG .)
    AND             reduce using rule 291 (simpleIdentifier -> LONG .)
    OR              reduce using rule 291 (simpleIdentifier -> LONG .)
    COMMA           reduce using rule 291 (simpleIdentifier -> LONG .)
    RPAREN          reduce using rule 291 (simpleIdentifier -> LONG .)
    RCCT            reduce using rule 291 (simpleIdentifier -> LONG .)
    ATRIBUICAO      reduce using rule 291 (simpleIdentifier -> LONG .)
    SETA            reduce using rule 291 (simpleIdentifier -> LONG .)
    CLASS           reduce using rule 291 (simpleIdentifier -> LONG .)


state 38

    (3) functionDeclaration -> FUN simpleIdentifier functionValueParameters . fd2 fd3
    (6) fd2 -> . DOISP type
    (7) fd2 -> .

    DOISP           shift and go to state 41
    LCHAVE          reduce using rule 7 (fd2 -> .)
    FUN             reduce using rule 7 (fd2 -> .)
    $end            reduce using rule 7 (fd2 -> .)
    FOR             reduce using rule 7 (fd2 -> .)
    WHILE           reduce using rule 7 (fd2 -> .)
    DO              reduce using rule 7 (fd2 -> .)
    ID              reduce using rule 7 (fd2 -> .)
    CROSSINLINE     reduce using rule 7 (fd2 -> .)
    IMPORT          reduce using rule 7 (fd2 -> .)
    INIT            reduce using rule 7 (fd2 -> .)
    NOINLINE        reduce using rule 7 (fd2 -> .)
    OUT             reduce using rule 7 (fd2 -> .)
    VARARG          reduce using rule 7 (fd2 -> .)
    WHERE           reduce using rule 7 (fd2 -> .)
    INT             reduce using rule 7 (fd2 -> .)
    FLOAT           reduce using rule 7 (fd2 -> .)
    BOOLEAN         reduce using rule 7 (fd2 -> .)
    STRING          reduce using rule 7 (fd2 -> .)
    ARRAY           reduce using rule 7 (fd2 -> .)
    CHAR            reduce using rule 7 (fd2 -> .)
    OBJECT          reduce using rule 7 (fd2 -> .)
    CONST           reduce using rule 7 (fd2 -> .)
    CONSTRUCTOR     reduce using rule 7 (fd2 -> .)
    EOF             reduce using rule 7 (fd2 -> .)
    FALSE           reduce using rule 7 (fd2 -> .)
    FUNCTION        reduce using rule 7 (fd2 -> .)
    NULL            reduce using rule 7 (fd2 -> .)
    NULLABLE        reduce using rule 7 (fd2 -> .)
    NUMBER          reduce using rule 7 (fd2 -> .)
    OPERATOR        reduce using rule 7 (fd2 -> .)
    SMARTCAST       reduce using rule 7 (fd2 -> .)
    THIS            reduce using rule 7 (fd2 -> .)
    TRUE            reduce using rule 7 (fd2 -> .)
    VAL             reduce using rule 7 (fd2 -> .)
    VAR             reduce using rule 7 (fd2 -> .)
    DOUBLE          reduce using rule 7 (fd2 -> .)
    WHEN            reduce using rule 7 (fd2 -> .)
    LONG            reduce using rule 7 (fd2 -> .)
    LPAREN          reduce using rule 7 (fd2 -> .)
    LITERAL_STRING  reduce using rule 7 (fd2 -> .)
    COLONCOLON      reduce using rule 7 (fd2 -> .)
    LCCT            reduce using rule 7 (fd2 -> .)
    IF              reduce using rule 7 (fd2 -> .)
    RETURN          reduce using rule 7 (fd2 -> .)
    RETURN_AT       reduce using rule 7 (fd2 -> .)
    CONTINUE        reduce using rule 7 (fd2 -> .)
    CONTINUE_AT     reduce using rule 7 (fd2 -> .)
    BREAK           reduce using rule 7 (fd2 -> .)
    BREAK_AT        reduce using rule 7 (fd2 -> .)
    RCHAVE          reduce using rule 7 (fd2 -> .)
    INCREMENTO      reduce using rule 7 (fd2 -> .)
    DECREMENTO      reduce using rule 7 (fd2 -> .)
    MINUS           reduce using rule 7 (fd2 -> .)
    PLUS            reduce using rule 7 (fd2 -> .)
    NOT             reduce using rule 7 (fd2 -> .)
    SUSPEND         reduce using rule 7 (fd2 -> .)
    PV              reduce using rule 7 (fd2 -> .)
    ELSE            reduce using rule 7 (fd2 -> .)
    MENOR           reduce using rule 7 (fd2 -> .)
    PONTO           reduce using rule 7 (fd2 -> .)
    AS              reduce using rule 7 (fd2 -> .)
    MAISIGUAL       reduce using rule 7 (fd2 -> .)
    MENOSIGUAL      reduce using rule 7 (fd2 -> .)
    MULTIGUAL       reduce using rule 7 (fd2 -> .)
    DIVIGUAL        reduce using rule 7 (fd2 -> .)
    MODIGUAL        reduce using rule 7 (fd2 -> .)
    MULT            reduce using rule 7 (fd2 -> .)
    DIVIDE          reduce using rule 7 (fd2 -> .)
    MOD             reduce using rule 7 (fd2 -> .)
    PONTOPONTO      reduce using rule 7 (fd2 -> .)
    ELVIS           reduce using rule 7 (fd2 -> .)
    IN              reduce using rule 7 (fd2 -> .)
    NOT_IN          reduce using rule 7 (fd2 -> .)
    IS              reduce using rule 7 (fd2 -> .)
    NOT_IS          reduce using rule 7 (fd2 -> .)
    MAIOR           reduce using rule 7 (fd2 -> .)
    MENORIGUAL      reduce using rule 7 (fd2 -> .)
    MAIORIGUAL      reduce using rule 7 (fd2 -> .)
    DIFERENTE       reduce using rule 7 (fd2 -> .)
    IDENTIDADE      reduce using rule 7 (fd2 -> .)
    IGUALDADE       reduce using rule 7 (fd2 -> .)
    SEMIDENTIDADE   reduce using rule 7 (fd2 -> .)
    AND             reduce using rule 7 (fd2 -> .)
    OR              reduce using rule 7 (fd2 -> .)
    COMMA           reduce using rule 7 (fd2 -> .)
    RPAREN          reduce using rule 7 (fd2 -> .)
    RCCT            reduce using rule 7 (fd2 -> .)

    fd2                            shift and go to state 40

state 39

    (12) functionValueParameters -> LPAREN . fvps RPAREN
    (13) functionValueParameters -> LPAREN . RPAREN
    (14) fvps -> . functionValueParameter
    (15) fvps -> . functionValueParameter COMMA fvps
    (16) fvps -> . functionValueParameter fvps
    (17) functionValueParameter -> . parameter ATRIBUICAO expression
    (18) functionValueParameter -> . parameter
    (25) parameter -> . simpleIdentifier DOISP type
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    RPAREN          shift and go to state 43
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    fvps                           shift and go to state 42
    functionValueParameter         shift and go to state 44
    parameter                      shift and go to state 45
    simpleIdentifier               shift and go to state 46

state 40

    (3) functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 . fd3
    (8) fd3 -> . block
    (9) fd3 -> .
    (67) block -> . LCHAVE statements RCHAVE

  ! shift/reduce conflict for LCHAVE resolved as shift
    FUN             reduce using rule 9 (fd3 -> .)
    $end            reduce using rule 9 (fd3 -> .)
    FOR             reduce using rule 9 (fd3 -> .)
    WHILE           reduce using rule 9 (fd3 -> .)
    DO              reduce using rule 9 (fd3 -> .)
    ID              reduce using rule 9 (fd3 -> .)
    CROSSINLINE     reduce using rule 9 (fd3 -> .)
    IMPORT          reduce using rule 9 (fd3 -> .)
    INIT            reduce using rule 9 (fd3 -> .)
    NOINLINE        reduce using rule 9 (fd3 -> .)
    OUT             reduce using rule 9 (fd3 -> .)
    VARARG          reduce using rule 9 (fd3 -> .)
    WHERE           reduce using rule 9 (fd3 -> .)
    INT             reduce using rule 9 (fd3 -> .)
    FLOAT           reduce using rule 9 (fd3 -> .)
    BOOLEAN         reduce using rule 9 (fd3 -> .)
    STRING          reduce using rule 9 (fd3 -> .)
    ARRAY           reduce using rule 9 (fd3 -> .)
    CHAR            reduce using rule 9 (fd3 -> .)
    OBJECT          reduce using rule 9 (fd3 -> .)
    CONST           reduce using rule 9 (fd3 -> .)
    CONSTRUCTOR     reduce using rule 9 (fd3 -> .)
    EOF             reduce using rule 9 (fd3 -> .)
    FALSE           reduce using rule 9 (fd3 -> .)
    FUNCTION        reduce using rule 9 (fd3 -> .)
    NULL            reduce using rule 9 (fd3 -> .)
    NULLABLE        reduce using rule 9 (fd3 -> .)
    NUMBER          reduce using rule 9 (fd3 -> .)
    OPERATOR        reduce using rule 9 (fd3 -> .)
    SMARTCAST       reduce using rule 9 (fd3 -> .)
    THIS            reduce using rule 9 (fd3 -> .)
    TRUE            reduce using rule 9 (fd3 -> .)
    VAL             reduce using rule 9 (fd3 -> .)
    VAR             reduce using rule 9 (fd3 -> .)
    DOUBLE          reduce using rule 9 (fd3 -> .)
    WHEN            reduce using rule 9 (fd3 -> .)
    LONG            reduce using rule 9 (fd3 -> .)
    LPAREN          reduce using rule 9 (fd3 -> .)
    LITERAL_STRING  reduce using rule 9 (fd3 -> .)
    COLONCOLON      reduce using rule 9 (fd3 -> .)
    LCCT            reduce using rule 9 (fd3 -> .)
    IF              reduce using rule 9 (fd3 -> .)
    RETURN          reduce using rule 9 (fd3 -> .)
    RETURN_AT       reduce using rule 9 (fd3 -> .)
    CONTINUE        reduce using rule 9 (fd3 -> .)
    CONTINUE_AT     reduce using rule 9 (fd3 -> .)
    BREAK           reduce using rule 9 (fd3 -> .)
    BREAK_AT        reduce using rule 9 (fd3 -> .)
    RCHAVE          reduce using rule 9 (fd3 -> .)
    INCREMENTO      reduce using rule 9 (fd3 -> .)
    DECREMENTO      reduce using rule 9 (fd3 -> .)
    MINUS           reduce using rule 9 (fd3 -> .)
    PLUS            reduce using rule 9 (fd3 -> .)
    NOT             reduce using rule 9 (fd3 -> .)
    SUSPEND         reduce using rule 9 (fd3 -> .)
    PV              reduce using rule 9 (fd3 -> .)
    ELSE            reduce using rule 9 (fd3 -> .)
    MENOR           reduce using rule 9 (fd3 -> .)
    PONTO           reduce using rule 9 (fd3 -> .)
    AS              reduce using rule 9 (fd3 -> .)
    MAISIGUAL       reduce using rule 9 (fd3 -> .)
    MENOSIGUAL      reduce using rule 9 (fd3 -> .)
    MULTIGUAL       reduce using rule 9 (fd3 -> .)
    DIVIGUAL        reduce using rule 9 (fd3 -> .)
    MODIGUAL        reduce using rule 9 (fd3 -> .)
    MULT            reduce using rule 9 (fd3 -> .)
    DIVIDE          reduce using rule 9 (fd3 -> .)
    MOD             reduce using rule 9 (fd3 -> .)
    PONTOPONTO      reduce using rule 9 (fd3 -> .)
    ELVIS           reduce using rule 9 (fd3 -> .)
    IN              reduce using rule 9 (fd3 -> .)
    NOT_IN          reduce using rule 9 (fd3 -> .)
    IS              reduce using rule 9 (fd3 -> .)
    NOT_IS          reduce using rule 9 (fd3 -> .)
    MAIOR           reduce using rule 9 (fd3 -> .)
    MENORIGUAL      reduce using rule 9 (fd3 -> .)
    MAIORIGUAL      reduce using rule 9 (fd3 -> .)
    DIFERENTE       reduce using rule 9 (fd3 -> .)
    IDENTIDADE      reduce using rule 9 (fd3 -> .)
    IGUALDADE       reduce using rule 9 (fd3 -> .)
    SEMIDENTIDADE   reduce using rule 9 (fd3 -> .)
    AND             reduce using rule 9 (fd3 -> .)
    OR              reduce using rule 9 (fd3 -> .)
    COMMA           reduce using rule 9 (fd3 -> .)
    RPAREN          reduce using rule 9 (fd3 -> .)
    RCCT            reduce using rule 9 (fd3 -> .)
    LCHAVE          shift and go to state 49

  ! LCHAVE          [ reduce using rule 9 (fd3 -> .) ]

    fd3                            shift and go to state 47
    block                          shift and go to state 48

state 41

    (6) fd2 -> DOISP . type
    (26) type -> . typeModifiers optype
    (27) type -> . optype
    (31) typeModifiers -> . typeModifier
    (32) typeModifiers -> . typeModifier typeModifiers
    (28) optype -> . parenthesizedType
    (29) optype -> . functionType
    (30) optype -> . userType
    (33) typeModifier -> . SUSPEND
    (56) parenthesizedType -> . LPAREN type RPAREN
    (44) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (45) functionType -> . functionTypeParameters SETA type
    (37) userType -> . simpleUserType
    (57) receiverType -> . typeModifier rt
    (46) functionTypeParameters -> . functionTypeParameters_p
    (47) functionTypeParameters -> . functionTypeParameters_t
    (38) simpleUserType -> . simpleIdentifier typeArguments
    (39) simpleUserType -> . simpleIdentifier
    (48) functionTypeParameters_p -> . LPAREN parameter ftp RPAREN
    (49) functionTypeParameters_p -> . LPAREN parameter RPAREN
    (50) functionTypeParameters_t -> . LPAREN type RPAREN
    (51) functionTypeParameters_t -> . LPAREN type ftp RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    SUSPEND         shift and go to state 57
    LPAREN          shift and go to state 58
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    type                           shift and go to state 50
    typeModifiers                  shift and go to state 51
    optype                         shift and go to state 52
    typeModifier                   shift and go to state 53
    parenthesizedType              shift and go to state 54
    functionType                   shift and go to state 55
    userType                       shift and go to state 56
    receiverType                   shift and go to state 59
    functionTypeParameters         shift and go to state 60
    simpleUserType                 shift and go to state 61
    functionTypeParameters_p       shift and go to state 62
    functionTypeParameters_t       shift and go to state 63
    simpleIdentifier               shift and go to state 64

state 42

    (12) functionValueParameters -> LPAREN fvps . RPAREN

    RPAREN          shift and go to state 65


state 43

    (13) functionValueParameters -> LPAREN RPAREN .

    DOISP           reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    LCHAVE          reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    FUN             reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    $end            reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    FOR             reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    WHILE           reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    DO              reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    ID              reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    CROSSINLINE     reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    IMPORT          reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    INIT            reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    NOINLINE        reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    OUT             reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    VARARG          reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    WHERE           reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    INT             reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    FLOAT           reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    BOOLEAN         reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    STRING          reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    ARRAY           reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    CHAR            reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    OBJECT          reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    CONST           reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    CONSTRUCTOR     reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    EOF             reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    FALSE           reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    FUNCTION        reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    NULL            reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    NULLABLE        reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    NUMBER          reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    OPERATOR        reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    SMARTCAST       reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    THIS            reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    TRUE            reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    VAL             reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    VAR             reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    DOUBLE          reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    WHEN            reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    LONG            reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    LPAREN          reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    LITERAL_STRING  reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    COLONCOLON      reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    LCCT            reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    IF              reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    RETURN          reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    RETURN_AT       reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    CONTINUE        reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    CONTINUE_AT     reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    BREAK           reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    BREAK_AT        reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    RCHAVE          reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    INCREMENTO      reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    DECREMENTO      reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    MINUS           reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    PLUS            reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    NOT             reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    SUSPEND         reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    PV              reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    ELSE            reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    MENOR           reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    PONTO           reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    AS              reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    MAISIGUAL       reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    MENOSIGUAL      reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    MULTIGUAL       reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    DIVIGUAL        reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    MODIGUAL        reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    MULT            reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    MOD             reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    PONTOPONTO      reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    ELVIS           reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    IN              reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    NOT_IN          reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    IS              reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    NOT_IS          reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    MAIOR           reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    MENORIGUAL      reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    MAIORIGUAL      reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    DIFERENTE       reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    IDENTIDADE      reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    IGUALDADE       reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    SEMIDENTIDADE   reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    AND             reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    OR              reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    COMMA           reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    RPAREN          reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)
    RCCT            reduce using rule 13 (functionValueParameters -> LPAREN RPAREN .)


state 44

    (14) fvps -> functionValueParameter .
    (15) fvps -> functionValueParameter . COMMA fvps
    (16) fvps -> functionValueParameter . fvps
    (14) fvps -> . functionValueParameter
    (15) fvps -> . functionValueParameter COMMA fvps
    (16) fvps -> . functionValueParameter fvps
    (17) functionValueParameter -> . parameter ATRIBUICAO expression
    (18) functionValueParameter -> . parameter
    (25) parameter -> . simpleIdentifier DOISP type
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    RPAREN          reduce using rule 14 (fvps -> functionValueParameter .)
    COMMA           shift and go to state 66
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    functionValueParameter         shift and go to state 44
    fvps                           shift and go to state 67
    parameter                      shift and go to state 45
    simpleIdentifier               shift and go to state 46

state 45

    (17) functionValueParameter -> parameter . ATRIBUICAO expression
    (18) functionValueParameter -> parameter .

    ATRIBUICAO      shift and go to state 68
    COMMA           reduce using rule 18 (functionValueParameter -> parameter .)
    ID              reduce using rule 18 (functionValueParameter -> parameter .)
    CROSSINLINE     reduce using rule 18 (functionValueParameter -> parameter .)
    IMPORT          reduce using rule 18 (functionValueParameter -> parameter .)
    INIT            reduce using rule 18 (functionValueParameter -> parameter .)
    NOINLINE        reduce using rule 18 (functionValueParameter -> parameter .)
    OUT             reduce using rule 18 (functionValueParameter -> parameter .)
    VARARG          reduce using rule 18 (functionValueParameter -> parameter .)
    WHERE           reduce using rule 18 (functionValueParameter -> parameter .)
    INT             reduce using rule 18 (functionValueParameter -> parameter .)
    FLOAT           reduce using rule 18 (functionValueParameter -> parameter .)
    BOOLEAN         reduce using rule 18 (functionValueParameter -> parameter .)
    STRING          reduce using rule 18 (functionValueParameter -> parameter .)
    ARRAY           reduce using rule 18 (functionValueParameter -> parameter .)
    CHAR            reduce using rule 18 (functionValueParameter -> parameter .)
    OBJECT          reduce using rule 18 (functionValueParameter -> parameter .)
    CONST           reduce using rule 18 (functionValueParameter -> parameter .)
    CONSTRUCTOR     reduce using rule 18 (functionValueParameter -> parameter .)
    EOF             reduce using rule 18 (functionValueParameter -> parameter .)
    FALSE           reduce using rule 18 (functionValueParameter -> parameter .)
    FUNCTION        reduce using rule 18 (functionValueParameter -> parameter .)
    NULL            reduce using rule 18 (functionValueParameter -> parameter .)
    NULLABLE        reduce using rule 18 (functionValueParameter -> parameter .)
    NUMBER          reduce using rule 18 (functionValueParameter -> parameter .)
    OPERATOR        reduce using rule 18 (functionValueParameter -> parameter .)
    SMARTCAST       reduce using rule 18 (functionValueParameter -> parameter .)
    THIS            reduce using rule 18 (functionValueParameter -> parameter .)
    TRUE            reduce using rule 18 (functionValueParameter -> parameter .)
    VAL             reduce using rule 18 (functionValueParameter -> parameter .)
    VAR             reduce using rule 18 (functionValueParameter -> parameter .)
    DOUBLE          reduce using rule 18 (functionValueParameter -> parameter .)
    WHEN            reduce using rule 18 (functionValueParameter -> parameter .)
    LONG            reduce using rule 18 (functionValueParameter -> parameter .)
    RPAREN          reduce using rule 18 (functionValueParameter -> parameter .)


state 46

    (25) parameter -> simpleIdentifier . DOISP type

    DOISP           shift and go to state 69


state 47

    (3) functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .

    FUN             reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    $end            reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    FOR             reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    WHILE           reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    DO              reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    ID              reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    CROSSINLINE     reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    IMPORT          reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    INIT            reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    NOINLINE        reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    OUT             reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    VARARG          reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    WHERE           reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    INT             reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    FLOAT           reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    BOOLEAN         reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    STRING          reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    ARRAY           reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    CHAR            reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    OBJECT          reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    CONST           reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    CONSTRUCTOR     reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    EOF             reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    FALSE           reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    FUNCTION        reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    NULL            reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    NULLABLE        reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    NUMBER          reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    OPERATOR        reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    SMARTCAST       reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    THIS            reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    TRUE            reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    VAL             reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    VAR             reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    DOUBLE          reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    WHEN            reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    LONG            reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    LPAREN          reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    LITERAL_STRING  reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    COLONCOLON      reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    LCCT            reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    IF              reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    RETURN          reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    RETURN_AT       reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    CONTINUE        reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    CONTINUE_AT     reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    BREAK           reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    BREAK_AT        reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    RCHAVE          reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    INCREMENTO      reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    DECREMENTO      reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    MINUS           reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    PLUS            reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    NOT             reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    SUSPEND         reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    LCHAVE          reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    PV              reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    ELSE            reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    MENOR           reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    PONTO           reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    AS              reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    MAISIGUAL       reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    MENOSIGUAL      reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    MULTIGUAL       reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    DIVIGUAL        reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    MODIGUAL        reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    MULT            reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    DIVIDE          reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    MOD             reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    PONTOPONTO      reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    ELVIS           reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    IN              reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    NOT_IN          reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    IS              reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    NOT_IS          reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    MAIOR           reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    MENORIGUAL      reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    MAIORIGUAL      reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    DIFERENTE       reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    IDENTIDADE      reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    IGUALDADE       reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    SEMIDENTIDADE   reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    AND             reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    OR              reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    COMMA           reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    RPAREN          reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)
    RCCT            reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters fd2 fd3 .)


state 48

    (8) fd3 -> block .

    FUN             reduce using rule 8 (fd3 -> block .)
    $end            reduce using rule 8 (fd3 -> block .)
    FOR             reduce using rule 8 (fd3 -> block .)
    WHILE           reduce using rule 8 (fd3 -> block .)
    DO              reduce using rule 8 (fd3 -> block .)
    ID              reduce using rule 8 (fd3 -> block .)
    CROSSINLINE     reduce using rule 8 (fd3 -> block .)
    IMPORT          reduce using rule 8 (fd3 -> block .)
    INIT            reduce using rule 8 (fd3 -> block .)
    NOINLINE        reduce using rule 8 (fd3 -> block .)
    OUT             reduce using rule 8 (fd3 -> block .)
    VARARG          reduce using rule 8 (fd3 -> block .)
    WHERE           reduce using rule 8 (fd3 -> block .)
    INT             reduce using rule 8 (fd3 -> block .)
    FLOAT           reduce using rule 8 (fd3 -> block .)
    BOOLEAN         reduce using rule 8 (fd3 -> block .)
    STRING          reduce using rule 8 (fd3 -> block .)
    ARRAY           reduce using rule 8 (fd3 -> block .)
    CHAR            reduce using rule 8 (fd3 -> block .)
    OBJECT          reduce using rule 8 (fd3 -> block .)
    CONST           reduce using rule 8 (fd3 -> block .)
    CONSTRUCTOR     reduce using rule 8 (fd3 -> block .)
    EOF             reduce using rule 8 (fd3 -> block .)
    FALSE           reduce using rule 8 (fd3 -> block .)
    FUNCTION        reduce using rule 8 (fd3 -> block .)
    NULL            reduce using rule 8 (fd3 -> block .)
    NULLABLE        reduce using rule 8 (fd3 -> block .)
    NUMBER          reduce using rule 8 (fd3 -> block .)
    OPERATOR        reduce using rule 8 (fd3 -> block .)
    SMARTCAST       reduce using rule 8 (fd3 -> block .)
    THIS            reduce using rule 8 (fd3 -> block .)
    TRUE            reduce using rule 8 (fd3 -> block .)
    VAL             reduce using rule 8 (fd3 -> block .)
    VAR             reduce using rule 8 (fd3 -> block .)
    DOUBLE          reduce using rule 8 (fd3 -> block .)
    WHEN            reduce using rule 8 (fd3 -> block .)
    LONG            reduce using rule 8 (fd3 -> block .)
    LPAREN          reduce using rule 8 (fd3 -> block .)
    LITERAL_STRING  reduce using rule 8 (fd3 -> block .)
    COLONCOLON      reduce using rule 8 (fd3 -> block .)
    LCCT            reduce using rule 8 (fd3 -> block .)
    IF              reduce using rule 8 (fd3 -> block .)
    RETURN          reduce using rule 8 (fd3 -> block .)
    RETURN_AT       reduce using rule 8 (fd3 -> block .)
    CONTINUE        reduce using rule 8 (fd3 -> block .)
    CONTINUE_AT     reduce using rule 8 (fd3 -> block .)
    BREAK           reduce using rule 8 (fd3 -> block .)
    BREAK_AT        reduce using rule 8 (fd3 -> block .)
    RCHAVE          reduce using rule 8 (fd3 -> block .)
    INCREMENTO      reduce using rule 8 (fd3 -> block .)
    DECREMENTO      reduce using rule 8 (fd3 -> block .)
    MINUS           reduce using rule 8 (fd3 -> block .)
    PLUS            reduce using rule 8 (fd3 -> block .)
    NOT             reduce using rule 8 (fd3 -> block .)
    SUSPEND         reduce using rule 8 (fd3 -> block .)
    LCHAVE          reduce using rule 8 (fd3 -> block .)
    PV              reduce using rule 8 (fd3 -> block .)
    ELSE            reduce using rule 8 (fd3 -> block .)
    MENOR           reduce using rule 8 (fd3 -> block .)
    PONTO           reduce using rule 8 (fd3 -> block .)
    AS              reduce using rule 8 (fd3 -> block .)
    MAISIGUAL       reduce using rule 8 (fd3 -> block .)
    MENOSIGUAL      reduce using rule 8 (fd3 -> block .)
    MULTIGUAL       reduce using rule 8 (fd3 -> block .)
    DIVIGUAL        reduce using rule 8 (fd3 -> block .)
    MODIGUAL        reduce using rule 8 (fd3 -> block .)
    MULT            reduce using rule 8 (fd3 -> block .)
    DIVIDE          reduce using rule 8 (fd3 -> block .)
    MOD             reduce using rule 8 (fd3 -> block .)
    PONTOPONTO      reduce using rule 8 (fd3 -> block .)
    ELVIS           reduce using rule 8 (fd3 -> block .)
    IN              reduce using rule 8 (fd3 -> block .)
    NOT_IN          reduce using rule 8 (fd3 -> block .)
    IS              reduce using rule 8 (fd3 -> block .)
    NOT_IS          reduce using rule 8 (fd3 -> block .)
    MAIOR           reduce using rule 8 (fd3 -> block .)
    MENORIGUAL      reduce using rule 8 (fd3 -> block .)
    MAIORIGUAL      reduce using rule 8 (fd3 -> block .)
    DIFERENTE       reduce using rule 8 (fd3 -> block .)
    IDENTIDADE      reduce using rule 8 (fd3 -> block .)
    IGUALDADE       reduce using rule 8 (fd3 -> block .)
    SEMIDENTIDADE   reduce using rule 8 (fd3 -> block .)
    AND             reduce using rule 8 (fd3 -> block .)
    OR              reduce using rule 8 (fd3 -> block .)
    COMMA           reduce using rule 8 (fd3 -> block .)
    RPAREN          reduce using rule 8 (fd3 -> block .)
    RCCT            reduce using rule 8 (fd3 -> block .)


state 49

    (67) block -> LCHAVE . statements RCHAVE
    (59) statements -> . statement
    (60) statements -> . statement statements
    (61) statement -> . functionDeclaration
    (62) statement -> . assignment
    (63) statement -> . loopStatement
    (64) statement -> . expression
    (3) functionDeclaration -> . FUN simpleIdentifier functionValueParameters fd2 fd3
    (80) assignment -> . directlyAssignableExpression IGUALDADE expression
    (81) assignment -> . assignableExpression assignmentAndOperator expression
    (68) loopStatement -> . forStatement_MD
    (69) loopStatement -> . forStatement_VD
    (70) loopStatement -> . whileStatement
    (71) loopStatement -> . doWhileStatement
    (82) expression -> . disjunction
    (125) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (126) directlyAssignableExpression -> . simpleIdentifier
    (127) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (129) assignableExpression -> . prefixUnaryExpression
    (130) assignableExpression -> . parenthesizedAssignableExpression
    (72) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (73) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (74) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (75) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (76) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (77) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (78) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (79) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (128) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (131) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (33) typeModifier -> . SUSPEND
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type

    FUN             shift and go to state 77
    FOR             shift and go to state 90
    WHILE           shift and go to state 92
    DO              shift and go to state 93
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    LPAREN          shift and go to state 91
    LITERAL_STRING  shift and go to state 99
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    SUSPEND         shift and go to state 57

    statements                     shift and go to state 70
    statement                      shift and go to state 72
    functionDeclaration            shift and go to state 73
    assignment                     shift and go to state 74
    loopStatement                  shift and go to state 75
    expression                     shift and go to state 76
    simpleIdentifier               shift and go to state 78
    directlyAssignableExpression   shift and go to state 79
    assignableExpression           shift and go to state 80
    forStatement_MD                shift and go to state 81
    forStatement_VD                shift and go to state 82
    whileStatement                 shift and go to state 83
    doWhileStatement               shift and go to state 84
    disjunction                    shift and go to state 85
    postfixUnaryExpression         shift and go to state 86
    parenthesizedDirectlyAssignableExpression shift and go to state 87
    prefixUnaryExpression          shift and go to state 88
    parenthesizedAssignableExpression shift and go to state 89
    conjunction                    shift and go to state 94
    primaryExpression              shift and go to state 95
    preue                          shift and go to state 96
    equality                       shift and go to state 97
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    unaryPrefix                    shift and go to state 105
    comparison                     shift and go to state 106
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    infixOperation                 shift and go to state 121
    typeModifier                   shift and go to state 122
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133

state 50

    (6) fd2 -> DOISP type .

    LCHAVE          reduce using rule 6 (fd2 -> DOISP type .)
    FUN             reduce using rule 6 (fd2 -> DOISP type .)
    $end            reduce using rule 6 (fd2 -> DOISP type .)
    FOR             reduce using rule 6 (fd2 -> DOISP type .)
    WHILE           reduce using rule 6 (fd2 -> DOISP type .)
    DO              reduce using rule 6 (fd2 -> DOISP type .)
    ID              reduce using rule 6 (fd2 -> DOISP type .)
    CROSSINLINE     reduce using rule 6 (fd2 -> DOISP type .)
    IMPORT          reduce using rule 6 (fd2 -> DOISP type .)
    INIT            reduce using rule 6 (fd2 -> DOISP type .)
    NOINLINE        reduce using rule 6 (fd2 -> DOISP type .)
    OUT             reduce using rule 6 (fd2 -> DOISP type .)
    VARARG          reduce using rule 6 (fd2 -> DOISP type .)
    WHERE           reduce using rule 6 (fd2 -> DOISP type .)
    INT             reduce using rule 6 (fd2 -> DOISP type .)
    FLOAT           reduce using rule 6 (fd2 -> DOISP type .)
    BOOLEAN         reduce using rule 6 (fd2 -> DOISP type .)
    STRING          reduce using rule 6 (fd2 -> DOISP type .)
    ARRAY           reduce using rule 6 (fd2 -> DOISP type .)
    CHAR            reduce using rule 6 (fd2 -> DOISP type .)
    OBJECT          reduce using rule 6 (fd2 -> DOISP type .)
    CONST           reduce using rule 6 (fd2 -> DOISP type .)
    CONSTRUCTOR     reduce using rule 6 (fd2 -> DOISP type .)
    EOF             reduce using rule 6 (fd2 -> DOISP type .)
    FALSE           reduce using rule 6 (fd2 -> DOISP type .)
    FUNCTION        reduce using rule 6 (fd2 -> DOISP type .)
    NULL            reduce using rule 6 (fd2 -> DOISP type .)
    NULLABLE        reduce using rule 6 (fd2 -> DOISP type .)
    NUMBER          reduce using rule 6 (fd2 -> DOISP type .)
    OPERATOR        reduce using rule 6 (fd2 -> DOISP type .)
    SMARTCAST       reduce using rule 6 (fd2 -> DOISP type .)
    THIS            reduce using rule 6 (fd2 -> DOISP type .)
    TRUE            reduce using rule 6 (fd2 -> DOISP type .)
    VAL             reduce using rule 6 (fd2 -> DOISP type .)
    VAR             reduce using rule 6 (fd2 -> DOISP type .)
    DOUBLE          reduce using rule 6 (fd2 -> DOISP type .)
    WHEN            reduce using rule 6 (fd2 -> DOISP type .)
    LONG            reduce using rule 6 (fd2 -> DOISP type .)
    LPAREN          reduce using rule 6 (fd2 -> DOISP type .)
    LITERAL_STRING  reduce using rule 6 (fd2 -> DOISP type .)
    COLONCOLON      reduce using rule 6 (fd2 -> DOISP type .)
    LCCT            reduce using rule 6 (fd2 -> DOISP type .)
    IF              reduce using rule 6 (fd2 -> DOISP type .)
    RETURN          reduce using rule 6 (fd2 -> DOISP type .)
    RETURN_AT       reduce using rule 6 (fd2 -> DOISP type .)
    CONTINUE        reduce using rule 6 (fd2 -> DOISP type .)
    CONTINUE_AT     reduce using rule 6 (fd2 -> DOISP type .)
    BREAK           reduce using rule 6 (fd2 -> DOISP type .)
    BREAK_AT        reduce using rule 6 (fd2 -> DOISP type .)
    RCHAVE          reduce using rule 6 (fd2 -> DOISP type .)
    INCREMENTO      reduce using rule 6 (fd2 -> DOISP type .)
    DECREMENTO      reduce using rule 6 (fd2 -> DOISP type .)
    MINUS           reduce using rule 6 (fd2 -> DOISP type .)
    PLUS            reduce using rule 6 (fd2 -> DOISP type .)
    NOT             reduce using rule 6 (fd2 -> DOISP type .)
    SUSPEND         reduce using rule 6 (fd2 -> DOISP type .)
    PV              reduce using rule 6 (fd2 -> DOISP type .)
    ELSE            reduce using rule 6 (fd2 -> DOISP type .)
    MENOR           reduce using rule 6 (fd2 -> DOISP type .)
    PONTO           reduce using rule 6 (fd2 -> DOISP type .)
    AS              reduce using rule 6 (fd2 -> DOISP type .)
    MAISIGUAL       reduce using rule 6 (fd2 -> DOISP type .)
    MENOSIGUAL      reduce using rule 6 (fd2 -> DOISP type .)
    MULTIGUAL       reduce using rule 6 (fd2 -> DOISP type .)
    DIVIGUAL        reduce using rule 6 (fd2 -> DOISP type .)
    MODIGUAL        reduce using rule 6 (fd2 -> DOISP type .)
    MULT            reduce using rule 6 (fd2 -> DOISP type .)
    DIVIDE          reduce using rule 6 (fd2 -> DOISP type .)
    MOD             reduce using rule 6 (fd2 -> DOISP type .)
    PONTOPONTO      reduce using rule 6 (fd2 -> DOISP type .)
    ELVIS           reduce using rule 6 (fd2 -> DOISP type .)
    IN              reduce using rule 6 (fd2 -> DOISP type .)
    NOT_IN          reduce using rule 6 (fd2 -> DOISP type .)
    IS              reduce using rule 6 (fd2 -> DOISP type .)
    NOT_IS          reduce using rule 6 (fd2 -> DOISP type .)
    MAIOR           reduce using rule 6 (fd2 -> DOISP type .)
    MENORIGUAL      reduce using rule 6 (fd2 -> DOISP type .)
    MAIORIGUAL      reduce using rule 6 (fd2 -> DOISP type .)
    DIFERENTE       reduce using rule 6 (fd2 -> DOISP type .)
    IDENTIDADE      reduce using rule 6 (fd2 -> DOISP type .)
    IGUALDADE       reduce using rule 6 (fd2 -> DOISP type .)
    SEMIDENTIDADE   reduce using rule 6 (fd2 -> DOISP type .)
    AND             reduce using rule 6 (fd2 -> DOISP type .)
    OR              reduce using rule 6 (fd2 -> DOISP type .)
    COMMA           reduce using rule 6 (fd2 -> DOISP type .)
    RPAREN          reduce using rule 6 (fd2 -> DOISP type .)
    RCCT            reduce using rule 6 (fd2 -> DOISP type .)


state 51

    (26) type -> typeModifiers . optype
    (28) optype -> . parenthesizedType
    (29) optype -> . functionType
    (30) optype -> . userType
    (56) parenthesizedType -> . LPAREN type RPAREN
    (44) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (45) functionType -> . functionTypeParameters SETA type
    (37) userType -> . simpleUserType
    (57) receiverType -> . typeModifier rt
    (46) functionTypeParameters -> . functionTypeParameters_p
    (47) functionTypeParameters -> . functionTypeParameters_t
    (38) simpleUserType -> . simpleIdentifier typeArguments
    (39) simpleUserType -> . simpleIdentifier
    (33) typeModifier -> . SUSPEND
    (48) functionTypeParameters_p -> . LPAREN parameter ftp RPAREN
    (49) functionTypeParameters_p -> . LPAREN parameter RPAREN
    (50) functionTypeParameters_t -> . LPAREN type RPAREN
    (51) functionTypeParameters_t -> . LPAREN type ftp RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    LPAREN          shift and go to state 58
    SUSPEND         shift and go to state 57
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    optype                         shift and go to state 134
    parenthesizedType              shift and go to state 54
    functionType                   shift and go to state 55
    userType                       shift and go to state 56
    receiverType                   shift and go to state 59
    functionTypeParameters         shift and go to state 60
    simpleUserType                 shift and go to state 61
    typeModifier                   shift and go to state 122
    functionTypeParameters_p       shift and go to state 62
    functionTypeParameters_t       shift and go to state 63
    simpleIdentifier               shift and go to state 64

state 52

    (27) type -> optype .

    LCHAVE          reduce using rule 27 (type -> optype .)
    FUN             reduce using rule 27 (type -> optype .)
    $end            reduce using rule 27 (type -> optype .)
    FOR             reduce using rule 27 (type -> optype .)
    WHILE           reduce using rule 27 (type -> optype .)
    DO              reduce using rule 27 (type -> optype .)
    ID              reduce using rule 27 (type -> optype .)
    CROSSINLINE     reduce using rule 27 (type -> optype .)
    IMPORT          reduce using rule 27 (type -> optype .)
    INIT            reduce using rule 27 (type -> optype .)
    NOINLINE        reduce using rule 27 (type -> optype .)
    OUT             reduce using rule 27 (type -> optype .)
    VARARG          reduce using rule 27 (type -> optype .)
    WHERE           reduce using rule 27 (type -> optype .)
    INT             reduce using rule 27 (type -> optype .)
    FLOAT           reduce using rule 27 (type -> optype .)
    BOOLEAN         reduce using rule 27 (type -> optype .)
    STRING          reduce using rule 27 (type -> optype .)
    ARRAY           reduce using rule 27 (type -> optype .)
    CHAR            reduce using rule 27 (type -> optype .)
    OBJECT          reduce using rule 27 (type -> optype .)
    CONST           reduce using rule 27 (type -> optype .)
    CONSTRUCTOR     reduce using rule 27 (type -> optype .)
    EOF             reduce using rule 27 (type -> optype .)
    FALSE           reduce using rule 27 (type -> optype .)
    FUNCTION        reduce using rule 27 (type -> optype .)
    NULL            reduce using rule 27 (type -> optype .)
    NULLABLE        reduce using rule 27 (type -> optype .)
    NUMBER          reduce using rule 27 (type -> optype .)
    OPERATOR        reduce using rule 27 (type -> optype .)
    SMARTCAST       reduce using rule 27 (type -> optype .)
    THIS            reduce using rule 27 (type -> optype .)
    TRUE            reduce using rule 27 (type -> optype .)
    VAL             reduce using rule 27 (type -> optype .)
    VAR             reduce using rule 27 (type -> optype .)
    DOUBLE          reduce using rule 27 (type -> optype .)
    WHEN            reduce using rule 27 (type -> optype .)
    LONG            reduce using rule 27 (type -> optype .)
    LPAREN          reduce using rule 27 (type -> optype .)
    LITERAL_STRING  reduce using rule 27 (type -> optype .)
    COLONCOLON      reduce using rule 27 (type -> optype .)
    LCCT            reduce using rule 27 (type -> optype .)
    IF              reduce using rule 27 (type -> optype .)
    RETURN          reduce using rule 27 (type -> optype .)
    RETURN_AT       reduce using rule 27 (type -> optype .)
    CONTINUE        reduce using rule 27 (type -> optype .)
    CONTINUE_AT     reduce using rule 27 (type -> optype .)
    BREAK           reduce using rule 27 (type -> optype .)
    BREAK_AT        reduce using rule 27 (type -> optype .)
    RCHAVE          reduce using rule 27 (type -> optype .)
    INCREMENTO      reduce using rule 27 (type -> optype .)
    DECREMENTO      reduce using rule 27 (type -> optype .)
    MINUS           reduce using rule 27 (type -> optype .)
    PLUS            reduce using rule 27 (type -> optype .)
    NOT             reduce using rule 27 (type -> optype .)
    SUSPEND         reduce using rule 27 (type -> optype .)
    PV              reduce using rule 27 (type -> optype .)
    ELSE            reduce using rule 27 (type -> optype .)
    MENOR           reduce using rule 27 (type -> optype .)
    PONTO           reduce using rule 27 (type -> optype .)
    AS              reduce using rule 27 (type -> optype .)
    MAISIGUAL       reduce using rule 27 (type -> optype .)
    MENOSIGUAL      reduce using rule 27 (type -> optype .)
    MULTIGUAL       reduce using rule 27 (type -> optype .)
    DIVIGUAL        reduce using rule 27 (type -> optype .)
    MODIGUAL        reduce using rule 27 (type -> optype .)
    MULT            reduce using rule 27 (type -> optype .)
    DIVIDE          reduce using rule 27 (type -> optype .)
    MOD             reduce using rule 27 (type -> optype .)
    PONTOPONTO      reduce using rule 27 (type -> optype .)
    ELVIS           reduce using rule 27 (type -> optype .)
    IN              reduce using rule 27 (type -> optype .)
    NOT_IN          reduce using rule 27 (type -> optype .)
    IS              reduce using rule 27 (type -> optype .)
    NOT_IS          reduce using rule 27 (type -> optype .)
    MAIOR           reduce using rule 27 (type -> optype .)
    MENORIGUAL      reduce using rule 27 (type -> optype .)
    MAIORIGUAL      reduce using rule 27 (type -> optype .)
    DIFERENTE       reduce using rule 27 (type -> optype .)
    IDENTIDADE      reduce using rule 27 (type -> optype .)
    IGUALDADE       reduce using rule 27 (type -> optype .)
    SEMIDENTIDADE   reduce using rule 27 (type -> optype .)
    AND             reduce using rule 27 (type -> optype .)
    OR              reduce using rule 27 (type -> optype .)
    COMMA           reduce using rule 27 (type -> optype .)
    RPAREN          reduce using rule 27 (type -> optype .)
    RCCT            reduce using rule 27 (type -> optype .)
    ATRIBUICAO      reduce using rule 27 (type -> optype .)
    SETA            reduce using rule 27 (type -> optype .)


state 53

    (31) typeModifiers -> typeModifier .
    (32) typeModifiers -> typeModifier . typeModifiers
    (57) receiverType -> typeModifier . rt
    (31) typeModifiers -> . typeModifier
    (32) typeModifiers -> . typeModifier typeModifiers
    (58) rt -> . parenthesizedType
    (33) typeModifier -> . SUSPEND
    (56) parenthesizedType -> . LPAREN type RPAREN

  ! shift/reduce conflict for SUSPEND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              reduce using rule 31 (typeModifiers -> typeModifier .)
    CROSSINLINE     reduce using rule 31 (typeModifiers -> typeModifier .)
    IMPORT          reduce using rule 31 (typeModifiers -> typeModifier .)
    INIT            reduce using rule 31 (typeModifiers -> typeModifier .)
    NOINLINE        reduce using rule 31 (typeModifiers -> typeModifier .)
    OUT             reduce using rule 31 (typeModifiers -> typeModifier .)
    VARARG          reduce using rule 31 (typeModifiers -> typeModifier .)
    WHERE           reduce using rule 31 (typeModifiers -> typeModifier .)
    INT             reduce using rule 31 (typeModifiers -> typeModifier .)
    FLOAT           reduce using rule 31 (typeModifiers -> typeModifier .)
    BOOLEAN         reduce using rule 31 (typeModifiers -> typeModifier .)
    STRING          reduce using rule 31 (typeModifiers -> typeModifier .)
    ARRAY           reduce using rule 31 (typeModifiers -> typeModifier .)
    CHAR            reduce using rule 31 (typeModifiers -> typeModifier .)
    OBJECT          reduce using rule 31 (typeModifiers -> typeModifier .)
    CONST           reduce using rule 31 (typeModifiers -> typeModifier .)
    CONSTRUCTOR     reduce using rule 31 (typeModifiers -> typeModifier .)
    EOF             reduce using rule 31 (typeModifiers -> typeModifier .)
    FALSE           reduce using rule 31 (typeModifiers -> typeModifier .)
    FUNCTION        reduce using rule 31 (typeModifiers -> typeModifier .)
    NULL            reduce using rule 31 (typeModifiers -> typeModifier .)
    NULLABLE        reduce using rule 31 (typeModifiers -> typeModifier .)
    NUMBER          reduce using rule 31 (typeModifiers -> typeModifier .)
    OPERATOR        reduce using rule 31 (typeModifiers -> typeModifier .)
    SMARTCAST       reduce using rule 31 (typeModifiers -> typeModifier .)
    THIS            reduce using rule 31 (typeModifiers -> typeModifier .)
    TRUE            reduce using rule 31 (typeModifiers -> typeModifier .)
    VAL             reduce using rule 31 (typeModifiers -> typeModifier .)
    VAR             reduce using rule 31 (typeModifiers -> typeModifier .)
    DOUBLE          reduce using rule 31 (typeModifiers -> typeModifier .)
    WHEN            reduce using rule 31 (typeModifiers -> typeModifier .)
    LONG            reduce using rule 31 (typeModifiers -> typeModifier .)
    SUSPEND         shift and go to state 57
    LPAREN          shift and go to state 139

  ! LPAREN          [ reduce using rule 31 (typeModifiers -> typeModifier .) ]
  ! SUSPEND         [ reduce using rule 31 (typeModifiers -> typeModifier .) ]

    typeModifier                   shift and go to state 135
    typeModifiers                  shift and go to state 136
    rt                             shift and go to state 137
    parenthesizedType              shift and go to state 138

state 54

    (28) optype -> parenthesizedType .

    LCHAVE          reduce using rule 28 (optype -> parenthesizedType .)
    FUN             reduce using rule 28 (optype -> parenthesizedType .)
    $end            reduce using rule 28 (optype -> parenthesizedType .)
    FOR             reduce using rule 28 (optype -> parenthesizedType .)
    WHILE           reduce using rule 28 (optype -> parenthesizedType .)
    DO              reduce using rule 28 (optype -> parenthesizedType .)
    ID              reduce using rule 28 (optype -> parenthesizedType .)
    CROSSINLINE     reduce using rule 28 (optype -> parenthesizedType .)
    IMPORT          reduce using rule 28 (optype -> parenthesizedType .)
    INIT            reduce using rule 28 (optype -> parenthesizedType .)
    NOINLINE        reduce using rule 28 (optype -> parenthesizedType .)
    OUT             reduce using rule 28 (optype -> parenthesizedType .)
    VARARG          reduce using rule 28 (optype -> parenthesizedType .)
    WHERE           reduce using rule 28 (optype -> parenthesizedType .)
    INT             reduce using rule 28 (optype -> parenthesizedType .)
    FLOAT           reduce using rule 28 (optype -> parenthesizedType .)
    BOOLEAN         reduce using rule 28 (optype -> parenthesizedType .)
    STRING          reduce using rule 28 (optype -> parenthesizedType .)
    ARRAY           reduce using rule 28 (optype -> parenthesizedType .)
    CHAR            reduce using rule 28 (optype -> parenthesizedType .)
    OBJECT          reduce using rule 28 (optype -> parenthesizedType .)
    CONST           reduce using rule 28 (optype -> parenthesizedType .)
    CONSTRUCTOR     reduce using rule 28 (optype -> parenthesizedType .)
    EOF             reduce using rule 28 (optype -> parenthesizedType .)
    FALSE           reduce using rule 28 (optype -> parenthesizedType .)
    FUNCTION        reduce using rule 28 (optype -> parenthesizedType .)
    NULL            reduce using rule 28 (optype -> parenthesizedType .)
    NULLABLE        reduce using rule 28 (optype -> parenthesizedType .)
    NUMBER          reduce using rule 28 (optype -> parenthesizedType .)
    OPERATOR        reduce using rule 28 (optype -> parenthesizedType .)
    SMARTCAST       reduce using rule 28 (optype -> parenthesizedType .)
    THIS            reduce using rule 28 (optype -> parenthesizedType .)
    TRUE            reduce using rule 28 (optype -> parenthesizedType .)
    VAL             reduce using rule 28 (optype -> parenthesizedType .)
    VAR             reduce using rule 28 (optype -> parenthesizedType .)
    DOUBLE          reduce using rule 28 (optype -> parenthesizedType .)
    WHEN            reduce using rule 28 (optype -> parenthesizedType .)
    LONG            reduce using rule 28 (optype -> parenthesizedType .)
    LPAREN          reduce using rule 28 (optype -> parenthesizedType .)
    LITERAL_STRING  reduce using rule 28 (optype -> parenthesizedType .)
    COLONCOLON      reduce using rule 28 (optype -> parenthesizedType .)
    LCCT            reduce using rule 28 (optype -> parenthesizedType .)
    IF              reduce using rule 28 (optype -> parenthesizedType .)
    RETURN          reduce using rule 28 (optype -> parenthesizedType .)
    RETURN_AT       reduce using rule 28 (optype -> parenthesizedType .)
    CONTINUE        reduce using rule 28 (optype -> parenthesizedType .)
    CONTINUE_AT     reduce using rule 28 (optype -> parenthesizedType .)
    BREAK           reduce using rule 28 (optype -> parenthesizedType .)
    BREAK_AT        reduce using rule 28 (optype -> parenthesizedType .)
    RCHAVE          reduce using rule 28 (optype -> parenthesizedType .)
    INCREMENTO      reduce using rule 28 (optype -> parenthesizedType .)
    DECREMENTO      reduce using rule 28 (optype -> parenthesizedType .)
    MINUS           reduce using rule 28 (optype -> parenthesizedType .)
    PLUS            reduce using rule 28 (optype -> parenthesizedType .)
    NOT             reduce using rule 28 (optype -> parenthesizedType .)
    SUSPEND         reduce using rule 28 (optype -> parenthesizedType .)
    PV              reduce using rule 28 (optype -> parenthesizedType .)
    ELSE            reduce using rule 28 (optype -> parenthesizedType .)
    MENOR           reduce using rule 28 (optype -> parenthesizedType .)
    PONTO           reduce using rule 28 (optype -> parenthesizedType .)
    AS              reduce using rule 28 (optype -> parenthesizedType .)
    MAISIGUAL       reduce using rule 28 (optype -> parenthesizedType .)
    MENOSIGUAL      reduce using rule 28 (optype -> parenthesizedType .)
    MULTIGUAL       reduce using rule 28 (optype -> parenthesizedType .)
    DIVIGUAL        reduce using rule 28 (optype -> parenthesizedType .)
    MODIGUAL        reduce using rule 28 (optype -> parenthesizedType .)
    MULT            reduce using rule 28 (optype -> parenthesizedType .)
    DIVIDE          reduce using rule 28 (optype -> parenthesizedType .)
    MOD             reduce using rule 28 (optype -> parenthesizedType .)
    PONTOPONTO      reduce using rule 28 (optype -> parenthesizedType .)
    ELVIS           reduce using rule 28 (optype -> parenthesizedType .)
    IN              reduce using rule 28 (optype -> parenthesizedType .)
    NOT_IN          reduce using rule 28 (optype -> parenthesizedType .)
    IS              reduce using rule 28 (optype -> parenthesizedType .)
    NOT_IS          reduce using rule 28 (optype -> parenthesizedType .)
    MAIOR           reduce using rule 28 (optype -> parenthesizedType .)
    MENORIGUAL      reduce using rule 28 (optype -> parenthesizedType .)
    MAIORIGUAL      reduce using rule 28 (optype -> parenthesizedType .)
    DIFERENTE       reduce using rule 28 (optype -> parenthesizedType .)
    IDENTIDADE      reduce using rule 28 (optype -> parenthesizedType .)
    IGUALDADE       reduce using rule 28 (optype -> parenthesizedType .)
    SEMIDENTIDADE   reduce using rule 28 (optype -> parenthesizedType .)
    AND             reduce using rule 28 (optype -> parenthesizedType .)
    OR              reduce using rule 28 (optype -> parenthesizedType .)
    COMMA           reduce using rule 28 (optype -> parenthesizedType .)
    RPAREN          reduce using rule 28 (optype -> parenthesizedType .)
    RCCT            reduce using rule 28 (optype -> parenthesizedType .)
    ATRIBUICAO      reduce using rule 28 (optype -> parenthesizedType .)
    SETA            reduce using rule 28 (optype -> parenthesizedType .)


state 55

    (29) optype -> functionType .

    LCHAVE          reduce using rule 29 (optype -> functionType .)
    FUN             reduce using rule 29 (optype -> functionType .)
    $end            reduce using rule 29 (optype -> functionType .)
    FOR             reduce using rule 29 (optype -> functionType .)
    WHILE           reduce using rule 29 (optype -> functionType .)
    DO              reduce using rule 29 (optype -> functionType .)
    ID              reduce using rule 29 (optype -> functionType .)
    CROSSINLINE     reduce using rule 29 (optype -> functionType .)
    IMPORT          reduce using rule 29 (optype -> functionType .)
    INIT            reduce using rule 29 (optype -> functionType .)
    NOINLINE        reduce using rule 29 (optype -> functionType .)
    OUT             reduce using rule 29 (optype -> functionType .)
    VARARG          reduce using rule 29 (optype -> functionType .)
    WHERE           reduce using rule 29 (optype -> functionType .)
    INT             reduce using rule 29 (optype -> functionType .)
    FLOAT           reduce using rule 29 (optype -> functionType .)
    BOOLEAN         reduce using rule 29 (optype -> functionType .)
    STRING          reduce using rule 29 (optype -> functionType .)
    ARRAY           reduce using rule 29 (optype -> functionType .)
    CHAR            reduce using rule 29 (optype -> functionType .)
    OBJECT          reduce using rule 29 (optype -> functionType .)
    CONST           reduce using rule 29 (optype -> functionType .)
    CONSTRUCTOR     reduce using rule 29 (optype -> functionType .)
    EOF             reduce using rule 29 (optype -> functionType .)
    FALSE           reduce using rule 29 (optype -> functionType .)
    FUNCTION        reduce using rule 29 (optype -> functionType .)
    NULL            reduce using rule 29 (optype -> functionType .)
    NULLABLE        reduce using rule 29 (optype -> functionType .)
    NUMBER          reduce using rule 29 (optype -> functionType .)
    OPERATOR        reduce using rule 29 (optype -> functionType .)
    SMARTCAST       reduce using rule 29 (optype -> functionType .)
    THIS            reduce using rule 29 (optype -> functionType .)
    TRUE            reduce using rule 29 (optype -> functionType .)
    VAL             reduce using rule 29 (optype -> functionType .)
    VAR             reduce using rule 29 (optype -> functionType .)
    DOUBLE          reduce using rule 29 (optype -> functionType .)
    WHEN            reduce using rule 29 (optype -> functionType .)
    LONG            reduce using rule 29 (optype -> functionType .)
    LPAREN          reduce using rule 29 (optype -> functionType .)
    LITERAL_STRING  reduce using rule 29 (optype -> functionType .)
    COLONCOLON      reduce using rule 29 (optype -> functionType .)
    LCCT            reduce using rule 29 (optype -> functionType .)
    IF              reduce using rule 29 (optype -> functionType .)
    RETURN          reduce using rule 29 (optype -> functionType .)
    RETURN_AT       reduce using rule 29 (optype -> functionType .)
    CONTINUE        reduce using rule 29 (optype -> functionType .)
    CONTINUE_AT     reduce using rule 29 (optype -> functionType .)
    BREAK           reduce using rule 29 (optype -> functionType .)
    BREAK_AT        reduce using rule 29 (optype -> functionType .)
    RCHAVE          reduce using rule 29 (optype -> functionType .)
    INCREMENTO      reduce using rule 29 (optype -> functionType .)
    DECREMENTO      reduce using rule 29 (optype -> functionType .)
    MINUS           reduce using rule 29 (optype -> functionType .)
    PLUS            reduce using rule 29 (optype -> functionType .)
    NOT             reduce using rule 29 (optype -> functionType .)
    SUSPEND         reduce using rule 29 (optype -> functionType .)
    PV              reduce using rule 29 (optype -> functionType .)
    ELSE            reduce using rule 29 (optype -> functionType .)
    MENOR           reduce using rule 29 (optype -> functionType .)
    PONTO           reduce using rule 29 (optype -> functionType .)
    AS              reduce using rule 29 (optype -> functionType .)
    MAISIGUAL       reduce using rule 29 (optype -> functionType .)
    MENOSIGUAL      reduce using rule 29 (optype -> functionType .)
    MULTIGUAL       reduce using rule 29 (optype -> functionType .)
    DIVIGUAL        reduce using rule 29 (optype -> functionType .)
    MODIGUAL        reduce using rule 29 (optype -> functionType .)
    MULT            reduce using rule 29 (optype -> functionType .)
    DIVIDE          reduce using rule 29 (optype -> functionType .)
    MOD             reduce using rule 29 (optype -> functionType .)
    PONTOPONTO      reduce using rule 29 (optype -> functionType .)
    ELVIS           reduce using rule 29 (optype -> functionType .)
    IN              reduce using rule 29 (optype -> functionType .)
    NOT_IN          reduce using rule 29 (optype -> functionType .)
    IS              reduce using rule 29 (optype -> functionType .)
    NOT_IS          reduce using rule 29 (optype -> functionType .)
    MAIOR           reduce using rule 29 (optype -> functionType .)
    MENORIGUAL      reduce using rule 29 (optype -> functionType .)
    MAIORIGUAL      reduce using rule 29 (optype -> functionType .)
    DIFERENTE       reduce using rule 29 (optype -> functionType .)
    IDENTIDADE      reduce using rule 29 (optype -> functionType .)
    IGUALDADE       reduce using rule 29 (optype -> functionType .)
    SEMIDENTIDADE   reduce using rule 29 (optype -> functionType .)
    AND             reduce using rule 29 (optype -> functionType .)
    OR              reduce using rule 29 (optype -> functionType .)
    COMMA           reduce using rule 29 (optype -> functionType .)
    RPAREN          reduce using rule 29 (optype -> functionType .)
    RCCT            reduce using rule 29 (optype -> functionType .)
    ATRIBUICAO      reduce using rule 29 (optype -> functionType .)
    SETA            reduce using rule 29 (optype -> functionType .)


state 56

    (30) optype -> userType .

    LCHAVE          reduce using rule 30 (optype -> userType .)
    FUN             reduce using rule 30 (optype -> userType .)
    $end            reduce using rule 30 (optype -> userType .)
    FOR             reduce using rule 30 (optype -> userType .)
    WHILE           reduce using rule 30 (optype -> userType .)
    DO              reduce using rule 30 (optype -> userType .)
    ID              reduce using rule 30 (optype -> userType .)
    CROSSINLINE     reduce using rule 30 (optype -> userType .)
    IMPORT          reduce using rule 30 (optype -> userType .)
    INIT            reduce using rule 30 (optype -> userType .)
    NOINLINE        reduce using rule 30 (optype -> userType .)
    OUT             reduce using rule 30 (optype -> userType .)
    VARARG          reduce using rule 30 (optype -> userType .)
    WHERE           reduce using rule 30 (optype -> userType .)
    INT             reduce using rule 30 (optype -> userType .)
    FLOAT           reduce using rule 30 (optype -> userType .)
    BOOLEAN         reduce using rule 30 (optype -> userType .)
    STRING          reduce using rule 30 (optype -> userType .)
    ARRAY           reduce using rule 30 (optype -> userType .)
    CHAR            reduce using rule 30 (optype -> userType .)
    OBJECT          reduce using rule 30 (optype -> userType .)
    CONST           reduce using rule 30 (optype -> userType .)
    CONSTRUCTOR     reduce using rule 30 (optype -> userType .)
    EOF             reduce using rule 30 (optype -> userType .)
    FALSE           reduce using rule 30 (optype -> userType .)
    FUNCTION        reduce using rule 30 (optype -> userType .)
    NULL            reduce using rule 30 (optype -> userType .)
    NULLABLE        reduce using rule 30 (optype -> userType .)
    NUMBER          reduce using rule 30 (optype -> userType .)
    OPERATOR        reduce using rule 30 (optype -> userType .)
    SMARTCAST       reduce using rule 30 (optype -> userType .)
    THIS            reduce using rule 30 (optype -> userType .)
    TRUE            reduce using rule 30 (optype -> userType .)
    VAL             reduce using rule 30 (optype -> userType .)
    VAR             reduce using rule 30 (optype -> userType .)
    DOUBLE          reduce using rule 30 (optype -> userType .)
    WHEN            reduce using rule 30 (optype -> userType .)
    LONG            reduce using rule 30 (optype -> userType .)
    LPAREN          reduce using rule 30 (optype -> userType .)
    LITERAL_STRING  reduce using rule 30 (optype -> userType .)
    COLONCOLON      reduce using rule 30 (optype -> userType .)
    LCCT            reduce using rule 30 (optype -> userType .)
    IF              reduce using rule 30 (optype -> userType .)
    RETURN          reduce using rule 30 (optype -> userType .)
    RETURN_AT       reduce using rule 30 (optype -> userType .)
    CONTINUE        reduce using rule 30 (optype -> userType .)
    CONTINUE_AT     reduce using rule 30 (optype -> userType .)
    BREAK           reduce using rule 30 (optype -> userType .)
    BREAK_AT        reduce using rule 30 (optype -> userType .)
    RCHAVE          reduce using rule 30 (optype -> userType .)
    INCREMENTO      reduce using rule 30 (optype -> userType .)
    DECREMENTO      reduce using rule 30 (optype -> userType .)
    MINUS           reduce using rule 30 (optype -> userType .)
    PLUS            reduce using rule 30 (optype -> userType .)
    NOT             reduce using rule 30 (optype -> userType .)
    SUSPEND         reduce using rule 30 (optype -> userType .)
    PV              reduce using rule 30 (optype -> userType .)
    ELSE            reduce using rule 30 (optype -> userType .)
    MENOR           reduce using rule 30 (optype -> userType .)
    PONTO           reduce using rule 30 (optype -> userType .)
    AS              reduce using rule 30 (optype -> userType .)
    MAISIGUAL       reduce using rule 30 (optype -> userType .)
    MENOSIGUAL      reduce using rule 30 (optype -> userType .)
    MULTIGUAL       reduce using rule 30 (optype -> userType .)
    DIVIGUAL        reduce using rule 30 (optype -> userType .)
    MODIGUAL        reduce using rule 30 (optype -> userType .)
    MULT            reduce using rule 30 (optype -> userType .)
    DIVIDE          reduce using rule 30 (optype -> userType .)
    MOD             reduce using rule 30 (optype -> userType .)
    PONTOPONTO      reduce using rule 30 (optype -> userType .)
    ELVIS           reduce using rule 30 (optype -> userType .)
    IN              reduce using rule 30 (optype -> userType .)
    NOT_IN          reduce using rule 30 (optype -> userType .)
    IS              reduce using rule 30 (optype -> userType .)
    NOT_IS          reduce using rule 30 (optype -> userType .)
    MAIOR           reduce using rule 30 (optype -> userType .)
    MENORIGUAL      reduce using rule 30 (optype -> userType .)
    MAIORIGUAL      reduce using rule 30 (optype -> userType .)
    DIFERENTE       reduce using rule 30 (optype -> userType .)
    IDENTIDADE      reduce using rule 30 (optype -> userType .)
    IGUALDADE       reduce using rule 30 (optype -> userType .)
    SEMIDENTIDADE   reduce using rule 30 (optype -> userType .)
    AND             reduce using rule 30 (optype -> userType .)
    OR              reduce using rule 30 (optype -> userType .)
    COMMA           reduce using rule 30 (optype -> userType .)
    RPAREN          reduce using rule 30 (optype -> userType .)
    RCCT            reduce using rule 30 (optype -> userType .)
    ATRIBUICAO      reduce using rule 30 (optype -> userType .)
    SETA            reduce using rule 30 (optype -> userType .)


state 57

    (33) typeModifier -> SUSPEND .

    SUSPEND         reduce using rule 33 (typeModifier -> SUSPEND .)
    LPAREN          reduce using rule 33 (typeModifier -> SUSPEND .)
    ID              reduce using rule 33 (typeModifier -> SUSPEND .)
    CROSSINLINE     reduce using rule 33 (typeModifier -> SUSPEND .)
    IMPORT          reduce using rule 33 (typeModifier -> SUSPEND .)
    INIT            reduce using rule 33 (typeModifier -> SUSPEND .)
    NOINLINE        reduce using rule 33 (typeModifier -> SUSPEND .)
    OUT             reduce using rule 33 (typeModifier -> SUSPEND .)
    VARARG          reduce using rule 33 (typeModifier -> SUSPEND .)
    WHERE           reduce using rule 33 (typeModifier -> SUSPEND .)
    INT             reduce using rule 33 (typeModifier -> SUSPEND .)
    FLOAT           reduce using rule 33 (typeModifier -> SUSPEND .)
    BOOLEAN         reduce using rule 33 (typeModifier -> SUSPEND .)
    STRING          reduce using rule 33 (typeModifier -> SUSPEND .)
    ARRAY           reduce using rule 33 (typeModifier -> SUSPEND .)
    CHAR            reduce using rule 33 (typeModifier -> SUSPEND .)
    OBJECT          reduce using rule 33 (typeModifier -> SUSPEND .)
    CONST           reduce using rule 33 (typeModifier -> SUSPEND .)
    CONSTRUCTOR     reduce using rule 33 (typeModifier -> SUSPEND .)
    EOF             reduce using rule 33 (typeModifier -> SUSPEND .)
    FALSE           reduce using rule 33 (typeModifier -> SUSPEND .)
    FUNCTION        reduce using rule 33 (typeModifier -> SUSPEND .)
    NULL            reduce using rule 33 (typeModifier -> SUSPEND .)
    NULLABLE        reduce using rule 33 (typeModifier -> SUSPEND .)
    NUMBER          reduce using rule 33 (typeModifier -> SUSPEND .)
    OPERATOR        reduce using rule 33 (typeModifier -> SUSPEND .)
    SMARTCAST       reduce using rule 33 (typeModifier -> SUSPEND .)
    THIS            reduce using rule 33 (typeModifier -> SUSPEND .)
    TRUE            reduce using rule 33 (typeModifier -> SUSPEND .)
    VAL             reduce using rule 33 (typeModifier -> SUSPEND .)
    VAR             reduce using rule 33 (typeModifier -> SUSPEND .)
    DOUBLE          reduce using rule 33 (typeModifier -> SUSPEND .)
    WHEN            reduce using rule 33 (typeModifier -> SUSPEND .)
    LONG            reduce using rule 33 (typeModifier -> SUSPEND .)


state 58

    (56) parenthesizedType -> LPAREN . type RPAREN
    (48) functionTypeParameters_p -> LPAREN . parameter ftp RPAREN
    (49) functionTypeParameters_p -> LPAREN . parameter RPAREN
    (50) functionTypeParameters_t -> LPAREN . type RPAREN
    (51) functionTypeParameters_t -> LPAREN . type ftp RPAREN
    (26) type -> . typeModifiers optype
    (27) type -> . optype
    (25) parameter -> . simpleIdentifier DOISP type
    (31) typeModifiers -> . typeModifier
    (32) typeModifiers -> . typeModifier typeModifiers
    (28) optype -> . parenthesizedType
    (29) optype -> . functionType
    (30) optype -> . userType
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (33) typeModifier -> . SUSPEND
    (56) parenthesizedType -> . LPAREN type RPAREN
    (44) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (45) functionType -> . functionTypeParameters SETA type
    (37) userType -> . simpleUserType
    (57) receiverType -> . typeModifier rt
    (46) functionTypeParameters -> . functionTypeParameters_p
    (47) functionTypeParameters -> . functionTypeParameters_t
    (38) simpleUserType -> . simpleIdentifier typeArguments
    (39) simpleUserType -> . simpleIdentifier
    (48) functionTypeParameters_p -> . LPAREN parameter ftp RPAREN
    (49) functionTypeParameters_p -> . LPAREN parameter RPAREN
    (50) functionTypeParameters_t -> . LPAREN type RPAREN
    (51) functionTypeParameters_t -> . LPAREN type ftp RPAREN

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    SUSPEND         shift and go to state 57
    LPAREN          shift and go to state 58

    type                           shift and go to state 140
    parameter                      shift and go to state 141
    typeModifiers                  shift and go to state 51
    optype                         shift and go to state 52
    simpleIdentifier               shift and go to state 142
    typeModifier                   shift and go to state 53
    parenthesizedType              shift and go to state 54
    functionType                   shift and go to state 55
    userType                       shift and go to state 56
    receiverType                   shift and go to state 59
    functionTypeParameters         shift and go to state 60
    simpleUserType                 shift and go to state 61
    functionTypeParameters_p       shift and go to state 62
    functionTypeParameters_t       shift and go to state 63

state 59

    (44) functionType -> receiverType . PONTO functionTypeParameters SETA type

    PONTO           shift and go to state 143


state 60

    (45) functionType -> functionTypeParameters . SETA type

    SETA            shift and go to state 144


state 61

    (37) userType -> simpleUserType .

    LCHAVE          reduce using rule 37 (userType -> simpleUserType .)
    FUN             reduce using rule 37 (userType -> simpleUserType .)
    $end            reduce using rule 37 (userType -> simpleUserType .)
    FOR             reduce using rule 37 (userType -> simpleUserType .)
    WHILE           reduce using rule 37 (userType -> simpleUserType .)
    DO              reduce using rule 37 (userType -> simpleUserType .)
    ID              reduce using rule 37 (userType -> simpleUserType .)
    CROSSINLINE     reduce using rule 37 (userType -> simpleUserType .)
    IMPORT          reduce using rule 37 (userType -> simpleUserType .)
    INIT            reduce using rule 37 (userType -> simpleUserType .)
    NOINLINE        reduce using rule 37 (userType -> simpleUserType .)
    OUT             reduce using rule 37 (userType -> simpleUserType .)
    VARARG          reduce using rule 37 (userType -> simpleUserType .)
    WHERE           reduce using rule 37 (userType -> simpleUserType .)
    INT             reduce using rule 37 (userType -> simpleUserType .)
    FLOAT           reduce using rule 37 (userType -> simpleUserType .)
    BOOLEAN         reduce using rule 37 (userType -> simpleUserType .)
    STRING          reduce using rule 37 (userType -> simpleUserType .)
    ARRAY           reduce using rule 37 (userType -> simpleUserType .)
    CHAR            reduce using rule 37 (userType -> simpleUserType .)
    OBJECT          reduce using rule 37 (userType -> simpleUserType .)
    CONST           reduce using rule 37 (userType -> simpleUserType .)
    CONSTRUCTOR     reduce using rule 37 (userType -> simpleUserType .)
    EOF             reduce using rule 37 (userType -> simpleUserType .)
    FALSE           reduce using rule 37 (userType -> simpleUserType .)
    FUNCTION        reduce using rule 37 (userType -> simpleUserType .)
    NULL            reduce using rule 37 (userType -> simpleUserType .)
    NULLABLE        reduce using rule 37 (userType -> simpleUserType .)
    NUMBER          reduce using rule 37 (userType -> simpleUserType .)
    OPERATOR        reduce using rule 37 (userType -> simpleUserType .)
    SMARTCAST       reduce using rule 37 (userType -> simpleUserType .)
    THIS            reduce using rule 37 (userType -> simpleUserType .)
    TRUE            reduce using rule 37 (userType -> simpleUserType .)
    VAL             reduce using rule 37 (userType -> simpleUserType .)
    VAR             reduce using rule 37 (userType -> simpleUserType .)
    DOUBLE          reduce using rule 37 (userType -> simpleUserType .)
    WHEN            reduce using rule 37 (userType -> simpleUserType .)
    LONG            reduce using rule 37 (userType -> simpleUserType .)
    LPAREN          reduce using rule 37 (userType -> simpleUserType .)
    LITERAL_STRING  reduce using rule 37 (userType -> simpleUserType .)
    COLONCOLON      reduce using rule 37 (userType -> simpleUserType .)
    LCCT            reduce using rule 37 (userType -> simpleUserType .)
    IF              reduce using rule 37 (userType -> simpleUserType .)
    RETURN          reduce using rule 37 (userType -> simpleUserType .)
    RETURN_AT       reduce using rule 37 (userType -> simpleUserType .)
    CONTINUE        reduce using rule 37 (userType -> simpleUserType .)
    CONTINUE_AT     reduce using rule 37 (userType -> simpleUserType .)
    BREAK           reduce using rule 37 (userType -> simpleUserType .)
    BREAK_AT        reduce using rule 37 (userType -> simpleUserType .)
    RCHAVE          reduce using rule 37 (userType -> simpleUserType .)
    INCREMENTO      reduce using rule 37 (userType -> simpleUserType .)
    DECREMENTO      reduce using rule 37 (userType -> simpleUserType .)
    MINUS           reduce using rule 37 (userType -> simpleUserType .)
    PLUS            reduce using rule 37 (userType -> simpleUserType .)
    NOT             reduce using rule 37 (userType -> simpleUserType .)
    SUSPEND         reduce using rule 37 (userType -> simpleUserType .)
    PV              reduce using rule 37 (userType -> simpleUserType .)
    ELSE            reduce using rule 37 (userType -> simpleUserType .)
    MENOR           reduce using rule 37 (userType -> simpleUserType .)
    PONTO           reduce using rule 37 (userType -> simpleUserType .)
    AS              reduce using rule 37 (userType -> simpleUserType .)
    MAISIGUAL       reduce using rule 37 (userType -> simpleUserType .)
    MENOSIGUAL      reduce using rule 37 (userType -> simpleUserType .)
    MULTIGUAL       reduce using rule 37 (userType -> simpleUserType .)
    DIVIGUAL        reduce using rule 37 (userType -> simpleUserType .)
    MODIGUAL        reduce using rule 37 (userType -> simpleUserType .)
    MULT            reduce using rule 37 (userType -> simpleUserType .)
    DIVIDE          reduce using rule 37 (userType -> simpleUserType .)
    MOD             reduce using rule 37 (userType -> simpleUserType .)
    PONTOPONTO      reduce using rule 37 (userType -> simpleUserType .)
    ELVIS           reduce using rule 37 (userType -> simpleUserType .)
    IN              reduce using rule 37 (userType -> simpleUserType .)
    NOT_IN          reduce using rule 37 (userType -> simpleUserType .)
    IS              reduce using rule 37 (userType -> simpleUserType .)
    NOT_IS          reduce using rule 37 (userType -> simpleUserType .)
    MAIOR           reduce using rule 37 (userType -> simpleUserType .)
    MENORIGUAL      reduce using rule 37 (userType -> simpleUserType .)
    MAIORIGUAL      reduce using rule 37 (userType -> simpleUserType .)
    DIFERENTE       reduce using rule 37 (userType -> simpleUserType .)
    IDENTIDADE      reduce using rule 37 (userType -> simpleUserType .)
    IGUALDADE       reduce using rule 37 (userType -> simpleUserType .)
    SEMIDENTIDADE   reduce using rule 37 (userType -> simpleUserType .)
    AND             reduce using rule 37 (userType -> simpleUserType .)
    OR              reduce using rule 37 (userType -> simpleUserType .)
    COMMA           reduce using rule 37 (userType -> simpleUserType .)
    RPAREN          reduce using rule 37 (userType -> simpleUserType .)
    RCCT            reduce using rule 37 (userType -> simpleUserType .)
    ATRIBUICAO      reduce using rule 37 (userType -> simpleUserType .)
    SETA            reduce using rule 37 (userType -> simpleUserType .)


state 62

    (46) functionTypeParameters -> functionTypeParameters_p .

    SETA            reduce using rule 46 (functionTypeParameters -> functionTypeParameters_p .)


state 63

    (47) functionTypeParameters -> functionTypeParameters_t .

    SETA            reduce using rule 47 (functionTypeParameters -> functionTypeParameters_t .)


state 64

    (38) simpleUserType -> simpleIdentifier . typeArguments
    (39) simpleUserType -> simpleIdentifier .
    (148) typeArguments -> . MENOR ta MAIOR
    (149) typeArguments -> . MENOR MAIOR

  ! shift/reduce conflict for MENOR resolved as shift
    LCHAVE          reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    FUN             reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    $end            reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    FOR             reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    WHILE           reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    DO              reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    ID              reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    IMPORT          reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    INIT            reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    NOINLINE        reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    OUT             reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    VARARG          reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    WHERE           reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    INT             reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    FLOAT           reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    BOOLEAN         reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    STRING          reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    ARRAY           reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    CHAR            reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    OBJECT          reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    CONST           reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    CONSTRUCTOR     reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    EOF             reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    FALSE           reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    FUNCTION        reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    NULL            reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    NULLABLE        reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    NUMBER          reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    OPERATOR        reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    SMARTCAST       reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    THIS            reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    TRUE            reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    VAL             reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    VAR             reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    DOUBLE          reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    WHEN            reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    LONG            reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    LPAREN          reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    COLONCOLON      reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    LCCT            reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    IF              reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    RETURN          reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    RETURN_AT       reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    CONTINUE        reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    BREAK           reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    BREAK_AT        reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    RCHAVE          reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    INCREMENTO      reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    DECREMENTO      reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    MINUS           reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    PLUS            reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    NOT             reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    SUSPEND         reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    PV              reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    ELSE            reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    PONTO           reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    AS              reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    MAISIGUAL       reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    MENOSIGUAL      reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    MODIGUAL        reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    MULT            reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    DIVIDE          reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    MOD             reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    ELVIS           reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    IN              reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    NOT_IN          reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    IS              reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    NOT_IS          reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    MAIOR           reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    DIFERENTE       reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    IGUALDADE       reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    AND             reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    OR              reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    COMMA           reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    RPAREN          reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    RCCT            reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    ATRIBUICAO      reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    SETA            reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    MENOR           shift and go to state 146

  ! MENOR           [ reduce using rule 39 (simpleUserType -> simpleIdentifier .) ]

    typeArguments                  shift and go to state 145

state 65

    (12) functionValueParameters -> LPAREN fvps RPAREN .

    DOISP           reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    LCHAVE          reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    FUN             reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    $end            reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    FOR             reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    WHILE           reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    DO              reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    ID              reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    CROSSINLINE     reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    IMPORT          reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    INIT            reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    NOINLINE        reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    OUT             reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    VARARG          reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    WHERE           reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    INT             reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    FLOAT           reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    BOOLEAN         reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    STRING          reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    ARRAY           reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    CHAR            reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    OBJECT          reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    CONST           reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    CONSTRUCTOR     reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    EOF             reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    FALSE           reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    FUNCTION        reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    NULL            reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    NULLABLE        reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    NUMBER          reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    OPERATOR        reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    SMARTCAST       reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    THIS            reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    TRUE            reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    VAL             reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    VAR             reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    DOUBLE          reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    WHEN            reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    LONG            reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    LPAREN          reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    LITERAL_STRING  reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    COLONCOLON      reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    LCCT            reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    IF              reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    RETURN          reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    RETURN_AT       reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    CONTINUE        reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    CONTINUE_AT     reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    BREAK           reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    BREAK_AT        reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    RCHAVE          reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    INCREMENTO      reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    DECREMENTO      reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    MINUS           reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    PLUS            reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    NOT             reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    SUSPEND         reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    PV              reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    ELSE            reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    MENOR           reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    PONTO           reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    AS              reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    MAISIGUAL       reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    MENOSIGUAL      reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    MULTIGUAL       reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    DIVIGUAL        reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    MODIGUAL        reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    MULT            reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    DIVIDE          reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    MOD             reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    PONTOPONTO      reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    ELVIS           reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    IN              reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    NOT_IN          reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    IS              reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    NOT_IS          reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    MAIOR           reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    MENORIGUAL      reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    MAIORIGUAL      reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    DIFERENTE       reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    IDENTIDADE      reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    IGUALDADE       reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    SEMIDENTIDADE   reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    AND             reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    OR              reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    COMMA           reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    RPAREN          reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)
    RCCT            reduce using rule 12 (functionValueParameters -> LPAREN fvps RPAREN .)


state 66

    (15) fvps -> functionValueParameter COMMA . fvps
    (14) fvps -> . functionValueParameter
    (15) fvps -> . functionValueParameter COMMA fvps
    (16) fvps -> . functionValueParameter fvps
    (17) functionValueParameter -> . parameter ATRIBUICAO expression
    (18) functionValueParameter -> . parameter
    (25) parameter -> . simpleIdentifier DOISP type
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    functionValueParameter         shift and go to state 44
    fvps                           shift and go to state 147
    parameter                      shift and go to state 45
    simpleIdentifier               shift and go to state 46

state 67

    (16) fvps -> functionValueParameter fvps .

    RPAREN          reduce using rule 16 (fvps -> functionValueParameter fvps .)


state 68

    (17) functionValueParameter -> parameter ATRIBUICAO . expression
    (82) expression -> . disjunction
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (33) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 99
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    LPAREN          shift and go to state 152
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57

    expression                     shift and go to state 148
    disjunction                    shift and go to state 85
    conjunction                    shift and go to state 94
    equality                       shift and go to state 97
    comparison                     shift and go to state 106
    infixOperation                 shift and go to state 121
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    simpleIdentifier               shift and go to state 149
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133
    prefixUnaryExpression          shift and go to state 150
    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 151
    unaryPrefix                    shift and go to state 105
    primaryExpression              shift and go to state 95
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122

state 69

    (25) parameter -> simpleIdentifier DOISP . type
    (26) type -> . typeModifiers optype
    (27) type -> . optype
    (31) typeModifiers -> . typeModifier
    (32) typeModifiers -> . typeModifier typeModifiers
    (28) optype -> . parenthesizedType
    (29) optype -> . functionType
    (30) optype -> . userType
    (33) typeModifier -> . SUSPEND
    (56) parenthesizedType -> . LPAREN type RPAREN
    (44) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (45) functionType -> . functionTypeParameters SETA type
    (37) userType -> . simpleUserType
    (57) receiverType -> . typeModifier rt
    (46) functionTypeParameters -> . functionTypeParameters_p
    (47) functionTypeParameters -> . functionTypeParameters_t
    (38) simpleUserType -> . simpleIdentifier typeArguments
    (39) simpleUserType -> . simpleIdentifier
    (48) functionTypeParameters_p -> . LPAREN parameter ftp RPAREN
    (49) functionTypeParameters_p -> . LPAREN parameter RPAREN
    (50) functionTypeParameters_t -> . LPAREN type RPAREN
    (51) functionTypeParameters_t -> . LPAREN type ftp RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    SUSPEND         shift and go to state 57
    LPAREN          shift and go to state 58
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    simpleIdentifier               shift and go to state 64
    type                           shift and go to state 154
    typeModifiers                  shift and go to state 51
    optype                         shift and go to state 52
    typeModifier                   shift and go to state 53
    parenthesizedType              shift and go to state 54
    functionType                   shift and go to state 55
    userType                       shift and go to state 56
    receiverType                   shift and go to state 59
    functionTypeParameters         shift and go to state 60
    simpleUserType                 shift and go to state 61
    functionTypeParameters_p       shift and go to state 62
    functionTypeParameters_t       shift and go to state 63

state 70

    (67) block -> LCHAVE statements . RCHAVE

    RCHAVE          shift and go to state 155


state 71

    (183) lambdaLiteral -> RCHAVE . ll LCHAVE
    (184) ll -> . statements
    (185) ll -> . lambdaParameters SETA statements
    (186) ll -> . SETA statements
    (59) statements -> . statement
    (60) statements -> . statement statements
    (187) lambdaParameters -> . lambdaParameter
    (188) lambdaParameters -> . lambdaParameter COMMA lambdaParameters
    (61) statement -> . functionDeclaration
    (62) statement -> . assignment
    (63) statement -> . loopStatement
    (64) statement -> . expression
    (189) lambdaParameter -> . variableDeclaration
    (190) lambdaParameter -> . multiVariableDeclaration DOISP type
    (191) lambdaParameter -> . multiVariableDeclaration
    (3) functionDeclaration -> . FUN simpleIdentifier functionValueParameters fd2 fd3
    (80) assignment -> . directlyAssignableExpression IGUALDADE expression
    (81) assignment -> . assignableExpression assignmentAndOperator expression
    (68) loopStatement -> . forStatement_MD
    (69) loopStatement -> . forStatement_VD
    (70) loopStatement -> . whileStatement
    (71) loopStatement -> . doWhileStatement
    (82) expression -> . disjunction
    (19) variableDeclaration -> . simpleIdentifier DOISP type
    (20) variableDeclaration -> . simpleIdentifier
    (21) multiVariableDeclaration -> . LPAREN mvd RPAREN
    (22) multiVariableDeclaration -> . LPAREN RPAREN
    (125) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (126) directlyAssignableExpression -> . simpleIdentifier
    (127) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (129) assignableExpression -> . prefixUnaryExpression
    (130) assignableExpression -> . parenthesizedAssignableExpression
    (72) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (73) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (74) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (75) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (76) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (77) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (78) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (79) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (128) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (131) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (33) typeModifier -> . SUSPEND
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type

    SETA            shift and go to state 159
    FUN             shift and go to state 77
    LPAREN          shift and go to state 164
    FOR             shift and go to state 90
    WHILE           shift and go to state 92
    DO              shift and go to state 93
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    LITERAL_STRING  shift and go to state 99
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    SUSPEND         shift and go to state 57

    ll                             shift and go to state 156
    statements                     shift and go to state 157
    lambdaParameters               shift and go to state 158
    statement                      shift and go to state 72
    lambdaParameter                shift and go to state 160
    functionDeclaration            shift and go to state 73
    assignment                     shift and go to state 74
    loopStatement                  shift and go to state 75
    expression                     shift and go to state 76
    variableDeclaration            shift and go to state 161
    multiVariableDeclaration       shift and go to state 162
    simpleIdentifier               shift and go to state 163
    directlyAssignableExpression   shift and go to state 79
    assignableExpression           shift and go to state 80
    forStatement_MD                shift and go to state 81
    forStatement_VD                shift and go to state 82
    whileStatement                 shift and go to state 83
    doWhileStatement               shift and go to state 84
    disjunction                    shift and go to state 85
    postfixUnaryExpression         shift and go to state 86
    parenthesizedDirectlyAssignableExpression shift and go to state 87
    prefixUnaryExpression          shift and go to state 88
    parenthesizedAssignableExpression shift and go to state 89
    conjunction                    shift and go to state 94
    primaryExpression              shift and go to state 95
    preue                          shift and go to state 96
    equality                       shift and go to state 97
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    unaryPrefix                    shift and go to state 105
    comparison                     shift and go to state 106
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    infixOperation                 shift and go to state 121
    typeModifier                   shift and go to state 122
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133

state 72

    (59) statements -> statement .
    (60) statements -> statement . statements
    (59) statements -> . statement
    (60) statements -> . statement statements
    (61) statement -> . functionDeclaration
    (62) statement -> . assignment
    (63) statement -> . loopStatement
    (64) statement -> . expression
    (3) functionDeclaration -> . FUN simpleIdentifier functionValueParameters fd2 fd3
    (80) assignment -> . directlyAssignableExpression IGUALDADE expression
    (81) assignment -> . assignableExpression assignmentAndOperator expression
    (68) loopStatement -> . forStatement_MD
    (69) loopStatement -> . forStatement_VD
    (70) loopStatement -> . whileStatement
    (71) loopStatement -> . doWhileStatement
    (82) expression -> . disjunction
    (125) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (126) directlyAssignableExpression -> . simpleIdentifier
    (127) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (129) assignableExpression -> . prefixUnaryExpression
    (130) assignableExpression -> . parenthesizedAssignableExpression
    (72) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (73) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (74) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (75) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (76) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (77) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (78) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (79) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (128) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (131) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (33) typeModifier -> . SUSPEND
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type

  ! shift/reduce conflict for RCHAVE resolved as shift
    LCHAVE          reduce using rule 59 (statements -> statement .)
    FUN             shift and go to state 77
    FOR             shift and go to state 90
    WHILE           shift and go to state 92
    DO              shift and go to state 93
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    LPAREN          shift and go to state 91
    LITERAL_STRING  shift and go to state 99
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    SUSPEND         shift and go to state 57

  ! RCHAVE          [ reduce using rule 59 (statements -> statement .) ]

    statement                      shift and go to state 72
    statements                     shift and go to state 165
    functionDeclaration            shift and go to state 73
    assignment                     shift and go to state 74
    loopStatement                  shift and go to state 75
    expression                     shift and go to state 76
    simpleIdentifier               shift and go to state 78
    directlyAssignableExpression   shift and go to state 79
    assignableExpression           shift and go to state 80
    forStatement_MD                shift and go to state 81
    forStatement_VD                shift and go to state 82
    whileStatement                 shift and go to state 83
    doWhileStatement               shift and go to state 84
    disjunction                    shift and go to state 85
    postfixUnaryExpression         shift and go to state 86
    parenthesizedDirectlyAssignableExpression shift and go to state 87
    prefixUnaryExpression          shift and go to state 88
    parenthesizedAssignableExpression shift and go to state 89
    conjunction                    shift and go to state 94
    primaryExpression              shift and go to state 95
    preue                          shift and go to state 96
    equality                       shift and go to state 97
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    unaryPrefix                    shift and go to state 105
    comparison                     shift and go to state 106
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    infixOperation                 shift and go to state 121
    typeModifier                   shift and go to state 122
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133

state 73

    (61) statement -> functionDeclaration .

    FUN             reduce using rule 61 (statement -> functionDeclaration .)
    FOR             reduce using rule 61 (statement -> functionDeclaration .)
    WHILE           reduce using rule 61 (statement -> functionDeclaration .)
    DO              reduce using rule 61 (statement -> functionDeclaration .)
    ID              reduce using rule 61 (statement -> functionDeclaration .)
    CROSSINLINE     reduce using rule 61 (statement -> functionDeclaration .)
    IMPORT          reduce using rule 61 (statement -> functionDeclaration .)
    INIT            reduce using rule 61 (statement -> functionDeclaration .)
    NOINLINE        reduce using rule 61 (statement -> functionDeclaration .)
    OUT             reduce using rule 61 (statement -> functionDeclaration .)
    VARARG          reduce using rule 61 (statement -> functionDeclaration .)
    WHERE           reduce using rule 61 (statement -> functionDeclaration .)
    INT             reduce using rule 61 (statement -> functionDeclaration .)
    FLOAT           reduce using rule 61 (statement -> functionDeclaration .)
    BOOLEAN         reduce using rule 61 (statement -> functionDeclaration .)
    STRING          reduce using rule 61 (statement -> functionDeclaration .)
    ARRAY           reduce using rule 61 (statement -> functionDeclaration .)
    CHAR            reduce using rule 61 (statement -> functionDeclaration .)
    OBJECT          reduce using rule 61 (statement -> functionDeclaration .)
    CONST           reduce using rule 61 (statement -> functionDeclaration .)
    CONSTRUCTOR     reduce using rule 61 (statement -> functionDeclaration .)
    EOF             reduce using rule 61 (statement -> functionDeclaration .)
    FALSE           reduce using rule 61 (statement -> functionDeclaration .)
    FUNCTION        reduce using rule 61 (statement -> functionDeclaration .)
    NULL            reduce using rule 61 (statement -> functionDeclaration .)
    NULLABLE        reduce using rule 61 (statement -> functionDeclaration .)
    NUMBER          reduce using rule 61 (statement -> functionDeclaration .)
    OPERATOR        reduce using rule 61 (statement -> functionDeclaration .)
    SMARTCAST       reduce using rule 61 (statement -> functionDeclaration .)
    THIS            reduce using rule 61 (statement -> functionDeclaration .)
    TRUE            reduce using rule 61 (statement -> functionDeclaration .)
    VAL             reduce using rule 61 (statement -> functionDeclaration .)
    VAR             reduce using rule 61 (statement -> functionDeclaration .)
    DOUBLE          reduce using rule 61 (statement -> functionDeclaration .)
    WHEN            reduce using rule 61 (statement -> functionDeclaration .)
    LONG            reduce using rule 61 (statement -> functionDeclaration .)
    LPAREN          reduce using rule 61 (statement -> functionDeclaration .)
    LITERAL_STRING  reduce using rule 61 (statement -> functionDeclaration .)
    COLONCOLON      reduce using rule 61 (statement -> functionDeclaration .)
    LCCT            reduce using rule 61 (statement -> functionDeclaration .)
    IF              reduce using rule 61 (statement -> functionDeclaration .)
    RETURN          reduce using rule 61 (statement -> functionDeclaration .)
    RETURN_AT       reduce using rule 61 (statement -> functionDeclaration .)
    CONTINUE        reduce using rule 61 (statement -> functionDeclaration .)
    CONTINUE_AT     reduce using rule 61 (statement -> functionDeclaration .)
    BREAK           reduce using rule 61 (statement -> functionDeclaration .)
    BREAK_AT        reduce using rule 61 (statement -> functionDeclaration .)
    RCHAVE          reduce using rule 61 (statement -> functionDeclaration .)
    INCREMENTO      reduce using rule 61 (statement -> functionDeclaration .)
    DECREMENTO      reduce using rule 61 (statement -> functionDeclaration .)
    MINUS           reduce using rule 61 (statement -> functionDeclaration .)
    PLUS            reduce using rule 61 (statement -> functionDeclaration .)
    NOT             reduce using rule 61 (statement -> functionDeclaration .)
    SUSPEND         reduce using rule 61 (statement -> functionDeclaration .)
    LCHAVE          reduce using rule 61 (statement -> functionDeclaration .)
    PV              reduce using rule 61 (statement -> functionDeclaration .)
    ELSE            reduce using rule 61 (statement -> functionDeclaration .)
    MENOR           reduce using rule 61 (statement -> functionDeclaration .)
    PONTO           reduce using rule 61 (statement -> functionDeclaration .)
    AS              reduce using rule 61 (statement -> functionDeclaration .)
    MAISIGUAL       reduce using rule 61 (statement -> functionDeclaration .)
    MENOSIGUAL      reduce using rule 61 (statement -> functionDeclaration .)
    MULTIGUAL       reduce using rule 61 (statement -> functionDeclaration .)
    DIVIGUAL        reduce using rule 61 (statement -> functionDeclaration .)
    MODIGUAL        reduce using rule 61 (statement -> functionDeclaration .)
    MULT            reduce using rule 61 (statement -> functionDeclaration .)
    DIVIDE          reduce using rule 61 (statement -> functionDeclaration .)
    MOD             reduce using rule 61 (statement -> functionDeclaration .)
    PONTOPONTO      reduce using rule 61 (statement -> functionDeclaration .)
    ELVIS           reduce using rule 61 (statement -> functionDeclaration .)
    IN              reduce using rule 61 (statement -> functionDeclaration .)
    NOT_IN          reduce using rule 61 (statement -> functionDeclaration .)
    IS              reduce using rule 61 (statement -> functionDeclaration .)
    NOT_IS          reduce using rule 61 (statement -> functionDeclaration .)
    MAIOR           reduce using rule 61 (statement -> functionDeclaration .)
    MENORIGUAL      reduce using rule 61 (statement -> functionDeclaration .)
    MAIORIGUAL      reduce using rule 61 (statement -> functionDeclaration .)
    DIFERENTE       reduce using rule 61 (statement -> functionDeclaration .)
    IDENTIDADE      reduce using rule 61 (statement -> functionDeclaration .)
    IGUALDADE       reduce using rule 61 (statement -> functionDeclaration .)
    SEMIDENTIDADE   reduce using rule 61 (statement -> functionDeclaration .)
    AND             reduce using rule 61 (statement -> functionDeclaration .)
    OR              reduce using rule 61 (statement -> functionDeclaration .)
    COMMA           reduce using rule 61 (statement -> functionDeclaration .)
    RPAREN          reduce using rule 61 (statement -> functionDeclaration .)
    RCCT            reduce using rule 61 (statement -> functionDeclaration .)


state 74

    (62) statement -> assignment .

    FUN             reduce using rule 62 (statement -> assignment .)
    FOR             reduce using rule 62 (statement -> assignment .)
    WHILE           reduce using rule 62 (statement -> assignment .)
    DO              reduce using rule 62 (statement -> assignment .)
    ID              reduce using rule 62 (statement -> assignment .)
    CROSSINLINE     reduce using rule 62 (statement -> assignment .)
    IMPORT          reduce using rule 62 (statement -> assignment .)
    INIT            reduce using rule 62 (statement -> assignment .)
    NOINLINE        reduce using rule 62 (statement -> assignment .)
    OUT             reduce using rule 62 (statement -> assignment .)
    VARARG          reduce using rule 62 (statement -> assignment .)
    WHERE           reduce using rule 62 (statement -> assignment .)
    INT             reduce using rule 62 (statement -> assignment .)
    FLOAT           reduce using rule 62 (statement -> assignment .)
    BOOLEAN         reduce using rule 62 (statement -> assignment .)
    STRING          reduce using rule 62 (statement -> assignment .)
    ARRAY           reduce using rule 62 (statement -> assignment .)
    CHAR            reduce using rule 62 (statement -> assignment .)
    OBJECT          reduce using rule 62 (statement -> assignment .)
    CONST           reduce using rule 62 (statement -> assignment .)
    CONSTRUCTOR     reduce using rule 62 (statement -> assignment .)
    EOF             reduce using rule 62 (statement -> assignment .)
    FALSE           reduce using rule 62 (statement -> assignment .)
    FUNCTION        reduce using rule 62 (statement -> assignment .)
    NULL            reduce using rule 62 (statement -> assignment .)
    NULLABLE        reduce using rule 62 (statement -> assignment .)
    NUMBER          reduce using rule 62 (statement -> assignment .)
    OPERATOR        reduce using rule 62 (statement -> assignment .)
    SMARTCAST       reduce using rule 62 (statement -> assignment .)
    THIS            reduce using rule 62 (statement -> assignment .)
    TRUE            reduce using rule 62 (statement -> assignment .)
    VAL             reduce using rule 62 (statement -> assignment .)
    VAR             reduce using rule 62 (statement -> assignment .)
    DOUBLE          reduce using rule 62 (statement -> assignment .)
    WHEN            reduce using rule 62 (statement -> assignment .)
    LONG            reduce using rule 62 (statement -> assignment .)
    LPAREN          reduce using rule 62 (statement -> assignment .)
    LITERAL_STRING  reduce using rule 62 (statement -> assignment .)
    COLONCOLON      reduce using rule 62 (statement -> assignment .)
    LCCT            reduce using rule 62 (statement -> assignment .)
    IF              reduce using rule 62 (statement -> assignment .)
    RETURN          reduce using rule 62 (statement -> assignment .)
    RETURN_AT       reduce using rule 62 (statement -> assignment .)
    CONTINUE        reduce using rule 62 (statement -> assignment .)
    CONTINUE_AT     reduce using rule 62 (statement -> assignment .)
    BREAK           reduce using rule 62 (statement -> assignment .)
    BREAK_AT        reduce using rule 62 (statement -> assignment .)
    RCHAVE          reduce using rule 62 (statement -> assignment .)
    INCREMENTO      reduce using rule 62 (statement -> assignment .)
    DECREMENTO      reduce using rule 62 (statement -> assignment .)
    MINUS           reduce using rule 62 (statement -> assignment .)
    PLUS            reduce using rule 62 (statement -> assignment .)
    NOT             reduce using rule 62 (statement -> assignment .)
    SUSPEND         reduce using rule 62 (statement -> assignment .)
    LCHAVE          reduce using rule 62 (statement -> assignment .)
    PV              reduce using rule 62 (statement -> assignment .)
    ELSE            reduce using rule 62 (statement -> assignment .)
    MENOR           reduce using rule 62 (statement -> assignment .)
    PONTO           reduce using rule 62 (statement -> assignment .)
    AS              reduce using rule 62 (statement -> assignment .)
    MAISIGUAL       reduce using rule 62 (statement -> assignment .)
    MENOSIGUAL      reduce using rule 62 (statement -> assignment .)
    MULTIGUAL       reduce using rule 62 (statement -> assignment .)
    DIVIGUAL        reduce using rule 62 (statement -> assignment .)
    MODIGUAL        reduce using rule 62 (statement -> assignment .)
    MULT            reduce using rule 62 (statement -> assignment .)
    DIVIDE          reduce using rule 62 (statement -> assignment .)
    MOD             reduce using rule 62 (statement -> assignment .)
    PONTOPONTO      reduce using rule 62 (statement -> assignment .)
    ELVIS           reduce using rule 62 (statement -> assignment .)
    IN              reduce using rule 62 (statement -> assignment .)
    NOT_IN          reduce using rule 62 (statement -> assignment .)
    IS              reduce using rule 62 (statement -> assignment .)
    NOT_IS          reduce using rule 62 (statement -> assignment .)
    MAIOR           reduce using rule 62 (statement -> assignment .)
    MENORIGUAL      reduce using rule 62 (statement -> assignment .)
    MAIORIGUAL      reduce using rule 62 (statement -> assignment .)
    DIFERENTE       reduce using rule 62 (statement -> assignment .)
    IDENTIDADE      reduce using rule 62 (statement -> assignment .)
    IGUALDADE       reduce using rule 62 (statement -> assignment .)
    SEMIDENTIDADE   reduce using rule 62 (statement -> assignment .)
    AND             reduce using rule 62 (statement -> assignment .)
    OR              reduce using rule 62 (statement -> assignment .)
    COMMA           reduce using rule 62 (statement -> assignment .)
    RPAREN          reduce using rule 62 (statement -> assignment .)
    RCCT            reduce using rule 62 (statement -> assignment .)


state 75

    (63) statement -> loopStatement .

    FUN             reduce using rule 63 (statement -> loopStatement .)
    FOR             reduce using rule 63 (statement -> loopStatement .)
    WHILE           reduce using rule 63 (statement -> loopStatement .)
    DO              reduce using rule 63 (statement -> loopStatement .)
    ID              reduce using rule 63 (statement -> loopStatement .)
    CROSSINLINE     reduce using rule 63 (statement -> loopStatement .)
    IMPORT          reduce using rule 63 (statement -> loopStatement .)
    INIT            reduce using rule 63 (statement -> loopStatement .)
    NOINLINE        reduce using rule 63 (statement -> loopStatement .)
    OUT             reduce using rule 63 (statement -> loopStatement .)
    VARARG          reduce using rule 63 (statement -> loopStatement .)
    WHERE           reduce using rule 63 (statement -> loopStatement .)
    INT             reduce using rule 63 (statement -> loopStatement .)
    FLOAT           reduce using rule 63 (statement -> loopStatement .)
    BOOLEAN         reduce using rule 63 (statement -> loopStatement .)
    STRING          reduce using rule 63 (statement -> loopStatement .)
    ARRAY           reduce using rule 63 (statement -> loopStatement .)
    CHAR            reduce using rule 63 (statement -> loopStatement .)
    OBJECT          reduce using rule 63 (statement -> loopStatement .)
    CONST           reduce using rule 63 (statement -> loopStatement .)
    CONSTRUCTOR     reduce using rule 63 (statement -> loopStatement .)
    EOF             reduce using rule 63 (statement -> loopStatement .)
    FALSE           reduce using rule 63 (statement -> loopStatement .)
    FUNCTION        reduce using rule 63 (statement -> loopStatement .)
    NULL            reduce using rule 63 (statement -> loopStatement .)
    NULLABLE        reduce using rule 63 (statement -> loopStatement .)
    NUMBER          reduce using rule 63 (statement -> loopStatement .)
    OPERATOR        reduce using rule 63 (statement -> loopStatement .)
    SMARTCAST       reduce using rule 63 (statement -> loopStatement .)
    THIS            reduce using rule 63 (statement -> loopStatement .)
    TRUE            reduce using rule 63 (statement -> loopStatement .)
    VAL             reduce using rule 63 (statement -> loopStatement .)
    VAR             reduce using rule 63 (statement -> loopStatement .)
    DOUBLE          reduce using rule 63 (statement -> loopStatement .)
    WHEN            reduce using rule 63 (statement -> loopStatement .)
    LONG            reduce using rule 63 (statement -> loopStatement .)
    LPAREN          reduce using rule 63 (statement -> loopStatement .)
    LITERAL_STRING  reduce using rule 63 (statement -> loopStatement .)
    COLONCOLON      reduce using rule 63 (statement -> loopStatement .)
    LCCT            reduce using rule 63 (statement -> loopStatement .)
    IF              reduce using rule 63 (statement -> loopStatement .)
    RETURN          reduce using rule 63 (statement -> loopStatement .)
    RETURN_AT       reduce using rule 63 (statement -> loopStatement .)
    CONTINUE        reduce using rule 63 (statement -> loopStatement .)
    CONTINUE_AT     reduce using rule 63 (statement -> loopStatement .)
    BREAK           reduce using rule 63 (statement -> loopStatement .)
    BREAK_AT        reduce using rule 63 (statement -> loopStatement .)
    RCHAVE          reduce using rule 63 (statement -> loopStatement .)
    INCREMENTO      reduce using rule 63 (statement -> loopStatement .)
    DECREMENTO      reduce using rule 63 (statement -> loopStatement .)
    MINUS           reduce using rule 63 (statement -> loopStatement .)
    PLUS            reduce using rule 63 (statement -> loopStatement .)
    NOT             reduce using rule 63 (statement -> loopStatement .)
    SUSPEND         reduce using rule 63 (statement -> loopStatement .)
    LCHAVE          reduce using rule 63 (statement -> loopStatement .)
    PV              reduce using rule 63 (statement -> loopStatement .)
    ELSE            reduce using rule 63 (statement -> loopStatement .)
    MENOR           reduce using rule 63 (statement -> loopStatement .)
    PONTO           reduce using rule 63 (statement -> loopStatement .)
    AS              reduce using rule 63 (statement -> loopStatement .)
    MAISIGUAL       reduce using rule 63 (statement -> loopStatement .)
    MENOSIGUAL      reduce using rule 63 (statement -> loopStatement .)
    MULTIGUAL       reduce using rule 63 (statement -> loopStatement .)
    DIVIGUAL        reduce using rule 63 (statement -> loopStatement .)
    MODIGUAL        reduce using rule 63 (statement -> loopStatement .)
    MULT            reduce using rule 63 (statement -> loopStatement .)
    DIVIDE          reduce using rule 63 (statement -> loopStatement .)
    MOD             reduce using rule 63 (statement -> loopStatement .)
    PONTOPONTO      reduce using rule 63 (statement -> loopStatement .)
    ELVIS           reduce using rule 63 (statement -> loopStatement .)
    IN              reduce using rule 63 (statement -> loopStatement .)
    NOT_IN          reduce using rule 63 (statement -> loopStatement .)
    IS              reduce using rule 63 (statement -> loopStatement .)
    NOT_IS          reduce using rule 63 (statement -> loopStatement .)
    MAIOR           reduce using rule 63 (statement -> loopStatement .)
    MENORIGUAL      reduce using rule 63 (statement -> loopStatement .)
    MAIORIGUAL      reduce using rule 63 (statement -> loopStatement .)
    DIFERENTE       reduce using rule 63 (statement -> loopStatement .)
    IDENTIDADE      reduce using rule 63 (statement -> loopStatement .)
    IGUALDADE       reduce using rule 63 (statement -> loopStatement .)
    SEMIDENTIDADE   reduce using rule 63 (statement -> loopStatement .)
    AND             reduce using rule 63 (statement -> loopStatement .)
    OR              reduce using rule 63 (statement -> loopStatement .)
    COMMA           reduce using rule 63 (statement -> loopStatement .)
    RPAREN          reduce using rule 63 (statement -> loopStatement .)
    RCCT            reduce using rule 63 (statement -> loopStatement .)


state 76

    (64) statement -> expression .
    (217) jumpExpression -> expression .

  ! reduce/reduce conflict for INCREMENTO resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for MENOR resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for LCCT resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for PONTO resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for AS resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for MULT resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for MOD resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for ID resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for INIT resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for OUT resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for VARARG resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for WHERE resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for INT resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for STRING resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for CHAR resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for CONST resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for EOF resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for FALSE resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for NULL resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for THIS resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for TRUE resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for VAL resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for VAR resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for WHEN resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for LONG resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for IN resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for IS resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for AND resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for OR resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for FUN resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for FOR resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for DO resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for IF resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for RETURN resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for BREAK resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for NOT resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for PV resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 64 (statement -> expression .)
  ! reduce/reduce conflict for RCCT resolved using rule 64 (statement -> expression .)
    FUN             reduce using rule 64 (statement -> expression .)
    FOR             reduce using rule 64 (statement -> expression .)
    WHILE           reduce using rule 64 (statement -> expression .)
    DO              reduce using rule 64 (statement -> expression .)
    ID              reduce using rule 64 (statement -> expression .)
    CROSSINLINE     reduce using rule 64 (statement -> expression .)
    IMPORT          reduce using rule 64 (statement -> expression .)
    INIT            reduce using rule 64 (statement -> expression .)
    NOINLINE        reduce using rule 64 (statement -> expression .)
    OUT             reduce using rule 64 (statement -> expression .)
    VARARG          reduce using rule 64 (statement -> expression .)
    WHERE           reduce using rule 64 (statement -> expression .)
    INT             reduce using rule 64 (statement -> expression .)
    FLOAT           reduce using rule 64 (statement -> expression .)
    BOOLEAN         reduce using rule 64 (statement -> expression .)
    STRING          reduce using rule 64 (statement -> expression .)
    ARRAY           reduce using rule 64 (statement -> expression .)
    CHAR            reduce using rule 64 (statement -> expression .)
    OBJECT          reduce using rule 64 (statement -> expression .)
    CONST           reduce using rule 64 (statement -> expression .)
    CONSTRUCTOR     reduce using rule 64 (statement -> expression .)
    EOF             reduce using rule 64 (statement -> expression .)
    FALSE           reduce using rule 64 (statement -> expression .)
    FUNCTION        reduce using rule 64 (statement -> expression .)
    NULL            reduce using rule 64 (statement -> expression .)
    NULLABLE        reduce using rule 64 (statement -> expression .)
    NUMBER          reduce using rule 64 (statement -> expression .)
    OPERATOR        reduce using rule 64 (statement -> expression .)
    SMARTCAST       reduce using rule 64 (statement -> expression .)
    THIS            reduce using rule 64 (statement -> expression .)
    TRUE            reduce using rule 64 (statement -> expression .)
    VAL             reduce using rule 64 (statement -> expression .)
    VAR             reduce using rule 64 (statement -> expression .)
    DOUBLE          reduce using rule 64 (statement -> expression .)
    WHEN            reduce using rule 64 (statement -> expression .)
    LONG            reduce using rule 64 (statement -> expression .)
    LPAREN          reduce using rule 64 (statement -> expression .)
    LITERAL_STRING  reduce using rule 64 (statement -> expression .)
    COLONCOLON      reduce using rule 64 (statement -> expression .)
    LCCT            reduce using rule 64 (statement -> expression .)
    IF              reduce using rule 64 (statement -> expression .)
    RETURN          reduce using rule 64 (statement -> expression .)
    RETURN_AT       reduce using rule 64 (statement -> expression .)
    CONTINUE        reduce using rule 64 (statement -> expression .)
    CONTINUE_AT     reduce using rule 64 (statement -> expression .)
    BREAK           reduce using rule 64 (statement -> expression .)
    BREAK_AT        reduce using rule 64 (statement -> expression .)
    RCHAVE          reduce using rule 64 (statement -> expression .)
    INCREMENTO      reduce using rule 64 (statement -> expression .)
    DECREMENTO      reduce using rule 64 (statement -> expression .)
    MINUS           reduce using rule 64 (statement -> expression .)
    PLUS            reduce using rule 64 (statement -> expression .)
    NOT             reduce using rule 64 (statement -> expression .)
    SUSPEND         reduce using rule 64 (statement -> expression .)
    LCHAVE          reduce using rule 64 (statement -> expression .)
    PV              reduce using rule 64 (statement -> expression .)
    ELSE            reduce using rule 64 (statement -> expression .)
    MENOR           reduce using rule 64 (statement -> expression .)
    PONTO           reduce using rule 64 (statement -> expression .)
    AS              reduce using rule 64 (statement -> expression .)
    MAISIGUAL       reduce using rule 64 (statement -> expression .)
    MENOSIGUAL      reduce using rule 64 (statement -> expression .)
    MULTIGUAL       reduce using rule 64 (statement -> expression .)
    DIVIGUAL        reduce using rule 64 (statement -> expression .)
    MODIGUAL        reduce using rule 64 (statement -> expression .)
    MULT            reduce using rule 64 (statement -> expression .)
    DIVIDE          reduce using rule 64 (statement -> expression .)
    MOD             reduce using rule 64 (statement -> expression .)
    PONTOPONTO      reduce using rule 64 (statement -> expression .)
    ELVIS           reduce using rule 64 (statement -> expression .)
    IN              reduce using rule 64 (statement -> expression .)
    NOT_IN          reduce using rule 64 (statement -> expression .)
    IS              reduce using rule 64 (statement -> expression .)
    NOT_IS          reduce using rule 64 (statement -> expression .)
    MAIOR           reduce using rule 64 (statement -> expression .)
    MENORIGUAL      reduce using rule 64 (statement -> expression .)
    MAIORIGUAL      reduce using rule 64 (statement -> expression .)
    DIFERENTE       reduce using rule 64 (statement -> expression .)
    IDENTIDADE      reduce using rule 64 (statement -> expression .)
    IGUALDADE       reduce using rule 64 (statement -> expression .)
    SEMIDENTIDADE   reduce using rule 64 (statement -> expression .)
    AND             reduce using rule 64 (statement -> expression .)
    OR              reduce using rule 64 (statement -> expression .)
    COMMA           reduce using rule 64 (statement -> expression .)
    RPAREN          reduce using rule 64 (statement -> expression .)
    RCCT            reduce using rule 64 (statement -> expression .)

  ! INCREMENTO      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DECREMENTO      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MENOR           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! LCCT            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! LPAREN          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! COLONCOLON      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RCHAVE          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! PONTO           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! AS              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MAISIGUAL       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MENOSIGUAL      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MULTIGUAL       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DIVIGUAL        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MODIGUAL        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MULT            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DIVIDE          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MOD             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! PLUS            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MINUS           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! PONTOPONTO      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! ID              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CROSSINLINE     [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IMPORT          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! INIT            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NOINLINE        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! OUT             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! VARARG          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! WHERE           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! INT             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! FLOAT           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! BOOLEAN         [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! STRING          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! ARRAY           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CHAR            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! OBJECT          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CONST           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CONSTRUCTOR     [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! EOF             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! FALSE           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! FUNCTION        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NULL            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NULLABLE        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NUMBER          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! OPERATOR        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! SMARTCAST       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! THIS            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! TRUE            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! VAL             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! VAR             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DOUBLE          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! WHEN            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! LONG            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! ELVIS           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IN              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NOT_IN          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IS              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NOT_IS          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MAIOR           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MENORIGUAL      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MAIORIGUAL      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DIFERENTE       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IDENTIDADE      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IGUALDADE       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! AND             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! OR              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! FUN             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! FOR             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! WHILE           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DO              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! LITERAL_STRING  [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IF              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RETURN          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RETURN_AT       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CONTINUE        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CONTINUE_AT     [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! BREAK           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! BREAK_AT        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NOT             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! SUSPEND         [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! LCHAVE          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! PV              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! ELSE            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! COMMA           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RCCT            [ reduce using rule 217 (jumpExpression -> expression .) ]


state 77

    (3) functionDeclaration -> FUN . simpleIdentifier functionValueParameters fd2 fd3
    (192) anonymousFunction -> FUN . type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> FUN . parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> FUN . type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> FUN . type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> FUN . type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> FUN . parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> FUN . parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> FUN . parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> FUN . type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> FUN . type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> FUN . type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> FUN . parametersWithOptionalType functionBody
    (204) anonymousFunction -> FUN . parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> FUN . type PONTO parametersWithOptionalType
    (206) anonymousFunction -> FUN . parametersWithOptionalType
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (26) type -> . typeModifiers optype
    (27) type -> . optype
    (172) parametersWithOptionalType -> . LPAREN pwot RPAREN
    (173) parametersWithOptionalType -> . LPAREN RPAREN
    (31) typeModifiers -> . typeModifier
    (32) typeModifiers -> . typeModifier typeModifiers
    (28) optype -> . parenthesizedType
    (29) optype -> . functionType
    (30) optype -> . userType
    (33) typeModifier -> . SUSPEND
    (56) parenthesizedType -> . LPAREN type RPAREN
    (44) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (45) functionType -> . functionTypeParameters SETA type
    (37) userType -> . simpleUserType
    (57) receiverType -> . typeModifier rt
    (46) functionTypeParameters -> . functionTypeParameters_p
    (47) functionTypeParameters -> . functionTypeParameters_t
    (38) simpleUserType -> . simpleIdentifier typeArguments
    (39) simpleUserType -> . simpleIdentifier
    (48) functionTypeParameters_p -> . LPAREN parameter ftp RPAREN
    (49) functionTypeParameters_p -> . LPAREN parameter RPAREN
    (50) functionTypeParameters_t -> . LPAREN type RPAREN
    (51) functionTypeParameters_t -> . LPAREN type ftp RPAREN

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    LPAREN          shift and go to state 169
    SUSPEND         shift and go to state 57

    simpleIdentifier               shift and go to state 166
    type                           shift and go to state 167
    parametersWithOptionalType     shift and go to state 168
    typeModifiers                  shift and go to state 51
    optype                         shift and go to state 52
    typeModifier                   shift and go to state 53
    parenthesizedType              shift and go to state 54
    functionType                   shift and go to state 55
    userType                       shift and go to state 56
    receiverType                   shift and go to state 59
    functionTypeParameters         shift and go to state 60
    simpleUserType                 shift and go to state 61
    functionTypeParameters_p       shift and go to state 62
    functionTypeParameters_t       shift and go to state 63

state 78

    (126) directlyAssignableExpression -> simpleIdentifier .
    (160) primaryExpression -> simpleIdentifier .
    (115) label -> simpleIdentifier .

  ! reduce/reduce conflict for IGUALDADE resolved using rule 126 (directlyAssignableExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 126 (directlyAssignableExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NOT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for INT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FLOAT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for STRING resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ARRAY resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CHAR resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OBJECT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONST resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for EOF resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FALSE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NULL resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NUMBER resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for THIS resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for TRUE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VAL resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VAR resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHEN resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LONG resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IF resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FUN resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 115 (label -> simpleIdentifier .)
    IGUALDADE       reduce using rule 126 (directlyAssignableExpression -> simpleIdentifier .)
    RPAREN          reduce using rule 126 (directlyAssignableExpression -> simpleIdentifier .)
    MENOR           reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    PONTO           reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    AS              reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MAISIGUAL       reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MENOSIGUAL      reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MODIGUAL        reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MULT            reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    DIVIDE          reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MOD             reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    ELVIS           reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    IN              reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    NOT_IN          reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    IS              reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    NOT_IS          reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MAIOR           reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    DIFERENTE       reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    AND             reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    OR              reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    FOR             reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    WHILE           reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    DO              reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    LCHAVE          reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    PV              reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    ELSE            reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    COMMA           reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    RCCT            reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    INCREMENTO      reduce using rule 115 (label -> simpleIdentifier .)
    DECREMENTO      reduce using rule 115 (label -> simpleIdentifier .)
    MINUS           reduce using rule 115 (label -> simpleIdentifier .)
    PLUS            reduce using rule 115 (label -> simpleIdentifier .)
    NOT             reduce using rule 115 (label -> simpleIdentifier .)
    ID              reduce using rule 115 (label -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 115 (label -> simpleIdentifier .)
    IMPORT          reduce using rule 115 (label -> simpleIdentifier .)
    INIT            reduce using rule 115 (label -> simpleIdentifier .)
    NOINLINE        reduce using rule 115 (label -> simpleIdentifier .)
    OUT             reduce using rule 115 (label -> simpleIdentifier .)
    VARARG          reduce using rule 115 (label -> simpleIdentifier .)
    WHERE           reduce using rule 115 (label -> simpleIdentifier .)
    INT             reduce using rule 115 (label -> simpleIdentifier .)
    FLOAT           reduce using rule 115 (label -> simpleIdentifier .)
    BOOLEAN         reduce using rule 115 (label -> simpleIdentifier .)
    STRING          reduce using rule 115 (label -> simpleIdentifier .)
    ARRAY           reduce using rule 115 (label -> simpleIdentifier .)
    CHAR            reduce using rule 115 (label -> simpleIdentifier .)
    OBJECT          reduce using rule 115 (label -> simpleIdentifier .)
    CONST           reduce using rule 115 (label -> simpleIdentifier .)
    CONSTRUCTOR     reduce using rule 115 (label -> simpleIdentifier .)
    EOF             reduce using rule 115 (label -> simpleIdentifier .)
    FALSE           reduce using rule 115 (label -> simpleIdentifier .)
    FUNCTION        reduce using rule 115 (label -> simpleIdentifier .)
    NULL            reduce using rule 115 (label -> simpleIdentifier .)
    NULLABLE        reduce using rule 115 (label -> simpleIdentifier .)
    NUMBER          reduce using rule 115 (label -> simpleIdentifier .)
    OPERATOR        reduce using rule 115 (label -> simpleIdentifier .)
    SMARTCAST       reduce using rule 115 (label -> simpleIdentifier .)
    THIS            reduce using rule 115 (label -> simpleIdentifier .)
    TRUE            reduce using rule 115 (label -> simpleIdentifier .)
    VAL             reduce using rule 115 (label -> simpleIdentifier .)
    VAR             reduce using rule 115 (label -> simpleIdentifier .)
    DOUBLE          reduce using rule 115 (label -> simpleIdentifier .)
    WHEN            reduce using rule 115 (label -> simpleIdentifier .)
    LONG            reduce using rule 115 (label -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 115 (label -> simpleIdentifier .)
    LPAREN          reduce using rule 115 (label -> simpleIdentifier .)
    COLONCOLON      reduce using rule 115 (label -> simpleIdentifier .)
    LCCT            reduce using rule 115 (label -> simpleIdentifier .)
    IF              reduce using rule 115 (label -> simpleIdentifier .)
    RETURN          reduce using rule 115 (label -> simpleIdentifier .)
    RETURN_AT       reduce using rule 115 (label -> simpleIdentifier .)
    CONTINUE        reduce using rule 115 (label -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 115 (label -> simpleIdentifier .)
    BREAK           reduce using rule 115 (label -> simpleIdentifier .)
    BREAK_AT        reduce using rule 115 (label -> simpleIdentifier .)
    RCHAVE          reduce using rule 115 (label -> simpleIdentifier .)
    FUN             reduce using rule 115 (label -> simpleIdentifier .)
    SUSPEND         reduce using rule 115 (label -> simpleIdentifier .)

  ! INCREMENTO      [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! RCHAVE          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! PLUS            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! INT             [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! FLOAT           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! BOOLEAN         [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! STRING          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! ARRAY           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! CHAR            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! OBJECT          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! CONST           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! CONSTRUCTOR     [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! EOF             [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! FALSE           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! FUNCTION        [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! NULL            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! NULLABLE        [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! NUMBER          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! OPERATOR        [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! SMARTCAST       [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! THIS            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! TRUE            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! VAL             [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! VAR             [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! DOUBLE          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! WHEN            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! LONG            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! IGUALDADE       [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! FUN             [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! LITERAL_STRING  [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! IF              [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! RETURN          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! RETURN_AT       [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! CONTINUE        [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! CONTINUE_AT     [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! BREAK           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! BREAK_AT        [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! NOT             [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! SUSPEND         [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! RPAREN          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]


state 79

    (80) assignment -> directlyAssignableExpression . IGUALDADE expression

    IGUALDADE       shift and go to state 170


state 80

    (81) assignment -> assignableExpression . assignmentAndOperator expression
    (226) assignmentAndOperator -> . MAISIGUAL
    (227) assignmentAndOperator -> . MENOSIGUAL
    (228) assignmentAndOperator -> . MULTIGUAL
    (229) assignmentAndOperator -> . DIVIGUAL
    (230) assignmentAndOperator -> . MODIGUAL

    MAISIGUAL       shift and go to state 172
    MENOSIGUAL      shift and go to state 173
    MULTIGUAL       shift and go to state 174
    DIVIGUAL        shift and go to state 175
    MODIGUAL        shift and go to state 176

    assignmentAndOperator          shift and go to state 171

state 81

    (68) loopStatement -> forStatement_MD .

    FUN             reduce using rule 68 (loopStatement -> forStatement_MD .)
    FOR             reduce using rule 68 (loopStatement -> forStatement_MD .)
    WHILE           reduce using rule 68 (loopStatement -> forStatement_MD .)
    DO              reduce using rule 68 (loopStatement -> forStatement_MD .)
    ID              reduce using rule 68 (loopStatement -> forStatement_MD .)
    CROSSINLINE     reduce using rule 68 (loopStatement -> forStatement_MD .)
    IMPORT          reduce using rule 68 (loopStatement -> forStatement_MD .)
    INIT            reduce using rule 68 (loopStatement -> forStatement_MD .)
    NOINLINE        reduce using rule 68 (loopStatement -> forStatement_MD .)
    OUT             reduce using rule 68 (loopStatement -> forStatement_MD .)
    VARARG          reduce using rule 68 (loopStatement -> forStatement_MD .)
    WHERE           reduce using rule 68 (loopStatement -> forStatement_MD .)
    INT             reduce using rule 68 (loopStatement -> forStatement_MD .)
    FLOAT           reduce using rule 68 (loopStatement -> forStatement_MD .)
    BOOLEAN         reduce using rule 68 (loopStatement -> forStatement_MD .)
    STRING          reduce using rule 68 (loopStatement -> forStatement_MD .)
    ARRAY           reduce using rule 68 (loopStatement -> forStatement_MD .)
    CHAR            reduce using rule 68 (loopStatement -> forStatement_MD .)
    OBJECT          reduce using rule 68 (loopStatement -> forStatement_MD .)
    CONST           reduce using rule 68 (loopStatement -> forStatement_MD .)
    CONSTRUCTOR     reduce using rule 68 (loopStatement -> forStatement_MD .)
    EOF             reduce using rule 68 (loopStatement -> forStatement_MD .)
    FALSE           reduce using rule 68 (loopStatement -> forStatement_MD .)
    FUNCTION        reduce using rule 68 (loopStatement -> forStatement_MD .)
    NULL            reduce using rule 68 (loopStatement -> forStatement_MD .)
    NULLABLE        reduce using rule 68 (loopStatement -> forStatement_MD .)
    NUMBER          reduce using rule 68 (loopStatement -> forStatement_MD .)
    OPERATOR        reduce using rule 68 (loopStatement -> forStatement_MD .)
    SMARTCAST       reduce using rule 68 (loopStatement -> forStatement_MD .)
    THIS            reduce using rule 68 (loopStatement -> forStatement_MD .)
    TRUE            reduce using rule 68 (loopStatement -> forStatement_MD .)
    VAL             reduce using rule 68 (loopStatement -> forStatement_MD .)
    VAR             reduce using rule 68 (loopStatement -> forStatement_MD .)
    DOUBLE          reduce using rule 68 (loopStatement -> forStatement_MD .)
    WHEN            reduce using rule 68 (loopStatement -> forStatement_MD .)
    LONG            reduce using rule 68 (loopStatement -> forStatement_MD .)
    LPAREN          reduce using rule 68 (loopStatement -> forStatement_MD .)
    LITERAL_STRING  reduce using rule 68 (loopStatement -> forStatement_MD .)
    COLONCOLON      reduce using rule 68 (loopStatement -> forStatement_MD .)
    LCCT            reduce using rule 68 (loopStatement -> forStatement_MD .)
    IF              reduce using rule 68 (loopStatement -> forStatement_MD .)
    RETURN          reduce using rule 68 (loopStatement -> forStatement_MD .)
    RETURN_AT       reduce using rule 68 (loopStatement -> forStatement_MD .)
    CONTINUE        reduce using rule 68 (loopStatement -> forStatement_MD .)
    CONTINUE_AT     reduce using rule 68 (loopStatement -> forStatement_MD .)
    BREAK           reduce using rule 68 (loopStatement -> forStatement_MD .)
    BREAK_AT        reduce using rule 68 (loopStatement -> forStatement_MD .)
    RCHAVE          reduce using rule 68 (loopStatement -> forStatement_MD .)
    INCREMENTO      reduce using rule 68 (loopStatement -> forStatement_MD .)
    DECREMENTO      reduce using rule 68 (loopStatement -> forStatement_MD .)
    MINUS           reduce using rule 68 (loopStatement -> forStatement_MD .)
    PLUS            reduce using rule 68 (loopStatement -> forStatement_MD .)
    NOT             reduce using rule 68 (loopStatement -> forStatement_MD .)
    SUSPEND         reduce using rule 68 (loopStatement -> forStatement_MD .)
    LCHAVE          reduce using rule 68 (loopStatement -> forStatement_MD .)
    PV              reduce using rule 68 (loopStatement -> forStatement_MD .)
    ELSE            reduce using rule 68 (loopStatement -> forStatement_MD .)
    MENOR           reduce using rule 68 (loopStatement -> forStatement_MD .)
    PONTO           reduce using rule 68 (loopStatement -> forStatement_MD .)
    AS              reduce using rule 68 (loopStatement -> forStatement_MD .)
    MAISIGUAL       reduce using rule 68 (loopStatement -> forStatement_MD .)
    MENOSIGUAL      reduce using rule 68 (loopStatement -> forStatement_MD .)
    MULTIGUAL       reduce using rule 68 (loopStatement -> forStatement_MD .)
    DIVIGUAL        reduce using rule 68 (loopStatement -> forStatement_MD .)
    MODIGUAL        reduce using rule 68 (loopStatement -> forStatement_MD .)
    MULT            reduce using rule 68 (loopStatement -> forStatement_MD .)
    DIVIDE          reduce using rule 68 (loopStatement -> forStatement_MD .)
    MOD             reduce using rule 68 (loopStatement -> forStatement_MD .)
    PONTOPONTO      reduce using rule 68 (loopStatement -> forStatement_MD .)
    ELVIS           reduce using rule 68 (loopStatement -> forStatement_MD .)
    IN              reduce using rule 68 (loopStatement -> forStatement_MD .)
    NOT_IN          reduce using rule 68 (loopStatement -> forStatement_MD .)
    IS              reduce using rule 68 (loopStatement -> forStatement_MD .)
    NOT_IS          reduce using rule 68 (loopStatement -> forStatement_MD .)
    MAIOR           reduce using rule 68 (loopStatement -> forStatement_MD .)
    MENORIGUAL      reduce using rule 68 (loopStatement -> forStatement_MD .)
    MAIORIGUAL      reduce using rule 68 (loopStatement -> forStatement_MD .)
    DIFERENTE       reduce using rule 68 (loopStatement -> forStatement_MD .)
    IDENTIDADE      reduce using rule 68 (loopStatement -> forStatement_MD .)
    IGUALDADE       reduce using rule 68 (loopStatement -> forStatement_MD .)
    SEMIDENTIDADE   reduce using rule 68 (loopStatement -> forStatement_MD .)
    AND             reduce using rule 68 (loopStatement -> forStatement_MD .)
    OR              reduce using rule 68 (loopStatement -> forStatement_MD .)
    COMMA           reduce using rule 68 (loopStatement -> forStatement_MD .)
    RPAREN          reduce using rule 68 (loopStatement -> forStatement_MD .)
    RCCT            reduce using rule 68 (loopStatement -> forStatement_MD .)


state 82

    (69) loopStatement -> forStatement_VD .

    FUN             reduce using rule 69 (loopStatement -> forStatement_VD .)
    FOR             reduce using rule 69 (loopStatement -> forStatement_VD .)
    WHILE           reduce using rule 69 (loopStatement -> forStatement_VD .)
    DO              reduce using rule 69 (loopStatement -> forStatement_VD .)
    ID              reduce using rule 69 (loopStatement -> forStatement_VD .)
    CROSSINLINE     reduce using rule 69 (loopStatement -> forStatement_VD .)
    IMPORT          reduce using rule 69 (loopStatement -> forStatement_VD .)
    INIT            reduce using rule 69 (loopStatement -> forStatement_VD .)
    NOINLINE        reduce using rule 69 (loopStatement -> forStatement_VD .)
    OUT             reduce using rule 69 (loopStatement -> forStatement_VD .)
    VARARG          reduce using rule 69 (loopStatement -> forStatement_VD .)
    WHERE           reduce using rule 69 (loopStatement -> forStatement_VD .)
    INT             reduce using rule 69 (loopStatement -> forStatement_VD .)
    FLOAT           reduce using rule 69 (loopStatement -> forStatement_VD .)
    BOOLEAN         reduce using rule 69 (loopStatement -> forStatement_VD .)
    STRING          reduce using rule 69 (loopStatement -> forStatement_VD .)
    ARRAY           reduce using rule 69 (loopStatement -> forStatement_VD .)
    CHAR            reduce using rule 69 (loopStatement -> forStatement_VD .)
    OBJECT          reduce using rule 69 (loopStatement -> forStatement_VD .)
    CONST           reduce using rule 69 (loopStatement -> forStatement_VD .)
    CONSTRUCTOR     reduce using rule 69 (loopStatement -> forStatement_VD .)
    EOF             reduce using rule 69 (loopStatement -> forStatement_VD .)
    FALSE           reduce using rule 69 (loopStatement -> forStatement_VD .)
    FUNCTION        reduce using rule 69 (loopStatement -> forStatement_VD .)
    NULL            reduce using rule 69 (loopStatement -> forStatement_VD .)
    NULLABLE        reduce using rule 69 (loopStatement -> forStatement_VD .)
    NUMBER          reduce using rule 69 (loopStatement -> forStatement_VD .)
    OPERATOR        reduce using rule 69 (loopStatement -> forStatement_VD .)
    SMARTCAST       reduce using rule 69 (loopStatement -> forStatement_VD .)
    THIS            reduce using rule 69 (loopStatement -> forStatement_VD .)
    TRUE            reduce using rule 69 (loopStatement -> forStatement_VD .)
    VAL             reduce using rule 69 (loopStatement -> forStatement_VD .)
    VAR             reduce using rule 69 (loopStatement -> forStatement_VD .)
    DOUBLE          reduce using rule 69 (loopStatement -> forStatement_VD .)
    WHEN            reduce using rule 69 (loopStatement -> forStatement_VD .)
    LONG            reduce using rule 69 (loopStatement -> forStatement_VD .)
    LPAREN          reduce using rule 69 (loopStatement -> forStatement_VD .)
    LITERAL_STRING  reduce using rule 69 (loopStatement -> forStatement_VD .)
    COLONCOLON      reduce using rule 69 (loopStatement -> forStatement_VD .)
    LCCT            reduce using rule 69 (loopStatement -> forStatement_VD .)
    IF              reduce using rule 69 (loopStatement -> forStatement_VD .)
    RETURN          reduce using rule 69 (loopStatement -> forStatement_VD .)
    RETURN_AT       reduce using rule 69 (loopStatement -> forStatement_VD .)
    CONTINUE        reduce using rule 69 (loopStatement -> forStatement_VD .)
    CONTINUE_AT     reduce using rule 69 (loopStatement -> forStatement_VD .)
    BREAK           reduce using rule 69 (loopStatement -> forStatement_VD .)
    BREAK_AT        reduce using rule 69 (loopStatement -> forStatement_VD .)
    RCHAVE          reduce using rule 69 (loopStatement -> forStatement_VD .)
    INCREMENTO      reduce using rule 69 (loopStatement -> forStatement_VD .)
    DECREMENTO      reduce using rule 69 (loopStatement -> forStatement_VD .)
    MINUS           reduce using rule 69 (loopStatement -> forStatement_VD .)
    PLUS            reduce using rule 69 (loopStatement -> forStatement_VD .)
    NOT             reduce using rule 69 (loopStatement -> forStatement_VD .)
    SUSPEND         reduce using rule 69 (loopStatement -> forStatement_VD .)
    LCHAVE          reduce using rule 69 (loopStatement -> forStatement_VD .)
    PV              reduce using rule 69 (loopStatement -> forStatement_VD .)
    ELSE            reduce using rule 69 (loopStatement -> forStatement_VD .)
    MENOR           reduce using rule 69 (loopStatement -> forStatement_VD .)
    PONTO           reduce using rule 69 (loopStatement -> forStatement_VD .)
    AS              reduce using rule 69 (loopStatement -> forStatement_VD .)
    MAISIGUAL       reduce using rule 69 (loopStatement -> forStatement_VD .)
    MENOSIGUAL      reduce using rule 69 (loopStatement -> forStatement_VD .)
    MULTIGUAL       reduce using rule 69 (loopStatement -> forStatement_VD .)
    DIVIGUAL        reduce using rule 69 (loopStatement -> forStatement_VD .)
    MODIGUAL        reduce using rule 69 (loopStatement -> forStatement_VD .)
    MULT            reduce using rule 69 (loopStatement -> forStatement_VD .)
    DIVIDE          reduce using rule 69 (loopStatement -> forStatement_VD .)
    MOD             reduce using rule 69 (loopStatement -> forStatement_VD .)
    PONTOPONTO      reduce using rule 69 (loopStatement -> forStatement_VD .)
    ELVIS           reduce using rule 69 (loopStatement -> forStatement_VD .)
    IN              reduce using rule 69 (loopStatement -> forStatement_VD .)
    NOT_IN          reduce using rule 69 (loopStatement -> forStatement_VD .)
    IS              reduce using rule 69 (loopStatement -> forStatement_VD .)
    NOT_IS          reduce using rule 69 (loopStatement -> forStatement_VD .)
    MAIOR           reduce using rule 69 (loopStatement -> forStatement_VD .)
    MENORIGUAL      reduce using rule 69 (loopStatement -> forStatement_VD .)
    MAIORIGUAL      reduce using rule 69 (loopStatement -> forStatement_VD .)
    DIFERENTE       reduce using rule 69 (loopStatement -> forStatement_VD .)
    IDENTIDADE      reduce using rule 69 (loopStatement -> forStatement_VD .)
    IGUALDADE       reduce using rule 69 (loopStatement -> forStatement_VD .)
    SEMIDENTIDADE   reduce using rule 69 (loopStatement -> forStatement_VD .)
    AND             reduce using rule 69 (loopStatement -> forStatement_VD .)
    OR              reduce using rule 69 (loopStatement -> forStatement_VD .)
    COMMA           reduce using rule 69 (loopStatement -> forStatement_VD .)
    RPAREN          reduce using rule 69 (loopStatement -> forStatement_VD .)
    RCCT            reduce using rule 69 (loopStatement -> forStatement_VD .)


state 83

    (70) loopStatement -> whileStatement .

    FUN             reduce using rule 70 (loopStatement -> whileStatement .)
    FOR             reduce using rule 70 (loopStatement -> whileStatement .)
    WHILE           reduce using rule 70 (loopStatement -> whileStatement .)
    DO              reduce using rule 70 (loopStatement -> whileStatement .)
    ID              reduce using rule 70 (loopStatement -> whileStatement .)
    CROSSINLINE     reduce using rule 70 (loopStatement -> whileStatement .)
    IMPORT          reduce using rule 70 (loopStatement -> whileStatement .)
    INIT            reduce using rule 70 (loopStatement -> whileStatement .)
    NOINLINE        reduce using rule 70 (loopStatement -> whileStatement .)
    OUT             reduce using rule 70 (loopStatement -> whileStatement .)
    VARARG          reduce using rule 70 (loopStatement -> whileStatement .)
    WHERE           reduce using rule 70 (loopStatement -> whileStatement .)
    INT             reduce using rule 70 (loopStatement -> whileStatement .)
    FLOAT           reduce using rule 70 (loopStatement -> whileStatement .)
    BOOLEAN         reduce using rule 70 (loopStatement -> whileStatement .)
    STRING          reduce using rule 70 (loopStatement -> whileStatement .)
    ARRAY           reduce using rule 70 (loopStatement -> whileStatement .)
    CHAR            reduce using rule 70 (loopStatement -> whileStatement .)
    OBJECT          reduce using rule 70 (loopStatement -> whileStatement .)
    CONST           reduce using rule 70 (loopStatement -> whileStatement .)
    CONSTRUCTOR     reduce using rule 70 (loopStatement -> whileStatement .)
    EOF             reduce using rule 70 (loopStatement -> whileStatement .)
    FALSE           reduce using rule 70 (loopStatement -> whileStatement .)
    FUNCTION        reduce using rule 70 (loopStatement -> whileStatement .)
    NULL            reduce using rule 70 (loopStatement -> whileStatement .)
    NULLABLE        reduce using rule 70 (loopStatement -> whileStatement .)
    NUMBER          reduce using rule 70 (loopStatement -> whileStatement .)
    OPERATOR        reduce using rule 70 (loopStatement -> whileStatement .)
    SMARTCAST       reduce using rule 70 (loopStatement -> whileStatement .)
    THIS            reduce using rule 70 (loopStatement -> whileStatement .)
    TRUE            reduce using rule 70 (loopStatement -> whileStatement .)
    VAL             reduce using rule 70 (loopStatement -> whileStatement .)
    VAR             reduce using rule 70 (loopStatement -> whileStatement .)
    DOUBLE          reduce using rule 70 (loopStatement -> whileStatement .)
    WHEN            reduce using rule 70 (loopStatement -> whileStatement .)
    LONG            reduce using rule 70 (loopStatement -> whileStatement .)
    LPAREN          reduce using rule 70 (loopStatement -> whileStatement .)
    LITERAL_STRING  reduce using rule 70 (loopStatement -> whileStatement .)
    COLONCOLON      reduce using rule 70 (loopStatement -> whileStatement .)
    LCCT            reduce using rule 70 (loopStatement -> whileStatement .)
    IF              reduce using rule 70 (loopStatement -> whileStatement .)
    RETURN          reduce using rule 70 (loopStatement -> whileStatement .)
    RETURN_AT       reduce using rule 70 (loopStatement -> whileStatement .)
    CONTINUE        reduce using rule 70 (loopStatement -> whileStatement .)
    CONTINUE_AT     reduce using rule 70 (loopStatement -> whileStatement .)
    BREAK           reduce using rule 70 (loopStatement -> whileStatement .)
    BREAK_AT        reduce using rule 70 (loopStatement -> whileStatement .)
    RCHAVE          reduce using rule 70 (loopStatement -> whileStatement .)
    INCREMENTO      reduce using rule 70 (loopStatement -> whileStatement .)
    DECREMENTO      reduce using rule 70 (loopStatement -> whileStatement .)
    MINUS           reduce using rule 70 (loopStatement -> whileStatement .)
    PLUS            reduce using rule 70 (loopStatement -> whileStatement .)
    NOT             reduce using rule 70 (loopStatement -> whileStatement .)
    SUSPEND         reduce using rule 70 (loopStatement -> whileStatement .)
    LCHAVE          reduce using rule 70 (loopStatement -> whileStatement .)
    PV              reduce using rule 70 (loopStatement -> whileStatement .)
    ELSE            reduce using rule 70 (loopStatement -> whileStatement .)
    MENOR           reduce using rule 70 (loopStatement -> whileStatement .)
    PONTO           reduce using rule 70 (loopStatement -> whileStatement .)
    AS              reduce using rule 70 (loopStatement -> whileStatement .)
    MAISIGUAL       reduce using rule 70 (loopStatement -> whileStatement .)
    MENOSIGUAL      reduce using rule 70 (loopStatement -> whileStatement .)
    MULTIGUAL       reduce using rule 70 (loopStatement -> whileStatement .)
    DIVIGUAL        reduce using rule 70 (loopStatement -> whileStatement .)
    MODIGUAL        reduce using rule 70 (loopStatement -> whileStatement .)
    MULT            reduce using rule 70 (loopStatement -> whileStatement .)
    DIVIDE          reduce using rule 70 (loopStatement -> whileStatement .)
    MOD             reduce using rule 70 (loopStatement -> whileStatement .)
    PONTOPONTO      reduce using rule 70 (loopStatement -> whileStatement .)
    ELVIS           reduce using rule 70 (loopStatement -> whileStatement .)
    IN              reduce using rule 70 (loopStatement -> whileStatement .)
    NOT_IN          reduce using rule 70 (loopStatement -> whileStatement .)
    IS              reduce using rule 70 (loopStatement -> whileStatement .)
    NOT_IS          reduce using rule 70 (loopStatement -> whileStatement .)
    MAIOR           reduce using rule 70 (loopStatement -> whileStatement .)
    MENORIGUAL      reduce using rule 70 (loopStatement -> whileStatement .)
    MAIORIGUAL      reduce using rule 70 (loopStatement -> whileStatement .)
    DIFERENTE       reduce using rule 70 (loopStatement -> whileStatement .)
    IDENTIDADE      reduce using rule 70 (loopStatement -> whileStatement .)
    IGUALDADE       reduce using rule 70 (loopStatement -> whileStatement .)
    SEMIDENTIDADE   reduce using rule 70 (loopStatement -> whileStatement .)
    AND             reduce using rule 70 (loopStatement -> whileStatement .)
    OR              reduce using rule 70 (loopStatement -> whileStatement .)
    COMMA           reduce using rule 70 (loopStatement -> whileStatement .)
    RPAREN          reduce using rule 70 (loopStatement -> whileStatement .)
    RCCT            reduce using rule 70 (loopStatement -> whileStatement .)


state 84

    (71) loopStatement -> doWhileStatement .

    FUN             reduce using rule 71 (loopStatement -> doWhileStatement .)
    FOR             reduce using rule 71 (loopStatement -> doWhileStatement .)
    WHILE           reduce using rule 71 (loopStatement -> doWhileStatement .)
    DO              reduce using rule 71 (loopStatement -> doWhileStatement .)
    ID              reduce using rule 71 (loopStatement -> doWhileStatement .)
    CROSSINLINE     reduce using rule 71 (loopStatement -> doWhileStatement .)
    IMPORT          reduce using rule 71 (loopStatement -> doWhileStatement .)
    INIT            reduce using rule 71 (loopStatement -> doWhileStatement .)
    NOINLINE        reduce using rule 71 (loopStatement -> doWhileStatement .)
    OUT             reduce using rule 71 (loopStatement -> doWhileStatement .)
    VARARG          reduce using rule 71 (loopStatement -> doWhileStatement .)
    WHERE           reduce using rule 71 (loopStatement -> doWhileStatement .)
    INT             reduce using rule 71 (loopStatement -> doWhileStatement .)
    FLOAT           reduce using rule 71 (loopStatement -> doWhileStatement .)
    BOOLEAN         reduce using rule 71 (loopStatement -> doWhileStatement .)
    STRING          reduce using rule 71 (loopStatement -> doWhileStatement .)
    ARRAY           reduce using rule 71 (loopStatement -> doWhileStatement .)
    CHAR            reduce using rule 71 (loopStatement -> doWhileStatement .)
    OBJECT          reduce using rule 71 (loopStatement -> doWhileStatement .)
    CONST           reduce using rule 71 (loopStatement -> doWhileStatement .)
    CONSTRUCTOR     reduce using rule 71 (loopStatement -> doWhileStatement .)
    EOF             reduce using rule 71 (loopStatement -> doWhileStatement .)
    FALSE           reduce using rule 71 (loopStatement -> doWhileStatement .)
    FUNCTION        reduce using rule 71 (loopStatement -> doWhileStatement .)
    NULL            reduce using rule 71 (loopStatement -> doWhileStatement .)
    NULLABLE        reduce using rule 71 (loopStatement -> doWhileStatement .)
    NUMBER          reduce using rule 71 (loopStatement -> doWhileStatement .)
    OPERATOR        reduce using rule 71 (loopStatement -> doWhileStatement .)
    SMARTCAST       reduce using rule 71 (loopStatement -> doWhileStatement .)
    THIS            reduce using rule 71 (loopStatement -> doWhileStatement .)
    TRUE            reduce using rule 71 (loopStatement -> doWhileStatement .)
    VAL             reduce using rule 71 (loopStatement -> doWhileStatement .)
    VAR             reduce using rule 71 (loopStatement -> doWhileStatement .)
    DOUBLE          reduce using rule 71 (loopStatement -> doWhileStatement .)
    WHEN            reduce using rule 71 (loopStatement -> doWhileStatement .)
    LONG            reduce using rule 71 (loopStatement -> doWhileStatement .)
    LPAREN          reduce using rule 71 (loopStatement -> doWhileStatement .)
    LITERAL_STRING  reduce using rule 71 (loopStatement -> doWhileStatement .)
    COLONCOLON      reduce using rule 71 (loopStatement -> doWhileStatement .)
    LCCT            reduce using rule 71 (loopStatement -> doWhileStatement .)
    IF              reduce using rule 71 (loopStatement -> doWhileStatement .)
    RETURN          reduce using rule 71 (loopStatement -> doWhileStatement .)
    RETURN_AT       reduce using rule 71 (loopStatement -> doWhileStatement .)
    CONTINUE        reduce using rule 71 (loopStatement -> doWhileStatement .)
    CONTINUE_AT     reduce using rule 71 (loopStatement -> doWhileStatement .)
    BREAK           reduce using rule 71 (loopStatement -> doWhileStatement .)
    BREAK_AT        reduce using rule 71 (loopStatement -> doWhileStatement .)
    RCHAVE          reduce using rule 71 (loopStatement -> doWhileStatement .)
    INCREMENTO      reduce using rule 71 (loopStatement -> doWhileStatement .)
    DECREMENTO      reduce using rule 71 (loopStatement -> doWhileStatement .)
    MINUS           reduce using rule 71 (loopStatement -> doWhileStatement .)
    PLUS            reduce using rule 71 (loopStatement -> doWhileStatement .)
    NOT             reduce using rule 71 (loopStatement -> doWhileStatement .)
    SUSPEND         reduce using rule 71 (loopStatement -> doWhileStatement .)
    LCHAVE          reduce using rule 71 (loopStatement -> doWhileStatement .)
    PV              reduce using rule 71 (loopStatement -> doWhileStatement .)
    ELSE            reduce using rule 71 (loopStatement -> doWhileStatement .)
    MENOR           reduce using rule 71 (loopStatement -> doWhileStatement .)
    PONTO           reduce using rule 71 (loopStatement -> doWhileStatement .)
    AS              reduce using rule 71 (loopStatement -> doWhileStatement .)
    MAISIGUAL       reduce using rule 71 (loopStatement -> doWhileStatement .)
    MENOSIGUAL      reduce using rule 71 (loopStatement -> doWhileStatement .)
    MULTIGUAL       reduce using rule 71 (loopStatement -> doWhileStatement .)
    DIVIGUAL        reduce using rule 71 (loopStatement -> doWhileStatement .)
    MODIGUAL        reduce using rule 71 (loopStatement -> doWhileStatement .)
    MULT            reduce using rule 71 (loopStatement -> doWhileStatement .)
    DIVIDE          reduce using rule 71 (loopStatement -> doWhileStatement .)
    MOD             reduce using rule 71 (loopStatement -> doWhileStatement .)
    PONTOPONTO      reduce using rule 71 (loopStatement -> doWhileStatement .)
    ELVIS           reduce using rule 71 (loopStatement -> doWhileStatement .)
    IN              reduce using rule 71 (loopStatement -> doWhileStatement .)
    NOT_IN          reduce using rule 71 (loopStatement -> doWhileStatement .)
    IS              reduce using rule 71 (loopStatement -> doWhileStatement .)
    NOT_IS          reduce using rule 71 (loopStatement -> doWhileStatement .)
    MAIOR           reduce using rule 71 (loopStatement -> doWhileStatement .)
    MENORIGUAL      reduce using rule 71 (loopStatement -> doWhileStatement .)
    MAIORIGUAL      reduce using rule 71 (loopStatement -> doWhileStatement .)
    DIFERENTE       reduce using rule 71 (loopStatement -> doWhileStatement .)
    IDENTIDADE      reduce using rule 71 (loopStatement -> doWhileStatement .)
    IGUALDADE       reduce using rule 71 (loopStatement -> doWhileStatement .)
    SEMIDENTIDADE   reduce using rule 71 (loopStatement -> doWhileStatement .)
    AND             reduce using rule 71 (loopStatement -> doWhileStatement .)
    OR              reduce using rule 71 (loopStatement -> doWhileStatement .)
    COMMA           reduce using rule 71 (loopStatement -> doWhileStatement .)
    RPAREN          reduce using rule 71 (loopStatement -> doWhileStatement .)
    RCCT            reduce using rule 71 (loopStatement -> doWhileStatement .)


state 85

    (82) expression -> disjunction .

    INCREMENTO      reduce using rule 82 (expression -> disjunction .)
    DECREMENTO      reduce using rule 82 (expression -> disjunction .)
    MENOR           reduce using rule 82 (expression -> disjunction .)
    LCCT            reduce using rule 82 (expression -> disjunction .)
    LPAREN          reduce using rule 82 (expression -> disjunction .)
    COLONCOLON      reduce using rule 82 (expression -> disjunction .)
    RCHAVE          reduce using rule 82 (expression -> disjunction .)
    PONTO           reduce using rule 82 (expression -> disjunction .)
    AS              reduce using rule 82 (expression -> disjunction .)
    MAISIGUAL       reduce using rule 82 (expression -> disjunction .)
    MENOSIGUAL      reduce using rule 82 (expression -> disjunction .)
    MULTIGUAL       reduce using rule 82 (expression -> disjunction .)
    DIVIGUAL        reduce using rule 82 (expression -> disjunction .)
    MODIGUAL        reduce using rule 82 (expression -> disjunction .)
    MULT            reduce using rule 82 (expression -> disjunction .)
    DIVIDE          reduce using rule 82 (expression -> disjunction .)
    MOD             reduce using rule 82 (expression -> disjunction .)
    PLUS            reduce using rule 82 (expression -> disjunction .)
    MINUS           reduce using rule 82 (expression -> disjunction .)
    PONTOPONTO      reduce using rule 82 (expression -> disjunction .)
    ID              reduce using rule 82 (expression -> disjunction .)
    CROSSINLINE     reduce using rule 82 (expression -> disjunction .)
    IMPORT          reduce using rule 82 (expression -> disjunction .)
    INIT            reduce using rule 82 (expression -> disjunction .)
    NOINLINE        reduce using rule 82 (expression -> disjunction .)
    OUT             reduce using rule 82 (expression -> disjunction .)
    VARARG          reduce using rule 82 (expression -> disjunction .)
    WHERE           reduce using rule 82 (expression -> disjunction .)
    INT             reduce using rule 82 (expression -> disjunction .)
    FLOAT           reduce using rule 82 (expression -> disjunction .)
    BOOLEAN         reduce using rule 82 (expression -> disjunction .)
    STRING          reduce using rule 82 (expression -> disjunction .)
    ARRAY           reduce using rule 82 (expression -> disjunction .)
    CHAR            reduce using rule 82 (expression -> disjunction .)
    OBJECT          reduce using rule 82 (expression -> disjunction .)
    CONST           reduce using rule 82 (expression -> disjunction .)
    CONSTRUCTOR     reduce using rule 82 (expression -> disjunction .)
    EOF             reduce using rule 82 (expression -> disjunction .)
    FALSE           reduce using rule 82 (expression -> disjunction .)
    FUNCTION        reduce using rule 82 (expression -> disjunction .)
    NULL            reduce using rule 82 (expression -> disjunction .)
    NULLABLE        reduce using rule 82 (expression -> disjunction .)
    NUMBER          reduce using rule 82 (expression -> disjunction .)
    OPERATOR        reduce using rule 82 (expression -> disjunction .)
    SMARTCAST       reduce using rule 82 (expression -> disjunction .)
    THIS            reduce using rule 82 (expression -> disjunction .)
    TRUE            reduce using rule 82 (expression -> disjunction .)
    VAL             reduce using rule 82 (expression -> disjunction .)
    VAR             reduce using rule 82 (expression -> disjunction .)
    DOUBLE          reduce using rule 82 (expression -> disjunction .)
    WHEN            reduce using rule 82 (expression -> disjunction .)
    LONG            reduce using rule 82 (expression -> disjunction .)
    ELVIS           reduce using rule 82 (expression -> disjunction .)
    IN              reduce using rule 82 (expression -> disjunction .)
    NOT_IN          reduce using rule 82 (expression -> disjunction .)
    IS              reduce using rule 82 (expression -> disjunction .)
    NOT_IS          reduce using rule 82 (expression -> disjunction .)
    MAIOR           reduce using rule 82 (expression -> disjunction .)
    MENORIGUAL      reduce using rule 82 (expression -> disjunction .)
    MAIORIGUAL      reduce using rule 82 (expression -> disjunction .)
    DIFERENTE       reduce using rule 82 (expression -> disjunction .)
    IDENTIDADE      reduce using rule 82 (expression -> disjunction .)
    IGUALDADE       reduce using rule 82 (expression -> disjunction .)
    SEMIDENTIDADE   reduce using rule 82 (expression -> disjunction .)
    AND             reduce using rule 82 (expression -> disjunction .)
    OR              reduce using rule 82 (expression -> disjunction .)
    FUN             reduce using rule 82 (expression -> disjunction .)
    FOR             reduce using rule 82 (expression -> disjunction .)
    WHILE           reduce using rule 82 (expression -> disjunction .)
    DO              reduce using rule 82 (expression -> disjunction .)
    LITERAL_STRING  reduce using rule 82 (expression -> disjunction .)
    IF              reduce using rule 82 (expression -> disjunction .)
    RETURN          reduce using rule 82 (expression -> disjunction .)
    RETURN_AT       reduce using rule 82 (expression -> disjunction .)
    CONTINUE        reduce using rule 82 (expression -> disjunction .)
    CONTINUE_AT     reduce using rule 82 (expression -> disjunction .)
    BREAK           reduce using rule 82 (expression -> disjunction .)
    BREAK_AT        reduce using rule 82 (expression -> disjunction .)
    NOT             reduce using rule 82 (expression -> disjunction .)
    SUSPEND         reduce using rule 82 (expression -> disjunction .)
    COMMA           reduce using rule 82 (expression -> disjunction .)
    RPAREN          reduce using rule 82 (expression -> disjunction .)
    LCHAVE          reduce using rule 82 (expression -> disjunction .)
    PV              reduce using rule 82 (expression -> disjunction .)
    ELSE            reduce using rule 82 (expression -> disjunction .)
    RCCT            reduce using rule 82 (expression -> disjunction .)


state 86

    (125) directlyAssignableExpression -> postfixUnaryExpression . assignableSuffix
    (110) prefixUnaryExpression -> postfixUnaryExpression .
    (132) assignableSuffix -> . typeArguments
    (133) assignableSuffix -> . indexingSuffix
    (134) assignableSuffix -> . navigationSuffix
    (148) typeArguments -> . MENOR ta MAIOR
    (149) typeArguments -> . MENOR MAIOR
    (135) indexingSuffix -> . LCCT isuf RCCT
    (136) indexingSuffix -> . LCCT RCCT
    (139) navigationSuffix -> . memberAccessOperator simpleIdentifier CLASS
    (140) navigationSuffix -> . memberAccessOperator parenthesizedExpression CLASS
    (257) memberAccessOperator -> . safeNav
    (258) memberAccessOperator -> . COLONCOLON
    (259) safeNav -> . PONTO

  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for COLONCOLON resolved as shift
  ! shift/reduce conflict for PONTO resolved as shift
    INCREMENTO      reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    DECREMENTO      reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    LPAREN          reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    RCHAVE          reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    AS              reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    MAISIGUAL       reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    MENOSIGUAL      reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    MULTIGUAL       reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    DIVIGUAL        reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    MODIGUAL        reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    MULT            reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    DIVIDE          reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    MOD             reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    PLUS            reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    MINUS           reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    PONTOPONTO      reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    ID              reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    CROSSINLINE     reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    IMPORT          reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    INIT            reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOINLINE        reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    OUT             reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    VARARG          reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    WHERE           reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    INT             reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    FLOAT           reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    BOOLEAN         reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    STRING          reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    ARRAY           reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    CHAR            reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    OBJECT          reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONST           reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONSTRUCTOR     reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    EOF             reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    FALSE           reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    FUNCTION        reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    NULL            reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    NULLABLE        reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    NUMBER          reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    OPERATOR        reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    SMARTCAST       reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    THIS            reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    TRUE            reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    VAL             reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    VAR             reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    DOUBLE          reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    WHEN            reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    LONG            reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    ELVIS           reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    IN              reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOT_IN          reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    IS              reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOT_IS          reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    MAIOR           reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    MENORIGUAL      reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    MAIORIGUAL      reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    DIFERENTE       reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    IDENTIDADE      reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    IGUALDADE       reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    SEMIDENTIDADE   reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    AND             reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    OR              reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    FUN             reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    FOR             reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    WHILE           reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    DO              reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    LITERAL_STRING  reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    IF              reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    RETURN          reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    RETURN_AT       reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONTINUE        reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONTINUE_AT     reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    BREAK           reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    BREAK_AT        reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOT             reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    SUSPEND         reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    LCHAVE          reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    RPAREN          reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    PV              reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    ELSE            reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    COMMA           reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    RCCT            reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    MENOR           shift and go to state 146
    LCCT            shift and go to state 181
    COLONCOLON      shift and go to state 184
    PONTO           shift and go to state 185

  ! MENOR           [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! LCCT            [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! COLONCOLON      [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! PONTO           [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]

    assignableSuffix               shift and go to state 177
    typeArguments                  shift and go to state 178
    indexingSuffix                 shift and go to state 179
    navigationSuffix               shift and go to state 180
    memberAccessOperator           shift and go to state 182
    safeNav                        shift and go to state 183

state 87

    (127) directlyAssignableExpression -> parenthesizedDirectlyAssignableExpression .

    IGUALDADE       reduce using rule 127 (directlyAssignableExpression -> parenthesizedDirectlyAssignableExpression .)
    RPAREN          reduce using rule 127 (directlyAssignableExpression -> parenthesizedDirectlyAssignableExpression .)


state 88

    (129) assignableExpression -> prefixUnaryExpression .
    (107) asExpression -> prefixUnaryExpression .
    (108) asExpression -> prefixUnaryExpression . asOperator type
    (248) asOperator -> . AS
    (249) asOperator -> . AS asOperator

  ! reduce/reduce conflict for MAISIGUAL resolved using rule 107 (asExpression -> prefixUnaryExpression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 107 (asExpression -> prefixUnaryExpression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 107 (asExpression -> prefixUnaryExpression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 107 (asExpression -> prefixUnaryExpression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 107 (asExpression -> prefixUnaryExpression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 107 (asExpression -> prefixUnaryExpression .)
  ! shift/reduce conflict for AS resolved as shift
    INCREMENTO      reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    DECREMENTO      reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    MENOR           reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    LCCT            reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    LPAREN          reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    COLONCOLON      reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    RCHAVE          reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    PONTO           reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    MAISIGUAL       reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    MENOSIGUAL      reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    MULTIGUAL       reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    DIVIGUAL        reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    MODIGUAL        reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    MULT            reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    DIVIDE          reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    MOD             reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    PLUS            reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    MINUS           reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    PONTOPONTO      reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    ID              reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    CROSSINLINE     reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    IMPORT          reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    INIT            reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    NOINLINE        reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    OUT             reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    VARARG          reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    WHERE           reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    INT             reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    FLOAT           reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    BOOLEAN         reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    STRING          reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    ARRAY           reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    CHAR            reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    OBJECT          reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    CONST           reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    CONSTRUCTOR     reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    EOF             reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    FALSE           reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    FUNCTION        reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    NULL            reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    NULLABLE        reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    NUMBER          reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    OPERATOR        reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    SMARTCAST       reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    THIS            reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    TRUE            reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    VAL             reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    VAR             reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    DOUBLE          reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    WHEN            reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    LONG            reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    ELVIS           reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    IN              reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    NOT_IN          reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    IS              reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    NOT_IS          reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    MAIOR           reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    MENORIGUAL      reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    MAIORIGUAL      reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    DIFERENTE       reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    IDENTIDADE      reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    IGUALDADE       reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    SEMIDENTIDADE   reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    AND             reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    OR              reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    FUN             reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    FOR             reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    WHILE           reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    DO              reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    LITERAL_STRING  reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    IF              reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    RETURN          reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    RETURN_AT       reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    CONTINUE        reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    CONTINUE_AT     reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    BREAK           reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    BREAK_AT        reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    NOT             reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    SUSPEND         reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    LCHAVE          reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    RPAREN          reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    PV              reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    ELSE            reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    COMMA           reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    RCCT            reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    AS              shift and go to state 187

  ! MAISIGUAL       [ reduce using rule 129 (assignableExpression -> prefixUnaryExpression .) ]
  ! MENOSIGUAL      [ reduce using rule 129 (assignableExpression -> prefixUnaryExpression .) ]
  ! MULTIGUAL       [ reduce using rule 129 (assignableExpression -> prefixUnaryExpression .) ]
  ! DIVIGUAL        [ reduce using rule 129 (assignableExpression -> prefixUnaryExpression .) ]
  ! MODIGUAL        [ reduce using rule 129 (assignableExpression -> prefixUnaryExpression .) ]
  ! RPAREN          [ reduce using rule 129 (assignableExpression -> prefixUnaryExpression .) ]
  ! AS              [ reduce using rule 107 (asExpression -> prefixUnaryExpression .) ]

    asOperator                     shift and go to state 186

state 89

    (130) assignableExpression -> parenthesizedAssignableExpression .

    MAISIGUAL       reduce using rule 130 (assignableExpression -> parenthesizedAssignableExpression .)
    MENOSIGUAL      reduce using rule 130 (assignableExpression -> parenthesizedAssignableExpression .)
    MULTIGUAL       reduce using rule 130 (assignableExpression -> parenthesizedAssignableExpression .)
    DIVIGUAL        reduce using rule 130 (assignableExpression -> parenthesizedAssignableExpression .)
    MODIGUAL        reduce using rule 130 (assignableExpression -> parenthesizedAssignableExpression .)
    RPAREN          reduce using rule 130 (assignableExpression -> parenthesizedAssignableExpression .)


state 90

    (72) forStatement_MD -> FOR . LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (73) forStatement_MD -> FOR . LPAREN multiVariableDeclaration IN expression RPAREN
    (74) forStatement_VD -> FOR . LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (75) forStatement_VD -> FOR . LPAREN variableDeclaration IN expression RPAREN

    LPAREN          shift and go to state 188


state 91

    (128) parenthesizedDirectlyAssignableExpression -> LPAREN . directlyAssignableExpression RPAREN
    (131) parenthesizedAssignableExpression -> LPAREN . assignableExpression RPAREN
    (167) parenthesizedExpression -> LPAREN . expression RPAREN
    (125) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (126) directlyAssignableExpression -> . simpleIdentifier
    (127) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (129) assignableExpression -> . prefixUnaryExpression
    (130) assignableExpression -> . parenthesizedAssignableExpression
    (82) expression -> . disjunction
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (128) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (131) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (33) typeModifier -> . SUSPEND
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    LPAREN          shift and go to state 91
    LITERAL_STRING  shift and go to state 99
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    SUSPEND         shift and go to state 57

    directlyAssignableExpression   shift and go to state 189
    assignableExpression           shift and go to state 190
    expression                     shift and go to state 191
    postfixUnaryExpression         shift and go to state 86
    simpleIdentifier               shift and go to state 78
    parenthesizedDirectlyAssignableExpression shift and go to state 87
    prefixUnaryExpression          shift and go to state 88
    parenthesizedAssignableExpression shift and go to state 89
    disjunction                    shift and go to state 85
    primaryExpression              shift and go to state 95
    preue                          shift and go to state 96
    conjunction                    shift and go to state 94
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    unaryPrefix                    shift and go to state 105
    equality                       shift and go to state 97
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    comparison                     shift and go to state 106
    typeModifier                   shift and go to state 122
    infixOperation                 shift and go to state 121
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133

state 92

    (76) whileStatement -> WHILE . LPAREN expression RPAREN controlStructureBody
    (77) whileStatement -> WHILE . LPAREN expression RPAREN PV

    LPAREN          shift and go to state 192


state 93

    (78) doWhileStatement -> DO . controlStructureBody WHILE LPAREN expression RPAREN
    (79) doWhileStatement -> DO . WHILE LPAREN expression RPAREN
    (65) controlStructureBody -> . block
    (66) controlStructureBody -> . statement
    (67) block -> . LCHAVE statements RCHAVE
    (61) statement -> . functionDeclaration
    (62) statement -> . assignment
    (63) statement -> . loopStatement
    (64) statement -> . expression
    (3) functionDeclaration -> . FUN simpleIdentifier functionValueParameters fd2 fd3
    (80) assignment -> . directlyAssignableExpression IGUALDADE expression
    (81) assignment -> . assignableExpression assignmentAndOperator expression
    (68) loopStatement -> . forStatement_MD
    (69) loopStatement -> . forStatement_VD
    (70) loopStatement -> . whileStatement
    (71) loopStatement -> . doWhileStatement
    (82) expression -> . disjunction
    (125) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (126) directlyAssignableExpression -> . simpleIdentifier
    (127) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (129) assignableExpression -> . prefixUnaryExpression
    (130) assignableExpression -> . parenthesizedAssignableExpression
    (72) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (73) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (74) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (75) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (76) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (77) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (78) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (79) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (128) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (131) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (33) typeModifier -> . SUSPEND
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type

    WHILE           shift and go to state 194
    LCHAVE          shift and go to state 49
    FUN             shift and go to state 77
    FOR             shift and go to state 90
    DO              shift and go to state 93
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    LPAREN          shift and go to state 91
    LITERAL_STRING  shift and go to state 99
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    SUSPEND         shift and go to state 57

    controlStructureBody           shift and go to state 193
    expression                     shift and go to state 76
    block                          shift and go to state 195
    statement                      shift and go to state 196
    functionDeclaration            shift and go to state 73
    assignment                     shift and go to state 74
    loopStatement                  shift and go to state 75
    simpleIdentifier               shift and go to state 78
    directlyAssignableExpression   shift and go to state 79
    assignableExpression           shift and go to state 80
    forStatement_MD                shift and go to state 81
    forStatement_VD                shift and go to state 82
    whileStatement                 shift and go to state 83
    doWhileStatement               shift and go to state 84
    disjunction                    shift and go to state 85
    postfixUnaryExpression         shift and go to state 86
    parenthesizedDirectlyAssignableExpression shift and go to state 87
    prefixUnaryExpression          shift and go to state 88
    parenthesizedAssignableExpression shift and go to state 89
    conjunction                    shift and go to state 94
    primaryExpression              shift and go to state 95
    preue                          shift and go to state 96
    equality                       shift and go to state 97
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    unaryPrefix                    shift and go to state 105
    comparison                     shift and go to state 106
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    infixOperation                 shift and go to state 121
    typeModifier                   shift and go to state 122
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133

state 94

    (83) disjunction -> conjunction .
    (84) disjunction -> conjunction . OR disjunction

  ! shift/reduce conflict for OR resolved as shift
    INCREMENTO      reduce using rule 83 (disjunction -> conjunction .)
    DECREMENTO      reduce using rule 83 (disjunction -> conjunction .)
    MENOR           reduce using rule 83 (disjunction -> conjunction .)
    LCCT            reduce using rule 83 (disjunction -> conjunction .)
    LPAREN          reduce using rule 83 (disjunction -> conjunction .)
    COLONCOLON      reduce using rule 83 (disjunction -> conjunction .)
    RCHAVE          reduce using rule 83 (disjunction -> conjunction .)
    PONTO           reduce using rule 83 (disjunction -> conjunction .)
    AS              reduce using rule 83 (disjunction -> conjunction .)
    MAISIGUAL       reduce using rule 83 (disjunction -> conjunction .)
    MENOSIGUAL      reduce using rule 83 (disjunction -> conjunction .)
    MULTIGUAL       reduce using rule 83 (disjunction -> conjunction .)
    DIVIGUAL        reduce using rule 83 (disjunction -> conjunction .)
    MODIGUAL        reduce using rule 83 (disjunction -> conjunction .)
    MULT            reduce using rule 83 (disjunction -> conjunction .)
    DIVIDE          reduce using rule 83 (disjunction -> conjunction .)
    MOD             reduce using rule 83 (disjunction -> conjunction .)
    PLUS            reduce using rule 83 (disjunction -> conjunction .)
    MINUS           reduce using rule 83 (disjunction -> conjunction .)
    PONTOPONTO      reduce using rule 83 (disjunction -> conjunction .)
    ID              reduce using rule 83 (disjunction -> conjunction .)
    CROSSINLINE     reduce using rule 83 (disjunction -> conjunction .)
    IMPORT          reduce using rule 83 (disjunction -> conjunction .)
    INIT            reduce using rule 83 (disjunction -> conjunction .)
    NOINLINE        reduce using rule 83 (disjunction -> conjunction .)
    OUT             reduce using rule 83 (disjunction -> conjunction .)
    VARARG          reduce using rule 83 (disjunction -> conjunction .)
    WHERE           reduce using rule 83 (disjunction -> conjunction .)
    INT             reduce using rule 83 (disjunction -> conjunction .)
    FLOAT           reduce using rule 83 (disjunction -> conjunction .)
    BOOLEAN         reduce using rule 83 (disjunction -> conjunction .)
    STRING          reduce using rule 83 (disjunction -> conjunction .)
    ARRAY           reduce using rule 83 (disjunction -> conjunction .)
    CHAR            reduce using rule 83 (disjunction -> conjunction .)
    OBJECT          reduce using rule 83 (disjunction -> conjunction .)
    CONST           reduce using rule 83 (disjunction -> conjunction .)
    CONSTRUCTOR     reduce using rule 83 (disjunction -> conjunction .)
    EOF             reduce using rule 83 (disjunction -> conjunction .)
    FALSE           reduce using rule 83 (disjunction -> conjunction .)
    FUNCTION        reduce using rule 83 (disjunction -> conjunction .)
    NULL            reduce using rule 83 (disjunction -> conjunction .)
    NULLABLE        reduce using rule 83 (disjunction -> conjunction .)
    NUMBER          reduce using rule 83 (disjunction -> conjunction .)
    OPERATOR        reduce using rule 83 (disjunction -> conjunction .)
    SMARTCAST       reduce using rule 83 (disjunction -> conjunction .)
    THIS            reduce using rule 83 (disjunction -> conjunction .)
    TRUE            reduce using rule 83 (disjunction -> conjunction .)
    VAL             reduce using rule 83 (disjunction -> conjunction .)
    VAR             reduce using rule 83 (disjunction -> conjunction .)
    DOUBLE          reduce using rule 83 (disjunction -> conjunction .)
    WHEN            reduce using rule 83 (disjunction -> conjunction .)
    LONG            reduce using rule 83 (disjunction -> conjunction .)
    ELVIS           reduce using rule 83 (disjunction -> conjunction .)
    IN              reduce using rule 83 (disjunction -> conjunction .)
    NOT_IN          reduce using rule 83 (disjunction -> conjunction .)
    IS              reduce using rule 83 (disjunction -> conjunction .)
    NOT_IS          reduce using rule 83 (disjunction -> conjunction .)
    MAIOR           reduce using rule 83 (disjunction -> conjunction .)
    MENORIGUAL      reduce using rule 83 (disjunction -> conjunction .)
    MAIORIGUAL      reduce using rule 83 (disjunction -> conjunction .)
    DIFERENTE       reduce using rule 83 (disjunction -> conjunction .)
    IDENTIDADE      reduce using rule 83 (disjunction -> conjunction .)
    IGUALDADE       reduce using rule 83 (disjunction -> conjunction .)
    SEMIDENTIDADE   reduce using rule 83 (disjunction -> conjunction .)
    AND             reduce using rule 83 (disjunction -> conjunction .)
    FUN             reduce using rule 83 (disjunction -> conjunction .)
    FOR             reduce using rule 83 (disjunction -> conjunction .)
    WHILE           reduce using rule 83 (disjunction -> conjunction .)
    DO              reduce using rule 83 (disjunction -> conjunction .)
    LITERAL_STRING  reduce using rule 83 (disjunction -> conjunction .)
    IF              reduce using rule 83 (disjunction -> conjunction .)
    RETURN          reduce using rule 83 (disjunction -> conjunction .)
    RETURN_AT       reduce using rule 83 (disjunction -> conjunction .)
    CONTINUE        reduce using rule 83 (disjunction -> conjunction .)
    CONTINUE_AT     reduce using rule 83 (disjunction -> conjunction .)
    BREAK           reduce using rule 83 (disjunction -> conjunction .)
    BREAK_AT        reduce using rule 83 (disjunction -> conjunction .)
    NOT             reduce using rule 83 (disjunction -> conjunction .)
    SUSPEND         reduce using rule 83 (disjunction -> conjunction .)
    COMMA           reduce using rule 83 (disjunction -> conjunction .)
    RPAREN          reduce using rule 83 (disjunction -> conjunction .)
    LCHAVE          reduce using rule 83 (disjunction -> conjunction .)
    PV              reduce using rule 83 (disjunction -> conjunction .)
    ELSE            reduce using rule 83 (disjunction -> conjunction .)
    RCCT            reduce using rule 83 (disjunction -> conjunction .)
    OR              shift and go to state 197

  ! OR              [ reduce using rule 83 (disjunction -> conjunction .) ]


state 95

    (116) postfixUnaryExpression -> primaryExpression .
    (117) postfixUnaryExpression -> primaryExpression . posue
    (118) posue -> . postfixUnarySuffix
    (119) posue -> . postfixUnarySuffix posue
    (120) postfixUnarySuffix -> . postfixUnaryOperator
    (121) postfixUnarySuffix -> . typeArguments
    (122) postfixUnarySuffix -> . callSuffix
    (123) postfixUnarySuffix -> . indexingSuffix
    (124) postfixUnarySuffix -> . navigationSuffix
    (255) postfixUnaryOperator -> . INCREMENTO
    (256) postfixUnaryOperator -> . DECREMENTO
    (148) typeArguments -> . MENOR ta MAIOR
    (149) typeArguments -> . MENOR MAIOR
    (141) callSuffix -> . typeArguments valueArguments annotatedLambda
    (142) callSuffix -> . valueArguments annotatedLambda
    (143) callSuffix -> . typeArguments annotatedLambda
    (144) callSuffix -> . annotatedLambda
    (145) callSuffix -> . typeArguments valueArguments
    (146) callSuffix -> . valueArguments
    (135) indexingSuffix -> . LCCT isuf RCCT
    (136) indexingSuffix -> . LCCT RCCT
    (139) navigationSuffix -> . memberAccessOperator simpleIdentifier CLASS
    (140) navigationSuffix -> . memberAccessOperator parenthesizedExpression CLASS
    (152) valueArguments -> . LPAREN RPAREN
    (153) valueArguments -> . LPAREN vas RPAREN
    (147) annotatedLambda -> . lambdaLiteral
    (257) memberAccessOperator -> . safeNav
    (258) memberAccessOperator -> . COLONCOLON
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (259) safeNav -> . PONTO

  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for COLONCOLON resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for PONTO resolved as shift
    AS              reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    MAISIGUAL       reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    MENOSIGUAL      reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    MULTIGUAL       reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    DIVIGUAL        reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    MODIGUAL        reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    MULT            reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    DIVIDE          reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    MOD             reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    PLUS            reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    MINUS           reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    PONTOPONTO      reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    ID              reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    CROSSINLINE     reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    IMPORT          reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    INIT            reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    NOINLINE        reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    OUT             reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    VARARG          reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    WHERE           reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    INT             reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    FLOAT           reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    BOOLEAN         reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    STRING          reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    ARRAY           reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    CHAR            reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    OBJECT          reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    CONST           reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    CONSTRUCTOR     reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    EOF             reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    FALSE           reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    FUNCTION        reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    NULL            reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    NULLABLE        reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    NUMBER          reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    OPERATOR        reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    SMARTCAST       reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    THIS            reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    TRUE            reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    VAL             reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    VAR             reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    DOUBLE          reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    WHEN            reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    LONG            reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    ELVIS           reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    IN              reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    NOT_IN          reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    IS              reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    NOT_IS          reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    MAIOR           reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    MENORIGUAL      reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    MAIORIGUAL      reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    DIFERENTE       reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    IDENTIDADE      reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    IGUALDADE       reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    SEMIDENTIDADE   reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    AND             reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    OR              reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    FUN             reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    FOR             reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    WHILE           reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    DO              reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    LITERAL_STRING  reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    IF              reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    RETURN          reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    RETURN_AT       reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    CONTINUE        reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    CONTINUE_AT     reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    BREAK           reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    BREAK_AT        reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    NOT             reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    SUSPEND         reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    COMMA           reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    RPAREN          reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    LCHAVE          reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    PV              reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    ELSE            reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    RCCT            reduce using rule 116 (postfixUnaryExpression -> primaryExpression .)
    INCREMENTO      shift and go to state 205
    DECREMENTO      shift and go to state 206
    MENOR           shift and go to state 146
    LCCT            shift and go to state 181
    LPAREN          shift and go to state 209
    COLONCOLON      shift and go to state 184
    RCHAVE          shift and go to state 71
    PONTO           shift and go to state 185

  ! INCREMENTO      [ reduce using rule 116 (postfixUnaryExpression -> primaryExpression .) ]
  ! DECREMENTO      [ reduce using rule 116 (postfixUnaryExpression -> primaryExpression .) ]
  ! MENOR           [ reduce using rule 116 (postfixUnaryExpression -> primaryExpression .) ]
  ! LCCT            [ reduce using rule 116 (postfixUnaryExpression -> primaryExpression .) ]
  ! LPAREN          [ reduce using rule 116 (postfixUnaryExpression -> primaryExpression .) ]
  ! COLONCOLON      [ reduce using rule 116 (postfixUnaryExpression -> primaryExpression .) ]
  ! RCHAVE          [ reduce using rule 116 (postfixUnaryExpression -> primaryExpression .) ]
  ! PONTO           [ reduce using rule 116 (postfixUnaryExpression -> primaryExpression .) ]

    posue                          shift and go to state 198
    postfixUnarySuffix             shift and go to state 199
    postfixUnaryOperator           shift and go to state 200
    typeArguments                  shift and go to state 201
    callSuffix                     shift and go to state 202
    indexingSuffix                 shift and go to state 203
    navigationSuffix               shift and go to state 204
    valueArguments                 shift and go to state 207
    annotatedLambda                shift and go to state 208
    memberAccessOperator           shift and go to state 182
    lambdaLiteral                  shift and go to state 210
    safeNav                        shift and go to state 183

state 96

    (109) prefixUnaryExpression -> preue . postfixUnaryExpression
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (82) expression -> . disjunction
    (33) typeModifier -> . SUSPEND
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT

    LITERAL_STRING  shift and go to state 99
    LPAREN          shift and go to state 152
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127

    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 211
    primaryExpression              shift and go to state 95
    parenthesizedExpression        shift and go to state 98
    simpleIdentifier               shift and go to state 149
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    expression                     shift and go to state 212
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122
    disjunction                    shift and go to state 85
    conjunction                    shift and go to state 94
    equality                       shift and go to state 97
    comparison                     shift and go to state 106
    infixOperation                 shift and go to state 121
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133
    prefixUnaryExpression          shift and go to state 150
    unaryPrefix                    shift and go to state 105
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120

state 97

    (85) conjunction -> equality .
    (86) conjunction -> equality . AND conjunction

  ! shift/reduce conflict for AND resolved as shift
    INCREMENTO      reduce using rule 85 (conjunction -> equality .)
    DECREMENTO      reduce using rule 85 (conjunction -> equality .)
    MENOR           reduce using rule 85 (conjunction -> equality .)
    LCCT            reduce using rule 85 (conjunction -> equality .)
    LPAREN          reduce using rule 85 (conjunction -> equality .)
    COLONCOLON      reduce using rule 85 (conjunction -> equality .)
    RCHAVE          reduce using rule 85 (conjunction -> equality .)
    PONTO           reduce using rule 85 (conjunction -> equality .)
    AS              reduce using rule 85 (conjunction -> equality .)
    MAISIGUAL       reduce using rule 85 (conjunction -> equality .)
    MENOSIGUAL      reduce using rule 85 (conjunction -> equality .)
    MULTIGUAL       reduce using rule 85 (conjunction -> equality .)
    DIVIGUAL        reduce using rule 85 (conjunction -> equality .)
    MODIGUAL        reduce using rule 85 (conjunction -> equality .)
    MULT            reduce using rule 85 (conjunction -> equality .)
    DIVIDE          reduce using rule 85 (conjunction -> equality .)
    MOD             reduce using rule 85 (conjunction -> equality .)
    PLUS            reduce using rule 85 (conjunction -> equality .)
    MINUS           reduce using rule 85 (conjunction -> equality .)
    PONTOPONTO      reduce using rule 85 (conjunction -> equality .)
    ID              reduce using rule 85 (conjunction -> equality .)
    CROSSINLINE     reduce using rule 85 (conjunction -> equality .)
    IMPORT          reduce using rule 85 (conjunction -> equality .)
    INIT            reduce using rule 85 (conjunction -> equality .)
    NOINLINE        reduce using rule 85 (conjunction -> equality .)
    OUT             reduce using rule 85 (conjunction -> equality .)
    VARARG          reduce using rule 85 (conjunction -> equality .)
    WHERE           reduce using rule 85 (conjunction -> equality .)
    INT             reduce using rule 85 (conjunction -> equality .)
    FLOAT           reduce using rule 85 (conjunction -> equality .)
    BOOLEAN         reduce using rule 85 (conjunction -> equality .)
    STRING          reduce using rule 85 (conjunction -> equality .)
    ARRAY           reduce using rule 85 (conjunction -> equality .)
    CHAR            reduce using rule 85 (conjunction -> equality .)
    OBJECT          reduce using rule 85 (conjunction -> equality .)
    CONST           reduce using rule 85 (conjunction -> equality .)
    CONSTRUCTOR     reduce using rule 85 (conjunction -> equality .)
    EOF             reduce using rule 85 (conjunction -> equality .)
    FALSE           reduce using rule 85 (conjunction -> equality .)
    FUNCTION        reduce using rule 85 (conjunction -> equality .)
    NULL            reduce using rule 85 (conjunction -> equality .)
    NULLABLE        reduce using rule 85 (conjunction -> equality .)
    NUMBER          reduce using rule 85 (conjunction -> equality .)
    OPERATOR        reduce using rule 85 (conjunction -> equality .)
    SMARTCAST       reduce using rule 85 (conjunction -> equality .)
    THIS            reduce using rule 85 (conjunction -> equality .)
    TRUE            reduce using rule 85 (conjunction -> equality .)
    VAL             reduce using rule 85 (conjunction -> equality .)
    VAR             reduce using rule 85 (conjunction -> equality .)
    DOUBLE          reduce using rule 85 (conjunction -> equality .)
    WHEN            reduce using rule 85 (conjunction -> equality .)
    LONG            reduce using rule 85 (conjunction -> equality .)
    ELVIS           reduce using rule 85 (conjunction -> equality .)
    IN              reduce using rule 85 (conjunction -> equality .)
    NOT_IN          reduce using rule 85 (conjunction -> equality .)
    IS              reduce using rule 85 (conjunction -> equality .)
    NOT_IS          reduce using rule 85 (conjunction -> equality .)
    MAIOR           reduce using rule 85 (conjunction -> equality .)
    MENORIGUAL      reduce using rule 85 (conjunction -> equality .)
    MAIORIGUAL      reduce using rule 85 (conjunction -> equality .)
    DIFERENTE       reduce using rule 85 (conjunction -> equality .)
    IDENTIDADE      reduce using rule 85 (conjunction -> equality .)
    IGUALDADE       reduce using rule 85 (conjunction -> equality .)
    SEMIDENTIDADE   reduce using rule 85 (conjunction -> equality .)
    OR              reduce using rule 85 (conjunction -> equality .)
    FUN             reduce using rule 85 (conjunction -> equality .)
    FOR             reduce using rule 85 (conjunction -> equality .)
    WHILE           reduce using rule 85 (conjunction -> equality .)
    DO              reduce using rule 85 (conjunction -> equality .)
    LITERAL_STRING  reduce using rule 85 (conjunction -> equality .)
    IF              reduce using rule 85 (conjunction -> equality .)
    RETURN          reduce using rule 85 (conjunction -> equality .)
    RETURN_AT       reduce using rule 85 (conjunction -> equality .)
    CONTINUE        reduce using rule 85 (conjunction -> equality .)
    CONTINUE_AT     reduce using rule 85 (conjunction -> equality .)
    BREAK           reduce using rule 85 (conjunction -> equality .)
    BREAK_AT        reduce using rule 85 (conjunction -> equality .)
    NOT             reduce using rule 85 (conjunction -> equality .)
    SUSPEND         reduce using rule 85 (conjunction -> equality .)
    COMMA           reduce using rule 85 (conjunction -> equality .)
    RPAREN          reduce using rule 85 (conjunction -> equality .)
    LCHAVE          reduce using rule 85 (conjunction -> equality .)
    PV              reduce using rule 85 (conjunction -> equality .)
    ELSE            reduce using rule 85 (conjunction -> equality .)
    RCCT            reduce using rule 85 (conjunction -> equality .)
    AND             shift and go to state 213

  ! AND             [ reduce using rule 85 (conjunction -> equality .) ]


state 98

    (159) primaryExpression -> parenthesizedExpression .

    INCREMENTO      reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    DECREMENTO      reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    MENOR           reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    LCCT            reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    LPAREN          reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    COLONCOLON      reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    RCHAVE          reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    PONTO           reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    AS              reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    MAISIGUAL       reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    MENOSIGUAL      reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    MULTIGUAL       reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    DIVIGUAL        reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    MODIGUAL        reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    MULT            reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    DIVIDE          reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    MOD             reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    PLUS            reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    MINUS           reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    PONTOPONTO      reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    ID              reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    CROSSINLINE     reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    IMPORT          reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    INIT            reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    NOINLINE        reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    OUT             reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    VARARG          reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    WHERE           reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    INT             reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    FLOAT           reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    BOOLEAN         reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    STRING          reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    ARRAY           reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    CHAR            reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    OBJECT          reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    CONST           reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    CONSTRUCTOR     reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    EOF             reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    FALSE           reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    FUNCTION        reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    NULL            reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    NULLABLE        reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    NUMBER          reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    OPERATOR        reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    SMARTCAST       reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    THIS            reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    TRUE            reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    VAL             reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    VAR             reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    DOUBLE          reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    WHEN            reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    LONG            reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    ELVIS           reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    IN              reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    NOT_IN          reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    IS              reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    NOT_IS          reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    MAIOR           reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    MENORIGUAL      reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    MAIORIGUAL      reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    DIFERENTE       reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    IDENTIDADE      reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    IGUALDADE       reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    SEMIDENTIDADE   reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    AND             reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    OR              reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    FUN             reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    FOR             reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    WHILE           reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    DO              reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    LITERAL_STRING  reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    IF              reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    RETURN          reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    RETURN_AT       reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    CONTINUE        reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    CONTINUE_AT     reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    BREAK           reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    BREAK_AT        reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    NOT             reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    SUSPEND         reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    COMMA           reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    RPAREN          reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    LCHAVE          reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    PV              reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    ELSE            reduce using rule 159 (primaryExpression -> parenthesizedExpression .)
    RCCT            reduce using rule 159 (primaryExpression -> parenthesizedExpression .)


state 99

    (161) primaryExpression -> LITERAL_STRING .

    INCREMENTO      reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    DECREMENTO      reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    MENOR           reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    LCCT            reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    LPAREN          reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    COLONCOLON      reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    RCHAVE          reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    PONTO           reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    AS              reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    MAISIGUAL       reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    MENOSIGUAL      reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    MULTIGUAL       reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    DIVIGUAL        reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    MODIGUAL        reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    MULT            reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    DIVIDE          reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    MOD             reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    PLUS            reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    MINUS           reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    PONTOPONTO      reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    ID              reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    CROSSINLINE     reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    IMPORT          reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    INIT            reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    NOINLINE        reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    OUT             reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    VARARG          reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    WHERE           reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    INT             reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    FLOAT           reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    BOOLEAN         reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    STRING          reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    ARRAY           reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    CHAR            reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    OBJECT          reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    CONST           reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    CONSTRUCTOR     reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    EOF             reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    FALSE           reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    FUNCTION        reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    NULL            reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    NULLABLE        reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    NUMBER          reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    OPERATOR        reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    SMARTCAST       reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    THIS            reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    TRUE            reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    VAL             reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    VAR             reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    DOUBLE          reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    WHEN            reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    LONG            reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    ELVIS           reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    IN              reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    NOT_IN          reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    IS              reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    NOT_IS          reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    MAIOR           reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    MENORIGUAL      reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    MAIORIGUAL      reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    DIFERENTE       reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    IDENTIDADE      reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    IGUALDADE       reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    SEMIDENTIDADE   reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    AND             reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    OR              reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    FUN             reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    FOR             reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    WHILE           reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    DO              reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    LITERAL_STRING  reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    IF              reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    RETURN          reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    RETURN_AT       reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    CONTINUE        reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    CONTINUE_AT     reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    BREAK           reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    BREAK_AT        reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    NOT             reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    SUSPEND         reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    COMMA           reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    RPAREN          reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    LCHAVE          reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    PV              reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    ELSE            reduce using rule 161 (primaryExpression -> LITERAL_STRING .)
    RCCT            reduce using rule 161 (primaryExpression -> LITERAL_STRING .)


state 100

    (162) primaryExpression -> callableReference .

    INCREMENTO      reduce using rule 162 (primaryExpression -> callableReference .)
    DECREMENTO      reduce using rule 162 (primaryExpression -> callableReference .)
    MENOR           reduce using rule 162 (primaryExpression -> callableReference .)
    LCCT            reduce using rule 162 (primaryExpression -> callableReference .)
    LPAREN          reduce using rule 162 (primaryExpression -> callableReference .)
    COLONCOLON      reduce using rule 162 (primaryExpression -> callableReference .)
    RCHAVE          reduce using rule 162 (primaryExpression -> callableReference .)
    PONTO           reduce using rule 162 (primaryExpression -> callableReference .)
    AS              reduce using rule 162 (primaryExpression -> callableReference .)
    MAISIGUAL       reduce using rule 162 (primaryExpression -> callableReference .)
    MENOSIGUAL      reduce using rule 162 (primaryExpression -> callableReference .)
    MULTIGUAL       reduce using rule 162 (primaryExpression -> callableReference .)
    DIVIGUAL        reduce using rule 162 (primaryExpression -> callableReference .)
    MODIGUAL        reduce using rule 162 (primaryExpression -> callableReference .)
    MULT            reduce using rule 162 (primaryExpression -> callableReference .)
    DIVIDE          reduce using rule 162 (primaryExpression -> callableReference .)
    MOD             reduce using rule 162 (primaryExpression -> callableReference .)
    PLUS            reduce using rule 162 (primaryExpression -> callableReference .)
    MINUS           reduce using rule 162 (primaryExpression -> callableReference .)
    PONTOPONTO      reduce using rule 162 (primaryExpression -> callableReference .)
    ID              reduce using rule 162 (primaryExpression -> callableReference .)
    CROSSINLINE     reduce using rule 162 (primaryExpression -> callableReference .)
    IMPORT          reduce using rule 162 (primaryExpression -> callableReference .)
    INIT            reduce using rule 162 (primaryExpression -> callableReference .)
    NOINLINE        reduce using rule 162 (primaryExpression -> callableReference .)
    OUT             reduce using rule 162 (primaryExpression -> callableReference .)
    VARARG          reduce using rule 162 (primaryExpression -> callableReference .)
    WHERE           reduce using rule 162 (primaryExpression -> callableReference .)
    INT             reduce using rule 162 (primaryExpression -> callableReference .)
    FLOAT           reduce using rule 162 (primaryExpression -> callableReference .)
    BOOLEAN         reduce using rule 162 (primaryExpression -> callableReference .)
    STRING          reduce using rule 162 (primaryExpression -> callableReference .)
    ARRAY           reduce using rule 162 (primaryExpression -> callableReference .)
    CHAR            reduce using rule 162 (primaryExpression -> callableReference .)
    OBJECT          reduce using rule 162 (primaryExpression -> callableReference .)
    CONST           reduce using rule 162 (primaryExpression -> callableReference .)
    CONSTRUCTOR     reduce using rule 162 (primaryExpression -> callableReference .)
    EOF             reduce using rule 162 (primaryExpression -> callableReference .)
    FALSE           reduce using rule 162 (primaryExpression -> callableReference .)
    FUNCTION        reduce using rule 162 (primaryExpression -> callableReference .)
    NULL            reduce using rule 162 (primaryExpression -> callableReference .)
    NULLABLE        reduce using rule 162 (primaryExpression -> callableReference .)
    NUMBER          reduce using rule 162 (primaryExpression -> callableReference .)
    OPERATOR        reduce using rule 162 (primaryExpression -> callableReference .)
    SMARTCAST       reduce using rule 162 (primaryExpression -> callableReference .)
    THIS            reduce using rule 162 (primaryExpression -> callableReference .)
    TRUE            reduce using rule 162 (primaryExpression -> callableReference .)
    VAL             reduce using rule 162 (primaryExpression -> callableReference .)
    VAR             reduce using rule 162 (primaryExpression -> callableReference .)
    DOUBLE          reduce using rule 162 (primaryExpression -> callableReference .)
    WHEN            reduce using rule 162 (primaryExpression -> callableReference .)
    LONG            reduce using rule 162 (primaryExpression -> callableReference .)
    ELVIS           reduce using rule 162 (primaryExpression -> callableReference .)
    IN              reduce using rule 162 (primaryExpression -> callableReference .)
    NOT_IN          reduce using rule 162 (primaryExpression -> callableReference .)
    IS              reduce using rule 162 (primaryExpression -> callableReference .)
    NOT_IS          reduce using rule 162 (primaryExpression -> callableReference .)
    MAIOR           reduce using rule 162 (primaryExpression -> callableReference .)
    MENORIGUAL      reduce using rule 162 (primaryExpression -> callableReference .)
    MAIORIGUAL      reduce using rule 162 (primaryExpression -> callableReference .)
    DIFERENTE       reduce using rule 162 (primaryExpression -> callableReference .)
    IDENTIDADE      reduce using rule 162 (primaryExpression -> callableReference .)
    IGUALDADE       reduce using rule 162 (primaryExpression -> callableReference .)
    SEMIDENTIDADE   reduce using rule 162 (primaryExpression -> callableReference .)
    AND             reduce using rule 162 (primaryExpression -> callableReference .)
    OR              reduce using rule 162 (primaryExpression -> callableReference .)
    FUN             reduce using rule 162 (primaryExpression -> callableReference .)
    FOR             reduce using rule 162 (primaryExpression -> callableReference .)
    WHILE           reduce using rule 162 (primaryExpression -> callableReference .)
    DO              reduce using rule 162 (primaryExpression -> callableReference .)
    LITERAL_STRING  reduce using rule 162 (primaryExpression -> callableReference .)
    IF              reduce using rule 162 (primaryExpression -> callableReference .)
    RETURN          reduce using rule 162 (primaryExpression -> callableReference .)
    RETURN_AT       reduce using rule 162 (primaryExpression -> callableReference .)
    CONTINUE        reduce using rule 162 (primaryExpression -> callableReference .)
    CONTINUE_AT     reduce using rule 162 (primaryExpression -> callableReference .)
    BREAK           reduce using rule 162 (primaryExpression -> callableReference .)
    BREAK_AT        reduce using rule 162 (primaryExpression -> callableReference .)
    NOT             reduce using rule 162 (primaryExpression -> callableReference .)
    SUSPEND         reduce using rule 162 (primaryExpression -> callableReference .)
    COMMA           reduce using rule 162 (primaryExpression -> callableReference .)
    RPAREN          reduce using rule 162 (primaryExpression -> callableReference .)
    LCHAVE          reduce using rule 162 (primaryExpression -> callableReference .)
    PV              reduce using rule 162 (primaryExpression -> callableReference .)
    ELSE            reduce using rule 162 (primaryExpression -> callableReference .)
    RCCT            reduce using rule 162 (primaryExpression -> callableReference .)


state 101

    (163) primaryExpression -> functionLiteral .

    INCREMENTO      reduce using rule 163 (primaryExpression -> functionLiteral .)
    DECREMENTO      reduce using rule 163 (primaryExpression -> functionLiteral .)
    MENOR           reduce using rule 163 (primaryExpression -> functionLiteral .)
    LCCT            reduce using rule 163 (primaryExpression -> functionLiteral .)
    LPAREN          reduce using rule 163 (primaryExpression -> functionLiteral .)
    COLONCOLON      reduce using rule 163 (primaryExpression -> functionLiteral .)
    RCHAVE          reduce using rule 163 (primaryExpression -> functionLiteral .)
    PONTO           reduce using rule 163 (primaryExpression -> functionLiteral .)
    AS              reduce using rule 163 (primaryExpression -> functionLiteral .)
    MAISIGUAL       reduce using rule 163 (primaryExpression -> functionLiteral .)
    MENOSIGUAL      reduce using rule 163 (primaryExpression -> functionLiteral .)
    MULTIGUAL       reduce using rule 163 (primaryExpression -> functionLiteral .)
    DIVIGUAL        reduce using rule 163 (primaryExpression -> functionLiteral .)
    MODIGUAL        reduce using rule 163 (primaryExpression -> functionLiteral .)
    MULT            reduce using rule 163 (primaryExpression -> functionLiteral .)
    DIVIDE          reduce using rule 163 (primaryExpression -> functionLiteral .)
    MOD             reduce using rule 163 (primaryExpression -> functionLiteral .)
    PLUS            reduce using rule 163 (primaryExpression -> functionLiteral .)
    MINUS           reduce using rule 163 (primaryExpression -> functionLiteral .)
    PONTOPONTO      reduce using rule 163 (primaryExpression -> functionLiteral .)
    ID              reduce using rule 163 (primaryExpression -> functionLiteral .)
    CROSSINLINE     reduce using rule 163 (primaryExpression -> functionLiteral .)
    IMPORT          reduce using rule 163 (primaryExpression -> functionLiteral .)
    INIT            reduce using rule 163 (primaryExpression -> functionLiteral .)
    NOINLINE        reduce using rule 163 (primaryExpression -> functionLiteral .)
    OUT             reduce using rule 163 (primaryExpression -> functionLiteral .)
    VARARG          reduce using rule 163 (primaryExpression -> functionLiteral .)
    WHERE           reduce using rule 163 (primaryExpression -> functionLiteral .)
    INT             reduce using rule 163 (primaryExpression -> functionLiteral .)
    FLOAT           reduce using rule 163 (primaryExpression -> functionLiteral .)
    BOOLEAN         reduce using rule 163 (primaryExpression -> functionLiteral .)
    STRING          reduce using rule 163 (primaryExpression -> functionLiteral .)
    ARRAY           reduce using rule 163 (primaryExpression -> functionLiteral .)
    CHAR            reduce using rule 163 (primaryExpression -> functionLiteral .)
    OBJECT          reduce using rule 163 (primaryExpression -> functionLiteral .)
    CONST           reduce using rule 163 (primaryExpression -> functionLiteral .)
    CONSTRUCTOR     reduce using rule 163 (primaryExpression -> functionLiteral .)
    EOF             reduce using rule 163 (primaryExpression -> functionLiteral .)
    FALSE           reduce using rule 163 (primaryExpression -> functionLiteral .)
    FUNCTION        reduce using rule 163 (primaryExpression -> functionLiteral .)
    NULL            reduce using rule 163 (primaryExpression -> functionLiteral .)
    NULLABLE        reduce using rule 163 (primaryExpression -> functionLiteral .)
    NUMBER          reduce using rule 163 (primaryExpression -> functionLiteral .)
    OPERATOR        reduce using rule 163 (primaryExpression -> functionLiteral .)
    SMARTCAST       reduce using rule 163 (primaryExpression -> functionLiteral .)
    THIS            reduce using rule 163 (primaryExpression -> functionLiteral .)
    TRUE            reduce using rule 163 (primaryExpression -> functionLiteral .)
    VAL             reduce using rule 163 (primaryExpression -> functionLiteral .)
    VAR             reduce using rule 163 (primaryExpression -> functionLiteral .)
    DOUBLE          reduce using rule 163 (primaryExpression -> functionLiteral .)
    WHEN            reduce using rule 163 (primaryExpression -> functionLiteral .)
    LONG            reduce using rule 163 (primaryExpression -> functionLiteral .)
    ELVIS           reduce using rule 163 (primaryExpression -> functionLiteral .)
    IN              reduce using rule 163 (primaryExpression -> functionLiteral .)
    NOT_IN          reduce using rule 163 (primaryExpression -> functionLiteral .)
    IS              reduce using rule 163 (primaryExpression -> functionLiteral .)
    NOT_IS          reduce using rule 163 (primaryExpression -> functionLiteral .)
    MAIOR           reduce using rule 163 (primaryExpression -> functionLiteral .)
    MENORIGUAL      reduce using rule 163 (primaryExpression -> functionLiteral .)
    MAIORIGUAL      reduce using rule 163 (primaryExpression -> functionLiteral .)
    DIFERENTE       reduce using rule 163 (primaryExpression -> functionLiteral .)
    IDENTIDADE      reduce using rule 163 (primaryExpression -> functionLiteral .)
    IGUALDADE       reduce using rule 163 (primaryExpression -> functionLiteral .)
    SEMIDENTIDADE   reduce using rule 163 (primaryExpression -> functionLiteral .)
    AND             reduce using rule 163 (primaryExpression -> functionLiteral .)
    OR              reduce using rule 163 (primaryExpression -> functionLiteral .)
    FUN             reduce using rule 163 (primaryExpression -> functionLiteral .)
    FOR             reduce using rule 163 (primaryExpression -> functionLiteral .)
    WHILE           reduce using rule 163 (primaryExpression -> functionLiteral .)
    DO              reduce using rule 163 (primaryExpression -> functionLiteral .)
    LITERAL_STRING  reduce using rule 163 (primaryExpression -> functionLiteral .)
    IF              reduce using rule 163 (primaryExpression -> functionLiteral .)
    RETURN          reduce using rule 163 (primaryExpression -> functionLiteral .)
    RETURN_AT       reduce using rule 163 (primaryExpression -> functionLiteral .)
    CONTINUE        reduce using rule 163 (primaryExpression -> functionLiteral .)
    CONTINUE_AT     reduce using rule 163 (primaryExpression -> functionLiteral .)
    BREAK           reduce using rule 163 (primaryExpression -> functionLiteral .)
    BREAK_AT        reduce using rule 163 (primaryExpression -> functionLiteral .)
    NOT             reduce using rule 163 (primaryExpression -> functionLiteral .)
    SUSPEND         reduce using rule 163 (primaryExpression -> functionLiteral .)
    COMMA           reduce using rule 163 (primaryExpression -> functionLiteral .)
    RPAREN          reduce using rule 163 (primaryExpression -> functionLiteral .)
    LCHAVE          reduce using rule 163 (primaryExpression -> functionLiteral .)
    PV              reduce using rule 163 (primaryExpression -> functionLiteral .)
    ELSE            reduce using rule 163 (primaryExpression -> functionLiteral .)
    RCCT            reduce using rule 163 (primaryExpression -> functionLiteral .)


state 102

    (164) primaryExpression -> collectionLiteral .

    INCREMENTO      reduce using rule 164 (primaryExpression -> collectionLiteral .)
    DECREMENTO      reduce using rule 164 (primaryExpression -> collectionLiteral .)
    MENOR           reduce using rule 164 (primaryExpression -> collectionLiteral .)
    LCCT            reduce using rule 164 (primaryExpression -> collectionLiteral .)
    LPAREN          reduce using rule 164 (primaryExpression -> collectionLiteral .)
    COLONCOLON      reduce using rule 164 (primaryExpression -> collectionLiteral .)
    RCHAVE          reduce using rule 164 (primaryExpression -> collectionLiteral .)
    PONTO           reduce using rule 164 (primaryExpression -> collectionLiteral .)
    AS              reduce using rule 164 (primaryExpression -> collectionLiteral .)
    MAISIGUAL       reduce using rule 164 (primaryExpression -> collectionLiteral .)
    MENOSIGUAL      reduce using rule 164 (primaryExpression -> collectionLiteral .)
    MULTIGUAL       reduce using rule 164 (primaryExpression -> collectionLiteral .)
    DIVIGUAL        reduce using rule 164 (primaryExpression -> collectionLiteral .)
    MODIGUAL        reduce using rule 164 (primaryExpression -> collectionLiteral .)
    MULT            reduce using rule 164 (primaryExpression -> collectionLiteral .)
    DIVIDE          reduce using rule 164 (primaryExpression -> collectionLiteral .)
    MOD             reduce using rule 164 (primaryExpression -> collectionLiteral .)
    PLUS            reduce using rule 164 (primaryExpression -> collectionLiteral .)
    MINUS           reduce using rule 164 (primaryExpression -> collectionLiteral .)
    PONTOPONTO      reduce using rule 164 (primaryExpression -> collectionLiteral .)
    ID              reduce using rule 164 (primaryExpression -> collectionLiteral .)
    CROSSINLINE     reduce using rule 164 (primaryExpression -> collectionLiteral .)
    IMPORT          reduce using rule 164 (primaryExpression -> collectionLiteral .)
    INIT            reduce using rule 164 (primaryExpression -> collectionLiteral .)
    NOINLINE        reduce using rule 164 (primaryExpression -> collectionLiteral .)
    OUT             reduce using rule 164 (primaryExpression -> collectionLiteral .)
    VARARG          reduce using rule 164 (primaryExpression -> collectionLiteral .)
    WHERE           reduce using rule 164 (primaryExpression -> collectionLiteral .)
    INT             reduce using rule 164 (primaryExpression -> collectionLiteral .)
    FLOAT           reduce using rule 164 (primaryExpression -> collectionLiteral .)
    BOOLEAN         reduce using rule 164 (primaryExpression -> collectionLiteral .)
    STRING          reduce using rule 164 (primaryExpression -> collectionLiteral .)
    ARRAY           reduce using rule 164 (primaryExpression -> collectionLiteral .)
    CHAR            reduce using rule 164 (primaryExpression -> collectionLiteral .)
    OBJECT          reduce using rule 164 (primaryExpression -> collectionLiteral .)
    CONST           reduce using rule 164 (primaryExpression -> collectionLiteral .)
    CONSTRUCTOR     reduce using rule 164 (primaryExpression -> collectionLiteral .)
    EOF             reduce using rule 164 (primaryExpression -> collectionLiteral .)
    FALSE           reduce using rule 164 (primaryExpression -> collectionLiteral .)
    FUNCTION        reduce using rule 164 (primaryExpression -> collectionLiteral .)
    NULL            reduce using rule 164 (primaryExpression -> collectionLiteral .)
    NULLABLE        reduce using rule 164 (primaryExpression -> collectionLiteral .)
    NUMBER          reduce using rule 164 (primaryExpression -> collectionLiteral .)
    OPERATOR        reduce using rule 164 (primaryExpression -> collectionLiteral .)
    SMARTCAST       reduce using rule 164 (primaryExpression -> collectionLiteral .)
    THIS            reduce using rule 164 (primaryExpression -> collectionLiteral .)
    TRUE            reduce using rule 164 (primaryExpression -> collectionLiteral .)
    VAL             reduce using rule 164 (primaryExpression -> collectionLiteral .)
    VAR             reduce using rule 164 (primaryExpression -> collectionLiteral .)
    DOUBLE          reduce using rule 164 (primaryExpression -> collectionLiteral .)
    WHEN            reduce using rule 164 (primaryExpression -> collectionLiteral .)
    LONG            reduce using rule 164 (primaryExpression -> collectionLiteral .)
    ELVIS           reduce using rule 164 (primaryExpression -> collectionLiteral .)
    IN              reduce using rule 164 (primaryExpression -> collectionLiteral .)
    NOT_IN          reduce using rule 164 (primaryExpression -> collectionLiteral .)
    IS              reduce using rule 164 (primaryExpression -> collectionLiteral .)
    NOT_IS          reduce using rule 164 (primaryExpression -> collectionLiteral .)
    MAIOR           reduce using rule 164 (primaryExpression -> collectionLiteral .)
    MENORIGUAL      reduce using rule 164 (primaryExpression -> collectionLiteral .)
    MAIORIGUAL      reduce using rule 164 (primaryExpression -> collectionLiteral .)
    DIFERENTE       reduce using rule 164 (primaryExpression -> collectionLiteral .)
    IDENTIDADE      reduce using rule 164 (primaryExpression -> collectionLiteral .)
    IGUALDADE       reduce using rule 164 (primaryExpression -> collectionLiteral .)
    SEMIDENTIDADE   reduce using rule 164 (primaryExpression -> collectionLiteral .)
    AND             reduce using rule 164 (primaryExpression -> collectionLiteral .)
    OR              reduce using rule 164 (primaryExpression -> collectionLiteral .)
    FUN             reduce using rule 164 (primaryExpression -> collectionLiteral .)
    FOR             reduce using rule 164 (primaryExpression -> collectionLiteral .)
    WHILE           reduce using rule 164 (primaryExpression -> collectionLiteral .)
    DO              reduce using rule 164 (primaryExpression -> collectionLiteral .)
    LITERAL_STRING  reduce using rule 164 (primaryExpression -> collectionLiteral .)
    IF              reduce using rule 164 (primaryExpression -> collectionLiteral .)
    RETURN          reduce using rule 164 (primaryExpression -> collectionLiteral .)
    RETURN_AT       reduce using rule 164 (primaryExpression -> collectionLiteral .)
    CONTINUE        reduce using rule 164 (primaryExpression -> collectionLiteral .)
    CONTINUE_AT     reduce using rule 164 (primaryExpression -> collectionLiteral .)
    BREAK           reduce using rule 164 (primaryExpression -> collectionLiteral .)
    BREAK_AT        reduce using rule 164 (primaryExpression -> collectionLiteral .)
    NOT             reduce using rule 164 (primaryExpression -> collectionLiteral .)
    SUSPEND         reduce using rule 164 (primaryExpression -> collectionLiteral .)
    COMMA           reduce using rule 164 (primaryExpression -> collectionLiteral .)
    RPAREN          reduce using rule 164 (primaryExpression -> collectionLiteral .)
    LCHAVE          reduce using rule 164 (primaryExpression -> collectionLiteral .)
    PV              reduce using rule 164 (primaryExpression -> collectionLiteral .)
    ELSE            reduce using rule 164 (primaryExpression -> collectionLiteral .)
    RCCT            reduce using rule 164 (primaryExpression -> collectionLiteral .)


state 103

    (165) primaryExpression -> ifExpression .

    INCREMENTO      reduce using rule 165 (primaryExpression -> ifExpression .)
    DECREMENTO      reduce using rule 165 (primaryExpression -> ifExpression .)
    MENOR           reduce using rule 165 (primaryExpression -> ifExpression .)
    LCCT            reduce using rule 165 (primaryExpression -> ifExpression .)
    LPAREN          reduce using rule 165 (primaryExpression -> ifExpression .)
    COLONCOLON      reduce using rule 165 (primaryExpression -> ifExpression .)
    RCHAVE          reduce using rule 165 (primaryExpression -> ifExpression .)
    PONTO           reduce using rule 165 (primaryExpression -> ifExpression .)
    AS              reduce using rule 165 (primaryExpression -> ifExpression .)
    MAISIGUAL       reduce using rule 165 (primaryExpression -> ifExpression .)
    MENOSIGUAL      reduce using rule 165 (primaryExpression -> ifExpression .)
    MULTIGUAL       reduce using rule 165 (primaryExpression -> ifExpression .)
    DIVIGUAL        reduce using rule 165 (primaryExpression -> ifExpression .)
    MODIGUAL        reduce using rule 165 (primaryExpression -> ifExpression .)
    MULT            reduce using rule 165 (primaryExpression -> ifExpression .)
    DIVIDE          reduce using rule 165 (primaryExpression -> ifExpression .)
    MOD             reduce using rule 165 (primaryExpression -> ifExpression .)
    PLUS            reduce using rule 165 (primaryExpression -> ifExpression .)
    MINUS           reduce using rule 165 (primaryExpression -> ifExpression .)
    PONTOPONTO      reduce using rule 165 (primaryExpression -> ifExpression .)
    ID              reduce using rule 165 (primaryExpression -> ifExpression .)
    CROSSINLINE     reduce using rule 165 (primaryExpression -> ifExpression .)
    IMPORT          reduce using rule 165 (primaryExpression -> ifExpression .)
    INIT            reduce using rule 165 (primaryExpression -> ifExpression .)
    NOINLINE        reduce using rule 165 (primaryExpression -> ifExpression .)
    OUT             reduce using rule 165 (primaryExpression -> ifExpression .)
    VARARG          reduce using rule 165 (primaryExpression -> ifExpression .)
    WHERE           reduce using rule 165 (primaryExpression -> ifExpression .)
    INT             reduce using rule 165 (primaryExpression -> ifExpression .)
    FLOAT           reduce using rule 165 (primaryExpression -> ifExpression .)
    BOOLEAN         reduce using rule 165 (primaryExpression -> ifExpression .)
    STRING          reduce using rule 165 (primaryExpression -> ifExpression .)
    ARRAY           reduce using rule 165 (primaryExpression -> ifExpression .)
    CHAR            reduce using rule 165 (primaryExpression -> ifExpression .)
    OBJECT          reduce using rule 165 (primaryExpression -> ifExpression .)
    CONST           reduce using rule 165 (primaryExpression -> ifExpression .)
    CONSTRUCTOR     reduce using rule 165 (primaryExpression -> ifExpression .)
    EOF             reduce using rule 165 (primaryExpression -> ifExpression .)
    FALSE           reduce using rule 165 (primaryExpression -> ifExpression .)
    FUNCTION        reduce using rule 165 (primaryExpression -> ifExpression .)
    NULL            reduce using rule 165 (primaryExpression -> ifExpression .)
    NULLABLE        reduce using rule 165 (primaryExpression -> ifExpression .)
    NUMBER          reduce using rule 165 (primaryExpression -> ifExpression .)
    OPERATOR        reduce using rule 165 (primaryExpression -> ifExpression .)
    SMARTCAST       reduce using rule 165 (primaryExpression -> ifExpression .)
    THIS            reduce using rule 165 (primaryExpression -> ifExpression .)
    TRUE            reduce using rule 165 (primaryExpression -> ifExpression .)
    VAL             reduce using rule 165 (primaryExpression -> ifExpression .)
    VAR             reduce using rule 165 (primaryExpression -> ifExpression .)
    DOUBLE          reduce using rule 165 (primaryExpression -> ifExpression .)
    WHEN            reduce using rule 165 (primaryExpression -> ifExpression .)
    LONG            reduce using rule 165 (primaryExpression -> ifExpression .)
    ELVIS           reduce using rule 165 (primaryExpression -> ifExpression .)
    IN              reduce using rule 165 (primaryExpression -> ifExpression .)
    NOT_IN          reduce using rule 165 (primaryExpression -> ifExpression .)
    IS              reduce using rule 165 (primaryExpression -> ifExpression .)
    NOT_IS          reduce using rule 165 (primaryExpression -> ifExpression .)
    MAIOR           reduce using rule 165 (primaryExpression -> ifExpression .)
    MENORIGUAL      reduce using rule 165 (primaryExpression -> ifExpression .)
    MAIORIGUAL      reduce using rule 165 (primaryExpression -> ifExpression .)
    DIFERENTE       reduce using rule 165 (primaryExpression -> ifExpression .)
    IDENTIDADE      reduce using rule 165 (primaryExpression -> ifExpression .)
    IGUALDADE       reduce using rule 165 (primaryExpression -> ifExpression .)
    SEMIDENTIDADE   reduce using rule 165 (primaryExpression -> ifExpression .)
    AND             reduce using rule 165 (primaryExpression -> ifExpression .)
    OR              reduce using rule 165 (primaryExpression -> ifExpression .)
    FUN             reduce using rule 165 (primaryExpression -> ifExpression .)
    FOR             reduce using rule 165 (primaryExpression -> ifExpression .)
    WHILE           reduce using rule 165 (primaryExpression -> ifExpression .)
    DO              reduce using rule 165 (primaryExpression -> ifExpression .)
    LITERAL_STRING  reduce using rule 165 (primaryExpression -> ifExpression .)
    IF              reduce using rule 165 (primaryExpression -> ifExpression .)
    RETURN          reduce using rule 165 (primaryExpression -> ifExpression .)
    RETURN_AT       reduce using rule 165 (primaryExpression -> ifExpression .)
    CONTINUE        reduce using rule 165 (primaryExpression -> ifExpression .)
    CONTINUE_AT     reduce using rule 165 (primaryExpression -> ifExpression .)
    BREAK           reduce using rule 165 (primaryExpression -> ifExpression .)
    BREAK_AT        reduce using rule 165 (primaryExpression -> ifExpression .)
    NOT             reduce using rule 165 (primaryExpression -> ifExpression .)
    SUSPEND         reduce using rule 165 (primaryExpression -> ifExpression .)
    COMMA           reduce using rule 165 (primaryExpression -> ifExpression .)
    RPAREN          reduce using rule 165 (primaryExpression -> ifExpression .)
    LCHAVE          reduce using rule 165 (primaryExpression -> ifExpression .)
    PV              reduce using rule 165 (primaryExpression -> ifExpression .)
    ELSE            reduce using rule 165 (primaryExpression -> ifExpression .)
    RCCT            reduce using rule 165 (primaryExpression -> ifExpression .)


state 104

    (166) primaryExpression -> jumpExpression .

    INCREMENTO      reduce using rule 166 (primaryExpression -> jumpExpression .)
    DECREMENTO      reduce using rule 166 (primaryExpression -> jumpExpression .)
    MENOR           reduce using rule 166 (primaryExpression -> jumpExpression .)
    LCCT            reduce using rule 166 (primaryExpression -> jumpExpression .)
    LPAREN          reduce using rule 166 (primaryExpression -> jumpExpression .)
    COLONCOLON      reduce using rule 166 (primaryExpression -> jumpExpression .)
    RCHAVE          reduce using rule 166 (primaryExpression -> jumpExpression .)
    PONTO           reduce using rule 166 (primaryExpression -> jumpExpression .)
    AS              reduce using rule 166 (primaryExpression -> jumpExpression .)
    MAISIGUAL       reduce using rule 166 (primaryExpression -> jumpExpression .)
    MENOSIGUAL      reduce using rule 166 (primaryExpression -> jumpExpression .)
    MULTIGUAL       reduce using rule 166 (primaryExpression -> jumpExpression .)
    DIVIGUAL        reduce using rule 166 (primaryExpression -> jumpExpression .)
    MODIGUAL        reduce using rule 166 (primaryExpression -> jumpExpression .)
    MULT            reduce using rule 166 (primaryExpression -> jumpExpression .)
    DIVIDE          reduce using rule 166 (primaryExpression -> jumpExpression .)
    MOD             reduce using rule 166 (primaryExpression -> jumpExpression .)
    PLUS            reduce using rule 166 (primaryExpression -> jumpExpression .)
    MINUS           reduce using rule 166 (primaryExpression -> jumpExpression .)
    PONTOPONTO      reduce using rule 166 (primaryExpression -> jumpExpression .)
    ID              reduce using rule 166 (primaryExpression -> jumpExpression .)
    CROSSINLINE     reduce using rule 166 (primaryExpression -> jumpExpression .)
    IMPORT          reduce using rule 166 (primaryExpression -> jumpExpression .)
    INIT            reduce using rule 166 (primaryExpression -> jumpExpression .)
    NOINLINE        reduce using rule 166 (primaryExpression -> jumpExpression .)
    OUT             reduce using rule 166 (primaryExpression -> jumpExpression .)
    VARARG          reduce using rule 166 (primaryExpression -> jumpExpression .)
    WHERE           reduce using rule 166 (primaryExpression -> jumpExpression .)
    INT             reduce using rule 166 (primaryExpression -> jumpExpression .)
    FLOAT           reduce using rule 166 (primaryExpression -> jumpExpression .)
    BOOLEAN         reduce using rule 166 (primaryExpression -> jumpExpression .)
    STRING          reduce using rule 166 (primaryExpression -> jumpExpression .)
    ARRAY           reduce using rule 166 (primaryExpression -> jumpExpression .)
    CHAR            reduce using rule 166 (primaryExpression -> jumpExpression .)
    OBJECT          reduce using rule 166 (primaryExpression -> jumpExpression .)
    CONST           reduce using rule 166 (primaryExpression -> jumpExpression .)
    CONSTRUCTOR     reduce using rule 166 (primaryExpression -> jumpExpression .)
    EOF             reduce using rule 166 (primaryExpression -> jumpExpression .)
    FALSE           reduce using rule 166 (primaryExpression -> jumpExpression .)
    FUNCTION        reduce using rule 166 (primaryExpression -> jumpExpression .)
    NULL            reduce using rule 166 (primaryExpression -> jumpExpression .)
    NULLABLE        reduce using rule 166 (primaryExpression -> jumpExpression .)
    NUMBER          reduce using rule 166 (primaryExpression -> jumpExpression .)
    OPERATOR        reduce using rule 166 (primaryExpression -> jumpExpression .)
    SMARTCAST       reduce using rule 166 (primaryExpression -> jumpExpression .)
    THIS            reduce using rule 166 (primaryExpression -> jumpExpression .)
    TRUE            reduce using rule 166 (primaryExpression -> jumpExpression .)
    VAL             reduce using rule 166 (primaryExpression -> jumpExpression .)
    VAR             reduce using rule 166 (primaryExpression -> jumpExpression .)
    DOUBLE          reduce using rule 166 (primaryExpression -> jumpExpression .)
    WHEN            reduce using rule 166 (primaryExpression -> jumpExpression .)
    LONG            reduce using rule 166 (primaryExpression -> jumpExpression .)
    ELVIS           reduce using rule 166 (primaryExpression -> jumpExpression .)
    IN              reduce using rule 166 (primaryExpression -> jumpExpression .)
    NOT_IN          reduce using rule 166 (primaryExpression -> jumpExpression .)
    IS              reduce using rule 166 (primaryExpression -> jumpExpression .)
    NOT_IS          reduce using rule 166 (primaryExpression -> jumpExpression .)
    MAIOR           reduce using rule 166 (primaryExpression -> jumpExpression .)
    MENORIGUAL      reduce using rule 166 (primaryExpression -> jumpExpression .)
    MAIORIGUAL      reduce using rule 166 (primaryExpression -> jumpExpression .)
    DIFERENTE       reduce using rule 166 (primaryExpression -> jumpExpression .)
    IDENTIDADE      reduce using rule 166 (primaryExpression -> jumpExpression .)
    IGUALDADE       reduce using rule 166 (primaryExpression -> jumpExpression .)
    SEMIDENTIDADE   reduce using rule 166 (primaryExpression -> jumpExpression .)
    AND             reduce using rule 166 (primaryExpression -> jumpExpression .)
    OR              reduce using rule 166 (primaryExpression -> jumpExpression .)
    FUN             reduce using rule 166 (primaryExpression -> jumpExpression .)
    FOR             reduce using rule 166 (primaryExpression -> jumpExpression .)
    WHILE           reduce using rule 166 (primaryExpression -> jumpExpression .)
    DO              reduce using rule 166 (primaryExpression -> jumpExpression .)
    LITERAL_STRING  reduce using rule 166 (primaryExpression -> jumpExpression .)
    IF              reduce using rule 166 (primaryExpression -> jumpExpression .)
    RETURN          reduce using rule 166 (primaryExpression -> jumpExpression .)
    RETURN_AT       reduce using rule 166 (primaryExpression -> jumpExpression .)
    CONTINUE        reduce using rule 166 (primaryExpression -> jumpExpression .)
    CONTINUE_AT     reduce using rule 166 (primaryExpression -> jumpExpression .)
    BREAK           reduce using rule 166 (primaryExpression -> jumpExpression .)
    BREAK_AT        reduce using rule 166 (primaryExpression -> jumpExpression .)
    NOT             reduce using rule 166 (primaryExpression -> jumpExpression .)
    SUSPEND         reduce using rule 166 (primaryExpression -> jumpExpression .)
    COMMA           reduce using rule 166 (primaryExpression -> jumpExpression .)
    RPAREN          reduce using rule 166 (primaryExpression -> jumpExpression .)
    LCHAVE          reduce using rule 166 (primaryExpression -> jumpExpression .)
    PV              reduce using rule 166 (primaryExpression -> jumpExpression .)
    ELSE            reduce using rule 166 (primaryExpression -> jumpExpression .)
    RCCT            reduce using rule 166 (primaryExpression -> jumpExpression .)


state 105

    (111) preue -> unaryPrefix .
    (112) preue -> unaryPrefix . preue
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
    LITERAL_STRING  reduce using rule 111 (preue -> unaryPrefix .)
    LPAREN          reduce using rule 111 (preue -> unaryPrefix .)
    COLONCOLON      reduce using rule 111 (preue -> unaryPrefix .)
    LCCT            reduce using rule 111 (preue -> unaryPrefix .)
    IF              reduce using rule 111 (preue -> unaryPrefix .)
    RETURN          reduce using rule 111 (preue -> unaryPrefix .)
    RETURN_AT       reduce using rule 111 (preue -> unaryPrefix .)
    CONTINUE        reduce using rule 111 (preue -> unaryPrefix .)
    CONTINUE_AT     reduce using rule 111 (preue -> unaryPrefix .)
    BREAK           reduce using rule 111 (preue -> unaryPrefix .)
    BREAK_AT        reduce using rule 111 (preue -> unaryPrefix .)
    RCHAVE          reduce using rule 111 (preue -> unaryPrefix .)
    FUN             reduce using rule 111 (preue -> unaryPrefix .)
    SUSPEND         reduce using rule 111 (preue -> unaryPrefix .)
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

  ! ID              [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! CROSSINLINE     [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! IMPORT          [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! INIT            [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! NOINLINE        [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! OUT             [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! VARARG          [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! WHERE           [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! INT             [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! FLOAT           [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! BOOLEAN         [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! STRING          [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! ARRAY           [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! CHAR            [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! OBJECT          [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! CONST           [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! CONSTRUCTOR     [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! EOF             [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! FALSE           [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! FUNCTION        [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! NULL            [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! NULLABLE        [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! NUMBER          [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! OPERATOR        [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! SMARTCAST       [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! THIS            [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! TRUE            [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! VAL             [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! VAR             [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! DOUBLE          [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! WHEN            [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! LONG            [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! INCREMENTO      [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! DECREMENTO      [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! MINUS           [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! PLUS            [ reduce using rule 111 (preue -> unaryPrefix .) ]
  ! NOT             [ reduce using rule 111 (preue -> unaryPrefix .) ]

    unaryPrefix                    shift and go to state 105
    preue                          shift and go to state 214
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    simpleIdentifier               shift and go to state 215

state 106

    (87) equality -> comparison .
    (88) equality -> comparison . equalityOperator equality
    (231) equalityOperator -> . DIFERENTE
    (232) equalityOperator -> . IDENTIDADE
    (233) equalityOperator -> . IGUALDADE
    (234) equalityOperator -> . SEMIDENTIDADE

  ! shift/reduce conflict for DIFERENTE resolved as shift
  ! shift/reduce conflict for IDENTIDADE resolved as shift
  ! shift/reduce conflict for IGUALDADE resolved as shift
  ! shift/reduce conflict for SEMIDENTIDADE resolved as shift
    INCREMENTO      reduce using rule 87 (equality -> comparison .)
    DECREMENTO      reduce using rule 87 (equality -> comparison .)
    MENOR           reduce using rule 87 (equality -> comparison .)
    LCCT            reduce using rule 87 (equality -> comparison .)
    LPAREN          reduce using rule 87 (equality -> comparison .)
    COLONCOLON      reduce using rule 87 (equality -> comparison .)
    RCHAVE          reduce using rule 87 (equality -> comparison .)
    PONTO           reduce using rule 87 (equality -> comparison .)
    AS              reduce using rule 87 (equality -> comparison .)
    MAISIGUAL       reduce using rule 87 (equality -> comparison .)
    MENOSIGUAL      reduce using rule 87 (equality -> comparison .)
    MULTIGUAL       reduce using rule 87 (equality -> comparison .)
    DIVIGUAL        reduce using rule 87 (equality -> comparison .)
    MODIGUAL        reduce using rule 87 (equality -> comparison .)
    MULT            reduce using rule 87 (equality -> comparison .)
    DIVIDE          reduce using rule 87 (equality -> comparison .)
    MOD             reduce using rule 87 (equality -> comparison .)
    PLUS            reduce using rule 87 (equality -> comparison .)
    MINUS           reduce using rule 87 (equality -> comparison .)
    PONTOPONTO      reduce using rule 87 (equality -> comparison .)
    ID              reduce using rule 87 (equality -> comparison .)
    CROSSINLINE     reduce using rule 87 (equality -> comparison .)
    IMPORT          reduce using rule 87 (equality -> comparison .)
    INIT            reduce using rule 87 (equality -> comparison .)
    NOINLINE        reduce using rule 87 (equality -> comparison .)
    OUT             reduce using rule 87 (equality -> comparison .)
    VARARG          reduce using rule 87 (equality -> comparison .)
    WHERE           reduce using rule 87 (equality -> comparison .)
    INT             reduce using rule 87 (equality -> comparison .)
    FLOAT           reduce using rule 87 (equality -> comparison .)
    BOOLEAN         reduce using rule 87 (equality -> comparison .)
    STRING          reduce using rule 87 (equality -> comparison .)
    ARRAY           reduce using rule 87 (equality -> comparison .)
    CHAR            reduce using rule 87 (equality -> comparison .)
    OBJECT          reduce using rule 87 (equality -> comparison .)
    CONST           reduce using rule 87 (equality -> comparison .)
    CONSTRUCTOR     reduce using rule 87 (equality -> comparison .)
    EOF             reduce using rule 87 (equality -> comparison .)
    FALSE           reduce using rule 87 (equality -> comparison .)
    FUNCTION        reduce using rule 87 (equality -> comparison .)
    NULL            reduce using rule 87 (equality -> comparison .)
    NULLABLE        reduce using rule 87 (equality -> comparison .)
    NUMBER          reduce using rule 87 (equality -> comparison .)
    OPERATOR        reduce using rule 87 (equality -> comparison .)
    SMARTCAST       reduce using rule 87 (equality -> comparison .)
    THIS            reduce using rule 87 (equality -> comparison .)
    TRUE            reduce using rule 87 (equality -> comparison .)
    VAL             reduce using rule 87 (equality -> comparison .)
    VAR             reduce using rule 87 (equality -> comparison .)
    DOUBLE          reduce using rule 87 (equality -> comparison .)
    WHEN            reduce using rule 87 (equality -> comparison .)
    LONG            reduce using rule 87 (equality -> comparison .)
    ELVIS           reduce using rule 87 (equality -> comparison .)
    IN              reduce using rule 87 (equality -> comparison .)
    NOT_IN          reduce using rule 87 (equality -> comparison .)
    IS              reduce using rule 87 (equality -> comparison .)
    NOT_IS          reduce using rule 87 (equality -> comparison .)
    MAIOR           reduce using rule 87 (equality -> comparison .)
    MENORIGUAL      reduce using rule 87 (equality -> comparison .)
    MAIORIGUAL      reduce using rule 87 (equality -> comparison .)
    AND             reduce using rule 87 (equality -> comparison .)
    OR              reduce using rule 87 (equality -> comparison .)
    FUN             reduce using rule 87 (equality -> comparison .)
    FOR             reduce using rule 87 (equality -> comparison .)
    WHILE           reduce using rule 87 (equality -> comparison .)
    DO              reduce using rule 87 (equality -> comparison .)
    LITERAL_STRING  reduce using rule 87 (equality -> comparison .)
    IF              reduce using rule 87 (equality -> comparison .)
    RETURN          reduce using rule 87 (equality -> comparison .)
    RETURN_AT       reduce using rule 87 (equality -> comparison .)
    CONTINUE        reduce using rule 87 (equality -> comparison .)
    CONTINUE_AT     reduce using rule 87 (equality -> comparison .)
    BREAK           reduce using rule 87 (equality -> comparison .)
    BREAK_AT        reduce using rule 87 (equality -> comparison .)
    NOT             reduce using rule 87 (equality -> comparison .)
    SUSPEND         reduce using rule 87 (equality -> comparison .)
    COMMA           reduce using rule 87 (equality -> comparison .)
    RPAREN          reduce using rule 87 (equality -> comparison .)
    LCHAVE          reduce using rule 87 (equality -> comparison .)
    PV              reduce using rule 87 (equality -> comparison .)
    ELSE            reduce using rule 87 (equality -> comparison .)
    RCCT            reduce using rule 87 (equality -> comparison .)
    DIFERENTE       shift and go to state 217
    IDENTIDADE      shift and go to state 218
    IGUALDADE       shift and go to state 219
    SEMIDENTIDADE   shift and go to state 220

  ! DIFERENTE       [ reduce using rule 87 (equality -> comparison .) ]
  ! IDENTIDADE      [ reduce using rule 87 (equality -> comparison .) ]
  ! IGUALDADE       [ reduce using rule 87 (equality -> comparison .) ]
  ! SEMIDENTIDADE   [ reduce using rule 87 (equality -> comparison .) ]

    equalityOperator               shift and go to state 216

state 107

    (222) callableReference -> receiverType . COLONCOLON simpleIdentifier
    (224) callableReference -> receiverType . COLONCOLON CLASS

    COLONCOLON      shift and go to state 221


state 108

    (223) callableReference -> COLONCOLON . simpleIdentifier
    (225) callableReference -> COLONCOLON . CLASS
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    CLASS           shift and go to state 223
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    simpleIdentifier               shift and go to state 222

state 109

    (207) functionLiteral -> lambdaLiteral .

    INCREMENTO      reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    DECREMENTO      reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    MENOR           reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    LCCT            reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    LPAREN          reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    COLONCOLON      reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    RCHAVE          reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    PONTO           reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    AS              reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    MAISIGUAL       reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    MENOSIGUAL      reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    MULTIGUAL       reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    DIVIGUAL        reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    MODIGUAL        reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    MULT            reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    DIVIDE          reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    MOD             reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    PLUS            reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    MINUS           reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    PONTOPONTO      reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    ID              reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    CROSSINLINE     reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    IMPORT          reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    INIT            reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    NOINLINE        reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    OUT             reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    VARARG          reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    WHERE           reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    INT             reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    FLOAT           reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    BOOLEAN         reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    STRING          reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    ARRAY           reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    CHAR            reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    OBJECT          reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    CONST           reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    CONSTRUCTOR     reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    EOF             reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    FALSE           reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    FUNCTION        reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    NULL            reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    NULLABLE        reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    NUMBER          reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    OPERATOR        reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    SMARTCAST       reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    THIS            reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    TRUE            reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    VAL             reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    VAR             reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    DOUBLE          reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    WHEN            reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    LONG            reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    ELVIS           reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    IN              reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    NOT_IN          reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    IS              reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    NOT_IS          reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    MAIOR           reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    MENORIGUAL      reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    MAIORIGUAL      reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    DIFERENTE       reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    IDENTIDADE      reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    IGUALDADE       reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    SEMIDENTIDADE   reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    AND             reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    OR              reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    FUN             reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    FOR             reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    WHILE           reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    DO              reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    LITERAL_STRING  reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    IF              reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    RETURN          reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    RETURN_AT       reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    CONTINUE        reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    CONTINUE_AT     reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    BREAK           reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    BREAK_AT        reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    NOT             reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    SUSPEND         reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    COMMA           reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    RPAREN          reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    LCHAVE          reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    PV              reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    ELSE            reduce using rule 207 (functionLiteral -> lambdaLiteral .)
    RCCT            reduce using rule 207 (functionLiteral -> lambdaLiteral .)


state 110

    (208) functionLiteral -> anonymousFunction .

    INCREMENTO      reduce using rule 208 (functionLiteral -> anonymousFunction .)
    DECREMENTO      reduce using rule 208 (functionLiteral -> anonymousFunction .)
    MENOR           reduce using rule 208 (functionLiteral -> anonymousFunction .)
    LCCT            reduce using rule 208 (functionLiteral -> anonymousFunction .)
    LPAREN          reduce using rule 208 (functionLiteral -> anonymousFunction .)
    COLONCOLON      reduce using rule 208 (functionLiteral -> anonymousFunction .)
    RCHAVE          reduce using rule 208 (functionLiteral -> anonymousFunction .)
    PONTO           reduce using rule 208 (functionLiteral -> anonymousFunction .)
    AS              reduce using rule 208 (functionLiteral -> anonymousFunction .)
    MAISIGUAL       reduce using rule 208 (functionLiteral -> anonymousFunction .)
    MENOSIGUAL      reduce using rule 208 (functionLiteral -> anonymousFunction .)
    MULTIGUAL       reduce using rule 208 (functionLiteral -> anonymousFunction .)
    DIVIGUAL        reduce using rule 208 (functionLiteral -> anonymousFunction .)
    MODIGUAL        reduce using rule 208 (functionLiteral -> anonymousFunction .)
    MULT            reduce using rule 208 (functionLiteral -> anonymousFunction .)
    DIVIDE          reduce using rule 208 (functionLiteral -> anonymousFunction .)
    MOD             reduce using rule 208 (functionLiteral -> anonymousFunction .)
    PLUS            reduce using rule 208 (functionLiteral -> anonymousFunction .)
    MINUS           reduce using rule 208 (functionLiteral -> anonymousFunction .)
    PONTOPONTO      reduce using rule 208 (functionLiteral -> anonymousFunction .)
    ID              reduce using rule 208 (functionLiteral -> anonymousFunction .)
    CROSSINLINE     reduce using rule 208 (functionLiteral -> anonymousFunction .)
    IMPORT          reduce using rule 208 (functionLiteral -> anonymousFunction .)
    INIT            reduce using rule 208 (functionLiteral -> anonymousFunction .)
    NOINLINE        reduce using rule 208 (functionLiteral -> anonymousFunction .)
    OUT             reduce using rule 208 (functionLiteral -> anonymousFunction .)
    VARARG          reduce using rule 208 (functionLiteral -> anonymousFunction .)
    WHERE           reduce using rule 208 (functionLiteral -> anonymousFunction .)
    INT             reduce using rule 208 (functionLiteral -> anonymousFunction .)
    FLOAT           reduce using rule 208 (functionLiteral -> anonymousFunction .)
    BOOLEAN         reduce using rule 208 (functionLiteral -> anonymousFunction .)
    STRING          reduce using rule 208 (functionLiteral -> anonymousFunction .)
    ARRAY           reduce using rule 208 (functionLiteral -> anonymousFunction .)
    CHAR            reduce using rule 208 (functionLiteral -> anonymousFunction .)
    OBJECT          reduce using rule 208 (functionLiteral -> anonymousFunction .)
    CONST           reduce using rule 208 (functionLiteral -> anonymousFunction .)
    CONSTRUCTOR     reduce using rule 208 (functionLiteral -> anonymousFunction .)
    EOF             reduce using rule 208 (functionLiteral -> anonymousFunction .)
    FALSE           reduce using rule 208 (functionLiteral -> anonymousFunction .)
    FUNCTION        reduce using rule 208 (functionLiteral -> anonymousFunction .)
    NULL            reduce using rule 208 (functionLiteral -> anonymousFunction .)
    NULLABLE        reduce using rule 208 (functionLiteral -> anonymousFunction .)
    NUMBER          reduce using rule 208 (functionLiteral -> anonymousFunction .)
    OPERATOR        reduce using rule 208 (functionLiteral -> anonymousFunction .)
    SMARTCAST       reduce using rule 208 (functionLiteral -> anonymousFunction .)
    THIS            reduce using rule 208 (functionLiteral -> anonymousFunction .)
    TRUE            reduce using rule 208 (functionLiteral -> anonymousFunction .)
    VAL             reduce using rule 208 (functionLiteral -> anonymousFunction .)
    VAR             reduce using rule 208 (functionLiteral -> anonymousFunction .)
    DOUBLE          reduce using rule 208 (functionLiteral -> anonymousFunction .)
    WHEN            reduce using rule 208 (functionLiteral -> anonymousFunction .)
    LONG            reduce using rule 208 (functionLiteral -> anonymousFunction .)
    ELVIS           reduce using rule 208 (functionLiteral -> anonymousFunction .)
    IN              reduce using rule 208 (functionLiteral -> anonymousFunction .)
    NOT_IN          reduce using rule 208 (functionLiteral -> anonymousFunction .)
    IS              reduce using rule 208 (functionLiteral -> anonymousFunction .)
    NOT_IS          reduce using rule 208 (functionLiteral -> anonymousFunction .)
    MAIOR           reduce using rule 208 (functionLiteral -> anonymousFunction .)
    MENORIGUAL      reduce using rule 208 (functionLiteral -> anonymousFunction .)
    MAIORIGUAL      reduce using rule 208 (functionLiteral -> anonymousFunction .)
    DIFERENTE       reduce using rule 208 (functionLiteral -> anonymousFunction .)
    IDENTIDADE      reduce using rule 208 (functionLiteral -> anonymousFunction .)
    IGUALDADE       reduce using rule 208 (functionLiteral -> anonymousFunction .)
    SEMIDENTIDADE   reduce using rule 208 (functionLiteral -> anonymousFunction .)
    AND             reduce using rule 208 (functionLiteral -> anonymousFunction .)
    OR              reduce using rule 208 (functionLiteral -> anonymousFunction .)
    FUN             reduce using rule 208 (functionLiteral -> anonymousFunction .)
    FOR             reduce using rule 208 (functionLiteral -> anonymousFunction .)
    WHILE           reduce using rule 208 (functionLiteral -> anonymousFunction .)
    DO              reduce using rule 208 (functionLiteral -> anonymousFunction .)
    LITERAL_STRING  reduce using rule 208 (functionLiteral -> anonymousFunction .)
    IF              reduce using rule 208 (functionLiteral -> anonymousFunction .)
    RETURN          reduce using rule 208 (functionLiteral -> anonymousFunction .)
    RETURN_AT       reduce using rule 208 (functionLiteral -> anonymousFunction .)
    CONTINUE        reduce using rule 208 (functionLiteral -> anonymousFunction .)
    CONTINUE_AT     reduce using rule 208 (functionLiteral -> anonymousFunction .)
    BREAK           reduce using rule 208 (functionLiteral -> anonymousFunction .)
    BREAK_AT        reduce using rule 208 (functionLiteral -> anonymousFunction .)
    NOT             reduce using rule 208 (functionLiteral -> anonymousFunction .)
    SUSPEND         reduce using rule 208 (functionLiteral -> anonymousFunction .)
    COMMA           reduce using rule 208 (functionLiteral -> anonymousFunction .)
    RPAREN          reduce using rule 208 (functionLiteral -> anonymousFunction .)
    LCHAVE          reduce using rule 208 (functionLiteral -> anonymousFunction .)
    PV              reduce using rule 208 (functionLiteral -> anonymousFunction .)
    ELSE            reduce using rule 208 (functionLiteral -> anonymousFunction .)
    RCCT            reduce using rule 208 (functionLiteral -> anonymousFunction .)


state 111

    (168) collectionLiteral -> LCCT . cl RCCT
    (169) collectionLiteral -> LCCT . RCCT
    (170) cl -> . expression
    (171) cl -> . expression COMMA cl
    (82) expression -> . disjunction
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (33) typeModifier -> . SUSPEND

    RCCT            shift and go to state 225
    LITERAL_STRING  shift and go to state 99
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    LPAREN          shift and go to state 152
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57

    cl                             shift and go to state 224
    expression                     shift and go to state 226
    disjunction                    shift and go to state 85
    conjunction                    shift and go to state 94
    equality                       shift and go to state 97
    comparison                     shift and go to state 106
    infixOperation                 shift and go to state 121
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    simpleIdentifier               shift and go to state 149
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133
    prefixUnaryExpression          shift and go to state 150
    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 151
    unaryPrefix                    shift and go to state 105
    primaryExpression              shift and go to state 95
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122

state 112

    (210) ifExpression -> IF . LPAREN expression RPAREN if1 if2 ELSE if1 if2

    LPAREN          shift and go to state 227


state 113

    (215) jumpExpression -> RETURN . expression
    (82) expression -> . disjunction
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (33) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 99
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    LPAREN          shift and go to state 152
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57

    expression                     shift and go to state 228
    disjunction                    shift and go to state 85
    conjunction                    shift and go to state 94
    equality                       shift and go to state 97
    comparison                     shift and go to state 106
    infixOperation                 shift and go to state 121
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    simpleIdentifier               shift and go to state 149
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133
    prefixUnaryExpression          shift and go to state 150
    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 151
    unaryPrefix                    shift and go to state 105
    primaryExpression              shift and go to state 95
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122

state 114

    (216) jumpExpression -> RETURN_AT . expression
    (82) expression -> . disjunction
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (33) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 99
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    LPAREN          shift and go to state 152
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57

    expression                     shift and go to state 229
    disjunction                    shift and go to state 85
    conjunction                    shift and go to state 94
    equality                       shift and go to state 97
    comparison                     shift and go to state 106
    infixOperation                 shift and go to state 121
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    simpleIdentifier               shift and go to state 149
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133
    prefixUnaryExpression          shift and go to state 150
    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 151
    unaryPrefix                    shift and go to state 105
    primaryExpression              shift and go to state 95
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122

state 115

    (218) jumpExpression -> CONTINUE .

    INCREMENTO      reduce using rule 218 (jumpExpression -> CONTINUE .)
    DECREMENTO      reduce using rule 218 (jumpExpression -> CONTINUE .)
    MENOR           reduce using rule 218 (jumpExpression -> CONTINUE .)
    LCCT            reduce using rule 218 (jumpExpression -> CONTINUE .)
    LPAREN          reduce using rule 218 (jumpExpression -> CONTINUE .)
    COLONCOLON      reduce using rule 218 (jumpExpression -> CONTINUE .)
    RCHAVE          reduce using rule 218 (jumpExpression -> CONTINUE .)
    PONTO           reduce using rule 218 (jumpExpression -> CONTINUE .)
    AS              reduce using rule 218 (jumpExpression -> CONTINUE .)
    MAISIGUAL       reduce using rule 218 (jumpExpression -> CONTINUE .)
    MENOSIGUAL      reduce using rule 218 (jumpExpression -> CONTINUE .)
    MULTIGUAL       reduce using rule 218 (jumpExpression -> CONTINUE .)
    DIVIGUAL        reduce using rule 218 (jumpExpression -> CONTINUE .)
    MODIGUAL        reduce using rule 218 (jumpExpression -> CONTINUE .)
    MULT            reduce using rule 218 (jumpExpression -> CONTINUE .)
    DIVIDE          reduce using rule 218 (jumpExpression -> CONTINUE .)
    MOD             reduce using rule 218 (jumpExpression -> CONTINUE .)
    PLUS            reduce using rule 218 (jumpExpression -> CONTINUE .)
    MINUS           reduce using rule 218 (jumpExpression -> CONTINUE .)
    PONTOPONTO      reduce using rule 218 (jumpExpression -> CONTINUE .)
    ID              reduce using rule 218 (jumpExpression -> CONTINUE .)
    CROSSINLINE     reduce using rule 218 (jumpExpression -> CONTINUE .)
    IMPORT          reduce using rule 218 (jumpExpression -> CONTINUE .)
    INIT            reduce using rule 218 (jumpExpression -> CONTINUE .)
    NOINLINE        reduce using rule 218 (jumpExpression -> CONTINUE .)
    OUT             reduce using rule 218 (jumpExpression -> CONTINUE .)
    VARARG          reduce using rule 218 (jumpExpression -> CONTINUE .)
    WHERE           reduce using rule 218 (jumpExpression -> CONTINUE .)
    INT             reduce using rule 218 (jumpExpression -> CONTINUE .)
    FLOAT           reduce using rule 218 (jumpExpression -> CONTINUE .)
    BOOLEAN         reduce using rule 218 (jumpExpression -> CONTINUE .)
    STRING          reduce using rule 218 (jumpExpression -> CONTINUE .)
    ARRAY           reduce using rule 218 (jumpExpression -> CONTINUE .)
    CHAR            reduce using rule 218 (jumpExpression -> CONTINUE .)
    OBJECT          reduce using rule 218 (jumpExpression -> CONTINUE .)
    CONST           reduce using rule 218 (jumpExpression -> CONTINUE .)
    CONSTRUCTOR     reduce using rule 218 (jumpExpression -> CONTINUE .)
    EOF             reduce using rule 218 (jumpExpression -> CONTINUE .)
    FALSE           reduce using rule 218 (jumpExpression -> CONTINUE .)
    FUNCTION        reduce using rule 218 (jumpExpression -> CONTINUE .)
    NULL            reduce using rule 218 (jumpExpression -> CONTINUE .)
    NULLABLE        reduce using rule 218 (jumpExpression -> CONTINUE .)
    NUMBER          reduce using rule 218 (jumpExpression -> CONTINUE .)
    OPERATOR        reduce using rule 218 (jumpExpression -> CONTINUE .)
    SMARTCAST       reduce using rule 218 (jumpExpression -> CONTINUE .)
    THIS            reduce using rule 218 (jumpExpression -> CONTINUE .)
    TRUE            reduce using rule 218 (jumpExpression -> CONTINUE .)
    VAL             reduce using rule 218 (jumpExpression -> CONTINUE .)
    VAR             reduce using rule 218 (jumpExpression -> CONTINUE .)
    DOUBLE          reduce using rule 218 (jumpExpression -> CONTINUE .)
    WHEN            reduce using rule 218 (jumpExpression -> CONTINUE .)
    LONG            reduce using rule 218 (jumpExpression -> CONTINUE .)
    ELVIS           reduce using rule 218 (jumpExpression -> CONTINUE .)
    IN              reduce using rule 218 (jumpExpression -> CONTINUE .)
    NOT_IN          reduce using rule 218 (jumpExpression -> CONTINUE .)
    IS              reduce using rule 218 (jumpExpression -> CONTINUE .)
    NOT_IS          reduce using rule 218 (jumpExpression -> CONTINUE .)
    MAIOR           reduce using rule 218 (jumpExpression -> CONTINUE .)
    MENORIGUAL      reduce using rule 218 (jumpExpression -> CONTINUE .)
    MAIORIGUAL      reduce using rule 218 (jumpExpression -> CONTINUE .)
    DIFERENTE       reduce using rule 218 (jumpExpression -> CONTINUE .)
    IDENTIDADE      reduce using rule 218 (jumpExpression -> CONTINUE .)
    IGUALDADE       reduce using rule 218 (jumpExpression -> CONTINUE .)
    SEMIDENTIDADE   reduce using rule 218 (jumpExpression -> CONTINUE .)
    AND             reduce using rule 218 (jumpExpression -> CONTINUE .)
    OR              reduce using rule 218 (jumpExpression -> CONTINUE .)
    FUN             reduce using rule 218 (jumpExpression -> CONTINUE .)
    FOR             reduce using rule 218 (jumpExpression -> CONTINUE .)
    WHILE           reduce using rule 218 (jumpExpression -> CONTINUE .)
    DO              reduce using rule 218 (jumpExpression -> CONTINUE .)
    LITERAL_STRING  reduce using rule 218 (jumpExpression -> CONTINUE .)
    IF              reduce using rule 218 (jumpExpression -> CONTINUE .)
    RETURN          reduce using rule 218 (jumpExpression -> CONTINUE .)
    RETURN_AT       reduce using rule 218 (jumpExpression -> CONTINUE .)
    CONTINUE        reduce using rule 218 (jumpExpression -> CONTINUE .)
    CONTINUE_AT     reduce using rule 218 (jumpExpression -> CONTINUE .)
    BREAK           reduce using rule 218 (jumpExpression -> CONTINUE .)
    BREAK_AT        reduce using rule 218 (jumpExpression -> CONTINUE .)
    NOT             reduce using rule 218 (jumpExpression -> CONTINUE .)
    SUSPEND         reduce using rule 218 (jumpExpression -> CONTINUE .)
    COMMA           reduce using rule 218 (jumpExpression -> CONTINUE .)
    RPAREN          reduce using rule 218 (jumpExpression -> CONTINUE .)
    LCHAVE          reduce using rule 218 (jumpExpression -> CONTINUE .)
    PV              reduce using rule 218 (jumpExpression -> CONTINUE .)
    ELSE            reduce using rule 218 (jumpExpression -> CONTINUE .)
    RCCT            reduce using rule 218 (jumpExpression -> CONTINUE .)


state 116

    (219) jumpExpression -> CONTINUE_AT .

    INCREMENTO      reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    DECREMENTO      reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    MENOR           reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    LCCT            reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    LPAREN          reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    COLONCOLON      reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    RCHAVE          reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    PONTO           reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    AS              reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    MAISIGUAL       reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    MENOSIGUAL      reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    MULTIGUAL       reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    DIVIGUAL        reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    MODIGUAL        reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    MULT            reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    DIVIDE          reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    MOD             reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    PLUS            reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    MINUS           reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    PONTOPONTO      reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    ID              reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    CROSSINLINE     reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    IMPORT          reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    INIT            reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    NOINLINE        reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    OUT             reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    VARARG          reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    WHERE           reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    INT             reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    FLOAT           reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    BOOLEAN         reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    STRING          reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    ARRAY           reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    CHAR            reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    OBJECT          reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    CONST           reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    CONSTRUCTOR     reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    EOF             reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    FALSE           reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    FUNCTION        reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    NULL            reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    NULLABLE        reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    NUMBER          reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    OPERATOR        reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    SMARTCAST       reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    THIS            reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    TRUE            reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    VAL             reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    VAR             reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    DOUBLE          reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    WHEN            reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    LONG            reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    ELVIS           reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    IN              reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    NOT_IN          reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    IS              reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    NOT_IS          reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    MAIOR           reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    MENORIGUAL      reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    MAIORIGUAL      reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    DIFERENTE       reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    IDENTIDADE      reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    IGUALDADE       reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    SEMIDENTIDADE   reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    AND             reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    OR              reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    FUN             reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    FOR             reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    WHILE           reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    DO              reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    LITERAL_STRING  reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    IF              reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    RETURN          reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    RETURN_AT       reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    CONTINUE        reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    CONTINUE_AT     reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    BREAK           reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    BREAK_AT        reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    NOT             reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    SUSPEND         reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    COMMA           reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    RPAREN          reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    LCHAVE          reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    PV              reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    ELSE            reduce using rule 219 (jumpExpression -> CONTINUE_AT .)
    RCCT            reduce using rule 219 (jumpExpression -> CONTINUE_AT .)


state 117

    (220) jumpExpression -> BREAK .

    INCREMENTO      reduce using rule 220 (jumpExpression -> BREAK .)
    DECREMENTO      reduce using rule 220 (jumpExpression -> BREAK .)
    MENOR           reduce using rule 220 (jumpExpression -> BREAK .)
    LCCT            reduce using rule 220 (jumpExpression -> BREAK .)
    LPAREN          reduce using rule 220 (jumpExpression -> BREAK .)
    COLONCOLON      reduce using rule 220 (jumpExpression -> BREAK .)
    RCHAVE          reduce using rule 220 (jumpExpression -> BREAK .)
    PONTO           reduce using rule 220 (jumpExpression -> BREAK .)
    AS              reduce using rule 220 (jumpExpression -> BREAK .)
    MAISIGUAL       reduce using rule 220 (jumpExpression -> BREAK .)
    MENOSIGUAL      reduce using rule 220 (jumpExpression -> BREAK .)
    MULTIGUAL       reduce using rule 220 (jumpExpression -> BREAK .)
    DIVIGUAL        reduce using rule 220 (jumpExpression -> BREAK .)
    MODIGUAL        reduce using rule 220 (jumpExpression -> BREAK .)
    MULT            reduce using rule 220 (jumpExpression -> BREAK .)
    DIVIDE          reduce using rule 220 (jumpExpression -> BREAK .)
    MOD             reduce using rule 220 (jumpExpression -> BREAK .)
    PLUS            reduce using rule 220 (jumpExpression -> BREAK .)
    MINUS           reduce using rule 220 (jumpExpression -> BREAK .)
    PONTOPONTO      reduce using rule 220 (jumpExpression -> BREAK .)
    ID              reduce using rule 220 (jumpExpression -> BREAK .)
    CROSSINLINE     reduce using rule 220 (jumpExpression -> BREAK .)
    IMPORT          reduce using rule 220 (jumpExpression -> BREAK .)
    INIT            reduce using rule 220 (jumpExpression -> BREAK .)
    NOINLINE        reduce using rule 220 (jumpExpression -> BREAK .)
    OUT             reduce using rule 220 (jumpExpression -> BREAK .)
    VARARG          reduce using rule 220 (jumpExpression -> BREAK .)
    WHERE           reduce using rule 220 (jumpExpression -> BREAK .)
    INT             reduce using rule 220 (jumpExpression -> BREAK .)
    FLOAT           reduce using rule 220 (jumpExpression -> BREAK .)
    BOOLEAN         reduce using rule 220 (jumpExpression -> BREAK .)
    STRING          reduce using rule 220 (jumpExpression -> BREAK .)
    ARRAY           reduce using rule 220 (jumpExpression -> BREAK .)
    CHAR            reduce using rule 220 (jumpExpression -> BREAK .)
    OBJECT          reduce using rule 220 (jumpExpression -> BREAK .)
    CONST           reduce using rule 220 (jumpExpression -> BREAK .)
    CONSTRUCTOR     reduce using rule 220 (jumpExpression -> BREAK .)
    EOF             reduce using rule 220 (jumpExpression -> BREAK .)
    FALSE           reduce using rule 220 (jumpExpression -> BREAK .)
    FUNCTION        reduce using rule 220 (jumpExpression -> BREAK .)
    NULL            reduce using rule 220 (jumpExpression -> BREAK .)
    NULLABLE        reduce using rule 220 (jumpExpression -> BREAK .)
    NUMBER          reduce using rule 220 (jumpExpression -> BREAK .)
    OPERATOR        reduce using rule 220 (jumpExpression -> BREAK .)
    SMARTCAST       reduce using rule 220 (jumpExpression -> BREAK .)
    THIS            reduce using rule 220 (jumpExpression -> BREAK .)
    TRUE            reduce using rule 220 (jumpExpression -> BREAK .)
    VAL             reduce using rule 220 (jumpExpression -> BREAK .)
    VAR             reduce using rule 220 (jumpExpression -> BREAK .)
    DOUBLE          reduce using rule 220 (jumpExpression -> BREAK .)
    WHEN            reduce using rule 220 (jumpExpression -> BREAK .)
    LONG            reduce using rule 220 (jumpExpression -> BREAK .)
    ELVIS           reduce using rule 220 (jumpExpression -> BREAK .)
    IN              reduce using rule 220 (jumpExpression -> BREAK .)
    NOT_IN          reduce using rule 220 (jumpExpression -> BREAK .)
    IS              reduce using rule 220 (jumpExpression -> BREAK .)
    NOT_IS          reduce using rule 220 (jumpExpression -> BREAK .)
    MAIOR           reduce using rule 220 (jumpExpression -> BREAK .)
    MENORIGUAL      reduce using rule 220 (jumpExpression -> BREAK .)
    MAIORIGUAL      reduce using rule 220 (jumpExpression -> BREAK .)
    DIFERENTE       reduce using rule 220 (jumpExpression -> BREAK .)
    IDENTIDADE      reduce using rule 220 (jumpExpression -> BREAK .)
    IGUALDADE       reduce using rule 220 (jumpExpression -> BREAK .)
    SEMIDENTIDADE   reduce using rule 220 (jumpExpression -> BREAK .)
    AND             reduce using rule 220 (jumpExpression -> BREAK .)
    OR              reduce using rule 220 (jumpExpression -> BREAK .)
    FUN             reduce using rule 220 (jumpExpression -> BREAK .)
    FOR             reduce using rule 220 (jumpExpression -> BREAK .)
    WHILE           reduce using rule 220 (jumpExpression -> BREAK .)
    DO              reduce using rule 220 (jumpExpression -> BREAK .)
    LITERAL_STRING  reduce using rule 220 (jumpExpression -> BREAK .)
    IF              reduce using rule 220 (jumpExpression -> BREAK .)
    RETURN          reduce using rule 220 (jumpExpression -> BREAK .)
    RETURN_AT       reduce using rule 220 (jumpExpression -> BREAK .)
    CONTINUE        reduce using rule 220 (jumpExpression -> BREAK .)
    CONTINUE_AT     reduce using rule 220 (jumpExpression -> BREAK .)
    BREAK           reduce using rule 220 (jumpExpression -> BREAK .)
    BREAK_AT        reduce using rule 220 (jumpExpression -> BREAK .)
    NOT             reduce using rule 220 (jumpExpression -> BREAK .)
    SUSPEND         reduce using rule 220 (jumpExpression -> BREAK .)
    COMMA           reduce using rule 220 (jumpExpression -> BREAK .)
    RPAREN          reduce using rule 220 (jumpExpression -> BREAK .)
    LCHAVE          reduce using rule 220 (jumpExpression -> BREAK .)
    PV              reduce using rule 220 (jumpExpression -> BREAK .)
    ELSE            reduce using rule 220 (jumpExpression -> BREAK .)
    RCCT            reduce using rule 220 (jumpExpression -> BREAK .)


state 118

    (221) jumpExpression -> BREAK_AT .

    INCREMENTO      reduce using rule 221 (jumpExpression -> BREAK_AT .)
    DECREMENTO      reduce using rule 221 (jumpExpression -> BREAK_AT .)
    MENOR           reduce using rule 221 (jumpExpression -> BREAK_AT .)
    LCCT            reduce using rule 221 (jumpExpression -> BREAK_AT .)
    LPAREN          reduce using rule 221 (jumpExpression -> BREAK_AT .)
    COLONCOLON      reduce using rule 221 (jumpExpression -> BREAK_AT .)
    RCHAVE          reduce using rule 221 (jumpExpression -> BREAK_AT .)
    PONTO           reduce using rule 221 (jumpExpression -> BREAK_AT .)
    AS              reduce using rule 221 (jumpExpression -> BREAK_AT .)
    MAISIGUAL       reduce using rule 221 (jumpExpression -> BREAK_AT .)
    MENOSIGUAL      reduce using rule 221 (jumpExpression -> BREAK_AT .)
    MULTIGUAL       reduce using rule 221 (jumpExpression -> BREAK_AT .)
    DIVIGUAL        reduce using rule 221 (jumpExpression -> BREAK_AT .)
    MODIGUAL        reduce using rule 221 (jumpExpression -> BREAK_AT .)
    MULT            reduce using rule 221 (jumpExpression -> BREAK_AT .)
    DIVIDE          reduce using rule 221 (jumpExpression -> BREAK_AT .)
    MOD             reduce using rule 221 (jumpExpression -> BREAK_AT .)
    PLUS            reduce using rule 221 (jumpExpression -> BREAK_AT .)
    MINUS           reduce using rule 221 (jumpExpression -> BREAK_AT .)
    PONTOPONTO      reduce using rule 221 (jumpExpression -> BREAK_AT .)
    ID              reduce using rule 221 (jumpExpression -> BREAK_AT .)
    CROSSINLINE     reduce using rule 221 (jumpExpression -> BREAK_AT .)
    IMPORT          reduce using rule 221 (jumpExpression -> BREAK_AT .)
    INIT            reduce using rule 221 (jumpExpression -> BREAK_AT .)
    NOINLINE        reduce using rule 221 (jumpExpression -> BREAK_AT .)
    OUT             reduce using rule 221 (jumpExpression -> BREAK_AT .)
    VARARG          reduce using rule 221 (jumpExpression -> BREAK_AT .)
    WHERE           reduce using rule 221 (jumpExpression -> BREAK_AT .)
    INT             reduce using rule 221 (jumpExpression -> BREAK_AT .)
    FLOAT           reduce using rule 221 (jumpExpression -> BREAK_AT .)
    BOOLEAN         reduce using rule 221 (jumpExpression -> BREAK_AT .)
    STRING          reduce using rule 221 (jumpExpression -> BREAK_AT .)
    ARRAY           reduce using rule 221 (jumpExpression -> BREAK_AT .)
    CHAR            reduce using rule 221 (jumpExpression -> BREAK_AT .)
    OBJECT          reduce using rule 221 (jumpExpression -> BREAK_AT .)
    CONST           reduce using rule 221 (jumpExpression -> BREAK_AT .)
    CONSTRUCTOR     reduce using rule 221 (jumpExpression -> BREAK_AT .)
    EOF             reduce using rule 221 (jumpExpression -> BREAK_AT .)
    FALSE           reduce using rule 221 (jumpExpression -> BREAK_AT .)
    FUNCTION        reduce using rule 221 (jumpExpression -> BREAK_AT .)
    NULL            reduce using rule 221 (jumpExpression -> BREAK_AT .)
    NULLABLE        reduce using rule 221 (jumpExpression -> BREAK_AT .)
    NUMBER          reduce using rule 221 (jumpExpression -> BREAK_AT .)
    OPERATOR        reduce using rule 221 (jumpExpression -> BREAK_AT .)
    SMARTCAST       reduce using rule 221 (jumpExpression -> BREAK_AT .)
    THIS            reduce using rule 221 (jumpExpression -> BREAK_AT .)
    TRUE            reduce using rule 221 (jumpExpression -> BREAK_AT .)
    VAL             reduce using rule 221 (jumpExpression -> BREAK_AT .)
    VAR             reduce using rule 221 (jumpExpression -> BREAK_AT .)
    DOUBLE          reduce using rule 221 (jumpExpression -> BREAK_AT .)
    WHEN            reduce using rule 221 (jumpExpression -> BREAK_AT .)
    LONG            reduce using rule 221 (jumpExpression -> BREAK_AT .)
    ELVIS           reduce using rule 221 (jumpExpression -> BREAK_AT .)
    IN              reduce using rule 221 (jumpExpression -> BREAK_AT .)
    NOT_IN          reduce using rule 221 (jumpExpression -> BREAK_AT .)
    IS              reduce using rule 221 (jumpExpression -> BREAK_AT .)
    NOT_IS          reduce using rule 221 (jumpExpression -> BREAK_AT .)
    MAIOR           reduce using rule 221 (jumpExpression -> BREAK_AT .)
    MENORIGUAL      reduce using rule 221 (jumpExpression -> BREAK_AT .)
    MAIORIGUAL      reduce using rule 221 (jumpExpression -> BREAK_AT .)
    DIFERENTE       reduce using rule 221 (jumpExpression -> BREAK_AT .)
    IDENTIDADE      reduce using rule 221 (jumpExpression -> BREAK_AT .)
    IGUALDADE       reduce using rule 221 (jumpExpression -> BREAK_AT .)
    SEMIDENTIDADE   reduce using rule 221 (jumpExpression -> BREAK_AT .)
    AND             reduce using rule 221 (jumpExpression -> BREAK_AT .)
    OR              reduce using rule 221 (jumpExpression -> BREAK_AT .)
    FUN             reduce using rule 221 (jumpExpression -> BREAK_AT .)
    FOR             reduce using rule 221 (jumpExpression -> BREAK_AT .)
    WHILE           reduce using rule 221 (jumpExpression -> BREAK_AT .)
    DO              reduce using rule 221 (jumpExpression -> BREAK_AT .)
    LITERAL_STRING  reduce using rule 221 (jumpExpression -> BREAK_AT .)
    IF              reduce using rule 221 (jumpExpression -> BREAK_AT .)
    RETURN          reduce using rule 221 (jumpExpression -> BREAK_AT .)
    RETURN_AT       reduce using rule 221 (jumpExpression -> BREAK_AT .)
    CONTINUE        reduce using rule 221 (jumpExpression -> BREAK_AT .)
    CONTINUE_AT     reduce using rule 221 (jumpExpression -> BREAK_AT .)
    BREAK           reduce using rule 221 (jumpExpression -> BREAK_AT .)
    BREAK_AT        reduce using rule 221 (jumpExpression -> BREAK_AT .)
    NOT             reduce using rule 221 (jumpExpression -> BREAK_AT .)
    SUSPEND         reduce using rule 221 (jumpExpression -> BREAK_AT .)
    COMMA           reduce using rule 221 (jumpExpression -> BREAK_AT .)
    RPAREN          reduce using rule 221 (jumpExpression -> BREAK_AT .)
    LCHAVE          reduce using rule 221 (jumpExpression -> BREAK_AT .)
    PV              reduce using rule 221 (jumpExpression -> BREAK_AT .)
    ELSE            reduce using rule 221 (jumpExpression -> BREAK_AT .)
    RCCT            reduce using rule 221 (jumpExpression -> BREAK_AT .)


state 119

    (113) unaryPrefix -> label .

    INCREMENTO      reduce using rule 113 (unaryPrefix -> label .)
    DECREMENTO      reduce using rule 113 (unaryPrefix -> label .)
    MINUS           reduce using rule 113 (unaryPrefix -> label .)
    PLUS            reduce using rule 113 (unaryPrefix -> label .)
    NOT             reduce using rule 113 (unaryPrefix -> label .)
    ID              reduce using rule 113 (unaryPrefix -> label .)
    CROSSINLINE     reduce using rule 113 (unaryPrefix -> label .)
    IMPORT          reduce using rule 113 (unaryPrefix -> label .)
    INIT            reduce using rule 113 (unaryPrefix -> label .)
    NOINLINE        reduce using rule 113 (unaryPrefix -> label .)
    OUT             reduce using rule 113 (unaryPrefix -> label .)
    VARARG          reduce using rule 113 (unaryPrefix -> label .)
    WHERE           reduce using rule 113 (unaryPrefix -> label .)
    INT             reduce using rule 113 (unaryPrefix -> label .)
    FLOAT           reduce using rule 113 (unaryPrefix -> label .)
    BOOLEAN         reduce using rule 113 (unaryPrefix -> label .)
    STRING          reduce using rule 113 (unaryPrefix -> label .)
    ARRAY           reduce using rule 113 (unaryPrefix -> label .)
    CHAR            reduce using rule 113 (unaryPrefix -> label .)
    OBJECT          reduce using rule 113 (unaryPrefix -> label .)
    CONST           reduce using rule 113 (unaryPrefix -> label .)
    CONSTRUCTOR     reduce using rule 113 (unaryPrefix -> label .)
    EOF             reduce using rule 113 (unaryPrefix -> label .)
    FALSE           reduce using rule 113 (unaryPrefix -> label .)
    FUNCTION        reduce using rule 113 (unaryPrefix -> label .)
    NULL            reduce using rule 113 (unaryPrefix -> label .)
    NULLABLE        reduce using rule 113 (unaryPrefix -> label .)
    NUMBER          reduce using rule 113 (unaryPrefix -> label .)
    OPERATOR        reduce using rule 113 (unaryPrefix -> label .)
    SMARTCAST       reduce using rule 113 (unaryPrefix -> label .)
    THIS            reduce using rule 113 (unaryPrefix -> label .)
    TRUE            reduce using rule 113 (unaryPrefix -> label .)
    VAL             reduce using rule 113 (unaryPrefix -> label .)
    VAR             reduce using rule 113 (unaryPrefix -> label .)
    DOUBLE          reduce using rule 113 (unaryPrefix -> label .)
    WHEN            reduce using rule 113 (unaryPrefix -> label .)
    LONG            reduce using rule 113 (unaryPrefix -> label .)
    LITERAL_STRING  reduce using rule 113 (unaryPrefix -> label .)
    LPAREN          reduce using rule 113 (unaryPrefix -> label .)
    COLONCOLON      reduce using rule 113 (unaryPrefix -> label .)
    LCCT            reduce using rule 113 (unaryPrefix -> label .)
    IF              reduce using rule 113 (unaryPrefix -> label .)
    RETURN          reduce using rule 113 (unaryPrefix -> label .)
    RETURN_AT       reduce using rule 113 (unaryPrefix -> label .)
    CONTINUE        reduce using rule 113 (unaryPrefix -> label .)
    CONTINUE_AT     reduce using rule 113 (unaryPrefix -> label .)
    BREAK           reduce using rule 113 (unaryPrefix -> label .)
    BREAK_AT        reduce using rule 113 (unaryPrefix -> label .)
    RCHAVE          reduce using rule 113 (unaryPrefix -> label .)
    FUN             reduce using rule 113 (unaryPrefix -> label .)
    SUSPEND         reduce using rule 113 (unaryPrefix -> label .)


state 120

    (114) unaryPrefix -> prefixUnaryOperator .

    INCREMENTO      reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    DECREMENTO      reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    MINUS           reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    PLUS            reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    NOT             reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    ID              reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    CROSSINLINE     reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    IMPORT          reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    INIT            reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    NOINLINE        reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    OUT             reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    VARARG          reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    WHERE           reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    INT             reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    FLOAT           reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    BOOLEAN         reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    STRING          reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    ARRAY           reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    CHAR            reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    OBJECT          reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    CONST           reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    CONSTRUCTOR     reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    EOF             reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    FALSE           reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    FUNCTION        reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    NULL            reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    NULLABLE        reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    NUMBER          reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    OPERATOR        reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    SMARTCAST       reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    THIS            reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    TRUE            reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    VAL             reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    VAR             reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    DOUBLE          reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    WHEN            reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    LONG            reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    LITERAL_STRING  reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    LPAREN          reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    COLONCOLON      reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    LCCT            reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    IF              reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    RETURN          reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    RETURN_AT       reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    CONTINUE        reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    CONTINUE_AT     reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    BREAK           reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    BREAK_AT        reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    RCHAVE          reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    FUN             reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)
    SUSPEND         reduce using rule 114 (unaryPrefix -> prefixUnaryOperator .)


state 121

    (89) comparison -> infixOperation .
    (90) comparison -> infixOperation . comparisonOperator infixOperation
    (235) comparisonOperator -> . MENOR
    (236) comparisonOperator -> . MAIOR
    (237) comparisonOperator -> . MENORIGUAL
    (238) comparisonOperator -> . MAIORIGUAL

  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAIOR resolved as shift
  ! shift/reduce conflict for MENORIGUAL resolved as shift
  ! shift/reduce conflict for MAIORIGUAL resolved as shift
    INCREMENTO      reduce using rule 89 (comparison -> infixOperation .)
    DECREMENTO      reduce using rule 89 (comparison -> infixOperation .)
    LCCT            reduce using rule 89 (comparison -> infixOperation .)
    LPAREN          reduce using rule 89 (comparison -> infixOperation .)
    COLONCOLON      reduce using rule 89 (comparison -> infixOperation .)
    RCHAVE          reduce using rule 89 (comparison -> infixOperation .)
    PONTO           reduce using rule 89 (comparison -> infixOperation .)
    AS              reduce using rule 89 (comparison -> infixOperation .)
    MAISIGUAL       reduce using rule 89 (comparison -> infixOperation .)
    MENOSIGUAL      reduce using rule 89 (comparison -> infixOperation .)
    MULTIGUAL       reduce using rule 89 (comparison -> infixOperation .)
    DIVIGUAL        reduce using rule 89 (comparison -> infixOperation .)
    MODIGUAL        reduce using rule 89 (comparison -> infixOperation .)
    MULT            reduce using rule 89 (comparison -> infixOperation .)
    DIVIDE          reduce using rule 89 (comparison -> infixOperation .)
    MOD             reduce using rule 89 (comparison -> infixOperation .)
    PLUS            reduce using rule 89 (comparison -> infixOperation .)
    MINUS           reduce using rule 89 (comparison -> infixOperation .)
    PONTOPONTO      reduce using rule 89 (comparison -> infixOperation .)
    ID              reduce using rule 89 (comparison -> infixOperation .)
    CROSSINLINE     reduce using rule 89 (comparison -> infixOperation .)
    IMPORT          reduce using rule 89 (comparison -> infixOperation .)
    INIT            reduce using rule 89 (comparison -> infixOperation .)
    NOINLINE        reduce using rule 89 (comparison -> infixOperation .)
    OUT             reduce using rule 89 (comparison -> infixOperation .)
    VARARG          reduce using rule 89 (comparison -> infixOperation .)
    WHERE           reduce using rule 89 (comparison -> infixOperation .)
    INT             reduce using rule 89 (comparison -> infixOperation .)
    FLOAT           reduce using rule 89 (comparison -> infixOperation .)
    BOOLEAN         reduce using rule 89 (comparison -> infixOperation .)
    STRING          reduce using rule 89 (comparison -> infixOperation .)
    ARRAY           reduce using rule 89 (comparison -> infixOperation .)
    CHAR            reduce using rule 89 (comparison -> infixOperation .)
    OBJECT          reduce using rule 89 (comparison -> infixOperation .)
    CONST           reduce using rule 89 (comparison -> infixOperation .)
    CONSTRUCTOR     reduce using rule 89 (comparison -> infixOperation .)
    EOF             reduce using rule 89 (comparison -> infixOperation .)
    FALSE           reduce using rule 89 (comparison -> infixOperation .)
    FUNCTION        reduce using rule 89 (comparison -> infixOperation .)
    NULL            reduce using rule 89 (comparison -> infixOperation .)
    NULLABLE        reduce using rule 89 (comparison -> infixOperation .)
    NUMBER          reduce using rule 89 (comparison -> infixOperation .)
    OPERATOR        reduce using rule 89 (comparison -> infixOperation .)
    SMARTCAST       reduce using rule 89 (comparison -> infixOperation .)
    THIS            reduce using rule 89 (comparison -> infixOperation .)
    TRUE            reduce using rule 89 (comparison -> infixOperation .)
    VAL             reduce using rule 89 (comparison -> infixOperation .)
    VAR             reduce using rule 89 (comparison -> infixOperation .)
    DOUBLE          reduce using rule 89 (comparison -> infixOperation .)
    WHEN            reduce using rule 89 (comparison -> infixOperation .)
    LONG            reduce using rule 89 (comparison -> infixOperation .)
    ELVIS           reduce using rule 89 (comparison -> infixOperation .)
    IN              reduce using rule 89 (comparison -> infixOperation .)
    NOT_IN          reduce using rule 89 (comparison -> infixOperation .)
    IS              reduce using rule 89 (comparison -> infixOperation .)
    NOT_IS          reduce using rule 89 (comparison -> infixOperation .)
    DIFERENTE       reduce using rule 89 (comparison -> infixOperation .)
    IDENTIDADE      reduce using rule 89 (comparison -> infixOperation .)
    IGUALDADE       reduce using rule 89 (comparison -> infixOperation .)
    SEMIDENTIDADE   reduce using rule 89 (comparison -> infixOperation .)
    AND             reduce using rule 89 (comparison -> infixOperation .)
    OR              reduce using rule 89 (comparison -> infixOperation .)
    FUN             reduce using rule 89 (comparison -> infixOperation .)
    FOR             reduce using rule 89 (comparison -> infixOperation .)
    WHILE           reduce using rule 89 (comparison -> infixOperation .)
    DO              reduce using rule 89 (comparison -> infixOperation .)
    LITERAL_STRING  reduce using rule 89 (comparison -> infixOperation .)
    IF              reduce using rule 89 (comparison -> infixOperation .)
    RETURN          reduce using rule 89 (comparison -> infixOperation .)
    RETURN_AT       reduce using rule 89 (comparison -> infixOperation .)
    CONTINUE        reduce using rule 89 (comparison -> infixOperation .)
    CONTINUE_AT     reduce using rule 89 (comparison -> infixOperation .)
    BREAK           reduce using rule 89 (comparison -> infixOperation .)
    BREAK_AT        reduce using rule 89 (comparison -> infixOperation .)
    NOT             reduce using rule 89 (comparison -> infixOperation .)
    SUSPEND         reduce using rule 89 (comparison -> infixOperation .)
    COMMA           reduce using rule 89 (comparison -> infixOperation .)
    RPAREN          reduce using rule 89 (comparison -> infixOperation .)
    LCHAVE          reduce using rule 89 (comparison -> infixOperation .)
    PV              reduce using rule 89 (comparison -> infixOperation .)
    ELSE            reduce using rule 89 (comparison -> infixOperation .)
    RCCT            reduce using rule 89 (comparison -> infixOperation .)
    MENOR           shift and go to state 231
    MAIOR           shift and go to state 232
    MENORIGUAL      shift and go to state 233
    MAIORIGUAL      shift and go to state 234

  ! MENOR           [ reduce using rule 89 (comparison -> infixOperation .) ]
  ! MAIOR           [ reduce using rule 89 (comparison -> infixOperation .) ]
  ! MENORIGUAL      [ reduce using rule 89 (comparison -> infixOperation .) ]
  ! MAIORIGUAL      [ reduce using rule 89 (comparison -> infixOperation .) ]

    comparisonOperator             shift and go to state 230

state 122

    (57) receiverType -> typeModifier . rt
    (58) rt -> . parenthesizedType
    (56) parenthesizedType -> . LPAREN type RPAREN

    LPAREN          shift and go to state 139

    rt                             shift and go to state 137
    parenthesizedType              shift and go to state 138

state 123

    (250) prefixUnaryOperator -> INCREMENTO .

    INCREMENTO      reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    DECREMENTO      reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    MINUS           reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    PLUS            reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    NOT             reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    ID              reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    CROSSINLINE     reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    IMPORT          reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    INIT            reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    NOINLINE        reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    OUT             reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    VARARG          reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    WHERE           reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    INT             reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    FLOAT           reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    BOOLEAN         reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    STRING          reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    ARRAY           reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    CHAR            reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    OBJECT          reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    CONST           reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    CONSTRUCTOR     reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    EOF             reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    FALSE           reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    FUNCTION        reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    NULL            reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    NULLABLE        reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    NUMBER          reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    OPERATOR        reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    SMARTCAST       reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    THIS            reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    TRUE            reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    VAL             reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    VAR             reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    DOUBLE          reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    WHEN            reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    LONG            reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    LITERAL_STRING  reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    LPAREN          reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    COLONCOLON      reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    LCCT            reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    IF              reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    RETURN          reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    RETURN_AT       reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    CONTINUE        reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    CONTINUE_AT     reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    BREAK           reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    BREAK_AT        reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    RCHAVE          reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    FUN             reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)
    SUSPEND         reduce using rule 250 (prefixUnaryOperator -> INCREMENTO .)


state 124

    (251) prefixUnaryOperator -> DECREMENTO .

    INCREMENTO      reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    DECREMENTO      reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    MINUS           reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    PLUS            reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    NOT             reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    ID              reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    CROSSINLINE     reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    IMPORT          reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    INIT            reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    NOINLINE        reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    OUT             reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    VARARG          reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    WHERE           reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    INT             reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    FLOAT           reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    BOOLEAN         reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    STRING          reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    ARRAY           reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    CHAR            reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    OBJECT          reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    CONST           reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    CONSTRUCTOR     reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    EOF             reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    FALSE           reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    FUNCTION        reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    NULL            reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    NULLABLE        reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    NUMBER          reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    OPERATOR        reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    SMARTCAST       reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    THIS            reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    TRUE            reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    VAL             reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    VAR             reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    DOUBLE          reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    WHEN            reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    LONG            reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    LITERAL_STRING  reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    LPAREN          reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    COLONCOLON      reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    LCCT            reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    IF              reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    RETURN          reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    RETURN_AT       reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    CONTINUE        reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    CONTINUE_AT     reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    BREAK           reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    BREAK_AT        reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    RCHAVE          reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    FUN             reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)
    SUSPEND         reduce using rule 251 (prefixUnaryOperator -> DECREMENTO .)


state 125

    (252) prefixUnaryOperator -> MINUS .

    INCREMENTO      reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    DECREMENTO      reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    MINUS           reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    PLUS            reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    NOT             reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    ID              reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    CROSSINLINE     reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    IMPORT          reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    INIT            reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    NOINLINE        reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    OUT             reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    VARARG          reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    WHERE           reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    INT             reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    FLOAT           reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    BOOLEAN         reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    STRING          reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    ARRAY           reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    CHAR            reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    OBJECT          reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    CONST           reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    CONSTRUCTOR     reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    EOF             reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    FALSE           reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    FUNCTION        reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    NULL            reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    NULLABLE        reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    NUMBER          reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    OPERATOR        reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    SMARTCAST       reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    THIS            reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    TRUE            reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    VAL             reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    VAR             reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    DOUBLE          reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    WHEN            reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    LONG            reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    LITERAL_STRING  reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    LPAREN          reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    COLONCOLON      reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    LCCT            reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    IF              reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    RETURN          reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    RETURN_AT       reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    CONTINUE        reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    CONTINUE_AT     reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    BREAK           reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    BREAK_AT        reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    RCHAVE          reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    FUN             reduce using rule 252 (prefixUnaryOperator -> MINUS .)
    SUSPEND         reduce using rule 252 (prefixUnaryOperator -> MINUS .)


state 126

    (253) prefixUnaryOperator -> PLUS .

    INCREMENTO      reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    DECREMENTO      reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    MINUS           reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    PLUS            reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    NOT             reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    ID              reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    CROSSINLINE     reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    IMPORT          reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    INIT            reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    NOINLINE        reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    OUT             reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    VARARG          reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    WHERE           reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    INT             reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    FLOAT           reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    BOOLEAN         reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    STRING          reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    ARRAY           reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    CHAR            reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    OBJECT          reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    CONST           reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    CONSTRUCTOR     reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    EOF             reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    FALSE           reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    FUNCTION        reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    NULL            reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    NULLABLE        reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    NUMBER          reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    OPERATOR        reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    SMARTCAST       reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    THIS            reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    TRUE            reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    VAL             reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    VAR             reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    DOUBLE          reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    WHEN            reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    LONG            reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    LITERAL_STRING  reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    LPAREN          reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    COLONCOLON      reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    LCCT            reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    IF              reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    RETURN          reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    RETURN_AT       reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    CONTINUE        reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    CONTINUE_AT     reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    BREAK           reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    BREAK_AT        reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    RCHAVE          reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    FUN             reduce using rule 253 (prefixUnaryOperator -> PLUS .)
    SUSPEND         reduce using rule 253 (prefixUnaryOperator -> PLUS .)


state 127

    (254) prefixUnaryOperator -> NOT .

    INCREMENTO      reduce using rule 254 (prefixUnaryOperator -> NOT .)
    DECREMENTO      reduce using rule 254 (prefixUnaryOperator -> NOT .)
    MINUS           reduce using rule 254 (prefixUnaryOperator -> NOT .)
    PLUS            reduce using rule 254 (prefixUnaryOperator -> NOT .)
    NOT             reduce using rule 254 (prefixUnaryOperator -> NOT .)
    ID              reduce using rule 254 (prefixUnaryOperator -> NOT .)
    CROSSINLINE     reduce using rule 254 (prefixUnaryOperator -> NOT .)
    IMPORT          reduce using rule 254 (prefixUnaryOperator -> NOT .)
    INIT            reduce using rule 254 (prefixUnaryOperator -> NOT .)
    NOINLINE        reduce using rule 254 (prefixUnaryOperator -> NOT .)
    OUT             reduce using rule 254 (prefixUnaryOperator -> NOT .)
    VARARG          reduce using rule 254 (prefixUnaryOperator -> NOT .)
    WHERE           reduce using rule 254 (prefixUnaryOperator -> NOT .)
    INT             reduce using rule 254 (prefixUnaryOperator -> NOT .)
    FLOAT           reduce using rule 254 (prefixUnaryOperator -> NOT .)
    BOOLEAN         reduce using rule 254 (prefixUnaryOperator -> NOT .)
    STRING          reduce using rule 254 (prefixUnaryOperator -> NOT .)
    ARRAY           reduce using rule 254 (prefixUnaryOperator -> NOT .)
    CHAR            reduce using rule 254 (prefixUnaryOperator -> NOT .)
    OBJECT          reduce using rule 254 (prefixUnaryOperator -> NOT .)
    CONST           reduce using rule 254 (prefixUnaryOperator -> NOT .)
    CONSTRUCTOR     reduce using rule 254 (prefixUnaryOperator -> NOT .)
    EOF             reduce using rule 254 (prefixUnaryOperator -> NOT .)
    FALSE           reduce using rule 254 (prefixUnaryOperator -> NOT .)
    FUNCTION        reduce using rule 254 (prefixUnaryOperator -> NOT .)
    NULL            reduce using rule 254 (prefixUnaryOperator -> NOT .)
    NULLABLE        reduce using rule 254 (prefixUnaryOperator -> NOT .)
    NUMBER          reduce using rule 254 (prefixUnaryOperator -> NOT .)
    OPERATOR        reduce using rule 254 (prefixUnaryOperator -> NOT .)
    SMARTCAST       reduce using rule 254 (prefixUnaryOperator -> NOT .)
    THIS            reduce using rule 254 (prefixUnaryOperator -> NOT .)
    TRUE            reduce using rule 254 (prefixUnaryOperator -> NOT .)
    VAL             reduce using rule 254 (prefixUnaryOperator -> NOT .)
    VAR             reduce using rule 254 (prefixUnaryOperator -> NOT .)
    DOUBLE          reduce using rule 254 (prefixUnaryOperator -> NOT .)
    WHEN            reduce using rule 254 (prefixUnaryOperator -> NOT .)
    LONG            reduce using rule 254 (prefixUnaryOperator -> NOT .)
    LITERAL_STRING  reduce using rule 254 (prefixUnaryOperator -> NOT .)
    LPAREN          reduce using rule 254 (prefixUnaryOperator -> NOT .)
    COLONCOLON      reduce using rule 254 (prefixUnaryOperator -> NOT .)
    LCCT            reduce using rule 254 (prefixUnaryOperator -> NOT .)
    IF              reduce using rule 254 (prefixUnaryOperator -> NOT .)
    RETURN          reduce using rule 254 (prefixUnaryOperator -> NOT .)
    RETURN_AT       reduce using rule 254 (prefixUnaryOperator -> NOT .)
    CONTINUE        reduce using rule 254 (prefixUnaryOperator -> NOT .)
    CONTINUE_AT     reduce using rule 254 (prefixUnaryOperator -> NOT .)
    BREAK           reduce using rule 254 (prefixUnaryOperator -> NOT .)
    BREAK_AT        reduce using rule 254 (prefixUnaryOperator -> NOT .)
    RCHAVE          reduce using rule 254 (prefixUnaryOperator -> NOT .)
    FUN             reduce using rule 254 (prefixUnaryOperator -> NOT .)
    SUSPEND         reduce using rule 254 (prefixUnaryOperator -> NOT .)


state 128

    (91) infixOperation -> elvisExpression . io
    (92) infixOperation -> elvisExpression .
    (93) io -> . inOperator elvisExpression
    (94) io -> . inOperator elvisExpression io
    (95) io -> . isOperator type
    (96) io -> . isOperator type io
    (239) inOperator -> . IN
    (240) inOperator -> . NOT_IN
    (241) isOperator -> . IS
    (242) isOperator -> . NOT_IS

  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT_IN resolved as shift
  ! shift/reduce conflict for IS resolved as shift
  ! shift/reduce conflict for NOT_IS resolved as shift
    INCREMENTO      reduce using rule 92 (infixOperation -> elvisExpression .)
    DECREMENTO      reduce using rule 92 (infixOperation -> elvisExpression .)
    MENOR           reduce using rule 92 (infixOperation -> elvisExpression .)
    LCCT            reduce using rule 92 (infixOperation -> elvisExpression .)
    LPAREN          reduce using rule 92 (infixOperation -> elvisExpression .)
    COLONCOLON      reduce using rule 92 (infixOperation -> elvisExpression .)
    RCHAVE          reduce using rule 92 (infixOperation -> elvisExpression .)
    PONTO           reduce using rule 92 (infixOperation -> elvisExpression .)
    AS              reduce using rule 92 (infixOperation -> elvisExpression .)
    MAISIGUAL       reduce using rule 92 (infixOperation -> elvisExpression .)
    MENOSIGUAL      reduce using rule 92 (infixOperation -> elvisExpression .)
    MULTIGUAL       reduce using rule 92 (infixOperation -> elvisExpression .)
    DIVIGUAL        reduce using rule 92 (infixOperation -> elvisExpression .)
    MODIGUAL        reduce using rule 92 (infixOperation -> elvisExpression .)
    MULT            reduce using rule 92 (infixOperation -> elvisExpression .)
    DIVIDE          reduce using rule 92 (infixOperation -> elvisExpression .)
    MOD             reduce using rule 92 (infixOperation -> elvisExpression .)
    PLUS            reduce using rule 92 (infixOperation -> elvisExpression .)
    MINUS           reduce using rule 92 (infixOperation -> elvisExpression .)
    PONTOPONTO      reduce using rule 92 (infixOperation -> elvisExpression .)
    ID              reduce using rule 92 (infixOperation -> elvisExpression .)
    CROSSINLINE     reduce using rule 92 (infixOperation -> elvisExpression .)
    IMPORT          reduce using rule 92 (infixOperation -> elvisExpression .)
    INIT            reduce using rule 92 (infixOperation -> elvisExpression .)
    NOINLINE        reduce using rule 92 (infixOperation -> elvisExpression .)
    OUT             reduce using rule 92 (infixOperation -> elvisExpression .)
    VARARG          reduce using rule 92 (infixOperation -> elvisExpression .)
    WHERE           reduce using rule 92 (infixOperation -> elvisExpression .)
    INT             reduce using rule 92 (infixOperation -> elvisExpression .)
    FLOAT           reduce using rule 92 (infixOperation -> elvisExpression .)
    BOOLEAN         reduce using rule 92 (infixOperation -> elvisExpression .)
    STRING          reduce using rule 92 (infixOperation -> elvisExpression .)
    ARRAY           reduce using rule 92 (infixOperation -> elvisExpression .)
    CHAR            reduce using rule 92 (infixOperation -> elvisExpression .)
    OBJECT          reduce using rule 92 (infixOperation -> elvisExpression .)
    CONST           reduce using rule 92 (infixOperation -> elvisExpression .)
    CONSTRUCTOR     reduce using rule 92 (infixOperation -> elvisExpression .)
    EOF             reduce using rule 92 (infixOperation -> elvisExpression .)
    FALSE           reduce using rule 92 (infixOperation -> elvisExpression .)
    FUNCTION        reduce using rule 92 (infixOperation -> elvisExpression .)
    NULL            reduce using rule 92 (infixOperation -> elvisExpression .)
    NULLABLE        reduce using rule 92 (infixOperation -> elvisExpression .)
    NUMBER          reduce using rule 92 (infixOperation -> elvisExpression .)
    OPERATOR        reduce using rule 92 (infixOperation -> elvisExpression .)
    SMARTCAST       reduce using rule 92 (infixOperation -> elvisExpression .)
    THIS            reduce using rule 92 (infixOperation -> elvisExpression .)
    TRUE            reduce using rule 92 (infixOperation -> elvisExpression .)
    VAL             reduce using rule 92 (infixOperation -> elvisExpression .)
    VAR             reduce using rule 92 (infixOperation -> elvisExpression .)
    DOUBLE          reduce using rule 92 (infixOperation -> elvisExpression .)
    WHEN            reduce using rule 92 (infixOperation -> elvisExpression .)
    LONG            reduce using rule 92 (infixOperation -> elvisExpression .)
    ELVIS           reduce using rule 92 (infixOperation -> elvisExpression .)
    MAIOR           reduce using rule 92 (infixOperation -> elvisExpression .)
    MENORIGUAL      reduce using rule 92 (infixOperation -> elvisExpression .)
    MAIORIGUAL      reduce using rule 92 (infixOperation -> elvisExpression .)
    DIFERENTE       reduce using rule 92 (infixOperation -> elvisExpression .)
    IDENTIDADE      reduce using rule 92 (infixOperation -> elvisExpression .)
    IGUALDADE       reduce using rule 92 (infixOperation -> elvisExpression .)
    SEMIDENTIDADE   reduce using rule 92 (infixOperation -> elvisExpression .)
    AND             reduce using rule 92 (infixOperation -> elvisExpression .)
    OR              reduce using rule 92 (infixOperation -> elvisExpression .)
    FUN             reduce using rule 92 (infixOperation -> elvisExpression .)
    FOR             reduce using rule 92 (infixOperation -> elvisExpression .)
    WHILE           reduce using rule 92 (infixOperation -> elvisExpression .)
    DO              reduce using rule 92 (infixOperation -> elvisExpression .)
    LITERAL_STRING  reduce using rule 92 (infixOperation -> elvisExpression .)
    IF              reduce using rule 92 (infixOperation -> elvisExpression .)
    RETURN          reduce using rule 92 (infixOperation -> elvisExpression .)
    RETURN_AT       reduce using rule 92 (infixOperation -> elvisExpression .)
    CONTINUE        reduce using rule 92 (infixOperation -> elvisExpression .)
    CONTINUE_AT     reduce using rule 92 (infixOperation -> elvisExpression .)
    BREAK           reduce using rule 92 (infixOperation -> elvisExpression .)
    BREAK_AT        reduce using rule 92 (infixOperation -> elvisExpression .)
    NOT             reduce using rule 92 (infixOperation -> elvisExpression .)
    SUSPEND         reduce using rule 92 (infixOperation -> elvisExpression .)
    COMMA           reduce using rule 92 (infixOperation -> elvisExpression .)
    RPAREN          reduce using rule 92 (infixOperation -> elvisExpression .)
    LCHAVE          reduce using rule 92 (infixOperation -> elvisExpression .)
    PV              reduce using rule 92 (infixOperation -> elvisExpression .)
    ELSE            reduce using rule 92 (infixOperation -> elvisExpression .)
    RCCT            reduce using rule 92 (infixOperation -> elvisExpression .)
    IN              shift and go to state 238
    NOT_IN          shift and go to state 239
    IS              shift and go to state 240
    NOT_IS          shift and go to state 241

  ! IN              [ reduce using rule 92 (infixOperation -> elvisExpression .) ]
  ! NOT_IN          [ reduce using rule 92 (infixOperation -> elvisExpression .) ]
  ! IS              [ reduce using rule 92 (infixOperation -> elvisExpression .) ]
  ! NOT_IS          [ reduce using rule 92 (infixOperation -> elvisExpression .) ]

    io                             shift and go to state 235
    inOperator                     shift and go to state 236
    isOperator                     shift and go to state 237

state 129

    (97) elvisExpression -> infixFunctionCall .
    (98) elvisExpression -> infixFunctionCall . ELVIS elvisExpression

  ! shift/reduce conflict for ELVIS resolved as shift
    INCREMENTO      reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    DECREMENTO      reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    MENOR           reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    LCCT            reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    LPAREN          reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    COLONCOLON      reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    RCHAVE          reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    PONTO           reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    AS              reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    MAISIGUAL       reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    MENOSIGUAL      reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    MULTIGUAL       reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    DIVIGUAL        reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    MODIGUAL        reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    MULT            reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    DIVIDE          reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    MOD             reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    PLUS            reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    MINUS           reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    PONTOPONTO      reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    ID              reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    CROSSINLINE     reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    IMPORT          reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    INIT            reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    NOINLINE        reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    OUT             reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    VARARG          reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    WHERE           reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    INT             reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    FLOAT           reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    BOOLEAN         reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    STRING          reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    ARRAY           reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    CHAR            reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    OBJECT          reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    CONST           reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    CONSTRUCTOR     reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    EOF             reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    FALSE           reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    FUNCTION        reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    NULL            reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    NULLABLE        reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    NUMBER          reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    OPERATOR        reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    SMARTCAST       reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    THIS            reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    TRUE            reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    VAL             reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    VAR             reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    DOUBLE          reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    WHEN            reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    LONG            reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    IN              reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    NOT_IN          reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    IS              reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    NOT_IS          reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    MAIOR           reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    MENORIGUAL      reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    MAIORIGUAL      reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    DIFERENTE       reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    IDENTIDADE      reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    IGUALDADE       reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    SEMIDENTIDADE   reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    AND             reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    OR              reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    FUN             reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    FOR             reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    WHILE           reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    DO              reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    LITERAL_STRING  reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    IF              reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    RETURN          reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    RETURN_AT       reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    CONTINUE        reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    CONTINUE_AT     reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    BREAK           reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    BREAK_AT        reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    NOT             reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    SUSPEND         reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    COMMA           reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    RPAREN          reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    LCHAVE          reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    PV              reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    ELSE            reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    RCCT            reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    ELVIS           shift and go to state 242

  ! ELVIS           [ reduce using rule 97 (elvisExpression -> infixFunctionCall .) ]


state 130

    (99) infixFunctionCall -> rangeExpression .
    (100) infixFunctionCall -> rangeExpression . simpleIdentifier infixFunctionCall
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
    INCREMENTO      reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    DECREMENTO      reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    MENOR           reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    LCCT            reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    LPAREN          reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    COLONCOLON      reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    RCHAVE          reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    PONTO           reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    AS              reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    MAISIGUAL       reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    MENOSIGUAL      reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    MULTIGUAL       reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    DIVIGUAL        reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    MODIGUAL        reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    MULT            reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    DIVIDE          reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    MOD             reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    PLUS            reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    MINUS           reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    PONTOPONTO      reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    ELVIS           reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    IN              reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    NOT_IN          reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    IS              reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    NOT_IS          reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    MAIOR           reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    MENORIGUAL      reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    MAIORIGUAL      reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    DIFERENTE       reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    IDENTIDADE      reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    IGUALDADE       reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    SEMIDENTIDADE   reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    AND             reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    OR              reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    FUN             reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    FOR             reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    WHILE           reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    DO              reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    LITERAL_STRING  reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    IF              reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    RETURN          reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    RETURN_AT       reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    CONTINUE        reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    CONTINUE_AT     reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    BREAK           reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    BREAK_AT        reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    NOT             reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    SUSPEND         reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    COMMA           reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    RPAREN          reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    LCHAVE          reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    PV              reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    ELSE            reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    RCCT            reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

  ! ID              [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! CROSSINLINE     [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! IMPORT          [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! INIT            [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! NOINLINE        [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! OUT             [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! VARARG          [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! WHERE           [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! INT             [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! FLOAT           [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! BOOLEAN         [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! STRING          [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! ARRAY           [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! CHAR            [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! OBJECT          [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! CONST           [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! CONSTRUCTOR     [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! EOF             [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! FALSE           [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! FUNCTION        [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! NULL            [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! NULLABLE        [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! NUMBER          [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! OPERATOR        [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! SMARTCAST       [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! THIS            [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! TRUE            [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! VAL             [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! VAR             [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! DOUBLE          [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! WHEN            [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! LONG            [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]

    simpleIdentifier               shift and go to state 243

state 131

    (101) rangeExpression -> additiveExpression .
    (102) rangeExpression -> additiveExpression . PONTOPONTO rangeExpression

  ! shift/reduce conflict for PONTOPONTO resolved as shift
    INCREMENTO      reduce using rule 101 (rangeExpression -> additiveExpression .)
    DECREMENTO      reduce using rule 101 (rangeExpression -> additiveExpression .)
    MENOR           reduce using rule 101 (rangeExpression -> additiveExpression .)
    LCCT            reduce using rule 101 (rangeExpression -> additiveExpression .)
    LPAREN          reduce using rule 101 (rangeExpression -> additiveExpression .)
    COLONCOLON      reduce using rule 101 (rangeExpression -> additiveExpression .)
    RCHAVE          reduce using rule 101 (rangeExpression -> additiveExpression .)
    PONTO           reduce using rule 101 (rangeExpression -> additiveExpression .)
    AS              reduce using rule 101 (rangeExpression -> additiveExpression .)
    MAISIGUAL       reduce using rule 101 (rangeExpression -> additiveExpression .)
    MENOSIGUAL      reduce using rule 101 (rangeExpression -> additiveExpression .)
    MULTIGUAL       reduce using rule 101 (rangeExpression -> additiveExpression .)
    DIVIGUAL        reduce using rule 101 (rangeExpression -> additiveExpression .)
    MODIGUAL        reduce using rule 101 (rangeExpression -> additiveExpression .)
    MULT            reduce using rule 101 (rangeExpression -> additiveExpression .)
    DIVIDE          reduce using rule 101 (rangeExpression -> additiveExpression .)
    MOD             reduce using rule 101 (rangeExpression -> additiveExpression .)
    PLUS            reduce using rule 101 (rangeExpression -> additiveExpression .)
    MINUS           reduce using rule 101 (rangeExpression -> additiveExpression .)
    ID              reduce using rule 101 (rangeExpression -> additiveExpression .)
    CROSSINLINE     reduce using rule 101 (rangeExpression -> additiveExpression .)
    IMPORT          reduce using rule 101 (rangeExpression -> additiveExpression .)
    INIT            reduce using rule 101 (rangeExpression -> additiveExpression .)
    NOINLINE        reduce using rule 101 (rangeExpression -> additiveExpression .)
    OUT             reduce using rule 101 (rangeExpression -> additiveExpression .)
    VARARG          reduce using rule 101 (rangeExpression -> additiveExpression .)
    WHERE           reduce using rule 101 (rangeExpression -> additiveExpression .)
    INT             reduce using rule 101 (rangeExpression -> additiveExpression .)
    FLOAT           reduce using rule 101 (rangeExpression -> additiveExpression .)
    BOOLEAN         reduce using rule 101 (rangeExpression -> additiveExpression .)
    STRING          reduce using rule 101 (rangeExpression -> additiveExpression .)
    ARRAY           reduce using rule 101 (rangeExpression -> additiveExpression .)
    CHAR            reduce using rule 101 (rangeExpression -> additiveExpression .)
    OBJECT          reduce using rule 101 (rangeExpression -> additiveExpression .)
    CONST           reduce using rule 101 (rangeExpression -> additiveExpression .)
    CONSTRUCTOR     reduce using rule 101 (rangeExpression -> additiveExpression .)
    EOF             reduce using rule 101 (rangeExpression -> additiveExpression .)
    FALSE           reduce using rule 101 (rangeExpression -> additiveExpression .)
    FUNCTION        reduce using rule 101 (rangeExpression -> additiveExpression .)
    NULL            reduce using rule 101 (rangeExpression -> additiveExpression .)
    NULLABLE        reduce using rule 101 (rangeExpression -> additiveExpression .)
    NUMBER          reduce using rule 101 (rangeExpression -> additiveExpression .)
    OPERATOR        reduce using rule 101 (rangeExpression -> additiveExpression .)
    SMARTCAST       reduce using rule 101 (rangeExpression -> additiveExpression .)
    THIS            reduce using rule 101 (rangeExpression -> additiveExpression .)
    TRUE            reduce using rule 101 (rangeExpression -> additiveExpression .)
    VAL             reduce using rule 101 (rangeExpression -> additiveExpression .)
    VAR             reduce using rule 101 (rangeExpression -> additiveExpression .)
    DOUBLE          reduce using rule 101 (rangeExpression -> additiveExpression .)
    WHEN            reduce using rule 101 (rangeExpression -> additiveExpression .)
    LONG            reduce using rule 101 (rangeExpression -> additiveExpression .)
    ELVIS           reduce using rule 101 (rangeExpression -> additiveExpression .)
    IN              reduce using rule 101 (rangeExpression -> additiveExpression .)
    NOT_IN          reduce using rule 101 (rangeExpression -> additiveExpression .)
    IS              reduce using rule 101 (rangeExpression -> additiveExpression .)
    NOT_IS          reduce using rule 101 (rangeExpression -> additiveExpression .)
    MAIOR           reduce using rule 101 (rangeExpression -> additiveExpression .)
    MENORIGUAL      reduce using rule 101 (rangeExpression -> additiveExpression .)
    MAIORIGUAL      reduce using rule 101 (rangeExpression -> additiveExpression .)
    DIFERENTE       reduce using rule 101 (rangeExpression -> additiveExpression .)
    IDENTIDADE      reduce using rule 101 (rangeExpression -> additiveExpression .)
    IGUALDADE       reduce using rule 101 (rangeExpression -> additiveExpression .)
    SEMIDENTIDADE   reduce using rule 101 (rangeExpression -> additiveExpression .)
    AND             reduce using rule 101 (rangeExpression -> additiveExpression .)
    OR              reduce using rule 101 (rangeExpression -> additiveExpression .)
    FUN             reduce using rule 101 (rangeExpression -> additiveExpression .)
    FOR             reduce using rule 101 (rangeExpression -> additiveExpression .)
    WHILE           reduce using rule 101 (rangeExpression -> additiveExpression .)
    DO              reduce using rule 101 (rangeExpression -> additiveExpression .)
    LITERAL_STRING  reduce using rule 101 (rangeExpression -> additiveExpression .)
    IF              reduce using rule 101 (rangeExpression -> additiveExpression .)
    RETURN          reduce using rule 101 (rangeExpression -> additiveExpression .)
    RETURN_AT       reduce using rule 101 (rangeExpression -> additiveExpression .)
    CONTINUE        reduce using rule 101 (rangeExpression -> additiveExpression .)
    CONTINUE_AT     reduce using rule 101 (rangeExpression -> additiveExpression .)
    BREAK           reduce using rule 101 (rangeExpression -> additiveExpression .)
    BREAK_AT        reduce using rule 101 (rangeExpression -> additiveExpression .)
    NOT             reduce using rule 101 (rangeExpression -> additiveExpression .)
    SUSPEND         reduce using rule 101 (rangeExpression -> additiveExpression .)
    COMMA           reduce using rule 101 (rangeExpression -> additiveExpression .)
    RPAREN          reduce using rule 101 (rangeExpression -> additiveExpression .)
    LCHAVE          reduce using rule 101 (rangeExpression -> additiveExpression .)
    PV              reduce using rule 101 (rangeExpression -> additiveExpression .)
    ELSE            reduce using rule 101 (rangeExpression -> additiveExpression .)
    RCCT            reduce using rule 101 (rangeExpression -> additiveExpression .)
    PONTOPONTO      shift and go to state 244

  ! PONTOPONTO      [ reduce using rule 101 (rangeExpression -> additiveExpression .) ]


state 132

    (103) additiveExpression -> multiplicativeExpression .
    (104) additiveExpression -> multiplicativeExpression . additiveOperator additiveExpression
    (243) additiveOperator -> . PLUS
    (244) additiveOperator -> . MINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    INCREMENTO      reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    DECREMENTO      reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    MENOR           reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    LCCT            reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    LPAREN          reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    COLONCOLON      reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    RCHAVE          reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    PONTO           reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    AS              reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    MAISIGUAL       reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    MENOSIGUAL      reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    MULTIGUAL       reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    DIVIGUAL        reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    MODIGUAL        reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    MULT            reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    DIVIDE          reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    MOD             reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    PONTOPONTO      reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    ID              reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    CROSSINLINE     reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    IMPORT          reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    INIT            reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    NOINLINE        reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    OUT             reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    VARARG          reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    WHERE           reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    INT             reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    FLOAT           reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    BOOLEAN         reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    STRING          reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    ARRAY           reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    CHAR            reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    OBJECT          reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    CONST           reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    CONSTRUCTOR     reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    EOF             reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    FALSE           reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    FUNCTION        reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    NULL            reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    NULLABLE        reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    NUMBER          reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    OPERATOR        reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    SMARTCAST       reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    THIS            reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    TRUE            reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    VAL             reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    VAR             reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    DOUBLE          reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    WHEN            reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    LONG            reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    ELVIS           reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    IN              reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    NOT_IN          reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    IS              reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    NOT_IS          reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    MAIOR           reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    MENORIGUAL      reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    MAIORIGUAL      reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    DIFERENTE       reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    IDENTIDADE      reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    IGUALDADE       reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    SEMIDENTIDADE   reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    AND             reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    OR              reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    FUN             reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    FOR             reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    WHILE           reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    DO              reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    LITERAL_STRING  reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    IF              reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    RETURN          reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    RETURN_AT       reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    CONTINUE        reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    CONTINUE_AT     reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    BREAK           reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    BREAK_AT        reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    NOT             reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    SUSPEND         reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    COMMA           reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    RPAREN          reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    LCHAVE          reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    PV              reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    ELSE            reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    RCCT            reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    PLUS            shift and go to state 246
    MINUS           shift and go to state 247

  ! PLUS            [ reduce using rule 103 (additiveExpression -> multiplicativeExpression .) ]
  ! MINUS           [ reduce using rule 103 (additiveExpression -> multiplicativeExpression .) ]

    additiveOperator               shift and go to state 245

state 133

    (105) multiplicativeExpression -> asExpression .
    (106) multiplicativeExpression -> asExpression . multiplicativeOperator multiplicativeExpression
    (245) multiplicativeOperator -> . MULT
    (246) multiplicativeOperator -> . DIVIDE
    (247) multiplicativeOperator -> . MOD

  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    INCREMENTO      reduce using rule 105 (multiplicativeExpression -> asExpression .)
    DECREMENTO      reduce using rule 105 (multiplicativeExpression -> asExpression .)
    MENOR           reduce using rule 105 (multiplicativeExpression -> asExpression .)
    LCCT            reduce using rule 105 (multiplicativeExpression -> asExpression .)
    LPAREN          reduce using rule 105 (multiplicativeExpression -> asExpression .)
    COLONCOLON      reduce using rule 105 (multiplicativeExpression -> asExpression .)
    RCHAVE          reduce using rule 105 (multiplicativeExpression -> asExpression .)
    PONTO           reduce using rule 105 (multiplicativeExpression -> asExpression .)
    AS              reduce using rule 105 (multiplicativeExpression -> asExpression .)
    MAISIGUAL       reduce using rule 105 (multiplicativeExpression -> asExpression .)
    MENOSIGUAL      reduce using rule 105 (multiplicativeExpression -> asExpression .)
    MULTIGUAL       reduce using rule 105 (multiplicativeExpression -> asExpression .)
    DIVIGUAL        reduce using rule 105 (multiplicativeExpression -> asExpression .)
    MODIGUAL        reduce using rule 105 (multiplicativeExpression -> asExpression .)
    PLUS            reduce using rule 105 (multiplicativeExpression -> asExpression .)
    MINUS           reduce using rule 105 (multiplicativeExpression -> asExpression .)
    PONTOPONTO      reduce using rule 105 (multiplicativeExpression -> asExpression .)
    ID              reduce using rule 105 (multiplicativeExpression -> asExpression .)
    CROSSINLINE     reduce using rule 105 (multiplicativeExpression -> asExpression .)
    IMPORT          reduce using rule 105 (multiplicativeExpression -> asExpression .)
    INIT            reduce using rule 105 (multiplicativeExpression -> asExpression .)
    NOINLINE        reduce using rule 105 (multiplicativeExpression -> asExpression .)
    OUT             reduce using rule 105 (multiplicativeExpression -> asExpression .)
    VARARG          reduce using rule 105 (multiplicativeExpression -> asExpression .)
    WHERE           reduce using rule 105 (multiplicativeExpression -> asExpression .)
    INT             reduce using rule 105 (multiplicativeExpression -> asExpression .)
    FLOAT           reduce using rule 105 (multiplicativeExpression -> asExpression .)
    BOOLEAN         reduce using rule 105 (multiplicativeExpression -> asExpression .)
    STRING          reduce using rule 105 (multiplicativeExpression -> asExpression .)
    ARRAY           reduce using rule 105 (multiplicativeExpression -> asExpression .)
    CHAR            reduce using rule 105 (multiplicativeExpression -> asExpression .)
    OBJECT          reduce using rule 105 (multiplicativeExpression -> asExpression .)
    CONST           reduce using rule 105 (multiplicativeExpression -> asExpression .)
    CONSTRUCTOR     reduce using rule 105 (multiplicativeExpression -> asExpression .)
    EOF             reduce using rule 105 (multiplicativeExpression -> asExpression .)
    FALSE           reduce using rule 105 (multiplicativeExpression -> asExpression .)
    FUNCTION        reduce using rule 105 (multiplicativeExpression -> asExpression .)
    NULL            reduce using rule 105 (multiplicativeExpression -> asExpression .)
    NULLABLE        reduce using rule 105 (multiplicativeExpression -> asExpression .)
    NUMBER          reduce using rule 105 (multiplicativeExpression -> asExpression .)
    OPERATOR        reduce using rule 105 (multiplicativeExpression -> asExpression .)
    SMARTCAST       reduce using rule 105 (multiplicativeExpression -> asExpression .)
    THIS            reduce using rule 105 (multiplicativeExpression -> asExpression .)
    TRUE            reduce using rule 105 (multiplicativeExpression -> asExpression .)
    VAL             reduce using rule 105 (multiplicativeExpression -> asExpression .)
    VAR             reduce using rule 105 (multiplicativeExpression -> asExpression .)
    DOUBLE          reduce using rule 105 (multiplicativeExpression -> asExpression .)
    WHEN            reduce using rule 105 (multiplicativeExpression -> asExpression .)
    LONG            reduce using rule 105 (multiplicativeExpression -> asExpression .)
    ELVIS           reduce using rule 105 (multiplicativeExpression -> asExpression .)
    IN              reduce using rule 105 (multiplicativeExpression -> asExpression .)
    NOT_IN          reduce using rule 105 (multiplicativeExpression -> asExpression .)
    IS              reduce using rule 105 (multiplicativeExpression -> asExpression .)
    NOT_IS          reduce using rule 105 (multiplicativeExpression -> asExpression .)
    MAIOR           reduce using rule 105 (multiplicativeExpression -> asExpression .)
    MENORIGUAL      reduce using rule 105 (multiplicativeExpression -> asExpression .)
    MAIORIGUAL      reduce using rule 105 (multiplicativeExpression -> asExpression .)
    DIFERENTE       reduce using rule 105 (multiplicativeExpression -> asExpression .)
    IDENTIDADE      reduce using rule 105 (multiplicativeExpression -> asExpression .)
    IGUALDADE       reduce using rule 105 (multiplicativeExpression -> asExpression .)
    SEMIDENTIDADE   reduce using rule 105 (multiplicativeExpression -> asExpression .)
    AND             reduce using rule 105 (multiplicativeExpression -> asExpression .)
    OR              reduce using rule 105 (multiplicativeExpression -> asExpression .)
    FUN             reduce using rule 105 (multiplicativeExpression -> asExpression .)
    FOR             reduce using rule 105 (multiplicativeExpression -> asExpression .)
    WHILE           reduce using rule 105 (multiplicativeExpression -> asExpression .)
    DO              reduce using rule 105 (multiplicativeExpression -> asExpression .)
    LITERAL_STRING  reduce using rule 105 (multiplicativeExpression -> asExpression .)
    IF              reduce using rule 105 (multiplicativeExpression -> asExpression .)
    RETURN          reduce using rule 105 (multiplicativeExpression -> asExpression .)
    RETURN_AT       reduce using rule 105 (multiplicativeExpression -> asExpression .)
    CONTINUE        reduce using rule 105 (multiplicativeExpression -> asExpression .)
    CONTINUE_AT     reduce using rule 105 (multiplicativeExpression -> asExpression .)
    BREAK           reduce using rule 105 (multiplicativeExpression -> asExpression .)
    BREAK_AT        reduce using rule 105 (multiplicativeExpression -> asExpression .)
    NOT             reduce using rule 105 (multiplicativeExpression -> asExpression .)
    SUSPEND         reduce using rule 105 (multiplicativeExpression -> asExpression .)
    COMMA           reduce using rule 105 (multiplicativeExpression -> asExpression .)
    RPAREN          reduce using rule 105 (multiplicativeExpression -> asExpression .)
    LCHAVE          reduce using rule 105 (multiplicativeExpression -> asExpression .)
    PV              reduce using rule 105 (multiplicativeExpression -> asExpression .)
    ELSE            reduce using rule 105 (multiplicativeExpression -> asExpression .)
    RCCT            reduce using rule 105 (multiplicativeExpression -> asExpression .)
    MULT            shift and go to state 249
    DIVIDE          shift and go to state 250
    MOD             shift and go to state 251

  ! MULT            [ reduce using rule 105 (multiplicativeExpression -> asExpression .) ]
  ! DIVIDE          [ reduce using rule 105 (multiplicativeExpression -> asExpression .) ]
  ! MOD             [ reduce using rule 105 (multiplicativeExpression -> asExpression .) ]

    multiplicativeOperator         shift and go to state 248

state 134

    (26) type -> typeModifiers optype .

    LCHAVE          reduce using rule 26 (type -> typeModifiers optype .)
    FUN             reduce using rule 26 (type -> typeModifiers optype .)
    $end            reduce using rule 26 (type -> typeModifiers optype .)
    FOR             reduce using rule 26 (type -> typeModifiers optype .)
    WHILE           reduce using rule 26 (type -> typeModifiers optype .)
    DO              reduce using rule 26 (type -> typeModifiers optype .)
    ID              reduce using rule 26 (type -> typeModifiers optype .)
    CROSSINLINE     reduce using rule 26 (type -> typeModifiers optype .)
    IMPORT          reduce using rule 26 (type -> typeModifiers optype .)
    INIT            reduce using rule 26 (type -> typeModifiers optype .)
    NOINLINE        reduce using rule 26 (type -> typeModifiers optype .)
    OUT             reduce using rule 26 (type -> typeModifiers optype .)
    VARARG          reduce using rule 26 (type -> typeModifiers optype .)
    WHERE           reduce using rule 26 (type -> typeModifiers optype .)
    INT             reduce using rule 26 (type -> typeModifiers optype .)
    FLOAT           reduce using rule 26 (type -> typeModifiers optype .)
    BOOLEAN         reduce using rule 26 (type -> typeModifiers optype .)
    STRING          reduce using rule 26 (type -> typeModifiers optype .)
    ARRAY           reduce using rule 26 (type -> typeModifiers optype .)
    CHAR            reduce using rule 26 (type -> typeModifiers optype .)
    OBJECT          reduce using rule 26 (type -> typeModifiers optype .)
    CONST           reduce using rule 26 (type -> typeModifiers optype .)
    CONSTRUCTOR     reduce using rule 26 (type -> typeModifiers optype .)
    EOF             reduce using rule 26 (type -> typeModifiers optype .)
    FALSE           reduce using rule 26 (type -> typeModifiers optype .)
    FUNCTION        reduce using rule 26 (type -> typeModifiers optype .)
    NULL            reduce using rule 26 (type -> typeModifiers optype .)
    NULLABLE        reduce using rule 26 (type -> typeModifiers optype .)
    NUMBER          reduce using rule 26 (type -> typeModifiers optype .)
    OPERATOR        reduce using rule 26 (type -> typeModifiers optype .)
    SMARTCAST       reduce using rule 26 (type -> typeModifiers optype .)
    THIS            reduce using rule 26 (type -> typeModifiers optype .)
    TRUE            reduce using rule 26 (type -> typeModifiers optype .)
    VAL             reduce using rule 26 (type -> typeModifiers optype .)
    VAR             reduce using rule 26 (type -> typeModifiers optype .)
    DOUBLE          reduce using rule 26 (type -> typeModifiers optype .)
    WHEN            reduce using rule 26 (type -> typeModifiers optype .)
    LONG            reduce using rule 26 (type -> typeModifiers optype .)
    LPAREN          reduce using rule 26 (type -> typeModifiers optype .)
    LITERAL_STRING  reduce using rule 26 (type -> typeModifiers optype .)
    COLONCOLON      reduce using rule 26 (type -> typeModifiers optype .)
    LCCT            reduce using rule 26 (type -> typeModifiers optype .)
    IF              reduce using rule 26 (type -> typeModifiers optype .)
    RETURN          reduce using rule 26 (type -> typeModifiers optype .)
    RETURN_AT       reduce using rule 26 (type -> typeModifiers optype .)
    CONTINUE        reduce using rule 26 (type -> typeModifiers optype .)
    CONTINUE_AT     reduce using rule 26 (type -> typeModifiers optype .)
    BREAK           reduce using rule 26 (type -> typeModifiers optype .)
    BREAK_AT        reduce using rule 26 (type -> typeModifiers optype .)
    RCHAVE          reduce using rule 26 (type -> typeModifiers optype .)
    INCREMENTO      reduce using rule 26 (type -> typeModifiers optype .)
    DECREMENTO      reduce using rule 26 (type -> typeModifiers optype .)
    MINUS           reduce using rule 26 (type -> typeModifiers optype .)
    PLUS            reduce using rule 26 (type -> typeModifiers optype .)
    NOT             reduce using rule 26 (type -> typeModifiers optype .)
    SUSPEND         reduce using rule 26 (type -> typeModifiers optype .)
    PV              reduce using rule 26 (type -> typeModifiers optype .)
    ELSE            reduce using rule 26 (type -> typeModifiers optype .)
    MENOR           reduce using rule 26 (type -> typeModifiers optype .)
    PONTO           reduce using rule 26 (type -> typeModifiers optype .)
    AS              reduce using rule 26 (type -> typeModifiers optype .)
    MAISIGUAL       reduce using rule 26 (type -> typeModifiers optype .)
    MENOSIGUAL      reduce using rule 26 (type -> typeModifiers optype .)
    MULTIGUAL       reduce using rule 26 (type -> typeModifiers optype .)
    DIVIGUAL        reduce using rule 26 (type -> typeModifiers optype .)
    MODIGUAL        reduce using rule 26 (type -> typeModifiers optype .)
    MULT            reduce using rule 26 (type -> typeModifiers optype .)
    DIVIDE          reduce using rule 26 (type -> typeModifiers optype .)
    MOD             reduce using rule 26 (type -> typeModifiers optype .)
    PONTOPONTO      reduce using rule 26 (type -> typeModifiers optype .)
    ELVIS           reduce using rule 26 (type -> typeModifiers optype .)
    IN              reduce using rule 26 (type -> typeModifiers optype .)
    NOT_IN          reduce using rule 26 (type -> typeModifiers optype .)
    IS              reduce using rule 26 (type -> typeModifiers optype .)
    NOT_IS          reduce using rule 26 (type -> typeModifiers optype .)
    MAIOR           reduce using rule 26 (type -> typeModifiers optype .)
    MENORIGUAL      reduce using rule 26 (type -> typeModifiers optype .)
    MAIORIGUAL      reduce using rule 26 (type -> typeModifiers optype .)
    DIFERENTE       reduce using rule 26 (type -> typeModifiers optype .)
    IDENTIDADE      reduce using rule 26 (type -> typeModifiers optype .)
    IGUALDADE       reduce using rule 26 (type -> typeModifiers optype .)
    SEMIDENTIDADE   reduce using rule 26 (type -> typeModifiers optype .)
    AND             reduce using rule 26 (type -> typeModifiers optype .)
    OR              reduce using rule 26 (type -> typeModifiers optype .)
    COMMA           reduce using rule 26 (type -> typeModifiers optype .)
    RPAREN          reduce using rule 26 (type -> typeModifiers optype .)
    RCCT            reduce using rule 26 (type -> typeModifiers optype .)
    ATRIBUICAO      reduce using rule 26 (type -> typeModifiers optype .)
    SETA            reduce using rule 26 (type -> typeModifiers optype .)


state 135

    (31) typeModifiers -> typeModifier .
    (32) typeModifiers -> typeModifier . typeModifiers
    (31) typeModifiers -> . typeModifier
    (32) typeModifiers -> . typeModifier typeModifiers
    (33) typeModifier -> . SUSPEND

  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 31 (typeModifiers -> typeModifier .)
    ID              reduce using rule 31 (typeModifiers -> typeModifier .)
    CROSSINLINE     reduce using rule 31 (typeModifiers -> typeModifier .)
    IMPORT          reduce using rule 31 (typeModifiers -> typeModifier .)
    INIT            reduce using rule 31 (typeModifiers -> typeModifier .)
    NOINLINE        reduce using rule 31 (typeModifiers -> typeModifier .)
    OUT             reduce using rule 31 (typeModifiers -> typeModifier .)
    VARARG          reduce using rule 31 (typeModifiers -> typeModifier .)
    WHERE           reduce using rule 31 (typeModifiers -> typeModifier .)
    INT             reduce using rule 31 (typeModifiers -> typeModifier .)
    FLOAT           reduce using rule 31 (typeModifiers -> typeModifier .)
    BOOLEAN         reduce using rule 31 (typeModifiers -> typeModifier .)
    STRING          reduce using rule 31 (typeModifiers -> typeModifier .)
    ARRAY           reduce using rule 31 (typeModifiers -> typeModifier .)
    CHAR            reduce using rule 31 (typeModifiers -> typeModifier .)
    OBJECT          reduce using rule 31 (typeModifiers -> typeModifier .)
    CONST           reduce using rule 31 (typeModifiers -> typeModifier .)
    CONSTRUCTOR     reduce using rule 31 (typeModifiers -> typeModifier .)
    EOF             reduce using rule 31 (typeModifiers -> typeModifier .)
    FALSE           reduce using rule 31 (typeModifiers -> typeModifier .)
    FUNCTION        reduce using rule 31 (typeModifiers -> typeModifier .)
    NULL            reduce using rule 31 (typeModifiers -> typeModifier .)
    NULLABLE        reduce using rule 31 (typeModifiers -> typeModifier .)
    NUMBER          reduce using rule 31 (typeModifiers -> typeModifier .)
    OPERATOR        reduce using rule 31 (typeModifiers -> typeModifier .)
    SMARTCAST       reduce using rule 31 (typeModifiers -> typeModifier .)
    THIS            reduce using rule 31 (typeModifiers -> typeModifier .)
    TRUE            reduce using rule 31 (typeModifiers -> typeModifier .)
    VAL             reduce using rule 31 (typeModifiers -> typeModifier .)
    VAR             reduce using rule 31 (typeModifiers -> typeModifier .)
    DOUBLE          reduce using rule 31 (typeModifiers -> typeModifier .)
    WHEN            reduce using rule 31 (typeModifiers -> typeModifier .)
    LONG            reduce using rule 31 (typeModifiers -> typeModifier .)
    SUSPEND         shift and go to state 57

  ! SUSPEND         [ reduce using rule 31 (typeModifiers -> typeModifier .) ]

    typeModifier                   shift and go to state 135
    typeModifiers                  shift and go to state 136

state 136

    (32) typeModifiers -> typeModifier typeModifiers .

    LPAREN          reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    SUSPEND         reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    ID              reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    CROSSINLINE     reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    IMPORT          reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    INIT            reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    NOINLINE        reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    OUT             reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    VARARG          reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    WHERE           reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    INT             reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    FLOAT           reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    BOOLEAN         reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    STRING          reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    ARRAY           reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    CHAR            reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    OBJECT          reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    CONST           reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    CONSTRUCTOR     reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    EOF             reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    FALSE           reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    FUNCTION        reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    NULL            reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    NULLABLE        reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    NUMBER          reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    OPERATOR        reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    SMARTCAST       reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    THIS            reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    TRUE            reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    VAL             reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    VAR             reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    DOUBLE          reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    WHEN            reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)
    LONG            reduce using rule 32 (typeModifiers -> typeModifier typeModifiers .)


state 137

    (57) receiverType -> typeModifier rt .

    PONTO           reduce using rule 57 (receiverType -> typeModifier rt .)
    COLONCOLON      reduce using rule 57 (receiverType -> typeModifier rt .)


state 138

    (58) rt -> parenthesizedType .

    PONTO           reduce using rule 58 (rt -> parenthesizedType .)
    COLONCOLON      reduce using rule 58 (rt -> parenthesizedType .)


state 139

    (56) parenthesizedType -> LPAREN . type RPAREN
    (26) type -> . typeModifiers optype
    (27) type -> . optype
    (31) typeModifiers -> . typeModifier
    (32) typeModifiers -> . typeModifier typeModifiers
    (28) optype -> . parenthesizedType
    (29) optype -> . functionType
    (30) optype -> . userType
    (33) typeModifier -> . SUSPEND
    (56) parenthesizedType -> . LPAREN type RPAREN
    (44) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (45) functionType -> . functionTypeParameters SETA type
    (37) userType -> . simpleUserType
    (57) receiverType -> . typeModifier rt
    (46) functionTypeParameters -> . functionTypeParameters_p
    (47) functionTypeParameters -> . functionTypeParameters_t
    (38) simpleUserType -> . simpleIdentifier typeArguments
    (39) simpleUserType -> . simpleIdentifier
    (48) functionTypeParameters_p -> . LPAREN parameter ftp RPAREN
    (49) functionTypeParameters_p -> . LPAREN parameter RPAREN
    (50) functionTypeParameters_t -> . LPAREN type RPAREN
    (51) functionTypeParameters_t -> . LPAREN type ftp RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    SUSPEND         shift and go to state 57
    LPAREN          shift and go to state 58
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    type                           shift and go to state 252
    typeModifiers                  shift and go to state 51
    optype                         shift and go to state 52
    typeModifier                   shift and go to state 53
    parenthesizedType              shift and go to state 54
    functionType                   shift and go to state 55
    userType                       shift and go to state 56
    receiverType                   shift and go to state 59
    functionTypeParameters         shift and go to state 60
    simpleUserType                 shift and go to state 61
    functionTypeParameters_p       shift and go to state 62
    functionTypeParameters_t       shift and go to state 63
    simpleIdentifier               shift and go to state 64

state 140

    (56) parenthesizedType -> LPAREN type . RPAREN
    (50) functionTypeParameters_t -> LPAREN type . RPAREN
    (51) functionTypeParameters_t -> LPAREN type . ftp RPAREN
    (52) ftp -> . COMMA parameter
    (53) ftp -> . COMMA type
    (54) ftp -> . COMMA parameter ftp
    (55) ftp -> . COMMA type ftp

    RPAREN          shift and go to state 253
    COMMA           shift and go to state 255

    ftp                            shift and go to state 254

state 141

    (48) functionTypeParameters_p -> LPAREN parameter . ftp RPAREN
    (49) functionTypeParameters_p -> LPAREN parameter . RPAREN
    (52) ftp -> . COMMA parameter
    (53) ftp -> . COMMA type
    (54) ftp -> . COMMA parameter ftp
    (55) ftp -> . COMMA type ftp

    RPAREN          shift and go to state 257
    COMMA           shift and go to state 255

    ftp                            shift and go to state 256

state 142

    (25) parameter -> simpleIdentifier . DOISP type
    (38) simpleUserType -> simpleIdentifier . typeArguments
    (39) simpleUserType -> simpleIdentifier .
    (148) typeArguments -> . MENOR ta MAIOR
    (149) typeArguments -> . MENOR MAIOR

    DOISP           shift and go to state 69
    RPAREN          reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    COMMA           reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    MENOR           shift and go to state 146

    typeArguments                  shift and go to state 145

state 143

    (44) functionType -> receiverType PONTO . functionTypeParameters SETA type
    (46) functionTypeParameters -> . functionTypeParameters_p
    (47) functionTypeParameters -> . functionTypeParameters_t
    (48) functionTypeParameters_p -> . LPAREN parameter ftp RPAREN
    (49) functionTypeParameters_p -> . LPAREN parameter RPAREN
    (50) functionTypeParameters_t -> . LPAREN type RPAREN
    (51) functionTypeParameters_t -> . LPAREN type ftp RPAREN

    LPAREN          shift and go to state 259

    functionTypeParameters         shift and go to state 258
    functionTypeParameters_p       shift and go to state 62
    functionTypeParameters_t       shift and go to state 63

state 144

    (45) functionType -> functionTypeParameters SETA . type
    (26) type -> . typeModifiers optype
    (27) type -> . optype
    (31) typeModifiers -> . typeModifier
    (32) typeModifiers -> . typeModifier typeModifiers
    (28) optype -> . parenthesizedType
    (29) optype -> . functionType
    (30) optype -> . userType
    (33) typeModifier -> . SUSPEND
    (56) parenthesizedType -> . LPAREN type RPAREN
    (44) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (45) functionType -> . functionTypeParameters SETA type
    (37) userType -> . simpleUserType
    (57) receiverType -> . typeModifier rt
    (46) functionTypeParameters -> . functionTypeParameters_p
    (47) functionTypeParameters -> . functionTypeParameters_t
    (38) simpleUserType -> . simpleIdentifier typeArguments
    (39) simpleUserType -> . simpleIdentifier
    (48) functionTypeParameters_p -> . LPAREN parameter ftp RPAREN
    (49) functionTypeParameters_p -> . LPAREN parameter RPAREN
    (50) functionTypeParameters_t -> . LPAREN type RPAREN
    (51) functionTypeParameters_t -> . LPAREN type ftp RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    SUSPEND         shift and go to state 57
    LPAREN          shift and go to state 58
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    functionTypeParameters         shift and go to state 60
    type                           shift and go to state 260
    typeModifiers                  shift and go to state 51
    optype                         shift and go to state 52
    typeModifier                   shift and go to state 53
    parenthesizedType              shift and go to state 54
    functionType                   shift and go to state 55
    userType                       shift and go to state 56
    receiverType                   shift and go to state 59
    simpleUserType                 shift and go to state 61
    functionTypeParameters_p       shift and go to state 62
    functionTypeParameters_t       shift and go to state 63
    simpleIdentifier               shift and go to state 64

state 145

    (38) simpleUserType -> simpleIdentifier typeArguments .

    LCHAVE          reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    FUN             reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    $end            reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    FOR             reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    WHILE           reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    DO              reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    ID              reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    CROSSINLINE     reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    IMPORT          reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    INIT            reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    NOINLINE        reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    OUT             reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    VARARG          reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    WHERE           reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    INT             reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    FLOAT           reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    BOOLEAN         reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    STRING          reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    ARRAY           reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    CHAR            reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    OBJECT          reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    CONST           reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    CONSTRUCTOR     reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    EOF             reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    FALSE           reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    FUNCTION        reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    NULL            reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    NULLABLE        reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    NUMBER          reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    OPERATOR        reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    SMARTCAST       reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    THIS            reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    TRUE            reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    VAL             reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    VAR             reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    DOUBLE          reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    WHEN            reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    LONG            reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    LPAREN          reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    LITERAL_STRING  reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    COLONCOLON      reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    LCCT            reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    IF              reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    RETURN          reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    RETURN_AT       reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    CONTINUE        reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    CONTINUE_AT     reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    BREAK           reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    BREAK_AT        reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    RCHAVE          reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    INCREMENTO      reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    DECREMENTO      reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    MINUS           reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    PLUS            reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    NOT             reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    SUSPEND         reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    PV              reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    ELSE            reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    MENOR           reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    PONTO           reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    AS              reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    MAISIGUAL       reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    MENOSIGUAL      reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    MULTIGUAL       reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    DIVIGUAL        reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    MODIGUAL        reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    MULT            reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    DIVIDE          reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    MOD             reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    PONTOPONTO      reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    ELVIS           reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    IN              reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    NOT_IN          reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    IS              reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    NOT_IS          reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    MAIOR           reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    MENORIGUAL      reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    MAIORIGUAL      reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    DIFERENTE       reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    IDENTIDADE      reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    IGUALDADE       reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    SEMIDENTIDADE   reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    AND             reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    OR              reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    COMMA           reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    RPAREN          reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    RCCT            reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    ATRIBUICAO      reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)
    SETA            reduce using rule 38 (simpleUserType -> simpleIdentifier typeArguments .)


state 146

    (148) typeArguments -> MENOR . ta MAIOR
    (149) typeArguments -> MENOR . MAIOR
    (150) ta -> . typeProjection
    (151) ta -> . typeProjection COMMA ta
    (40) typeProjection -> . typeProjectionModifiers type
    (41) typeProjection -> . type
    (42) typeProjectionModifiers -> . typeProjection
    (43) typeProjectionModifiers -> . typeProjectionModifier typeProjectionModifiers
    (26) type -> . typeModifiers optype
    (27) type -> . optype
    (34) typeProjectionModifier -> . varianceModifier
    (31) typeModifiers -> . typeModifier
    (32) typeModifiers -> . typeModifier typeModifiers
    (28) optype -> . parenthesizedType
    (29) optype -> . functionType
    (30) optype -> . userType
    (35) varianceModifier -> . IN
    (36) varianceModifier -> . OUT
    (33) typeModifier -> . SUSPEND
    (56) parenthesizedType -> . LPAREN type RPAREN
    (44) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (45) functionType -> . functionTypeParameters SETA type
    (37) userType -> . simpleUserType
    (57) receiverType -> . typeModifier rt
    (46) functionTypeParameters -> . functionTypeParameters_p
    (47) functionTypeParameters -> . functionTypeParameters_t
    (38) simpleUserType -> . simpleIdentifier typeArguments
    (39) simpleUserType -> . simpleIdentifier
    (48) functionTypeParameters_p -> . LPAREN parameter ftp RPAREN
    (49) functionTypeParameters_p -> . LPAREN parameter RPAREN
    (50) functionTypeParameters_t -> . LPAREN type RPAREN
    (51) functionTypeParameters_t -> . LPAREN type ftp RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    MAIOR           shift and go to state 262
    IN              shift and go to state 268
    OUT             shift and go to state 269
    SUSPEND         shift and go to state 57
    LPAREN          shift and go to state 58
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    ta                             shift and go to state 261
    typeProjection                 shift and go to state 263
    typeProjectionModifiers        shift and go to state 264
    type                           shift and go to state 265
    typeProjectionModifier         shift and go to state 266
    typeModifiers                  shift and go to state 51
    optype                         shift and go to state 52
    varianceModifier               shift and go to state 267
    typeModifier                   shift and go to state 53
    parenthesizedType              shift and go to state 54
    functionType                   shift and go to state 55
    userType                       shift and go to state 56
    receiverType                   shift and go to state 59
    functionTypeParameters         shift and go to state 60
    simpleUserType                 shift and go to state 61
    functionTypeParameters_p       shift and go to state 62
    functionTypeParameters_t       shift and go to state 63
    simpleIdentifier               shift and go to state 64

state 147

    (15) fvps -> functionValueParameter COMMA fvps .

    RPAREN          reduce using rule 15 (fvps -> functionValueParameter COMMA fvps .)


state 148

    (17) functionValueParameter -> parameter ATRIBUICAO expression .
    (217) jumpExpression -> expression .

  ! reduce/reduce conflict for ID resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for INIT resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for OUT resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for VARARG resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for WHERE resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for INT resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for STRING resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for CHAR resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for CONST resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for EOF resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for FALSE resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for NULL resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for THIS resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for TRUE resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for VAL resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for VAR resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for WHEN resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for LONG resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    COMMA           reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    ID              reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    CROSSINLINE     reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    IMPORT          reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    INIT            reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    NOINLINE        reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    OUT             reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    VARARG          reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    WHERE           reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    INT             reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    FLOAT           reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    BOOLEAN         reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    STRING          reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    ARRAY           reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    CHAR            reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    OBJECT          reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    CONST           reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    CONSTRUCTOR     reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    EOF             reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    FALSE           reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    FUNCTION        reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    NULL            reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    NULLABLE        reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    NUMBER          reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    OPERATOR        reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    SMARTCAST       reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    THIS            reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    TRUE            reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    VAL             reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    VAR             reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    DOUBLE          reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    WHEN            reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    LONG            reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    RPAREN          reduce using rule 17 (functionValueParameter -> parameter ATRIBUICAO expression .)
    INCREMENTO      reduce using rule 217 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 217 (jumpExpression -> expression .)
    MENOR           reduce using rule 217 (jumpExpression -> expression .)
    LCCT            reduce using rule 217 (jumpExpression -> expression .)
    LPAREN          reduce using rule 217 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 217 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 217 (jumpExpression -> expression .)
    PONTO           reduce using rule 217 (jumpExpression -> expression .)
    AS              reduce using rule 217 (jumpExpression -> expression .)
    MULT            reduce using rule 217 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 217 (jumpExpression -> expression .)
    MOD             reduce using rule 217 (jumpExpression -> expression .)
    PLUS            reduce using rule 217 (jumpExpression -> expression .)
    MINUS           reduce using rule 217 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 217 (jumpExpression -> expression .)
    ELVIS           reduce using rule 217 (jumpExpression -> expression .)
    IN              reduce using rule 217 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 217 (jumpExpression -> expression .)
    IS              reduce using rule 217 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 217 (jumpExpression -> expression .)
    MAIOR           reduce using rule 217 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 217 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 217 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 217 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 217 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 217 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 217 (jumpExpression -> expression .)
    AND             reduce using rule 217 (jumpExpression -> expression .)
    OR              reduce using rule 217 (jumpExpression -> expression .)

  ! ID              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CROSSINLINE     [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IMPORT          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! INIT            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NOINLINE        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! OUT             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! VARARG          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! WHERE           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! INT             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! FLOAT           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! BOOLEAN         [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! STRING          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! ARRAY           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CHAR            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! OBJECT          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CONST           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CONSTRUCTOR     [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! EOF             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! FALSE           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! FUNCTION        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NULL            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NULLABLE        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NUMBER          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! OPERATOR        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! SMARTCAST       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! THIS            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! TRUE            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! VAL             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! VAR             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DOUBLE          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! WHEN            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! LONG            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! COMMA           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 217 (jumpExpression -> expression .) ]


state 149

    (160) primaryExpression -> simpleIdentifier .
    (115) label -> simpleIdentifier .

  ! reduce/reduce conflict for INCREMENTO resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NOT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for INT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FLOAT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for STRING resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ARRAY resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CHAR resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OBJECT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONST resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for EOF resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FALSE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NULL resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NUMBER resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for THIS resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for TRUE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VAL resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VAR resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHEN resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LONG resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IF resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FUN resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 115 (label -> simpleIdentifier .)
    MENOR           reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    PONTO           reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    AS              reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MULT            reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    DIVIDE          reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MOD             reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    ELVIS           reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    IN              reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    NOT_IN          reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    IS              reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    NOT_IS          reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MAIOR           reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    DIFERENTE       reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    IGUALDADE       reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    AND             reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    OR              reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    COMMA           reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    RPAREN          reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    FOR             reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    WHILE           reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    DO              reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    LCHAVE          reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    PV              reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    ELSE            reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MAISIGUAL       reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MENOSIGUAL      reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MODIGUAL        reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    RCCT            reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    INCREMENTO      reduce using rule 115 (label -> simpleIdentifier .)
    DECREMENTO      reduce using rule 115 (label -> simpleIdentifier .)
    MINUS           reduce using rule 115 (label -> simpleIdentifier .)
    PLUS            reduce using rule 115 (label -> simpleIdentifier .)
    NOT             reduce using rule 115 (label -> simpleIdentifier .)
    ID              reduce using rule 115 (label -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 115 (label -> simpleIdentifier .)
    IMPORT          reduce using rule 115 (label -> simpleIdentifier .)
    INIT            reduce using rule 115 (label -> simpleIdentifier .)
    NOINLINE        reduce using rule 115 (label -> simpleIdentifier .)
    OUT             reduce using rule 115 (label -> simpleIdentifier .)
    VARARG          reduce using rule 115 (label -> simpleIdentifier .)
    WHERE           reduce using rule 115 (label -> simpleIdentifier .)
    INT             reduce using rule 115 (label -> simpleIdentifier .)
    FLOAT           reduce using rule 115 (label -> simpleIdentifier .)
    BOOLEAN         reduce using rule 115 (label -> simpleIdentifier .)
    STRING          reduce using rule 115 (label -> simpleIdentifier .)
    ARRAY           reduce using rule 115 (label -> simpleIdentifier .)
    CHAR            reduce using rule 115 (label -> simpleIdentifier .)
    OBJECT          reduce using rule 115 (label -> simpleIdentifier .)
    CONST           reduce using rule 115 (label -> simpleIdentifier .)
    CONSTRUCTOR     reduce using rule 115 (label -> simpleIdentifier .)
    EOF             reduce using rule 115 (label -> simpleIdentifier .)
    FALSE           reduce using rule 115 (label -> simpleIdentifier .)
    FUNCTION        reduce using rule 115 (label -> simpleIdentifier .)
    NULL            reduce using rule 115 (label -> simpleIdentifier .)
    NULLABLE        reduce using rule 115 (label -> simpleIdentifier .)
    NUMBER          reduce using rule 115 (label -> simpleIdentifier .)
    OPERATOR        reduce using rule 115 (label -> simpleIdentifier .)
    SMARTCAST       reduce using rule 115 (label -> simpleIdentifier .)
    THIS            reduce using rule 115 (label -> simpleIdentifier .)
    TRUE            reduce using rule 115 (label -> simpleIdentifier .)
    VAL             reduce using rule 115 (label -> simpleIdentifier .)
    VAR             reduce using rule 115 (label -> simpleIdentifier .)
    DOUBLE          reduce using rule 115 (label -> simpleIdentifier .)
    WHEN            reduce using rule 115 (label -> simpleIdentifier .)
    LONG            reduce using rule 115 (label -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 115 (label -> simpleIdentifier .)
    LPAREN          reduce using rule 115 (label -> simpleIdentifier .)
    COLONCOLON      reduce using rule 115 (label -> simpleIdentifier .)
    LCCT            reduce using rule 115 (label -> simpleIdentifier .)
    IF              reduce using rule 115 (label -> simpleIdentifier .)
    RETURN          reduce using rule 115 (label -> simpleIdentifier .)
    RETURN_AT       reduce using rule 115 (label -> simpleIdentifier .)
    CONTINUE        reduce using rule 115 (label -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 115 (label -> simpleIdentifier .)
    BREAK           reduce using rule 115 (label -> simpleIdentifier .)
    BREAK_AT        reduce using rule 115 (label -> simpleIdentifier .)
    RCHAVE          reduce using rule 115 (label -> simpleIdentifier .)
    FUN             reduce using rule 115 (label -> simpleIdentifier .)
    SUSPEND         reduce using rule 115 (label -> simpleIdentifier .)

  ! INCREMENTO      [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! RCHAVE          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! PLUS            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! INT             [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! FLOAT           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! BOOLEAN         [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! STRING          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! ARRAY           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! CHAR            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! OBJECT          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! CONST           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! CONSTRUCTOR     [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! EOF             [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! FALSE           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! FUNCTION        [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! NULL            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! NULLABLE        [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! NUMBER          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! OPERATOR        [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! SMARTCAST       [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! THIS            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! TRUE            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! VAL             [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! VAR             [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! DOUBLE          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! WHEN            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! LONG            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! FUN             [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! LITERAL_STRING  [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! IF              [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! RETURN          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! RETURN_AT       [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! CONTINUE        [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! CONTINUE_AT     [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! BREAK           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! BREAK_AT        [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! NOT             [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! SUSPEND         [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]


state 150

    (107) asExpression -> prefixUnaryExpression .
    (108) asExpression -> prefixUnaryExpression . asOperator type
    (248) asOperator -> . AS
    (249) asOperator -> . AS asOperator

  ! shift/reduce conflict for AS resolved as shift
    INCREMENTO      reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    DECREMENTO      reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    MENOR           reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    LCCT            reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    LPAREN          reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    COLONCOLON      reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    RCHAVE          reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    PONTO           reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    MULT            reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    DIVIDE          reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    MOD             reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    PLUS            reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    MINUS           reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    PONTOPONTO      reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    ID              reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    CROSSINLINE     reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    IMPORT          reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    INIT            reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    NOINLINE        reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    OUT             reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    VARARG          reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    WHERE           reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    INT             reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    FLOAT           reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    BOOLEAN         reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    STRING          reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    ARRAY           reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    CHAR            reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    OBJECT          reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    CONST           reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    CONSTRUCTOR     reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    EOF             reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    FALSE           reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    FUNCTION        reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    NULL            reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    NULLABLE        reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    NUMBER          reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    OPERATOR        reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    SMARTCAST       reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    THIS            reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    TRUE            reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    VAL             reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    VAR             reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    DOUBLE          reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    WHEN            reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    LONG            reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    ELVIS           reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    IN              reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    NOT_IN          reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    IS              reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    NOT_IS          reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    MAIOR           reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    MENORIGUAL      reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    MAIORIGUAL      reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    DIFERENTE       reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    IDENTIDADE      reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    IGUALDADE       reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    SEMIDENTIDADE   reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    AND             reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    OR              reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    COMMA           reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    RPAREN          reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    FUN             reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    FOR             reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    WHILE           reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    DO              reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    LITERAL_STRING  reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    IF              reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    RETURN          reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    RETURN_AT       reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    CONTINUE        reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    CONTINUE_AT     reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    BREAK           reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    BREAK_AT        reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    NOT             reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    SUSPEND         reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    LCHAVE          reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    PV              reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    ELSE            reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    MAISIGUAL       reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    MENOSIGUAL      reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    MULTIGUAL       reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    DIVIGUAL        reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    MODIGUAL        reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    RCCT            reduce using rule 107 (asExpression -> prefixUnaryExpression .)
    AS              shift and go to state 187

  ! AS              [ reduce using rule 107 (asExpression -> prefixUnaryExpression .) ]

    asOperator                     shift and go to state 186

state 151

    (110) prefixUnaryExpression -> postfixUnaryExpression .

    INCREMENTO      reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    DECREMENTO      reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    MENOR           reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    LCCT            reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    LPAREN          reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    COLONCOLON      reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    RCHAVE          reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    PONTO           reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    AS              reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    MULT            reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    DIVIDE          reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    MOD             reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    PLUS            reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    MINUS           reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    PONTOPONTO      reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    ID              reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    CROSSINLINE     reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    IMPORT          reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    INIT            reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOINLINE        reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    OUT             reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    VARARG          reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    WHERE           reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    INT             reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    FLOAT           reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    BOOLEAN         reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    STRING          reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    ARRAY           reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    CHAR            reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    OBJECT          reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONST           reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONSTRUCTOR     reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    EOF             reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    FALSE           reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    FUNCTION        reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    NULL            reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    NULLABLE        reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    NUMBER          reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    OPERATOR        reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    SMARTCAST       reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    THIS            reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    TRUE            reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    VAL             reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    VAR             reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    DOUBLE          reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    WHEN            reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    LONG            reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    ELVIS           reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    IN              reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOT_IN          reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    IS              reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOT_IS          reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    MAIOR           reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    MENORIGUAL      reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    MAIORIGUAL      reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    DIFERENTE       reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    IDENTIDADE      reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    IGUALDADE       reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    SEMIDENTIDADE   reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    AND             reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    OR              reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    COMMA           reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    RPAREN          reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    RCCT            reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    FUN             reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    FOR             reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    WHILE           reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    DO              reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    LITERAL_STRING  reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    IF              reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    RETURN          reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    RETURN_AT       reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONTINUE        reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONTINUE_AT     reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    BREAK           reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    BREAK_AT        reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOT             reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    SUSPEND         reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    LCHAVE          reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    PV              reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    ELSE            reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    MAISIGUAL       reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    MENOSIGUAL      reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    MULTIGUAL       reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    DIVIGUAL        reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)
    MODIGUAL        reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .)


state 152

    (167) parenthesizedExpression -> LPAREN . expression RPAREN
    (82) expression -> . disjunction
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (33) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 99
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    LPAREN          shift and go to state 152
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57

    expression                     shift and go to state 191
    disjunction                    shift and go to state 85
    conjunction                    shift and go to state 94
    equality                       shift and go to state 97
    comparison                     shift and go to state 106
    infixOperation                 shift and go to state 121
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    simpleIdentifier               shift and go to state 149
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133
    prefixUnaryExpression          shift and go to state 150
    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 151
    unaryPrefix                    shift and go to state 105
    primaryExpression              shift and go to state 95
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122

state 153

    (192) anonymousFunction -> FUN . type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> FUN . parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> FUN . type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> FUN . type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> FUN . type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> FUN . parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> FUN . parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> FUN . parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> FUN . type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> FUN . type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> FUN . type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> FUN . parametersWithOptionalType functionBody
    (204) anonymousFunction -> FUN . parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> FUN . type PONTO parametersWithOptionalType
    (206) anonymousFunction -> FUN . parametersWithOptionalType
    (26) type -> . typeModifiers optype
    (27) type -> . optype
    (172) parametersWithOptionalType -> . LPAREN pwot RPAREN
    (173) parametersWithOptionalType -> . LPAREN RPAREN
    (31) typeModifiers -> . typeModifier
    (32) typeModifiers -> . typeModifier typeModifiers
    (28) optype -> . parenthesizedType
    (29) optype -> . functionType
    (30) optype -> . userType
    (33) typeModifier -> . SUSPEND
    (56) parenthesizedType -> . LPAREN type RPAREN
    (44) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (45) functionType -> . functionTypeParameters SETA type
    (37) userType -> . simpleUserType
    (57) receiverType -> . typeModifier rt
    (46) functionTypeParameters -> . functionTypeParameters_p
    (47) functionTypeParameters -> . functionTypeParameters_t
    (38) simpleUserType -> . simpleIdentifier typeArguments
    (39) simpleUserType -> . simpleIdentifier
    (48) functionTypeParameters_p -> . LPAREN parameter ftp RPAREN
    (49) functionTypeParameters_p -> . LPAREN parameter RPAREN
    (50) functionTypeParameters_t -> . LPAREN type RPAREN
    (51) functionTypeParameters_t -> . LPAREN type ftp RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    LPAREN          shift and go to state 169
    SUSPEND         shift and go to state 57
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    type                           shift and go to state 167
    parametersWithOptionalType     shift and go to state 168
    typeModifiers                  shift and go to state 51
    optype                         shift and go to state 52
    typeModifier                   shift and go to state 53
    parenthesizedType              shift and go to state 54
    functionType                   shift and go to state 55
    userType                       shift and go to state 56
    receiverType                   shift and go to state 59
    functionTypeParameters         shift and go to state 60
    simpleUserType                 shift and go to state 61
    functionTypeParameters_p       shift and go to state 62
    functionTypeParameters_t       shift and go to state 63
    simpleIdentifier               shift and go to state 64

state 154

    (25) parameter -> simpleIdentifier DOISP type .

    ATRIBUICAO      reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    COMMA           reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    ID              reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    CROSSINLINE     reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    IMPORT          reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    INIT            reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    NOINLINE        reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    OUT             reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    VARARG          reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    WHERE           reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    INT             reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    FLOAT           reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    BOOLEAN         reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    STRING          reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    ARRAY           reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    CHAR            reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    OBJECT          reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    CONST           reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    CONSTRUCTOR     reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    EOF             reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    FALSE           reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    FUNCTION        reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    NULL            reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    NULLABLE        reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    NUMBER          reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    OPERATOR        reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    SMARTCAST       reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    THIS            reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    TRUE            reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    VAL             reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    VAR             reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    DOUBLE          reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    WHEN            reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    LONG            reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    RPAREN          reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)


state 155

    (67) block -> LCHAVE statements RCHAVE .

    FUN             reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    $end            reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    FOR             reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    WHILE           reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    DO              reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    ID              reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    CROSSINLINE     reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    IMPORT          reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    INIT            reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    NOINLINE        reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    OUT             reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    VARARG          reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    WHERE           reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    INT             reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    FLOAT           reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    BOOLEAN         reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    STRING          reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    ARRAY           reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    CHAR            reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    OBJECT          reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    CONST           reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    CONSTRUCTOR     reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    EOF             reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    FALSE           reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    FUNCTION        reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    NULL            reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    NULLABLE        reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    NUMBER          reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    OPERATOR        reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    SMARTCAST       reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    THIS            reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    TRUE            reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    VAL             reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    VAR             reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    DOUBLE          reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    WHEN            reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    LONG            reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    LPAREN          reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    LITERAL_STRING  reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    COLONCOLON      reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    LCCT            reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    IF              reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    RETURN          reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    RETURN_AT       reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    CONTINUE        reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    CONTINUE_AT     reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    BREAK           reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    BREAK_AT        reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    RCHAVE          reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    INCREMENTO      reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    DECREMENTO      reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    MINUS           reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    PLUS            reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    NOT             reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    SUSPEND         reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    LCHAVE          reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    PV              reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    ELSE            reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    MENOR           reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    PONTO           reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    AS              reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    MAISIGUAL       reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    MENOSIGUAL      reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    MULTIGUAL       reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    DIVIGUAL        reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    MODIGUAL        reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    MULT            reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    DIVIDE          reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    MOD             reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    PONTOPONTO      reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    ELVIS           reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    IN              reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    NOT_IN          reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    IS              reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    NOT_IS          reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    MAIOR           reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    MENORIGUAL      reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    MAIORIGUAL      reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    DIFERENTE       reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    IDENTIDADE      reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    IGUALDADE       reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    SEMIDENTIDADE   reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    AND             reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    OR              reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    COMMA           reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    RPAREN          reduce using rule 67 (block -> LCHAVE statements RCHAVE .)
    RCCT            reduce using rule 67 (block -> LCHAVE statements RCHAVE .)


state 156

    (183) lambdaLiteral -> RCHAVE ll . LCHAVE

    LCHAVE          shift and go to state 270


state 157

    (184) ll -> statements .

    LCHAVE          reduce using rule 184 (ll -> statements .)


state 158

    (185) ll -> lambdaParameters . SETA statements

    SETA            shift and go to state 271


state 159

    (186) ll -> SETA . statements
    (59) statements -> . statement
    (60) statements -> . statement statements
    (61) statement -> . functionDeclaration
    (62) statement -> . assignment
    (63) statement -> . loopStatement
    (64) statement -> . expression
    (3) functionDeclaration -> . FUN simpleIdentifier functionValueParameters fd2 fd3
    (80) assignment -> . directlyAssignableExpression IGUALDADE expression
    (81) assignment -> . assignableExpression assignmentAndOperator expression
    (68) loopStatement -> . forStatement_MD
    (69) loopStatement -> . forStatement_VD
    (70) loopStatement -> . whileStatement
    (71) loopStatement -> . doWhileStatement
    (82) expression -> . disjunction
    (125) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (126) directlyAssignableExpression -> . simpleIdentifier
    (127) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (129) assignableExpression -> . prefixUnaryExpression
    (130) assignableExpression -> . parenthesizedAssignableExpression
    (72) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (73) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (74) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (75) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (76) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (77) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (78) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (79) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (128) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (131) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (33) typeModifier -> . SUSPEND
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type

    FUN             shift and go to state 77
    FOR             shift and go to state 90
    WHILE           shift and go to state 92
    DO              shift and go to state 93
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    LPAREN          shift and go to state 91
    LITERAL_STRING  shift and go to state 99
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    SUSPEND         shift and go to state 57

    statements                     shift and go to state 272
    statement                      shift and go to state 72
    functionDeclaration            shift and go to state 73
    assignment                     shift and go to state 74
    loopStatement                  shift and go to state 75
    expression                     shift and go to state 76
    simpleIdentifier               shift and go to state 78
    directlyAssignableExpression   shift and go to state 79
    assignableExpression           shift and go to state 80
    forStatement_MD                shift and go to state 81
    forStatement_VD                shift and go to state 82
    whileStatement                 shift and go to state 83
    doWhileStatement               shift and go to state 84
    disjunction                    shift and go to state 85
    postfixUnaryExpression         shift and go to state 86
    parenthesizedDirectlyAssignableExpression shift and go to state 87
    prefixUnaryExpression          shift and go to state 88
    parenthesizedAssignableExpression shift and go to state 89
    conjunction                    shift and go to state 94
    primaryExpression              shift and go to state 95
    preue                          shift and go to state 96
    equality                       shift and go to state 97
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    unaryPrefix                    shift and go to state 105
    comparison                     shift and go to state 106
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    infixOperation                 shift and go to state 121
    typeModifier                   shift and go to state 122
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133

state 160

    (187) lambdaParameters -> lambdaParameter .
    (188) lambdaParameters -> lambdaParameter . COMMA lambdaParameters

    SETA            reduce using rule 187 (lambdaParameters -> lambdaParameter .)
    COMMA           shift and go to state 273


state 161

    (189) lambdaParameter -> variableDeclaration .

    COMMA           reduce using rule 189 (lambdaParameter -> variableDeclaration .)
    SETA            reduce using rule 189 (lambdaParameter -> variableDeclaration .)


state 162

    (190) lambdaParameter -> multiVariableDeclaration . DOISP type
    (191) lambdaParameter -> multiVariableDeclaration .

    DOISP           shift and go to state 274
    COMMA           reduce using rule 191 (lambdaParameter -> multiVariableDeclaration .)
    SETA            reduce using rule 191 (lambdaParameter -> multiVariableDeclaration .)


state 163

    (19) variableDeclaration -> simpleIdentifier . DOISP type
    (20) variableDeclaration -> simpleIdentifier .
    (126) directlyAssignableExpression -> simpleIdentifier .
    (160) primaryExpression -> simpleIdentifier .
    (115) label -> simpleIdentifier .

  ! reduce/reduce conflict for IGUALDADE resolved using rule 126 (directlyAssignableExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NOT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for INT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FLOAT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for STRING resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ARRAY resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CHAR resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OBJECT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONST resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for EOF resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FALSE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NULL resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NUMBER resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for THIS resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for TRUE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VAL resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VAR resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHEN resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LONG resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IF resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FUN resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 115 (label -> simpleIdentifier .)
    DOISP           shift and go to state 275
    COMMA           reduce using rule 20 (variableDeclaration -> simpleIdentifier .)
    SETA            reduce using rule 20 (variableDeclaration -> simpleIdentifier .)
    IGUALDADE       reduce using rule 126 (directlyAssignableExpression -> simpleIdentifier .)
    MENOR           reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    PONTO           reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    AS              reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MAISIGUAL       reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MENOSIGUAL      reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MODIGUAL        reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MULT            reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    DIVIDE          reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MOD             reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    ELVIS           reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    IN              reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    NOT_IN          reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    IS              reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    NOT_IS          reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MAIOR           reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    DIFERENTE       reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    AND             reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    OR              reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    FOR             reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    WHILE           reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    DO              reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    LCHAVE          reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    INCREMENTO      reduce using rule 115 (label -> simpleIdentifier .)
    DECREMENTO      reduce using rule 115 (label -> simpleIdentifier .)
    MINUS           reduce using rule 115 (label -> simpleIdentifier .)
    PLUS            reduce using rule 115 (label -> simpleIdentifier .)
    NOT             reduce using rule 115 (label -> simpleIdentifier .)
    ID              reduce using rule 115 (label -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 115 (label -> simpleIdentifier .)
    IMPORT          reduce using rule 115 (label -> simpleIdentifier .)
    INIT            reduce using rule 115 (label -> simpleIdentifier .)
    NOINLINE        reduce using rule 115 (label -> simpleIdentifier .)
    OUT             reduce using rule 115 (label -> simpleIdentifier .)
    VARARG          reduce using rule 115 (label -> simpleIdentifier .)
    WHERE           reduce using rule 115 (label -> simpleIdentifier .)
    INT             reduce using rule 115 (label -> simpleIdentifier .)
    FLOAT           reduce using rule 115 (label -> simpleIdentifier .)
    BOOLEAN         reduce using rule 115 (label -> simpleIdentifier .)
    STRING          reduce using rule 115 (label -> simpleIdentifier .)
    ARRAY           reduce using rule 115 (label -> simpleIdentifier .)
    CHAR            reduce using rule 115 (label -> simpleIdentifier .)
    OBJECT          reduce using rule 115 (label -> simpleIdentifier .)
    CONST           reduce using rule 115 (label -> simpleIdentifier .)
    CONSTRUCTOR     reduce using rule 115 (label -> simpleIdentifier .)
    EOF             reduce using rule 115 (label -> simpleIdentifier .)
    FALSE           reduce using rule 115 (label -> simpleIdentifier .)
    FUNCTION        reduce using rule 115 (label -> simpleIdentifier .)
    NULL            reduce using rule 115 (label -> simpleIdentifier .)
    NULLABLE        reduce using rule 115 (label -> simpleIdentifier .)
    NUMBER          reduce using rule 115 (label -> simpleIdentifier .)
    OPERATOR        reduce using rule 115 (label -> simpleIdentifier .)
    SMARTCAST       reduce using rule 115 (label -> simpleIdentifier .)
    THIS            reduce using rule 115 (label -> simpleIdentifier .)
    TRUE            reduce using rule 115 (label -> simpleIdentifier .)
    VAL             reduce using rule 115 (label -> simpleIdentifier .)
    VAR             reduce using rule 115 (label -> simpleIdentifier .)
    DOUBLE          reduce using rule 115 (label -> simpleIdentifier .)
    WHEN            reduce using rule 115 (label -> simpleIdentifier .)
    LONG            reduce using rule 115 (label -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 115 (label -> simpleIdentifier .)
    LPAREN          reduce using rule 115 (label -> simpleIdentifier .)
    COLONCOLON      reduce using rule 115 (label -> simpleIdentifier .)
    LCCT            reduce using rule 115 (label -> simpleIdentifier .)
    IF              reduce using rule 115 (label -> simpleIdentifier .)
    RETURN          reduce using rule 115 (label -> simpleIdentifier .)
    RETURN_AT       reduce using rule 115 (label -> simpleIdentifier .)
    CONTINUE        reduce using rule 115 (label -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 115 (label -> simpleIdentifier .)
    BREAK           reduce using rule 115 (label -> simpleIdentifier .)
    BREAK_AT        reduce using rule 115 (label -> simpleIdentifier .)
    RCHAVE          reduce using rule 115 (label -> simpleIdentifier .)
    FUN             reduce using rule 115 (label -> simpleIdentifier .)
    SUSPEND         reduce using rule 115 (label -> simpleIdentifier .)

  ! INCREMENTO      [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! RCHAVE          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! PLUS            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! INT             [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! FLOAT           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! BOOLEAN         [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! STRING          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! ARRAY           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! CHAR            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! OBJECT          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! CONST           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! CONSTRUCTOR     [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! EOF             [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! FALSE           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! FUNCTION        [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! NULL            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! NULLABLE        [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! NUMBER          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! OPERATOR        [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! SMARTCAST       [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! THIS            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! TRUE            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! VAL             [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! VAR             [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! DOUBLE          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! WHEN            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! LONG            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! IGUALDADE       [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! FUN             [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! LITERAL_STRING  [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! IF              [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! RETURN          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! RETURN_AT       [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! CONTINUE        [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! CONTINUE_AT     [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! BREAK           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! BREAK_AT        [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! NOT             [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! SUSPEND         [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]


state 164

    (21) multiVariableDeclaration -> LPAREN . mvd RPAREN
    (22) multiVariableDeclaration -> LPAREN . RPAREN
    (128) parenthesizedDirectlyAssignableExpression -> LPAREN . directlyAssignableExpression RPAREN
    (131) parenthesizedAssignableExpression -> LPAREN . assignableExpression RPAREN
    (167) parenthesizedExpression -> LPAREN . expression RPAREN
    (23) mvd -> . variableDeclaration
    (24) mvd -> . variableDeclaration COMMA mvd
    (125) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (126) directlyAssignableExpression -> . simpleIdentifier
    (127) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (129) assignableExpression -> . prefixUnaryExpression
    (130) assignableExpression -> . parenthesizedAssignableExpression
    (82) expression -> . disjunction
    (19) variableDeclaration -> . simpleIdentifier DOISP type
    (20) variableDeclaration -> . simpleIdentifier
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (128) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (131) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (33) typeModifier -> . SUSPEND
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type

    RPAREN          shift and go to state 277
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    LPAREN          shift and go to state 91
    LITERAL_STRING  shift and go to state 99
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    SUSPEND         shift and go to state 57

    mvd                            shift and go to state 276
    directlyAssignableExpression   shift and go to state 189
    assignableExpression           shift and go to state 190
    expression                     shift and go to state 191
    variableDeclaration            shift and go to state 278
    postfixUnaryExpression         shift and go to state 86
    simpleIdentifier               shift and go to state 279
    parenthesizedDirectlyAssignableExpression shift and go to state 87
    prefixUnaryExpression          shift and go to state 88
    parenthesizedAssignableExpression shift and go to state 89
    disjunction                    shift and go to state 85
    primaryExpression              shift and go to state 95
    preue                          shift and go to state 96
    conjunction                    shift and go to state 94
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    unaryPrefix                    shift and go to state 105
    equality                       shift and go to state 97
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    comparison                     shift and go to state 106
    typeModifier                   shift and go to state 122
    infixOperation                 shift and go to state 121
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133

state 165

    (60) statements -> statement statements .

    RCHAVE          reduce using rule 60 (statements -> statement statements .)
    LCHAVE          reduce using rule 60 (statements -> statement statements .)


state 166

    (3) functionDeclaration -> FUN simpleIdentifier . functionValueParameters fd2 fd3
    (38) simpleUserType -> simpleIdentifier . typeArguments
    (39) simpleUserType -> simpleIdentifier .
    (12) functionValueParameters -> . LPAREN fvps RPAREN
    (13) functionValueParameters -> . LPAREN RPAREN
    (148) typeArguments -> . MENOR ta MAIOR
    (149) typeArguments -> . MENOR MAIOR

    PONTO           reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    LPAREN          shift and go to state 39
    MENOR           shift and go to state 146

    functionValueParameters        shift and go to state 38
    typeArguments                  shift and go to state 145

state 167

    (192) anonymousFunction -> FUN type . PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> FUN type . PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> FUN type . PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> FUN type . PONTO parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> FUN type . PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> FUN type . PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> FUN type . PONTO parametersWithOptionalType DOISP type
    (205) anonymousFunction -> FUN type . PONTO parametersWithOptionalType

    PONTO           shift and go to state 280


state 168

    (193) anonymousFunction -> FUN parametersWithOptionalType . DOISP type typeConstraint functionBody
    (197) anonymousFunction -> FUN parametersWithOptionalType . typeConstraint functionBody
    (198) anonymousFunction -> FUN parametersWithOptionalType . DOISP type functionBody
    (199) anonymousFunction -> FUN parametersWithOptionalType . DOISP type typeConstraint
    (203) anonymousFunction -> FUN parametersWithOptionalType . functionBody
    (204) anonymousFunction -> FUN parametersWithOptionalType . typeConstraint
    (206) anonymousFunction -> FUN parametersWithOptionalType .
    (209) typeConstraint -> . simpleIdentifier DOISP type
    (10) functionBody -> . block
    (11) functionBody -> . ATRIBUICAO expression
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (67) block -> . LCHAVE statements RCHAVE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for LCHAVE resolved as shift
    DOISP           shift and go to state 281
    INCREMENTO      reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    DECREMENTO      reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    MENOR           reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    LCCT            reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    LPAREN          reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    COLONCOLON      reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    RCHAVE          reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    PONTO           reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    AS              reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    MAISIGUAL       reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    MENOSIGUAL      reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    MULTIGUAL       reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    DIVIGUAL        reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    MODIGUAL        reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    MULT            reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    DIVIDE          reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    MOD             reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    PLUS            reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    MINUS           reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    PONTOPONTO      reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    ELVIS           reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    IN              reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    NOT_IN          reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    IS              reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    NOT_IS          reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    MAIOR           reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    MENORIGUAL      reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    MAIORIGUAL      reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    DIFERENTE       reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    IDENTIDADE      reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    IGUALDADE       reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    SEMIDENTIDADE   reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    AND             reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    OR              reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    FUN             reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    FOR             reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    WHILE           reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    DO              reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    LITERAL_STRING  reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    IF              reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    RETURN          reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    RETURN_AT       reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    CONTINUE        reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    CONTINUE_AT     reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    BREAK           reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    BREAK_AT        reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    NOT             reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    SUSPEND         reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    COMMA           reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    RPAREN          reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    PV              reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    ELSE            reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    RCCT            reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .)
    ATRIBUICAO      shift and go to state 286
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    LCHAVE          shift and go to state 49

  ! ID              [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! CROSSINLINE     [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! IMPORT          [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! INIT            [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! NOINLINE        [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! OUT             [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! VARARG          [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! WHERE           [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! INT             [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! FLOAT           [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! BOOLEAN         [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! STRING          [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! ARRAY           [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! CHAR            [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! OBJECT          [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! CONST           [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! CONSTRUCTOR     [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! EOF             [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! FALSE           [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! FUNCTION        [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! NULL            [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! NULLABLE        [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! NUMBER          [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! OPERATOR        [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! SMARTCAST       [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! THIS            [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! TRUE            [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! VAL             [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! VAR             [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! DOUBLE          [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! WHEN            [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! LONG            [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! LCHAVE          [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType .) ]

    typeConstraint                 shift and go to state 282
    functionBody                   shift and go to state 283
    simpleIdentifier               shift and go to state 284
    block                          shift and go to state 285

state 169

    (172) parametersWithOptionalType -> LPAREN . pwot RPAREN
    (173) parametersWithOptionalType -> LPAREN . RPAREN
    (56) parenthesizedType -> LPAREN . type RPAREN
    (48) functionTypeParameters_p -> LPAREN . parameter ftp RPAREN
    (49) functionTypeParameters_p -> LPAREN . parameter RPAREN
    (50) functionTypeParameters_t -> LPAREN . type RPAREN
    (51) functionTypeParameters_t -> LPAREN . type ftp RPAREN
    (174) pwot -> . parameterWithOptionalType
    (175) pwot -> . parameterWithOptionalType COMMA pwot COMMA
    (26) type -> . typeModifiers optype
    (27) type -> . optype
    (25) parameter -> . simpleIdentifier DOISP type
    (176) parameterWithOptionalType -> . parameterModifiers simpleIdentifier DOISP type
    (177) parameterWithOptionalType -> . simpleIdentifier DOISP type
    (178) parameterWithOptionalType -> . parameterModifiers simpleIdentifier
    (179) parameterWithOptionalType -> . simpleIdentifier
    (31) typeModifiers -> . typeModifier
    (32) typeModifiers -> . typeModifier typeModifiers
    (28) optype -> . parenthesizedType
    (29) optype -> . functionType
    (30) optype -> . userType
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (180) parameterModifiers -> . VARARG
    (181) parameterModifiers -> . NOINLINE
    (182) parameterModifiers -> . CROSSINLINE
    (33) typeModifier -> . SUSPEND
    (56) parenthesizedType -> . LPAREN type RPAREN
    (44) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (45) functionType -> . functionTypeParameters SETA type
    (37) userType -> . simpleUserType
    (57) receiverType -> . typeModifier rt
    (46) functionTypeParameters -> . functionTypeParameters_p
    (47) functionTypeParameters -> . functionTypeParameters_t
    (38) simpleUserType -> . simpleIdentifier typeArguments
    (39) simpleUserType -> . simpleIdentifier
    (48) functionTypeParameters_p -> . LPAREN parameter ftp RPAREN
    (49) functionTypeParameters_p -> . LPAREN parameter RPAREN
    (50) functionTypeParameters_t -> . LPAREN type RPAREN
    (51) functionTypeParameters_t -> . LPAREN type ftp RPAREN

    RPAREN          shift and go to state 288
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 292
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 293
    OUT             shift and go to state 11
    VARARG          shift and go to state 294
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    SUSPEND         shift and go to state 57
    LPAREN          shift and go to state 58

    pwot                           shift and go to state 287
    type                           shift and go to state 140
    parameter                      shift and go to state 141
    parameterWithOptionalType      shift and go to state 289
    typeModifiers                  shift and go to state 51
    optype                         shift and go to state 52
    simpleIdentifier               shift and go to state 290
    parameterModifiers             shift and go to state 291
    typeModifier                   shift and go to state 53
    parenthesizedType              shift and go to state 54
    functionType                   shift and go to state 55
    userType                       shift and go to state 56
    receiverType                   shift and go to state 59
    functionTypeParameters         shift and go to state 60
    simpleUserType                 shift and go to state 61
    functionTypeParameters_p       shift and go to state 62
    functionTypeParameters_t       shift and go to state 63

state 170

    (80) assignment -> directlyAssignableExpression IGUALDADE . expression
    (82) expression -> . disjunction
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (33) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 99
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    LPAREN          shift and go to state 152
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57

    expression                     shift and go to state 295
    disjunction                    shift and go to state 85
    conjunction                    shift and go to state 94
    equality                       shift and go to state 97
    comparison                     shift and go to state 106
    infixOperation                 shift and go to state 121
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    simpleIdentifier               shift and go to state 149
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133
    prefixUnaryExpression          shift and go to state 150
    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 151
    unaryPrefix                    shift and go to state 105
    primaryExpression              shift and go to state 95
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122

state 171

    (81) assignment -> assignableExpression assignmentAndOperator . expression
    (82) expression -> . disjunction
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (33) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 99
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    LPAREN          shift and go to state 152
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57

    expression                     shift and go to state 296
    disjunction                    shift and go to state 85
    conjunction                    shift and go to state 94
    equality                       shift and go to state 97
    comparison                     shift and go to state 106
    infixOperation                 shift and go to state 121
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    simpleIdentifier               shift and go to state 149
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133
    prefixUnaryExpression          shift and go to state 150
    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 151
    unaryPrefix                    shift and go to state 105
    primaryExpression              shift and go to state 95
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122

state 172

    (226) assignmentAndOperator -> MAISIGUAL .

    LITERAL_STRING  reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    INCREMENTO      reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    DECREMENTO      reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    MINUS           reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    PLUS            reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    NOT             reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    LPAREN          reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    ID              reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    CROSSINLINE     reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    IMPORT          reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    INIT            reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    NOINLINE        reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    OUT             reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    VARARG          reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    WHERE           reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    INT             reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    FLOAT           reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    BOOLEAN         reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    STRING          reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    ARRAY           reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    CHAR            reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    OBJECT          reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    CONST           reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    CONSTRUCTOR     reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    EOF             reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    FALSE           reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    FUNCTION        reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    NULL            reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    NULLABLE        reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    NUMBER          reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    OPERATOR        reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    SMARTCAST       reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    THIS            reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    TRUE            reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    VAL             reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    VAR             reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    DOUBLE          reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    WHEN            reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    LONG            reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    COLONCOLON      reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    LCCT            reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    IF              reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    RETURN          reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    RETURN_AT       reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    CONTINUE        reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    CONTINUE_AT     reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    BREAK           reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    BREAK_AT        reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    RCHAVE          reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    FUN             reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)
    SUSPEND         reduce using rule 226 (assignmentAndOperator -> MAISIGUAL .)


state 173

    (227) assignmentAndOperator -> MENOSIGUAL .

    LITERAL_STRING  reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    INCREMENTO      reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    DECREMENTO      reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    MINUS           reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    PLUS            reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    NOT             reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    LPAREN          reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    ID              reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    CROSSINLINE     reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    IMPORT          reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    INIT            reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    NOINLINE        reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    OUT             reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    VARARG          reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    WHERE           reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    INT             reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    FLOAT           reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    BOOLEAN         reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    STRING          reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    ARRAY           reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    CHAR            reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    OBJECT          reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    CONST           reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    CONSTRUCTOR     reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    EOF             reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    FALSE           reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    FUNCTION        reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    NULL            reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    NULLABLE        reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    NUMBER          reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    OPERATOR        reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    SMARTCAST       reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    THIS            reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    TRUE            reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    VAL             reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    VAR             reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    DOUBLE          reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    WHEN            reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    LONG            reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    COLONCOLON      reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    LCCT            reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    IF              reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    RETURN          reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    RETURN_AT       reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    CONTINUE        reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    CONTINUE_AT     reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    BREAK           reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    BREAK_AT        reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    RCHAVE          reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    FUN             reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)
    SUSPEND         reduce using rule 227 (assignmentAndOperator -> MENOSIGUAL .)


state 174

    (228) assignmentAndOperator -> MULTIGUAL .

    LITERAL_STRING  reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    INCREMENTO      reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    DECREMENTO      reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    MINUS           reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    PLUS            reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    NOT             reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    LPAREN          reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    ID              reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    CROSSINLINE     reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    IMPORT          reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    INIT            reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    NOINLINE        reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    OUT             reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    VARARG          reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    WHERE           reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    INT             reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    FLOAT           reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    BOOLEAN         reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    STRING          reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    ARRAY           reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    CHAR            reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    OBJECT          reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    CONST           reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    CONSTRUCTOR     reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    EOF             reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    FALSE           reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    FUNCTION        reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    NULL            reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    NULLABLE        reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    NUMBER          reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    OPERATOR        reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    SMARTCAST       reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    THIS            reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    TRUE            reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    VAL             reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    VAR             reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    DOUBLE          reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    WHEN            reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    LONG            reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    COLONCOLON      reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    LCCT            reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    IF              reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    RETURN          reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    RETURN_AT       reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    CONTINUE        reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    CONTINUE_AT     reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    BREAK           reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    BREAK_AT        reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    RCHAVE          reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    FUN             reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)
    SUSPEND         reduce using rule 228 (assignmentAndOperator -> MULTIGUAL .)


state 175

    (229) assignmentAndOperator -> DIVIGUAL .

    LITERAL_STRING  reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    INCREMENTO      reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    DECREMENTO      reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    MINUS           reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    PLUS            reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    NOT             reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    LPAREN          reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    ID              reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    CROSSINLINE     reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    IMPORT          reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    INIT            reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    NOINLINE        reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    OUT             reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    VARARG          reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    WHERE           reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    INT             reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    FLOAT           reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    BOOLEAN         reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    STRING          reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    ARRAY           reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    CHAR            reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    OBJECT          reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    CONST           reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    CONSTRUCTOR     reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    EOF             reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    FALSE           reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    FUNCTION        reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    NULL            reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    NULLABLE        reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    NUMBER          reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    OPERATOR        reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    SMARTCAST       reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    THIS            reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    TRUE            reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    VAL             reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    VAR             reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    DOUBLE          reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    WHEN            reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    LONG            reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    COLONCOLON      reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    LCCT            reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    IF              reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    RETURN          reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    RETURN_AT       reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    CONTINUE        reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    CONTINUE_AT     reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    BREAK           reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    BREAK_AT        reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    RCHAVE          reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    FUN             reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)
    SUSPEND         reduce using rule 229 (assignmentAndOperator -> DIVIGUAL .)


state 176

    (230) assignmentAndOperator -> MODIGUAL .

    LITERAL_STRING  reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    INCREMENTO      reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    DECREMENTO      reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    MINUS           reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    PLUS            reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    NOT             reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    LPAREN          reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    ID              reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    CROSSINLINE     reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    IMPORT          reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    INIT            reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    NOINLINE        reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    OUT             reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    VARARG          reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    WHERE           reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    INT             reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    FLOAT           reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    BOOLEAN         reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    STRING          reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    ARRAY           reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    CHAR            reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    OBJECT          reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    CONST           reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    CONSTRUCTOR     reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    EOF             reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    FALSE           reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    FUNCTION        reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    NULL            reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    NULLABLE        reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    NUMBER          reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    OPERATOR        reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    SMARTCAST       reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    THIS            reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    TRUE            reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    VAL             reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    VAR             reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    DOUBLE          reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    WHEN            reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    LONG            reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    COLONCOLON      reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    LCCT            reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    IF              reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    RETURN          reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    RETURN_AT       reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    CONTINUE        reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    CONTINUE_AT     reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    BREAK           reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    BREAK_AT        reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    RCHAVE          reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    FUN             reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)
    SUSPEND         reduce using rule 230 (assignmentAndOperator -> MODIGUAL .)


state 177

    (125) directlyAssignableExpression -> postfixUnaryExpression assignableSuffix .

    IGUALDADE       reduce using rule 125 (directlyAssignableExpression -> postfixUnaryExpression assignableSuffix .)
    RPAREN          reduce using rule 125 (directlyAssignableExpression -> postfixUnaryExpression assignableSuffix .)


state 178

    (132) assignableSuffix -> typeArguments .

    IGUALDADE       reduce using rule 132 (assignableSuffix -> typeArguments .)
    RPAREN          reduce using rule 132 (assignableSuffix -> typeArguments .)


state 179

    (133) assignableSuffix -> indexingSuffix .

    IGUALDADE       reduce using rule 133 (assignableSuffix -> indexingSuffix .)
    RPAREN          reduce using rule 133 (assignableSuffix -> indexingSuffix .)


state 180

    (134) assignableSuffix -> navigationSuffix .

    IGUALDADE       reduce using rule 134 (assignableSuffix -> navigationSuffix .)
    RPAREN          reduce using rule 134 (assignableSuffix -> navigationSuffix .)


state 181

    (135) indexingSuffix -> LCCT . isuf RCCT
    (136) indexingSuffix -> LCCT . RCCT
    (137) isuf -> . expression
    (138) isuf -> . expression COMMA isuf
    (82) expression -> . disjunction
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (33) typeModifier -> . SUSPEND

    RCCT            shift and go to state 298
    LITERAL_STRING  shift and go to state 99
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    LPAREN          shift and go to state 152
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57

    isuf                           shift and go to state 297
    expression                     shift and go to state 299
    disjunction                    shift and go to state 85
    conjunction                    shift and go to state 94
    equality                       shift and go to state 97
    comparison                     shift and go to state 106
    infixOperation                 shift and go to state 121
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    simpleIdentifier               shift and go to state 149
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133
    prefixUnaryExpression          shift and go to state 150
    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 151
    unaryPrefix                    shift and go to state 105
    primaryExpression              shift and go to state 95
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122

state 182

    (139) navigationSuffix -> memberAccessOperator . simpleIdentifier CLASS
    (140) navigationSuffix -> memberAccessOperator . parenthesizedExpression CLASS
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (167) parenthesizedExpression -> . LPAREN expression RPAREN

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    LPAREN          shift and go to state 152

    simpleIdentifier               shift and go to state 300
    parenthesizedExpression        shift and go to state 301

state 183

    (257) memberAccessOperator -> safeNav .

    ID              reduce using rule 257 (memberAccessOperator -> safeNav .)
    CROSSINLINE     reduce using rule 257 (memberAccessOperator -> safeNav .)
    IMPORT          reduce using rule 257 (memberAccessOperator -> safeNav .)
    INIT            reduce using rule 257 (memberAccessOperator -> safeNav .)
    NOINLINE        reduce using rule 257 (memberAccessOperator -> safeNav .)
    OUT             reduce using rule 257 (memberAccessOperator -> safeNav .)
    VARARG          reduce using rule 257 (memberAccessOperator -> safeNav .)
    WHERE           reduce using rule 257 (memberAccessOperator -> safeNav .)
    INT             reduce using rule 257 (memberAccessOperator -> safeNav .)
    FLOAT           reduce using rule 257 (memberAccessOperator -> safeNav .)
    BOOLEAN         reduce using rule 257 (memberAccessOperator -> safeNav .)
    STRING          reduce using rule 257 (memberAccessOperator -> safeNav .)
    ARRAY           reduce using rule 257 (memberAccessOperator -> safeNav .)
    CHAR            reduce using rule 257 (memberAccessOperator -> safeNav .)
    OBJECT          reduce using rule 257 (memberAccessOperator -> safeNav .)
    CONST           reduce using rule 257 (memberAccessOperator -> safeNav .)
    CONSTRUCTOR     reduce using rule 257 (memberAccessOperator -> safeNav .)
    EOF             reduce using rule 257 (memberAccessOperator -> safeNav .)
    FALSE           reduce using rule 257 (memberAccessOperator -> safeNav .)
    FUNCTION        reduce using rule 257 (memberAccessOperator -> safeNav .)
    NULL            reduce using rule 257 (memberAccessOperator -> safeNav .)
    NULLABLE        reduce using rule 257 (memberAccessOperator -> safeNav .)
    NUMBER          reduce using rule 257 (memberAccessOperator -> safeNav .)
    OPERATOR        reduce using rule 257 (memberAccessOperator -> safeNav .)
    SMARTCAST       reduce using rule 257 (memberAccessOperator -> safeNav .)
    THIS            reduce using rule 257 (memberAccessOperator -> safeNav .)
    TRUE            reduce using rule 257 (memberAccessOperator -> safeNav .)
    VAL             reduce using rule 257 (memberAccessOperator -> safeNav .)
    VAR             reduce using rule 257 (memberAccessOperator -> safeNav .)
    DOUBLE          reduce using rule 257 (memberAccessOperator -> safeNav .)
    WHEN            reduce using rule 257 (memberAccessOperator -> safeNav .)
    LONG            reduce using rule 257 (memberAccessOperator -> safeNav .)
    LPAREN          reduce using rule 257 (memberAccessOperator -> safeNav .)


state 184

    (258) memberAccessOperator -> COLONCOLON .

    ID              reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    CROSSINLINE     reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    IMPORT          reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    INIT            reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    NOINLINE        reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    OUT             reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    VARARG          reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    WHERE           reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    INT             reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    FLOAT           reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    BOOLEAN         reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    STRING          reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    ARRAY           reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    CHAR            reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    OBJECT          reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    CONST           reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    CONSTRUCTOR     reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    EOF             reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    FALSE           reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    FUNCTION        reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    NULL            reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    NULLABLE        reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    NUMBER          reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    OPERATOR        reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    SMARTCAST       reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    THIS            reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    TRUE            reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    VAL             reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    VAR             reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    DOUBLE          reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    WHEN            reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    LONG            reduce using rule 258 (memberAccessOperator -> COLONCOLON .)
    LPAREN          reduce using rule 258 (memberAccessOperator -> COLONCOLON .)


state 185

    (259) safeNav -> PONTO .

    ID              reduce using rule 259 (safeNav -> PONTO .)
    CROSSINLINE     reduce using rule 259 (safeNav -> PONTO .)
    IMPORT          reduce using rule 259 (safeNav -> PONTO .)
    INIT            reduce using rule 259 (safeNav -> PONTO .)
    NOINLINE        reduce using rule 259 (safeNav -> PONTO .)
    OUT             reduce using rule 259 (safeNav -> PONTO .)
    VARARG          reduce using rule 259 (safeNav -> PONTO .)
    WHERE           reduce using rule 259 (safeNav -> PONTO .)
    INT             reduce using rule 259 (safeNav -> PONTO .)
    FLOAT           reduce using rule 259 (safeNav -> PONTO .)
    BOOLEAN         reduce using rule 259 (safeNav -> PONTO .)
    STRING          reduce using rule 259 (safeNav -> PONTO .)
    ARRAY           reduce using rule 259 (safeNav -> PONTO .)
    CHAR            reduce using rule 259 (safeNav -> PONTO .)
    OBJECT          reduce using rule 259 (safeNav -> PONTO .)
    CONST           reduce using rule 259 (safeNav -> PONTO .)
    CONSTRUCTOR     reduce using rule 259 (safeNav -> PONTO .)
    EOF             reduce using rule 259 (safeNav -> PONTO .)
    FALSE           reduce using rule 259 (safeNav -> PONTO .)
    FUNCTION        reduce using rule 259 (safeNav -> PONTO .)
    NULL            reduce using rule 259 (safeNav -> PONTO .)
    NULLABLE        reduce using rule 259 (safeNav -> PONTO .)
    NUMBER          reduce using rule 259 (safeNav -> PONTO .)
    OPERATOR        reduce using rule 259 (safeNav -> PONTO .)
    SMARTCAST       reduce using rule 259 (safeNav -> PONTO .)
    THIS            reduce using rule 259 (safeNav -> PONTO .)
    TRUE            reduce using rule 259 (safeNav -> PONTO .)
    VAL             reduce using rule 259 (safeNav -> PONTO .)
    VAR             reduce using rule 259 (safeNav -> PONTO .)
    DOUBLE          reduce using rule 259 (safeNav -> PONTO .)
    WHEN            reduce using rule 259 (safeNav -> PONTO .)
    LONG            reduce using rule 259 (safeNav -> PONTO .)
    LPAREN          reduce using rule 259 (safeNav -> PONTO .)


state 186

    (108) asExpression -> prefixUnaryExpression asOperator . type
    (26) type -> . typeModifiers optype
    (27) type -> . optype
    (31) typeModifiers -> . typeModifier
    (32) typeModifiers -> . typeModifier typeModifiers
    (28) optype -> . parenthesizedType
    (29) optype -> . functionType
    (30) optype -> . userType
    (33) typeModifier -> . SUSPEND
    (56) parenthesizedType -> . LPAREN type RPAREN
    (44) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (45) functionType -> . functionTypeParameters SETA type
    (37) userType -> . simpleUserType
    (57) receiverType -> . typeModifier rt
    (46) functionTypeParameters -> . functionTypeParameters_p
    (47) functionTypeParameters -> . functionTypeParameters_t
    (38) simpleUserType -> . simpleIdentifier typeArguments
    (39) simpleUserType -> . simpleIdentifier
    (48) functionTypeParameters_p -> . LPAREN parameter ftp RPAREN
    (49) functionTypeParameters_p -> . LPAREN parameter RPAREN
    (50) functionTypeParameters_t -> . LPAREN type RPAREN
    (51) functionTypeParameters_t -> . LPAREN type ftp RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    SUSPEND         shift and go to state 57
    LPAREN          shift and go to state 58
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    type                           shift and go to state 302
    typeModifiers                  shift and go to state 51
    optype                         shift and go to state 52
    typeModifier                   shift and go to state 53
    parenthesizedType              shift and go to state 54
    functionType                   shift and go to state 55
    userType                       shift and go to state 56
    receiverType                   shift and go to state 59
    functionTypeParameters         shift and go to state 60
    simpleUserType                 shift and go to state 61
    functionTypeParameters_p       shift and go to state 62
    functionTypeParameters_t       shift and go to state 63
    simpleIdentifier               shift and go to state 64

state 187

    (248) asOperator -> AS .
    (249) asOperator -> AS . asOperator
    (248) asOperator -> . AS
    (249) asOperator -> . AS asOperator

    SUSPEND         reduce using rule 248 (asOperator -> AS .)
    LPAREN          reduce using rule 248 (asOperator -> AS .)
    ID              reduce using rule 248 (asOperator -> AS .)
    CROSSINLINE     reduce using rule 248 (asOperator -> AS .)
    IMPORT          reduce using rule 248 (asOperator -> AS .)
    INIT            reduce using rule 248 (asOperator -> AS .)
    NOINLINE        reduce using rule 248 (asOperator -> AS .)
    OUT             reduce using rule 248 (asOperator -> AS .)
    VARARG          reduce using rule 248 (asOperator -> AS .)
    WHERE           reduce using rule 248 (asOperator -> AS .)
    INT             reduce using rule 248 (asOperator -> AS .)
    FLOAT           reduce using rule 248 (asOperator -> AS .)
    BOOLEAN         reduce using rule 248 (asOperator -> AS .)
    STRING          reduce using rule 248 (asOperator -> AS .)
    ARRAY           reduce using rule 248 (asOperator -> AS .)
    CHAR            reduce using rule 248 (asOperator -> AS .)
    OBJECT          reduce using rule 248 (asOperator -> AS .)
    CONST           reduce using rule 248 (asOperator -> AS .)
    CONSTRUCTOR     reduce using rule 248 (asOperator -> AS .)
    EOF             reduce using rule 248 (asOperator -> AS .)
    FALSE           reduce using rule 248 (asOperator -> AS .)
    FUNCTION        reduce using rule 248 (asOperator -> AS .)
    NULL            reduce using rule 248 (asOperator -> AS .)
    NULLABLE        reduce using rule 248 (asOperator -> AS .)
    NUMBER          reduce using rule 248 (asOperator -> AS .)
    OPERATOR        reduce using rule 248 (asOperator -> AS .)
    SMARTCAST       reduce using rule 248 (asOperator -> AS .)
    THIS            reduce using rule 248 (asOperator -> AS .)
    TRUE            reduce using rule 248 (asOperator -> AS .)
    VAL             reduce using rule 248 (asOperator -> AS .)
    VAR             reduce using rule 248 (asOperator -> AS .)
    DOUBLE          reduce using rule 248 (asOperator -> AS .)
    WHEN            reduce using rule 248 (asOperator -> AS .)
    LONG            reduce using rule 248 (asOperator -> AS .)
    AS              shift and go to state 187

    asOperator                     shift and go to state 303

state 188

    (72) forStatement_MD -> FOR LPAREN . multiVariableDeclaration IN expression RPAREN controlStructureBody
    (73) forStatement_MD -> FOR LPAREN . multiVariableDeclaration IN expression RPAREN
    (74) forStatement_VD -> FOR LPAREN . variableDeclaration IN expression RPAREN controlStructureBody
    (75) forStatement_VD -> FOR LPAREN . variableDeclaration IN expression RPAREN
    (21) multiVariableDeclaration -> . LPAREN mvd RPAREN
    (22) multiVariableDeclaration -> . LPAREN RPAREN
    (19) variableDeclaration -> . simpleIdentifier DOISP type
    (20) variableDeclaration -> . simpleIdentifier
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    LPAREN          shift and go to state 304
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    multiVariableDeclaration       shift and go to state 305
    variableDeclaration            shift and go to state 306
    simpleIdentifier               shift and go to state 307

state 189

    (128) parenthesizedDirectlyAssignableExpression -> LPAREN directlyAssignableExpression . RPAREN

    RPAREN          shift and go to state 308


state 190

    (131) parenthesizedAssignableExpression -> LPAREN assignableExpression . RPAREN

    RPAREN          shift and go to state 309


state 191

    (167) parenthesizedExpression -> LPAREN expression . RPAREN
    (217) jumpExpression -> expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 310
    INCREMENTO      reduce using rule 217 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 217 (jumpExpression -> expression .)
    MENOR           reduce using rule 217 (jumpExpression -> expression .)
    LCCT            reduce using rule 217 (jumpExpression -> expression .)
    LPAREN          reduce using rule 217 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 217 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 217 (jumpExpression -> expression .)
    PONTO           reduce using rule 217 (jumpExpression -> expression .)
    AS              reduce using rule 217 (jumpExpression -> expression .)
    MULT            reduce using rule 217 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 217 (jumpExpression -> expression .)
    MOD             reduce using rule 217 (jumpExpression -> expression .)
    PLUS            reduce using rule 217 (jumpExpression -> expression .)
    MINUS           reduce using rule 217 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 217 (jumpExpression -> expression .)
    ID              reduce using rule 217 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 217 (jumpExpression -> expression .)
    IMPORT          reduce using rule 217 (jumpExpression -> expression .)
    INIT            reduce using rule 217 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 217 (jumpExpression -> expression .)
    OUT             reduce using rule 217 (jumpExpression -> expression .)
    VARARG          reduce using rule 217 (jumpExpression -> expression .)
    WHERE           reduce using rule 217 (jumpExpression -> expression .)
    INT             reduce using rule 217 (jumpExpression -> expression .)
    FLOAT           reduce using rule 217 (jumpExpression -> expression .)
    BOOLEAN         reduce using rule 217 (jumpExpression -> expression .)
    STRING          reduce using rule 217 (jumpExpression -> expression .)
    ARRAY           reduce using rule 217 (jumpExpression -> expression .)
    CHAR            reduce using rule 217 (jumpExpression -> expression .)
    OBJECT          reduce using rule 217 (jumpExpression -> expression .)
    CONST           reduce using rule 217 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 217 (jumpExpression -> expression .)
    EOF             reduce using rule 217 (jumpExpression -> expression .)
    FALSE           reduce using rule 217 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 217 (jumpExpression -> expression .)
    NULL            reduce using rule 217 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 217 (jumpExpression -> expression .)
    NUMBER          reduce using rule 217 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 217 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 217 (jumpExpression -> expression .)
    THIS            reduce using rule 217 (jumpExpression -> expression .)
    TRUE            reduce using rule 217 (jumpExpression -> expression .)
    VAL             reduce using rule 217 (jumpExpression -> expression .)
    VAR             reduce using rule 217 (jumpExpression -> expression .)
    DOUBLE          reduce using rule 217 (jumpExpression -> expression .)
    WHEN            reduce using rule 217 (jumpExpression -> expression .)
    LONG            reduce using rule 217 (jumpExpression -> expression .)
    ELVIS           reduce using rule 217 (jumpExpression -> expression .)
    IN              reduce using rule 217 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 217 (jumpExpression -> expression .)
    IS              reduce using rule 217 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 217 (jumpExpression -> expression .)
    MAIOR           reduce using rule 217 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 217 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 217 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 217 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 217 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 217 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 217 (jumpExpression -> expression .)
    AND             reduce using rule 217 (jumpExpression -> expression .)
    OR              reduce using rule 217 (jumpExpression -> expression .)

  ! RPAREN          [ reduce using rule 217 (jumpExpression -> expression .) ]


state 192

    (76) whileStatement -> WHILE LPAREN . expression RPAREN controlStructureBody
    (77) whileStatement -> WHILE LPAREN . expression RPAREN PV
    (82) expression -> . disjunction
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (33) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 99
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    LPAREN          shift and go to state 152
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57

    expression                     shift and go to state 311
    disjunction                    shift and go to state 85
    conjunction                    shift and go to state 94
    equality                       shift and go to state 97
    comparison                     shift and go to state 106
    infixOperation                 shift and go to state 121
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    simpleIdentifier               shift and go to state 149
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133
    prefixUnaryExpression          shift and go to state 150
    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 151
    unaryPrefix                    shift and go to state 105
    primaryExpression              shift and go to state 95
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122

state 193

    (78) doWhileStatement -> DO controlStructureBody . WHILE LPAREN expression RPAREN

    WHILE           shift and go to state 312


state 194

    (79) doWhileStatement -> DO WHILE . LPAREN expression RPAREN
    (76) whileStatement -> WHILE . LPAREN expression RPAREN controlStructureBody
    (77) whileStatement -> WHILE . LPAREN expression RPAREN PV

    LPAREN          shift and go to state 313


state 195

    (65) controlStructureBody -> block .

    WHILE           reduce using rule 65 (controlStructureBody -> block .)
    FUN             reduce using rule 65 (controlStructureBody -> block .)
    FOR             reduce using rule 65 (controlStructureBody -> block .)
    DO              reduce using rule 65 (controlStructureBody -> block .)
    ID              reduce using rule 65 (controlStructureBody -> block .)
    CROSSINLINE     reduce using rule 65 (controlStructureBody -> block .)
    IMPORT          reduce using rule 65 (controlStructureBody -> block .)
    INIT            reduce using rule 65 (controlStructureBody -> block .)
    NOINLINE        reduce using rule 65 (controlStructureBody -> block .)
    OUT             reduce using rule 65 (controlStructureBody -> block .)
    VARARG          reduce using rule 65 (controlStructureBody -> block .)
    WHERE           reduce using rule 65 (controlStructureBody -> block .)
    INT             reduce using rule 65 (controlStructureBody -> block .)
    FLOAT           reduce using rule 65 (controlStructureBody -> block .)
    BOOLEAN         reduce using rule 65 (controlStructureBody -> block .)
    STRING          reduce using rule 65 (controlStructureBody -> block .)
    ARRAY           reduce using rule 65 (controlStructureBody -> block .)
    CHAR            reduce using rule 65 (controlStructureBody -> block .)
    OBJECT          reduce using rule 65 (controlStructureBody -> block .)
    CONST           reduce using rule 65 (controlStructureBody -> block .)
    CONSTRUCTOR     reduce using rule 65 (controlStructureBody -> block .)
    EOF             reduce using rule 65 (controlStructureBody -> block .)
    FALSE           reduce using rule 65 (controlStructureBody -> block .)
    FUNCTION        reduce using rule 65 (controlStructureBody -> block .)
    NULL            reduce using rule 65 (controlStructureBody -> block .)
    NULLABLE        reduce using rule 65 (controlStructureBody -> block .)
    NUMBER          reduce using rule 65 (controlStructureBody -> block .)
    OPERATOR        reduce using rule 65 (controlStructureBody -> block .)
    SMARTCAST       reduce using rule 65 (controlStructureBody -> block .)
    THIS            reduce using rule 65 (controlStructureBody -> block .)
    TRUE            reduce using rule 65 (controlStructureBody -> block .)
    VAL             reduce using rule 65 (controlStructureBody -> block .)
    VAR             reduce using rule 65 (controlStructureBody -> block .)
    DOUBLE          reduce using rule 65 (controlStructureBody -> block .)
    WHEN            reduce using rule 65 (controlStructureBody -> block .)
    LONG            reduce using rule 65 (controlStructureBody -> block .)
    LPAREN          reduce using rule 65 (controlStructureBody -> block .)
    LITERAL_STRING  reduce using rule 65 (controlStructureBody -> block .)
    COLONCOLON      reduce using rule 65 (controlStructureBody -> block .)
    LCCT            reduce using rule 65 (controlStructureBody -> block .)
    IF              reduce using rule 65 (controlStructureBody -> block .)
    RETURN          reduce using rule 65 (controlStructureBody -> block .)
    RETURN_AT       reduce using rule 65 (controlStructureBody -> block .)
    CONTINUE        reduce using rule 65 (controlStructureBody -> block .)
    CONTINUE_AT     reduce using rule 65 (controlStructureBody -> block .)
    BREAK           reduce using rule 65 (controlStructureBody -> block .)
    BREAK_AT        reduce using rule 65 (controlStructureBody -> block .)
    RCHAVE          reduce using rule 65 (controlStructureBody -> block .)
    INCREMENTO      reduce using rule 65 (controlStructureBody -> block .)
    DECREMENTO      reduce using rule 65 (controlStructureBody -> block .)
    MINUS           reduce using rule 65 (controlStructureBody -> block .)
    PLUS            reduce using rule 65 (controlStructureBody -> block .)
    NOT             reduce using rule 65 (controlStructureBody -> block .)
    SUSPEND         reduce using rule 65 (controlStructureBody -> block .)
    LCHAVE          reduce using rule 65 (controlStructureBody -> block .)
    PV              reduce using rule 65 (controlStructureBody -> block .)
    ELSE            reduce using rule 65 (controlStructureBody -> block .)
    MENOR           reduce using rule 65 (controlStructureBody -> block .)
    PONTO           reduce using rule 65 (controlStructureBody -> block .)
    AS              reduce using rule 65 (controlStructureBody -> block .)
    MAISIGUAL       reduce using rule 65 (controlStructureBody -> block .)
    MENOSIGUAL      reduce using rule 65 (controlStructureBody -> block .)
    MULTIGUAL       reduce using rule 65 (controlStructureBody -> block .)
    DIVIGUAL        reduce using rule 65 (controlStructureBody -> block .)
    MODIGUAL        reduce using rule 65 (controlStructureBody -> block .)
    MULT            reduce using rule 65 (controlStructureBody -> block .)
    DIVIDE          reduce using rule 65 (controlStructureBody -> block .)
    MOD             reduce using rule 65 (controlStructureBody -> block .)
    PONTOPONTO      reduce using rule 65 (controlStructureBody -> block .)
    ELVIS           reduce using rule 65 (controlStructureBody -> block .)
    IN              reduce using rule 65 (controlStructureBody -> block .)
    NOT_IN          reduce using rule 65 (controlStructureBody -> block .)
    IS              reduce using rule 65 (controlStructureBody -> block .)
    NOT_IS          reduce using rule 65 (controlStructureBody -> block .)
    MAIOR           reduce using rule 65 (controlStructureBody -> block .)
    MENORIGUAL      reduce using rule 65 (controlStructureBody -> block .)
    MAIORIGUAL      reduce using rule 65 (controlStructureBody -> block .)
    DIFERENTE       reduce using rule 65 (controlStructureBody -> block .)
    IDENTIDADE      reduce using rule 65 (controlStructureBody -> block .)
    IGUALDADE       reduce using rule 65 (controlStructureBody -> block .)
    SEMIDENTIDADE   reduce using rule 65 (controlStructureBody -> block .)
    AND             reduce using rule 65 (controlStructureBody -> block .)
    OR              reduce using rule 65 (controlStructureBody -> block .)
    COMMA           reduce using rule 65 (controlStructureBody -> block .)
    RPAREN          reduce using rule 65 (controlStructureBody -> block .)
    RCCT            reduce using rule 65 (controlStructureBody -> block .)


state 196

    (66) controlStructureBody -> statement .

    WHILE           reduce using rule 66 (controlStructureBody -> statement .)
    FUN             reduce using rule 66 (controlStructureBody -> statement .)
    FOR             reduce using rule 66 (controlStructureBody -> statement .)
    DO              reduce using rule 66 (controlStructureBody -> statement .)
    ID              reduce using rule 66 (controlStructureBody -> statement .)
    CROSSINLINE     reduce using rule 66 (controlStructureBody -> statement .)
    IMPORT          reduce using rule 66 (controlStructureBody -> statement .)
    INIT            reduce using rule 66 (controlStructureBody -> statement .)
    NOINLINE        reduce using rule 66 (controlStructureBody -> statement .)
    OUT             reduce using rule 66 (controlStructureBody -> statement .)
    VARARG          reduce using rule 66 (controlStructureBody -> statement .)
    WHERE           reduce using rule 66 (controlStructureBody -> statement .)
    INT             reduce using rule 66 (controlStructureBody -> statement .)
    FLOAT           reduce using rule 66 (controlStructureBody -> statement .)
    BOOLEAN         reduce using rule 66 (controlStructureBody -> statement .)
    STRING          reduce using rule 66 (controlStructureBody -> statement .)
    ARRAY           reduce using rule 66 (controlStructureBody -> statement .)
    CHAR            reduce using rule 66 (controlStructureBody -> statement .)
    OBJECT          reduce using rule 66 (controlStructureBody -> statement .)
    CONST           reduce using rule 66 (controlStructureBody -> statement .)
    CONSTRUCTOR     reduce using rule 66 (controlStructureBody -> statement .)
    EOF             reduce using rule 66 (controlStructureBody -> statement .)
    FALSE           reduce using rule 66 (controlStructureBody -> statement .)
    FUNCTION        reduce using rule 66 (controlStructureBody -> statement .)
    NULL            reduce using rule 66 (controlStructureBody -> statement .)
    NULLABLE        reduce using rule 66 (controlStructureBody -> statement .)
    NUMBER          reduce using rule 66 (controlStructureBody -> statement .)
    OPERATOR        reduce using rule 66 (controlStructureBody -> statement .)
    SMARTCAST       reduce using rule 66 (controlStructureBody -> statement .)
    THIS            reduce using rule 66 (controlStructureBody -> statement .)
    TRUE            reduce using rule 66 (controlStructureBody -> statement .)
    VAL             reduce using rule 66 (controlStructureBody -> statement .)
    VAR             reduce using rule 66 (controlStructureBody -> statement .)
    DOUBLE          reduce using rule 66 (controlStructureBody -> statement .)
    WHEN            reduce using rule 66 (controlStructureBody -> statement .)
    LONG            reduce using rule 66 (controlStructureBody -> statement .)
    LPAREN          reduce using rule 66 (controlStructureBody -> statement .)
    LITERAL_STRING  reduce using rule 66 (controlStructureBody -> statement .)
    COLONCOLON      reduce using rule 66 (controlStructureBody -> statement .)
    LCCT            reduce using rule 66 (controlStructureBody -> statement .)
    IF              reduce using rule 66 (controlStructureBody -> statement .)
    RETURN          reduce using rule 66 (controlStructureBody -> statement .)
    RETURN_AT       reduce using rule 66 (controlStructureBody -> statement .)
    CONTINUE        reduce using rule 66 (controlStructureBody -> statement .)
    CONTINUE_AT     reduce using rule 66 (controlStructureBody -> statement .)
    BREAK           reduce using rule 66 (controlStructureBody -> statement .)
    BREAK_AT        reduce using rule 66 (controlStructureBody -> statement .)
    RCHAVE          reduce using rule 66 (controlStructureBody -> statement .)
    INCREMENTO      reduce using rule 66 (controlStructureBody -> statement .)
    DECREMENTO      reduce using rule 66 (controlStructureBody -> statement .)
    MINUS           reduce using rule 66 (controlStructureBody -> statement .)
    PLUS            reduce using rule 66 (controlStructureBody -> statement .)
    NOT             reduce using rule 66 (controlStructureBody -> statement .)
    SUSPEND         reduce using rule 66 (controlStructureBody -> statement .)
    LCHAVE          reduce using rule 66 (controlStructureBody -> statement .)
    PV              reduce using rule 66 (controlStructureBody -> statement .)
    ELSE            reduce using rule 66 (controlStructureBody -> statement .)
    MENOR           reduce using rule 66 (controlStructureBody -> statement .)
    PONTO           reduce using rule 66 (controlStructureBody -> statement .)
    AS              reduce using rule 66 (controlStructureBody -> statement .)
    MAISIGUAL       reduce using rule 66 (controlStructureBody -> statement .)
    MENOSIGUAL      reduce using rule 66 (controlStructureBody -> statement .)
    MULTIGUAL       reduce using rule 66 (controlStructureBody -> statement .)
    DIVIGUAL        reduce using rule 66 (controlStructureBody -> statement .)
    MODIGUAL        reduce using rule 66 (controlStructureBody -> statement .)
    MULT            reduce using rule 66 (controlStructureBody -> statement .)
    DIVIDE          reduce using rule 66 (controlStructureBody -> statement .)
    MOD             reduce using rule 66 (controlStructureBody -> statement .)
    PONTOPONTO      reduce using rule 66 (controlStructureBody -> statement .)
    ELVIS           reduce using rule 66 (controlStructureBody -> statement .)
    IN              reduce using rule 66 (controlStructureBody -> statement .)
    NOT_IN          reduce using rule 66 (controlStructureBody -> statement .)
    IS              reduce using rule 66 (controlStructureBody -> statement .)
    NOT_IS          reduce using rule 66 (controlStructureBody -> statement .)
    MAIOR           reduce using rule 66 (controlStructureBody -> statement .)
    MENORIGUAL      reduce using rule 66 (controlStructureBody -> statement .)
    MAIORIGUAL      reduce using rule 66 (controlStructureBody -> statement .)
    DIFERENTE       reduce using rule 66 (controlStructureBody -> statement .)
    IDENTIDADE      reduce using rule 66 (controlStructureBody -> statement .)
    IGUALDADE       reduce using rule 66 (controlStructureBody -> statement .)
    SEMIDENTIDADE   reduce using rule 66 (controlStructureBody -> statement .)
    AND             reduce using rule 66 (controlStructureBody -> statement .)
    OR              reduce using rule 66 (controlStructureBody -> statement .)
    COMMA           reduce using rule 66 (controlStructureBody -> statement .)
    RPAREN          reduce using rule 66 (controlStructureBody -> statement .)
    RCCT            reduce using rule 66 (controlStructureBody -> statement .)


state 197

    (84) disjunction -> conjunction OR . disjunction
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (82) expression -> . disjunction
    (33) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 99
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    LPAREN          shift and go to state 152
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57

    conjunction                    shift and go to state 94
    disjunction                    shift and go to state 314
    equality                       shift and go to state 97
    comparison                     shift and go to state 106
    infixOperation                 shift and go to state 121
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    simpleIdentifier               shift and go to state 149
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133
    prefixUnaryExpression          shift and go to state 150
    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 151
    unaryPrefix                    shift and go to state 105
    primaryExpression              shift and go to state 95
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    expression                     shift and go to state 212
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122

state 198

    (117) postfixUnaryExpression -> primaryExpression posue .

    INCREMENTO      reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    DECREMENTO      reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    MENOR           reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    LCCT            reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    LPAREN          reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    COLONCOLON      reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    RCHAVE          reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    PONTO           reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    AS              reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    MAISIGUAL       reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    MENOSIGUAL      reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    MULTIGUAL       reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    DIVIGUAL        reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    MODIGUAL        reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    MULT            reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    DIVIDE          reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    MOD             reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    PLUS            reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    MINUS           reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    PONTOPONTO      reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    ID              reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    CROSSINLINE     reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    IMPORT          reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    INIT            reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    NOINLINE        reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    OUT             reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    VARARG          reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    WHERE           reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    INT             reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    FLOAT           reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    BOOLEAN         reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    STRING          reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    ARRAY           reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    CHAR            reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    OBJECT          reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    CONST           reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    CONSTRUCTOR     reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    EOF             reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    FALSE           reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    FUNCTION        reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    NULL            reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    NULLABLE        reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    NUMBER          reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    OPERATOR        reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    SMARTCAST       reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    THIS            reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    TRUE            reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    VAL             reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    VAR             reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    DOUBLE          reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    WHEN            reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    LONG            reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    ELVIS           reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    IN              reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    NOT_IN          reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    IS              reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    NOT_IS          reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    MAIOR           reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    MENORIGUAL      reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    MAIORIGUAL      reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    DIFERENTE       reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    IDENTIDADE      reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    IGUALDADE       reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    SEMIDENTIDADE   reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    AND             reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    OR              reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    FUN             reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    FOR             reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    WHILE           reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    DO              reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    LITERAL_STRING  reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    IF              reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    RETURN          reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    RETURN_AT       reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    CONTINUE        reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    CONTINUE_AT     reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    BREAK           reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    BREAK_AT        reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    NOT             reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    SUSPEND         reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    COMMA           reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    RPAREN          reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    LCHAVE          reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    PV              reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    ELSE            reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)
    RCCT            reduce using rule 117 (postfixUnaryExpression -> primaryExpression posue .)


state 199

    (118) posue -> postfixUnarySuffix .
    (119) posue -> postfixUnarySuffix . posue
    (118) posue -> . postfixUnarySuffix
    (119) posue -> . postfixUnarySuffix posue
    (120) postfixUnarySuffix -> . postfixUnaryOperator
    (121) postfixUnarySuffix -> . typeArguments
    (122) postfixUnarySuffix -> . callSuffix
    (123) postfixUnarySuffix -> . indexingSuffix
    (124) postfixUnarySuffix -> . navigationSuffix
    (255) postfixUnaryOperator -> . INCREMENTO
    (256) postfixUnaryOperator -> . DECREMENTO
    (148) typeArguments -> . MENOR ta MAIOR
    (149) typeArguments -> . MENOR MAIOR
    (141) callSuffix -> . typeArguments valueArguments annotatedLambda
    (142) callSuffix -> . valueArguments annotatedLambda
    (143) callSuffix -> . typeArguments annotatedLambda
    (144) callSuffix -> . annotatedLambda
    (145) callSuffix -> . typeArguments valueArguments
    (146) callSuffix -> . valueArguments
    (135) indexingSuffix -> . LCCT isuf RCCT
    (136) indexingSuffix -> . LCCT RCCT
    (139) navigationSuffix -> . memberAccessOperator simpleIdentifier CLASS
    (140) navigationSuffix -> . memberAccessOperator parenthesizedExpression CLASS
    (152) valueArguments -> . LPAREN RPAREN
    (153) valueArguments -> . LPAREN vas RPAREN
    (147) annotatedLambda -> . lambdaLiteral
    (257) memberAccessOperator -> . safeNav
    (258) memberAccessOperator -> . COLONCOLON
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (259) safeNav -> . PONTO

  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for COLONCOLON resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for PONTO resolved as shift
    AS              reduce using rule 118 (posue -> postfixUnarySuffix .)
    MAISIGUAL       reduce using rule 118 (posue -> postfixUnarySuffix .)
    MENOSIGUAL      reduce using rule 118 (posue -> postfixUnarySuffix .)
    MULTIGUAL       reduce using rule 118 (posue -> postfixUnarySuffix .)
    DIVIGUAL        reduce using rule 118 (posue -> postfixUnarySuffix .)
    MODIGUAL        reduce using rule 118 (posue -> postfixUnarySuffix .)
    MULT            reduce using rule 118 (posue -> postfixUnarySuffix .)
    DIVIDE          reduce using rule 118 (posue -> postfixUnarySuffix .)
    MOD             reduce using rule 118 (posue -> postfixUnarySuffix .)
    PLUS            reduce using rule 118 (posue -> postfixUnarySuffix .)
    MINUS           reduce using rule 118 (posue -> postfixUnarySuffix .)
    PONTOPONTO      reduce using rule 118 (posue -> postfixUnarySuffix .)
    ID              reduce using rule 118 (posue -> postfixUnarySuffix .)
    CROSSINLINE     reduce using rule 118 (posue -> postfixUnarySuffix .)
    IMPORT          reduce using rule 118 (posue -> postfixUnarySuffix .)
    INIT            reduce using rule 118 (posue -> postfixUnarySuffix .)
    NOINLINE        reduce using rule 118 (posue -> postfixUnarySuffix .)
    OUT             reduce using rule 118 (posue -> postfixUnarySuffix .)
    VARARG          reduce using rule 118 (posue -> postfixUnarySuffix .)
    WHERE           reduce using rule 118 (posue -> postfixUnarySuffix .)
    INT             reduce using rule 118 (posue -> postfixUnarySuffix .)
    FLOAT           reduce using rule 118 (posue -> postfixUnarySuffix .)
    BOOLEAN         reduce using rule 118 (posue -> postfixUnarySuffix .)
    STRING          reduce using rule 118 (posue -> postfixUnarySuffix .)
    ARRAY           reduce using rule 118 (posue -> postfixUnarySuffix .)
    CHAR            reduce using rule 118 (posue -> postfixUnarySuffix .)
    OBJECT          reduce using rule 118 (posue -> postfixUnarySuffix .)
    CONST           reduce using rule 118 (posue -> postfixUnarySuffix .)
    CONSTRUCTOR     reduce using rule 118 (posue -> postfixUnarySuffix .)
    EOF             reduce using rule 118 (posue -> postfixUnarySuffix .)
    FALSE           reduce using rule 118 (posue -> postfixUnarySuffix .)
    FUNCTION        reduce using rule 118 (posue -> postfixUnarySuffix .)
    NULL            reduce using rule 118 (posue -> postfixUnarySuffix .)
    NULLABLE        reduce using rule 118 (posue -> postfixUnarySuffix .)
    NUMBER          reduce using rule 118 (posue -> postfixUnarySuffix .)
    OPERATOR        reduce using rule 118 (posue -> postfixUnarySuffix .)
    SMARTCAST       reduce using rule 118 (posue -> postfixUnarySuffix .)
    THIS            reduce using rule 118 (posue -> postfixUnarySuffix .)
    TRUE            reduce using rule 118 (posue -> postfixUnarySuffix .)
    VAL             reduce using rule 118 (posue -> postfixUnarySuffix .)
    VAR             reduce using rule 118 (posue -> postfixUnarySuffix .)
    DOUBLE          reduce using rule 118 (posue -> postfixUnarySuffix .)
    WHEN            reduce using rule 118 (posue -> postfixUnarySuffix .)
    LONG            reduce using rule 118 (posue -> postfixUnarySuffix .)
    ELVIS           reduce using rule 118 (posue -> postfixUnarySuffix .)
    IN              reduce using rule 118 (posue -> postfixUnarySuffix .)
    NOT_IN          reduce using rule 118 (posue -> postfixUnarySuffix .)
    IS              reduce using rule 118 (posue -> postfixUnarySuffix .)
    NOT_IS          reduce using rule 118 (posue -> postfixUnarySuffix .)
    MAIOR           reduce using rule 118 (posue -> postfixUnarySuffix .)
    MENORIGUAL      reduce using rule 118 (posue -> postfixUnarySuffix .)
    MAIORIGUAL      reduce using rule 118 (posue -> postfixUnarySuffix .)
    DIFERENTE       reduce using rule 118 (posue -> postfixUnarySuffix .)
    IDENTIDADE      reduce using rule 118 (posue -> postfixUnarySuffix .)
    IGUALDADE       reduce using rule 118 (posue -> postfixUnarySuffix .)
    SEMIDENTIDADE   reduce using rule 118 (posue -> postfixUnarySuffix .)
    AND             reduce using rule 118 (posue -> postfixUnarySuffix .)
    OR              reduce using rule 118 (posue -> postfixUnarySuffix .)
    FUN             reduce using rule 118 (posue -> postfixUnarySuffix .)
    FOR             reduce using rule 118 (posue -> postfixUnarySuffix .)
    WHILE           reduce using rule 118 (posue -> postfixUnarySuffix .)
    DO              reduce using rule 118 (posue -> postfixUnarySuffix .)
    LITERAL_STRING  reduce using rule 118 (posue -> postfixUnarySuffix .)
    IF              reduce using rule 118 (posue -> postfixUnarySuffix .)
    RETURN          reduce using rule 118 (posue -> postfixUnarySuffix .)
    RETURN_AT       reduce using rule 118 (posue -> postfixUnarySuffix .)
    CONTINUE        reduce using rule 118 (posue -> postfixUnarySuffix .)
    CONTINUE_AT     reduce using rule 118 (posue -> postfixUnarySuffix .)
    BREAK           reduce using rule 118 (posue -> postfixUnarySuffix .)
    BREAK_AT        reduce using rule 118 (posue -> postfixUnarySuffix .)
    NOT             reduce using rule 118 (posue -> postfixUnarySuffix .)
    SUSPEND         reduce using rule 118 (posue -> postfixUnarySuffix .)
    COMMA           reduce using rule 118 (posue -> postfixUnarySuffix .)
    RPAREN          reduce using rule 118 (posue -> postfixUnarySuffix .)
    LCHAVE          reduce using rule 118 (posue -> postfixUnarySuffix .)
    PV              reduce using rule 118 (posue -> postfixUnarySuffix .)
    ELSE            reduce using rule 118 (posue -> postfixUnarySuffix .)
    RCCT            reduce using rule 118 (posue -> postfixUnarySuffix .)
    INCREMENTO      shift and go to state 205
    DECREMENTO      shift and go to state 206
    MENOR           shift and go to state 146
    LCCT            shift and go to state 181
    LPAREN          shift and go to state 209
    COLONCOLON      shift and go to state 184
    RCHAVE          shift and go to state 71
    PONTO           shift and go to state 185

  ! INCREMENTO      [ reduce using rule 118 (posue -> postfixUnarySuffix .) ]
  ! DECREMENTO      [ reduce using rule 118 (posue -> postfixUnarySuffix .) ]
  ! MENOR           [ reduce using rule 118 (posue -> postfixUnarySuffix .) ]
  ! LCCT            [ reduce using rule 118 (posue -> postfixUnarySuffix .) ]
  ! LPAREN          [ reduce using rule 118 (posue -> postfixUnarySuffix .) ]
  ! COLONCOLON      [ reduce using rule 118 (posue -> postfixUnarySuffix .) ]
  ! RCHAVE          [ reduce using rule 118 (posue -> postfixUnarySuffix .) ]
  ! PONTO           [ reduce using rule 118 (posue -> postfixUnarySuffix .) ]

    postfixUnarySuffix             shift and go to state 199
    posue                          shift and go to state 315
    postfixUnaryOperator           shift and go to state 200
    typeArguments                  shift and go to state 201
    callSuffix                     shift and go to state 202
    indexingSuffix                 shift and go to state 203
    navigationSuffix               shift and go to state 204
    valueArguments                 shift and go to state 207
    annotatedLambda                shift and go to state 208
    memberAccessOperator           shift and go to state 182
    lambdaLiteral                  shift and go to state 210
    safeNav                        shift and go to state 183

state 200

    (120) postfixUnarySuffix -> postfixUnaryOperator .

    INCREMENTO      reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    DECREMENTO      reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    MENOR           reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    LCCT            reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    LPAREN          reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    COLONCOLON      reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    RCHAVE          reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    PONTO           reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    AS              reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    MAISIGUAL       reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    MENOSIGUAL      reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    MULTIGUAL       reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    DIVIGUAL        reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    MODIGUAL        reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    MULT            reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    DIVIDE          reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    MOD             reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    PLUS            reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    MINUS           reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    PONTOPONTO      reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    ID              reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    CROSSINLINE     reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    IMPORT          reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    INIT            reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    NOINLINE        reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    OUT             reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    VARARG          reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    WHERE           reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    INT             reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    FLOAT           reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    BOOLEAN         reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    STRING          reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    ARRAY           reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    CHAR            reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    OBJECT          reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    CONST           reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    CONSTRUCTOR     reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    EOF             reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    FALSE           reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    FUNCTION        reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    NULL            reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    NULLABLE        reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    NUMBER          reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    OPERATOR        reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    SMARTCAST       reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    THIS            reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    TRUE            reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    VAL             reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    VAR             reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    DOUBLE          reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    WHEN            reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    LONG            reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    ELVIS           reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    IN              reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    NOT_IN          reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    IS              reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    NOT_IS          reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    MAIOR           reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    MENORIGUAL      reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    MAIORIGUAL      reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    DIFERENTE       reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    IDENTIDADE      reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    IGUALDADE       reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    SEMIDENTIDADE   reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    AND             reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    OR              reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    FUN             reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    FOR             reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    WHILE           reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    DO              reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    LITERAL_STRING  reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    IF              reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    RETURN          reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    RETURN_AT       reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    CONTINUE        reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    CONTINUE_AT     reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    BREAK           reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    BREAK_AT        reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    NOT             reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    SUSPEND         reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    COMMA           reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    RPAREN          reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    LCHAVE          reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    PV              reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    ELSE            reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)
    RCCT            reduce using rule 120 (postfixUnarySuffix -> postfixUnaryOperator .)


state 201

    (121) postfixUnarySuffix -> typeArguments .
    (141) callSuffix -> typeArguments . valueArguments annotatedLambda
    (143) callSuffix -> typeArguments . annotatedLambda
    (145) callSuffix -> typeArguments . valueArguments
    (152) valueArguments -> . LPAREN RPAREN
    (153) valueArguments -> . LPAREN vas RPAREN
    (147) annotatedLambda -> . lambdaLiteral
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
    INCREMENTO      reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    DECREMENTO      reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    MENOR           reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    LCCT            reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    COLONCOLON      reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    PONTO           reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    AS              reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    MAISIGUAL       reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    MENOSIGUAL      reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    MULTIGUAL       reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    DIVIGUAL        reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    MODIGUAL        reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    MULT            reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    DIVIDE          reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    MOD             reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    PLUS            reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    MINUS           reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    PONTOPONTO      reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    ID              reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    CROSSINLINE     reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    IMPORT          reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    INIT            reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    NOINLINE        reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    OUT             reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    VARARG          reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    WHERE           reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    INT             reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    FLOAT           reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    BOOLEAN         reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    STRING          reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    ARRAY           reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    CHAR            reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    OBJECT          reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    CONST           reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    CONSTRUCTOR     reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    EOF             reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    FALSE           reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    FUNCTION        reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    NULL            reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    NULLABLE        reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    NUMBER          reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    OPERATOR        reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    SMARTCAST       reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    THIS            reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    TRUE            reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    VAL             reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    VAR             reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    DOUBLE          reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    WHEN            reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    LONG            reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    ELVIS           reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    IN              reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    NOT_IN          reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    IS              reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    NOT_IS          reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    MAIOR           reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    MENORIGUAL      reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    MAIORIGUAL      reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    DIFERENTE       reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    IDENTIDADE      reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    IGUALDADE       reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    SEMIDENTIDADE   reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    AND             reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    OR              reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    FUN             reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    FOR             reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    WHILE           reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    DO              reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    LITERAL_STRING  reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    IF              reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    RETURN          reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    RETURN_AT       reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    CONTINUE        reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    CONTINUE_AT     reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    BREAK           reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    BREAK_AT        reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    NOT             reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    SUSPEND         reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    COMMA           reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    RPAREN          reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    LCHAVE          reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    PV              reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    ELSE            reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    RCCT            reduce using rule 121 (postfixUnarySuffix -> typeArguments .)
    LPAREN          shift and go to state 209
    RCHAVE          shift and go to state 71

  ! LPAREN          [ reduce using rule 121 (postfixUnarySuffix -> typeArguments .) ]
  ! RCHAVE          [ reduce using rule 121 (postfixUnarySuffix -> typeArguments .) ]

    valueArguments                 shift and go to state 316
    annotatedLambda                shift and go to state 317
    lambdaLiteral                  shift and go to state 210

state 202

    (122) postfixUnarySuffix -> callSuffix .

    INCREMENTO      reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    DECREMENTO      reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    MENOR           reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    LCCT            reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    LPAREN          reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    COLONCOLON      reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    RCHAVE          reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    PONTO           reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    AS              reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    MAISIGUAL       reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    MENOSIGUAL      reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    MULTIGUAL       reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    DIVIGUAL        reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    MODIGUAL        reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    MULT            reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    DIVIDE          reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    MOD             reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    PLUS            reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    MINUS           reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    PONTOPONTO      reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    ID              reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    CROSSINLINE     reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    IMPORT          reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    INIT            reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    NOINLINE        reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    OUT             reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    VARARG          reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    WHERE           reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    INT             reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    FLOAT           reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    BOOLEAN         reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    STRING          reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    ARRAY           reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    CHAR            reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    OBJECT          reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    CONST           reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    CONSTRUCTOR     reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    EOF             reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    FALSE           reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    FUNCTION        reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    NULL            reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    NULLABLE        reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    NUMBER          reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    OPERATOR        reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    SMARTCAST       reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    THIS            reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    TRUE            reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    VAL             reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    VAR             reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    DOUBLE          reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    WHEN            reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    LONG            reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    ELVIS           reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    IN              reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    NOT_IN          reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    IS              reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    NOT_IS          reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    MAIOR           reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    MENORIGUAL      reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    MAIORIGUAL      reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    DIFERENTE       reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    IDENTIDADE      reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    IGUALDADE       reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    SEMIDENTIDADE   reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    AND             reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    OR              reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    FUN             reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    FOR             reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    WHILE           reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    DO              reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    LITERAL_STRING  reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    IF              reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    RETURN          reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    RETURN_AT       reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    CONTINUE        reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    CONTINUE_AT     reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    BREAK           reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    BREAK_AT        reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    NOT             reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    SUSPEND         reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    COMMA           reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    RPAREN          reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    LCHAVE          reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    PV              reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    ELSE            reduce using rule 122 (postfixUnarySuffix -> callSuffix .)
    RCCT            reduce using rule 122 (postfixUnarySuffix -> callSuffix .)


state 203

    (123) postfixUnarySuffix -> indexingSuffix .

    INCREMENTO      reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    DECREMENTO      reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    MENOR           reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    LCCT            reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    LPAREN          reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    COLONCOLON      reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    RCHAVE          reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    PONTO           reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    AS              reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    MAISIGUAL       reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    MENOSIGUAL      reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    MULTIGUAL       reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    DIVIGUAL        reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    MODIGUAL        reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    MULT            reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    DIVIDE          reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    MOD             reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    PLUS            reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    MINUS           reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    PONTOPONTO      reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    ID              reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    CROSSINLINE     reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    IMPORT          reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    INIT            reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    NOINLINE        reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    OUT             reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    VARARG          reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    WHERE           reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    INT             reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    FLOAT           reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    BOOLEAN         reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    STRING          reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    ARRAY           reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    CHAR            reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    OBJECT          reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    CONST           reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    CONSTRUCTOR     reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    EOF             reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    FALSE           reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    FUNCTION        reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    NULL            reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    NULLABLE        reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    NUMBER          reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    OPERATOR        reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    SMARTCAST       reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    THIS            reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    TRUE            reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    VAL             reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    VAR             reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    DOUBLE          reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    WHEN            reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    LONG            reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    ELVIS           reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    IN              reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    NOT_IN          reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    IS              reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    NOT_IS          reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    MAIOR           reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    MENORIGUAL      reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    MAIORIGUAL      reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    DIFERENTE       reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    IDENTIDADE      reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    IGUALDADE       reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    SEMIDENTIDADE   reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    AND             reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    OR              reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    FUN             reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    FOR             reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    WHILE           reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    DO              reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    LITERAL_STRING  reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    IF              reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    RETURN          reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    RETURN_AT       reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    CONTINUE        reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    CONTINUE_AT     reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    BREAK           reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    BREAK_AT        reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    NOT             reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    SUSPEND         reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    COMMA           reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    RPAREN          reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    LCHAVE          reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    PV              reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    ELSE            reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)
    RCCT            reduce using rule 123 (postfixUnarySuffix -> indexingSuffix .)


state 204

    (124) postfixUnarySuffix -> navigationSuffix .

    INCREMENTO      reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    DECREMENTO      reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    MENOR           reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    LCCT            reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    LPAREN          reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    COLONCOLON      reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    RCHAVE          reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    PONTO           reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    AS              reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    MAISIGUAL       reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    MENOSIGUAL      reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    MULTIGUAL       reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    DIVIGUAL        reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    MODIGUAL        reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    MULT            reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    DIVIDE          reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    MOD             reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    PLUS            reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    MINUS           reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    PONTOPONTO      reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    ID              reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    CROSSINLINE     reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    IMPORT          reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    INIT            reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    NOINLINE        reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    OUT             reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    VARARG          reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    WHERE           reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    INT             reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    FLOAT           reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    BOOLEAN         reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    STRING          reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    ARRAY           reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    CHAR            reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    OBJECT          reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    CONST           reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    CONSTRUCTOR     reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    EOF             reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    FALSE           reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    FUNCTION        reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    NULL            reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    NULLABLE        reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    NUMBER          reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    OPERATOR        reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    SMARTCAST       reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    THIS            reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    TRUE            reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    VAL             reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    VAR             reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    DOUBLE          reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    WHEN            reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    LONG            reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    ELVIS           reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    IN              reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    NOT_IN          reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    IS              reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    NOT_IS          reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    MAIOR           reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    MENORIGUAL      reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    MAIORIGUAL      reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    DIFERENTE       reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    IDENTIDADE      reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    IGUALDADE       reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    SEMIDENTIDADE   reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    AND             reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    OR              reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    FUN             reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    FOR             reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    WHILE           reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    DO              reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    LITERAL_STRING  reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    IF              reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    RETURN          reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    RETURN_AT       reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    CONTINUE        reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    CONTINUE_AT     reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    BREAK           reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    BREAK_AT        reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    NOT             reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    SUSPEND         reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    COMMA           reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    RPAREN          reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    LCHAVE          reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    PV              reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    ELSE            reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)
    RCCT            reduce using rule 124 (postfixUnarySuffix -> navigationSuffix .)


state 205

    (255) postfixUnaryOperator -> INCREMENTO .

    INCREMENTO      reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    DECREMENTO      reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    MENOR           reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    LCCT            reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    LPAREN          reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    COLONCOLON      reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    RCHAVE          reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    PONTO           reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    AS              reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    MAISIGUAL       reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    MENOSIGUAL      reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    MULTIGUAL       reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    DIVIGUAL        reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    MODIGUAL        reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    MULT            reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    DIVIDE          reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    MOD             reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    PLUS            reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    MINUS           reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    PONTOPONTO      reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    ID              reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    CROSSINLINE     reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    IMPORT          reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    INIT            reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    NOINLINE        reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    OUT             reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    VARARG          reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    WHERE           reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    INT             reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    FLOAT           reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    BOOLEAN         reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    STRING          reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    ARRAY           reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    CHAR            reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    OBJECT          reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    CONST           reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    CONSTRUCTOR     reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    EOF             reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    FALSE           reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    FUNCTION        reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    NULL            reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    NULLABLE        reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    NUMBER          reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    OPERATOR        reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    SMARTCAST       reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    THIS            reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    TRUE            reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    VAL             reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    VAR             reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    DOUBLE          reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    WHEN            reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    LONG            reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    ELVIS           reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    IN              reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    NOT_IN          reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    IS              reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    NOT_IS          reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    MAIOR           reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    MENORIGUAL      reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    MAIORIGUAL      reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    DIFERENTE       reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    IDENTIDADE      reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    IGUALDADE       reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    SEMIDENTIDADE   reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    AND             reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    OR              reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    FUN             reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    FOR             reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    WHILE           reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    DO              reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    LITERAL_STRING  reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    IF              reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    RETURN          reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    RETURN_AT       reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    CONTINUE        reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    CONTINUE_AT     reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    BREAK           reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    BREAK_AT        reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    NOT             reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    SUSPEND         reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    COMMA           reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    RPAREN          reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    LCHAVE          reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    PV              reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    ELSE            reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)
    RCCT            reduce using rule 255 (postfixUnaryOperator -> INCREMENTO .)


state 206

    (256) postfixUnaryOperator -> DECREMENTO .

    INCREMENTO      reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    DECREMENTO      reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    MENOR           reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    LCCT            reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    LPAREN          reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    COLONCOLON      reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    RCHAVE          reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    PONTO           reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    AS              reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    MAISIGUAL       reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    MENOSIGUAL      reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    MULTIGUAL       reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    DIVIGUAL        reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    MODIGUAL        reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    MULT            reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    DIVIDE          reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    MOD             reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    PLUS            reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    MINUS           reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    PONTOPONTO      reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    ID              reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    CROSSINLINE     reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    IMPORT          reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    INIT            reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    NOINLINE        reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    OUT             reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    VARARG          reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    WHERE           reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    INT             reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    FLOAT           reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    BOOLEAN         reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    STRING          reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    ARRAY           reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    CHAR            reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    OBJECT          reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    CONST           reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    CONSTRUCTOR     reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    EOF             reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    FALSE           reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    FUNCTION        reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    NULL            reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    NULLABLE        reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    NUMBER          reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    OPERATOR        reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    SMARTCAST       reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    THIS            reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    TRUE            reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    VAL             reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    VAR             reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    DOUBLE          reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    WHEN            reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    LONG            reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    ELVIS           reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    IN              reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    NOT_IN          reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    IS              reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    NOT_IS          reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    MAIOR           reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    MENORIGUAL      reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    MAIORIGUAL      reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    DIFERENTE       reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    IDENTIDADE      reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    IGUALDADE       reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    SEMIDENTIDADE   reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    AND             reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    OR              reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    FUN             reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    FOR             reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    WHILE           reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    DO              reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    LITERAL_STRING  reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    IF              reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    RETURN          reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    RETURN_AT       reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    CONTINUE        reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    CONTINUE_AT     reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    BREAK           reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    BREAK_AT        reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    NOT             reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    SUSPEND         reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    COMMA           reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    RPAREN          reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    LCHAVE          reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    PV              reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    ELSE            reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)
    RCCT            reduce using rule 256 (postfixUnaryOperator -> DECREMENTO .)


state 207

    (142) callSuffix -> valueArguments . annotatedLambda
    (146) callSuffix -> valueArguments .
    (147) annotatedLambda -> . lambdaLiteral
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE

  ! shift/reduce conflict for RCHAVE resolved as shift
    INCREMENTO      reduce using rule 146 (callSuffix -> valueArguments .)
    DECREMENTO      reduce using rule 146 (callSuffix -> valueArguments .)
    MENOR           reduce using rule 146 (callSuffix -> valueArguments .)
    LCCT            reduce using rule 146 (callSuffix -> valueArguments .)
    LPAREN          reduce using rule 146 (callSuffix -> valueArguments .)
    COLONCOLON      reduce using rule 146 (callSuffix -> valueArguments .)
    PONTO           reduce using rule 146 (callSuffix -> valueArguments .)
    AS              reduce using rule 146 (callSuffix -> valueArguments .)
    MAISIGUAL       reduce using rule 146 (callSuffix -> valueArguments .)
    MENOSIGUAL      reduce using rule 146 (callSuffix -> valueArguments .)
    MULTIGUAL       reduce using rule 146 (callSuffix -> valueArguments .)
    DIVIGUAL        reduce using rule 146 (callSuffix -> valueArguments .)
    MODIGUAL        reduce using rule 146 (callSuffix -> valueArguments .)
    MULT            reduce using rule 146 (callSuffix -> valueArguments .)
    DIVIDE          reduce using rule 146 (callSuffix -> valueArguments .)
    MOD             reduce using rule 146 (callSuffix -> valueArguments .)
    PLUS            reduce using rule 146 (callSuffix -> valueArguments .)
    MINUS           reduce using rule 146 (callSuffix -> valueArguments .)
    PONTOPONTO      reduce using rule 146 (callSuffix -> valueArguments .)
    ID              reduce using rule 146 (callSuffix -> valueArguments .)
    CROSSINLINE     reduce using rule 146 (callSuffix -> valueArguments .)
    IMPORT          reduce using rule 146 (callSuffix -> valueArguments .)
    INIT            reduce using rule 146 (callSuffix -> valueArguments .)
    NOINLINE        reduce using rule 146 (callSuffix -> valueArguments .)
    OUT             reduce using rule 146 (callSuffix -> valueArguments .)
    VARARG          reduce using rule 146 (callSuffix -> valueArguments .)
    WHERE           reduce using rule 146 (callSuffix -> valueArguments .)
    INT             reduce using rule 146 (callSuffix -> valueArguments .)
    FLOAT           reduce using rule 146 (callSuffix -> valueArguments .)
    BOOLEAN         reduce using rule 146 (callSuffix -> valueArguments .)
    STRING          reduce using rule 146 (callSuffix -> valueArguments .)
    ARRAY           reduce using rule 146 (callSuffix -> valueArguments .)
    CHAR            reduce using rule 146 (callSuffix -> valueArguments .)
    OBJECT          reduce using rule 146 (callSuffix -> valueArguments .)
    CONST           reduce using rule 146 (callSuffix -> valueArguments .)
    CONSTRUCTOR     reduce using rule 146 (callSuffix -> valueArguments .)
    EOF             reduce using rule 146 (callSuffix -> valueArguments .)
    FALSE           reduce using rule 146 (callSuffix -> valueArguments .)
    FUNCTION        reduce using rule 146 (callSuffix -> valueArguments .)
    NULL            reduce using rule 146 (callSuffix -> valueArguments .)
    NULLABLE        reduce using rule 146 (callSuffix -> valueArguments .)
    NUMBER          reduce using rule 146 (callSuffix -> valueArguments .)
    OPERATOR        reduce using rule 146 (callSuffix -> valueArguments .)
    SMARTCAST       reduce using rule 146 (callSuffix -> valueArguments .)
    THIS            reduce using rule 146 (callSuffix -> valueArguments .)
    TRUE            reduce using rule 146 (callSuffix -> valueArguments .)
    VAL             reduce using rule 146 (callSuffix -> valueArguments .)
    VAR             reduce using rule 146 (callSuffix -> valueArguments .)
    DOUBLE          reduce using rule 146 (callSuffix -> valueArguments .)
    WHEN            reduce using rule 146 (callSuffix -> valueArguments .)
    LONG            reduce using rule 146 (callSuffix -> valueArguments .)
    ELVIS           reduce using rule 146 (callSuffix -> valueArguments .)
    IN              reduce using rule 146 (callSuffix -> valueArguments .)
    NOT_IN          reduce using rule 146 (callSuffix -> valueArguments .)
    IS              reduce using rule 146 (callSuffix -> valueArguments .)
    NOT_IS          reduce using rule 146 (callSuffix -> valueArguments .)
    MAIOR           reduce using rule 146 (callSuffix -> valueArguments .)
    MENORIGUAL      reduce using rule 146 (callSuffix -> valueArguments .)
    MAIORIGUAL      reduce using rule 146 (callSuffix -> valueArguments .)
    DIFERENTE       reduce using rule 146 (callSuffix -> valueArguments .)
    IDENTIDADE      reduce using rule 146 (callSuffix -> valueArguments .)
    IGUALDADE       reduce using rule 146 (callSuffix -> valueArguments .)
    SEMIDENTIDADE   reduce using rule 146 (callSuffix -> valueArguments .)
    AND             reduce using rule 146 (callSuffix -> valueArguments .)
    OR              reduce using rule 146 (callSuffix -> valueArguments .)
    FUN             reduce using rule 146 (callSuffix -> valueArguments .)
    FOR             reduce using rule 146 (callSuffix -> valueArguments .)
    WHILE           reduce using rule 146 (callSuffix -> valueArguments .)
    DO              reduce using rule 146 (callSuffix -> valueArguments .)
    LITERAL_STRING  reduce using rule 146 (callSuffix -> valueArguments .)
    IF              reduce using rule 146 (callSuffix -> valueArguments .)
    RETURN          reduce using rule 146 (callSuffix -> valueArguments .)
    RETURN_AT       reduce using rule 146 (callSuffix -> valueArguments .)
    CONTINUE        reduce using rule 146 (callSuffix -> valueArguments .)
    CONTINUE_AT     reduce using rule 146 (callSuffix -> valueArguments .)
    BREAK           reduce using rule 146 (callSuffix -> valueArguments .)
    BREAK_AT        reduce using rule 146 (callSuffix -> valueArguments .)
    NOT             reduce using rule 146 (callSuffix -> valueArguments .)
    SUSPEND         reduce using rule 146 (callSuffix -> valueArguments .)
    COMMA           reduce using rule 146 (callSuffix -> valueArguments .)
    RPAREN          reduce using rule 146 (callSuffix -> valueArguments .)
    LCHAVE          reduce using rule 146 (callSuffix -> valueArguments .)
    PV              reduce using rule 146 (callSuffix -> valueArguments .)
    ELSE            reduce using rule 146 (callSuffix -> valueArguments .)
    RCCT            reduce using rule 146 (callSuffix -> valueArguments .)
    RCHAVE          shift and go to state 71

  ! RCHAVE          [ reduce using rule 146 (callSuffix -> valueArguments .) ]

    annotatedLambda                shift and go to state 318
    lambdaLiteral                  shift and go to state 210

state 208

    (144) callSuffix -> annotatedLambda .

    INCREMENTO      reduce using rule 144 (callSuffix -> annotatedLambda .)
    DECREMENTO      reduce using rule 144 (callSuffix -> annotatedLambda .)
    MENOR           reduce using rule 144 (callSuffix -> annotatedLambda .)
    LCCT            reduce using rule 144 (callSuffix -> annotatedLambda .)
    LPAREN          reduce using rule 144 (callSuffix -> annotatedLambda .)
    COLONCOLON      reduce using rule 144 (callSuffix -> annotatedLambda .)
    RCHAVE          reduce using rule 144 (callSuffix -> annotatedLambda .)
    PONTO           reduce using rule 144 (callSuffix -> annotatedLambda .)
    AS              reduce using rule 144 (callSuffix -> annotatedLambda .)
    MAISIGUAL       reduce using rule 144 (callSuffix -> annotatedLambda .)
    MENOSIGUAL      reduce using rule 144 (callSuffix -> annotatedLambda .)
    MULTIGUAL       reduce using rule 144 (callSuffix -> annotatedLambda .)
    DIVIGUAL        reduce using rule 144 (callSuffix -> annotatedLambda .)
    MODIGUAL        reduce using rule 144 (callSuffix -> annotatedLambda .)
    MULT            reduce using rule 144 (callSuffix -> annotatedLambda .)
    DIVIDE          reduce using rule 144 (callSuffix -> annotatedLambda .)
    MOD             reduce using rule 144 (callSuffix -> annotatedLambda .)
    PLUS            reduce using rule 144 (callSuffix -> annotatedLambda .)
    MINUS           reduce using rule 144 (callSuffix -> annotatedLambda .)
    PONTOPONTO      reduce using rule 144 (callSuffix -> annotatedLambda .)
    ID              reduce using rule 144 (callSuffix -> annotatedLambda .)
    CROSSINLINE     reduce using rule 144 (callSuffix -> annotatedLambda .)
    IMPORT          reduce using rule 144 (callSuffix -> annotatedLambda .)
    INIT            reduce using rule 144 (callSuffix -> annotatedLambda .)
    NOINLINE        reduce using rule 144 (callSuffix -> annotatedLambda .)
    OUT             reduce using rule 144 (callSuffix -> annotatedLambda .)
    VARARG          reduce using rule 144 (callSuffix -> annotatedLambda .)
    WHERE           reduce using rule 144 (callSuffix -> annotatedLambda .)
    INT             reduce using rule 144 (callSuffix -> annotatedLambda .)
    FLOAT           reduce using rule 144 (callSuffix -> annotatedLambda .)
    BOOLEAN         reduce using rule 144 (callSuffix -> annotatedLambda .)
    STRING          reduce using rule 144 (callSuffix -> annotatedLambda .)
    ARRAY           reduce using rule 144 (callSuffix -> annotatedLambda .)
    CHAR            reduce using rule 144 (callSuffix -> annotatedLambda .)
    OBJECT          reduce using rule 144 (callSuffix -> annotatedLambda .)
    CONST           reduce using rule 144 (callSuffix -> annotatedLambda .)
    CONSTRUCTOR     reduce using rule 144 (callSuffix -> annotatedLambda .)
    EOF             reduce using rule 144 (callSuffix -> annotatedLambda .)
    FALSE           reduce using rule 144 (callSuffix -> annotatedLambda .)
    FUNCTION        reduce using rule 144 (callSuffix -> annotatedLambda .)
    NULL            reduce using rule 144 (callSuffix -> annotatedLambda .)
    NULLABLE        reduce using rule 144 (callSuffix -> annotatedLambda .)
    NUMBER          reduce using rule 144 (callSuffix -> annotatedLambda .)
    OPERATOR        reduce using rule 144 (callSuffix -> annotatedLambda .)
    SMARTCAST       reduce using rule 144 (callSuffix -> annotatedLambda .)
    THIS            reduce using rule 144 (callSuffix -> annotatedLambda .)
    TRUE            reduce using rule 144 (callSuffix -> annotatedLambda .)
    VAL             reduce using rule 144 (callSuffix -> annotatedLambda .)
    VAR             reduce using rule 144 (callSuffix -> annotatedLambda .)
    DOUBLE          reduce using rule 144 (callSuffix -> annotatedLambda .)
    WHEN            reduce using rule 144 (callSuffix -> annotatedLambda .)
    LONG            reduce using rule 144 (callSuffix -> annotatedLambda .)
    ELVIS           reduce using rule 144 (callSuffix -> annotatedLambda .)
    IN              reduce using rule 144 (callSuffix -> annotatedLambda .)
    NOT_IN          reduce using rule 144 (callSuffix -> annotatedLambda .)
    IS              reduce using rule 144 (callSuffix -> annotatedLambda .)
    NOT_IS          reduce using rule 144 (callSuffix -> annotatedLambda .)
    MAIOR           reduce using rule 144 (callSuffix -> annotatedLambda .)
    MENORIGUAL      reduce using rule 144 (callSuffix -> annotatedLambda .)
    MAIORIGUAL      reduce using rule 144 (callSuffix -> annotatedLambda .)
    DIFERENTE       reduce using rule 144 (callSuffix -> annotatedLambda .)
    IDENTIDADE      reduce using rule 144 (callSuffix -> annotatedLambda .)
    IGUALDADE       reduce using rule 144 (callSuffix -> annotatedLambda .)
    SEMIDENTIDADE   reduce using rule 144 (callSuffix -> annotatedLambda .)
    AND             reduce using rule 144 (callSuffix -> annotatedLambda .)
    OR              reduce using rule 144 (callSuffix -> annotatedLambda .)
    FUN             reduce using rule 144 (callSuffix -> annotatedLambda .)
    FOR             reduce using rule 144 (callSuffix -> annotatedLambda .)
    WHILE           reduce using rule 144 (callSuffix -> annotatedLambda .)
    DO              reduce using rule 144 (callSuffix -> annotatedLambda .)
    LITERAL_STRING  reduce using rule 144 (callSuffix -> annotatedLambda .)
    IF              reduce using rule 144 (callSuffix -> annotatedLambda .)
    RETURN          reduce using rule 144 (callSuffix -> annotatedLambda .)
    RETURN_AT       reduce using rule 144 (callSuffix -> annotatedLambda .)
    CONTINUE        reduce using rule 144 (callSuffix -> annotatedLambda .)
    CONTINUE_AT     reduce using rule 144 (callSuffix -> annotatedLambda .)
    BREAK           reduce using rule 144 (callSuffix -> annotatedLambda .)
    BREAK_AT        reduce using rule 144 (callSuffix -> annotatedLambda .)
    NOT             reduce using rule 144 (callSuffix -> annotatedLambda .)
    SUSPEND         reduce using rule 144 (callSuffix -> annotatedLambda .)
    COMMA           reduce using rule 144 (callSuffix -> annotatedLambda .)
    RPAREN          reduce using rule 144 (callSuffix -> annotatedLambda .)
    LCHAVE          reduce using rule 144 (callSuffix -> annotatedLambda .)
    PV              reduce using rule 144 (callSuffix -> annotatedLambda .)
    ELSE            reduce using rule 144 (callSuffix -> annotatedLambda .)
    RCCT            reduce using rule 144 (callSuffix -> annotatedLambda .)


state 209

    (152) valueArguments -> LPAREN . RPAREN
    (153) valueArguments -> LPAREN . vas RPAREN
    (154) vas -> . valueArgument
    (155) vas -> . valueArgument COMMA vas
    (156) valueArgument -> . simpleIdentifier IGUALDADE MULT expression
    (157) valueArgument -> . simpleIdentifier IGUALDADE expression
    (158) valueArgument -> . expression
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (82) expression -> . disjunction
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (33) typeModifier -> . SUSPEND

    RPAREN          shift and go to state 319
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    LITERAL_STRING  shift and go to state 99
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    LPAREN          shift and go to state 152
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57

    vas                            shift and go to state 320
    valueArgument                  shift and go to state 321
    simpleIdentifier               shift and go to state 322
    expression                     shift and go to state 323
    disjunction                    shift and go to state 85
    conjunction                    shift and go to state 94
    equality                       shift and go to state 97
    comparison                     shift and go to state 106
    infixOperation                 shift and go to state 121
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133
    prefixUnaryExpression          shift and go to state 150
    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 151
    unaryPrefix                    shift and go to state 105
    primaryExpression              shift and go to state 95
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122

state 210

    (147) annotatedLambda -> lambdaLiteral .

    INCREMENTO      reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    DECREMENTO      reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    MENOR           reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    LCCT            reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    LPAREN          reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    COLONCOLON      reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    RCHAVE          reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    PONTO           reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    AS              reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    MAISIGUAL       reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    MENOSIGUAL      reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    MULTIGUAL       reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    DIVIGUAL        reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    MODIGUAL        reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    MULT            reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    DIVIDE          reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    MOD             reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    PLUS            reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    MINUS           reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    PONTOPONTO      reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    ID              reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    CROSSINLINE     reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    IMPORT          reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    INIT            reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    NOINLINE        reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    OUT             reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    VARARG          reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    WHERE           reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    INT             reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    FLOAT           reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    BOOLEAN         reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    STRING          reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    ARRAY           reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    CHAR            reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    OBJECT          reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    CONST           reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    CONSTRUCTOR     reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    EOF             reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    FALSE           reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    FUNCTION        reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    NULL            reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    NULLABLE        reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    NUMBER          reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    OPERATOR        reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    SMARTCAST       reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    THIS            reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    TRUE            reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    VAL             reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    VAR             reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    DOUBLE          reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    WHEN            reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    LONG            reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    ELVIS           reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    IN              reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    NOT_IN          reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    IS              reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    NOT_IS          reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    MAIOR           reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    MENORIGUAL      reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    MAIORIGUAL      reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    DIFERENTE       reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    IDENTIDADE      reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    IGUALDADE       reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    SEMIDENTIDADE   reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    AND             reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    OR              reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    FUN             reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    FOR             reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    WHILE           reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    DO              reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    LITERAL_STRING  reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    IF              reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    RETURN          reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    RETURN_AT       reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    CONTINUE        reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    CONTINUE_AT     reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    BREAK           reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    BREAK_AT        reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    NOT             reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    SUSPEND         reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    COMMA           reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    RPAREN          reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    LCHAVE          reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    PV              reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    ELSE            reduce using rule 147 (annotatedLambda -> lambdaLiteral .)
    RCCT            reduce using rule 147 (annotatedLambda -> lambdaLiteral .)


state 211

    (109) prefixUnaryExpression -> preue postfixUnaryExpression .
    (110) prefixUnaryExpression -> postfixUnaryExpression .

  ! reduce/reduce conflict for FUN resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for FOR resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for WHILE resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for DO resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for ID resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for INIT resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for OUT resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for VARARG resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for WHERE resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for INT resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for STRING resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for CHAR resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for CONST resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for EOF resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for FALSE resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for NULL resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for THIS resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for TRUE resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for VAL resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for VAR resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for WHEN resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for LONG resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for LCCT resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for IF resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for RETURN resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for BREAK resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for MINUS resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for PLUS resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for NOT resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for PV resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for ELSE resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for MENOR resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for PONTO resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for AS resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for MULT resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for MOD resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for IN resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for IS resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for AND resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for OR resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for COMMA resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
  ! reduce/reduce conflict for RCCT resolved using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    INCREMENTO      reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    DECREMENTO      reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    MENOR           reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    LCCT            reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    LPAREN          reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    COLONCOLON      reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    RCHAVE          reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    PONTO           reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    AS              reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    MAISIGUAL       reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    MENOSIGUAL      reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    MULTIGUAL       reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    DIVIGUAL        reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    MODIGUAL        reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    MULT            reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    DIVIDE          reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    MOD             reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    PLUS            reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    MINUS           reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    PONTOPONTO      reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    ID              reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    CROSSINLINE     reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    IMPORT          reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    INIT            reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    NOINLINE        reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    OUT             reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    VARARG          reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    WHERE           reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    INT             reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    FLOAT           reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    BOOLEAN         reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    STRING          reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    ARRAY           reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    CHAR            reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    OBJECT          reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    CONST           reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    CONSTRUCTOR     reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    EOF             reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    FALSE           reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    FUNCTION        reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    NULL            reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    NULLABLE        reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    NUMBER          reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    OPERATOR        reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    SMARTCAST       reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    THIS            reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    TRUE            reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    VAL             reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    VAR             reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    DOUBLE          reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    WHEN            reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    LONG            reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    ELVIS           reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    IN              reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    NOT_IN          reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    IS              reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    NOT_IS          reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    MAIOR           reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    MENORIGUAL      reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    MAIORIGUAL      reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    DIFERENTE       reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    IDENTIDADE      reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    IGUALDADE       reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    SEMIDENTIDADE   reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    AND             reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    OR              reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    FUN             reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    FOR             reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    WHILE           reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    DO              reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    LITERAL_STRING  reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    IF              reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    RETURN          reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    RETURN_AT       reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    CONTINUE        reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    CONTINUE_AT     reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    BREAK           reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    BREAK_AT        reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    NOT             reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    SUSPEND         reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    COMMA           reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    RPAREN          reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    LCHAVE          reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    PV              reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    ELSE            reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    RCCT            reduce using rule 109 (prefixUnaryExpression -> preue postfixUnaryExpression .)

  ! FUN             [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! FOR             [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! WHILE           [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! DO              [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! ID              [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! CROSSINLINE     [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! IMPORT          [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! INIT            [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! NOINLINE        [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! OUT             [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! VARARG          [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! WHERE           [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! INT             [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! FLOAT           [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! BOOLEAN         [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! STRING          [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! ARRAY           [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! CHAR            [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! OBJECT          [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! CONST           [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! CONSTRUCTOR     [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! EOF             [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! FALSE           [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! FUNCTION        [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! NULL            [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! NULLABLE        [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! NUMBER          [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! OPERATOR        [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! SMARTCAST       [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! THIS            [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! TRUE            [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! VAL             [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! VAR             [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! DOUBLE          [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! WHEN            [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! LONG            [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! LPAREN          [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! LITERAL_STRING  [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! COLONCOLON      [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! LCCT            [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! IF              [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! RETURN          [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! RETURN_AT       [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! CONTINUE        [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! CONTINUE_AT     [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! BREAK           [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! BREAK_AT        [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! RCHAVE          [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! INCREMENTO      [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! DECREMENTO      [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MINUS           [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! PLUS            [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! NOT             [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! SUSPEND         [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! LCHAVE          [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! PV              [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! ELSE            [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MENOR           [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! PONTO           [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! AS              [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MAISIGUAL       [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MENOSIGUAL      [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MULTIGUAL       [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! DIVIGUAL        [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MODIGUAL        [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MULT            [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! DIVIDE          [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MOD             [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! PONTOPONTO      [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! ELVIS           [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! IN              [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! NOT_IN          [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! IS              [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! NOT_IS          [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MAIOR           [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MENORIGUAL      [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MAIORIGUAL      [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! DIFERENTE       [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! IDENTIDADE      [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! IGUALDADE       [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! AND             [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! OR              [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! COMMA           [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! RPAREN          [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! RCCT            [ reduce using rule 110 (prefixUnaryExpression -> postfixUnaryExpression .) ]


state 212

    (217) jumpExpression -> expression .

    FUN             reduce using rule 217 (jumpExpression -> expression .)
    FOR             reduce using rule 217 (jumpExpression -> expression .)
    WHILE           reduce using rule 217 (jumpExpression -> expression .)
    DO              reduce using rule 217 (jumpExpression -> expression .)
    ID              reduce using rule 217 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 217 (jumpExpression -> expression .)
    IMPORT          reduce using rule 217 (jumpExpression -> expression .)
    INIT            reduce using rule 217 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 217 (jumpExpression -> expression .)
    OUT             reduce using rule 217 (jumpExpression -> expression .)
    VARARG          reduce using rule 217 (jumpExpression -> expression .)
    WHERE           reduce using rule 217 (jumpExpression -> expression .)
    INT             reduce using rule 217 (jumpExpression -> expression .)
    FLOAT           reduce using rule 217 (jumpExpression -> expression .)
    BOOLEAN         reduce using rule 217 (jumpExpression -> expression .)
    STRING          reduce using rule 217 (jumpExpression -> expression .)
    ARRAY           reduce using rule 217 (jumpExpression -> expression .)
    CHAR            reduce using rule 217 (jumpExpression -> expression .)
    OBJECT          reduce using rule 217 (jumpExpression -> expression .)
    CONST           reduce using rule 217 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 217 (jumpExpression -> expression .)
    EOF             reduce using rule 217 (jumpExpression -> expression .)
    FALSE           reduce using rule 217 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 217 (jumpExpression -> expression .)
    NULL            reduce using rule 217 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 217 (jumpExpression -> expression .)
    NUMBER          reduce using rule 217 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 217 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 217 (jumpExpression -> expression .)
    THIS            reduce using rule 217 (jumpExpression -> expression .)
    TRUE            reduce using rule 217 (jumpExpression -> expression .)
    VAL             reduce using rule 217 (jumpExpression -> expression .)
    VAR             reduce using rule 217 (jumpExpression -> expression .)
    DOUBLE          reduce using rule 217 (jumpExpression -> expression .)
    WHEN            reduce using rule 217 (jumpExpression -> expression .)
    LONG            reduce using rule 217 (jumpExpression -> expression .)
    LPAREN          reduce using rule 217 (jumpExpression -> expression .)
    LITERAL_STRING  reduce using rule 217 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 217 (jumpExpression -> expression .)
    LCCT            reduce using rule 217 (jumpExpression -> expression .)
    IF              reduce using rule 217 (jumpExpression -> expression .)
    RETURN          reduce using rule 217 (jumpExpression -> expression .)
    RETURN_AT       reduce using rule 217 (jumpExpression -> expression .)
    CONTINUE        reduce using rule 217 (jumpExpression -> expression .)
    CONTINUE_AT     reduce using rule 217 (jumpExpression -> expression .)
    BREAK           reduce using rule 217 (jumpExpression -> expression .)
    BREAK_AT        reduce using rule 217 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 217 (jumpExpression -> expression .)
    INCREMENTO      reduce using rule 217 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 217 (jumpExpression -> expression .)
    MINUS           reduce using rule 217 (jumpExpression -> expression .)
    PLUS            reduce using rule 217 (jumpExpression -> expression .)
    NOT             reduce using rule 217 (jumpExpression -> expression .)
    SUSPEND         reduce using rule 217 (jumpExpression -> expression .)
    LCHAVE          reduce using rule 217 (jumpExpression -> expression .)
    PV              reduce using rule 217 (jumpExpression -> expression .)
    ELSE            reduce using rule 217 (jumpExpression -> expression .)
    MENOR           reduce using rule 217 (jumpExpression -> expression .)
    PONTO           reduce using rule 217 (jumpExpression -> expression .)
    AS              reduce using rule 217 (jumpExpression -> expression .)
    MAISIGUAL       reduce using rule 217 (jumpExpression -> expression .)
    MENOSIGUAL      reduce using rule 217 (jumpExpression -> expression .)
    MULTIGUAL       reduce using rule 217 (jumpExpression -> expression .)
    DIVIGUAL        reduce using rule 217 (jumpExpression -> expression .)
    MODIGUAL        reduce using rule 217 (jumpExpression -> expression .)
    MULT            reduce using rule 217 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 217 (jumpExpression -> expression .)
    MOD             reduce using rule 217 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 217 (jumpExpression -> expression .)
    ELVIS           reduce using rule 217 (jumpExpression -> expression .)
    IN              reduce using rule 217 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 217 (jumpExpression -> expression .)
    IS              reduce using rule 217 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 217 (jumpExpression -> expression .)
    MAIOR           reduce using rule 217 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 217 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 217 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 217 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 217 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 217 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 217 (jumpExpression -> expression .)
    AND             reduce using rule 217 (jumpExpression -> expression .)
    OR              reduce using rule 217 (jumpExpression -> expression .)
    COMMA           reduce using rule 217 (jumpExpression -> expression .)
    RPAREN          reduce using rule 217 (jumpExpression -> expression .)
    RCCT            reduce using rule 217 (jumpExpression -> expression .)


state 213

    (86) conjunction -> equality AND . conjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (82) expression -> . disjunction
    (33) typeModifier -> . SUSPEND
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction

    LITERAL_STRING  shift and go to state 99
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    LPAREN          shift and go to state 152
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57

    equality                       shift and go to state 97
    conjunction                    shift and go to state 324
    comparison                     shift and go to state 106
    infixOperation                 shift and go to state 121
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    simpleIdentifier               shift and go to state 149
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133
    prefixUnaryExpression          shift and go to state 150
    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 151
    unaryPrefix                    shift and go to state 105
    primaryExpression              shift and go to state 95
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    expression                     shift and go to state 212
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122
    disjunction                    shift and go to state 85

state 214

    (112) preue -> unaryPrefix preue .

    LITERAL_STRING  reduce using rule 112 (preue -> unaryPrefix preue .)
    LPAREN          reduce using rule 112 (preue -> unaryPrefix preue .)
    ID              reduce using rule 112 (preue -> unaryPrefix preue .)
    CROSSINLINE     reduce using rule 112 (preue -> unaryPrefix preue .)
    IMPORT          reduce using rule 112 (preue -> unaryPrefix preue .)
    INIT            reduce using rule 112 (preue -> unaryPrefix preue .)
    NOINLINE        reduce using rule 112 (preue -> unaryPrefix preue .)
    OUT             reduce using rule 112 (preue -> unaryPrefix preue .)
    VARARG          reduce using rule 112 (preue -> unaryPrefix preue .)
    WHERE           reduce using rule 112 (preue -> unaryPrefix preue .)
    INT             reduce using rule 112 (preue -> unaryPrefix preue .)
    FLOAT           reduce using rule 112 (preue -> unaryPrefix preue .)
    BOOLEAN         reduce using rule 112 (preue -> unaryPrefix preue .)
    STRING          reduce using rule 112 (preue -> unaryPrefix preue .)
    ARRAY           reduce using rule 112 (preue -> unaryPrefix preue .)
    CHAR            reduce using rule 112 (preue -> unaryPrefix preue .)
    OBJECT          reduce using rule 112 (preue -> unaryPrefix preue .)
    CONST           reduce using rule 112 (preue -> unaryPrefix preue .)
    CONSTRUCTOR     reduce using rule 112 (preue -> unaryPrefix preue .)
    EOF             reduce using rule 112 (preue -> unaryPrefix preue .)
    FALSE           reduce using rule 112 (preue -> unaryPrefix preue .)
    FUNCTION        reduce using rule 112 (preue -> unaryPrefix preue .)
    NULL            reduce using rule 112 (preue -> unaryPrefix preue .)
    NULLABLE        reduce using rule 112 (preue -> unaryPrefix preue .)
    NUMBER          reduce using rule 112 (preue -> unaryPrefix preue .)
    OPERATOR        reduce using rule 112 (preue -> unaryPrefix preue .)
    SMARTCAST       reduce using rule 112 (preue -> unaryPrefix preue .)
    THIS            reduce using rule 112 (preue -> unaryPrefix preue .)
    TRUE            reduce using rule 112 (preue -> unaryPrefix preue .)
    VAL             reduce using rule 112 (preue -> unaryPrefix preue .)
    VAR             reduce using rule 112 (preue -> unaryPrefix preue .)
    DOUBLE          reduce using rule 112 (preue -> unaryPrefix preue .)
    WHEN            reduce using rule 112 (preue -> unaryPrefix preue .)
    LONG            reduce using rule 112 (preue -> unaryPrefix preue .)
    COLONCOLON      reduce using rule 112 (preue -> unaryPrefix preue .)
    LCCT            reduce using rule 112 (preue -> unaryPrefix preue .)
    IF              reduce using rule 112 (preue -> unaryPrefix preue .)
    RETURN          reduce using rule 112 (preue -> unaryPrefix preue .)
    RETURN_AT       reduce using rule 112 (preue -> unaryPrefix preue .)
    CONTINUE        reduce using rule 112 (preue -> unaryPrefix preue .)
    CONTINUE_AT     reduce using rule 112 (preue -> unaryPrefix preue .)
    BREAK           reduce using rule 112 (preue -> unaryPrefix preue .)
    BREAK_AT        reduce using rule 112 (preue -> unaryPrefix preue .)
    RCHAVE          reduce using rule 112 (preue -> unaryPrefix preue .)
    FUN             reduce using rule 112 (preue -> unaryPrefix preue .)
    SUSPEND         reduce using rule 112 (preue -> unaryPrefix preue .)
    INCREMENTO      reduce using rule 112 (preue -> unaryPrefix preue .)
    DECREMENTO      reduce using rule 112 (preue -> unaryPrefix preue .)
    MINUS           reduce using rule 112 (preue -> unaryPrefix preue .)
    PLUS            reduce using rule 112 (preue -> unaryPrefix preue .)
    NOT             reduce using rule 112 (preue -> unaryPrefix preue .)


state 215

    (115) label -> simpleIdentifier .

    INCREMENTO      reduce using rule 115 (label -> simpleIdentifier .)
    DECREMENTO      reduce using rule 115 (label -> simpleIdentifier .)
    MINUS           reduce using rule 115 (label -> simpleIdentifier .)
    PLUS            reduce using rule 115 (label -> simpleIdentifier .)
    NOT             reduce using rule 115 (label -> simpleIdentifier .)
    ID              reduce using rule 115 (label -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 115 (label -> simpleIdentifier .)
    IMPORT          reduce using rule 115 (label -> simpleIdentifier .)
    INIT            reduce using rule 115 (label -> simpleIdentifier .)
    NOINLINE        reduce using rule 115 (label -> simpleIdentifier .)
    OUT             reduce using rule 115 (label -> simpleIdentifier .)
    VARARG          reduce using rule 115 (label -> simpleIdentifier .)
    WHERE           reduce using rule 115 (label -> simpleIdentifier .)
    INT             reduce using rule 115 (label -> simpleIdentifier .)
    FLOAT           reduce using rule 115 (label -> simpleIdentifier .)
    BOOLEAN         reduce using rule 115 (label -> simpleIdentifier .)
    STRING          reduce using rule 115 (label -> simpleIdentifier .)
    ARRAY           reduce using rule 115 (label -> simpleIdentifier .)
    CHAR            reduce using rule 115 (label -> simpleIdentifier .)
    OBJECT          reduce using rule 115 (label -> simpleIdentifier .)
    CONST           reduce using rule 115 (label -> simpleIdentifier .)
    CONSTRUCTOR     reduce using rule 115 (label -> simpleIdentifier .)
    EOF             reduce using rule 115 (label -> simpleIdentifier .)
    FALSE           reduce using rule 115 (label -> simpleIdentifier .)
    FUNCTION        reduce using rule 115 (label -> simpleIdentifier .)
    NULL            reduce using rule 115 (label -> simpleIdentifier .)
    NULLABLE        reduce using rule 115 (label -> simpleIdentifier .)
    NUMBER          reduce using rule 115 (label -> simpleIdentifier .)
    OPERATOR        reduce using rule 115 (label -> simpleIdentifier .)
    SMARTCAST       reduce using rule 115 (label -> simpleIdentifier .)
    THIS            reduce using rule 115 (label -> simpleIdentifier .)
    TRUE            reduce using rule 115 (label -> simpleIdentifier .)
    VAL             reduce using rule 115 (label -> simpleIdentifier .)
    VAR             reduce using rule 115 (label -> simpleIdentifier .)
    DOUBLE          reduce using rule 115 (label -> simpleIdentifier .)
    WHEN            reduce using rule 115 (label -> simpleIdentifier .)
    LONG            reduce using rule 115 (label -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 115 (label -> simpleIdentifier .)
    LPAREN          reduce using rule 115 (label -> simpleIdentifier .)
    COLONCOLON      reduce using rule 115 (label -> simpleIdentifier .)
    LCCT            reduce using rule 115 (label -> simpleIdentifier .)
    IF              reduce using rule 115 (label -> simpleIdentifier .)
    RETURN          reduce using rule 115 (label -> simpleIdentifier .)
    RETURN_AT       reduce using rule 115 (label -> simpleIdentifier .)
    CONTINUE        reduce using rule 115 (label -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 115 (label -> simpleIdentifier .)
    BREAK           reduce using rule 115 (label -> simpleIdentifier .)
    BREAK_AT        reduce using rule 115 (label -> simpleIdentifier .)
    RCHAVE          reduce using rule 115 (label -> simpleIdentifier .)
    FUN             reduce using rule 115 (label -> simpleIdentifier .)
    SUSPEND         reduce using rule 115 (label -> simpleIdentifier .)


state 216

    (88) equality -> comparison equalityOperator . equality
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (82) expression -> . disjunction
    (33) typeModifier -> . SUSPEND
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction

    LITERAL_STRING  shift and go to state 99
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    LPAREN          shift and go to state 152
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57

    comparison                     shift and go to state 106
    equality                       shift and go to state 325
    infixOperation                 shift and go to state 121
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    simpleIdentifier               shift and go to state 149
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133
    prefixUnaryExpression          shift and go to state 150
    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 151
    unaryPrefix                    shift and go to state 105
    primaryExpression              shift and go to state 95
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    expression                     shift and go to state 212
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122
    disjunction                    shift and go to state 85
    conjunction                    shift and go to state 94

state 217

    (231) equalityOperator -> DIFERENTE .

    LITERAL_STRING  reduce using rule 231 (equalityOperator -> DIFERENTE .)
    INCREMENTO      reduce using rule 231 (equalityOperator -> DIFERENTE .)
    DECREMENTO      reduce using rule 231 (equalityOperator -> DIFERENTE .)
    MINUS           reduce using rule 231 (equalityOperator -> DIFERENTE .)
    PLUS            reduce using rule 231 (equalityOperator -> DIFERENTE .)
    NOT             reduce using rule 231 (equalityOperator -> DIFERENTE .)
    LPAREN          reduce using rule 231 (equalityOperator -> DIFERENTE .)
    ID              reduce using rule 231 (equalityOperator -> DIFERENTE .)
    CROSSINLINE     reduce using rule 231 (equalityOperator -> DIFERENTE .)
    IMPORT          reduce using rule 231 (equalityOperator -> DIFERENTE .)
    INIT            reduce using rule 231 (equalityOperator -> DIFERENTE .)
    NOINLINE        reduce using rule 231 (equalityOperator -> DIFERENTE .)
    OUT             reduce using rule 231 (equalityOperator -> DIFERENTE .)
    VARARG          reduce using rule 231 (equalityOperator -> DIFERENTE .)
    WHERE           reduce using rule 231 (equalityOperator -> DIFERENTE .)
    INT             reduce using rule 231 (equalityOperator -> DIFERENTE .)
    FLOAT           reduce using rule 231 (equalityOperator -> DIFERENTE .)
    BOOLEAN         reduce using rule 231 (equalityOperator -> DIFERENTE .)
    STRING          reduce using rule 231 (equalityOperator -> DIFERENTE .)
    ARRAY           reduce using rule 231 (equalityOperator -> DIFERENTE .)
    CHAR            reduce using rule 231 (equalityOperator -> DIFERENTE .)
    OBJECT          reduce using rule 231 (equalityOperator -> DIFERENTE .)
    CONST           reduce using rule 231 (equalityOperator -> DIFERENTE .)
    CONSTRUCTOR     reduce using rule 231 (equalityOperator -> DIFERENTE .)
    EOF             reduce using rule 231 (equalityOperator -> DIFERENTE .)
    FALSE           reduce using rule 231 (equalityOperator -> DIFERENTE .)
    FUNCTION        reduce using rule 231 (equalityOperator -> DIFERENTE .)
    NULL            reduce using rule 231 (equalityOperator -> DIFERENTE .)
    NULLABLE        reduce using rule 231 (equalityOperator -> DIFERENTE .)
    NUMBER          reduce using rule 231 (equalityOperator -> DIFERENTE .)
    OPERATOR        reduce using rule 231 (equalityOperator -> DIFERENTE .)
    SMARTCAST       reduce using rule 231 (equalityOperator -> DIFERENTE .)
    THIS            reduce using rule 231 (equalityOperator -> DIFERENTE .)
    TRUE            reduce using rule 231 (equalityOperator -> DIFERENTE .)
    VAL             reduce using rule 231 (equalityOperator -> DIFERENTE .)
    VAR             reduce using rule 231 (equalityOperator -> DIFERENTE .)
    DOUBLE          reduce using rule 231 (equalityOperator -> DIFERENTE .)
    WHEN            reduce using rule 231 (equalityOperator -> DIFERENTE .)
    LONG            reduce using rule 231 (equalityOperator -> DIFERENTE .)
    COLONCOLON      reduce using rule 231 (equalityOperator -> DIFERENTE .)
    LCCT            reduce using rule 231 (equalityOperator -> DIFERENTE .)
    IF              reduce using rule 231 (equalityOperator -> DIFERENTE .)
    RETURN          reduce using rule 231 (equalityOperator -> DIFERENTE .)
    RETURN_AT       reduce using rule 231 (equalityOperator -> DIFERENTE .)
    CONTINUE        reduce using rule 231 (equalityOperator -> DIFERENTE .)
    CONTINUE_AT     reduce using rule 231 (equalityOperator -> DIFERENTE .)
    BREAK           reduce using rule 231 (equalityOperator -> DIFERENTE .)
    BREAK_AT        reduce using rule 231 (equalityOperator -> DIFERENTE .)
    RCHAVE          reduce using rule 231 (equalityOperator -> DIFERENTE .)
    FUN             reduce using rule 231 (equalityOperator -> DIFERENTE .)
    SUSPEND         reduce using rule 231 (equalityOperator -> DIFERENTE .)


state 218

    (232) equalityOperator -> IDENTIDADE .

    LITERAL_STRING  reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    INCREMENTO      reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    DECREMENTO      reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    MINUS           reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    PLUS            reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    NOT             reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    LPAREN          reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    ID              reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    CROSSINLINE     reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    IMPORT          reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    INIT            reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    NOINLINE        reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    OUT             reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    VARARG          reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    WHERE           reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    INT             reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    FLOAT           reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    BOOLEAN         reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    STRING          reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    ARRAY           reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    CHAR            reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    OBJECT          reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    CONST           reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    CONSTRUCTOR     reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    EOF             reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    FALSE           reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    FUNCTION        reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    NULL            reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    NULLABLE        reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    NUMBER          reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    OPERATOR        reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    SMARTCAST       reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    THIS            reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    TRUE            reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    VAL             reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    VAR             reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    DOUBLE          reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    WHEN            reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    LONG            reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    COLONCOLON      reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    LCCT            reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    IF              reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    RETURN          reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    RETURN_AT       reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    CONTINUE        reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    CONTINUE_AT     reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    BREAK           reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    BREAK_AT        reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    RCHAVE          reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    FUN             reduce using rule 232 (equalityOperator -> IDENTIDADE .)
    SUSPEND         reduce using rule 232 (equalityOperator -> IDENTIDADE .)


state 219

    (233) equalityOperator -> IGUALDADE .

    LITERAL_STRING  reduce using rule 233 (equalityOperator -> IGUALDADE .)
    INCREMENTO      reduce using rule 233 (equalityOperator -> IGUALDADE .)
    DECREMENTO      reduce using rule 233 (equalityOperator -> IGUALDADE .)
    MINUS           reduce using rule 233 (equalityOperator -> IGUALDADE .)
    PLUS            reduce using rule 233 (equalityOperator -> IGUALDADE .)
    NOT             reduce using rule 233 (equalityOperator -> IGUALDADE .)
    LPAREN          reduce using rule 233 (equalityOperator -> IGUALDADE .)
    ID              reduce using rule 233 (equalityOperator -> IGUALDADE .)
    CROSSINLINE     reduce using rule 233 (equalityOperator -> IGUALDADE .)
    IMPORT          reduce using rule 233 (equalityOperator -> IGUALDADE .)
    INIT            reduce using rule 233 (equalityOperator -> IGUALDADE .)
    NOINLINE        reduce using rule 233 (equalityOperator -> IGUALDADE .)
    OUT             reduce using rule 233 (equalityOperator -> IGUALDADE .)
    VARARG          reduce using rule 233 (equalityOperator -> IGUALDADE .)
    WHERE           reduce using rule 233 (equalityOperator -> IGUALDADE .)
    INT             reduce using rule 233 (equalityOperator -> IGUALDADE .)
    FLOAT           reduce using rule 233 (equalityOperator -> IGUALDADE .)
    BOOLEAN         reduce using rule 233 (equalityOperator -> IGUALDADE .)
    STRING          reduce using rule 233 (equalityOperator -> IGUALDADE .)
    ARRAY           reduce using rule 233 (equalityOperator -> IGUALDADE .)
    CHAR            reduce using rule 233 (equalityOperator -> IGUALDADE .)
    OBJECT          reduce using rule 233 (equalityOperator -> IGUALDADE .)
    CONST           reduce using rule 233 (equalityOperator -> IGUALDADE .)
    CONSTRUCTOR     reduce using rule 233 (equalityOperator -> IGUALDADE .)
    EOF             reduce using rule 233 (equalityOperator -> IGUALDADE .)
    FALSE           reduce using rule 233 (equalityOperator -> IGUALDADE .)
    FUNCTION        reduce using rule 233 (equalityOperator -> IGUALDADE .)
    NULL            reduce using rule 233 (equalityOperator -> IGUALDADE .)
    NULLABLE        reduce using rule 233 (equalityOperator -> IGUALDADE .)
    NUMBER          reduce using rule 233 (equalityOperator -> IGUALDADE .)
    OPERATOR        reduce using rule 233 (equalityOperator -> IGUALDADE .)
    SMARTCAST       reduce using rule 233 (equalityOperator -> IGUALDADE .)
    THIS            reduce using rule 233 (equalityOperator -> IGUALDADE .)
    TRUE            reduce using rule 233 (equalityOperator -> IGUALDADE .)
    VAL             reduce using rule 233 (equalityOperator -> IGUALDADE .)
    VAR             reduce using rule 233 (equalityOperator -> IGUALDADE .)
    DOUBLE          reduce using rule 233 (equalityOperator -> IGUALDADE .)
    WHEN            reduce using rule 233 (equalityOperator -> IGUALDADE .)
    LONG            reduce using rule 233 (equalityOperator -> IGUALDADE .)
    COLONCOLON      reduce using rule 233 (equalityOperator -> IGUALDADE .)
    LCCT            reduce using rule 233 (equalityOperator -> IGUALDADE .)
    IF              reduce using rule 233 (equalityOperator -> IGUALDADE .)
    RETURN          reduce using rule 233 (equalityOperator -> IGUALDADE .)
    RETURN_AT       reduce using rule 233 (equalityOperator -> IGUALDADE .)
    CONTINUE        reduce using rule 233 (equalityOperator -> IGUALDADE .)
    CONTINUE_AT     reduce using rule 233 (equalityOperator -> IGUALDADE .)
    BREAK           reduce using rule 233 (equalityOperator -> IGUALDADE .)
    BREAK_AT        reduce using rule 233 (equalityOperator -> IGUALDADE .)
    RCHAVE          reduce using rule 233 (equalityOperator -> IGUALDADE .)
    FUN             reduce using rule 233 (equalityOperator -> IGUALDADE .)
    SUSPEND         reduce using rule 233 (equalityOperator -> IGUALDADE .)


state 220

    (234) equalityOperator -> SEMIDENTIDADE .

    LITERAL_STRING  reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    INCREMENTO      reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    DECREMENTO      reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    MINUS           reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    PLUS            reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    NOT             reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    LPAREN          reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    ID              reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    CROSSINLINE     reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    IMPORT          reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    INIT            reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    NOINLINE        reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    OUT             reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    VARARG          reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    WHERE           reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    INT             reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    FLOAT           reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    BOOLEAN         reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    STRING          reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    ARRAY           reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    CHAR            reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    OBJECT          reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    CONST           reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    CONSTRUCTOR     reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    EOF             reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    FALSE           reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    FUNCTION        reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    NULL            reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    NULLABLE        reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    NUMBER          reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    OPERATOR        reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    SMARTCAST       reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    THIS            reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    TRUE            reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    VAL             reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    VAR             reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    DOUBLE          reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    WHEN            reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    LONG            reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    COLONCOLON      reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    LCCT            reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    IF              reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    RETURN          reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    RETURN_AT       reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    CONTINUE        reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    CONTINUE_AT     reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    BREAK           reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    BREAK_AT        reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    RCHAVE          reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    FUN             reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)
    SUSPEND         reduce using rule 234 (equalityOperator -> SEMIDENTIDADE .)


state 221

    (222) callableReference -> receiverType COLONCOLON . simpleIdentifier
    (224) callableReference -> receiverType COLONCOLON . CLASS
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    CLASS           shift and go to state 327
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    simpleIdentifier               shift and go to state 326

state 222

    (223) callableReference -> COLONCOLON simpleIdentifier .

    INCREMENTO      reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    DECREMENTO      reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    MENOR           reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    LCCT            reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    LPAREN          reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    COLONCOLON      reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    RCHAVE          reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    PONTO           reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    AS              reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    MAISIGUAL       reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    MENOSIGUAL      reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    MULTIGUAL       reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    DIVIGUAL        reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    MODIGUAL        reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    MULT            reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    DIVIDE          reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    MOD             reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    PLUS            reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    MINUS           reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    PONTOPONTO      reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    ID              reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    CROSSINLINE     reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    IMPORT          reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    INIT            reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    NOINLINE        reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    OUT             reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    VARARG          reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    WHERE           reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    INT             reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    FLOAT           reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    BOOLEAN         reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    STRING          reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    ARRAY           reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    CHAR            reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    OBJECT          reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    CONST           reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    CONSTRUCTOR     reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    EOF             reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    FALSE           reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    FUNCTION        reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    NULL            reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    NULLABLE        reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    NUMBER          reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    OPERATOR        reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    SMARTCAST       reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    THIS            reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    TRUE            reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    VAL             reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    VAR             reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    DOUBLE          reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    WHEN            reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    LONG            reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    ELVIS           reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    IN              reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    NOT_IN          reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    IS              reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    NOT_IS          reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    MAIOR           reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    MENORIGUAL      reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    MAIORIGUAL      reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    DIFERENTE       reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    IDENTIDADE      reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    IGUALDADE       reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    AND             reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    OR              reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    FUN             reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    FOR             reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    WHILE           reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    DO              reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    LITERAL_STRING  reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    IF              reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    RETURN          reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    RETURN_AT       reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    CONTINUE        reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    CONTINUE_AT     reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    BREAK           reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    BREAK_AT        reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    NOT             reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    SUSPEND         reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    COMMA           reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    RPAREN          reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    LCHAVE          reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    PV              reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    ELSE            reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)
    RCCT            reduce using rule 223 (callableReference -> COLONCOLON simpleIdentifier .)


state 223

    (225) callableReference -> COLONCOLON CLASS .

    INCREMENTO      reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    DECREMENTO      reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    MENOR           reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    LCCT            reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    LPAREN          reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    COLONCOLON      reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    RCHAVE          reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    PONTO           reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    AS              reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    MAISIGUAL       reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    MENOSIGUAL      reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    MULTIGUAL       reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    DIVIGUAL        reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    MODIGUAL        reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    MULT            reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    DIVIDE          reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    MOD             reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    PLUS            reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    MINUS           reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    PONTOPONTO      reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    ID              reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    CROSSINLINE     reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    IMPORT          reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    INIT            reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    NOINLINE        reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    OUT             reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    VARARG          reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    WHERE           reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    INT             reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    FLOAT           reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    BOOLEAN         reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    STRING          reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    ARRAY           reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    CHAR            reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    OBJECT          reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    CONST           reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    CONSTRUCTOR     reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    EOF             reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    FALSE           reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    FUNCTION        reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    NULL            reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    NULLABLE        reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    NUMBER          reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    OPERATOR        reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    SMARTCAST       reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    THIS            reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    TRUE            reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    VAL             reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    VAR             reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    DOUBLE          reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    WHEN            reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    LONG            reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    ELVIS           reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    IN              reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    NOT_IN          reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    IS              reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    NOT_IS          reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    MAIOR           reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    MENORIGUAL      reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    MAIORIGUAL      reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    DIFERENTE       reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    IDENTIDADE      reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    IGUALDADE       reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    SEMIDENTIDADE   reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    AND             reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    OR              reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    FUN             reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    FOR             reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    WHILE           reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    DO              reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    LITERAL_STRING  reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    IF              reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    RETURN          reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    RETURN_AT       reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    CONTINUE        reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    CONTINUE_AT     reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    BREAK           reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    BREAK_AT        reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    NOT             reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    SUSPEND         reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    COMMA           reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    RPAREN          reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    LCHAVE          reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    PV              reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    ELSE            reduce using rule 225 (callableReference -> COLONCOLON CLASS .)
    RCCT            reduce using rule 225 (callableReference -> COLONCOLON CLASS .)


state 224

    (168) collectionLiteral -> LCCT cl . RCCT

    RCCT            shift and go to state 328


state 225

    (169) collectionLiteral -> LCCT RCCT .

    INCREMENTO      reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    DECREMENTO      reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    MENOR           reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    LCCT            reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    LPAREN          reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    COLONCOLON      reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    RCHAVE          reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    PONTO           reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    AS              reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    MAISIGUAL       reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    MENOSIGUAL      reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    MULTIGUAL       reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    DIVIGUAL        reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    MODIGUAL        reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    MULT            reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    DIVIDE          reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    MOD             reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    PLUS            reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    MINUS           reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    PONTOPONTO      reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    ID              reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    CROSSINLINE     reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    IMPORT          reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    INIT            reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    NOINLINE        reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    OUT             reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    VARARG          reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    WHERE           reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    INT             reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    FLOAT           reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    BOOLEAN         reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    STRING          reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    ARRAY           reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    CHAR            reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    OBJECT          reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    CONST           reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    CONSTRUCTOR     reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    EOF             reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    FALSE           reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    FUNCTION        reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    NULL            reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    NULLABLE        reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    NUMBER          reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    OPERATOR        reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    SMARTCAST       reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    THIS            reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    TRUE            reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    VAL             reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    VAR             reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    DOUBLE          reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    WHEN            reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    LONG            reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    ELVIS           reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    IN              reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    NOT_IN          reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    IS              reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    NOT_IS          reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    MAIOR           reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    MENORIGUAL      reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    MAIORIGUAL      reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    DIFERENTE       reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    IDENTIDADE      reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    IGUALDADE       reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    SEMIDENTIDADE   reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    AND             reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    OR              reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    FUN             reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    FOR             reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    WHILE           reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    DO              reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    LITERAL_STRING  reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    IF              reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    RETURN          reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    RETURN_AT       reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    CONTINUE        reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    CONTINUE_AT     reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    BREAK           reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    BREAK_AT        reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    NOT             reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    SUSPEND         reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    COMMA           reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    RPAREN          reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    LCHAVE          reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    PV              reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    ELSE            reduce using rule 169 (collectionLiteral -> LCCT RCCT .)
    RCCT            reduce using rule 169 (collectionLiteral -> LCCT RCCT .)


state 226

    (170) cl -> expression .
    (171) cl -> expression . COMMA cl
    (217) jumpExpression -> expression .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RCCT resolved using rule 170 (cl -> expression .)
    RCCT            reduce using rule 170 (cl -> expression .)
    COMMA           shift and go to state 329
    AS              reduce using rule 217 (jumpExpression -> expression .)
    MULT            reduce using rule 217 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 217 (jumpExpression -> expression .)
    MOD             reduce using rule 217 (jumpExpression -> expression .)
    PLUS            reduce using rule 217 (jumpExpression -> expression .)
    MINUS           reduce using rule 217 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 217 (jumpExpression -> expression .)
    ID              reduce using rule 217 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 217 (jumpExpression -> expression .)
    IMPORT          reduce using rule 217 (jumpExpression -> expression .)
    INIT            reduce using rule 217 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 217 (jumpExpression -> expression .)
    OUT             reduce using rule 217 (jumpExpression -> expression .)
    VARARG          reduce using rule 217 (jumpExpression -> expression .)
    WHERE           reduce using rule 217 (jumpExpression -> expression .)
    INT             reduce using rule 217 (jumpExpression -> expression .)
    FLOAT           reduce using rule 217 (jumpExpression -> expression .)
    BOOLEAN         reduce using rule 217 (jumpExpression -> expression .)
    STRING          reduce using rule 217 (jumpExpression -> expression .)
    ARRAY           reduce using rule 217 (jumpExpression -> expression .)
    CHAR            reduce using rule 217 (jumpExpression -> expression .)
    OBJECT          reduce using rule 217 (jumpExpression -> expression .)
    CONST           reduce using rule 217 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 217 (jumpExpression -> expression .)
    EOF             reduce using rule 217 (jumpExpression -> expression .)
    FALSE           reduce using rule 217 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 217 (jumpExpression -> expression .)
    NULL            reduce using rule 217 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 217 (jumpExpression -> expression .)
    NUMBER          reduce using rule 217 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 217 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 217 (jumpExpression -> expression .)
    THIS            reduce using rule 217 (jumpExpression -> expression .)
    TRUE            reduce using rule 217 (jumpExpression -> expression .)
    VAL             reduce using rule 217 (jumpExpression -> expression .)
    VAR             reduce using rule 217 (jumpExpression -> expression .)
    DOUBLE          reduce using rule 217 (jumpExpression -> expression .)
    WHEN            reduce using rule 217 (jumpExpression -> expression .)
    LONG            reduce using rule 217 (jumpExpression -> expression .)
    ELVIS           reduce using rule 217 (jumpExpression -> expression .)
    IN              reduce using rule 217 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 217 (jumpExpression -> expression .)
    IS              reduce using rule 217 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 217 (jumpExpression -> expression .)
    MENOR           reduce using rule 217 (jumpExpression -> expression .)
    MAIOR           reduce using rule 217 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 217 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 217 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 217 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 217 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 217 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 217 (jumpExpression -> expression .)
    AND             reduce using rule 217 (jumpExpression -> expression .)
    OR              reduce using rule 217 (jumpExpression -> expression .)
    INCREMENTO      reduce using rule 217 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 217 (jumpExpression -> expression .)
    LCCT            reduce using rule 217 (jumpExpression -> expression .)
    LPAREN          reduce using rule 217 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 217 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 217 (jumpExpression -> expression .)
    PONTO           reduce using rule 217 (jumpExpression -> expression .)

  ! COMMA           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RCCT            [ reduce using rule 217 (jumpExpression -> expression .) ]


state 227

    (210) ifExpression -> IF LPAREN . expression RPAREN if1 if2 ELSE if1 if2
    (82) expression -> . disjunction
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (33) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 99
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    LPAREN          shift and go to state 152
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57

    expression                     shift and go to state 330
    disjunction                    shift and go to state 85
    conjunction                    shift and go to state 94
    equality                       shift and go to state 97
    comparison                     shift and go to state 106
    infixOperation                 shift and go to state 121
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    simpleIdentifier               shift and go to state 149
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133
    prefixUnaryExpression          shift and go to state 150
    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 151
    unaryPrefix                    shift and go to state 105
    primaryExpression              shift and go to state 95
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122

state 228

    (215) jumpExpression -> RETURN expression .
    (217) jumpExpression -> expression .

  ! reduce/reduce conflict for FUN resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for FOR resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for DO resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for ID resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for INIT resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for OUT resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for VARARG resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for WHERE resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for INT resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for STRING resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for CHAR resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for CONST resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for EOF resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for FALSE resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for NULL resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for THIS resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for TRUE resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for VAL resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for VAR resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for WHEN resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for LONG resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for LCCT resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for IF resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for RETURN resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for BREAK resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for NOT resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for PV resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MENOR resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for PONTO resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for AS resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MULT resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MOD resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for IN resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for IS resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for AND resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for OR resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 215 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for RCCT resolved using rule 215 (jumpExpression -> RETURN expression .)
    INCREMENTO      reduce using rule 215 (jumpExpression -> RETURN expression .)
    DECREMENTO      reduce using rule 215 (jumpExpression -> RETURN expression .)
    MENOR           reduce using rule 215 (jumpExpression -> RETURN expression .)
    LCCT            reduce using rule 215 (jumpExpression -> RETURN expression .)
    LPAREN          reduce using rule 215 (jumpExpression -> RETURN expression .)
    COLONCOLON      reduce using rule 215 (jumpExpression -> RETURN expression .)
    RCHAVE          reduce using rule 215 (jumpExpression -> RETURN expression .)
    PONTO           reduce using rule 215 (jumpExpression -> RETURN expression .)
    AS              reduce using rule 215 (jumpExpression -> RETURN expression .)
    MAISIGUAL       reduce using rule 215 (jumpExpression -> RETURN expression .)
    MENOSIGUAL      reduce using rule 215 (jumpExpression -> RETURN expression .)
    MULTIGUAL       reduce using rule 215 (jumpExpression -> RETURN expression .)
    DIVIGUAL        reduce using rule 215 (jumpExpression -> RETURN expression .)
    MODIGUAL        reduce using rule 215 (jumpExpression -> RETURN expression .)
    MULT            reduce using rule 215 (jumpExpression -> RETURN expression .)
    DIVIDE          reduce using rule 215 (jumpExpression -> RETURN expression .)
    MOD             reduce using rule 215 (jumpExpression -> RETURN expression .)
    PLUS            reduce using rule 215 (jumpExpression -> RETURN expression .)
    MINUS           reduce using rule 215 (jumpExpression -> RETURN expression .)
    PONTOPONTO      reduce using rule 215 (jumpExpression -> RETURN expression .)
    ID              reduce using rule 215 (jumpExpression -> RETURN expression .)
    CROSSINLINE     reduce using rule 215 (jumpExpression -> RETURN expression .)
    IMPORT          reduce using rule 215 (jumpExpression -> RETURN expression .)
    INIT            reduce using rule 215 (jumpExpression -> RETURN expression .)
    NOINLINE        reduce using rule 215 (jumpExpression -> RETURN expression .)
    OUT             reduce using rule 215 (jumpExpression -> RETURN expression .)
    VARARG          reduce using rule 215 (jumpExpression -> RETURN expression .)
    WHERE           reduce using rule 215 (jumpExpression -> RETURN expression .)
    INT             reduce using rule 215 (jumpExpression -> RETURN expression .)
    FLOAT           reduce using rule 215 (jumpExpression -> RETURN expression .)
    BOOLEAN         reduce using rule 215 (jumpExpression -> RETURN expression .)
    STRING          reduce using rule 215 (jumpExpression -> RETURN expression .)
    ARRAY           reduce using rule 215 (jumpExpression -> RETURN expression .)
    CHAR            reduce using rule 215 (jumpExpression -> RETURN expression .)
    OBJECT          reduce using rule 215 (jumpExpression -> RETURN expression .)
    CONST           reduce using rule 215 (jumpExpression -> RETURN expression .)
    CONSTRUCTOR     reduce using rule 215 (jumpExpression -> RETURN expression .)
    EOF             reduce using rule 215 (jumpExpression -> RETURN expression .)
    FALSE           reduce using rule 215 (jumpExpression -> RETURN expression .)
    FUNCTION        reduce using rule 215 (jumpExpression -> RETURN expression .)
    NULL            reduce using rule 215 (jumpExpression -> RETURN expression .)
    NULLABLE        reduce using rule 215 (jumpExpression -> RETURN expression .)
    NUMBER          reduce using rule 215 (jumpExpression -> RETURN expression .)
    OPERATOR        reduce using rule 215 (jumpExpression -> RETURN expression .)
    SMARTCAST       reduce using rule 215 (jumpExpression -> RETURN expression .)
    THIS            reduce using rule 215 (jumpExpression -> RETURN expression .)
    TRUE            reduce using rule 215 (jumpExpression -> RETURN expression .)
    VAL             reduce using rule 215 (jumpExpression -> RETURN expression .)
    VAR             reduce using rule 215 (jumpExpression -> RETURN expression .)
    DOUBLE          reduce using rule 215 (jumpExpression -> RETURN expression .)
    WHEN            reduce using rule 215 (jumpExpression -> RETURN expression .)
    LONG            reduce using rule 215 (jumpExpression -> RETURN expression .)
    ELVIS           reduce using rule 215 (jumpExpression -> RETURN expression .)
    IN              reduce using rule 215 (jumpExpression -> RETURN expression .)
    NOT_IN          reduce using rule 215 (jumpExpression -> RETURN expression .)
    IS              reduce using rule 215 (jumpExpression -> RETURN expression .)
    NOT_IS          reduce using rule 215 (jumpExpression -> RETURN expression .)
    MAIOR           reduce using rule 215 (jumpExpression -> RETURN expression .)
    MENORIGUAL      reduce using rule 215 (jumpExpression -> RETURN expression .)
    MAIORIGUAL      reduce using rule 215 (jumpExpression -> RETURN expression .)
    DIFERENTE       reduce using rule 215 (jumpExpression -> RETURN expression .)
    IDENTIDADE      reduce using rule 215 (jumpExpression -> RETURN expression .)
    IGUALDADE       reduce using rule 215 (jumpExpression -> RETURN expression .)
    SEMIDENTIDADE   reduce using rule 215 (jumpExpression -> RETURN expression .)
    AND             reduce using rule 215 (jumpExpression -> RETURN expression .)
    OR              reduce using rule 215 (jumpExpression -> RETURN expression .)
    FUN             reduce using rule 215 (jumpExpression -> RETURN expression .)
    FOR             reduce using rule 215 (jumpExpression -> RETURN expression .)
    WHILE           reduce using rule 215 (jumpExpression -> RETURN expression .)
    DO              reduce using rule 215 (jumpExpression -> RETURN expression .)
    LITERAL_STRING  reduce using rule 215 (jumpExpression -> RETURN expression .)
    IF              reduce using rule 215 (jumpExpression -> RETURN expression .)
    RETURN          reduce using rule 215 (jumpExpression -> RETURN expression .)
    RETURN_AT       reduce using rule 215 (jumpExpression -> RETURN expression .)
    CONTINUE        reduce using rule 215 (jumpExpression -> RETURN expression .)
    CONTINUE_AT     reduce using rule 215 (jumpExpression -> RETURN expression .)
    BREAK           reduce using rule 215 (jumpExpression -> RETURN expression .)
    BREAK_AT        reduce using rule 215 (jumpExpression -> RETURN expression .)
    NOT             reduce using rule 215 (jumpExpression -> RETURN expression .)
    SUSPEND         reduce using rule 215 (jumpExpression -> RETURN expression .)
    COMMA           reduce using rule 215 (jumpExpression -> RETURN expression .)
    RPAREN          reduce using rule 215 (jumpExpression -> RETURN expression .)
    LCHAVE          reduce using rule 215 (jumpExpression -> RETURN expression .)
    PV              reduce using rule 215 (jumpExpression -> RETURN expression .)
    ELSE            reduce using rule 215 (jumpExpression -> RETURN expression .)
    RCCT            reduce using rule 215 (jumpExpression -> RETURN expression .)

  ! FUN             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! FOR             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! WHILE           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DO              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! ID              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CROSSINLINE     [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IMPORT          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! INIT            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NOINLINE        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! OUT             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! VARARG          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! WHERE           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! INT             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! FLOAT           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! BOOLEAN         [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! STRING          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! ARRAY           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CHAR            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! OBJECT          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CONST           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CONSTRUCTOR     [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! EOF             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! FALSE           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! FUNCTION        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NULL            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NULLABLE        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NUMBER          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! OPERATOR        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! SMARTCAST       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! THIS            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! TRUE            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! VAL             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! VAR             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DOUBLE          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! WHEN            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! LONG            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! LPAREN          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! LITERAL_STRING  [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! COLONCOLON      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! LCCT            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IF              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RETURN          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RETURN_AT       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CONTINUE        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CONTINUE_AT     [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! BREAK           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! BREAK_AT        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RCHAVE          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! INCREMENTO      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DECREMENTO      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MINUS           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! PLUS            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NOT             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! SUSPEND         [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! LCHAVE          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! PV              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! ELSE            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MENOR           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! PONTO           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! AS              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MAISIGUAL       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MENOSIGUAL      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MULTIGUAL       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DIVIGUAL        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MODIGUAL        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MULT            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DIVIDE          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MOD             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! PONTOPONTO      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! ELVIS           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IN              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NOT_IN          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IS              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NOT_IS          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MAIOR           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MENORIGUAL      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MAIORIGUAL      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DIFERENTE       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IDENTIDADE      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IGUALDADE       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! AND             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! OR              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! COMMA           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RCCT            [ reduce using rule 217 (jumpExpression -> expression .) ]


state 229

    (216) jumpExpression -> RETURN_AT expression .
    (217) jumpExpression -> expression .

  ! reduce/reduce conflict for FUN resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for FOR resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for DO resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for ID resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for INIT resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for OUT resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for VARARG resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for WHERE resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for INT resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for STRING resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for CHAR resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for CONST resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for EOF resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for FALSE resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for NULL resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for THIS resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for TRUE resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for VAL resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for VAR resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for WHEN resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for LONG resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for LCCT resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for IF resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for RETURN resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for BREAK resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for NOT resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for PV resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MENOR resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for PONTO resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for AS resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MULT resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MOD resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for IN resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for IS resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for AND resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for OR resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for RCCT resolved using rule 216 (jumpExpression -> RETURN_AT expression .)
    INCREMENTO      reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    DECREMENTO      reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    MENOR           reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    LCCT            reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    LPAREN          reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    COLONCOLON      reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    RCHAVE          reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    PONTO           reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    AS              reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    MAISIGUAL       reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    MENOSIGUAL      reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    MULTIGUAL       reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    DIVIGUAL        reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    MODIGUAL        reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    MULT            reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    DIVIDE          reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    MOD             reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    PLUS            reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    MINUS           reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    PONTOPONTO      reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    ID              reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    CROSSINLINE     reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    IMPORT          reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    INIT            reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    NOINLINE        reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    OUT             reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    VARARG          reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    WHERE           reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    INT             reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    FLOAT           reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    BOOLEAN         reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    STRING          reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    ARRAY           reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    CHAR            reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    OBJECT          reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    CONST           reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    CONSTRUCTOR     reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    EOF             reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    FALSE           reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    FUNCTION        reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    NULL            reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    NULLABLE        reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    NUMBER          reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    OPERATOR        reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    SMARTCAST       reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    THIS            reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    TRUE            reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    VAL             reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    VAR             reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    DOUBLE          reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    WHEN            reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    LONG            reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    ELVIS           reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    IN              reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    NOT_IN          reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    IS              reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    NOT_IS          reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    MAIOR           reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    MENORIGUAL      reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    MAIORIGUAL      reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    DIFERENTE       reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    IDENTIDADE      reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    IGUALDADE       reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    SEMIDENTIDADE   reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    AND             reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    OR              reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    FUN             reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    FOR             reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    WHILE           reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    DO              reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    LITERAL_STRING  reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    IF              reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    RETURN          reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    RETURN_AT       reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    CONTINUE        reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    CONTINUE_AT     reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    BREAK           reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    BREAK_AT        reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    NOT             reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    SUSPEND         reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    COMMA           reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    RPAREN          reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    LCHAVE          reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    PV              reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    ELSE            reduce using rule 216 (jumpExpression -> RETURN_AT expression .)
    RCCT            reduce using rule 216 (jumpExpression -> RETURN_AT expression .)

  ! FUN             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! FOR             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! WHILE           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DO              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! ID              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CROSSINLINE     [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IMPORT          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! INIT            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NOINLINE        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! OUT             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! VARARG          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! WHERE           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! INT             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! FLOAT           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! BOOLEAN         [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! STRING          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! ARRAY           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CHAR            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! OBJECT          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CONST           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CONSTRUCTOR     [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! EOF             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! FALSE           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! FUNCTION        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NULL            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NULLABLE        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NUMBER          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! OPERATOR        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! SMARTCAST       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! THIS            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! TRUE            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! VAL             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! VAR             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DOUBLE          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! WHEN            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! LONG            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! LPAREN          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! LITERAL_STRING  [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! COLONCOLON      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! LCCT            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IF              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RETURN          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RETURN_AT       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CONTINUE        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CONTINUE_AT     [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! BREAK           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! BREAK_AT        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RCHAVE          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! INCREMENTO      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DECREMENTO      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MINUS           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! PLUS            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NOT             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! SUSPEND         [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! LCHAVE          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! PV              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! ELSE            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MENOR           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! PONTO           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! AS              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MAISIGUAL       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MENOSIGUAL      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MULTIGUAL       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DIVIGUAL        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MODIGUAL        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MULT            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DIVIDE          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MOD             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! PONTOPONTO      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! ELVIS           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IN              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NOT_IN          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IS              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NOT_IS          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MAIOR           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MENORIGUAL      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MAIORIGUAL      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DIFERENTE       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IDENTIDADE      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IGUALDADE       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! AND             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! OR              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! COMMA           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RCCT            [ reduce using rule 217 (jumpExpression -> expression .) ]


state 230

    (90) comparison -> infixOperation comparisonOperator . infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (82) expression -> . disjunction
    (33) typeModifier -> . SUSPEND
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation

    LITERAL_STRING  shift and go to state 99
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    LPAREN          shift and go to state 152
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57

    infixOperation                 shift and go to state 331
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    simpleIdentifier               shift and go to state 149
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133
    prefixUnaryExpression          shift and go to state 150
    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 151
    unaryPrefix                    shift and go to state 105
    primaryExpression              shift and go to state 95
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    expression                     shift and go to state 212
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122
    disjunction                    shift and go to state 85
    conjunction                    shift and go to state 94
    equality                       shift and go to state 97
    comparison                     shift and go to state 106

state 231

    (235) comparisonOperator -> MENOR .

    LITERAL_STRING  reduce using rule 235 (comparisonOperator -> MENOR .)
    INCREMENTO      reduce using rule 235 (comparisonOperator -> MENOR .)
    DECREMENTO      reduce using rule 235 (comparisonOperator -> MENOR .)
    MINUS           reduce using rule 235 (comparisonOperator -> MENOR .)
    PLUS            reduce using rule 235 (comparisonOperator -> MENOR .)
    NOT             reduce using rule 235 (comparisonOperator -> MENOR .)
    LPAREN          reduce using rule 235 (comparisonOperator -> MENOR .)
    ID              reduce using rule 235 (comparisonOperator -> MENOR .)
    CROSSINLINE     reduce using rule 235 (comparisonOperator -> MENOR .)
    IMPORT          reduce using rule 235 (comparisonOperator -> MENOR .)
    INIT            reduce using rule 235 (comparisonOperator -> MENOR .)
    NOINLINE        reduce using rule 235 (comparisonOperator -> MENOR .)
    OUT             reduce using rule 235 (comparisonOperator -> MENOR .)
    VARARG          reduce using rule 235 (comparisonOperator -> MENOR .)
    WHERE           reduce using rule 235 (comparisonOperator -> MENOR .)
    INT             reduce using rule 235 (comparisonOperator -> MENOR .)
    FLOAT           reduce using rule 235 (comparisonOperator -> MENOR .)
    BOOLEAN         reduce using rule 235 (comparisonOperator -> MENOR .)
    STRING          reduce using rule 235 (comparisonOperator -> MENOR .)
    ARRAY           reduce using rule 235 (comparisonOperator -> MENOR .)
    CHAR            reduce using rule 235 (comparisonOperator -> MENOR .)
    OBJECT          reduce using rule 235 (comparisonOperator -> MENOR .)
    CONST           reduce using rule 235 (comparisonOperator -> MENOR .)
    CONSTRUCTOR     reduce using rule 235 (comparisonOperator -> MENOR .)
    EOF             reduce using rule 235 (comparisonOperator -> MENOR .)
    FALSE           reduce using rule 235 (comparisonOperator -> MENOR .)
    FUNCTION        reduce using rule 235 (comparisonOperator -> MENOR .)
    NULL            reduce using rule 235 (comparisonOperator -> MENOR .)
    NULLABLE        reduce using rule 235 (comparisonOperator -> MENOR .)
    NUMBER          reduce using rule 235 (comparisonOperator -> MENOR .)
    OPERATOR        reduce using rule 235 (comparisonOperator -> MENOR .)
    SMARTCAST       reduce using rule 235 (comparisonOperator -> MENOR .)
    THIS            reduce using rule 235 (comparisonOperator -> MENOR .)
    TRUE            reduce using rule 235 (comparisonOperator -> MENOR .)
    VAL             reduce using rule 235 (comparisonOperator -> MENOR .)
    VAR             reduce using rule 235 (comparisonOperator -> MENOR .)
    DOUBLE          reduce using rule 235 (comparisonOperator -> MENOR .)
    WHEN            reduce using rule 235 (comparisonOperator -> MENOR .)
    LONG            reduce using rule 235 (comparisonOperator -> MENOR .)
    COLONCOLON      reduce using rule 235 (comparisonOperator -> MENOR .)
    LCCT            reduce using rule 235 (comparisonOperator -> MENOR .)
    IF              reduce using rule 235 (comparisonOperator -> MENOR .)
    RETURN          reduce using rule 235 (comparisonOperator -> MENOR .)
    RETURN_AT       reduce using rule 235 (comparisonOperator -> MENOR .)
    CONTINUE        reduce using rule 235 (comparisonOperator -> MENOR .)
    CONTINUE_AT     reduce using rule 235 (comparisonOperator -> MENOR .)
    BREAK           reduce using rule 235 (comparisonOperator -> MENOR .)
    BREAK_AT        reduce using rule 235 (comparisonOperator -> MENOR .)
    RCHAVE          reduce using rule 235 (comparisonOperator -> MENOR .)
    FUN             reduce using rule 235 (comparisonOperator -> MENOR .)
    SUSPEND         reduce using rule 235 (comparisonOperator -> MENOR .)


state 232

    (236) comparisonOperator -> MAIOR .

    LITERAL_STRING  reduce using rule 236 (comparisonOperator -> MAIOR .)
    INCREMENTO      reduce using rule 236 (comparisonOperator -> MAIOR .)
    DECREMENTO      reduce using rule 236 (comparisonOperator -> MAIOR .)
    MINUS           reduce using rule 236 (comparisonOperator -> MAIOR .)
    PLUS            reduce using rule 236 (comparisonOperator -> MAIOR .)
    NOT             reduce using rule 236 (comparisonOperator -> MAIOR .)
    LPAREN          reduce using rule 236 (comparisonOperator -> MAIOR .)
    ID              reduce using rule 236 (comparisonOperator -> MAIOR .)
    CROSSINLINE     reduce using rule 236 (comparisonOperator -> MAIOR .)
    IMPORT          reduce using rule 236 (comparisonOperator -> MAIOR .)
    INIT            reduce using rule 236 (comparisonOperator -> MAIOR .)
    NOINLINE        reduce using rule 236 (comparisonOperator -> MAIOR .)
    OUT             reduce using rule 236 (comparisonOperator -> MAIOR .)
    VARARG          reduce using rule 236 (comparisonOperator -> MAIOR .)
    WHERE           reduce using rule 236 (comparisonOperator -> MAIOR .)
    INT             reduce using rule 236 (comparisonOperator -> MAIOR .)
    FLOAT           reduce using rule 236 (comparisonOperator -> MAIOR .)
    BOOLEAN         reduce using rule 236 (comparisonOperator -> MAIOR .)
    STRING          reduce using rule 236 (comparisonOperator -> MAIOR .)
    ARRAY           reduce using rule 236 (comparisonOperator -> MAIOR .)
    CHAR            reduce using rule 236 (comparisonOperator -> MAIOR .)
    OBJECT          reduce using rule 236 (comparisonOperator -> MAIOR .)
    CONST           reduce using rule 236 (comparisonOperator -> MAIOR .)
    CONSTRUCTOR     reduce using rule 236 (comparisonOperator -> MAIOR .)
    EOF             reduce using rule 236 (comparisonOperator -> MAIOR .)
    FALSE           reduce using rule 236 (comparisonOperator -> MAIOR .)
    FUNCTION        reduce using rule 236 (comparisonOperator -> MAIOR .)
    NULL            reduce using rule 236 (comparisonOperator -> MAIOR .)
    NULLABLE        reduce using rule 236 (comparisonOperator -> MAIOR .)
    NUMBER          reduce using rule 236 (comparisonOperator -> MAIOR .)
    OPERATOR        reduce using rule 236 (comparisonOperator -> MAIOR .)
    SMARTCAST       reduce using rule 236 (comparisonOperator -> MAIOR .)
    THIS            reduce using rule 236 (comparisonOperator -> MAIOR .)
    TRUE            reduce using rule 236 (comparisonOperator -> MAIOR .)
    VAL             reduce using rule 236 (comparisonOperator -> MAIOR .)
    VAR             reduce using rule 236 (comparisonOperator -> MAIOR .)
    DOUBLE          reduce using rule 236 (comparisonOperator -> MAIOR .)
    WHEN            reduce using rule 236 (comparisonOperator -> MAIOR .)
    LONG            reduce using rule 236 (comparisonOperator -> MAIOR .)
    COLONCOLON      reduce using rule 236 (comparisonOperator -> MAIOR .)
    LCCT            reduce using rule 236 (comparisonOperator -> MAIOR .)
    IF              reduce using rule 236 (comparisonOperator -> MAIOR .)
    RETURN          reduce using rule 236 (comparisonOperator -> MAIOR .)
    RETURN_AT       reduce using rule 236 (comparisonOperator -> MAIOR .)
    CONTINUE        reduce using rule 236 (comparisonOperator -> MAIOR .)
    CONTINUE_AT     reduce using rule 236 (comparisonOperator -> MAIOR .)
    BREAK           reduce using rule 236 (comparisonOperator -> MAIOR .)
    BREAK_AT        reduce using rule 236 (comparisonOperator -> MAIOR .)
    RCHAVE          reduce using rule 236 (comparisonOperator -> MAIOR .)
    FUN             reduce using rule 236 (comparisonOperator -> MAIOR .)
    SUSPEND         reduce using rule 236 (comparisonOperator -> MAIOR .)


state 233

    (237) comparisonOperator -> MENORIGUAL .

    LITERAL_STRING  reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    INCREMENTO      reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    DECREMENTO      reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    MINUS           reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    PLUS            reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    NOT             reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    LPAREN          reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    ID              reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    CROSSINLINE     reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    IMPORT          reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    INIT            reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    NOINLINE        reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    OUT             reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    VARARG          reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    WHERE           reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    INT             reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    FLOAT           reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    BOOLEAN         reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    STRING          reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    ARRAY           reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    CHAR            reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    OBJECT          reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    CONST           reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    CONSTRUCTOR     reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    EOF             reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    FALSE           reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    FUNCTION        reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    NULL            reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    NULLABLE        reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    NUMBER          reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    OPERATOR        reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    SMARTCAST       reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    THIS            reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    TRUE            reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    VAL             reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    VAR             reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    DOUBLE          reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    WHEN            reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    LONG            reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    COLONCOLON      reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    LCCT            reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    IF              reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    RETURN          reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    RETURN_AT       reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    CONTINUE        reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    CONTINUE_AT     reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    BREAK           reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    BREAK_AT        reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    RCHAVE          reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    FUN             reduce using rule 237 (comparisonOperator -> MENORIGUAL .)
    SUSPEND         reduce using rule 237 (comparisonOperator -> MENORIGUAL .)


state 234

    (238) comparisonOperator -> MAIORIGUAL .

    LITERAL_STRING  reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    INCREMENTO      reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    DECREMENTO      reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    MINUS           reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    PLUS            reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    NOT             reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    LPAREN          reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    ID              reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    CROSSINLINE     reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    IMPORT          reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    INIT            reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    NOINLINE        reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    OUT             reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    VARARG          reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    WHERE           reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    INT             reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    FLOAT           reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    BOOLEAN         reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    STRING          reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    ARRAY           reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    CHAR            reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    OBJECT          reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    CONST           reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    CONSTRUCTOR     reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    EOF             reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    FALSE           reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    FUNCTION        reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    NULL            reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    NULLABLE        reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    NUMBER          reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    OPERATOR        reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    SMARTCAST       reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    THIS            reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    TRUE            reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    VAL             reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    VAR             reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    DOUBLE          reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    WHEN            reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    LONG            reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    COLONCOLON      reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    LCCT            reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    IF              reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    RETURN          reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    RETURN_AT       reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    CONTINUE        reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    CONTINUE_AT     reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    BREAK           reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    BREAK_AT        reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    RCHAVE          reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    FUN             reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)
    SUSPEND         reduce using rule 238 (comparisonOperator -> MAIORIGUAL .)


state 235

    (91) infixOperation -> elvisExpression io .

    INCREMENTO      reduce using rule 91 (infixOperation -> elvisExpression io .)
    DECREMENTO      reduce using rule 91 (infixOperation -> elvisExpression io .)
    MENOR           reduce using rule 91 (infixOperation -> elvisExpression io .)
    LCCT            reduce using rule 91 (infixOperation -> elvisExpression io .)
    LPAREN          reduce using rule 91 (infixOperation -> elvisExpression io .)
    COLONCOLON      reduce using rule 91 (infixOperation -> elvisExpression io .)
    RCHAVE          reduce using rule 91 (infixOperation -> elvisExpression io .)
    PONTO           reduce using rule 91 (infixOperation -> elvisExpression io .)
    AS              reduce using rule 91 (infixOperation -> elvisExpression io .)
    MAISIGUAL       reduce using rule 91 (infixOperation -> elvisExpression io .)
    MENOSIGUAL      reduce using rule 91 (infixOperation -> elvisExpression io .)
    MULTIGUAL       reduce using rule 91 (infixOperation -> elvisExpression io .)
    DIVIGUAL        reduce using rule 91 (infixOperation -> elvisExpression io .)
    MODIGUAL        reduce using rule 91 (infixOperation -> elvisExpression io .)
    MULT            reduce using rule 91 (infixOperation -> elvisExpression io .)
    DIVIDE          reduce using rule 91 (infixOperation -> elvisExpression io .)
    MOD             reduce using rule 91 (infixOperation -> elvisExpression io .)
    PLUS            reduce using rule 91 (infixOperation -> elvisExpression io .)
    MINUS           reduce using rule 91 (infixOperation -> elvisExpression io .)
    PONTOPONTO      reduce using rule 91 (infixOperation -> elvisExpression io .)
    ID              reduce using rule 91 (infixOperation -> elvisExpression io .)
    CROSSINLINE     reduce using rule 91 (infixOperation -> elvisExpression io .)
    IMPORT          reduce using rule 91 (infixOperation -> elvisExpression io .)
    INIT            reduce using rule 91 (infixOperation -> elvisExpression io .)
    NOINLINE        reduce using rule 91 (infixOperation -> elvisExpression io .)
    OUT             reduce using rule 91 (infixOperation -> elvisExpression io .)
    VARARG          reduce using rule 91 (infixOperation -> elvisExpression io .)
    WHERE           reduce using rule 91 (infixOperation -> elvisExpression io .)
    INT             reduce using rule 91 (infixOperation -> elvisExpression io .)
    FLOAT           reduce using rule 91 (infixOperation -> elvisExpression io .)
    BOOLEAN         reduce using rule 91 (infixOperation -> elvisExpression io .)
    STRING          reduce using rule 91 (infixOperation -> elvisExpression io .)
    ARRAY           reduce using rule 91 (infixOperation -> elvisExpression io .)
    CHAR            reduce using rule 91 (infixOperation -> elvisExpression io .)
    OBJECT          reduce using rule 91 (infixOperation -> elvisExpression io .)
    CONST           reduce using rule 91 (infixOperation -> elvisExpression io .)
    CONSTRUCTOR     reduce using rule 91 (infixOperation -> elvisExpression io .)
    EOF             reduce using rule 91 (infixOperation -> elvisExpression io .)
    FALSE           reduce using rule 91 (infixOperation -> elvisExpression io .)
    FUNCTION        reduce using rule 91 (infixOperation -> elvisExpression io .)
    NULL            reduce using rule 91 (infixOperation -> elvisExpression io .)
    NULLABLE        reduce using rule 91 (infixOperation -> elvisExpression io .)
    NUMBER          reduce using rule 91 (infixOperation -> elvisExpression io .)
    OPERATOR        reduce using rule 91 (infixOperation -> elvisExpression io .)
    SMARTCAST       reduce using rule 91 (infixOperation -> elvisExpression io .)
    THIS            reduce using rule 91 (infixOperation -> elvisExpression io .)
    TRUE            reduce using rule 91 (infixOperation -> elvisExpression io .)
    VAL             reduce using rule 91 (infixOperation -> elvisExpression io .)
    VAR             reduce using rule 91 (infixOperation -> elvisExpression io .)
    DOUBLE          reduce using rule 91 (infixOperation -> elvisExpression io .)
    WHEN            reduce using rule 91 (infixOperation -> elvisExpression io .)
    LONG            reduce using rule 91 (infixOperation -> elvisExpression io .)
    ELVIS           reduce using rule 91 (infixOperation -> elvisExpression io .)
    IN              reduce using rule 91 (infixOperation -> elvisExpression io .)
    NOT_IN          reduce using rule 91 (infixOperation -> elvisExpression io .)
    IS              reduce using rule 91 (infixOperation -> elvisExpression io .)
    NOT_IS          reduce using rule 91 (infixOperation -> elvisExpression io .)
    MAIOR           reduce using rule 91 (infixOperation -> elvisExpression io .)
    MENORIGUAL      reduce using rule 91 (infixOperation -> elvisExpression io .)
    MAIORIGUAL      reduce using rule 91 (infixOperation -> elvisExpression io .)
    DIFERENTE       reduce using rule 91 (infixOperation -> elvisExpression io .)
    IDENTIDADE      reduce using rule 91 (infixOperation -> elvisExpression io .)
    IGUALDADE       reduce using rule 91 (infixOperation -> elvisExpression io .)
    SEMIDENTIDADE   reduce using rule 91 (infixOperation -> elvisExpression io .)
    AND             reduce using rule 91 (infixOperation -> elvisExpression io .)
    OR              reduce using rule 91 (infixOperation -> elvisExpression io .)
    FUN             reduce using rule 91 (infixOperation -> elvisExpression io .)
    FOR             reduce using rule 91 (infixOperation -> elvisExpression io .)
    WHILE           reduce using rule 91 (infixOperation -> elvisExpression io .)
    DO              reduce using rule 91 (infixOperation -> elvisExpression io .)
    LITERAL_STRING  reduce using rule 91 (infixOperation -> elvisExpression io .)
    IF              reduce using rule 91 (infixOperation -> elvisExpression io .)
    RETURN          reduce using rule 91 (infixOperation -> elvisExpression io .)
    RETURN_AT       reduce using rule 91 (infixOperation -> elvisExpression io .)
    CONTINUE        reduce using rule 91 (infixOperation -> elvisExpression io .)
    CONTINUE_AT     reduce using rule 91 (infixOperation -> elvisExpression io .)
    BREAK           reduce using rule 91 (infixOperation -> elvisExpression io .)
    BREAK_AT        reduce using rule 91 (infixOperation -> elvisExpression io .)
    NOT             reduce using rule 91 (infixOperation -> elvisExpression io .)
    SUSPEND         reduce using rule 91 (infixOperation -> elvisExpression io .)
    COMMA           reduce using rule 91 (infixOperation -> elvisExpression io .)
    RPAREN          reduce using rule 91 (infixOperation -> elvisExpression io .)
    LCHAVE          reduce using rule 91 (infixOperation -> elvisExpression io .)
    PV              reduce using rule 91 (infixOperation -> elvisExpression io .)
    ELSE            reduce using rule 91 (infixOperation -> elvisExpression io .)
    RCCT            reduce using rule 91 (infixOperation -> elvisExpression io .)


state 236

    (93) io -> inOperator . elvisExpression
    (94) io -> inOperator . elvisExpression io
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (82) expression -> . disjunction
    (33) typeModifier -> . SUSPEND
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression

    LITERAL_STRING  shift and go to state 99
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    LPAREN          shift and go to state 152
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57

    elvisExpression                shift and go to state 332
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    simpleIdentifier               shift and go to state 149
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133
    prefixUnaryExpression          shift and go to state 150
    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 151
    unaryPrefix                    shift and go to state 105
    primaryExpression              shift and go to state 95
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    expression                     shift and go to state 212
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122
    disjunction                    shift and go to state 85
    conjunction                    shift and go to state 94
    equality                       shift and go to state 97
    comparison                     shift and go to state 106
    infixOperation                 shift and go to state 121

state 237

    (95) io -> isOperator . type
    (96) io -> isOperator . type io
    (26) type -> . typeModifiers optype
    (27) type -> . optype
    (31) typeModifiers -> . typeModifier
    (32) typeModifiers -> . typeModifier typeModifiers
    (28) optype -> . parenthesizedType
    (29) optype -> . functionType
    (30) optype -> . userType
    (33) typeModifier -> . SUSPEND
    (56) parenthesizedType -> . LPAREN type RPAREN
    (44) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (45) functionType -> . functionTypeParameters SETA type
    (37) userType -> . simpleUserType
    (57) receiverType -> . typeModifier rt
    (46) functionTypeParameters -> . functionTypeParameters_p
    (47) functionTypeParameters -> . functionTypeParameters_t
    (38) simpleUserType -> . simpleIdentifier typeArguments
    (39) simpleUserType -> . simpleIdentifier
    (48) functionTypeParameters_p -> . LPAREN parameter ftp RPAREN
    (49) functionTypeParameters_p -> . LPAREN parameter RPAREN
    (50) functionTypeParameters_t -> . LPAREN type RPAREN
    (51) functionTypeParameters_t -> . LPAREN type ftp RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    SUSPEND         shift and go to state 57
    LPAREN          shift and go to state 58
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    type                           shift and go to state 333
    typeModifiers                  shift and go to state 51
    optype                         shift and go to state 52
    typeModifier                   shift and go to state 53
    parenthesizedType              shift and go to state 54
    functionType                   shift and go to state 55
    userType                       shift and go to state 56
    receiverType                   shift and go to state 59
    functionTypeParameters         shift and go to state 60
    simpleUserType                 shift and go to state 61
    functionTypeParameters_p       shift and go to state 62
    functionTypeParameters_t       shift and go to state 63
    simpleIdentifier               shift and go to state 64

state 238

    (239) inOperator -> IN .

    LITERAL_STRING  reduce using rule 239 (inOperator -> IN .)
    INCREMENTO      reduce using rule 239 (inOperator -> IN .)
    DECREMENTO      reduce using rule 239 (inOperator -> IN .)
    MINUS           reduce using rule 239 (inOperator -> IN .)
    PLUS            reduce using rule 239 (inOperator -> IN .)
    NOT             reduce using rule 239 (inOperator -> IN .)
    LPAREN          reduce using rule 239 (inOperator -> IN .)
    ID              reduce using rule 239 (inOperator -> IN .)
    CROSSINLINE     reduce using rule 239 (inOperator -> IN .)
    IMPORT          reduce using rule 239 (inOperator -> IN .)
    INIT            reduce using rule 239 (inOperator -> IN .)
    NOINLINE        reduce using rule 239 (inOperator -> IN .)
    OUT             reduce using rule 239 (inOperator -> IN .)
    VARARG          reduce using rule 239 (inOperator -> IN .)
    WHERE           reduce using rule 239 (inOperator -> IN .)
    INT             reduce using rule 239 (inOperator -> IN .)
    FLOAT           reduce using rule 239 (inOperator -> IN .)
    BOOLEAN         reduce using rule 239 (inOperator -> IN .)
    STRING          reduce using rule 239 (inOperator -> IN .)
    ARRAY           reduce using rule 239 (inOperator -> IN .)
    CHAR            reduce using rule 239 (inOperator -> IN .)
    OBJECT          reduce using rule 239 (inOperator -> IN .)
    CONST           reduce using rule 239 (inOperator -> IN .)
    CONSTRUCTOR     reduce using rule 239 (inOperator -> IN .)
    EOF             reduce using rule 239 (inOperator -> IN .)
    FALSE           reduce using rule 239 (inOperator -> IN .)
    FUNCTION        reduce using rule 239 (inOperator -> IN .)
    NULL            reduce using rule 239 (inOperator -> IN .)
    NULLABLE        reduce using rule 239 (inOperator -> IN .)
    NUMBER          reduce using rule 239 (inOperator -> IN .)
    OPERATOR        reduce using rule 239 (inOperator -> IN .)
    SMARTCAST       reduce using rule 239 (inOperator -> IN .)
    THIS            reduce using rule 239 (inOperator -> IN .)
    TRUE            reduce using rule 239 (inOperator -> IN .)
    VAL             reduce using rule 239 (inOperator -> IN .)
    VAR             reduce using rule 239 (inOperator -> IN .)
    DOUBLE          reduce using rule 239 (inOperator -> IN .)
    WHEN            reduce using rule 239 (inOperator -> IN .)
    LONG            reduce using rule 239 (inOperator -> IN .)
    COLONCOLON      reduce using rule 239 (inOperator -> IN .)
    LCCT            reduce using rule 239 (inOperator -> IN .)
    IF              reduce using rule 239 (inOperator -> IN .)
    RETURN          reduce using rule 239 (inOperator -> IN .)
    RETURN_AT       reduce using rule 239 (inOperator -> IN .)
    CONTINUE        reduce using rule 239 (inOperator -> IN .)
    CONTINUE_AT     reduce using rule 239 (inOperator -> IN .)
    BREAK           reduce using rule 239 (inOperator -> IN .)
    BREAK_AT        reduce using rule 239 (inOperator -> IN .)
    RCHAVE          reduce using rule 239 (inOperator -> IN .)
    FUN             reduce using rule 239 (inOperator -> IN .)
    SUSPEND         reduce using rule 239 (inOperator -> IN .)


state 239

    (240) inOperator -> NOT_IN .

    LITERAL_STRING  reduce using rule 240 (inOperator -> NOT_IN .)
    INCREMENTO      reduce using rule 240 (inOperator -> NOT_IN .)
    DECREMENTO      reduce using rule 240 (inOperator -> NOT_IN .)
    MINUS           reduce using rule 240 (inOperator -> NOT_IN .)
    PLUS            reduce using rule 240 (inOperator -> NOT_IN .)
    NOT             reduce using rule 240 (inOperator -> NOT_IN .)
    LPAREN          reduce using rule 240 (inOperator -> NOT_IN .)
    ID              reduce using rule 240 (inOperator -> NOT_IN .)
    CROSSINLINE     reduce using rule 240 (inOperator -> NOT_IN .)
    IMPORT          reduce using rule 240 (inOperator -> NOT_IN .)
    INIT            reduce using rule 240 (inOperator -> NOT_IN .)
    NOINLINE        reduce using rule 240 (inOperator -> NOT_IN .)
    OUT             reduce using rule 240 (inOperator -> NOT_IN .)
    VARARG          reduce using rule 240 (inOperator -> NOT_IN .)
    WHERE           reduce using rule 240 (inOperator -> NOT_IN .)
    INT             reduce using rule 240 (inOperator -> NOT_IN .)
    FLOAT           reduce using rule 240 (inOperator -> NOT_IN .)
    BOOLEAN         reduce using rule 240 (inOperator -> NOT_IN .)
    STRING          reduce using rule 240 (inOperator -> NOT_IN .)
    ARRAY           reduce using rule 240 (inOperator -> NOT_IN .)
    CHAR            reduce using rule 240 (inOperator -> NOT_IN .)
    OBJECT          reduce using rule 240 (inOperator -> NOT_IN .)
    CONST           reduce using rule 240 (inOperator -> NOT_IN .)
    CONSTRUCTOR     reduce using rule 240 (inOperator -> NOT_IN .)
    EOF             reduce using rule 240 (inOperator -> NOT_IN .)
    FALSE           reduce using rule 240 (inOperator -> NOT_IN .)
    FUNCTION        reduce using rule 240 (inOperator -> NOT_IN .)
    NULL            reduce using rule 240 (inOperator -> NOT_IN .)
    NULLABLE        reduce using rule 240 (inOperator -> NOT_IN .)
    NUMBER          reduce using rule 240 (inOperator -> NOT_IN .)
    OPERATOR        reduce using rule 240 (inOperator -> NOT_IN .)
    SMARTCAST       reduce using rule 240 (inOperator -> NOT_IN .)
    THIS            reduce using rule 240 (inOperator -> NOT_IN .)
    TRUE            reduce using rule 240 (inOperator -> NOT_IN .)
    VAL             reduce using rule 240 (inOperator -> NOT_IN .)
    VAR             reduce using rule 240 (inOperator -> NOT_IN .)
    DOUBLE          reduce using rule 240 (inOperator -> NOT_IN .)
    WHEN            reduce using rule 240 (inOperator -> NOT_IN .)
    LONG            reduce using rule 240 (inOperator -> NOT_IN .)
    COLONCOLON      reduce using rule 240 (inOperator -> NOT_IN .)
    LCCT            reduce using rule 240 (inOperator -> NOT_IN .)
    IF              reduce using rule 240 (inOperator -> NOT_IN .)
    RETURN          reduce using rule 240 (inOperator -> NOT_IN .)
    RETURN_AT       reduce using rule 240 (inOperator -> NOT_IN .)
    CONTINUE        reduce using rule 240 (inOperator -> NOT_IN .)
    CONTINUE_AT     reduce using rule 240 (inOperator -> NOT_IN .)
    BREAK           reduce using rule 240 (inOperator -> NOT_IN .)
    BREAK_AT        reduce using rule 240 (inOperator -> NOT_IN .)
    RCHAVE          reduce using rule 240 (inOperator -> NOT_IN .)
    FUN             reduce using rule 240 (inOperator -> NOT_IN .)
    SUSPEND         reduce using rule 240 (inOperator -> NOT_IN .)


state 240

    (241) isOperator -> IS .

    SUSPEND         reduce using rule 241 (isOperator -> IS .)
    LPAREN          reduce using rule 241 (isOperator -> IS .)
    ID              reduce using rule 241 (isOperator -> IS .)
    CROSSINLINE     reduce using rule 241 (isOperator -> IS .)
    IMPORT          reduce using rule 241 (isOperator -> IS .)
    INIT            reduce using rule 241 (isOperator -> IS .)
    NOINLINE        reduce using rule 241 (isOperator -> IS .)
    OUT             reduce using rule 241 (isOperator -> IS .)
    VARARG          reduce using rule 241 (isOperator -> IS .)
    WHERE           reduce using rule 241 (isOperator -> IS .)
    INT             reduce using rule 241 (isOperator -> IS .)
    FLOAT           reduce using rule 241 (isOperator -> IS .)
    BOOLEAN         reduce using rule 241 (isOperator -> IS .)
    STRING          reduce using rule 241 (isOperator -> IS .)
    ARRAY           reduce using rule 241 (isOperator -> IS .)
    CHAR            reduce using rule 241 (isOperator -> IS .)
    OBJECT          reduce using rule 241 (isOperator -> IS .)
    CONST           reduce using rule 241 (isOperator -> IS .)
    CONSTRUCTOR     reduce using rule 241 (isOperator -> IS .)
    EOF             reduce using rule 241 (isOperator -> IS .)
    FALSE           reduce using rule 241 (isOperator -> IS .)
    FUNCTION        reduce using rule 241 (isOperator -> IS .)
    NULL            reduce using rule 241 (isOperator -> IS .)
    NULLABLE        reduce using rule 241 (isOperator -> IS .)
    NUMBER          reduce using rule 241 (isOperator -> IS .)
    OPERATOR        reduce using rule 241 (isOperator -> IS .)
    SMARTCAST       reduce using rule 241 (isOperator -> IS .)
    THIS            reduce using rule 241 (isOperator -> IS .)
    TRUE            reduce using rule 241 (isOperator -> IS .)
    VAL             reduce using rule 241 (isOperator -> IS .)
    VAR             reduce using rule 241 (isOperator -> IS .)
    DOUBLE          reduce using rule 241 (isOperator -> IS .)
    WHEN            reduce using rule 241 (isOperator -> IS .)
    LONG            reduce using rule 241 (isOperator -> IS .)


state 241

    (242) isOperator -> NOT_IS .

    SUSPEND         reduce using rule 242 (isOperator -> NOT_IS .)
    LPAREN          reduce using rule 242 (isOperator -> NOT_IS .)
    ID              reduce using rule 242 (isOperator -> NOT_IS .)
    CROSSINLINE     reduce using rule 242 (isOperator -> NOT_IS .)
    IMPORT          reduce using rule 242 (isOperator -> NOT_IS .)
    INIT            reduce using rule 242 (isOperator -> NOT_IS .)
    NOINLINE        reduce using rule 242 (isOperator -> NOT_IS .)
    OUT             reduce using rule 242 (isOperator -> NOT_IS .)
    VARARG          reduce using rule 242 (isOperator -> NOT_IS .)
    WHERE           reduce using rule 242 (isOperator -> NOT_IS .)
    INT             reduce using rule 242 (isOperator -> NOT_IS .)
    FLOAT           reduce using rule 242 (isOperator -> NOT_IS .)
    BOOLEAN         reduce using rule 242 (isOperator -> NOT_IS .)
    STRING          reduce using rule 242 (isOperator -> NOT_IS .)
    ARRAY           reduce using rule 242 (isOperator -> NOT_IS .)
    CHAR            reduce using rule 242 (isOperator -> NOT_IS .)
    OBJECT          reduce using rule 242 (isOperator -> NOT_IS .)
    CONST           reduce using rule 242 (isOperator -> NOT_IS .)
    CONSTRUCTOR     reduce using rule 242 (isOperator -> NOT_IS .)
    EOF             reduce using rule 242 (isOperator -> NOT_IS .)
    FALSE           reduce using rule 242 (isOperator -> NOT_IS .)
    FUNCTION        reduce using rule 242 (isOperator -> NOT_IS .)
    NULL            reduce using rule 242 (isOperator -> NOT_IS .)
    NULLABLE        reduce using rule 242 (isOperator -> NOT_IS .)
    NUMBER          reduce using rule 242 (isOperator -> NOT_IS .)
    OPERATOR        reduce using rule 242 (isOperator -> NOT_IS .)
    SMARTCAST       reduce using rule 242 (isOperator -> NOT_IS .)
    THIS            reduce using rule 242 (isOperator -> NOT_IS .)
    TRUE            reduce using rule 242 (isOperator -> NOT_IS .)
    VAL             reduce using rule 242 (isOperator -> NOT_IS .)
    VAR             reduce using rule 242 (isOperator -> NOT_IS .)
    DOUBLE          reduce using rule 242 (isOperator -> NOT_IS .)
    WHEN            reduce using rule 242 (isOperator -> NOT_IS .)
    LONG            reduce using rule 242 (isOperator -> NOT_IS .)


state 242

    (98) elvisExpression -> infixFunctionCall ELVIS . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (82) expression -> . disjunction
    (33) typeModifier -> . SUSPEND
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression

    LITERAL_STRING  shift and go to state 99
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    LPAREN          shift and go to state 152
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57

    infixFunctionCall              shift and go to state 129
    elvisExpression                shift and go to state 334
    rangeExpression                shift and go to state 130
    simpleIdentifier               shift and go to state 149
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133
    prefixUnaryExpression          shift and go to state 150
    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 151
    unaryPrefix                    shift and go to state 105
    primaryExpression              shift and go to state 95
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    expression                     shift and go to state 212
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122
    disjunction                    shift and go to state 85
    conjunction                    shift and go to state 94
    equality                       shift and go to state 97
    comparison                     shift and go to state 106
    infixOperation                 shift and go to state 121

state 243

    (100) infixFunctionCall -> rangeExpression simpleIdentifier . infixFunctionCall
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (82) expression -> . disjunction
    (33) typeModifier -> . SUSPEND
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression

    LITERAL_STRING  shift and go to state 99
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    LPAREN          shift and go to state 152
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57

    rangeExpression                shift and go to state 130
    simpleIdentifier               shift and go to state 149
    infixFunctionCall              shift and go to state 335
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133
    prefixUnaryExpression          shift and go to state 150
    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 151
    unaryPrefix                    shift and go to state 105
    primaryExpression              shift and go to state 95
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    expression                     shift and go to state 212
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122
    disjunction                    shift and go to state 85
    conjunction                    shift and go to state 94
    equality                       shift and go to state 97
    comparison                     shift and go to state 106
    infixOperation                 shift and go to state 121
    elvisExpression                shift and go to state 128

state 244

    (102) rangeExpression -> additiveExpression PONTOPONTO . rangeExpression
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (82) expression -> . disjunction
    (33) typeModifier -> . SUSPEND
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall

    LITERAL_STRING  shift and go to state 99
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    LPAREN          shift and go to state 152
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57

    additiveExpression             shift and go to state 131
    rangeExpression                shift and go to state 336
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133
    prefixUnaryExpression          shift and go to state 150
    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 151
    unaryPrefix                    shift and go to state 105
    primaryExpression              shift and go to state 95
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    parenthesizedExpression        shift and go to state 98
    simpleIdentifier               shift and go to state 149
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    expression                     shift and go to state 212
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122
    disjunction                    shift and go to state 85
    conjunction                    shift and go to state 94
    equality                       shift and go to state 97
    comparison                     shift and go to state 106
    infixOperation                 shift and go to state 121
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129

state 245

    (104) additiveExpression -> multiplicativeExpression additiveOperator . additiveExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (82) expression -> . disjunction
    (33) typeModifier -> . SUSPEND
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression

    LITERAL_STRING  shift and go to state 99
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    LPAREN          shift and go to state 152
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57

    multiplicativeExpression       shift and go to state 132
    additiveExpression             shift and go to state 337
    asExpression                   shift and go to state 133
    prefixUnaryExpression          shift and go to state 150
    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 151
    unaryPrefix                    shift and go to state 105
    primaryExpression              shift and go to state 95
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    parenthesizedExpression        shift and go to state 98
    simpleIdentifier               shift and go to state 149
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    expression                     shift and go to state 212
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122
    disjunction                    shift and go to state 85
    conjunction                    shift and go to state 94
    equality                       shift and go to state 97
    comparison                     shift and go to state 106
    infixOperation                 shift and go to state 121
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130

state 246

    (243) additiveOperator -> PLUS .

    LITERAL_STRING  reduce using rule 243 (additiveOperator -> PLUS .)
    INCREMENTO      reduce using rule 243 (additiveOperator -> PLUS .)
    DECREMENTO      reduce using rule 243 (additiveOperator -> PLUS .)
    MINUS           reduce using rule 243 (additiveOperator -> PLUS .)
    PLUS            reduce using rule 243 (additiveOperator -> PLUS .)
    NOT             reduce using rule 243 (additiveOperator -> PLUS .)
    LPAREN          reduce using rule 243 (additiveOperator -> PLUS .)
    ID              reduce using rule 243 (additiveOperator -> PLUS .)
    CROSSINLINE     reduce using rule 243 (additiveOperator -> PLUS .)
    IMPORT          reduce using rule 243 (additiveOperator -> PLUS .)
    INIT            reduce using rule 243 (additiveOperator -> PLUS .)
    NOINLINE        reduce using rule 243 (additiveOperator -> PLUS .)
    OUT             reduce using rule 243 (additiveOperator -> PLUS .)
    VARARG          reduce using rule 243 (additiveOperator -> PLUS .)
    WHERE           reduce using rule 243 (additiveOperator -> PLUS .)
    INT             reduce using rule 243 (additiveOperator -> PLUS .)
    FLOAT           reduce using rule 243 (additiveOperator -> PLUS .)
    BOOLEAN         reduce using rule 243 (additiveOperator -> PLUS .)
    STRING          reduce using rule 243 (additiveOperator -> PLUS .)
    ARRAY           reduce using rule 243 (additiveOperator -> PLUS .)
    CHAR            reduce using rule 243 (additiveOperator -> PLUS .)
    OBJECT          reduce using rule 243 (additiveOperator -> PLUS .)
    CONST           reduce using rule 243 (additiveOperator -> PLUS .)
    CONSTRUCTOR     reduce using rule 243 (additiveOperator -> PLUS .)
    EOF             reduce using rule 243 (additiveOperator -> PLUS .)
    FALSE           reduce using rule 243 (additiveOperator -> PLUS .)
    FUNCTION        reduce using rule 243 (additiveOperator -> PLUS .)
    NULL            reduce using rule 243 (additiveOperator -> PLUS .)
    NULLABLE        reduce using rule 243 (additiveOperator -> PLUS .)
    NUMBER          reduce using rule 243 (additiveOperator -> PLUS .)
    OPERATOR        reduce using rule 243 (additiveOperator -> PLUS .)
    SMARTCAST       reduce using rule 243 (additiveOperator -> PLUS .)
    THIS            reduce using rule 243 (additiveOperator -> PLUS .)
    TRUE            reduce using rule 243 (additiveOperator -> PLUS .)
    VAL             reduce using rule 243 (additiveOperator -> PLUS .)
    VAR             reduce using rule 243 (additiveOperator -> PLUS .)
    DOUBLE          reduce using rule 243 (additiveOperator -> PLUS .)
    WHEN            reduce using rule 243 (additiveOperator -> PLUS .)
    LONG            reduce using rule 243 (additiveOperator -> PLUS .)
    COLONCOLON      reduce using rule 243 (additiveOperator -> PLUS .)
    LCCT            reduce using rule 243 (additiveOperator -> PLUS .)
    IF              reduce using rule 243 (additiveOperator -> PLUS .)
    RETURN          reduce using rule 243 (additiveOperator -> PLUS .)
    RETURN_AT       reduce using rule 243 (additiveOperator -> PLUS .)
    CONTINUE        reduce using rule 243 (additiveOperator -> PLUS .)
    CONTINUE_AT     reduce using rule 243 (additiveOperator -> PLUS .)
    BREAK           reduce using rule 243 (additiveOperator -> PLUS .)
    BREAK_AT        reduce using rule 243 (additiveOperator -> PLUS .)
    RCHAVE          reduce using rule 243 (additiveOperator -> PLUS .)
    FUN             reduce using rule 243 (additiveOperator -> PLUS .)
    SUSPEND         reduce using rule 243 (additiveOperator -> PLUS .)


state 247

    (244) additiveOperator -> MINUS .

    LITERAL_STRING  reduce using rule 244 (additiveOperator -> MINUS .)
    INCREMENTO      reduce using rule 244 (additiveOperator -> MINUS .)
    DECREMENTO      reduce using rule 244 (additiveOperator -> MINUS .)
    MINUS           reduce using rule 244 (additiveOperator -> MINUS .)
    PLUS            reduce using rule 244 (additiveOperator -> MINUS .)
    NOT             reduce using rule 244 (additiveOperator -> MINUS .)
    LPAREN          reduce using rule 244 (additiveOperator -> MINUS .)
    ID              reduce using rule 244 (additiveOperator -> MINUS .)
    CROSSINLINE     reduce using rule 244 (additiveOperator -> MINUS .)
    IMPORT          reduce using rule 244 (additiveOperator -> MINUS .)
    INIT            reduce using rule 244 (additiveOperator -> MINUS .)
    NOINLINE        reduce using rule 244 (additiveOperator -> MINUS .)
    OUT             reduce using rule 244 (additiveOperator -> MINUS .)
    VARARG          reduce using rule 244 (additiveOperator -> MINUS .)
    WHERE           reduce using rule 244 (additiveOperator -> MINUS .)
    INT             reduce using rule 244 (additiveOperator -> MINUS .)
    FLOAT           reduce using rule 244 (additiveOperator -> MINUS .)
    BOOLEAN         reduce using rule 244 (additiveOperator -> MINUS .)
    STRING          reduce using rule 244 (additiveOperator -> MINUS .)
    ARRAY           reduce using rule 244 (additiveOperator -> MINUS .)
    CHAR            reduce using rule 244 (additiveOperator -> MINUS .)
    OBJECT          reduce using rule 244 (additiveOperator -> MINUS .)
    CONST           reduce using rule 244 (additiveOperator -> MINUS .)
    CONSTRUCTOR     reduce using rule 244 (additiveOperator -> MINUS .)
    EOF             reduce using rule 244 (additiveOperator -> MINUS .)
    FALSE           reduce using rule 244 (additiveOperator -> MINUS .)
    FUNCTION        reduce using rule 244 (additiveOperator -> MINUS .)
    NULL            reduce using rule 244 (additiveOperator -> MINUS .)
    NULLABLE        reduce using rule 244 (additiveOperator -> MINUS .)
    NUMBER          reduce using rule 244 (additiveOperator -> MINUS .)
    OPERATOR        reduce using rule 244 (additiveOperator -> MINUS .)
    SMARTCAST       reduce using rule 244 (additiveOperator -> MINUS .)
    THIS            reduce using rule 244 (additiveOperator -> MINUS .)
    TRUE            reduce using rule 244 (additiveOperator -> MINUS .)
    VAL             reduce using rule 244 (additiveOperator -> MINUS .)
    VAR             reduce using rule 244 (additiveOperator -> MINUS .)
    DOUBLE          reduce using rule 244 (additiveOperator -> MINUS .)
    WHEN            reduce using rule 244 (additiveOperator -> MINUS .)
    LONG            reduce using rule 244 (additiveOperator -> MINUS .)
    COLONCOLON      reduce using rule 244 (additiveOperator -> MINUS .)
    LCCT            reduce using rule 244 (additiveOperator -> MINUS .)
    IF              reduce using rule 244 (additiveOperator -> MINUS .)
    RETURN          reduce using rule 244 (additiveOperator -> MINUS .)
    RETURN_AT       reduce using rule 244 (additiveOperator -> MINUS .)
    CONTINUE        reduce using rule 244 (additiveOperator -> MINUS .)
    CONTINUE_AT     reduce using rule 244 (additiveOperator -> MINUS .)
    BREAK           reduce using rule 244 (additiveOperator -> MINUS .)
    BREAK_AT        reduce using rule 244 (additiveOperator -> MINUS .)
    RCHAVE          reduce using rule 244 (additiveOperator -> MINUS .)
    FUN             reduce using rule 244 (additiveOperator -> MINUS .)
    SUSPEND         reduce using rule 244 (additiveOperator -> MINUS .)


state 248

    (106) multiplicativeExpression -> asExpression multiplicativeOperator . multiplicativeExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (82) expression -> . disjunction
    (33) typeModifier -> . SUSPEND
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression

    LITERAL_STRING  shift and go to state 99
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    LPAREN          shift and go to state 152
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57

    asExpression                   shift and go to state 133
    multiplicativeExpression       shift and go to state 338
    prefixUnaryExpression          shift and go to state 150
    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 151
    unaryPrefix                    shift and go to state 105
    primaryExpression              shift and go to state 95
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    parenthesizedExpression        shift and go to state 98
    simpleIdentifier               shift and go to state 149
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    expression                     shift and go to state 212
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122
    disjunction                    shift and go to state 85
    conjunction                    shift and go to state 94
    equality                       shift and go to state 97
    comparison                     shift and go to state 106
    infixOperation                 shift and go to state 121
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    additiveExpression             shift and go to state 131

state 249

    (245) multiplicativeOperator -> MULT .

    LITERAL_STRING  reduce using rule 245 (multiplicativeOperator -> MULT .)
    INCREMENTO      reduce using rule 245 (multiplicativeOperator -> MULT .)
    DECREMENTO      reduce using rule 245 (multiplicativeOperator -> MULT .)
    MINUS           reduce using rule 245 (multiplicativeOperator -> MULT .)
    PLUS            reduce using rule 245 (multiplicativeOperator -> MULT .)
    NOT             reduce using rule 245 (multiplicativeOperator -> MULT .)
    LPAREN          reduce using rule 245 (multiplicativeOperator -> MULT .)
    ID              reduce using rule 245 (multiplicativeOperator -> MULT .)
    CROSSINLINE     reduce using rule 245 (multiplicativeOperator -> MULT .)
    IMPORT          reduce using rule 245 (multiplicativeOperator -> MULT .)
    INIT            reduce using rule 245 (multiplicativeOperator -> MULT .)
    NOINLINE        reduce using rule 245 (multiplicativeOperator -> MULT .)
    OUT             reduce using rule 245 (multiplicativeOperator -> MULT .)
    VARARG          reduce using rule 245 (multiplicativeOperator -> MULT .)
    WHERE           reduce using rule 245 (multiplicativeOperator -> MULT .)
    INT             reduce using rule 245 (multiplicativeOperator -> MULT .)
    FLOAT           reduce using rule 245 (multiplicativeOperator -> MULT .)
    BOOLEAN         reduce using rule 245 (multiplicativeOperator -> MULT .)
    STRING          reduce using rule 245 (multiplicativeOperator -> MULT .)
    ARRAY           reduce using rule 245 (multiplicativeOperator -> MULT .)
    CHAR            reduce using rule 245 (multiplicativeOperator -> MULT .)
    OBJECT          reduce using rule 245 (multiplicativeOperator -> MULT .)
    CONST           reduce using rule 245 (multiplicativeOperator -> MULT .)
    CONSTRUCTOR     reduce using rule 245 (multiplicativeOperator -> MULT .)
    EOF             reduce using rule 245 (multiplicativeOperator -> MULT .)
    FALSE           reduce using rule 245 (multiplicativeOperator -> MULT .)
    FUNCTION        reduce using rule 245 (multiplicativeOperator -> MULT .)
    NULL            reduce using rule 245 (multiplicativeOperator -> MULT .)
    NULLABLE        reduce using rule 245 (multiplicativeOperator -> MULT .)
    NUMBER          reduce using rule 245 (multiplicativeOperator -> MULT .)
    OPERATOR        reduce using rule 245 (multiplicativeOperator -> MULT .)
    SMARTCAST       reduce using rule 245 (multiplicativeOperator -> MULT .)
    THIS            reduce using rule 245 (multiplicativeOperator -> MULT .)
    TRUE            reduce using rule 245 (multiplicativeOperator -> MULT .)
    VAL             reduce using rule 245 (multiplicativeOperator -> MULT .)
    VAR             reduce using rule 245 (multiplicativeOperator -> MULT .)
    DOUBLE          reduce using rule 245 (multiplicativeOperator -> MULT .)
    WHEN            reduce using rule 245 (multiplicativeOperator -> MULT .)
    LONG            reduce using rule 245 (multiplicativeOperator -> MULT .)
    COLONCOLON      reduce using rule 245 (multiplicativeOperator -> MULT .)
    LCCT            reduce using rule 245 (multiplicativeOperator -> MULT .)
    IF              reduce using rule 245 (multiplicativeOperator -> MULT .)
    RETURN          reduce using rule 245 (multiplicativeOperator -> MULT .)
    RETURN_AT       reduce using rule 245 (multiplicativeOperator -> MULT .)
    CONTINUE        reduce using rule 245 (multiplicativeOperator -> MULT .)
    CONTINUE_AT     reduce using rule 245 (multiplicativeOperator -> MULT .)
    BREAK           reduce using rule 245 (multiplicativeOperator -> MULT .)
    BREAK_AT        reduce using rule 245 (multiplicativeOperator -> MULT .)
    RCHAVE          reduce using rule 245 (multiplicativeOperator -> MULT .)
    FUN             reduce using rule 245 (multiplicativeOperator -> MULT .)
    SUSPEND         reduce using rule 245 (multiplicativeOperator -> MULT .)


state 250

    (246) multiplicativeOperator -> DIVIDE .

    LITERAL_STRING  reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    INCREMENTO      reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    DECREMENTO      reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    MINUS           reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    PLUS            reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    NOT             reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    LPAREN          reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    ID              reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    CROSSINLINE     reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    IMPORT          reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    INIT            reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    NOINLINE        reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    OUT             reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    VARARG          reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    WHERE           reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    INT             reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    FLOAT           reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    BOOLEAN         reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    STRING          reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    ARRAY           reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    CHAR            reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    OBJECT          reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    CONST           reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    CONSTRUCTOR     reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    EOF             reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    FALSE           reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    FUNCTION        reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    NULL            reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    NULLABLE        reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    NUMBER          reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    OPERATOR        reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    SMARTCAST       reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    THIS            reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    TRUE            reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    VAL             reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    VAR             reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    DOUBLE          reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    WHEN            reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    LONG            reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    COLONCOLON      reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    LCCT            reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    IF              reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    RETURN          reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    RETURN_AT       reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    CONTINUE        reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    CONTINUE_AT     reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    BREAK           reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    BREAK_AT        reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    RCHAVE          reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    FUN             reduce using rule 246 (multiplicativeOperator -> DIVIDE .)
    SUSPEND         reduce using rule 246 (multiplicativeOperator -> DIVIDE .)


state 251

    (247) multiplicativeOperator -> MOD .

    LITERAL_STRING  reduce using rule 247 (multiplicativeOperator -> MOD .)
    INCREMENTO      reduce using rule 247 (multiplicativeOperator -> MOD .)
    DECREMENTO      reduce using rule 247 (multiplicativeOperator -> MOD .)
    MINUS           reduce using rule 247 (multiplicativeOperator -> MOD .)
    PLUS            reduce using rule 247 (multiplicativeOperator -> MOD .)
    NOT             reduce using rule 247 (multiplicativeOperator -> MOD .)
    LPAREN          reduce using rule 247 (multiplicativeOperator -> MOD .)
    ID              reduce using rule 247 (multiplicativeOperator -> MOD .)
    CROSSINLINE     reduce using rule 247 (multiplicativeOperator -> MOD .)
    IMPORT          reduce using rule 247 (multiplicativeOperator -> MOD .)
    INIT            reduce using rule 247 (multiplicativeOperator -> MOD .)
    NOINLINE        reduce using rule 247 (multiplicativeOperator -> MOD .)
    OUT             reduce using rule 247 (multiplicativeOperator -> MOD .)
    VARARG          reduce using rule 247 (multiplicativeOperator -> MOD .)
    WHERE           reduce using rule 247 (multiplicativeOperator -> MOD .)
    INT             reduce using rule 247 (multiplicativeOperator -> MOD .)
    FLOAT           reduce using rule 247 (multiplicativeOperator -> MOD .)
    BOOLEAN         reduce using rule 247 (multiplicativeOperator -> MOD .)
    STRING          reduce using rule 247 (multiplicativeOperator -> MOD .)
    ARRAY           reduce using rule 247 (multiplicativeOperator -> MOD .)
    CHAR            reduce using rule 247 (multiplicativeOperator -> MOD .)
    OBJECT          reduce using rule 247 (multiplicativeOperator -> MOD .)
    CONST           reduce using rule 247 (multiplicativeOperator -> MOD .)
    CONSTRUCTOR     reduce using rule 247 (multiplicativeOperator -> MOD .)
    EOF             reduce using rule 247 (multiplicativeOperator -> MOD .)
    FALSE           reduce using rule 247 (multiplicativeOperator -> MOD .)
    FUNCTION        reduce using rule 247 (multiplicativeOperator -> MOD .)
    NULL            reduce using rule 247 (multiplicativeOperator -> MOD .)
    NULLABLE        reduce using rule 247 (multiplicativeOperator -> MOD .)
    NUMBER          reduce using rule 247 (multiplicativeOperator -> MOD .)
    OPERATOR        reduce using rule 247 (multiplicativeOperator -> MOD .)
    SMARTCAST       reduce using rule 247 (multiplicativeOperator -> MOD .)
    THIS            reduce using rule 247 (multiplicativeOperator -> MOD .)
    TRUE            reduce using rule 247 (multiplicativeOperator -> MOD .)
    VAL             reduce using rule 247 (multiplicativeOperator -> MOD .)
    VAR             reduce using rule 247 (multiplicativeOperator -> MOD .)
    DOUBLE          reduce using rule 247 (multiplicativeOperator -> MOD .)
    WHEN            reduce using rule 247 (multiplicativeOperator -> MOD .)
    LONG            reduce using rule 247 (multiplicativeOperator -> MOD .)
    COLONCOLON      reduce using rule 247 (multiplicativeOperator -> MOD .)
    LCCT            reduce using rule 247 (multiplicativeOperator -> MOD .)
    IF              reduce using rule 247 (multiplicativeOperator -> MOD .)
    RETURN          reduce using rule 247 (multiplicativeOperator -> MOD .)
    RETURN_AT       reduce using rule 247 (multiplicativeOperator -> MOD .)
    CONTINUE        reduce using rule 247 (multiplicativeOperator -> MOD .)
    CONTINUE_AT     reduce using rule 247 (multiplicativeOperator -> MOD .)
    BREAK           reduce using rule 247 (multiplicativeOperator -> MOD .)
    BREAK_AT        reduce using rule 247 (multiplicativeOperator -> MOD .)
    RCHAVE          reduce using rule 247 (multiplicativeOperator -> MOD .)
    FUN             reduce using rule 247 (multiplicativeOperator -> MOD .)
    SUSPEND         reduce using rule 247 (multiplicativeOperator -> MOD .)


state 252

    (56) parenthesizedType -> LPAREN type . RPAREN

    RPAREN          shift and go to state 339


state 253

    (56) parenthesizedType -> LPAREN type RPAREN .
    (50) functionTypeParameters_t -> LPAREN type RPAREN .

  ! reduce/reduce conflict for SETA resolved using rule 50 (functionTypeParameters_t -> LPAREN type RPAREN .)
    LCHAVE          reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    FUN             reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    $end            reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    FOR             reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    WHILE           reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    DO              reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    ID              reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    CROSSINLINE     reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    IMPORT          reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    INIT            reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    NOINLINE        reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    OUT             reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    VARARG          reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    WHERE           reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    INT             reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    FLOAT           reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    BOOLEAN         reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    STRING          reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    ARRAY           reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    CHAR            reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    OBJECT          reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    CONST           reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    CONSTRUCTOR     reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    EOF             reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    FALSE           reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    FUNCTION        reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    NULL            reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    NULLABLE        reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    NUMBER          reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    OPERATOR        reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    SMARTCAST       reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    THIS            reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    TRUE            reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    VAL             reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    VAR             reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    DOUBLE          reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    WHEN            reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    LONG            reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    LPAREN          reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    LITERAL_STRING  reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    COLONCOLON      reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    LCCT            reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    IF              reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    RETURN          reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    RETURN_AT       reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    CONTINUE        reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    CONTINUE_AT     reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    BREAK           reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    BREAK_AT        reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    RCHAVE          reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    INCREMENTO      reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    DECREMENTO      reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    MINUS           reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    PLUS            reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    NOT             reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    SUSPEND         reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    PV              reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    ELSE            reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    MENOR           reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    PONTO           reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    AS              reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    MAISIGUAL       reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    MENOSIGUAL      reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    MULTIGUAL       reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    DIVIGUAL        reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    MODIGUAL        reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    MULT            reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    DIVIDE          reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    MOD             reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    PONTOPONTO      reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    ELVIS           reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    IN              reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    NOT_IN          reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    IS              reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    NOT_IS          reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    MAIOR           reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    MENORIGUAL      reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    MAIORIGUAL      reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    DIFERENTE       reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    IDENTIDADE      reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    IGUALDADE       reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    SEMIDENTIDADE   reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    AND             reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    OR              reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    COMMA           reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    RPAREN          reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    RCCT            reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    ATRIBUICAO      reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    SETA            reduce using rule 50 (functionTypeParameters_t -> LPAREN type RPAREN .)

  ! SETA            [ reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .) ]


state 254

    (51) functionTypeParameters_t -> LPAREN type ftp . RPAREN

    RPAREN          shift and go to state 340


state 255

    (52) ftp -> COMMA . parameter
    (53) ftp -> COMMA . type
    (54) ftp -> COMMA . parameter ftp
    (55) ftp -> COMMA . type ftp
    (25) parameter -> . simpleIdentifier DOISP type
    (26) type -> . typeModifiers optype
    (27) type -> . optype
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (31) typeModifiers -> . typeModifier
    (32) typeModifiers -> . typeModifier typeModifiers
    (28) optype -> . parenthesizedType
    (29) optype -> . functionType
    (30) optype -> . userType
    (33) typeModifier -> . SUSPEND
    (56) parenthesizedType -> . LPAREN type RPAREN
    (44) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (45) functionType -> . functionTypeParameters SETA type
    (37) userType -> . simpleUserType
    (57) receiverType -> . typeModifier rt
    (46) functionTypeParameters -> . functionTypeParameters_p
    (47) functionTypeParameters -> . functionTypeParameters_t
    (38) simpleUserType -> . simpleIdentifier typeArguments
    (39) simpleUserType -> . simpleIdentifier
    (48) functionTypeParameters_p -> . LPAREN parameter ftp RPAREN
    (49) functionTypeParameters_p -> . LPAREN parameter RPAREN
    (50) functionTypeParameters_t -> . LPAREN type RPAREN
    (51) functionTypeParameters_t -> . LPAREN type ftp RPAREN

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    SUSPEND         shift and go to state 57
    LPAREN          shift and go to state 58

    parameter                      shift and go to state 341
    type                           shift and go to state 342
    simpleIdentifier               shift and go to state 142
    typeModifiers                  shift and go to state 51
    optype                         shift and go to state 52
    typeModifier                   shift and go to state 53
    parenthesizedType              shift and go to state 54
    functionType                   shift and go to state 55
    userType                       shift and go to state 56
    receiverType                   shift and go to state 59
    functionTypeParameters         shift and go to state 60
    simpleUserType                 shift and go to state 61
    functionTypeParameters_p       shift and go to state 62
    functionTypeParameters_t       shift and go to state 63

state 256

    (48) functionTypeParameters_p -> LPAREN parameter ftp . RPAREN

    RPAREN          shift and go to state 343


state 257

    (49) functionTypeParameters_p -> LPAREN parameter RPAREN .

    SETA            reduce using rule 49 (functionTypeParameters_p -> LPAREN parameter RPAREN .)


state 258

    (44) functionType -> receiverType PONTO functionTypeParameters . SETA type

    SETA            shift and go to state 344


state 259

    (48) functionTypeParameters_p -> LPAREN . parameter ftp RPAREN
    (49) functionTypeParameters_p -> LPAREN . parameter RPAREN
    (50) functionTypeParameters_t -> LPAREN . type RPAREN
    (51) functionTypeParameters_t -> LPAREN . type ftp RPAREN
    (25) parameter -> . simpleIdentifier DOISP type
    (26) type -> . typeModifiers optype
    (27) type -> . optype
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (31) typeModifiers -> . typeModifier
    (32) typeModifiers -> . typeModifier typeModifiers
    (28) optype -> . parenthesizedType
    (29) optype -> . functionType
    (30) optype -> . userType
    (33) typeModifier -> . SUSPEND
    (56) parenthesizedType -> . LPAREN type RPAREN
    (44) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (45) functionType -> . functionTypeParameters SETA type
    (37) userType -> . simpleUserType
    (57) receiverType -> . typeModifier rt
    (46) functionTypeParameters -> . functionTypeParameters_p
    (47) functionTypeParameters -> . functionTypeParameters_t
    (38) simpleUserType -> . simpleIdentifier typeArguments
    (39) simpleUserType -> . simpleIdentifier
    (48) functionTypeParameters_p -> . LPAREN parameter ftp RPAREN
    (49) functionTypeParameters_p -> . LPAREN parameter RPAREN
    (50) functionTypeParameters_t -> . LPAREN type RPAREN
    (51) functionTypeParameters_t -> . LPAREN type ftp RPAREN

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    SUSPEND         shift and go to state 57
    LPAREN          shift and go to state 58

    parameter                      shift and go to state 141
    type                           shift and go to state 345
    simpleIdentifier               shift and go to state 142
    typeModifiers                  shift and go to state 51
    optype                         shift and go to state 52
    typeModifier                   shift and go to state 53
    parenthesizedType              shift and go to state 54
    functionType                   shift and go to state 55
    userType                       shift and go to state 56
    receiverType                   shift and go to state 59
    functionTypeParameters         shift and go to state 60
    simpleUserType                 shift and go to state 61
    functionTypeParameters_p       shift and go to state 62
    functionTypeParameters_t       shift and go to state 63

state 260

    (45) functionType -> functionTypeParameters SETA type .

    LCHAVE          reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    FUN             reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    $end            reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    FOR             reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    WHILE           reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    DO              reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    ID              reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    CROSSINLINE     reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    IMPORT          reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    INIT            reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    NOINLINE        reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    OUT             reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    VARARG          reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    WHERE           reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    INT             reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    FLOAT           reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    BOOLEAN         reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    STRING          reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    ARRAY           reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    CHAR            reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    OBJECT          reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    CONST           reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    CONSTRUCTOR     reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    EOF             reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    FALSE           reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    FUNCTION        reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    NULL            reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    NULLABLE        reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    NUMBER          reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    OPERATOR        reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    SMARTCAST       reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    THIS            reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    TRUE            reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    VAL             reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    VAR             reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    DOUBLE          reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    WHEN            reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    LONG            reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    LPAREN          reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    LITERAL_STRING  reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    COLONCOLON      reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    LCCT            reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    IF              reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    RETURN          reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    RETURN_AT       reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    CONTINUE        reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    CONTINUE_AT     reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    BREAK           reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    BREAK_AT        reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    RCHAVE          reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    INCREMENTO      reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    DECREMENTO      reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    MINUS           reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    PLUS            reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    NOT             reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    SUSPEND         reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    PV              reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    ELSE            reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    MENOR           reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    PONTO           reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    AS              reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    MAISIGUAL       reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    MENOSIGUAL      reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    MULTIGUAL       reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    DIVIGUAL        reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    MODIGUAL        reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    MULT            reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    DIVIDE          reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    MOD             reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    PONTOPONTO      reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    ELVIS           reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    IN              reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    NOT_IN          reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    IS              reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    NOT_IS          reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    MAIOR           reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    MENORIGUAL      reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    MAIORIGUAL      reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    DIFERENTE       reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    IDENTIDADE      reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    IGUALDADE       reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    SEMIDENTIDADE   reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    AND             reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    OR              reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    COMMA           reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    RPAREN          reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    RCCT            reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    ATRIBUICAO      reduce using rule 45 (functionType -> functionTypeParameters SETA type .)
    SETA            reduce using rule 45 (functionType -> functionTypeParameters SETA type .)


state 261

    (148) typeArguments -> MENOR ta . MAIOR

    MAIOR           shift and go to state 346


state 262

    (149) typeArguments -> MENOR MAIOR .

    LCHAVE          reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    FUN             reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    $end            reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    FOR             reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    WHILE           reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    DO              reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    ID              reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    CROSSINLINE     reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    IMPORT          reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    INIT            reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    NOINLINE        reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    OUT             reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    VARARG          reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    WHERE           reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    INT             reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    FLOAT           reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    BOOLEAN         reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    STRING          reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    ARRAY           reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    CHAR            reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    OBJECT          reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    CONST           reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    CONSTRUCTOR     reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    EOF             reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    FALSE           reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    FUNCTION        reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    NULL            reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    NULLABLE        reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    NUMBER          reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    OPERATOR        reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    SMARTCAST       reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    THIS            reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    TRUE            reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    VAL             reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    VAR             reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    DOUBLE          reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    WHEN            reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    LONG            reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    LPAREN          reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    LITERAL_STRING  reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    COLONCOLON      reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    LCCT            reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    IF              reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    RETURN          reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    RETURN_AT       reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    CONTINUE        reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    CONTINUE_AT     reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    BREAK           reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    BREAK_AT        reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    RCHAVE          reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    INCREMENTO      reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    DECREMENTO      reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    MINUS           reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    PLUS            reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    NOT             reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    SUSPEND         reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    PV              reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    ELSE            reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    MENOR           reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    PONTO           reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    AS              reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    MAISIGUAL       reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    MENOSIGUAL      reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    MULTIGUAL       reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    DIVIGUAL        reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    MODIGUAL        reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    MULT            reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    DIVIDE          reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    MOD             reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    PONTOPONTO      reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    ELVIS           reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    IN              reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    NOT_IN          reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    IS              reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    NOT_IS          reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    MAIOR           reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    MENORIGUAL      reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    MAIORIGUAL      reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    DIFERENTE       reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    IDENTIDADE      reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    IGUALDADE       reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    SEMIDENTIDADE   reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    AND             reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    OR              reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    COMMA           reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    RPAREN          reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    RCCT            reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    ATRIBUICAO      reduce using rule 149 (typeArguments -> MENOR MAIOR .)
    SETA            reduce using rule 149 (typeArguments -> MENOR MAIOR .)


state 263

    (150) ta -> typeProjection .
    (151) ta -> typeProjection . COMMA ta
    (42) typeProjectionModifiers -> typeProjection .

    MAIOR           reduce using rule 150 (ta -> typeProjection .)
    COMMA           shift and go to state 347
    SUSPEND         reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    LPAREN          reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    ID              reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    CROSSINLINE     reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    IMPORT          reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    INIT            reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    NOINLINE        reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    OUT             reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    VARARG          reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    WHERE           reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    INT             reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    FLOAT           reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    BOOLEAN         reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    STRING          reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    ARRAY           reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    CHAR            reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    OBJECT          reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    CONST           reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    CONSTRUCTOR     reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    EOF             reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    FALSE           reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    FUNCTION        reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    NULL            reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    NULLABLE        reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    NUMBER          reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    OPERATOR        reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    SMARTCAST       reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    THIS            reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    TRUE            reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    VAL             reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    VAR             reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    DOUBLE          reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    WHEN            reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    LONG            reduce using rule 42 (typeProjectionModifiers -> typeProjection .)


state 264

    (40) typeProjection -> typeProjectionModifiers . type
    (26) type -> . typeModifiers optype
    (27) type -> . optype
    (31) typeModifiers -> . typeModifier
    (32) typeModifiers -> . typeModifier typeModifiers
    (28) optype -> . parenthesizedType
    (29) optype -> . functionType
    (30) optype -> . userType
    (33) typeModifier -> . SUSPEND
    (56) parenthesizedType -> . LPAREN type RPAREN
    (44) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (45) functionType -> . functionTypeParameters SETA type
    (37) userType -> . simpleUserType
    (57) receiverType -> . typeModifier rt
    (46) functionTypeParameters -> . functionTypeParameters_p
    (47) functionTypeParameters -> . functionTypeParameters_t
    (38) simpleUserType -> . simpleIdentifier typeArguments
    (39) simpleUserType -> . simpleIdentifier
    (48) functionTypeParameters_p -> . LPAREN parameter ftp RPAREN
    (49) functionTypeParameters_p -> . LPAREN parameter RPAREN
    (50) functionTypeParameters_t -> . LPAREN type RPAREN
    (51) functionTypeParameters_t -> . LPAREN type ftp RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    SUSPEND         shift and go to state 57
    LPAREN          shift and go to state 58
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    type                           shift and go to state 348
    typeModifiers                  shift and go to state 51
    optype                         shift and go to state 52
    typeModifier                   shift and go to state 53
    parenthesizedType              shift and go to state 54
    functionType                   shift and go to state 55
    userType                       shift and go to state 56
    receiverType                   shift and go to state 59
    functionTypeParameters         shift and go to state 60
    simpleUserType                 shift and go to state 61
    functionTypeParameters_p       shift and go to state 62
    functionTypeParameters_t       shift and go to state 63
    simpleIdentifier               shift and go to state 64

state 265

    (41) typeProjection -> type .

    COMMA           reduce using rule 41 (typeProjection -> type .)
    MAIOR           reduce using rule 41 (typeProjection -> type .)
    SUSPEND         reduce using rule 41 (typeProjection -> type .)
    LPAREN          reduce using rule 41 (typeProjection -> type .)
    ID              reduce using rule 41 (typeProjection -> type .)
    CROSSINLINE     reduce using rule 41 (typeProjection -> type .)
    IMPORT          reduce using rule 41 (typeProjection -> type .)
    INIT            reduce using rule 41 (typeProjection -> type .)
    NOINLINE        reduce using rule 41 (typeProjection -> type .)
    OUT             reduce using rule 41 (typeProjection -> type .)
    VARARG          reduce using rule 41 (typeProjection -> type .)
    WHERE           reduce using rule 41 (typeProjection -> type .)
    INT             reduce using rule 41 (typeProjection -> type .)
    FLOAT           reduce using rule 41 (typeProjection -> type .)
    BOOLEAN         reduce using rule 41 (typeProjection -> type .)
    STRING          reduce using rule 41 (typeProjection -> type .)
    ARRAY           reduce using rule 41 (typeProjection -> type .)
    CHAR            reduce using rule 41 (typeProjection -> type .)
    OBJECT          reduce using rule 41 (typeProjection -> type .)
    CONST           reduce using rule 41 (typeProjection -> type .)
    CONSTRUCTOR     reduce using rule 41 (typeProjection -> type .)
    EOF             reduce using rule 41 (typeProjection -> type .)
    FALSE           reduce using rule 41 (typeProjection -> type .)
    FUNCTION        reduce using rule 41 (typeProjection -> type .)
    NULL            reduce using rule 41 (typeProjection -> type .)
    NULLABLE        reduce using rule 41 (typeProjection -> type .)
    NUMBER          reduce using rule 41 (typeProjection -> type .)
    OPERATOR        reduce using rule 41 (typeProjection -> type .)
    SMARTCAST       reduce using rule 41 (typeProjection -> type .)
    THIS            reduce using rule 41 (typeProjection -> type .)
    TRUE            reduce using rule 41 (typeProjection -> type .)
    VAL             reduce using rule 41 (typeProjection -> type .)
    VAR             reduce using rule 41 (typeProjection -> type .)
    DOUBLE          reduce using rule 41 (typeProjection -> type .)
    WHEN            reduce using rule 41 (typeProjection -> type .)
    LONG            reduce using rule 41 (typeProjection -> type .)


state 266

    (43) typeProjectionModifiers -> typeProjectionModifier . typeProjectionModifiers
    (42) typeProjectionModifiers -> . typeProjection
    (43) typeProjectionModifiers -> . typeProjectionModifier typeProjectionModifiers
    (40) typeProjection -> . typeProjectionModifiers type
    (41) typeProjection -> . type
    (34) typeProjectionModifier -> . varianceModifier
    (26) type -> . typeModifiers optype
    (27) type -> . optype
    (35) varianceModifier -> . IN
    (36) varianceModifier -> . OUT
    (31) typeModifiers -> . typeModifier
    (32) typeModifiers -> . typeModifier typeModifiers
    (28) optype -> . parenthesizedType
    (29) optype -> . functionType
    (30) optype -> . userType
    (33) typeModifier -> . SUSPEND
    (56) parenthesizedType -> . LPAREN type RPAREN
    (44) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (45) functionType -> . functionTypeParameters SETA type
    (37) userType -> . simpleUserType
    (57) receiverType -> . typeModifier rt
    (46) functionTypeParameters -> . functionTypeParameters_p
    (47) functionTypeParameters -> . functionTypeParameters_t
    (38) simpleUserType -> . simpleIdentifier typeArguments
    (39) simpleUserType -> . simpleIdentifier
    (48) functionTypeParameters_p -> . LPAREN parameter ftp RPAREN
    (49) functionTypeParameters_p -> . LPAREN parameter RPAREN
    (50) functionTypeParameters_t -> . LPAREN type RPAREN
    (51) functionTypeParameters_t -> . LPAREN type ftp RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    IN              shift and go to state 268
    OUT             shift and go to state 269
    SUSPEND         shift and go to state 57
    LPAREN          shift and go to state 58
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    typeProjectionModifier         shift and go to state 266
    typeProjectionModifiers        shift and go to state 349
    typeProjection                 shift and go to state 350
    type                           shift and go to state 265
    varianceModifier               shift and go to state 267
    typeModifiers                  shift and go to state 51
    optype                         shift and go to state 52
    typeModifier                   shift and go to state 53
    parenthesizedType              shift and go to state 54
    functionType                   shift and go to state 55
    userType                       shift and go to state 56
    receiverType                   shift and go to state 59
    functionTypeParameters         shift and go to state 60
    simpleUserType                 shift and go to state 61
    functionTypeParameters_p       shift and go to state 62
    functionTypeParameters_t       shift and go to state 63
    simpleIdentifier               shift and go to state 64

state 267

    (34) typeProjectionModifier -> varianceModifier .

    IN              reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    OUT             reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    SUSPEND         reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    LPAREN          reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    ID              reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    CROSSINLINE     reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    IMPORT          reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    INIT            reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    NOINLINE        reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    VARARG          reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    WHERE           reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    INT             reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    FLOAT           reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    BOOLEAN         reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    STRING          reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    ARRAY           reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    CHAR            reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    OBJECT          reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    CONST           reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    CONSTRUCTOR     reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    EOF             reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    FALSE           reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    FUNCTION        reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    NULL            reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    NULLABLE        reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    NUMBER          reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    OPERATOR        reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    SMARTCAST       reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    THIS            reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    TRUE            reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    VAL             reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    VAR             reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    DOUBLE          reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    WHEN            reduce using rule 34 (typeProjectionModifier -> varianceModifier .)
    LONG            reduce using rule 34 (typeProjectionModifier -> varianceModifier .)


state 268

    (35) varianceModifier -> IN .

    IN              reduce using rule 35 (varianceModifier -> IN .)
    OUT             reduce using rule 35 (varianceModifier -> IN .)
    SUSPEND         reduce using rule 35 (varianceModifier -> IN .)
    LPAREN          reduce using rule 35 (varianceModifier -> IN .)
    ID              reduce using rule 35 (varianceModifier -> IN .)
    CROSSINLINE     reduce using rule 35 (varianceModifier -> IN .)
    IMPORT          reduce using rule 35 (varianceModifier -> IN .)
    INIT            reduce using rule 35 (varianceModifier -> IN .)
    NOINLINE        reduce using rule 35 (varianceModifier -> IN .)
    VARARG          reduce using rule 35 (varianceModifier -> IN .)
    WHERE           reduce using rule 35 (varianceModifier -> IN .)
    INT             reduce using rule 35 (varianceModifier -> IN .)
    FLOAT           reduce using rule 35 (varianceModifier -> IN .)
    BOOLEAN         reduce using rule 35 (varianceModifier -> IN .)
    STRING          reduce using rule 35 (varianceModifier -> IN .)
    ARRAY           reduce using rule 35 (varianceModifier -> IN .)
    CHAR            reduce using rule 35 (varianceModifier -> IN .)
    OBJECT          reduce using rule 35 (varianceModifier -> IN .)
    CONST           reduce using rule 35 (varianceModifier -> IN .)
    CONSTRUCTOR     reduce using rule 35 (varianceModifier -> IN .)
    EOF             reduce using rule 35 (varianceModifier -> IN .)
    FALSE           reduce using rule 35 (varianceModifier -> IN .)
    FUNCTION        reduce using rule 35 (varianceModifier -> IN .)
    NULL            reduce using rule 35 (varianceModifier -> IN .)
    NULLABLE        reduce using rule 35 (varianceModifier -> IN .)
    NUMBER          reduce using rule 35 (varianceModifier -> IN .)
    OPERATOR        reduce using rule 35 (varianceModifier -> IN .)
    SMARTCAST       reduce using rule 35 (varianceModifier -> IN .)
    THIS            reduce using rule 35 (varianceModifier -> IN .)
    TRUE            reduce using rule 35 (varianceModifier -> IN .)
    VAL             reduce using rule 35 (varianceModifier -> IN .)
    VAR             reduce using rule 35 (varianceModifier -> IN .)
    DOUBLE          reduce using rule 35 (varianceModifier -> IN .)
    WHEN            reduce using rule 35 (varianceModifier -> IN .)
    LONG            reduce using rule 35 (varianceModifier -> IN .)


state 269

    (36) varianceModifier -> OUT .
    (265) simpleIdentifier -> OUT .

  ! reduce/reduce conflict for SUSPEND resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for LPAREN resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for ID resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for IMPORT resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for INIT resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for OUT resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for VARARG resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for WHERE resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for INT resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for FLOAT resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for STRING resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for ARRAY resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for CHAR resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for OBJECT resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for CONST resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for EOF resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for FALSE resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for NULL resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for NUMBER resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for THIS resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for TRUE resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for VAL resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for VAR resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for WHEN resolved using rule 36 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for LONG resolved using rule 36 (varianceModifier -> OUT .)
    IN              reduce using rule 36 (varianceModifier -> OUT .)
    OUT             reduce using rule 36 (varianceModifier -> OUT .)
    SUSPEND         reduce using rule 36 (varianceModifier -> OUT .)
    LPAREN          reduce using rule 36 (varianceModifier -> OUT .)
    ID              reduce using rule 36 (varianceModifier -> OUT .)
    CROSSINLINE     reduce using rule 36 (varianceModifier -> OUT .)
    IMPORT          reduce using rule 36 (varianceModifier -> OUT .)
    INIT            reduce using rule 36 (varianceModifier -> OUT .)
    NOINLINE        reduce using rule 36 (varianceModifier -> OUT .)
    VARARG          reduce using rule 36 (varianceModifier -> OUT .)
    WHERE           reduce using rule 36 (varianceModifier -> OUT .)
    INT             reduce using rule 36 (varianceModifier -> OUT .)
    FLOAT           reduce using rule 36 (varianceModifier -> OUT .)
    BOOLEAN         reduce using rule 36 (varianceModifier -> OUT .)
    STRING          reduce using rule 36 (varianceModifier -> OUT .)
    ARRAY           reduce using rule 36 (varianceModifier -> OUT .)
    CHAR            reduce using rule 36 (varianceModifier -> OUT .)
    OBJECT          reduce using rule 36 (varianceModifier -> OUT .)
    CONST           reduce using rule 36 (varianceModifier -> OUT .)
    CONSTRUCTOR     reduce using rule 36 (varianceModifier -> OUT .)
    EOF             reduce using rule 36 (varianceModifier -> OUT .)
    FALSE           reduce using rule 36 (varianceModifier -> OUT .)
    FUNCTION        reduce using rule 36 (varianceModifier -> OUT .)
    NULL            reduce using rule 36 (varianceModifier -> OUT .)
    NULLABLE        reduce using rule 36 (varianceModifier -> OUT .)
    NUMBER          reduce using rule 36 (varianceModifier -> OUT .)
    OPERATOR        reduce using rule 36 (varianceModifier -> OUT .)
    SMARTCAST       reduce using rule 36 (varianceModifier -> OUT .)
    THIS            reduce using rule 36 (varianceModifier -> OUT .)
    TRUE            reduce using rule 36 (varianceModifier -> OUT .)
    VAL             reduce using rule 36 (varianceModifier -> OUT .)
    VAR             reduce using rule 36 (varianceModifier -> OUT .)
    DOUBLE          reduce using rule 36 (varianceModifier -> OUT .)
    WHEN            reduce using rule 36 (varianceModifier -> OUT .)
    LONG            reduce using rule 36 (varianceModifier -> OUT .)
    MENOR           reduce using rule 265 (simpleIdentifier -> OUT .)
    COMMA           reduce using rule 265 (simpleIdentifier -> OUT .)
    MAIOR           reduce using rule 265 (simpleIdentifier -> OUT .)

  ! SUSPEND         [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! LPAREN          [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! ID              [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! CROSSINLINE     [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! IMPORT          [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! INIT            [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! NOINLINE        [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! OUT             [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! VARARG          [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! WHERE           [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! INT             [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! FLOAT           [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! BOOLEAN         [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! STRING          [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! ARRAY           [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! CHAR            [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! OBJECT          [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! CONST           [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! CONSTRUCTOR     [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! EOF             [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! FALSE           [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! FUNCTION        [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! NULL            [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! NULLABLE        [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! NUMBER          [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! OPERATOR        [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! SMARTCAST       [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! THIS            [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! TRUE            [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! VAL             [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! VAR             [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! DOUBLE          [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! WHEN            [ reduce using rule 265 (simpleIdentifier -> OUT .) ]
  ! LONG            [ reduce using rule 265 (simpleIdentifier -> OUT .) ]


state 270

    (183) lambdaLiteral -> RCHAVE ll LCHAVE .

    INCREMENTO      reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    DECREMENTO      reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    MENOR           reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    LCCT            reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    LPAREN          reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    COLONCOLON      reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    RCHAVE          reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    PONTO           reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    AS              reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    MAISIGUAL       reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    MENOSIGUAL      reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    MULTIGUAL       reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    DIVIGUAL        reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    MODIGUAL        reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    MULT            reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    DIVIDE          reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    MOD             reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    PLUS            reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    MINUS           reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    PONTOPONTO      reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    ID              reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    CROSSINLINE     reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    IMPORT          reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    INIT            reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    NOINLINE        reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    OUT             reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    VARARG          reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    WHERE           reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    INT             reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    FLOAT           reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    BOOLEAN         reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    STRING          reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    ARRAY           reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    CHAR            reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    OBJECT          reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    CONST           reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    CONSTRUCTOR     reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    EOF             reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    FALSE           reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    FUNCTION        reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    NULL            reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    NULLABLE        reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    NUMBER          reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    OPERATOR        reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    SMARTCAST       reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    THIS            reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    TRUE            reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    VAL             reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    VAR             reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    DOUBLE          reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    WHEN            reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    LONG            reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    ELVIS           reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    IN              reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    NOT_IN          reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    IS              reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    NOT_IS          reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    MAIOR           reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    MENORIGUAL      reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    MAIORIGUAL      reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    DIFERENTE       reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    IDENTIDADE      reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    IGUALDADE       reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    SEMIDENTIDADE   reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    AND             reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    OR              reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    FUN             reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    FOR             reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    WHILE           reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    DO              reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    LITERAL_STRING  reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    IF              reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    RETURN          reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    RETURN_AT       reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    CONTINUE        reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    CONTINUE_AT     reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    BREAK           reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    BREAK_AT        reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    NOT             reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    SUSPEND         reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    COMMA           reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    RPAREN          reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    LCHAVE          reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    PV              reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    ELSE            reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    RCCT            reduce using rule 183 (lambdaLiteral -> RCHAVE ll LCHAVE .)


state 271

    (185) ll -> lambdaParameters SETA . statements
    (59) statements -> . statement
    (60) statements -> . statement statements
    (61) statement -> . functionDeclaration
    (62) statement -> . assignment
    (63) statement -> . loopStatement
    (64) statement -> . expression
    (3) functionDeclaration -> . FUN simpleIdentifier functionValueParameters fd2 fd3
    (80) assignment -> . directlyAssignableExpression IGUALDADE expression
    (81) assignment -> . assignableExpression assignmentAndOperator expression
    (68) loopStatement -> . forStatement_MD
    (69) loopStatement -> . forStatement_VD
    (70) loopStatement -> . whileStatement
    (71) loopStatement -> . doWhileStatement
    (82) expression -> . disjunction
    (125) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (126) directlyAssignableExpression -> . simpleIdentifier
    (127) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (129) assignableExpression -> . prefixUnaryExpression
    (130) assignableExpression -> . parenthesizedAssignableExpression
    (72) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (73) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (74) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (75) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (76) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (77) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (78) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (79) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (128) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (131) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (33) typeModifier -> . SUSPEND
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type

    FUN             shift and go to state 77
    FOR             shift and go to state 90
    WHILE           shift and go to state 92
    DO              shift and go to state 93
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    LPAREN          shift and go to state 91
    LITERAL_STRING  shift and go to state 99
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    SUSPEND         shift and go to state 57

    statements                     shift and go to state 351
    statement                      shift and go to state 72
    functionDeclaration            shift and go to state 73
    assignment                     shift and go to state 74
    loopStatement                  shift and go to state 75
    expression                     shift and go to state 76
    simpleIdentifier               shift and go to state 78
    directlyAssignableExpression   shift and go to state 79
    assignableExpression           shift and go to state 80
    forStatement_MD                shift and go to state 81
    forStatement_VD                shift and go to state 82
    whileStatement                 shift and go to state 83
    doWhileStatement               shift and go to state 84
    disjunction                    shift and go to state 85
    postfixUnaryExpression         shift and go to state 86
    parenthesizedDirectlyAssignableExpression shift and go to state 87
    prefixUnaryExpression          shift and go to state 88
    parenthesizedAssignableExpression shift and go to state 89
    conjunction                    shift and go to state 94
    primaryExpression              shift and go to state 95
    preue                          shift and go to state 96
    equality                       shift and go to state 97
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    unaryPrefix                    shift and go to state 105
    comparison                     shift and go to state 106
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    infixOperation                 shift and go to state 121
    typeModifier                   shift and go to state 122
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133

state 272

    (186) ll -> SETA statements .

    LCHAVE          reduce using rule 186 (ll -> SETA statements .)


state 273

    (188) lambdaParameters -> lambdaParameter COMMA . lambdaParameters
    (187) lambdaParameters -> . lambdaParameter
    (188) lambdaParameters -> . lambdaParameter COMMA lambdaParameters
    (189) lambdaParameter -> . variableDeclaration
    (190) lambdaParameter -> . multiVariableDeclaration DOISP type
    (191) lambdaParameter -> . multiVariableDeclaration
    (19) variableDeclaration -> . simpleIdentifier DOISP type
    (20) variableDeclaration -> . simpleIdentifier
    (21) multiVariableDeclaration -> . LPAREN mvd RPAREN
    (22) multiVariableDeclaration -> . LPAREN RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    LPAREN          shift and go to state 304
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    lambdaParameter                shift and go to state 160
    lambdaParameters               shift and go to state 352
    variableDeclaration            shift and go to state 161
    multiVariableDeclaration       shift and go to state 162
    simpleIdentifier               shift and go to state 307

state 274

    (190) lambdaParameter -> multiVariableDeclaration DOISP . type
    (26) type -> . typeModifiers optype
    (27) type -> . optype
    (31) typeModifiers -> . typeModifier
    (32) typeModifiers -> . typeModifier typeModifiers
    (28) optype -> . parenthesizedType
    (29) optype -> . functionType
    (30) optype -> . userType
    (33) typeModifier -> . SUSPEND
    (56) parenthesizedType -> . LPAREN type RPAREN
    (44) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (45) functionType -> . functionTypeParameters SETA type
    (37) userType -> . simpleUserType
    (57) receiverType -> . typeModifier rt
    (46) functionTypeParameters -> . functionTypeParameters_p
    (47) functionTypeParameters -> . functionTypeParameters_t
    (38) simpleUserType -> . simpleIdentifier typeArguments
    (39) simpleUserType -> . simpleIdentifier
    (48) functionTypeParameters_p -> . LPAREN parameter ftp RPAREN
    (49) functionTypeParameters_p -> . LPAREN parameter RPAREN
    (50) functionTypeParameters_t -> . LPAREN type RPAREN
    (51) functionTypeParameters_t -> . LPAREN type ftp RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    SUSPEND         shift and go to state 57
    LPAREN          shift and go to state 58
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    type                           shift and go to state 353
    typeModifiers                  shift and go to state 51
    optype                         shift and go to state 52
    typeModifier                   shift and go to state 53
    parenthesizedType              shift and go to state 54
    functionType                   shift and go to state 55
    userType                       shift and go to state 56
    receiverType                   shift and go to state 59
    functionTypeParameters         shift and go to state 60
    simpleUserType                 shift and go to state 61
    functionTypeParameters_p       shift and go to state 62
    functionTypeParameters_t       shift and go to state 63
    simpleIdentifier               shift and go to state 64

state 275

    (19) variableDeclaration -> simpleIdentifier DOISP . type
    (26) type -> . typeModifiers optype
    (27) type -> . optype
    (31) typeModifiers -> . typeModifier
    (32) typeModifiers -> . typeModifier typeModifiers
    (28) optype -> . parenthesizedType
    (29) optype -> . functionType
    (30) optype -> . userType
    (33) typeModifier -> . SUSPEND
    (56) parenthesizedType -> . LPAREN type RPAREN
    (44) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (45) functionType -> . functionTypeParameters SETA type
    (37) userType -> . simpleUserType
    (57) receiverType -> . typeModifier rt
    (46) functionTypeParameters -> . functionTypeParameters_p
    (47) functionTypeParameters -> . functionTypeParameters_t
    (38) simpleUserType -> . simpleIdentifier typeArguments
    (39) simpleUserType -> . simpleIdentifier
    (48) functionTypeParameters_p -> . LPAREN parameter ftp RPAREN
    (49) functionTypeParameters_p -> . LPAREN parameter RPAREN
    (50) functionTypeParameters_t -> . LPAREN type RPAREN
    (51) functionTypeParameters_t -> . LPAREN type ftp RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    SUSPEND         shift and go to state 57
    LPAREN          shift and go to state 58
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    simpleIdentifier               shift and go to state 64
    type                           shift and go to state 354
    typeModifiers                  shift and go to state 51
    optype                         shift and go to state 52
    typeModifier                   shift and go to state 53
    parenthesizedType              shift and go to state 54
    functionType                   shift and go to state 55
    userType                       shift and go to state 56
    receiverType                   shift and go to state 59
    functionTypeParameters         shift and go to state 60
    simpleUserType                 shift and go to state 61
    functionTypeParameters_p       shift and go to state 62
    functionTypeParameters_t       shift and go to state 63

state 276

    (21) multiVariableDeclaration -> LPAREN mvd . RPAREN

    RPAREN          shift and go to state 355


state 277

    (22) multiVariableDeclaration -> LPAREN RPAREN .

    DOISP           reduce using rule 22 (multiVariableDeclaration -> LPAREN RPAREN .)
    COMMA           reduce using rule 22 (multiVariableDeclaration -> LPAREN RPAREN .)
    SETA            reduce using rule 22 (multiVariableDeclaration -> LPAREN RPAREN .)
    IN              reduce using rule 22 (multiVariableDeclaration -> LPAREN RPAREN .)


state 278

    (23) mvd -> variableDeclaration .
    (24) mvd -> variableDeclaration . COMMA mvd

    RPAREN          reduce using rule 23 (mvd -> variableDeclaration .)
    COMMA           shift and go to state 356


state 279

    (126) directlyAssignableExpression -> simpleIdentifier .
    (19) variableDeclaration -> simpleIdentifier . DOISP type
    (20) variableDeclaration -> simpleIdentifier .
    (160) primaryExpression -> simpleIdentifier .
    (115) label -> simpleIdentifier .

  ! reduce/reduce conflict for RPAREN resolved using rule 20 (variableDeclaration -> simpleIdentifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 20 (variableDeclaration -> simpleIdentifier .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for INT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FLOAT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for STRING resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ARRAY resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CHAR resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OBJECT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONST resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for EOF resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FALSE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NULL resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NUMBER resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for THIS resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for TRUE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VAL resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VAR resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHEN resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LONG resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 115 (label -> simpleIdentifier .)
    DOISP           shift and go to state 275
    COMMA           reduce using rule 20 (variableDeclaration -> simpleIdentifier .)
    RPAREN          reduce using rule 20 (variableDeclaration -> simpleIdentifier .)
    MENOR           reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    PONTO           reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    AS              reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MULT            reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    DIVIDE          reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MOD             reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    ELVIS           reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    IN              reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    NOT_IN          reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    IS              reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    NOT_IS          reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MAIOR           reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    DIFERENTE       reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    IGUALDADE       reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    AND             reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    OR              reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    INCREMENTO      reduce using rule 115 (label -> simpleIdentifier .)
    DECREMENTO      reduce using rule 115 (label -> simpleIdentifier .)
    MINUS           reduce using rule 115 (label -> simpleIdentifier .)
    PLUS            reduce using rule 115 (label -> simpleIdentifier .)
    NOT             reduce using rule 115 (label -> simpleIdentifier .)
    ID              reduce using rule 115 (label -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 115 (label -> simpleIdentifier .)
    IMPORT          reduce using rule 115 (label -> simpleIdentifier .)
    INIT            reduce using rule 115 (label -> simpleIdentifier .)
    NOINLINE        reduce using rule 115 (label -> simpleIdentifier .)
    OUT             reduce using rule 115 (label -> simpleIdentifier .)
    VARARG          reduce using rule 115 (label -> simpleIdentifier .)
    WHERE           reduce using rule 115 (label -> simpleIdentifier .)
    INT             reduce using rule 115 (label -> simpleIdentifier .)
    FLOAT           reduce using rule 115 (label -> simpleIdentifier .)
    BOOLEAN         reduce using rule 115 (label -> simpleIdentifier .)
    STRING          reduce using rule 115 (label -> simpleIdentifier .)
    ARRAY           reduce using rule 115 (label -> simpleIdentifier .)
    CHAR            reduce using rule 115 (label -> simpleIdentifier .)
    OBJECT          reduce using rule 115 (label -> simpleIdentifier .)
    CONST           reduce using rule 115 (label -> simpleIdentifier .)
    CONSTRUCTOR     reduce using rule 115 (label -> simpleIdentifier .)
    EOF             reduce using rule 115 (label -> simpleIdentifier .)
    FALSE           reduce using rule 115 (label -> simpleIdentifier .)
    FUNCTION        reduce using rule 115 (label -> simpleIdentifier .)
    NULL            reduce using rule 115 (label -> simpleIdentifier .)
    NULLABLE        reduce using rule 115 (label -> simpleIdentifier .)
    NUMBER          reduce using rule 115 (label -> simpleIdentifier .)
    OPERATOR        reduce using rule 115 (label -> simpleIdentifier .)
    SMARTCAST       reduce using rule 115 (label -> simpleIdentifier .)
    THIS            reduce using rule 115 (label -> simpleIdentifier .)
    TRUE            reduce using rule 115 (label -> simpleIdentifier .)
    VAL             reduce using rule 115 (label -> simpleIdentifier .)
    VAR             reduce using rule 115 (label -> simpleIdentifier .)
    DOUBLE          reduce using rule 115 (label -> simpleIdentifier .)
    WHEN            reduce using rule 115 (label -> simpleIdentifier .)
    LONG            reduce using rule 115 (label -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 115 (label -> simpleIdentifier .)
    LPAREN          reduce using rule 115 (label -> simpleIdentifier .)
    COLONCOLON      reduce using rule 115 (label -> simpleIdentifier .)
    LCCT            reduce using rule 115 (label -> simpleIdentifier .)
    IF              reduce using rule 115 (label -> simpleIdentifier .)
    RETURN          reduce using rule 115 (label -> simpleIdentifier .)
    RETURN_AT       reduce using rule 115 (label -> simpleIdentifier .)
    CONTINUE        reduce using rule 115 (label -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 115 (label -> simpleIdentifier .)
    BREAK           reduce using rule 115 (label -> simpleIdentifier .)
    BREAK_AT        reduce using rule 115 (label -> simpleIdentifier .)
    RCHAVE          reduce using rule 115 (label -> simpleIdentifier .)
    FUN             reduce using rule 115 (label -> simpleIdentifier .)
    SUSPEND         reduce using rule 115 (label -> simpleIdentifier .)

  ! RPAREN          [ reduce using rule 126 (directlyAssignableExpression -> simpleIdentifier .) ]
  ! INCREMENTO      [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! RCHAVE          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! RPAREN          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! PLUS            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! INT             [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! FLOAT           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! BOOLEAN         [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! STRING          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! ARRAY           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! CHAR            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! OBJECT          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! CONST           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! CONSTRUCTOR     [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! EOF             [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! FALSE           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! FUNCTION        [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! NULL            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! NULLABLE        [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! NUMBER          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! OPERATOR        [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! SMARTCAST       [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! THIS            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! TRUE            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! VAL             [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! VAR             [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! DOUBLE          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! WHEN            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! LONG            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]


state 280

    (192) anonymousFunction -> FUN type PONTO . parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> FUN type PONTO . parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> FUN type PONTO . parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> FUN type PONTO . parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> FUN type PONTO . parametersWithOptionalType functionBody
    (201) anonymousFunction -> FUN type PONTO . parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> FUN type PONTO . parametersWithOptionalType DOISP type
    (205) anonymousFunction -> FUN type PONTO . parametersWithOptionalType
    (172) parametersWithOptionalType -> . LPAREN pwot RPAREN
    (173) parametersWithOptionalType -> . LPAREN RPAREN

    LPAREN          shift and go to state 358

    parametersWithOptionalType     shift and go to state 357

state 281

    (193) anonymousFunction -> FUN parametersWithOptionalType DOISP . type typeConstraint functionBody
    (198) anonymousFunction -> FUN parametersWithOptionalType DOISP . type functionBody
    (199) anonymousFunction -> FUN parametersWithOptionalType DOISP . type typeConstraint
    (26) type -> . typeModifiers optype
    (27) type -> . optype
    (31) typeModifiers -> . typeModifier
    (32) typeModifiers -> . typeModifier typeModifiers
    (28) optype -> . parenthesizedType
    (29) optype -> . functionType
    (30) optype -> . userType
    (33) typeModifier -> . SUSPEND
    (56) parenthesizedType -> . LPAREN type RPAREN
    (44) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (45) functionType -> . functionTypeParameters SETA type
    (37) userType -> . simpleUserType
    (57) receiverType -> . typeModifier rt
    (46) functionTypeParameters -> . functionTypeParameters_p
    (47) functionTypeParameters -> . functionTypeParameters_t
    (38) simpleUserType -> . simpleIdentifier typeArguments
    (39) simpleUserType -> . simpleIdentifier
    (48) functionTypeParameters_p -> . LPAREN parameter ftp RPAREN
    (49) functionTypeParameters_p -> . LPAREN parameter RPAREN
    (50) functionTypeParameters_t -> . LPAREN type RPAREN
    (51) functionTypeParameters_t -> . LPAREN type ftp RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    SUSPEND         shift and go to state 57
    LPAREN          shift and go to state 58
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    type                           shift and go to state 359
    typeModifiers                  shift and go to state 51
    optype                         shift and go to state 52
    typeModifier                   shift and go to state 53
    parenthesizedType              shift and go to state 54
    functionType                   shift and go to state 55
    userType                       shift and go to state 56
    receiverType                   shift and go to state 59
    functionTypeParameters         shift and go to state 60
    simpleUserType                 shift and go to state 61
    functionTypeParameters_p       shift and go to state 62
    functionTypeParameters_t       shift and go to state 63
    simpleIdentifier               shift and go to state 64

state 282

    (197) anonymousFunction -> FUN parametersWithOptionalType typeConstraint . functionBody
    (204) anonymousFunction -> FUN parametersWithOptionalType typeConstraint .
    (10) functionBody -> . block
    (11) functionBody -> . ATRIBUICAO expression
    (67) block -> . LCHAVE statements RCHAVE

  ! shift/reduce conflict for LCHAVE resolved as shift
    INCREMENTO      reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    DECREMENTO      reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    MENOR           reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    LCCT            reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    LPAREN          reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    COLONCOLON      reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    RCHAVE          reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    PONTO           reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    AS              reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    MAISIGUAL       reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    MENOSIGUAL      reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    MULTIGUAL       reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    DIVIGUAL        reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    MODIGUAL        reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    MULT            reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    DIVIDE          reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    MOD             reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    PLUS            reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    MINUS           reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    PONTOPONTO      reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    ID              reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    CROSSINLINE     reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    IMPORT          reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    INIT            reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    NOINLINE        reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    OUT             reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    VARARG          reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    WHERE           reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    INT             reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    FLOAT           reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    BOOLEAN         reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    STRING          reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    ARRAY           reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    CHAR            reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    OBJECT          reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    CONST           reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    CONSTRUCTOR     reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    EOF             reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    FALSE           reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    FUNCTION        reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    NULL            reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    NULLABLE        reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    NUMBER          reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    OPERATOR        reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    SMARTCAST       reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    THIS            reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    TRUE            reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    VAL             reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    VAR             reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    DOUBLE          reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    WHEN            reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    LONG            reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    ELVIS           reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    IN              reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    NOT_IN          reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    IS              reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    NOT_IS          reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    MAIOR           reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    MENORIGUAL      reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    MAIORIGUAL      reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    DIFERENTE       reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    IDENTIDADE      reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    IGUALDADE       reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    SEMIDENTIDADE   reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    AND             reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    OR              reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    FUN             reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    FOR             reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    WHILE           reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    DO              reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    LITERAL_STRING  reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    IF              reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    RETURN          reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    RETURN_AT       reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    CONTINUE        reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    CONTINUE_AT     reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    BREAK           reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    BREAK_AT        reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    NOT             reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    SUSPEND         reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    COMMA           reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    RPAREN          reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    PV              reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    ELSE            reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    RCCT            reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .)
    ATRIBUICAO      shift and go to state 286
    LCHAVE          shift and go to state 49

  ! LCHAVE          [ reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint .) ]

    functionBody                   shift and go to state 360
    block                          shift and go to state 285

state 283

    (203) anonymousFunction -> FUN parametersWithOptionalType functionBody .

    INCREMENTO      reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    DECREMENTO      reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    MENOR           reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    LCCT            reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    LPAREN          reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    COLONCOLON      reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    RCHAVE          reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    PONTO           reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    AS              reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    MAISIGUAL       reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    MENOSIGUAL      reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    MULTIGUAL       reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    DIVIGUAL        reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    MODIGUAL        reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    MULT            reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    DIVIDE          reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    MOD             reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    PLUS            reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    MINUS           reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    PONTOPONTO      reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    ID              reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    CROSSINLINE     reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    IMPORT          reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    INIT            reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    NOINLINE        reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    OUT             reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    VARARG          reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    WHERE           reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    INT             reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    FLOAT           reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    BOOLEAN         reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    STRING          reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    ARRAY           reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    CHAR            reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    OBJECT          reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    CONST           reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    CONSTRUCTOR     reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    EOF             reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    FALSE           reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    FUNCTION        reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    NULL            reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    NULLABLE        reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    NUMBER          reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    OPERATOR        reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    SMARTCAST       reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    THIS            reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    TRUE            reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    VAL             reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    VAR             reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    DOUBLE          reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    WHEN            reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    LONG            reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    ELVIS           reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    IN              reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    NOT_IN          reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    IS              reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    NOT_IS          reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    MAIOR           reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    MENORIGUAL      reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    MAIORIGUAL      reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    DIFERENTE       reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    IDENTIDADE      reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    IGUALDADE       reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    SEMIDENTIDADE   reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    AND             reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    OR              reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    FUN             reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    FOR             reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    WHILE           reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    DO              reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    LITERAL_STRING  reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    IF              reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    RETURN          reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    RETURN_AT       reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    CONTINUE        reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    CONTINUE_AT     reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    BREAK           reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    BREAK_AT        reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    NOT             reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    SUSPEND         reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    COMMA           reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    RPAREN          reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    LCHAVE          reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    PV              reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    ELSE            reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    RCCT            reduce using rule 203 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)


state 284

    (209) typeConstraint -> simpleIdentifier . DOISP type

    DOISP           shift and go to state 361


state 285

    (10) functionBody -> block .

    FUN             reduce using rule 10 (functionBody -> block .)
    FOR             reduce using rule 10 (functionBody -> block .)
    WHILE           reduce using rule 10 (functionBody -> block .)
    DO              reduce using rule 10 (functionBody -> block .)
    ID              reduce using rule 10 (functionBody -> block .)
    CROSSINLINE     reduce using rule 10 (functionBody -> block .)
    IMPORT          reduce using rule 10 (functionBody -> block .)
    INIT            reduce using rule 10 (functionBody -> block .)
    NOINLINE        reduce using rule 10 (functionBody -> block .)
    OUT             reduce using rule 10 (functionBody -> block .)
    VARARG          reduce using rule 10 (functionBody -> block .)
    WHERE           reduce using rule 10 (functionBody -> block .)
    INT             reduce using rule 10 (functionBody -> block .)
    FLOAT           reduce using rule 10 (functionBody -> block .)
    BOOLEAN         reduce using rule 10 (functionBody -> block .)
    STRING          reduce using rule 10 (functionBody -> block .)
    ARRAY           reduce using rule 10 (functionBody -> block .)
    CHAR            reduce using rule 10 (functionBody -> block .)
    OBJECT          reduce using rule 10 (functionBody -> block .)
    CONST           reduce using rule 10 (functionBody -> block .)
    CONSTRUCTOR     reduce using rule 10 (functionBody -> block .)
    EOF             reduce using rule 10 (functionBody -> block .)
    FALSE           reduce using rule 10 (functionBody -> block .)
    FUNCTION        reduce using rule 10 (functionBody -> block .)
    NULL            reduce using rule 10 (functionBody -> block .)
    NULLABLE        reduce using rule 10 (functionBody -> block .)
    NUMBER          reduce using rule 10 (functionBody -> block .)
    OPERATOR        reduce using rule 10 (functionBody -> block .)
    SMARTCAST       reduce using rule 10 (functionBody -> block .)
    THIS            reduce using rule 10 (functionBody -> block .)
    TRUE            reduce using rule 10 (functionBody -> block .)
    VAL             reduce using rule 10 (functionBody -> block .)
    VAR             reduce using rule 10 (functionBody -> block .)
    DOUBLE          reduce using rule 10 (functionBody -> block .)
    WHEN            reduce using rule 10 (functionBody -> block .)
    LONG            reduce using rule 10 (functionBody -> block .)
    LPAREN          reduce using rule 10 (functionBody -> block .)
    LITERAL_STRING  reduce using rule 10 (functionBody -> block .)
    COLONCOLON      reduce using rule 10 (functionBody -> block .)
    LCCT            reduce using rule 10 (functionBody -> block .)
    IF              reduce using rule 10 (functionBody -> block .)
    RETURN          reduce using rule 10 (functionBody -> block .)
    RETURN_AT       reduce using rule 10 (functionBody -> block .)
    CONTINUE        reduce using rule 10 (functionBody -> block .)
    CONTINUE_AT     reduce using rule 10 (functionBody -> block .)
    BREAK           reduce using rule 10 (functionBody -> block .)
    BREAK_AT        reduce using rule 10 (functionBody -> block .)
    RCHAVE          reduce using rule 10 (functionBody -> block .)
    INCREMENTO      reduce using rule 10 (functionBody -> block .)
    DECREMENTO      reduce using rule 10 (functionBody -> block .)
    MINUS           reduce using rule 10 (functionBody -> block .)
    PLUS            reduce using rule 10 (functionBody -> block .)
    NOT             reduce using rule 10 (functionBody -> block .)
    SUSPEND         reduce using rule 10 (functionBody -> block .)
    LCHAVE          reduce using rule 10 (functionBody -> block .)
    PV              reduce using rule 10 (functionBody -> block .)
    ELSE            reduce using rule 10 (functionBody -> block .)
    MENOR           reduce using rule 10 (functionBody -> block .)
    PONTO           reduce using rule 10 (functionBody -> block .)
    AS              reduce using rule 10 (functionBody -> block .)
    MAISIGUAL       reduce using rule 10 (functionBody -> block .)
    MENOSIGUAL      reduce using rule 10 (functionBody -> block .)
    MULTIGUAL       reduce using rule 10 (functionBody -> block .)
    DIVIGUAL        reduce using rule 10 (functionBody -> block .)
    MODIGUAL        reduce using rule 10 (functionBody -> block .)
    MULT            reduce using rule 10 (functionBody -> block .)
    DIVIDE          reduce using rule 10 (functionBody -> block .)
    MOD             reduce using rule 10 (functionBody -> block .)
    PONTOPONTO      reduce using rule 10 (functionBody -> block .)
    ELVIS           reduce using rule 10 (functionBody -> block .)
    IN              reduce using rule 10 (functionBody -> block .)
    NOT_IN          reduce using rule 10 (functionBody -> block .)
    IS              reduce using rule 10 (functionBody -> block .)
    NOT_IS          reduce using rule 10 (functionBody -> block .)
    MAIOR           reduce using rule 10 (functionBody -> block .)
    MENORIGUAL      reduce using rule 10 (functionBody -> block .)
    MAIORIGUAL      reduce using rule 10 (functionBody -> block .)
    DIFERENTE       reduce using rule 10 (functionBody -> block .)
    IDENTIDADE      reduce using rule 10 (functionBody -> block .)
    IGUALDADE       reduce using rule 10 (functionBody -> block .)
    SEMIDENTIDADE   reduce using rule 10 (functionBody -> block .)
    AND             reduce using rule 10 (functionBody -> block .)
    OR              reduce using rule 10 (functionBody -> block .)
    COMMA           reduce using rule 10 (functionBody -> block .)
    RPAREN          reduce using rule 10 (functionBody -> block .)
    RCCT            reduce using rule 10 (functionBody -> block .)


state 286

    (11) functionBody -> ATRIBUICAO . expression
    (82) expression -> . disjunction
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (33) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 99
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    LPAREN          shift and go to state 152
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57

    expression                     shift and go to state 362
    disjunction                    shift and go to state 85
    conjunction                    shift and go to state 94
    equality                       shift and go to state 97
    comparison                     shift and go to state 106
    infixOperation                 shift and go to state 121
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    simpleIdentifier               shift and go to state 149
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133
    prefixUnaryExpression          shift and go to state 150
    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 151
    unaryPrefix                    shift and go to state 105
    primaryExpression              shift and go to state 95
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122

state 287

    (172) parametersWithOptionalType -> LPAREN pwot . RPAREN

    RPAREN          shift and go to state 363


state 288

    (173) parametersWithOptionalType -> LPAREN RPAREN .

    DOISP           reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    ATRIBUICAO      reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    ID              reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    CROSSINLINE     reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    IMPORT          reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    INIT            reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    NOINLINE        reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    OUT             reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    VARARG          reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    WHERE           reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    INT             reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    FLOAT           reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    BOOLEAN         reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    STRING          reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    ARRAY           reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    CHAR            reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    OBJECT          reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    CONST           reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    CONSTRUCTOR     reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    EOF             reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    FALSE           reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    FUNCTION        reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    NULL            reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    NULLABLE        reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    NUMBER          reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    OPERATOR        reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    SMARTCAST       reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    THIS            reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    TRUE            reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    VAL             reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    VAR             reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    DOUBLE          reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    WHEN            reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    LONG            reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    LCHAVE          reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    INCREMENTO      reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    DECREMENTO      reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    MENOR           reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    LCCT            reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    LPAREN          reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    COLONCOLON      reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    RCHAVE          reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    PONTO           reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    AS              reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    MAISIGUAL       reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    MENOSIGUAL      reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    MULTIGUAL       reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    DIVIGUAL        reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    MODIGUAL        reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    MULT            reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    MOD             reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    PLUS            reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    MINUS           reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    PONTOPONTO      reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    ELVIS           reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    IN              reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    NOT_IN          reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    IS              reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    NOT_IS          reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    MAIOR           reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    MENORIGUAL      reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    MAIORIGUAL      reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    DIFERENTE       reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    IDENTIDADE      reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    IGUALDADE       reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    SEMIDENTIDADE   reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    AND             reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    OR              reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    FUN             reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    FOR             reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    WHILE           reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    DO              reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    LITERAL_STRING  reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    IF              reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    RETURN          reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    RETURN_AT       reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    CONTINUE        reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    CONTINUE_AT     reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    BREAK           reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    BREAK_AT        reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    NOT             reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    SUSPEND         reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    PV              reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    ELSE            reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    COMMA           reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    RPAREN          reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)
    RCCT            reduce using rule 173 (parametersWithOptionalType -> LPAREN RPAREN .)


state 289

    (174) pwot -> parameterWithOptionalType .
    (175) pwot -> parameterWithOptionalType . COMMA pwot COMMA

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 174 (pwot -> parameterWithOptionalType .)
    COMMA           shift and go to state 364

  ! COMMA           [ reduce using rule 174 (pwot -> parameterWithOptionalType .) ]


state 290

    (25) parameter -> simpleIdentifier . DOISP type
    (177) parameterWithOptionalType -> simpleIdentifier . DOISP type
    (179) parameterWithOptionalType -> simpleIdentifier .
    (38) simpleUserType -> simpleIdentifier . typeArguments
    (39) simpleUserType -> simpleIdentifier .
    (148) typeArguments -> . MENOR ta MAIOR
    (149) typeArguments -> . MENOR MAIOR

  ! reduce/reduce conflict for RPAREN resolved using rule 39 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 39 (simpleUserType -> simpleIdentifier .)
    DOISP           shift and go to state 365
    RPAREN          reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    COMMA           reduce using rule 39 (simpleUserType -> simpleIdentifier .)
    MENOR           shift and go to state 146

  ! COMMA           [ reduce using rule 179 (parameterWithOptionalType -> simpleIdentifier .) ]
  ! RPAREN          [ reduce using rule 179 (parameterWithOptionalType -> simpleIdentifier .) ]

    typeArguments                  shift and go to state 145

state 291

    (176) parameterWithOptionalType -> parameterModifiers . simpleIdentifier DOISP type
    (178) parameterWithOptionalType -> parameterModifiers . simpleIdentifier
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    simpleIdentifier               shift and go to state 366

state 292

    (261) simpleIdentifier -> CROSSINLINE .
    (182) parameterModifiers -> CROSSINLINE .

    DOISP           reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    MENOR           reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    COMMA           reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    RPAREN          reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    ID              reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    CROSSINLINE     reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    IMPORT          reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    INIT            reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    NOINLINE        reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    OUT             reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    VARARG          reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    WHERE           reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    INT             reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    FLOAT           reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    BOOLEAN         reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    STRING          reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    ARRAY           reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    CHAR            reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    OBJECT          reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    CONST           reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    CONSTRUCTOR     reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    EOF             reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    FALSE           reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    FUNCTION        reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    NULL            reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    NULLABLE        reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    NUMBER          reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    OPERATOR        reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    SMARTCAST       reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    THIS            reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    TRUE            reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    VAL             reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    VAR             reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    DOUBLE          reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    WHEN            reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    LONG            reduce using rule 182 (parameterModifiers -> CROSSINLINE .)


state 293

    (264) simpleIdentifier -> NOINLINE .
    (181) parameterModifiers -> NOINLINE .

    DOISP           reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    MENOR           reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    COMMA           reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    RPAREN          reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    ID              reduce using rule 181 (parameterModifiers -> NOINLINE .)
    CROSSINLINE     reduce using rule 181 (parameterModifiers -> NOINLINE .)
    IMPORT          reduce using rule 181 (parameterModifiers -> NOINLINE .)
    INIT            reduce using rule 181 (parameterModifiers -> NOINLINE .)
    NOINLINE        reduce using rule 181 (parameterModifiers -> NOINLINE .)
    OUT             reduce using rule 181 (parameterModifiers -> NOINLINE .)
    VARARG          reduce using rule 181 (parameterModifiers -> NOINLINE .)
    WHERE           reduce using rule 181 (parameterModifiers -> NOINLINE .)
    INT             reduce using rule 181 (parameterModifiers -> NOINLINE .)
    FLOAT           reduce using rule 181 (parameterModifiers -> NOINLINE .)
    BOOLEAN         reduce using rule 181 (parameterModifiers -> NOINLINE .)
    STRING          reduce using rule 181 (parameterModifiers -> NOINLINE .)
    ARRAY           reduce using rule 181 (parameterModifiers -> NOINLINE .)
    CHAR            reduce using rule 181 (parameterModifiers -> NOINLINE .)
    OBJECT          reduce using rule 181 (parameterModifiers -> NOINLINE .)
    CONST           reduce using rule 181 (parameterModifiers -> NOINLINE .)
    CONSTRUCTOR     reduce using rule 181 (parameterModifiers -> NOINLINE .)
    EOF             reduce using rule 181 (parameterModifiers -> NOINLINE .)
    FALSE           reduce using rule 181 (parameterModifiers -> NOINLINE .)
    FUNCTION        reduce using rule 181 (parameterModifiers -> NOINLINE .)
    NULL            reduce using rule 181 (parameterModifiers -> NOINLINE .)
    NULLABLE        reduce using rule 181 (parameterModifiers -> NOINLINE .)
    NUMBER          reduce using rule 181 (parameterModifiers -> NOINLINE .)
    OPERATOR        reduce using rule 181 (parameterModifiers -> NOINLINE .)
    SMARTCAST       reduce using rule 181 (parameterModifiers -> NOINLINE .)
    THIS            reduce using rule 181 (parameterModifiers -> NOINLINE .)
    TRUE            reduce using rule 181 (parameterModifiers -> NOINLINE .)
    VAL             reduce using rule 181 (parameterModifiers -> NOINLINE .)
    VAR             reduce using rule 181 (parameterModifiers -> NOINLINE .)
    DOUBLE          reduce using rule 181 (parameterModifiers -> NOINLINE .)
    WHEN            reduce using rule 181 (parameterModifiers -> NOINLINE .)
    LONG            reduce using rule 181 (parameterModifiers -> NOINLINE .)


state 294

    (266) simpleIdentifier -> VARARG .
    (180) parameterModifiers -> VARARG .

    DOISP           reduce using rule 266 (simpleIdentifier -> VARARG .)
    MENOR           reduce using rule 266 (simpleIdentifier -> VARARG .)
    COMMA           reduce using rule 266 (simpleIdentifier -> VARARG .)
    RPAREN          reduce using rule 266 (simpleIdentifier -> VARARG .)
    ID              reduce using rule 180 (parameterModifiers -> VARARG .)
    CROSSINLINE     reduce using rule 180 (parameterModifiers -> VARARG .)
    IMPORT          reduce using rule 180 (parameterModifiers -> VARARG .)
    INIT            reduce using rule 180 (parameterModifiers -> VARARG .)
    NOINLINE        reduce using rule 180 (parameterModifiers -> VARARG .)
    OUT             reduce using rule 180 (parameterModifiers -> VARARG .)
    VARARG          reduce using rule 180 (parameterModifiers -> VARARG .)
    WHERE           reduce using rule 180 (parameterModifiers -> VARARG .)
    INT             reduce using rule 180 (parameterModifiers -> VARARG .)
    FLOAT           reduce using rule 180 (parameterModifiers -> VARARG .)
    BOOLEAN         reduce using rule 180 (parameterModifiers -> VARARG .)
    STRING          reduce using rule 180 (parameterModifiers -> VARARG .)
    ARRAY           reduce using rule 180 (parameterModifiers -> VARARG .)
    CHAR            reduce using rule 180 (parameterModifiers -> VARARG .)
    OBJECT          reduce using rule 180 (parameterModifiers -> VARARG .)
    CONST           reduce using rule 180 (parameterModifiers -> VARARG .)
    CONSTRUCTOR     reduce using rule 180 (parameterModifiers -> VARARG .)
    EOF             reduce using rule 180 (parameterModifiers -> VARARG .)
    FALSE           reduce using rule 180 (parameterModifiers -> VARARG .)
    FUNCTION        reduce using rule 180 (parameterModifiers -> VARARG .)
    NULL            reduce using rule 180 (parameterModifiers -> VARARG .)
    NULLABLE        reduce using rule 180 (parameterModifiers -> VARARG .)
    NUMBER          reduce using rule 180 (parameterModifiers -> VARARG .)
    OPERATOR        reduce using rule 180 (parameterModifiers -> VARARG .)
    SMARTCAST       reduce using rule 180 (parameterModifiers -> VARARG .)
    THIS            reduce using rule 180 (parameterModifiers -> VARARG .)
    TRUE            reduce using rule 180 (parameterModifiers -> VARARG .)
    VAL             reduce using rule 180 (parameterModifiers -> VARARG .)
    VAR             reduce using rule 180 (parameterModifiers -> VARARG .)
    DOUBLE          reduce using rule 180 (parameterModifiers -> VARARG .)
    WHEN            reduce using rule 180 (parameterModifiers -> VARARG .)
    LONG            reduce using rule 180 (parameterModifiers -> VARARG .)


state 295

    (80) assignment -> directlyAssignableExpression IGUALDADE expression .
    (217) jumpExpression -> expression .

  ! reduce/reduce conflict for FUN resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for FOR resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for DO resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for ID resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for INIT resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for OUT resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for VARARG resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for WHERE resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for INT resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for STRING resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for CHAR resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for CONST resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for EOF resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for FALSE resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for NULL resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for THIS resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for TRUE resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for VAL resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for VAR resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for WHEN resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for LONG resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for LCCT resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for IF resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for RETURN resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for BREAK resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for NOT resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for PV resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for MENOR resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for PONTO resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for AS resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for MULT resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for MOD resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for IN resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for IS resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for AND resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for OR resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
  ! reduce/reduce conflict for RCCT resolved using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    FUN             reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    FOR             reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    WHILE           reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    DO              reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    ID              reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    CROSSINLINE     reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    IMPORT          reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    INIT            reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    NOINLINE        reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    OUT             reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    VARARG          reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    WHERE           reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    INT             reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    FLOAT           reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    BOOLEAN         reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    STRING          reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    ARRAY           reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    CHAR            reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    OBJECT          reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    CONST           reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    CONSTRUCTOR     reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    EOF             reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    FALSE           reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    FUNCTION        reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    NULL            reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    NULLABLE        reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    NUMBER          reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    OPERATOR        reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    SMARTCAST       reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    THIS            reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    TRUE            reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    VAL             reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    VAR             reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    DOUBLE          reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    WHEN            reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    LONG            reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    LPAREN          reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    LITERAL_STRING  reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    COLONCOLON      reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    LCCT            reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    IF              reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    RETURN          reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    RETURN_AT       reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    CONTINUE        reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    CONTINUE_AT     reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    BREAK           reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    BREAK_AT        reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    RCHAVE          reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    INCREMENTO      reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    DECREMENTO      reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    MINUS           reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    PLUS            reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    NOT             reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    SUSPEND         reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    LCHAVE          reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    PV              reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    ELSE            reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    MENOR           reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    PONTO           reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    AS              reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    MAISIGUAL       reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    MENOSIGUAL      reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    MULTIGUAL       reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    DIVIGUAL        reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    MODIGUAL        reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    MULT            reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    DIVIDE          reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    MOD             reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    PONTOPONTO      reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    ELVIS           reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    IN              reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    NOT_IN          reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    IS              reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    NOT_IS          reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    MAIOR           reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    MENORIGUAL      reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    MAIORIGUAL      reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    DIFERENTE       reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    IDENTIDADE      reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    IGUALDADE       reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    SEMIDENTIDADE   reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    AND             reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    OR              reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    COMMA           reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    RPAREN          reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    RCCT            reduce using rule 80 (assignment -> directlyAssignableExpression IGUALDADE expression .)

  ! FUN             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! FOR             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! WHILE           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DO              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! ID              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CROSSINLINE     [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IMPORT          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! INIT            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NOINLINE        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! OUT             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! VARARG          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! WHERE           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! INT             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! FLOAT           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! BOOLEAN         [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! STRING          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! ARRAY           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CHAR            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! OBJECT          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CONST           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CONSTRUCTOR     [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! EOF             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! FALSE           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! FUNCTION        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NULL            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NULLABLE        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NUMBER          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! OPERATOR        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! SMARTCAST       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! THIS            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! TRUE            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! VAL             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! VAR             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DOUBLE          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! WHEN            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! LONG            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! LPAREN          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! LITERAL_STRING  [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! COLONCOLON      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! LCCT            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IF              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RETURN          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RETURN_AT       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CONTINUE        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CONTINUE_AT     [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! BREAK           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! BREAK_AT        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RCHAVE          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! INCREMENTO      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DECREMENTO      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MINUS           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! PLUS            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NOT             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! SUSPEND         [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! LCHAVE          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! PV              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! ELSE            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MENOR           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! PONTO           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! AS              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MAISIGUAL       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MENOSIGUAL      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MULTIGUAL       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DIVIGUAL        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MODIGUAL        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MULT            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DIVIDE          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MOD             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! PONTOPONTO      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! ELVIS           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IN              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NOT_IN          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IS              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NOT_IS          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MAIOR           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MENORIGUAL      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MAIORIGUAL      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DIFERENTE       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IDENTIDADE      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IGUALDADE       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! AND             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! OR              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! COMMA           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RCCT            [ reduce using rule 217 (jumpExpression -> expression .) ]


state 296

    (81) assignment -> assignableExpression assignmentAndOperator expression .
    (217) jumpExpression -> expression .

  ! reduce/reduce conflict for FUN resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for FOR resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for DO resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for ID resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for INIT resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for OUT resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for VARARG resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for WHERE resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for INT resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for STRING resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for CHAR resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for CONST resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for EOF resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for FALSE resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for NULL resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for THIS resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for TRUE resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for VAL resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for VAR resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for WHEN resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for LONG resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for LCCT resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for IF resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for RETURN resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for BREAK resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for NOT resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for PV resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MENOR resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for PONTO resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for AS resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MULT resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MOD resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for IN resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for IS resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for AND resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for OR resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for RCCT resolved using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    FUN             reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    FOR             reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    WHILE           reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    DO              reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    ID              reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    CROSSINLINE     reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    IMPORT          reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    INIT            reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    NOINLINE        reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    OUT             reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    VARARG          reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    WHERE           reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    INT             reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    FLOAT           reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    BOOLEAN         reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    STRING          reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    ARRAY           reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    CHAR            reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    OBJECT          reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    CONST           reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    CONSTRUCTOR     reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    EOF             reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    FALSE           reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    FUNCTION        reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    NULL            reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    NULLABLE        reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    NUMBER          reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    OPERATOR        reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    SMARTCAST       reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    THIS            reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    TRUE            reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    VAL             reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    VAR             reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    DOUBLE          reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    WHEN            reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    LONG            reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    LPAREN          reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    LITERAL_STRING  reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    COLONCOLON      reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    LCCT            reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    IF              reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    RETURN          reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    RETURN_AT       reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    CONTINUE        reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    CONTINUE_AT     reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    BREAK           reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    BREAK_AT        reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    RCHAVE          reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    INCREMENTO      reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    DECREMENTO      reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    MINUS           reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    PLUS            reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    NOT             reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    SUSPEND         reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    LCHAVE          reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    PV              reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    ELSE            reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    MENOR           reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    PONTO           reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    AS              reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    MAISIGUAL       reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    MENOSIGUAL      reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    MULTIGUAL       reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    DIVIGUAL        reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    MODIGUAL        reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    MULT            reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    DIVIDE          reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    MOD             reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    PONTOPONTO      reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    ELVIS           reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    IN              reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    NOT_IN          reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    IS              reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    NOT_IS          reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    MAIOR           reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    MENORIGUAL      reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    MAIORIGUAL      reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    DIFERENTE       reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    IDENTIDADE      reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    IGUALDADE       reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    SEMIDENTIDADE   reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    AND             reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    OR              reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    COMMA           reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    RPAREN          reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)
    RCCT            reduce using rule 81 (assignment -> assignableExpression assignmentAndOperator expression .)

  ! FUN             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! FOR             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! WHILE           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DO              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! ID              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CROSSINLINE     [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IMPORT          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! INIT            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NOINLINE        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! OUT             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! VARARG          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! WHERE           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! INT             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! FLOAT           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! BOOLEAN         [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! STRING          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! ARRAY           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CHAR            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! OBJECT          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CONST           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CONSTRUCTOR     [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! EOF             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! FALSE           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! FUNCTION        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NULL            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NULLABLE        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NUMBER          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! OPERATOR        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! SMARTCAST       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! THIS            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! TRUE            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! VAL             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! VAR             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DOUBLE          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! WHEN            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! LONG            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! LPAREN          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! LITERAL_STRING  [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! COLONCOLON      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! LCCT            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IF              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RETURN          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RETURN_AT       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CONTINUE        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CONTINUE_AT     [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! BREAK           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! BREAK_AT        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RCHAVE          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! INCREMENTO      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DECREMENTO      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MINUS           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! PLUS            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NOT             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! SUSPEND         [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! LCHAVE          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! PV              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! ELSE            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MENOR           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! PONTO           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! AS              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MAISIGUAL       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MENOSIGUAL      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MULTIGUAL       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DIVIGUAL        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MODIGUAL        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MULT            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DIVIDE          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MOD             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! PONTOPONTO      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! ELVIS           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IN              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NOT_IN          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IS              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NOT_IS          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MAIOR           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MENORIGUAL      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MAIORIGUAL      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DIFERENTE       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IDENTIDADE      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IGUALDADE       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! AND             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! OR              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! COMMA           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RCCT            [ reduce using rule 217 (jumpExpression -> expression .) ]


state 297

    (135) indexingSuffix -> LCCT isuf . RCCT

    RCCT            shift and go to state 367


state 298

    (136) indexingSuffix -> LCCT RCCT .

    IGUALDADE       reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    RPAREN          reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    INCREMENTO      reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    DECREMENTO      reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    MENOR           reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    LCCT            reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    LPAREN          reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    COLONCOLON      reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    RCHAVE          reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    PONTO           reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    AS              reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    MAISIGUAL       reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    MENOSIGUAL      reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    MULTIGUAL       reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    DIVIGUAL        reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    MODIGUAL        reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    MULT            reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    DIVIDE          reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    MOD             reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    PLUS            reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    MINUS           reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    PONTOPONTO      reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    ID              reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    CROSSINLINE     reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    IMPORT          reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    INIT            reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    NOINLINE        reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    OUT             reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    VARARG          reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    WHERE           reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    INT             reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    FLOAT           reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    BOOLEAN         reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    STRING          reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    ARRAY           reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    CHAR            reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    OBJECT          reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    CONST           reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    CONSTRUCTOR     reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    EOF             reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    FALSE           reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    FUNCTION        reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    NULL            reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    NULLABLE        reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    NUMBER          reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    OPERATOR        reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    SMARTCAST       reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    THIS            reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    TRUE            reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    VAL             reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    VAR             reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    DOUBLE          reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    WHEN            reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    LONG            reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    ELVIS           reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    IN              reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    NOT_IN          reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    IS              reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    NOT_IS          reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    MAIOR           reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    MENORIGUAL      reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    MAIORIGUAL      reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    DIFERENTE       reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    IDENTIDADE      reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    SEMIDENTIDADE   reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    AND             reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    OR              reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    FUN             reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    FOR             reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    WHILE           reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    DO              reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    LITERAL_STRING  reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    IF              reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    RETURN          reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    RETURN_AT       reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    CONTINUE        reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    CONTINUE_AT     reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    BREAK           reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    BREAK_AT        reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    NOT             reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    SUSPEND         reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    COMMA           reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    LCHAVE          reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    PV              reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    ELSE            reduce using rule 136 (indexingSuffix -> LCCT RCCT .)
    RCCT            reduce using rule 136 (indexingSuffix -> LCCT RCCT .)


state 299

    (137) isuf -> expression .
    (138) isuf -> expression . COMMA isuf
    (217) jumpExpression -> expression .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RCCT resolved using rule 137 (isuf -> expression .)
    RCCT            reduce using rule 137 (isuf -> expression .)
    COMMA           shift and go to state 368
    INCREMENTO      reduce using rule 217 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 217 (jumpExpression -> expression .)
    MENOR           reduce using rule 217 (jumpExpression -> expression .)
    LCCT            reduce using rule 217 (jumpExpression -> expression .)
    LPAREN          reduce using rule 217 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 217 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 217 (jumpExpression -> expression .)
    PONTO           reduce using rule 217 (jumpExpression -> expression .)
    AS              reduce using rule 217 (jumpExpression -> expression .)
    MULT            reduce using rule 217 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 217 (jumpExpression -> expression .)
    MOD             reduce using rule 217 (jumpExpression -> expression .)
    PLUS            reduce using rule 217 (jumpExpression -> expression .)
    MINUS           reduce using rule 217 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 217 (jumpExpression -> expression .)
    ID              reduce using rule 217 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 217 (jumpExpression -> expression .)
    IMPORT          reduce using rule 217 (jumpExpression -> expression .)
    INIT            reduce using rule 217 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 217 (jumpExpression -> expression .)
    OUT             reduce using rule 217 (jumpExpression -> expression .)
    VARARG          reduce using rule 217 (jumpExpression -> expression .)
    WHERE           reduce using rule 217 (jumpExpression -> expression .)
    INT             reduce using rule 217 (jumpExpression -> expression .)
    FLOAT           reduce using rule 217 (jumpExpression -> expression .)
    BOOLEAN         reduce using rule 217 (jumpExpression -> expression .)
    STRING          reduce using rule 217 (jumpExpression -> expression .)
    ARRAY           reduce using rule 217 (jumpExpression -> expression .)
    CHAR            reduce using rule 217 (jumpExpression -> expression .)
    OBJECT          reduce using rule 217 (jumpExpression -> expression .)
    CONST           reduce using rule 217 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 217 (jumpExpression -> expression .)
    EOF             reduce using rule 217 (jumpExpression -> expression .)
    FALSE           reduce using rule 217 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 217 (jumpExpression -> expression .)
    NULL            reduce using rule 217 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 217 (jumpExpression -> expression .)
    NUMBER          reduce using rule 217 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 217 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 217 (jumpExpression -> expression .)
    THIS            reduce using rule 217 (jumpExpression -> expression .)
    TRUE            reduce using rule 217 (jumpExpression -> expression .)
    VAL             reduce using rule 217 (jumpExpression -> expression .)
    VAR             reduce using rule 217 (jumpExpression -> expression .)
    DOUBLE          reduce using rule 217 (jumpExpression -> expression .)
    WHEN            reduce using rule 217 (jumpExpression -> expression .)
    LONG            reduce using rule 217 (jumpExpression -> expression .)
    ELVIS           reduce using rule 217 (jumpExpression -> expression .)
    IN              reduce using rule 217 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 217 (jumpExpression -> expression .)
    IS              reduce using rule 217 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 217 (jumpExpression -> expression .)
    MAIOR           reduce using rule 217 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 217 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 217 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 217 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 217 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 217 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 217 (jumpExpression -> expression .)
    AND             reduce using rule 217 (jumpExpression -> expression .)
    OR              reduce using rule 217 (jumpExpression -> expression .)

  ! COMMA           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RCCT            [ reduce using rule 217 (jumpExpression -> expression .) ]


state 300

    (139) navigationSuffix -> memberAccessOperator simpleIdentifier . CLASS

    CLASS           shift and go to state 369


state 301

    (140) navigationSuffix -> memberAccessOperator parenthesizedExpression . CLASS

    CLASS           shift and go to state 370


state 302

    (108) asExpression -> prefixUnaryExpression asOperator type .

    INCREMENTO      reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    DECREMENTO      reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    MENOR           reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    LCCT            reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    LPAREN          reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    COLONCOLON      reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    RCHAVE          reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    PONTO           reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    AS              reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    MAISIGUAL       reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    MENOSIGUAL      reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    MULTIGUAL       reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    DIVIGUAL        reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    MODIGUAL        reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    MULT            reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    DIVIDE          reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    MOD             reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    PLUS            reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    MINUS           reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    PONTOPONTO      reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    ID              reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    CROSSINLINE     reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    IMPORT          reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    INIT            reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    NOINLINE        reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    OUT             reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    VARARG          reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    WHERE           reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    INT             reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    FLOAT           reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    BOOLEAN         reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    STRING          reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    ARRAY           reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    CHAR            reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    OBJECT          reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    CONST           reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    CONSTRUCTOR     reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    EOF             reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    FALSE           reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    FUNCTION        reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    NULL            reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    NULLABLE        reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    NUMBER          reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    OPERATOR        reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    SMARTCAST       reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    THIS            reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    TRUE            reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    VAL             reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    VAR             reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    DOUBLE          reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    WHEN            reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    LONG            reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    ELVIS           reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    IN              reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    NOT_IN          reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    IS              reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    NOT_IS          reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    MAIOR           reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    MENORIGUAL      reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    MAIORIGUAL      reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    DIFERENTE       reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    IDENTIDADE      reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    IGUALDADE       reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    SEMIDENTIDADE   reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    AND             reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    OR              reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    FUN             reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    FOR             reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    WHILE           reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    DO              reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    LITERAL_STRING  reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    IF              reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    RETURN          reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    RETURN_AT       reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    CONTINUE        reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    CONTINUE_AT     reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    BREAK           reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    BREAK_AT        reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    NOT             reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    SUSPEND         reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    COMMA           reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    RPAREN          reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    LCHAVE          reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    PV              reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    ELSE            reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)
    RCCT            reduce using rule 108 (asExpression -> prefixUnaryExpression asOperator type .)


state 303

    (249) asOperator -> AS asOperator .

    SUSPEND         reduce using rule 249 (asOperator -> AS asOperator .)
    LPAREN          reduce using rule 249 (asOperator -> AS asOperator .)
    ID              reduce using rule 249 (asOperator -> AS asOperator .)
    CROSSINLINE     reduce using rule 249 (asOperator -> AS asOperator .)
    IMPORT          reduce using rule 249 (asOperator -> AS asOperator .)
    INIT            reduce using rule 249 (asOperator -> AS asOperator .)
    NOINLINE        reduce using rule 249 (asOperator -> AS asOperator .)
    OUT             reduce using rule 249 (asOperator -> AS asOperator .)
    VARARG          reduce using rule 249 (asOperator -> AS asOperator .)
    WHERE           reduce using rule 249 (asOperator -> AS asOperator .)
    INT             reduce using rule 249 (asOperator -> AS asOperator .)
    FLOAT           reduce using rule 249 (asOperator -> AS asOperator .)
    BOOLEAN         reduce using rule 249 (asOperator -> AS asOperator .)
    STRING          reduce using rule 249 (asOperator -> AS asOperator .)
    ARRAY           reduce using rule 249 (asOperator -> AS asOperator .)
    CHAR            reduce using rule 249 (asOperator -> AS asOperator .)
    OBJECT          reduce using rule 249 (asOperator -> AS asOperator .)
    CONST           reduce using rule 249 (asOperator -> AS asOperator .)
    CONSTRUCTOR     reduce using rule 249 (asOperator -> AS asOperator .)
    EOF             reduce using rule 249 (asOperator -> AS asOperator .)
    FALSE           reduce using rule 249 (asOperator -> AS asOperator .)
    FUNCTION        reduce using rule 249 (asOperator -> AS asOperator .)
    NULL            reduce using rule 249 (asOperator -> AS asOperator .)
    NULLABLE        reduce using rule 249 (asOperator -> AS asOperator .)
    NUMBER          reduce using rule 249 (asOperator -> AS asOperator .)
    OPERATOR        reduce using rule 249 (asOperator -> AS asOperator .)
    SMARTCAST       reduce using rule 249 (asOperator -> AS asOperator .)
    THIS            reduce using rule 249 (asOperator -> AS asOperator .)
    TRUE            reduce using rule 249 (asOperator -> AS asOperator .)
    VAL             reduce using rule 249 (asOperator -> AS asOperator .)
    VAR             reduce using rule 249 (asOperator -> AS asOperator .)
    DOUBLE          reduce using rule 249 (asOperator -> AS asOperator .)
    WHEN            reduce using rule 249 (asOperator -> AS asOperator .)
    LONG            reduce using rule 249 (asOperator -> AS asOperator .)


state 304

    (21) multiVariableDeclaration -> LPAREN . mvd RPAREN
    (22) multiVariableDeclaration -> LPAREN . RPAREN
    (23) mvd -> . variableDeclaration
    (24) mvd -> . variableDeclaration COMMA mvd
    (19) variableDeclaration -> . simpleIdentifier DOISP type
    (20) variableDeclaration -> . simpleIdentifier
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    RPAREN          shift and go to state 277
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    mvd                            shift and go to state 276
    variableDeclaration            shift and go to state 278
    simpleIdentifier               shift and go to state 307

state 305

    (72) forStatement_MD -> FOR LPAREN multiVariableDeclaration . IN expression RPAREN controlStructureBody
    (73) forStatement_MD -> FOR LPAREN multiVariableDeclaration . IN expression RPAREN

    IN              shift and go to state 371


state 306

    (74) forStatement_VD -> FOR LPAREN variableDeclaration . IN expression RPAREN controlStructureBody
    (75) forStatement_VD -> FOR LPAREN variableDeclaration . IN expression RPAREN

    IN              shift and go to state 372


state 307

    (19) variableDeclaration -> simpleIdentifier . DOISP type
    (20) variableDeclaration -> simpleIdentifier .

    DOISP           shift and go to state 275
    IN              reduce using rule 20 (variableDeclaration -> simpleIdentifier .)
    COMMA           reduce using rule 20 (variableDeclaration -> simpleIdentifier .)
    SETA            reduce using rule 20 (variableDeclaration -> simpleIdentifier .)
    RPAREN          reduce using rule 20 (variableDeclaration -> simpleIdentifier .)


state 308

    (128) parenthesizedDirectlyAssignableExpression -> LPAREN directlyAssignableExpression RPAREN .

    IGUALDADE       reduce using rule 128 (parenthesizedDirectlyAssignableExpression -> LPAREN directlyAssignableExpression RPAREN .)
    RPAREN          reduce using rule 128 (parenthesizedDirectlyAssignableExpression -> LPAREN directlyAssignableExpression RPAREN .)


state 309

    (131) parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN .

    MAISIGUAL       reduce using rule 131 (parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN .)
    MENOSIGUAL      reduce using rule 131 (parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN .)
    MULTIGUAL       reduce using rule 131 (parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN .)
    DIVIGUAL        reduce using rule 131 (parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN .)
    MODIGUAL        reduce using rule 131 (parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN .)
    RPAREN          reduce using rule 131 (parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN .)


state 310

    (167) parenthesizedExpression -> LPAREN expression RPAREN .

    INCREMENTO      reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DECREMENTO      reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MENOR           reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    LCCT            reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    COLONCOLON      reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RCHAVE          reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    PONTO           reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    AS              reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MAISIGUAL       reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MENOSIGUAL      reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MULTIGUAL       reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DIVIGUAL        reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MODIGUAL        reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MULT            reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    PONTOPONTO      reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    ID              reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CROSSINLINE     reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IMPORT          reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    INIT            reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NOINLINE        reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    OUT             reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    VARARG          reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    WHERE           reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    INT             reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    BOOLEAN         reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    STRING          reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    ARRAY           reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CHAR            reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    OBJECT          reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CONST           reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CONSTRUCTOR     reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    EOF             reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NULL            reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NULLABLE        reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    OPERATOR        reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    SMARTCAST       reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    THIS            reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    VAL             reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DOUBLE          reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    WHEN            reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    LONG            reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    ELVIS           reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IN              reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NOT_IN          reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IS              reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NOT_IS          reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MAIOR           reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MENORIGUAL      reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MAIORIGUAL      reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DIFERENTE       reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IDENTIDADE      reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IGUALDADE       reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    SEMIDENTIDADE   reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    AND             reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    OR              reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    FUN             reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DO              reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    LITERAL_STRING  reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IF              reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RETURN_AT       reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CONTINUE_AT     reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    BREAK_AT        reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NOT             reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    SUSPEND         reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    LCHAVE          reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    PV              reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RCCT            reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CLASS           reduce using rule 167 (parenthesizedExpression -> LPAREN expression RPAREN .)


state 311

    (76) whileStatement -> WHILE LPAREN expression . RPAREN controlStructureBody
    (77) whileStatement -> WHILE LPAREN expression . RPAREN PV
    (217) jumpExpression -> expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 373
    INCREMENTO      reduce using rule 217 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 217 (jumpExpression -> expression .)
    MENOR           reduce using rule 217 (jumpExpression -> expression .)
    LCCT            reduce using rule 217 (jumpExpression -> expression .)
    LPAREN          reduce using rule 217 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 217 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 217 (jumpExpression -> expression .)
    PONTO           reduce using rule 217 (jumpExpression -> expression .)
    AS              reduce using rule 217 (jumpExpression -> expression .)
    MULT            reduce using rule 217 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 217 (jumpExpression -> expression .)
    MOD             reduce using rule 217 (jumpExpression -> expression .)
    PLUS            reduce using rule 217 (jumpExpression -> expression .)
    MINUS           reduce using rule 217 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 217 (jumpExpression -> expression .)
    ID              reduce using rule 217 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 217 (jumpExpression -> expression .)
    IMPORT          reduce using rule 217 (jumpExpression -> expression .)
    INIT            reduce using rule 217 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 217 (jumpExpression -> expression .)
    OUT             reduce using rule 217 (jumpExpression -> expression .)
    VARARG          reduce using rule 217 (jumpExpression -> expression .)
    WHERE           reduce using rule 217 (jumpExpression -> expression .)
    INT             reduce using rule 217 (jumpExpression -> expression .)
    FLOAT           reduce using rule 217 (jumpExpression -> expression .)
    BOOLEAN         reduce using rule 217 (jumpExpression -> expression .)
    STRING          reduce using rule 217 (jumpExpression -> expression .)
    ARRAY           reduce using rule 217 (jumpExpression -> expression .)
    CHAR            reduce using rule 217 (jumpExpression -> expression .)
    OBJECT          reduce using rule 217 (jumpExpression -> expression .)
    CONST           reduce using rule 217 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 217 (jumpExpression -> expression .)
    EOF             reduce using rule 217 (jumpExpression -> expression .)
    FALSE           reduce using rule 217 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 217 (jumpExpression -> expression .)
    NULL            reduce using rule 217 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 217 (jumpExpression -> expression .)
    NUMBER          reduce using rule 217 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 217 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 217 (jumpExpression -> expression .)
    THIS            reduce using rule 217 (jumpExpression -> expression .)
    TRUE            reduce using rule 217 (jumpExpression -> expression .)
    VAL             reduce using rule 217 (jumpExpression -> expression .)
    VAR             reduce using rule 217 (jumpExpression -> expression .)
    DOUBLE          reduce using rule 217 (jumpExpression -> expression .)
    WHEN            reduce using rule 217 (jumpExpression -> expression .)
    LONG            reduce using rule 217 (jumpExpression -> expression .)
    ELVIS           reduce using rule 217 (jumpExpression -> expression .)
    IN              reduce using rule 217 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 217 (jumpExpression -> expression .)
    IS              reduce using rule 217 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 217 (jumpExpression -> expression .)
    MAIOR           reduce using rule 217 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 217 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 217 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 217 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 217 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 217 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 217 (jumpExpression -> expression .)
    AND             reduce using rule 217 (jumpExpression -> expression .)
    OR              reduce using rule 217 (jumpExpression -> expression .)

  ! RPAREN          [ reduce using rule 217 (jumpExpression -> expression .) ]


state 312

    (78) doWhileStatement -> DO controlStructureBody WHILE . LPAREN expression RPAREN

    LPAREN          shift and go to state 374


state 313

    (79) doWhileStatement -> DO WHILE LPAREN . expression RPAREN
    (76) whileStatement -> WHILE LPAREN . expression RPAREN controlStructureBody
    (77) whileStatement -> WHILE LPAREN . expression RPAREN PV
    (82) expression -> . disjunction
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (33) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 99
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    LPAREN          shift and go to state 152
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57

    expression                     shift and go to state 375
    disjunction                    shift and go to state 85
    conjunction                    shift and go to state 94
    equality                       shift and go to state 97
    comparison                     shift and go to state 106
    infixOperation                 shift and go to state 121
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    simpleIdentifier               shift and go to state 149
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133
    prefixUnaryExpression          shift and go to state 150
    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 151
    unaryPrefix                    shift and go to state 105
    primaryExpression              shift and go to state 95
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122

state 314

    (84) disjunction -> conjunction OR disjunction .
    (82) expression -> disjunction .

  ! reduce/reduce conflict for FUN resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for FOR resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for WHILE resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for DO resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for ID resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for IMPORT resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for INIT resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for OUT resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for VARARG resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for WHERE resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for INT resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for FLOAT resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for STRING resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for ARRAY resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for CHAR resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for OBJECT resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for CONST resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for EOF resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for FALSE resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for NULL resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for NUMBER resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for THIS resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for TRUE resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for VAL resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for VAR resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for WHEN resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for LONG resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for LPAREN resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for LCCT resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for IF resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for RETURN resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for BREAK resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for MINUS resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for PLUS resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for NOT resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for PV resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for ELSE resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for MENOR resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for PONTO resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for AS resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for MULT resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for MOD resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for ELVIS resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for IN resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for IS resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for MAIOR resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for AND resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for OR resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for COMMA resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for RPAREN resolved using rule 82 (expression -> disjunction .)
  ! reduce/reduce conflict for RCCT resolved using rule 82 (expression -> disjunction .)
    FUN             reduce using rule 82 (expression -> disjunction .)
    FOR             reduce using rule 82 (expression -> disjunction .)
    WHILE           reduce using rule 82 (expression -> disjunction .)
    DO              reduce using rule 82 (expression -> disjunction .)
    ID              reduce using rule 82 (expression -> disjunction .)
    CROSSINLINE     reduce using rule 82 (expression -> disjunction .)
    IMPORT          reduce using rule 82 (expression -> disjunction .)
    INIT            reduce using rule 82 (expression -> disjunction .)
    NOINLINE        reduce using rule 82 (expression -> disjunction .)
    OUT             reduce using rule 82 (expression -> disjunction .)
    VARARG          reduce using rule 82 (expression -> disjunction .)
    WHERE           reduce using rule 82 (expression -> disjunction .)
    INT             reduce using rule 82 (expression -> disjunction .)
    FLOAT           reduce using rule 82 (expression -> disjunction .)
    BOOLEAN         reduce using rule 82 (expression -> disjunction .)
    STRING          reduce using rule 82 (expression -> disjunction .)
    ARRAY           reduce using rule 82 (expression -> disjunction .)
    CHAR            reduce using rule 82 (expression -> disjunction .)
    OBJECT          reduce using rule 82 (expression -> disjunction .)
    CONST           reduce using rule 82 (expression -> disjunction .)
    CONSTRUCTOR     reduce using rule 82 (expression -> disjunction .)
    EOF             reduce using rule 82 (expression -> disjunction .)
    FALSE           reduce using rule 82 (expression -> disjunction .)
    FUNCTION        reduce using rule 82 (expression -> disjunction .)
    NULL            reduce using rule 82 (expression -> disjunction .)
    NULLABLE        reduce using rule 82 (expression -> disjunction .)
    NUMBER          reduce using rule 82 (expression -> disjunction .)
    OPERATOR        reduce using rule 82 (expression -> disjunction .)
    SMARTCAST       reduce using rule 82 (expression -> disjunction .)
    THIS            reduce using rule 82 (expression -> disjunction .)
    TRUE            reduce using rule 82 (expression -> disjunction .)
    VAL             reduce using rule 82 (expression -> disjunction .)
    VAR             reduce using rule 82 (expression -> disjunction .)
    DOUBLE          reduce using rule 82 (expression -> disjunction .)
    WHEN            reduce using rule 82 (expression -> disjunction .)
    LONG            reduce using rule 82 (expression -> disjunction .)
    LPAREN          reduce using rule 82 (expression -> disjunction .)
    LITERAL_STRING  reduce using rule 82 (expression -> disjunction .)
    COLONCOLON      reduce using rule 82 (expression -> disjunction .)
    LCCT            reduce using rule 82 (expression -> disjunction .)
    IF              reduce using rule 82 (expression -> disjunction .)
    RETURN          reduce using rule 82 (expression -> disjunction .)
    RETURN_AT       reduce using rule 82 (expression -> disjunction .)
    CONTINUE        reduce using rule 82 (expression -> disjunction .)
    CONTINUE_AT     reduce using rule 82 (expression -> disjunction .)
    BREAK           reduce using rule 82 (expression -> disjunction .)
    BREAK_AT        reduce using rule 82 (expression -> disjunction .)
    RCHAVE          reduce using rule 82 (expression -> disjunction .)
    INCREMENTO      reduce using rule 82 (expression -> disjunction .)
    DECREMENTO      reduce using rule 82 (expression -> disjunction .)
    MINUS           reduce using rule 82 (expression -> disjunction .)
    PLUS            reduce using rule 82 (expression -> disjunction .)
    NOT             reduce using rule 82 (expression -> disjunction .)
    SUSPEND         reduce using rule 82 (expression -> disjunction .)
    LCHAVE          reduce using rule 82 (expression -> disjunction .)
    PV              reduce using rule 82 (expression -> disjunction .)
    ELSE            reduce using rule 82 (expression -> disjunction .)
    MENOR           reduce using rule 82 (expression -> disjunction .)
    PONTO           reduce using rule 82 (expression -> disjunction .)
    AS              reduce using rule 82 (expression -> disjunction .)
    MAISIGUAL       reduce using rule 82 (expression -> disjunction .)
    MENOSIGUAL      reduce using rule 82 (expression -> disjunction .)
    MULTIGUAL       reduce using rule 82 (expression -> disjunction .)
    DIVIGUAL        reduce using rule 82 (expression -> disjunction .)
    MODIGUAL        reduce using rule 82 (expression -> disjunction .)
    MULT            reduce using rule 82 (expression -> disjunction .)
    DIVIDE          reduce using rule 82 (expression -> disjunction .)
    MOD             reduce using rule 82 (expression -> disjunction .)
    PONTOPONTO      reduce using rule 82 (expression -> disjunction .)
    ELVIS           reduce using rule 82 (expression -> disjunction .)
    IN              reduce using rule 82 (expression -> disjunction .)
    NOT_IN          reduce using rule 82 (expression -> disjunction .)
    IS              reduce using rule 82 (expression -> disjunction .)
    NOT_IS          reduce using rule 82 (expression -> disjunction .)
    MAIOR           reduce using rule 82 (expression -> disjunction .)
    MENORIGUAL      reduce using rule 82 (expression -> disjunction .)
    MAIORIGUAL      reduce using rule 82 (expression -> disjunction .)
    DIFERENTE       reduce using rule 82 (expression -> disjunction .)
    IDENTIDADE      reduce using rule 82 (expression -> disjunction .)
    IGUALDADE       reduce using rule 82 (expression -> disjunction .)
    SEMIDENTIDADE   reduce using rule 82 (expression -> disjunction .)
    AND             reduce using rule 82 (expression -> disjunction .)
    OR              reduce using rule 82 (expression -> disjunction .)
    COMMA           reduce using rule 82 (expression -> disjunction .)
    RPAREN          reduce using rule 82 (expression -> disjunction .)
    RCCT            reduce using rule 82 (expression -> disjunction .)

  ! INCREMENTO      [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! DECREMENTO      [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! MENOR           [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! LCCT            [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! LPAREN          [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! COLONCOLON      [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! RCHAVE          [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! PONTO           [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! AS              [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! MAISIGUAL       [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! MENOSIGUAL      [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! MULTIGUAL       [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! DIVIGUAL        [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! MODIGUAL        [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! MULT            [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! DIVIDE          [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! MOD             [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! PLUS            [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! MINUS           [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! PONTOPONTO      [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! ID              [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! CROSSINLINE     [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! IMPORT          [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! INIT            [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! NOINLINE        [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! OUT             [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! VARARG          [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! WHERE           [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! INT             [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! FLOAT           [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! BOOLEAN         [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! STRING          [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! ARRAY           [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! CHAR            [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! OBJECT          [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! CONST           [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! CONSTRUCTOR     [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! EOF             [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! FALSE           [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! FUNCTION        [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! NULL            [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! NULLABLE        [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! NUMBER          [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! OPERATOR        [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! SMARTCAST       [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! THIS            [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! TRUE            [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! VAL             [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! VAR             [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! DOUBLE          [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! WHEN            [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! LONG            [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! ELVIS           [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! IN              [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! NOT_IN          [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! IS              [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! NOT_IS          [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! MAIOR           [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! MENORIGUAL      [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! MAIORIGUAL      [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! DIFERENTE       [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! IDENTIDADE      [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! IGUALDADE       [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! SEMIDENTIDADE   [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! AND             [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! OR              [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! FUN             [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! FOR             [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! WHILE           [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! DO              [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! LITERAL_STRING  [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! IF              [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! RETURN          [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! RETURN_AT       [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! CONTINUE        [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! CONTINUE_AT     [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! BREAK           [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! BREAK_AT        [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! NOT             [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! SUSPEND         [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! COMMA           [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! RPAREN          [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! LCHAVE          [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! PV              [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! ELSE            [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]
  ! RCCT            [ reduce using rule 84 (disjunction -> conjunction OR disjunction .) ]


state 315

    (119) posue -> postfixUnarySuffix posue .

    INCREMENTO      reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    DECREMENTO      reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    MENOR           reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    LCCT            reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    LPAREN          reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    COLONCOLON      reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    RCHAVE          reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    PONTO           reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    AS              reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    MAISIGUAL       reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    MENOSIGUAL      reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    MULTIGUAL       reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    DIVIGUAL        reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    MODIGUAL        reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    MULT            reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    DIVIDE          reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    MOD             reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    PLUS            reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    MINUS           reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    PONTOPONTO      reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    ID              reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    CROSSINLINE     reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    IMPORT          reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    INIT            reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    NOINLINE        reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    OUT             reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    VARARG          reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    WHERE           reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    INT             reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    FLOAT           reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    BOOLEAN         reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    STRING          reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    ARRAY           reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    CHAR            reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    OBJECT          reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    CONST           reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    CONSTRUCTOR     reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    EOF             reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    FALSE           reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    FUNCTION        reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    NULL            reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    NULLABLE        reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    NUMBER          reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    OPERATOR        reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    SMARTCAST       reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    THIS            reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    TRUE            reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    VAL             reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    VAR             reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    DOUBLE          reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    WHEN            reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    LONG            reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    ELVIS           reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    IN              reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    NOT_IN          reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    IS              reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    NOT_IS          reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    MAIOR           reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    MENORIGUAL      reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    MAIORIGUAL      reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    DIFERENTE       reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    IDENTIDADE      reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    IGUALDADE       reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    SEMIDENTIDADE   reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    AND             reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    OR              reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    FUN             reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    FOR             reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    WHILE           reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    DO              reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    LITERAL_STRING  reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    IF              reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    RETURN          reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    RETURN_AT       reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    CONTINUE        reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    CONTINUE_AT     reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    BREAK           reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    BREAK_AT        reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    NOT             reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    SUSPEND         reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    COMMA           reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    RPAREN          reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    LCHAVE          reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    PV              reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    ELSE            reduce using rule 119 (posue -> postfixUnarySuffix posue .)
    RCCT            reduce using rule 119 (posue -> postfixUnarySuffix posue .)


state 316

    (141) callSuffix -> typeArguments valueArguments . annotatedLambda
    (145) callSuffix -> typeArguments valueArguments .
    (147) annotatedLambda -> . lambdaLiteral
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE

  ! shift/reduce conflict for RCHAVE resolved as shift
    INCREMENTO      reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    DECREMENTO      reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    MENOR           reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    LCCT            reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    LPAREN          reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    COLONCOLON      reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    PONTO           reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    AS              reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    MAISIGUAL       reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    MENOSIGUAL      reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    MULTIGUAL       reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    DIVIGUAL        reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    MODIGUAL        reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    MULT            reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    DIVIDE          reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    MOD             reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    PLUS            reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    MINUS           reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    PONTOPONTO      reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    ID              reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    CROSSINLINE     reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    IMPORT          reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    INIT            reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    NOINLINE        reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    OUT             reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    VARARG          reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    WHERE           reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    INT             reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    FLOAT           reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    BOOLEAN         reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    STRING          reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    ARRAY           reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    CHAR            reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    OBJECT          reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    CONST           reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    CONSTRUCTOR     reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    EOF             reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    FALSE           reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    FUNCTION        reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    NULL            reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    NULLABLE        reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    NUMBER          reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    OPERATOR        reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    SMARTCAST       reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    THIS            reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    TRUE            reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    VAL             reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    VAR             reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    DOUBLE          reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    WHEN            reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    LONG            reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    ELVIS           reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    IN              reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    NOT_IN          reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    IS              reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    NOT_IS          reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    MAIOR           reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    MENORIGUAL      reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    MAIORIGUAL      reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    DIFERENTE       reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    IDENTIDADE      reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    IGUALDADE       reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    SEMIDENTIDADE   reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    AND             reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    OR              reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    FUN             reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    FOR             reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    WHILE           reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    DO              reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    LITERAL_STRING  reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    IF              reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    RETURN          reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    RETURN_AT       reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    CONTINUE        reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    CONTINUE_AT     reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    BREAK           reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    BREAK_AT        reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    NOT             reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    SUSPEND         reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    COMMA           reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    RPAREN          reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    LCHAVE          reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    PV              reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    ELSE            reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    RCCT            reduce using rule 145 (callSuffix -> typeArguments valueArguments .)
    RCHAVE          shift and go to state 71

  ! RCHAVE          [ reduce using rule 145 (callSuffix -> typeArguments valueArguments .) ]

    annotatedLambda                shift and go to state 376
    lambdaLiteral                  shift and go to state 210

state 317

    (143) callSuffix -> typeArguments annotatedLambda .

    INCREMENTO      reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    DECREMENTO      reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    MENOR           reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    LCCT            reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    LPAREN          reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    COLONCOLON      reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    RCHAVE          reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    PONTO           reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    AS              reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    MAISIGUAL       reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    MENOSIGUAL      reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    MULTIGUAL       reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    DIVIGUAL        reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    MODIGUAL        reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    MULT            reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    DIVIDE          reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    MOD             reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    PLUS            reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    MINUS           reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    PONTOPONTO      reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    ID              reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    CROSSINLINE     reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    IMPORT          reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    INIT            reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    NOINLINE        reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    OUT             reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    VARARG          reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    WHERE           reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    INT             reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    FLOAT           reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    BOOLEAN         reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    STRING          reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    ARRAY           reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    CHAR            reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    OBJECT          reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    CONST           reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    CONSTRUCTOR     reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    EOF             reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    FALSE           reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    FUNCTION        reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    NULL            reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    NULLABLE        reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    NUMBER          reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    OPERATOR        reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    SMARTCAST       reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    THIS            reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    TRUE            reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    VAL             reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    VAR             reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    DOUBLE          reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    WHEN            reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    LONG            reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    ELVIS           reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    IN              reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    NOT_IN          reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    IS              reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    NOT_IS          reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    MAIOR           reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    MENORIGUAL      reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    MAIORIGUAL      reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    DIFERENTE       reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    IDENTIDADE      reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    IGUALDADE       reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    SEMIDENTIDADE   reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    AND             reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    OR              reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    FUN             reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    FOR             reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    WHILE           reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    DO              reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    LITERAL_STRING  reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    IF              reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    RETURN          reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    RETURN_AT       reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    CONTINUE        reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    CONTINUE_AT     reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    BREAK           reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    BREAK_AT        reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    NOT             reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    SUSPEND         reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    COMMA           reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    RPAREN          reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    LCHAVE          reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    PV              reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    ELSE            reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)
    RCCT            reduce using rule 143 (callSuffix -> typeArguments annotatedLambda .)


state 318

    (142) callSuffix -> valueArguments annotatedLambda .

    INCREMENTO      reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    DECREMENTO      reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    MENOR           reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    LCCT            reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    LPAREN          reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    COLONCOLON      reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    RCHAVE          reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    PONTO           reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    AS              reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    MAISIGUAL       reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    MENOSIGUAL      reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    MULTIGUAL       reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    DIVIGUAL        reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    MODIGUAL        reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    MULT            reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    DIVIDE          reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    MOD             reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    PLUS            reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    MINUS           reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    PONTOPONTO      reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    ID              reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    CROSSINLINE     reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    IMPORT          reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    INIT            reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    NOINLINE        reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    OUT             reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    VARARG          reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    WHERE           reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    INT             reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    FLOAT           reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    BOOLEAN         reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    STRING          reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    ARRAY           reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    CHAR            reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    OBJECT          reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    CONST           reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    CONSTRUCTOR     reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    EOF             reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    FALSE           reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    FUNCTION        reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    NULL            reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    NULLABLE        reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    NUMBER          reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    OPERATOR        reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    SMARTCAST       reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    THIS            reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    TRUE            reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    VAL             reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    VAR             reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    DOUBLE          reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    WHEN            reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    LONG            reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    ELVIS           reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    IN              reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    NOT_IN          reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    IS              reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    NOT_IS          reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    MAIOR           reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    MENORIGUAL      reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    MAIORIGUAL      reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    DIFERENTE       reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    IDENTIDADE      reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    IGUALDADE       reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    SEMIDENTIDADE   reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    AND             reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    OR              reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    FUN             reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    FOR             reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    WHILE           reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    DO              reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    LITERAL_STRING  reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    IF              reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    RETURN          reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    RETURN_AT       reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    CONTINUE        reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    CONTINUE_AT     reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    BREAK           reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    BREAK_AT        reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    NOT             reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    SUSPEND         reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    COMMA           reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    RPAREN          reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    LCHAVE          reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    PV              reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    ELSE            reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)
    RCCT            reduce using rule 142 (callSuffix -> valueArguments annotatedLambda .)


state 319

    (152) valueArguments -> LPAREN RPAREN .

    RCHAVE          reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    INCREMENTO      reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    DECREMENTO      reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    MENOR           reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    LCCT            reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    LPAREN          reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    COLONCOLON      reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    PONTO           reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    AS              reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    MAISIGUAL       reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    MENOSIGUAL      reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    MULTIGUAL       reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    DIVIGUAL        reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    MODIGUAL        reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    MULT            reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    MOD             reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    PLUS            reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    MINUS           reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    PONTOPONTO      reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    ID              reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    CROSSINLINE     reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    IMPORT          reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    INIT            reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    NOINLINE        reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    OUT             reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    VARARG          reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    WHERE           reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    INT             reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    FLOAT           reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    BOOLEAN         reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    STRING          reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    ARRAY           reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    CHAR            reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    OBJECT          reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    CONST           reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    CONSTRUCTOR     reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    EOF             reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    FALSE           reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    FUNCTION        reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    NULL            reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    NULLABLE        reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    NUMBER          reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    OPERATOR        reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    SMARTCAST       reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    THIS            reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    TRUE            reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    VAL             reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    VAR             reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    DOUBLE          reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    WHEN            reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    LONG            reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    ELVIS           reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    IN              reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    NOT_IN          reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    IS              reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    NOT_IS          reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    MAIOR           reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    MENORIGUAL      reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    MAIORIGUAL      reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    DIFERENTE       reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    IDENTIDADE      reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    IGUALDADE       reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    SEMIDENTIDADE   reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    AND             reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    OR              reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    FUN             reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    FOR             reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    WHILE           reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    DO              reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    LITERAL_STRING  reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    IF              reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    RETURN          reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    RETURN_AT       reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    CONTINUE        reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    CONTINUE_AT     reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    BREAK           reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    BREAK_AT        reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    NOT             reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    SUSPEND         reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    COMMA           reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    RPAREN          reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    LCHAVE          reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    PV              reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    ELSE            reduce using rule 152 (valueArguments -> LPAREN RPAREN .)
    RCCT            reduce using rule 152 (valueArguments -> LPAREN RPAREN .)


state 320

    (153) valueArguments -> LPAREN vas . RPAREN

    RPAREN          shift and go to state 377


state 321

    (154) vas -> valueArgument .
    (155) vas -> valueArgument . COMMA vas

    RPAREN          reduce using rule 154 (vas -> valueArgument .)
    COMMA           shift and go to state 378


state 322

    (156) valueArgument -> simpleIdentifier . IGUALDADE MULT expression
    (157) valueArgument -> simpleIdentifier . IGUALDADE expression
    (160) primaryExpression -> simpleIdentifier .
    (115) label -> simpleIdentifier .

  ! shift/reduce conflict for IGUALDADE resolved as shift
  ! reduce/reduce conflict for INCREMENTO resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for INT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FLOAT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for STRING resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ARRAY resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CHAR resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OBJECT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONST resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for EOF resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FALSE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NULL resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NUMBER resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for THIS resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for TRUE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VAL resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VAR resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHEN resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LONG resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 115 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 115 (label -> simpleIdentifier .)
    IGUALDADE       shift and go to state 379
    COMMA           reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    RPAREN          reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MENOR           reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    PONTO           reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    AS              reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MULT            reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    DIVIDE          reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MOD             reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    ELVIS           reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    IN              reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    NOT_IN          reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    IS              reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    NOT_IS          reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MAIOR           reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    DIFERENTE       reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    AND             reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    OR              reduce using rule 160 (primaryExpression -> simpleIdentifier .)
    INCREMENTO      reduce using rule 115 (label -> simpleIdentifier .)
    DECREMENTO      reduce using rule 115 (label -> simpleIdentifier .)
    MINUS           reduce using rule 115 (label -> simpleIdentifier .)
    PLUS            reduce using rule 115 (label -> simpleIdentifier .)
    NOT             reduce using rule 115 (label -> simpleIdentifier .)
    ID              reduce using rule 115 (label -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 115 (label -> simpleIdentifier .)
    IMPORT          reduce using rule 115 (label -> simpleIdentifier .)
    INIT            reduce using rule 115 (label -> simpleIdentifier .)
    NOINLINE        reduce using rule 115 (label -> simpleIdentifier .)
    OUT             reduce using rule 115 (label -> simpleIdentifier .)
    VARARG          reduce using rule 115 (label -> simpleIdentifier .)
    WHERE           reduce using rule 115 (label -> simpleIdentifier .)
    INT             reduce using rule 115 (label -> simpleIdentifier .)
    FLOAT           reduce using rule 115 (label -> simpleIdentifier .)
    BOOLEAN         reduce using rule 115 (label -> simpleIdentifier .)
    STRING          reduce using rule 115 (label -> simpleIdentifier .)
    ARRAY           reduce using rule 115 (label -> simpleIdentifier .)
    CHAR            reduce using rule 115 (label -> simpleIdentifier .)
    OBJECT          reduce using rule 115 (label -> simpleIdentifier .)
    CONST           reduce using rule 115 (label -> simpleIdentifier .)
    CONSTRUCTOR     reduce using rule 115 (label -> simpleIdentifier .)
    EOF             reduce using rule 115 (label -> simpleIdentifier .)
    FALSE           reduce using rule 115 (label -> simpleIdentifier .)
    FUNCTION        reduce using rule 115 (label -> simpleIdentifier .)
    NULL            reduce using rule 115 (label -> simpleIdentifier .)
    NULLABLE        reduce using rule 115 (label -> simpleIdentifier .)
    NUMBER          reduce using rule 115 (label -> simpleIdentifier .)
    OPERATOR        reduce using rule 115 (label -> simpleIdentifier .)
    SMARTCAST       reduce using rule 115 (label -> simpleIdentifier .)
    THIS            reduce using rule 115 (label -> simpleIdentifier .)
    TRUE            reduce using rule 115 (label -> simpleIdentifier .)
    VAL             reduce using rule 115 (label -> simpleIdentifier .)
    VAR             reduce using rule 115 (label -> simpleIdentifier .)
    DOUBLE          reduce using rule 115 (label -> simpleIdentifier .)
    WHEN            reduce using rule 115 (label -> simpleIdentifier .)
    LONG            reduce using rule 115 (label -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 115 (label -> simpleIdentifier .)
    LPAREN          reduce using rule 115 (label -> simpleIdentifier .)
    COLONCOLON      reduce using rule 115 (label -> simpleIdentifier .)
    LCCT            reduce using rule 115 (label -> simpleIdentifier .)
    IF              reduce using rule 115 (label -> simpleIdentifier .)
    RETURN          reduce using rule 115 (label -> simpleIdentifier .)
    RETURN_AT       reduce using rule 115 (label -> simpleIdentifier .)
    CONTINUE        reduce using rule 115 (label -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 115 (label -> simpleIdentifier .)
    BREAK           reduce using rule 115 (label -> simpleIdentifier .)
    BREAK_AT        reduce using rule 115 (label -> simpleIdentifier .)
    RCHAVE          reduce using rule 115 (label -> simpleIdentifier .)
    FUN             reduce using rule 115 (label -> simpleIdentifier .)
    SUSPEND         reduce using rule 115 (label -> simpleIdentifier .)

  ! INCREMENTO      [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! RCHAVE          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! PLUS            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! INT             [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! FLOAT           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! BOOLEAN         [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! STRING          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! ARRAY           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! CHAR            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! OBJECT          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! CONST           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! CONSTRUCTOR     [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! EOF             [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! FALSE           [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! FUNCTION        [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! NULL            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! NULLABLE        [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! NUMBER          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! OPERATOR        [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! SMARTCAST       [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! THIS            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! TRUE            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! VAL             [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! VAR             [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! DOUBLE          [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! WHEN            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! LONG            [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]
  ! IGUALDADE       [ reduce using rule 160 (primaryExpression -> simpleIdentifier .) ]


state 323

    (158) valueArgument -> expression .
    (217) jumpExpression -> expression .

  ! reduce/reduce conflict for COMMA resolved using rule 158 (valueArgument -> expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 158 (valueArgument -> expression .)
    COMMA           reduce using rule 158 (valueArgument -> expression .)
    RPAREN          reduce using rule 158 (valueArgument -> expression .)
    INCREMENTO      reduce using rule 217 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 217 (jumpExpression -> expression .)
    MENOR           reduce using rule 217 (jumpExpression -> expression .)
    LCCT            reduce using rule 217 (jumpExpression -> expression .)
    LPAREN          reduce using rule 217 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 217 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 217 (jumpExpression -> expression .)
    PONTO           reduce using rule 217 (jumpExpression -> expression .)
    AS              reduce using rule 217 (jumpExpression -> expression .)
    MULT            reduce using rule 217 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 217 (jumpExpression -> expression .)
    MOD             reduce using rule 217 (jumpExpression -> expression .)
    PLUS            reduce using rule 217 (jumpExpression -> expression .)
    MINUS           reduce using rule 217 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 217 (jumpExpression -> expression .)
    ID              reduce using rule 217 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 217 (jumpExpression -> expression .)
    IMPORT          reduce using rule 217 (jumpExpression -> expression .)
    INIT            reduce using rule 217 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 217 (jumpExpression -> expression .)
    OUT             reduce using rule 217 (jumpExpression -> expression .)
    VARARG          reduce using rule 217 (jumpExpression -> expression .)
    WHERE           reduce using rule 217 (jumpExpression -> expression .)
    INT             reduce using rule 217 (jumpExpression -> expression .)
    FLOAT           reduce using rule 217 (jumpExpression -> expression .)
    BOOLEAN         reduce using rule 217 (jumpExpression -> expression .)
    STRING          reduce using rule 217 (jumpExpression -> expression .)
    ARRAY           reduce using rule 217 (jumpExpression -> expression .)
    CHAR            reduce using rule 217 (jumpExpression -> expression .)
    OBJECT          reduce using rule 217 (jumpExpression -> expression .)
    CONST           reduce using rule 217 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 217 (jumpExpression -> expression .)
    EOF             reduce using rule 217 (jumpExpression -> expression .)
    FALSE           reduce using rule 217 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 217 (jumpExpression -> expression .)
    NULL            reduce using rule 217 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 217 (jumpExpression -> expression .)
    NUMBER          reduce using rule 217 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 217 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 217 (jumpExpression -> expression .)
    THIS            reduce using rule 217 (jumpExpression -> expression .)
    TRUE            reduce using rule 217 (jumpExpression -> expression .)
    VAL             reduce using rule 217 (jumpExpression -> expression .)
    VAR             reduce using rule 217 (jumpExpression -> expression .)
    DOUBLE          reduce using rule 217 (jumpExpression -> expression .)
    WHEN            reduce using rule 217 (jumpExpression -> expression .)
    LONG            reduce using rule 217 (jumpExpression -> expression .)
    ELVIS           reduce using rule 217 (jumpExpression -> expression .)
    IN              reduce using rule 217 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 217 (jumpExpression -> expression .)
    IS              reduce using rule 217 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 217 (jumpExpression -> expression .)
    MAIOR           reduce using rule 217 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 217 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 217 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 217 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 217 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 217 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 217 (jumpExpression -> expression .)
    AND             reduce using rule 217 (jumpExpression -> expression .)
    OR              reduce using rule 217 (jumpExpression -> expression .)

  ! COMMA           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 217 (jumpExpression -> expression .) ]


state 324

    (86) conjunction -> equality AND conjunction .
    (83) disjunction -> conjunction .
    (84) disjunction -> conjunction . OR disjunction

  ! reduce/reduce conflict for FUN resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for FOR resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for WHILE resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for DO resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for ID resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for IMPORT resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for INIT resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for OUT resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for VARARG resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for WHERE resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for INT resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for FLOAT resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for STRING resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for ARRAY resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for CHAR resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for OBJECT resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for CONST resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for EOF resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for FALSE resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for NULL resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for NUMBER resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for THIS resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for TRUE resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for VAL resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for VAR resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for WHEN resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for LONG resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for LPAREN resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for LCCT resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for IF resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for RETURN resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for BREAK resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MINUS resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for PLUS resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for NOT resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for PV resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for ELSE resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MENOR resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for PONTO resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for AS resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MULT resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MOD resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for ELVIS resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for IN resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for IS resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MAIOR resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for AND resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for OR resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for COMMA resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for RPAREN resolved using rule 83 (disjunction -> conjunction .)
  ! reduce/reduce conflict for RCCT resolved using rule 83 (disjunction -> conjunction .)
  ! shift/reduce conflict for OR resolved as shift
    FUN             reduce using rule 83 (disjunction -> conjunction .)
    FOR             reduce using rule 83 (disjunction -> conjunction .)
    WHILE           reduce using rule 83 (disjunction -> conjunction .)
    DO              reduce using rule 83 (disjunction -> conjunction .)
    ID              reduce using rule 83 (disjunction -> conjunction .)
    CROSSINLINE     reduce using rule 83 (disjunction -> conjunction .)
    IMPORT          reduce using rule 83 (disjunction -> conjunction .)
    INIT            reduce using rule 83 (disjunction -> conjunction .)
    NOINLINE        reduce using rule 83 (disjunction -> conjunction .)
    OUT             reduce using rule 83 (disjunction -> conjunction .)
    VARARG          reduce using rule 83 (disjunction -> conjunction .)
    WHERE           reduce using rule 83 (disjunction -> conjunction .)
    INT             reduce using rule 83 (disjunction -> conjunction .)
    FLOAT           reduce using rule 83 (disjunction -> conjunction .)
    BOOLEAN         reduce using rule 83 (disjunction -> conjunction .)
    STRING          reduce using rule 83 (disjunction -> conjunction .)
    ARRAY           reduce using rule 83 (disjunction -> conjunction .)
    CHAR            reduce using rule 83 (disjunction -> conjunction .)
    OBJECT          reduce using rule 83 (disjunction -> conjunction .)
    CONST           reduce using rule 83 (disjunction -> conjunction .)
    CONSTRUCTOR     reduce using rule 83 (disjunction -> conjunction .)
    EOF             reduce using rule 83 (disjunction -> conjunction .)
    FALSE           reduce using rule 83 (disjunction -> conjunction .)
    FUNCTION        reduce using rule 83 (disjunction -> conjunction .)
    NULL            reduce using rule 83 (disjunction -> conjunction .)
    NULLABLE        reduce using rule 83 (disjunction -> conjunction .)
    NUMBER          reduce using rule 83 (disjunction -> conjunction .)
    OPERATOR        reduce using rule 83 (disjunction -> conjunction .)
    SMARTCAST       reduce using rule 83 (disjunction -> conjunction .)
    THIS            reduce using rule 83 (disjunction -> conjunction .)
    TRUE            reduce using rule 83 (disjunction -> conjunction .)
    VAL             reduce using rule 83 (disjunction -> conjunction .)
    VAR             reduce using rule 83 (disjunction -> conjunction .)
    DOUBLE          reduce using rule 83 (disjunction -> conjunction .)
    WHEN            reduce using rule 83 (disjunction -> conjunction .)
    LONG            reduce using rule 83 (disjunction -> conjunction .)
    LPAREN          reduce using rule 83 (disjunction -> conjunction .)
    LITERAL_STRING  reduce using rule 83 (disjunction -> conjunction .)
    COLONCOLON      reduce using rule 83 (disjunction -> conjunction .)
    LCCT            reduce using rule 83 (disjunction -> conjunction .)
    IF              reduce using rule 83 (disjunction -> conjunction .)
    RETURN          reduce using rule 83 (disjunction -> conjunction .)
    RETURN_AT       reduce using rule 83 (disjunction -> conjunction .)
    CONTINUE        reduce using rule 83 (disjunction -> conjunction .)
    CONTINUE_AT     reduce using rule 83 (disjunction -> conjunction .)
    BREAK           reduce using rule 83 (disjunction -> conjunction .)
    BREAK_AT        reduce using rule 83 (disjunction -> conjunction .)
    RCHAVE          reduce using rule 83 (disjunction -> conjunction .)
    INCREMENTO      reduce using rule 83 (disjunction -> conjunction .)
    DECREMENTO      reduce using rule 83 (disjunction -> conjunction .)
    MINUS           reduce using rule 83 (disjunction -> conjunction .)
    PLUS            reduce using rule 83 (disjunction -> conjunction .)
    NOT             reduce using rule 83 (disjunction -> conjunction .)
    SUSPEND         reduce using rule 83 (disjunction -> conjunction .)
    LCHAVE          reduce using rule 83 (disjunction -> conjunction .)
    PV              reduce using rule 83 (disjunction -> conjunction .)
    ELSE            reduce using rule 83 (disjunction -> conjunction .)
    MENOR           reduce using rule 83 (disjunction -> conjunction .)
    PONTO           reduce using rule 83 (disjunction -> conjunction .)
    AS              reduce using rule 83 (disjunction -> conjunction .)
    MAISIGUAL       reduce using rule 83 (disjunction -> conjunction .)
    MENOSIGUAL      reduce using rule 83 (disjunction -> conjunction .)
    MULTIGUAL       reduce using rule 83 (disjunction -> conjunction .)
    DIVIGUAL        reduce using rule 83 (disjunction -> conjunction .)
    MODIGUAL        reduce using rule 83 (disjunction -> conjunction .)
    MULT            reduce using rule 83 (disjunction -> conjunction .)
    DIVIDE          reduce using rule 83 (disjunction -> conjunction .)
    MOD             reduce using rule 83 (disjunction -> conjunction .)
    PONTOPONTO      reduce using rule 83 (disjunction -> conjunction .)
    ELVIS           reduce using rule 83 (disjunction -> conjunction .)
    IN              reduce using rule 83 (disjunction -> conjunction .)
    NOT_IN          reduce using rule 83 (disjunction -> conjunction .)
    IS              reduce using rule 83 (disjunction -> conjunction .)
    NOT_IS          reduce using rule 83 (disjunction -> conjunction .)
    MAIOR           reduce using rule 83 (disjunction -> conjunction .)
    MENORIGUAL      reduce using rule 83 (disjunction -> conjunction .)
    MAIORIGUAL      reduce using rule 83 (disjunction -> conjunction .)
    DIFERENTE       reduce using rule 83 (disjunction -> conjunction .)
    IDENTIDADE      reduce using rule 83 (disjunction -> conjunction .)
    IGUALDADE       reduce using rule 83 (disjunction -> conjunction .)
    SEMIDENTIDADE   reduce using rule 83 (disjunction -> conjunction .)
    AND             reduce using rule 83 (disjunction -> conjunction .)
    COMMA           reduce using rule 83 (disjunction -> conjunction .)
    RPAREN          reduce using rule 83 (disjunction -> conjunction .)
    RCCT            reduce using rule 83 (disjunction -> conjunction .)
    OR              shift and go to state 197

  ! INCREMENTO      [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! DECREMENTO      [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! MENOR           [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! LCCT            [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! LPAREN          [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! COLONCOLON      [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! RCHAVE          [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! PONTO           [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! AS              [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! MAISIGUAL       [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! MENOSIGUAL      [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! MULTIGUAL       [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! DIVIGUAL        [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! MODIGUAL        [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! MULT            [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! DIVIDE          [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! MOD             [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! PLUS            [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! MINUS           [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! PONTOPONTO      [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! ID              [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! CROSSINLINE     [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! IMPORT          [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! INIT            [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! NOINLINE        [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! OUT             [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! VARARG          [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! WHERE           [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! INT             [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! FLOAT           [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! BOOLEAN         [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! STRING          [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! ARRAY           [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! CHAR            [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! OBJECT          [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! CONST           [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! CONSTRUCTOR     [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! EOF             [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! FALSE           [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! FUNCTION        [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! NULL            [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! NULLABLE        [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! NUMBER          [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! OPERATOR        [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! SMARTCAST       [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! THIS            [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! TRUE            [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! VAL             [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! VAR             [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! DOUBLE          [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! WHEN            [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! LONG            [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! ELVIS           [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! IN              [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! NOT_IN          [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! IS              [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! NOT_IS          [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! MAIOR           [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! MENORIGUAL      [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! MAIORIGUAL      [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! DIFERENTE       [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! IDENTIDADE      [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! IGUALDADE       [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! SEMIDENTIDADE   [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! AND             [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! OR              [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! FUN             [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! FOR             [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! WHILE           [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! DO              [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! LITERAL_STRING  [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! IF              [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! RETURN          [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! RETURN_AT       [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! CONTINUE        [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! CONTINUE_AT     [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! BREAK           [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! BREAK_AT        [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! NOT             [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! SUSPEND         [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! COMMA           [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! RPAREN          [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! LCHAVE          [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! PV              [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! ELSE            [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! RCCT            [ reduce using rule 86 (conjunction -> equality AND conjunction .) ]
  ! OR              [ reduce using rule 83 (disjunction -> conjunction .) ]


state 325

    (88) equality -> comparison equalityOperator equality .
    (85) conjunction -> equality .
    (86) conjunction -> equality . AND conjunction

  ! reduce/reduce conflict for FUN resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for FOR resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for WHILE resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for DO resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for ID resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for IMPORT resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for INIT resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for OUT resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for VARARG resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for WHERE resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for INT resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for FLOAT resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for STRING resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for ARRAY resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for CHAR resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for OBJECT resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for CONST resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for EOF resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for FALSE resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for NULL resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for NUMBER resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for THIS resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for TRUE resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for VAL resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for VAR resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for WHEN resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for LONG resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for LPAREN resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for LCCT resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for IF resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for RETURN resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for BREAK resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for MINUS resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for PLUS resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for NOT resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for PV resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for ELSE resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for MENOR resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for PONTO resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for AS resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for MULT resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for MOD resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for ELVIS resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for IN resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for IS resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for MAIOR resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for AND resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for OR resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for COMMA resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for RPAREN resolved using rule 85 (conjunction -> equality .)
  ! reduce/reduce conflict for RCCT resolved using rule 85 (conjunction -> equality .)
  ! shift/reduce conflict for AND resolved as shift
    FUN             reduce using rule 85 (conjunction -> equality .)
    FOR             reduce using rule 85 (conjunction -> equality .)
    WHILE           reduce using rule 85 (conjunction -> equality .)
    DO              reduce using rule 85 (conjunction -> equality .)
    ID              reduce using rule 85 (conjunction -> equality .)
    CROSSINLINE     reduce using rule 85 (conjunction -> equality .)
    IMPORT          reduce using rule 85 (conjunction -> equality .)
    INIT            reduce using rule 85 (conjunction -> equality .)
    NOINLINE        reduce using rule 85 (conjunction -> equality .)
    OUT             reduce using rule 85 (conjunction -> equality .)
    VARARG          reduce using rule 85 (conjunction -> equality .)
    WHERE           reduce using rule 85 (conjunction -> equality .)
    INT             reduce using rule 85 (conjunction -> equality .)
    FLOAT           reduce using rule 85 (conjunction -> equality .)
    BOOLEAN         reduce using rule 85 (conjunction -> equality .)
    STRING          reduce using rule 85 (conjunction -> equality .)
    ARRAY           reduce using rule 85 (conjunction -> equality .)
    CHAR            reduce using rule 85 (conjunction -> equality .)
    OBJECT          reduce using rule 85 (conjunction -> equality .)
    CONST           reduce using rule 85 (conjunction -> equality .)
    CONSTRUCTOR     reduce using rule 85 (conjunction -> equality .)
    EOF             reduce using rule 85 (conjunction -> equality .)
    FALSE           reduce using rule 85 (conjunction -> equality .)
    FUNCTION        reduce using rule 85 (conjunction -> equality .)
    NULL            reduce using rule 85 (conjunction -> equality .)
    NULLABLE        reduce using rule 85 (conjunction -> equality .)
    NUMBER          reduce using rule 85 (conjunction -> equality .)
    OPERATOR        reduce using rule 85 (conjunction -> equality .)
    SMARTCAST       reduce using rule 85 (conjunction -> equality .)
    THIS            reduce using rule 85 (conjunction -> equality .)
    TRUE            reduce using rule 85 (conjunction -> equality .)
    VAL             reduce using rule 85 (conjunction -> equality .)
    VAR             reduce using rule 85 (conjunction -> equality .)
    DOUBLE          reduce using rule 85 (conjunction -> equality .)
    WHEN            reduce using rule 85 (conjunction -> equality .)
    LONG            reduce using rule 85 (conjunction -> equality .)
    LPAREN          reduce using rule 85 (conjunction -> equality .)
    LITERAL_STRING  reduce using rule 85 (conjunction -> equality .)
    COLONCOLON      reduce using rule 85 (conjunction -> equality .)
    LCCT            reduce using rule 85 (conjunction -> equality .)
    IF              reduce using rule 85 (conjunction -> equality .)
    RETURN          reduce using rule 85 (conjunction -> equality .)
    RETURN_AT       reduce using rule 85 (conjunction -> equality .)
    CONTINUE        reduce using rule 85 (conjunction -> equality .)
    CONTINUE_AT     reduce using rule 85 (conjunction -> equality .)
    BREAK           reduce using rule 85 (conjunction -> equality .)
    BREAK_AT        reduce using rule 85 (conjunction -> equality .)
    RCHAVE          reduce using rule 85 (conjunction -> equality .)
    INCREMENTO      reduce using rule 85 (conjunction -> equality .)
    DECREMENTO      reduce using rule 85 (conjunction -> equality .)
    MINUS           reduce using rule 85 (conjunction -> equality .)
    PLUS            reduce using rule 85 (conjunction -> equality .)
    NOT             reduce using rule 85 (conjunction -> equality .)
    SUSPEND         reduce using rule 85 (conjunction -> equality .)
    LCHAVE          reduce using rule 85 (conjunction -> equality .)
    PV              reduce using rule 85 (conjunction -> equality .)
    ELSE            reduce using rule 85 (conjunction -> equality .)
    MENOR           reduce using rule 85 (conjunction -> equality .)
    PONTO           reduce using rule 85 (conjunction -> equality .)
    AS              reduce using rule 85 (conjunction -> equality .)
    MAISIGUAL       reduce using rule 85 (conjunction -> equality .)
    MENOSIGUAL      reduce using rule 85 (conjunction -> equality .)
    MULTIGUAL       reduce using rule 85 (conjunction -> equality .)
    DIVIGUAL        reduce using rule 85 (conjunction -> equality .)
    MODIGUAL        reduce using rule 85 (conjunction -> equality .)
    MULT            reduce using rule 85 (conjunction -> equality .)
    DIVIDE          reduce using rule 85 (conjunction -> equality .)
    MOD             reduce using rule 85 (conjunction -> equality .)
    PONTOPONTO      reduce using rule 85 (conjunction -> equality .)
    ELVIS           reduce using rule 85 (conjunction -> equality .)
    IN              reduce using rule 85 (conjunction -> equality .)
    NOT_IN          reduce using rule 85 (conjunction -> equality .)
    IS              reduce using rule 85 (conjunction -> equality .)
    NOT_IS          reduce using rule 85 (conjunction -> equality .)
    MAIOR           reduce using rule 85 (conjunction -> equality .)
    MENORIGUAL      reduce using rule 85 (conjunction -> equality .)
    MAIORIGUAL      reduce using rule 85 (conjunction -> equality .)
    DIFERENTE       reduce using rule 85 (conjunction -> equality .)
    IDENTIDADE      reduce using rule 85 (conjunction -> equality .)
    IGUALDADE       reduce using rule 85 (conjunction -> equality .)
    SEMIDENTIDADE   reduce using rule 85 (conjunction -> equality .)
    OR              reduce using rule 85 (conjunction -> equality .)
    COMMA           reduce using rule 85 (conjunction -> equality .)
    RPAREN          reduce using rule 85 (conjunction -> equality .)
    RCCT            reduce using rule 85 (conjunction -> equality .)
    AND             shift and go to state 213

  ! INCREMENTO      [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! DECREMENTO      [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! MENOR           [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! LCCT            [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! LPAREN          [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! COLONCOLON      [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! RCHAVE          [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! PONTO           [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! AS              [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! MAISIGUAL       [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! MENOSIGUAL      [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! MULTIGUAL       [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! DIVIGUAL        [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! MODIGUAL        [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! MULT            [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! DIVIDE          [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! MOD             [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! PLUS            [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! MINUS           [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! PONTOPONTO      [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! ID              [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! CROSSINLINE     [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! IMPORT          [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! INIT            [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! NOINLINE        [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! OUT             [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! VARARG          [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! WHERE           [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! INT             [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! FLOAT           [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! BOOLEAN         [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! STRING          [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! ARRAY           [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! CHAR            [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! OBJECT          [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! CONST           [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! CONSTRUCTOR     [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! EOF             [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! FALSE           [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! FUNCTION        [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! NULL            [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! NULLABLE        [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! NUMBER          [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! OPERATOR        [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! SMARTCAST       [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! THIS            [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! TRUE            [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! VAL             [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! VAR             [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! DOUBLE          [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! WHEN            [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! LONG            [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! ELVIS           [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! IN              [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! NOT_IN          [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! IS              [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! NOT_IS          [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! MAIOR           [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! MENORIGUAL      [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! MAIORIGUAL      [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! DIFERENTE       [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! IDENTIDADE      [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! IGUALDADE       [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! SEMIDENTIDADE   [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! AND             [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! OR              [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! FUN             [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! FOR             [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! WHILE           [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! DO              [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! LITERAL_STRING  [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! IF              [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! RETURN          [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! RETURN_AT       [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! CONTINUE        [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! CONTINUE_AT     [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! BREAK           [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! BREAK_AT        [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! NOT             [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! SUSPEND         [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! COMMA           [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! RPAREN          [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! LCHAVE          [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! PV              [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! ELSE            [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! RCCT            [ reduce using rule 88 (equality -> comparison equalityOperator equality .) ]
  ! AND             [ reduce using rule 85 (conjunction -> equality .) ]


state 326

    (222) callableReference -> receiverType COLONCOLON simpleIdentifier .

    INCREMENTO      reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    DECREMENTO      reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    MENOR           reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    LCCT            reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    LPAREN          reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    COLONCOLON      reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    RCHAVE          reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    PONTO           reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    AS              reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    MAISIGUAL       reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    MENOSIGUAL      reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    MULTIGUAL       reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    DIVIGUAL        reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    MODIGUAL        reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    MULT            reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    DIVIDE          reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    MOD             reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    PLUS            reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    MINUS           reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    PONTOPONTO      reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    ID              reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    CROSSINLINE     reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    IMPORT          reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    INIT            reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    NOINLINE        reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    OUT             reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    VARARG          reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    WHERE           reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    INT             reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    FLOAT           reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    BOOLEAN         reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    STRING          reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    ARRAY           reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    CHAR            reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    OBJECT          reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    CONST           reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    CONSTRUCTOR     reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    EOF             reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    FALSE           reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    FUNCTION        reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    NULL            reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    NULLABLE        reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    NUMBER          reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    OPERATOR        reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    SMARTCAST       reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    THIS            reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    TRUE            reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    VAL             reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    VAR             reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    DOUBLE          reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    WHEN            reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    LONG            reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    ELVIS           reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    IN              reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    NOT_IN          reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    IS              reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    NOT_IS          reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    MAIOR           reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    MENORIGUAL      reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    MAIORIGUAL      reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    DIFERENTE       reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    IDENTIDADE      reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    IGUALDADE       reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    AND             reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    OR              reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    FUN             reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    FOR             reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    WHILE           reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    DO              reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    LITERAL_STRING  reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    IF              reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    RETURN          reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    RETURN_AT       reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    CONTINUE        reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    CONTINUE_AT     reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    BREAK           reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    BREAK_AT        reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    NOT             reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    SUSPEND         reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    COMMA           reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    RPAREN          reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    LCHAVE          reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    PV              reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    ELSE            reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)
    RCCT            reduce using rule 222 (callableReference -> receiverType COLONCOLON simpleIdentifier .)


state 327

    (224) callableReference -> receiverType COLONCOLON CLASS .

    INCREMENTO      reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    DECREMENTO      reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    MENOR           reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    LCCT            reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    LPAREN          reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    COLONCOLON      reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    RCHAVE          reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    PONTO           reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    AS              reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    MAISIGUAL       reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    MENOSIGUAL      reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    MULTIGUAL       reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    DIVIGUAL        reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    MODIGUAL        reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    MULT            reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    DIVIDE          reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    MOD             reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    PLUS            reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    MINUS           reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    PONTOPONTO      reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    ID              reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    CROSSINLINE     reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    IMPORT          reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    INIT            reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    NOINLINE        reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    OUT             reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    VARARG          reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    WHERE           reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    INT             reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    FLOAT           reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    BOOLEAN         reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    STRING          reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    ARRAY           reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    CHAR            reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    OBJECT          reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    CONST           reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    CONSTRUCTOR     reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    EOF             reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    FALSE           reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    FUNCTION        reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    NULL            reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    NULLABLE        reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    NUMBER          reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    OPERATOR        reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    SMARTCAST       reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    THIS            reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    TRUE            reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    VAL             reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    VAR             reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    DOUBLE          reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    WHEN            reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    LONG            reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    ELVIS           reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    IN              reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    NOT_IN          reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    IS              reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    NOT_IS          reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    MAIOR           reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    MENORIGUAL      reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    MAIORIGUAL      reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    DIFERENTE       reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    IDENTIDADE      reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    IGUALDADE       reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    SEMIDENTIDADE   reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    AND             reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    OR              reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    FUN             reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    FOR             reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    WHILE           reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    DO              reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    LITERAL_STRING  reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    IF              reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    RETURN          reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    RETURN_AT       reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    CONTINUE        reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    CONTINUE_AT     reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    BREAK           reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    BREAK_AT        reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    NOT             reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    SUSPEND         reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    COMMA           reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    RPAREN          reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    LCHAVE          reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    PV              reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    ELSE            reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)
    RCCT            reduce using rule 224 (callableReference -> receiverType COLONCOLON CLASS .)


state 328

    (168) collectionLiteral -> LCCT cl RCCT .

    INCREMENTO      reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    DECREMENTO      reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    MENOR           reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    LCCT            reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    LPAREN          reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    COLONCOLON      reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    RCHAVE          reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    PONTO           reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    AS              reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    MAISIGUAL       reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    MENOSIGUAL      reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    MULTIGUAL       reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    DIVIGUAL        reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    MODIGUAL        reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    MULT            reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    DIVIDE          reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    MOD             reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    PLUS            reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    MINUS           reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    PONTOPONTO      reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    ID              reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    CROSSINLINE     reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    IMPORT          reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    INIT            reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    NOINLINE        reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    OUT             reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    VARARG          reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    WHERE           reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    INT             reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    FLOAT           reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    BOOLEAN         reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    STRING          reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    ARRAY           reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    CHAR            reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    OBJECT          reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    CONST           reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    CONSTRUCTOR     reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    EOF             reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    FALSE           reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    FUNCTION        reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    NULL            reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    NULLABLE        reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    NUMBER          reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    OPERATOR        reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    SMARTCAST       reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    THIS            reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    TRUE            reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    VAL             reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    VAR             reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    DOUBLE          reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    WHEN            reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    LONG            reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    ELVIS           reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    IN              reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    NOT_IN          reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    IS              reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    NOT_IS          reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    MAIOR           reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    MENORIGUAL      reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    MAIORIGUAL      reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    DIFERENTE       reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    IDENTIDADE      reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    IGUALDADE       reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    SEMIDENTIDADE   reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    AND             reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    OR              reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    FUN             reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    FOR             reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    WHILE           reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    DO              reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    LITERAL_STRING  reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    IF              reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    RETURN          reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    RETURN_AT       reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    CONTINUE        reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    CONTINUE_AT     reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    BREAK           reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    BREAK_AT        reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    NOT             reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    SUSPEND         reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    COMMA           reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    RPAREN          reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    LCHAVE          reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    PV              reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    ELSE            reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)
    RCCT            reduce using rule 168 (collectionLiteral -> LCCT cl RCCT .)


state 329

    (171) cl -> expression COMMA . cl
    (170) cl -> . expression
    (171) cl -> . expression COMMA cl
    (82) expression -> . disjunction
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (33) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 99
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    LPAREN          shift and go to state 152
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57

    expression                     shift and go to state 226
    cl                             shift and go to state 380
    disjunction                    shift and go to state 85
    conjunction                    shift and go to state 94
    equality                       shift and go to state 97
    comparison                     shift and go to state 106
    infixOperation                 shift and go to state 121
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    simpleIdentifier               shift and go to state 149
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133
    prefixUnaryExpression          shift and go to state 150
    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 151
    unaryPrefix                    shift and go to state 105
    primaryExpression              shift and go to state 95
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122

state 330

    (210) ifExpression -> IF LPAREN expression . RPAREN if1 if2 ELSE if1 if2
    (217) jumpExpression -> expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 381
    AND             reduce using rule 217 (jumpExpression -> expression .)
    OR              reduce using rule 217 (jumpExpression -> expression .)
    INCREMENTO      reduce using rule 217 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 217 (jumpExpression -> expression .)
    MENOR           reduce using rule 217 (jumpExpression -> expression .)
    LCCT            reduce using rule 217 (jumpExpression -> expression .)
    LPAREN          reduce using rule 217 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 217 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 217 (jumpExpression -> expression .)
    PONTO           reduce using rule 217 (jumpExpression -> expression .)
    AS              reduce using rule 217 (jumpExpression -> expression .)
    MULT            reduce using rule 217 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 217 (jumpExpression -> expression .)
    MOD             reduce using rule 217 (jumpExpression -> expression .)
    PLUS            reduce using rule 217 (jumpExpression -> expression .)
    MINUS           reduce using rule 217 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 217 (jumpExpression -> expression .)
    ID              reduce using rule 217 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 217 (jumpExpression -> expression .)
    IMPORT          reduce using rule 217 (jumpExpression -> expression .)
    INIT            reduce using rule 217 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 217 (jumpExpression -> expression .)
    OUT             reduce using rule 217 (jumpExpression -> expression .)
    VARARG          reduce using rule 217 (jumpExpression -> expression .)
    WHERE           reduce using rule 217 (jumpExpression -> expression .)
    INT             reduce using rule 217 (jumpExpression -> expression .)
    FLOAT           reduce using rule 217 (jumpExpression -> expression .)
    BOOLEAN         reduce using rule 217 (jumpExpression -> expression .)
    STRING          reduce using rule 217 (jumpExpression -> expression .)
    ARRAY           reduce using rule 217 (jumpExpression -> expression .)
    CHAR            reduce using rule 217 (jumpExpression -> expression .)
    OBJECT          reduce using rule 217 (jumpExpression -> expression .)
    CONST           reduce using rule 217 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 217 (jumpExpression -> expression .)
    EOF             reduce using rule 217 (jumpExpression -> expression .)
    FALSE           reduce using rule 217 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 217 (jumpExpression -> expression .)
    NULL            reduce using rule 217 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 217 (jumpExpression -> expression .)
    NUMBER          reduce using rule 217 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 217 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 217 (jumpExpression -> expression .)
    THIS            reduce using rule 217 (jumpExpression -> expression .)
    TRUE            reduce using rule 217 (jumpExpression -> expression .)
    VAL             reduce using rule 217 (jumpExpression -> expression .)
    VAR             reduce using rule 217 (jumpExpression -> expression .)
    DOUBLE          reduce using rule 217 (jumpExpression -> expression .)
    WHEN            reduce using rule 217 (jumpExpression -> expression .)
    LONG            reduce using rule 217 (jumpExpression -> expression .)
    ELVIS           reduce using rule 217 (jumpExpression -> expression .)
    IN              reduce using rule 217 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 217 (jumpExpression -> expression .)
    IS              reduce using rule 217 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 217 (jumpExpression -> expression .)
    MAIOR           reduce using rule 217 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 217 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 217 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 217 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 217 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 217 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 217 (jumpExpression -> expression .)

  ! RPAREN          [ reduce using rule 217 (jumpExpression -> expression .) ]


state 331

    (90) comparison -> infixOperation comparisonOperator infixOperation .
    (89) comparison -> infixOperation .
    (90) comparison -> infixOperation . comparisonOperator infixOperation
    (235) comparisonOperator -> . MENOR
    (236) comparisonOperator -> . MAIOR
    (237) comparisonOperator -> . MENORIGUAL
    (238) comparisonOperator -> . MAIORIGUAL

  ! reduce/reduce conflict for FUN resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for FOR resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for WHILE resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for DO resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for ID resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for IMPORT resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for INIT resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for OUT resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for VARARG resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for WHERE resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for INT resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for FLOAT resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for STRING resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for ARRAY resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for CHAR resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for OBJECT resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for CONST resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for EOF resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for FALSE resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for NULL resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for NUMBER resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for THIS resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for TRUE resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for VAL resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for VAR resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for WHEN resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for LONG resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for LPAREN resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for LCCT resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for IF resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for RETURN resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for BREAK resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MINUS resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for PLUS resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for NOT resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for PV resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for ELSE resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MENOR resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for PONTO resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for AS resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MULT resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MOD resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for ELVIS resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for IN resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for IS resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MAIOR resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for AND resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for OR resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for COMMA resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for RPAREN resolved using rule 89 (comparison -> infixOperation .)
  ! reduce/reduce conflict for RCCT resolved using rule 89 (comparison -> infixOperation .)
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAIOR resolved as shift
  ! shift/reduce conflict for MENORIGUAL resolved as shift
  ! shift/reduce conflict for MAIORIGUAL resolved as shift
    FUN             reduce using rule 89 (comparison -> infixOperation .)
    FOR             reduce using rule 89 (comparison -> infixOperation .)
    WHILE           reduce using rule 89 (comparison -> infixOperation .)
    DO              reduce using rule 89 (comparison -> infixOperation .)
    ID              reduce using rule 89 (comparison -> infixOperation .)
    CROSSINLINE     reduce using rule 89 (comparison -> infixOperation .)
    IMPORT          reduce using rule 89 (comparison -> infixOperation .)
    INIT            reduce using rule 89 (comparison -> infixOperation .)
    NOINLINE        reduce using rule 89 (comparison -> infixOperation .)
    OUT             reduce using rule 89 (comparison -> infixOperation .)
    VARARG          reduce using rule 89 (comparison -> infixOperation .)
    WHERE           reduce using rule 89 (comparison -> infixOperation .)
    INT             reduce using rule 89 (comparison -> infixOperation .)
    FLOAT           reduce using rule 89 (comparison -> infixOperation .)
    BOOLEAN         reduce using rule 89 (comparison -> infixOperation .)
    STRING          reduce using rule 89 (comparison -> infixOperation .)
    ARRAY           reduce using rule 89 (comparison -> infixOperation .)
    CHAR            reduce using rule 89 (comparison -> infixOperation .)
    OBJECT          reduce using rule 89 (comparison -> infixOperation .)
    CONST           reduce using rule 89 (comparison -> infixOperation .)
    CONSTRUCTOR     reduce using rule 89 (comparison -> infixOperation .)
    EOF             reduce using rule 89 (comparison -> infixOperation .)
    FALSE           reduce using rule 89 (comparison -> infixOperation .)
    FUNCTION        reduce using rule 89 (comparison -> infixOperation .)
    NULL            reduce using rule 89 (comparison -> infixOperation .)
    NULLABLE        reduce using rule 89 (comparison -> infixOperation .)
    NUMBER          reduce using rule 89 (comparison -> infixOperation .)
    OPERATOR        reduce using rule 89 (comparison -> infixOperation .)
    SMARTCAST       reduce using rule 89 (comparison -> infixOperation .)
    THIS            reduce using rule 89 (comparison -> infixOperation .)
    TRUE            reduce using rule 89 (comparison -> infixOperation .)
    VAL             reduce using rule 89 (comparison -> infixOperation .)
    VAR             reduce using rule 89 (comparison -> infixOperation .)
    DOUBLE          reduce using rule 89 (comparison -> infixOperation .)
    WHEN            reduce using rule 89 (comparison -> infixOperation .)
    LONG            reduce using rule 89 (comparison -> infixOperation .)
    LPAREN          reduce using rule 89 (comparison -> infixOperation .)
    LITERAL_STRING  reduce using rule 89 (comparison -> infixOperation .)
    COLONCOLON      reduce using rule 89 (comparison -> infixOperation .)
    LCCT            reduce using rule 89 (comparison -> infixOperation .)
    IF              reduce using rule 89 (comparison -> infixOperation .)
    RETURN          reduce using rule 89 (comparison -> infixOperation .)
    RETURN_AT       reduce using rule 89 (comparison -> infixOperation .)
    CONTINUE        reduce using rule 89 (comparison -> infixOperation .)
    CONTINUE_AT     reduce using rule 89 (comparison -> infixOperation .)
    BREAK           reduce using rule 89 (comparison -> infixOperation .)
    BREAK_AT        reduce using rule 89 (comparison -> infixOperation .)
    RCHAVE          reduce using rule 89 (comparison -> infixOperation .)
    INCREMENTO      reduce using rule 89 (comparison -> infixOperation .)
    DECREMENTO      reduce using rule 89 (comparison -> infixOperation .)
    MINUS           reduce using rule 89 (comparison -> infixOperation .)
    PLUS            reduce using rule 89 (comparison -> infixOperation .)
    NOT             reduce using rule 89 (comparison -> infixOperation .)
    SUSPEND         reduce using rule 89 (comparison -> infixOperation .)
    LCHAVE          reduce using rule 89 (comparison -> infixOperation .)
    PV              reduce using rule 89 (comparison -> infixOperation .)
    ELSE            reduce using rule 89 (comparison -> infixOperation .)
    PONTO           reduce using rule 89 (comparison -> infixOperation .)
    AS              reduce using rule 89 (comparison -> infixOperation .)
    MAISIGUAL       reduce using rule 89 (comparison -> infixOperation .)
    MENOSIGUAL      reduce using rule 89 (comparison -> infixOperation .)
    MULTIGUAL       reduce using rule 89 (comparison -> infixOperation .)
    DIVIGUAL        reduce using rule 89 (comparison -> infixOperation .)
    MODIGUAL        reduce using rule 89 (comparison -> infixOperation .)
    MULT            reduce using rule 89 (comparison -> infixOperation .)
    DIVIDE          reduce using rule 89 (comparison -> infixOperation .)
    MOD             reduce using rule 89 (comparison -> infixOperation .)
    PONTOPONTO      reduce using rule 89 (comparison -> infixOperation .)
    ELVIS           reduce using rule 89 (comparison -> infixOperation .)
    IN              reduce using rule 89 (comparison -> infixOperation .)
    NOT_IN          reduce using rule 89 (comparison -> infixOperation .)
    IS              reduce using rule 89 (comparison -> infixOperation .)
    NOT_IS          reduce using rule 89 (comparison -> infixOperation .)
    DIFERENTE       reduce using rule 89 (comparison -> infixOperation .)
    IDENTIDADE      reduce using rule 89 (comparison -> infixOperation .)
    IGUALDADE       reduce using rule 89 (comparison -> infixOperation .)
    SEMIDENTIDADE   reduce using rule 89 (comparison -> infixOperation .)
    AND             reduce using rule 89 (comparison -> infixOperation .)
    OR              reduce using rule 89 (comparison -> infixOperation .)
    COMMA           reduce using rule 89 (comparison -> infixOperation .)
    RPAREN          reduce using rule 89 (comparison -> infixOperation .)
    RCCT            reduce using rule 89 (comparison -> infixOperation .)
    MENOR           shift and go to state 231
    MAIOR           shift and go to state 232
    MENORIGUAL      shift and go to state 233
    MAIORIGUAL      shift and go to state 234

  ! INCREMENTO      [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! DECREMENTO      [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MENOR           [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! LCCT            [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! LPAREN          [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! COLONCOLON      [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! RCHAVE          [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! PONTO           [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! AS              [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MAISIGUAL       [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MENOSIGUAL      [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MULTIGUAL       [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! DIVIGUAL        [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MODIGUAL        [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MULT            [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! DIVIDE          [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MOD             [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! PLUS            [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MINUS           [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! PONTOPONTO      [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! ID              [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! CROSSINLINE     [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! IMPORT          [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! INIT            [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! NOINLINE        [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! OUT             [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! VARARG          [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! WHERE           [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! INT             [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! FLOAT           [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! BOOLEAN         [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! STRING          [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! ARRAY           [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! CHAR            [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! OBJECT          [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! CONST           [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! CONSTRUCTOR     [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! EOF             [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! FALSE           [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! FUNCTION        [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! NULL            [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! NULLABLE        [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! NUMBER          [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! OPERATOR        [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! SMARTCAST       [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! THIS            [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! TRUE            [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! VAL             [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! VAR             [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! DOUBLE          [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! WHEN            [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! LONG            [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! ELVIS           [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! IN              [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! NOT_IN          [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! IS              [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! NOT_IS          [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MAIOR           [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MENORIGUAL      [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MAIORIGUAL      [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! DIFERENTE       [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! IDENTIDADE      [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! IGUALDADE       [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! SEMIDENTIDADE   [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! AND             [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! OR              [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! FUN             [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! FOR             [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! WHILE           [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! DO              [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! LITERAL_STRING  [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! IF              [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! RETURN          [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! RETURN_AT       [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! CONTINUE        [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! CONTINUE_AT     [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! BREAK           [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! BREAK_AT        [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! NOT             [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! SUSPEND         [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! COMMA           [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! RPAREN          [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! LCHAVE          [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! PV              [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! ELSE            [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! RCCT            [ reduce using rule 90 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MENOR           [ reduce using rule 89 (comparison -> infixOperation .) ]
  ! MAIOR           [ reduce using rule 89 (comparison -> infixOperation .) ]
  ! MENORIGUAL      [ reduce using rule 89 (comparison -> infixOperation .) ]
  ! MAIORIGUAL      [ reduce using rule 89 (comparison -> infixOperation .) ]

    comparisonOperator             shift and go to state 230

state 332

    (93) io -> inOperator elvisExpression .
    (94) io -> inOperator elvisExpression . io
    (91) infixOperation -> elvisExpression . io
    (92) infixOperation -> elvisExpression .
    (93) io -> . inOperator elvisExpression
    (94) io -> . inOperator elvisExpression io
    (95) io -> . isOperator type
    (96) io -> . isOperator type io
    (239) inOperator -> . IN
    (240) inOperator -> . NOT_IN
    (241) isOperator -> . IS
    (242) isOperator -> . NOT_IS

  ! reduce/reduce conflict for FUN resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for FOR resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for WHILE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DO resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for ID resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for INIT resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for OUT resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for VARARG resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for WHERE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for INT resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for STRING resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CHAR resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CONST resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for EOF resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for FALSE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NULL resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for THIS resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for TRUE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for VAL resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for VAR resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for WHEN resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for LONG resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for LCCT resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IF resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for RETURN resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for BREAK resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MINUS resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for PLUS resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NOT resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for PV resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for ELSE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MENOR resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for PONTO resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for AS resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MULT resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MOD resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IN resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IS resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for AND resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for OR resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for COMMA resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for RCCT resolved using rule 92 (infixOperation -> elvisExpression .)
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT_IN resolved as shift
  ! shift/reduce conflict for IS resolved as shift
  ! shift/reduce conflict for NOT_IS resolved as shift
    FUN             reduce using rule 92 (infixOperation -> elvisExpression .)
    FOR             reduce using rule 92 (infixOperation -> elvisExpression .)
    WHILE           reduce using rule 92 (infixOperation -> elvisExpression .)
    DO              reduce using rule 92 (infixOperation -> elvisExpression .)
    ID              reduce using rule 92 (infixOperation -> elvisExpression .)
    CROSSINLINE     reduce using rule 92 (infixOperation -> elvisExpression .)
    IMPORT          reduce using rule 92 (infixOperation -> elvisExpression .)
    INIT            reduce using rule 92 (infixOperation -> elvisExpression .)
    NOINLINE        reduce using rule 92 (infixOperation -> elvisExpression .)
    OUT             reduce using rule 92 (infixOperation -> elvisExpression .)
    VARARG          reduce using rule 92 (infixOperation -> elvisExpression .)
    WHERE           reduce using rule 92 (infixOperation -> elvisExpression .)
    INT             reduce using rule 92 (infixOperation -> elvisExpression .)
    FLOAT           reduce using rule 92 (infixOperation -> elvisExpression .)
    BOOLEAN         reduce using rule 92 (infixOperation -> elvisExpression .)
    STRING          reduce using rule 92 (infixOperation -> elvisExpression .)
    ARRAY           reduce using rule 92 (infixOperation -> elvisExpression .)
    CHAR            reduce using rule 92 (infixOperation -> elvisExpression .)
    OBJECT          reduce using rule 92 (infixOperation -> elvisExpression .)
    CONST           reduce using rule 92 (infixOperation -> elvisExpression .)
    CONSTRUCTOR     reduce using rule 92 (infixOperation -> elvisExpression .)
    EOF             reduce using rule 92 (infixOperation -> elvisExpression .)
    FALSE           reduce using rule 92 (infixOperation -> elvisExpression .)
    FUNCTION        reduce using rule 92 (infixOperation -> elvisExpression .)
    NULL            reduce using rule 92 (infixOperation -> elvisExpression .)
    NULLABLE        reduce using rule 92 (infixOperation -> elvisExpression .)
    NUMBER          reduce using rule 92 (infixOperation -> elvisExpression .)
    OPERATOR        reduce using rule 92 (infixOperation -> elvisExpression .)
    SMARTCAST       reduce using rule 92 (infixOperation -> elvisExpression .)
    THIS            reduce using rule 92 (infixOperation -> elvisExpression .)
    TRUE            reduce using rule 92 (infixOperation -> elvisExpression .)
    VAL             reduce using rule 92 (infixOperation -> elvisExpression .)
    VAR             reduce using rule 92 (infixOperation -> elvisExpression .)
    DOUBLE          reduce using rule 92 (infixOperation -> elvisExpression .)
    WHEN            reduce using rule 92 (infixOperation -> elvisExpression .)
    LONG            reduce using rule 92 (infixOperation -> elvisExpression .)
    LPAREN          reduce using rule 92 (infixOperation -> elvisExpression .)
    LITERAL_STRING  reduce using rule 92 (infixOperation -> elvisExpression .)
    COLONCOLON      reduce using rule 92 (infixOperation -> elvisExpression .)
    LCCT            reduce using rule 92 (infixOperation -> elvisExpression .)
    IF              reduce using rule 92 (infixOperation -> elvisExpression .)
    RETURN          reduce using rule 92 (infixOperation -> elvisExpression .)
    RETURN_AT       reduce using rule 92 (infixOperation -> elvisExpression .)
    CONTINUE        reduce using rule 92 (infixOperation -> elvisExpression .)
    CONTINUE_AT     reduce using rule 92 (infixOperation -> elvisExpression .)
    BREAK           reduce using rule 92 (infixOperation -> elvisExpression .)
    BREAK_AT        reduce using rule 92 (infixOperation -> elvisExpression .)
    RCHAVE          reduce using rule 92 (infixOperation -> elvisExpression .)
    INCREMENTO      reduce using rule 92 (infixOperation -> elvisExpression .)
    DECREMENTO      reduce using rule 92 (infixOperation -> elvisExpression .)
    MINUS           reduce using rule 92 (infixOperation -> elvisExpression .)
    PLUS            reduce using rule 92 (infixOperation -> elvisExpression .)
    NOT             reduce using rule 92 (infixOperation -> elvisExpression .)
    SUSPEND         reduce using rule 92 (infixOperation -> elvisExpression .)
    LCHAVE          reduce using rule 92 (infixOperation -> elvisExpression .)
    PV              reduce using rule 92 (infixOperation -> elvisExpression .)
    ELSE            reduce using rule 92 (infixOperation -> elvisExpression .)
    MENOR           reduce using rule 92 (infixOperation -> elvisExpression .)
    PONTO           reduce using rule 92 (infixOperation -> elvisExpression .)
    AS              reduce using rule 92 (infixOperation -> elvisExpression .)
    MAISIGUAL       reduce using rule 92 (infixOperation -> elvisExpression .)
    MENOSIGUAL      reduce using rule 92 (infixOperation -> elvisExpression .)
    MULTIGUAL       reduce using rule 92 (infixOperation -> elvisExpression .)
    DIVIGUAL        reduce using rule 92 (infixOperation -> elvisExpression .)
    MODIGUAL        reduce using rule 92 (infixOperation -> elvisExpression .)
    MULT            reduce using rule 92 (infixOperation -> elvisExpression .)
    DIVIDE          reduce using rule 92 (infixOperation -> elvisExpression .)
    MOD             reduce using rule 92 (infixOperation -> elvisExpression .)
    PONTOPONTO      reduce using rule 92 (infixOperation -> elvisExpression .)
    ELVIS           reduce using rule 92 (infixOperation -> elvisExpression .)
    MAIOR           reduce using rule 92 (infixOperation -> elvisExpression .)
    MENORIGUAL      reduce using rule 92 (infixOperation -> elvisExpression .)
    MAIORIGUAL      reduce using rule 92 (infixOperation -> elvisExpression .)
    DIFERENTE       reduce using rule 92 (infixOperation -> elvisExpression .)
    IDENTIDADE      reduce using rule 92 (infixOperation -> elvisExpression .)
    IGUALDADE       reduce using rule 92 (infixOperation -> elvisExpression .)
    SEMIDENTIDADE   reduce using rule 92 (infixOperation -> elvisExpression .)
    AND             reduce using rule 92 (infixOperation -> elvisExpression .)
    OR              reduce using rule 92 (infixOperation -> elvisExpression .)
    COMMA           reduce using rule 92 (infixOperation -> elvisExpression .)
    RPAREN          reduce using rule 92 (infixOperation -> elvisExpression .)
    RCCT            reduce using rule 92 (infixOperation -> elvisExpression .)
    IN              shift and go to state 238
    NOT_IN          shift and go to state 239
    IS              shift and go to state 240
    NOT_IS          shift and go to state 241

  ! FUN             [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! FOR             [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! WHILE           [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! DO              [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! ID              [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! CROSSINLINE     [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! IMPORT          [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! INIT            [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! NOINLINE        [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! OUT             [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! VARARG          [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! WHERE           [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! INT             [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! FLOAT           [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! BOOLEAN         [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! STRING          [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! ARRAY           [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! CHAR            [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! OBJECT          [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! CONST           [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! CONSTRUCTOR     [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! EOF             [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! FALSE           [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! FUNCTION        [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! NULL            [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! NULLABLE        [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! NUMBER          [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! OPERATOR        [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! SMARTCAST       [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! THIS            [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! TRUE            [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! VAL             [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! VAR             [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! DOUBLE          [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! WHEN            [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! LONG            [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! LPAREN          [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! LITERAL_STRING  [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! COLONCOLON      [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! LCCT            [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! IF              [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! RETURN          [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! RETURN_AT       [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! CONTINUE        [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! CONTINUE_AT     [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! BREAK           [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! BREAK_AT        [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! RCHAVE          [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! INCREMENTO      [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! DECREMENTO      [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! MINUS           [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! PLUS            [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! NOT             [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! SUSPEND         [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! LCHAVE          [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! PV              [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! ELSE            [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! MENOR           [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! PONTO           [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! AS              [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! MAISIGUAL       [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! MENOSIGUAL      [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! MULTIGUAL       [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! DIVIGUAL        [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! MODIGUAL        [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! MULT            [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! DIVIDE          [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! MOD             [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! PONTOPONTO      [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! ELVIS           [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! IN              [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! NOT_IN          [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! IS              [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! NOT_IS          [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! MAIOR           [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! MENORIGUAL      [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! MAIORIGUAL      [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! DIFERENTE       [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! IDENTIDADE      [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! IGUALDADE       [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! AND             [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! OR              [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! COMMA           [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! RPAREN          [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! RCCT            [ reduce using rule 93 (io -> inOperator elvisExpression .) ]
  ! IN              [ reduce using rule 92 (infixOperation -> elvisExpression .) ]
  ! NOT_IN          [ reduce using rule 92 (infixOperation -> elvisExpression .) ]
  ! IS              [ reduce using rule 92 (infixOperation -> elvisExpression .) ]
  ! NOT_IS          [ reduce using rule 92 (infixOperation -> elvisExpression .) ]

    inOperator                     shift and go to state 236
    io                             shift and go to state 382
    isOperator                     shift and go to state 237

state 333

    (95) io -> isOperator type .
    (96) io -> isOperator type . io
    (93) io -> . inOperator elvisExpression
    (94) io -> . inOperator elvisExpression io
    (95) io -> . isOperator type
    (96) io -> . isOperator type io
    (239) inOperator -> . IN
    (240) inOperator -> . NOT_IN
    (241) isOperator -> . IS
    (242) isOperator -> . NOT_IS

  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT_IN resolved as shift
  ! shift/reduce conflict for IS resolved as shift
  ! shift/reduce conflict for NOT_IS resolved as shift
    FUN             reduce using rule 95 (io -> isOperator type .)
    FOR             reduce using rule 95 (io -> isOperator type .)
    WHILE           reduce using rule 95 (io -> isOperator type .)
    DO              reduce using rule 95 (io -> isOperator type .)
    ID              reduce using rule 95 (io -> isOperator type .)
    CROSSINLINE     reduce using rule 95 (io -> isOperator type .)
    IMPORT          reduce using rule 95 (io -> isOperator type .)
    INIT            reduce using rule 95 (io -> isOperator type .)
    NOINLINE        reduce using rule 95 (io -> isOperator type .)
    OUT             reduce using rule 95 (io -> isOperator type .)
    VARARG          reduce using rule 95 (io -> isOperator type .)
    WHERE           reduce using rule 95 (io -> isOperator type .)
    INT             reduce using rule 95 (io -> isOperator type .)
    FLOAT           reduce using rule 95 (io -> isOperator type .)
    BOOLEAN         reduce using rule 95 (io -> isOperator type .)
    STRING          reduce using rule 95 (io -> isOperator type .)
    ARRAY           reduce using rule 95 (io -> isOperator type .)
    CHAR            reduce using rule 95 (io -> isOperator type .)
    OBJECT          reduce using rule 95 (io -> isOperator type .)
    CONST           reduce using rule 95 (io -> isOperator type .)
    CONSTRUCTOR     reduce using rule 95 (io -> isOperator type .)
    EOF             reduce using rule 95 (io -> isOperator type .)
    FALSE           reduce using rule 95 (io -> isOperator type .)
    FUNCTION        reduce using rule 95 (io -> isOperator type .)
    NULL            reduce using rule 95 (io -> isOperator type .)
    NULLABLE        reduce using rule 95 (io -> isOperator type .)
    NUMBER          reduce using rule 95 (io -> isOperator type .)
    OPERATOR        reduce using rule 95 (io -> isOperator type .)
    SMARTCAST       reduce using rule 95 (io -> isOperator type .)
    THIS            reduce using rule 95 (io -> isOperator type .)
    TRUE            reduce using rule 95 (io -> isOperator type .)
    VAL             reduce using rule 95 (io -> isOperator type .)
    VAR             reduce using rule 95 (io -> isOperator type .)
    DOUBLE          reduce using rule 95 (io -> isOperator type .)
    WHEN            reduce using rule 95 (io -> isOperator type .)
    LONG            reduce using rule 95 (io -> isOperator type .)
    LPAREN          reduce using rule 95 (io -> isOperator type .)
    LITERAL_STRING  reduce using rule 95 (io -> isOperator type .)
    COLONCOLON      reduce using rule 95 (io -> isOperator type .)
    LCCT            reduce using rule 95 (io -> isOperator type .)
    IF              reduce using rule 95 (io -> isOperator type .)
    RETURN          reduce using rule 95 (io -> isOperator type .)
    RETURN_AT       reduce using rule 95 (io -> isOperator type .)
    CONTINUE        reduce using rule 95 (io -> isOperator type .)
    CONTINUE_AT     reduce using rule 95 (io -> isOperator type .)
    BREAK           reduce using rule 95 (io -> isOperator type .)
    BREAK_AT        reduce using rule 95 (io -> isOperator type .)
    RCHAVE          reduce using rule 95 (io -> isOperator type .)
    INCREMENTO      reduce using rule 95 (io -> isOperator type .)
    DECREMENTO      reduce using rule 95 (io -> isOperator type .)
    MINUS           reduce using rule 95 (io -> isOperator type .)
    PLUS            reduce using rule 95 (io -> isOperator type .)
    NOT             reduce using rule 95 (io -> isOperator type .)
    SUSPEND         reduce using rule 95 (io -> isOperator type .)
    LCHAVE          reduce using rule 95 (io -> isOperator type .)
    PV              reduce using rule 95 (io -> isOperator type .)
    ELSE            reduce using rule 95 (io -> isOperator type .)
    MENOR           reduce using rule 95 (io -> isOperator type .)
    PONTO           reduce using rule 95 (io -> isOperator type .)
    AS              reduce using rule 95 (io -> isOperator type .)
    MAISIGUAL       reduce using rule 95 (io -> isOperator type .)
    MENOSIGUAL      reduce using rule 95 (io -> isOperator type .)
    MULTIGUAL       reduce using rule 95 (io -> isOperator type .)
    DIVIGUAL        reduce using rule 95 (io -> isOperator type .)
    MODIGUAL        reduce using rule 95 (io -> isOperator type .)
    MULT            reduce using rule 95 (io -> isOperator type .)
    DIVIDE          reduce using rule 95 (io -> isOperator type .)
    MOD             reduce using rule 95 (io -> isOperator type .)
    PONTOPONTO      reduce using rule 95 (io -> isOperator type .)
    ELVIS           reduce using rule 95 (io -> isOperator type .)
    MAIOR           reduce using rule 95 (io -> isOperator type .)
    MENORIGUAL      reduce using rule 95 (io -> isOperator type .)
    MAIORIGUAL      reduce using rule 95 (io -> isOperator type .)
    DIFERENTE       reduce using rule 95 (io -> isOperator type .)
    IDENTIDADE      reduce using rule 95 (io -> isOperator type .)
    IGUALDADE       reduce using rule 95 (io -> isOperator type .)
    SEMIDENTIDADE   reduce using rule 95 (io -> isOperator type .)
    AND             reduce using rule 95 (io -> isOperator type .)
    OR              reduce using rule 95 (io -> isOperator type .)
    COMMA           reduce using rule 95 (io -> isOperator type .)
    RPAREN          reduce using rule 95 (io -> isOperator type .)
    RCCT            reduce using rule 95 (io -> isOperator type .)
    IN              shift and go to state 238
    NOT_IN          shift and go to state 239
    IS              shift and go to state 240
    NOT_IS          shift and go to state 241

  ! IN              [ reduce using rule 95 (io -> isOperator type .) ]
  ! NOT_IN          [ reduce using rule 95 (io -> isOperator type .) ]
  ! IS              [ reduce using rule 95 (io -> isOperator type .) ]
  ! NOT_IS          [ reduce using rule 95 (io -> isOperator type .) ]

    isOperator                     shift and go to state 237
    io                             shift and go to state 383
    inOperator                     shift and go to state 236

state 334

    (98) elvisExpression -> infixFunctionCall ELVIS elvisExpression .
    (91) infixOperation -> elvisExpression . io
    (92) infixOperation -> elvisExpression .
    (93) io -> . inOperator elvisExpression
    (94) io -> . inOperator elvisExpression io
    (95) io -> . isOperator type
    (96) io -> . isOperator type io
    (239) inOperator -> . IN
    (240) inOperator -> . NOT_IN
    (241) isOperator -> . IS
    (242) isOperator -> . NOT_IS

  ! reduce/reduce conflict for FUN resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for FOR resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for WHILE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DO resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for ID resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for INIT resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for OUT resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for VARARG resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for WHERE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for INT resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for STRING resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CHAR resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CONST resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for EOF resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for FALSE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NULL resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for THIS resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for TRUE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for VAL resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for VAR resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for WHEN resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for LONG resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for LCCT resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IF resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for RETURN resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for BREAK resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MINUS resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for PLUS resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NOT resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for PV resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for ELSE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MENOR resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for PONTO resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for AS resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MULT resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MOD resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IN resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IS resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for AND resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for OR resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for COMMA resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 92 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for RCCT resolved using rule 92 (infixOperation -> elvisExpression .)
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT_IN resolved as shift
  ! shift/reduce conflict for IS resolved as shift
  ! shift/reduce conflict for NOT_IS resolved as shift
    FUN             reduce using rule 92 (infixOperation -> elvisExpression .)
    FOR             reduce using rule 92 (infixOperation -> elvisExpression .)
    WHILE           reduce using rule 92 (infixOperation -> elvisExpression .)
    DO              reduce using rule 92 (infixOperation -> elvisExpression .)
    ID              reduce using rule 92 (infixOperation -> elvisExpression .)
    CROSSINLINE     reduce using rule 92 (infixOperation -> elvisExpression .)
    IMPORT          reduce using rule 92 (infixOperation -> elvisExpression .)
    INIT            reduce using rule 92 (infixOperation -> elvisExpression .)
    NOINLINE        reduce using rule 92 (infixOperation -> elvisExpression .)
    OUT             reduce using rule 92 (infixOperation -> elvisExpression .)
    VARARG          reduce using rule 92 (infixOperation -> elvisExpression .)
    WHERE           reduce using rule 92 (infixOperation -> elvisExpression .)
    INT             reduce using rule 92 (infixOperation -> elvisExpression .)
    FLOAT           reduce using rule 92 (infixOperation -> elvisExpression .)
    BOOLEAN         reduce using rule 92 (infixOperation -> elvisExpression .)
    STRING          reduce using rule 92 (infixOperation -> elvisExpression .)
    ARRAY           reduce using rule 92 (infixOperation -> elvisExpression .)
    CHAR            reduce using rule 92 (infixOperation -> elvisExpression .)
    OBJECT          reduce using rule 92 (infixOperation -> elvisExpression .)
    CONST           reduce using rule 92 (infixOperation -> elvisExpression .)
    CONSTRUCTOR     reduce using rule 92 (infixOperation -> elvisExpression .)
    EOF             reduce using rule 92 (infixOperation -> elvisExpression .)
    FALSE           reduce using rule 92 (infixOperation -> elvisExpression .)
    FUNCTION        reduce using rule 92 (infixOperation -> elvisExpression .)
    NULL            reduce using rule 92 (infixOperation -> elvisExpression .)
    NULLABLE        reduce using rule 92 (infixOperation -> elvisExpression .)
    NUMBER          reduce using rule 92 (infixOperation -> elvisExpression .)
    OPERATOR        reduce using rule 92 (infixOperation -> elvisExpression .)
    SMARTCAST       reduce using rule 92 (infixOperation -> elvisExpression .)
    THIS            reduce using rule 92 (infixOperation -> elvisExpression .)
    TRUE            reduce using rule 92 (infixOperation -> elvisExpression .)
    VAL             reduce using rule 92 (infixOperation -> elvisExpression .)
    VAR             reduce using rule 92 (infixOperation -> elvisExpression .)
    DOUBLE          reduce using rule 92 (infixOperation -> elvisExpression .)
    WHEN            reduce using rule 92 (infixOperation -> elvisExpression .)
    LONG            reduce using rule 92 (infixOperation -> elvisExpression .)
    LPAREN          reduce using rule 92 (infixOperation -> elvisExpression .)
    LITERAL_STRING  reduce using rule 92 (infixOperation -> elvisExpression .)
    COLONCOLON      reduce using rule 92 (infixOperation -> elvisExpression .)
    LCCT            reduce using rule 92 (infixOperation -> elvisExpression .)
    IF              reduce using rule 92 (infixOperation -> elvisExpression .)
    RETURN          reduce using rule 92 (infixOperation -> elvisExpression .)
    RETURN_AT       reduce using rule 92 (infixOperation -> elvisExpression .)
    CONTINUE        reduce using rule 92 (infixOperation -> elvisExpression .)
    CONTINUE_AT     reduce using rule 92 (infixOperation -> elvisExpression .)
    BREAK           reduce using rule 92 (infixOperation -> elvisExpression .)
    BREAK_AT        reduce using rule 92 (infixOperation -> elvisExpression .)
    RCHAVE          reduce using rule 92 (infixOperation -> elvisExpression .)
    INCREMENTO      reduce using rule 92 (infixOperation -> elvisExpression .)
    DECREMENTO      reduce using rule 92 (infixOperation -> elvisExpression .)
    MINUS           reduce using rule 92 (infixOperation -> elvisExpression .)
    PLUS            reduce using rule 92 (infixOperation -> elvisExpression .)
    NOT             reduce using rule 92 (infixOperation -> elvisExpression .)
    SUSPEND         reduce using rule 92 (infixOperation -> elvisExpression .)
    LCHAVE          reduce using rule 92 (infixOperation -> elvisExpression .)
    PV              reduce using rule 92 (infixOperation -> elvisExpression .)
    ELSE            reduce using rule 92 (infixOperation -> elvisExpression .)
    MENOR           reduce using rule 92 (infixOperation -> elvisExpression .)
    PONTO           reduce using rule 92 (infixOperation -> elvisExpression .)
    AS              reduce using rule 92 (infixOperation -> elvisExpression .)
    MAISIGUAL       reduce using rule 92 (infixOperation -> elvisExpression .)
    MENOSIGUAL      reduce using rule 92 (infixOperation -> elvisExpression .)
    MULTIGUAL       reduce using rule 92 (infixOperation -> elvisExpression .)
    DIVIGUAL        reduce using rule 92 (infixOperation -> elvisExpression .)
    MODIGUAL        reduce using rule 92 (infixOperation -> elvisExpression .)
    MULT            reduce using rule 92 (infixOperation -> elvisExpression .)
    DIVIDE          reduce using rule 92 (infixOperation -> elvisExpression .)
    MOD             reduce using rule 92 (infixOperation -> elvisExpression .)
    PONTOPONTO      reduce using rule 92 (infixOperation -> elvisExpression .)
    ELVIS           reduce using rule 92 (infixOperation -> elvisExpression .)
    MAIOR           reduce using rule 92 (infixOperation -> elvisExpression .)
    MENORIGUAL      reduce using rule 92 (infixOperation -> elvisExpression .)
    MAIORIGUAL      reduce using rule 92 (infixOperation -> elvisExpression .)
    DIFERENTE       reduce using rule 92 (infixOperation -> elvisExpression .)
    IDENTIDADE      reduce using rule 92 (infixOperation -> elvisExpression .)
    IGUALDADE       reduce using rule 92 (infixOperation -> elvisExpression .)
    SEMIDENTIDADE   reduce using rule 92 (infixOperation -> elvisExpression .)
    AND             reduce using rule 92 (infixOperation -> elvisExpression .)
    OR              reduce using rule 92 (infixOperation -> elvisExpression .)
    COMMA           reduce using rule 92 (infixOperation -> elvisExpression .)
    RPAREN          reduce using rule 92 (infixOperation -> elvisExpression .)
    RCCT            reduce using rule 92 (infixOperation -> elvisExpression .)
    IN              shift and go to state 238
    NOT_IN          shift and go to state 239
    IS              shift and go to state 240
    NOT_IS          shift and go to state 241

  ! INCREMENTO      [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! DECREMENTO      [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MENOR           [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! LCCT            [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! LPAREN          [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! COLONCOLON      [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! RCHAVE          [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! PONTO           [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! AS              [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MAISIGUAL       [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MENOSIGUAL      [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MULTIGUAL       [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! DIVIGUAL        [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MODIGUAL        [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MULT            [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! DIVIDE          [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MOD             [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! PLUS            [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MINUS           [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! PONTOPONTO      [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! ID              [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! CROSSINLINE     [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! IMPORT          [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! INIT            [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! NOINLINE        [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! OUT             [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! VARARG          [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! WHERE           [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! INT             [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! FLOAT           [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! BOOLEAN         [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! STRING          [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! ARRAY           [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! CHAR            [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! OBJECT          [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! CONST           [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! CONSTRUCTOR     [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! EOF             [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! FALSE           [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! FUNCTION        [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! NULL            [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! NULLABLE        [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! NUMBER          [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! OPERATOR        [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! SMARTCAST       [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! THIS            [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! TRUE            [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! VAL             [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! VAR             [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! DOUBLE          [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! WHEN            [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! LONG            [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! ELVIS           [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! IN              [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! NOT_IN          [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! IS              [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! NOT_IS          [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MAIOR           [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MENORIGUAL      [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MAIORIGUAL      [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! DIFERENTE       [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! IDENTIDADE      [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! IGUALDADE       [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! AND             [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! OR              [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! FUN             [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! FOR             [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! WHILE           [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! DO              [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! LITERAL_STRING  [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! IF              [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! RETURN          [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! RETURN_AT       [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! CONTINUE        [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! CONTINUE_AT     [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! BREAK           [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! BREAK_AT        [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! NOT             [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! SUSPEND         [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! COMMA           [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! RPAREN          [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! LCHAVE          [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! PV              [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! ELSE            [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! RCCT            [ reduce using rule 98 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! IN              [ reduce using rule 92 (infixOperation -> elvisExpression .) ]
  ! NOT_IN          [ reduce using rule 92 (infixOperation -> elvisExpression .) ]
  ! IS              [ reduce using rule 92 (infixOperation -> elvisExpression .) ]
  ! NOT_IS          [ reduce using rule 92 (infixOperation -> elvisExpression .) ]

    io                             shift and go to state 235
    inOperator                     shift and go to state 236
    isOperator                     shift and go to state 237

state 335

    (100) infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .
    (97) elvisExpression -> infixFunctionCall .
    (98) elvisExpression -> infixFunctionCall . ELVIS elvisExpression

  ! reduce/reduce conflict for FUN resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for FOR resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for WHILE resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for DO resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for ID resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for IMPORT resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for INIT resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for OUT resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for VARARG resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for WHERE resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for INT resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for FLOAT resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for STRING resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for ARRAY resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for CHAR resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for OBJECT resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for CONST resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for EOF resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for FALSE resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for NULL resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for NUMBER resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for THIS resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for TRUE resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for VAL resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for VAR resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for WHEN resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for LONG resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for LPAREN resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for LCCT resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for IF resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for RETURN resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for BREAK resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MINUS resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for PLUS resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for NOT resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for PV resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for ELSE resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MENOR resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for PONTO resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for AS resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MULT resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MOD resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for ELVIS resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for IN resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for IS resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MAIOR resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for AND resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for OR resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for COMMA resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for RPAREN resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for RCCT resolved using rule 97 (elvisExpression -> infixFunctionCall .)
  ! shift/reduce conflict for ELVIS resolved as shift
    FUN             reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    FOR             reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    WHILE           reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    DO              reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    ID              reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    CROSSINLINE     reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    IMPORT          reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    INIT            reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    NOINLINE        reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    OUT             reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    VARARG          reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    WHERE           reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    INT             reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    FLOAT           reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    BOOLEAN         reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    STRING          reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    ARRAY           reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    CHAR            reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    OBJECT          reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    CONST           reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    CONSTRUCTOR     reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    EOF             reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    FALSE           reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    FUNCTION        reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    NULL            reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    NULLABLE        reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    NUMBER          reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    OPERATOR        reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    SMARTCAST       reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    THIS            reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    TRUE            reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    VAL             reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    VAR             reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    DOUBLE          reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    WHEN            reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    LONG            reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    LPAREN          reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    LITERAL_STRING  reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    COLONCOLON      reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    LCCT            reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    IF              reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    RETURN          reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    RETURN_AT       reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    CONTINUE        reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    CONTINUE_AT     reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    BREAK           reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    BREAK_AT        reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    RCHAVE          reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    INCREMENTO      reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    DECREMENTO      reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    MINUS           reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    PLUS            reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    NOT             reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    SUSPEND         reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    LCHAVE          reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    PV              reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    ELSE            reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    MENOR           reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    PONTO           reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    AS              reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    MAISIGUAL       reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    MENOSIGUAL      reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    MULTIGUAL       reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    DIVIGUAL        reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    MODIGUAL        reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    MULT            reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    DIVIDE          reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    MOD             reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    PONTOPONTO      reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    IN              reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    NOT_IN          reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    IS              reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    NOT_IS          reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    MAIOR           reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    MENORIGUAL      reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    MAIORIGUAL      reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    DIFERENTE       reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    IDENTIDADE      reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    IGUALDADE       reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    SEMIDENTIDADE   reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    AND             reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    OR              reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    COMMA           reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    RPAREN          reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    RCCT            reduce using rule 97 (elvisExpression -> infixFunctionCall .)
    ELVIS           shift and go to state 242

  ! INCREMENTO      [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! DECREMENTO      [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MENOR           [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! LCCT            [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! LPAREN          [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! COLONCOLON      [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! RCHAVE          [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! PONTO           [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! AS              [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MAISIGUAL       [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MENOSIGUAL      [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MULTIGUAL       [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! DIVIGUAL        [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MODIGUAL        [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MULT            [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! DIVIDE          [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MOD             [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! PLUS            [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MINUS           [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! PONTOPONTO      [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! ID              [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! CROSSINLINE     [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! IMPORT          [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! INIT            [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! NOINLINE        [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! OUT             [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! VARARG          [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! WHERE           [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! INT             [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! FLOAT           [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! BOOLEAN         [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! STRING          [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! ARRAY           [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! CHAR            [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! OBJECT          [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! CONST           [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! CONSTRUCTOR     [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! EOF             [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! FALSE           [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! FUNCTION        [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! NULL            [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! NULLABLE        [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! NUMBER          [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! OPERATOR        [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! SMARTCAST       [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! THIS            [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! TRUE            [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! VAL             [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! VAR             [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! DOUBLE          [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! WHEN            [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! LONG            [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! ELVIS           [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! IN              [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! NOT_IN          [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! IS              [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! NOT_IS          [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MAIOR           [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MENORIGUAL      [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MAIORIGUAL      [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! DIFERENTE       [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! IDENTIDADE      [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! IGUALDADE       [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! SEMIDENTIDADE   [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! AND             [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! OR              [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! FUN             [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! FOR             [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! WHILE           [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! DO              [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! LITERAL_STRING  [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! IF              [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! RETURN          [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! RETURN_AT       [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! CONTINUE        [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! CONTINUE_AT     [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! BREAK           [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! BREAK_AT        [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! NOT             [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! SUSPEND         [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! COMMA           [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! RPAREN          [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! LCHAVE          [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! PV              [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! ELSE            [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! RCCT            [ reduce using rule 100 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! ELVIS           [ reduce using rule 97 (elvisExpression -> infixFunctionCall .) ]


state 336

    (102) rangeExpression -> additiveExpression PONTOPONTO rangeExpression .
    (99) infixFunctionCall -> rangeExpression .
    (100) infixFunctionCall -> rangeExpression . simpleIdentifier infixFunctionCall
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

  ! reduce/reduce conflict for FUN resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for FOR resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for WHILE resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for DO resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for ID resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for INIT resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for OUT resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for VARARG resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for WHERE resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for INT resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for STRING resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for CHAR resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for CONST resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for EOF resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for FALSE resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for NULL resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for THIS resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for TRUE resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for VAL resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for VAR resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for WHEN resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for LONG resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for LCCT resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for IF resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for RETURN resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for BREAK resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MINUS resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for PLUS resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for NOT resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for PV resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for ELSE resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MENOR resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for PONTO resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for AS resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MULT resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MOD resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for IN resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for IS resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for AND resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for OR resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for COMMA resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for RCCT resolved using rule 99 (infixFunctionCall -> rangeExpression .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
    FUN             reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    FOR             reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    WHILE           reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    DO              reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    LPAREN          reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    LITERAL_STRING  reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    COLONCOLON      reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    LCCT            reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    IF              reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    RETURN          reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    RETURN_AT       reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    CONTINUE        reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    CONTINUE_AT     reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    BREAK           reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    BREAK_AT        reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    RCHAVE          reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    INCREMENTO      reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    DECREMENTO      reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    MINUS           reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    PLUS            reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    NOT             reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    SUSPEND         reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    LCHAVE          reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    PV              reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    ELSE            reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    MENOR           reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    PONTO           reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    AS              reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    MAISIGUAL       reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    MENOSIGUAL      reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    MULTIGUAL       reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    DIVIGUAL        reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    MODIGUAL        reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    MULT            reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    DIVIDE          reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    MOD             reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    PONTOPONTO      reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    ELVIS           reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    IN              reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    NOT_IN          reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    IS              reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    NOT_IS          reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    MAIOR           reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    MENORIGUAL      reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    MAIORIGUAL      reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    DIFERENTE       reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    IDENTIDADE      reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    IGUALDADE       reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    SEMIDENTIDADE   reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    AND             reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    OR              reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    COMMA           reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    RPAREN          reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    RCCT            reduce using rule 99 (infixFunctionCall -> rangeExpression .)
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

  ! INCREMENTO      [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! DECREMENTO      [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MENOR           [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! LCCT            [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! LPAREN          [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! COLONCOLON      [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! RCHAVE          [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! PONTO           [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! AS              [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MAISIGUAL       [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MENOSIGUAL      [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MULTIGUAL       [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! DIVIGUAL        [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MODIGUAL        [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MULT            [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! DIVIDE          [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MOD             [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! PLUS            [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MINUS           [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! PONTOPONTO      [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! ID              [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! CROSSINLINE     [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! IMPORT          [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! INIT            [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! NOINLINE        [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! OUT             [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! VARARG          [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! WHERE           [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! INT             [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! FLOAT           [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! BOOLEAN         [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! STRING          [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! ARRAY           [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! CHAR            [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! OBJECT          [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! CONST           [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! CONSTRUCTOR     [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! EOF             [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! FALSE           [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! FUNCTION        [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! NULL            [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! NULLABLE        [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! NUMBER          [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! OPERATOR        [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! SMARTCAST       [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! THIS            [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! TRUE            [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! VAL             [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! VAR             [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! DOUBLE          [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! WHEN            [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! LONG            [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! ELVIS           [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! IN              [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! NOT_IN          [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! IS              [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! NOT_IS          [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MAIOR           [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MENORIGUAL      [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MAIORIGUAL      [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! DIFERENTE       [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! IDENTIDADE      [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! IGUALDADE       [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! AND             [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! OR              [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! FUN             [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! FOR             [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! WHILE           [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! DO              [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! LITERAL_STRING  [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! IF              [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! RETURN          [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! RETURN_AT       [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! CONTINUE        [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! CONTINUE_AT     [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! BREAK           [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! BREAK_AT        [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! NOT             [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! SUSPEND         [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! COMMA           [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! RPAREN          [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! LCHAVE          [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! PV              [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! ELSE            [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! RCCT            [ reduce using rule 102 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! ID              [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! CROSSINLINE     [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! IMPORT          [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! INIT            [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! NOINLINE        [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! OUT             [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! VARARG          [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! WHERE           [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! INT             [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! FLOAT           [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! BOOLEAN         [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! STRING          [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! ARRAY           [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! CHAR            [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! OBJECT          [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! CONST           [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! CONSTRUCTOR     [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! EOF             [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! FALSE           [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! FUNCTION        [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! NULL            [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! NULLABLE        [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! NUMBER          [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! OPERATOR        [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! SMARTCAST       [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! THIS            [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! TRUE            [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! VAL             [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! VAR             [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! DOUBLE          [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! WHEN            [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]
  ! LONG            [ reduce using rule 99 (infixFunctionCall -> rangeExpression .) ]

    simpleIdentifier               shift and go to state 243

state 337

    (104) additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .
    (101) rangeExpression -> additiveExpression .
    (102) rangeExpression -> additiveExpression . PONTOPONTO rangeExpression

  ! reduce/reduce conflict for FUN resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for FOR resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for WHILE resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for DO resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for ID resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for INIT resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for OUT resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for VARARG resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for WHERE resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for INT resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for STRING resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for CHAR resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for CONST resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for EOF resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for FALSE resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for NULL resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for THIS resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for TRUE resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for VAL resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for VAR resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for WHEN resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for LONG resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for LCCT resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for IF resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for RETURN resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for BREAK resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MINUS resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for PLUS resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for NOT resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for PV resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for ELSE resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MENOR resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for PONTO resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for AS resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MULT resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MOD resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for IN resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for IS resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for AND resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for OR resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for COMMA resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for RCCT resolved using rule 101 (rangeExpression -> additiveExpression .)
  ! shift/reduce conflict for PONTOPONTO resolved as shift
    FUN             reduce using rule 101 (rangeExpression -> additiveExpression .)
    FOR             reduce using rule 101 (rangeExpression -> additiveExpression .)
    WHILE           reduce using rule 101 (rangeExpression -> additiveExpression .)
    DO              reduce using rule 101 (rangeExpression -> additiveExpression .)
    ID              reduce using rule 101 (rangeExpression -> additiveExpression .)
    CROSSINLINE     reduce using rule 101 (rangeExpression -> additiveExpression .)
    IMPORT          reduce using rule 101 (rangeExpression -> additiveExpression .)
    INIT            reduce using rule 101 (rangeExpression -> additiveExpression .)
    NOINLINE        reduce using rule 101 (rangeExpression -> additiveExpression .)
    OUT             reduce using rule 101 (rangeExpression -> additiveExpression .)
    VARARG          reduce using rule 101 (rangeExpression -> additiveExpression .)
    WHERE           reduce using rule 101 (rangeExpression -> additiveExpression .)
    INT             reduce using rule 101 (rangeExpression -> additiveExpression .)
    FLOAT           reduce using rule 101 (rangeExpression -> additiveExpression .)
    BOOLEAN         reduce using rule 101 (rangeExpression -> additiveExpression .)
    STRING          reduce using rule 101 (rangeExpression -> additiveExpression .)
    ARRAY           reduce using rule 101 (rangeExpression -> additiveExpression .)
    CHAR            reduce using rule 101 (rangeExpression -> additiveExpression .)
    OBJECT          reduce using rule 101 (rangeExpression -> additiveExpression .)
    CONST           reduce using rule 101 (rangeExpression -> additiveExpression .)
    CONSTRUCTOR     reduce using rule 101 (rangeExpression -> additiveExpression .)
    EOF             reduce using rule 101 (rangeExpression -> additiveExpression .)
    FALSE           reduce using rule 101 (rangeExpression -> additiveExpression .)
    FUNCTION        reduce using rule 101 (rangeExpression -> additiveExpression .)
    NULL            reduce using rule 101 (rangeExpression -> additiveExpression .)
    NULLABLE        reduce using rule 101 (rangeExpression -> additiveExpression .)
    NUMBER          reduce using rule 101 (rangeExpression -> additiveExpression .)
    OPERATOR        reduce using rule 101 (rangeExpression -> additiveExpression .)
    SMARTCAST       reduce using rule 101 (rangeExpression -> additiveExpression .)
    THIS            reduce using rule 101 (rangeExpression -> additiveExpression .)
    TRUE            reduce using rule 101 (rangeExpression -> additiveExpression .)
    VAL             reduce using rule 101 (rangeExpression -> additiveExpression .)
    VAR             reduce using rule 101 (rangeExpression -> additiveExpression .)
    DOUBLE          reduce using rule 101 (rangeExpression -> additiveExpression .)
    WHEN            reduce using rule 101 (rangeExpression -> additiveExpression .)
    LONG            reduce using rule 101 (rangeExpression -> additiveExpression .)
    LPAREN          reduce using rule 101 (rangeExpression -> additiveExpression .)
    LITERAL_STRING  reduce using rule 101 (rangeExpression -> additiveExpression .)
    COLONCOLON      reduce using rule 101 (rangeExpression -> additiveExpression .)
    LCCT            reduce using rule 101 (rangeExpression -> additiveExpression .)
    IF              reduce using rule 101 (rangeExpression -> additiveExpression .)
    RETURN          reduce using rule 101 (rangeExpression -> additiveExpression .)
    RETURN_AT       reduce using rule 101 (rangeExpression -> additiveExpression .)
    CONTINUE        reduce using rule 101 (rangeExpression -> additiveExpression .)
    CONTINUE_AT     reduce using rule 101 (rangeExpression -> additiveExpression .)
    BREAK           reduce using rule 101 (rangeExpression -> additiveExpression .)
    BREAK_AT        reduce using rule 101 (rangeExpression -> additiveExpression .)
    RCHAVE          reduce using rule 101 (rangeExpression -> additiveExpression .)
    INCREMENTO      reduce using rule 101 (rangeExpression -> additiveExpression .)
    DECREMENTO      reduce using rule 101 (rangeExpression -> additiveExpression .)
    MINUS           reduce using rule 101 (rangeExpression -> additiveExpression .)
    PLUS            reduce using rule 101 (rangeExpression -> additiveExpression .)
    NOT             reduce using rule 101 (rangeExpression -> additiveExpression .)
    SUSPEND         reduce using rule 101 (rangeExpression -> additiveExpression .)
    LCHAVE          reduce using rule 101 (rangeExpression -> additiveExpression .)
    PV              reduce using rule 101 (rangeExpression -> additiveExpression .)
    ELSE            reduce using rule 101 (rangeExpression -> additiveExpression .)
    MENOR           reduce using rule 101 (rangeExpression -> additiveExpression .)
    PONTO           reduce using rule 101 (rangeExpression -> additiveExpression .)
    AS              reduce using rule 101 (rangeExpression -> additiveExpression .)
    MAISIGUAL       reduce using rule 101 (rangeExpression -> additiveExpression .)
    MENOSIGUAL      reduce using rule 101 (rangeExpression -> additiveExpression .)
    MULTIGUAL       reduce using rule 101 (rangeExpression -> additiveExpression .)
    DIVIGUAL        reduce using rule 101 (rangeExpression -> additiveExpression .)
    MODIGUAL        reduce using rule 101 (rangeExpression -> additiveExpression .)
    MULT            reduce using rule 101 (rangeExpression -> additiveExpression .)
    DIVIDE          reduce using rule 101 (rangeExpression -> additiveExpression .)
    MOD             reduce using rule 101 (rangeExpression -> additiveExpression .)
    ELVIS           reduce using rule 101 (rangeExpression -> additiveExpression .)
    IN              reduce using rule 101 (rangeExpression -> additiveExpression .)
    NOT_IN          reduce using rule 101 (rangeExpression -> additiveExpression .)
    IS              reduce using rule 101 (rangeExpression -> additiveExpression .)
    NOT_IS          reduce using rule 101 (rangeExpression -> additiveExpression .)
    MAIOR           reduce using rule 101 (rangeExpression -> additiveExpression .)
    MENORIGUAL      reduce using rule 101 (rangeExpression -> additiveExpression .)
    MAIORIGUAL      reduce using rule 101 (rangeExpression -> additiveExpression .)
    DIFERENTE       reduce using rule 101 (rangeExpression -> additiveExpression .)
    IDENTIDADE      reduce using rule 101 (rangeExpression -> additiveExpression .)
    IGUALDADE       reduce using rule 101 (rangeExpression -> additiveExpression .)
    SEMIDENTIDADE   reduce using rule 101 (rangeExpression -> additiveExpression .)
    AND             reduce using rule 101 (rangeExpression -> additiveExpression .)
    OR              reduce using rule 101 (rangeExpression -> additiveExpression .)
    COMMA           reduce using rule 101 (rangeExpression -> additiveExpression .)
    RPAREN          reduce using rule 101 (rangeExpression -> additiveExpression .)
    RCCT            reduce using rule 101 (rangeExpression -> additiveExpression .)
    PONTOPONTO      shift and go to state 244

  ! INCREMENTO      [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! DECREMENTO      [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MENOR           [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! LCCT            [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! LPAREN          [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! COLONCOLON      [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! RCHAVE          [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! PONTO           [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! AS              [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MAISIGUAL       [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MENOSIGUAL      [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MULTIGUAL       [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! DIVIGUAL        [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MODIGUAL        [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MULT            [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! DIVIDE          [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MOD             [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! PLUS            [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MINUS           [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! PONTOPONTO      [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! ID              [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! CROSSINLINE     [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! IMPORT          [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! INIT            [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! NOINLINE        [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! OUT             [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! VARARG          [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! WHERE           [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! INT             [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! FLOAT           [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! BOOLEAN         [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! STRING          [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! ARRAY           [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! CHAR            [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! OBJECT          [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! CONST           [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! CONSTRUCTOR     [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! EOF             [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! FALSE           [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! FUNCTION        [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! NULL            [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! NULLABLE        [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! NUMBER          [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! OPERATOR        [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! SMARTCAST       [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! THIS            [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! TRUE            [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! VAL             [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! VAR             [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! DOUBLE          [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! WHEN            [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! LONG            [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! ELVIS           [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! IN              [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! NOT_IN          [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! IS              [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! NOT_IS          [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MAIOR           [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MENORIGUAL      [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MAIORIGUAL      [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! DIFERENTE       [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! IDENTIDADE      [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! IGUALDADE       [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! AND             [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! OR              [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! FUN             [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! FOR             [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! WHILE           [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! DO              [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! LITERAL_STRING  [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! IF              [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! RETURN          [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! RETURN_AT       [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! CONTINUE        [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! CONTINUE_AT     [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! BREAK           [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! BREAK_AT        [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! NOT             [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! SUSPEND         [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! COMMA           [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! RPAREN          [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! LCHAVE          [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! PV              [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! ELSE            [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! RCCT            [ reduce using rule 104 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! PONTOPONTO      [ reduce using rule 101 (rangeExpression -> additiveExpression .) ]


state 338

    (106) multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .
    (103) additiveExpression -> multiplicativeExpression .
    (104) additiveExpression -> multiplicativeExpression . additiveOperator additiveExpression
    (243) additiveOperator -> . PLUS
    (244) additiveOperator -> . MINUS

  ! reduce/reduce conflict for FUN resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for FOR resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for WHILE resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for DO resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for ID resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for INIT resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for OUT resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for VARARG resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for WHERE resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for INT resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for STRING resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for CHAR resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for CONST resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for EOF resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for FALSE resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for NULL resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for THIS resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for TRUE resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for VAL resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for VAR resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for WHEN resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for LONG resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for LCCT resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for IF resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for RETURN resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for BREAK resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MINUS resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for PLUS resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for NOT resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for PV resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for ELSE resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MENOR resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for PONTO resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for AS resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MULT resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MOD resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for IN resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for IS resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for AND resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for OR resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for RCCT resolved using rule 103 (additiveExpression -> multiplicativeExpression .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    FUN             reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    FOR             reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    WHILE           reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    DO              reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    ID              reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    CROSSINLINE     reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    IMPORT          reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    INIT            reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    NOINLINE        reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    OUT             reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    VARARG          reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    WHERE           reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    INT             reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    FLOAT           reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    BOOLEAN         reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    STRING          reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    ARRAY           reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    CHAR            reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    OBJECT          reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    CONST           reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    CONSTRUCTOR     reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    EOF             reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    FALSE           reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    FUNCTION        reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    NULL            reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    NULLABLE        reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    NUMBER          reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    OPERATOR        reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    SMARTCAST       reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    THIS            reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    TRUE            reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    VAL             reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    VAR             reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    DOUBLE          reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    WHEN            reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    LONG            reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    LPAREN          reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    LITERAL_STRING  reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    COLONCOLON      reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    LCCT            reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    IF              reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    RETURN          reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    RETURN_AT       reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    CONTINUE        reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    CONTINUE_AT     reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    BREAK           reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    BREAK_AT        reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    RCHAVE          reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    INCREMENTO      reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    DECREMENTO      reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    NOT             reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    SUSPEND         reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    LCHAVE          reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    PV              reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    ELSE            reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    MENOR           reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    PONTO           reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    AS              reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    MAISIGUAL       reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    MENOSIGUAL      reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    MULTIGUAL       reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    DIVIGUAL        reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    MODIGUAL        reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    MULT            reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    DIVIDE          reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    MOD             reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    PONTOPONTO      reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    ELVIS           reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    IN              reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    NOT_IN          reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    IS              reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    NOT_IS          reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    MAIOR           reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    MENORIGUAL      reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    MAIORIGUAL      reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    DIFERENTE       reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    IDENTIDADE      reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    IGUALDADE       reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    SEMIDENTIDADE   reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    AND             reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    OR              reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    COMMA           reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    RPAREN          reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    RCCT            reduce using rule 103 (additiveExpression -> multiplicativeExpression .)
    PLUS            shift and go to state 246
    MINUS           shift and go to state 247

  ! INCREMENTO      [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! DECREMENTO      [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MENOR           [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! LCCT            [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! LPAREN          [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! COLONCOLON      [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! RCHAVE          [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! PONTO           [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! AS              [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MAISIGUAL       [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MENOSIGUAL      [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MULTIGUAL       [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! DIVIGUAL        [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MODIGUAL        [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MULT            [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! DIVIDE          [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MOD             [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! PLUS            [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MINUS           [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! PONTOPONTO      [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! ID              [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! CROSSINLINE     [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! IMPORT          [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! INIT            [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! NOINLINE        [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! OUT             [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! VARARG          [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! WHERE           [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! INT             [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! FLOAT           [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! BOOLEAN         [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! STRING          [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! ARRAY           [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! CHAR            [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! OBJECT          [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! CONST           [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! CONSTRUCTOR     [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! EOF             [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! FALSE           [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! FUNCTION        [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! NULL            [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! NULLABLE        [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! NUMBER          [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! OPERATOR        [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! SMARTCAST       [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! THIS            [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! TRUE            [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! VAL             [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! VAR             [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! DOUBLE          [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! WHEN            [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! LONG            [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! ELVIS           [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! IN              [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! NOT_IN          [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! IS              [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! NOT_IS          [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MAIOR           [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MENORIGUAL      [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MAIORIGUAL      [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! DIFERENTE       [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! IDENTIDADE      [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! IGUALDADE       [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! AND             [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! OR              [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! FUN             [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! FOR             [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! WHILE           [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! DO              [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! LITERAL_STRING  [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! IF              [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! RETURN          [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! RETURN_AT       [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! CONTINUE        [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! CONTINUE_AT     [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! BREAK           [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! BREAK_AT        [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! NOT             [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! SUSPEND         [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! COMMA           [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! RPAREN          [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! LCHAVE          [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! PV              [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! ELSE            [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! RCCT            [ reduce using rule 106 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MINUS           [ reduce using rule 103 (additiveExpression -> multiplicativeExpression .) ]
  ! PLUS            [ reduce using rule 103 (additiveExpression -> multiplicativeExpression .) ]

    additiveOperator               shift and go to state 245

state 339

    (56) parenthesizedType -> LPAREN type RPAREN .

    PONTO           reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)
    COLONCOLON      reduce using rule 56 (parenthesizedType -> LPAREN type RPAREN .)


state 340

    (51) functionTypeParameters_t -> LPAREN type ftp RPAREN .

    SETA            reduce using rule 51 (functionTypeParameters_t -> LPAREN type ftp RPAREN .)


state 341

    (52) ftp -> COMMA parameter .
    (54) ftp -> COMMA parameter . ftp
    (52) ftp -> . COMMA parameter
    (53) ftp -> . COMMA type
    (54) ftp -> . COMMA parameter ftp
    (55) ftp -> . COMMA type ftp

    RPAREN          reduce using rule 52 (ftp -> COMMA parameter .)
    COMMA           shift and go to state 255

    ftp                            shift and go to state 384

state 342

    (53) ftp -> COMMA type .
    (55) ftp -> COMMA type . ftp
    (52) ftp -> . COMMA parameter
    (53) ftp -> . COMMA type
    (54) ftp -> . COMMA parameter ftp
    (55) ftp -> . COMMA type ftp

    RPAREN          reduce using rule 53 (ftp -> COMMA type .)
    COMMA           shift and go to state 255

    ftp                            shift and go to state 385

state 343

    (48) functionTypeParameters_p -> LPAREN parameter ftp RPAREN .

    SETA            reduce using rule 48 (functionTypeParameters_p -> LPAREN parameter ftp RPAREN .)


state 344

    (44) functionType -> receiverType PONTO functionTypeParameters SETA . type
    (26) type -> . typeModifiers optype
    (27) type -> . optype
    (31) typeModifiers -> . typeModifier
    (32) typeModifiers -> . typeModifier typeModifiers
    (28) optype -> . parenthesizedType
    (29) optype -> . functionType
    (30) optype -> . userType
    (33) typeModifier -> . SUSPEND
    (56) parenthesizedType -> . LPAREN type RPAREN
    (44) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (45) functionType -> . functionTypeParameters SETA type
    (37) userType -> . simpleUserType
    (57) receiverType -> . typeModifier rt
    (46) functionTypeParameters -> . functionTypeParameters_p
    (47) functionTypeParameters -> . functionTypeParameters_t
    (38) simpleUserType -> . simpleIdentifier typeArguments
    (39) simpleUserType -> . simpleIdentifier
    (48) functionTypeParameters_p -> . LPAREN parameter ftp RPAREN
    (49) functionTypeParameters_p -> . LPAREN parameter RPAREN
    (50) functionTypeParameters_t -> . LPAREN type RPAREN
    (51) functionTypeParameters_t -> . LPAREN type ftp RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    SUSPEND         shift and go to state 57
    LPAREN          shift and go to state 58
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    receiverType                   shift and go to state 59
    functionTypeParameters         shift and go to state 60
    type                           shift and go to state 386
    typeModifiers                  shift and go to state 51
    optype                         shift and go to state 52
    typeModifier                   shift and go to state 53
    parenthesizedType              shift and go to state 54
    functionType                   shift and go to state 55
    userType                       shift and go to state 56
    simpleUserType                 shift and go to state 61
    functionTypeParameters_p       shift and go to state 62
    functionTypeParameters_t       shift and go to state 63
    simpleIdentifier               shift and go to state 64

state 345

    (50) functionTypeParameters_t -> LPAREN type . RPAREN
    (51) functionTypeParameters_t -> LPAREN type . ftp RPAREN
    (52) ftp -> . COMMA parameter
    (53) ftp -> . COMMA type
    (54) ftp -> . COMMA parameter ftp
    (55) ftp -> . COMMA type ftp

    RPAREN          shift and go to state 387
    COMMA           shift and go to state 255

    ftp                            shift and go to state 254

state 346

    (148) typeArguments -> MENOR ta MAIOR .

    LCHAVE          reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    FUN             reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    $end            reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    FOR             reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    WHILE           reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    DO              reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    ID              reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    CROSSINLINE     reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    IMPORT          reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    INIT            reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    NOINLINE        reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    OUT             reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    VARARG          reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    WHERE           reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    INT             reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    FLOAT           reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    BOOLEAN         reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    STRING          reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    ARRAY           reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    CHAR            reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    OBJECT          reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    CONST           reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    CONSTRUCTOR     reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    EOF             reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    FALSE           reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    FUNCTION        reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    NULL            reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    NULLABLE        reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    NUMBER          reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    OPERATOR        reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    SMARTCAST       reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    THIS            reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    TRUE            reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    VAL             reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    VAR             reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    DOUBLE          reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    WHEN            reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    LONG            reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    LPAREN          reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    LITERAL_STRING  reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    COLONCOLON      reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    LCCT            reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    IF              reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    RETURN          reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    RETURN_AT       reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    CONTINUE        reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    CONTINUE_AT     reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    BREAK           reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    BREAK_AT        reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    RCHAVE          reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    INCREMENTO      reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    DECREMENTO      reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    MINUS           reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    PLUS            reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    NOT             reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    SUSPEND         reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    PV              reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    ELSE            reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    MENOR           reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    PONTO           reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    AS              reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    MAISIGUAL       reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    MENOSIGUAL      reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    MULTIGUAL       reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    DIVIGUAL        reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    MODIGUAL        reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    MULT            reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    DIVIDE          reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    MOD             reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    PONTOPONTO      reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    ELVIS           reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    IN              reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    NOT_IN          reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    IS              reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    NOT_IS          reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    MAIOR           reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    MENORIGUAL      reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    MAIORIGUAL      reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    DIFERENTE       reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    IDENTIDADE      reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    IGUALDADE       reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    SEMIDENTIDADE   reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    AND             reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    OR              reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    COMMA           reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    RPAREN          reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    RCCT            reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    ATRIBUICAO      reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)
    SETA            reduce using rule 148 (typeArguments -> MENOR ta MAIOR .)


state 347

    (151) ta -> typeProjection COMMA . ta
    (150) ta -> . typeProjection
    (151) ta -> . typeProjection COMMA ta
    (40) typeProjection -> . typeProjectionModifiers type
    (41) typeProjection -> . type
    (42) typeProjectionModifiers -> . typeProjection
    (43) typeProjectionModifiers -> . typeProjectionModifier typeProjectionModifiers
    (26) type -> . typeModifiers optype
    (27) type -> . optype
    (34) typeProjectionModifier -> . varianceModifier
    (31) typeModifiers -> . typeModifier
    (32) typeModifiers -> . typeModifier typeModifiers
    (28) optype -> . parenthesizedType
    (29) optype -> . functionType
    (30) optype -> . userType
    (35) varianceModifier -> . IN
    (36) varianceModifier -> . OUT
    (33) typeModifier -> . SUSPEND
    (56) parenthesizedType -> . LPAREN type RPAREN
    (44) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (45) functionType -> . functionTypeParameters SETA type
    (37) userType -> . simpleUserType
    (57) receiverType -> . typeModifier rt
    (46) functionTypeParameters -> . functionTypeParameters_p
    (47) functionTypeParameters -> . functionTypeParameters_t
    (38) simpleUserType -> . simpleIdentifier typeArguments
    (39) simpleUserType -> . simpleIdentifier
    (48) functionTypeParameters_p -> . LPAREN parameter ftp RPAREN
    (49) functionTypeParameters_p -> . LPAREN parameter RPAREN
    (50) functionTypeParameters_t -> . LPAREN type RPAREN
    (51) functionTypeParameters_t -> . LPAREN type ftp RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    IN              shift and go to state 268
    OUT             shift and go to state 269
    SUSPEND         shift and go to state 57
    LPAREN          shift and go to state 58
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    typeProjection                 shift and go to state 263
    ta                             shift and go to state 388
    typeProjectionModifiers        shift and go to state 264
    type                           shift and go to state 265
    typeProjectionModifier         shift and go to state 266
    typeModifiers                  shift and go to state 51
    optype                         shift and go to state 52
    varianceModifier               shift and go to state 267
    typeModifier                   shift and go to state 53
    parenthesizedType              shift and go to state 54
    functionType                   shift and go to state 55
    userType                       shift and go to state 56
    receiverType                   shift and go to state 59
    functionTypeParameters         shift and go to state 60
    simpleUserType                 shift and go to state 61
    functionTypeParameters_p       shift and go to state 62
    functionTypeParameters_t       shift and go to state 63
    simpleIdentifier               shift and go to state 64

state 348

    (40) typeProjection -> typeProjectionModifiers type .

    COMMA           reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    MAIOR           reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    SUSPEND         reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    LPAREN          reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    ID              reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    CROSSINLINE     reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    IMPORT          reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    INIT            reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    NOINLINE        reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    OUT             reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    VARARG          reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    WHERE           reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    INT             reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    FLOAT           reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    BOOLEAN         reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    STRING          reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    ARRAY           reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    CHAR            reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    OBJECT          reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    CONST           reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    CONSTRUCTOR     reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    EOF             reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    FALSE           reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    FUNCTION        reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    NULL            reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    NULLABLE        reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    NUMBER          reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    OPERATOR        reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    SMARTCAST       reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    THIS            reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    TRUE            reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    VAL             reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    VAR             reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    DOUBLE          reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    WHEN            reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)
    LONG            reduce using rule 40 (typeProjection -> typeProjectionModifiers type .)


state 349

    (43) typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .
    (40) typeProjection -> typeProjectionModifiers . type
    (26) type -> . typeModifiers optype
    (27) type -> . optype
    (31) typeModifiers -> . typeModifier
    (32) typeModifiers -> . typeModifier typeModifiers
    (28) optype -> . parenthesizedType
    (29) optype -> . functionType
    (30) optype -> . userType
    (33) typeModifier -> . SUSPEND
    (56) parenthesizedType -> . LPAREN type RPAREN
    (44) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (45) functionType -> . functionTypeParameters SETA type
    (37) userType -> . simpleUserType
    (57) receiverType -> . typeModifier rt
    (46) functionTypeParameters -> . functionTypeParameters_p
    (47) functionTypeParameters -> . functionTypeParameters_t
    (38) simpleUserType -> . simpleIdentifier typeArguments
    (39) simpleUserType -> . simpleIdentifier
    (48) functionTypeParameters_p -> . LPAREN parameter ftp RPAREN
    (49) functionTypeParameters_p -> . LPAREN parameter RPAREN
    (50) functionTypeParameters_t -> . LPAREN type RPAREN
    (51) functionTypeParameters_t -> . LPAREN type ftp RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

  ! shift/reduce conflict for SUSPEND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
    SUSPEND         shift and go to state 57
    LPAREN          shift and go to state 58
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

  ! SUSPEND         [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! LPAREN          [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! ID              [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! CROSSINLINE     [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! IMPORT          [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! INIT            [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! NOINLINE        [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! OUT             [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! VARARG          [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! WHERE           [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! INT             [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! FLOAT           [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! BOOLEAN         [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! STRING          [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! ARRAY           [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! CHAR            [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! OBJECT          [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! CONST           [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! CONSTRUCTOR     [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! EOF             [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! FALSE           [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! FUNCTION        [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! NULL            [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! NULLABLE        [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! NUMBER          [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! OPERATOR        [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! SMARTCAST       [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! THIS            [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! TRUE            [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! VAL             [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! VAR             [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! DOUBLE          [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! WHEN            [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! LONG            [ reduce using rule 43 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]

    type                           shift and go to state 348
    typeModifiers                  shift and go to state 51
    optype                         shift and go to state 52
    typeModifier                   shift and go to state 53
    parenthesizedType              shift and go to state 54
    functionType                   shift and go to state 55
    userType                       shift and go to state 56
    receiverType                   shift and go to state 59
    functionTypeParameters         shift and go to state 60
    simpleUserType                 shift and go to state 61
    functionTypeParameters_p       shift and go to state 62
    functionTypeParameters_t       shift and go to state 63
    simpleIdentifier               shift and go to state 64

state 350

    (42) typeProjectionModifiers -> typeProjection .

    SUSPEND         reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    LPAREN          reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    ID              reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    CROSSINLINE     reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    IMPORT          reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    INIT            reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    NOINLINE        reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    OUT             reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    VARARG          reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    WHERE           reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    INT             reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    FLOAT           reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    BOOLEAN         reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    STRING          reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    ARRAY           reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    CHAR            reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    OBJECT          reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    CONST           reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    CONSTRUCTOR     reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    EOF             reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    FALSE           reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    FUNCTION        reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    NULL            reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    NULLABLE        reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    NUMBER          reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    OPERATOR        reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    SMARTCAST       reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    THIS            reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    TRUE            reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    VAL             reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    VAR             reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    DOUBLE          reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    WHEN            reduce using rule 42 (typeProjectionModifiers -> typeProjection .)
    LONG            reduce using rule 42 (typeProjectionModifiers -> typeProjection .)


state 351

    (185) ll -> lambdaParameters SETA statements .

    LCHAVE          reduce using rule 185 (ll -> lambdaParameters SETA statements .)


state 352

    (188) lambdaParameters -> lambdaParameter COMMA lambdaParameters .

    SETA            reduce using rule 188 (lambdaParameters -> lambdaParameter COMMA lambdaParameters .)


state 353

    (190) lambdaParameter -> multiVariableDeclaration DOISP type .

    COMMA           reduce using rule 190 (lambdaParameter -> multiVariableDeclaration DOISP type .)
    SETA            reduce using rule 190 (lambdaParameter -> multiVariableDeclaration DOISP type .)


state 354

    (19) variableDeclaration -> simpleIdentifier DOISP type .

    COMMA           reduce using rule 19 (variableDeclaration -> simpleIdentifier DOISP type .)
    SETA            reduce using rule 19 (variableDeclaration -> simpleIdentifier DOISP type .)
    RPAREN          reduce using rule 19 (variableDeclaration -> simpleIdentifier DOISP type .)
    IN              reduce using rule 19 (variableDeclaration -> simpleIdentifier DOISP type .)


state 355

    (21) multiVariableDeclaration -> LPAREN mvd RPAREN .

    DOISP           reduce using rule 21 (multiVariableDeclaration -> LPAREN mvd RPAREN .)
    COMMA           reduce using rule 21 (multiVariableDeclaration -> LPAREN mvd RPAREN .)
    SETA            reduce using rule 21 (multiVariableDeclaration -> LPAREN mvd RPAREN .)
    IN              reduce using rule 21 (multiVariableDeclaration -> LPAREN mvd RPAREN .)


state 356

    (24) mvd -> variableDeclaration COMMA . mvd
    (23) mvd -> . variableDeclaration
    (24) mvd -> . variableDeclaration COMMA mvd
    (19) variableDeclaration -> . simpleIdentifier DOISP type
    (20) variableDeclaration -> . simpleIdentifier
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    variableDeclaration            shift and go to state 278
    mvd                            shift and go to state 389
    simpleIdentifier               shift and go to state 307

state 357

    (192) anonymousFunction -> FUN type PONTO parametersWithOptionalType . DOISP type typeConstraint functionBody
    (194) anonymousFunction -> FUN type PONTO parametersWithOptionalType . typeConstraint functionBody
    (195) anonymousFunction -> FUN type PONTO parametersWithOptionalType . DOISP type functionBody
    (196) anonymousFunction -> FUN type PONTO parametersWithOptionalType . DOISP type typeConstraint
    (200) anonymousFunction -> FUN type PONTO parametersWithOptionalType . functionBody
    (201) anonymousFunction -> FUN type PONTO parametersWithOptionalType . typeConstraint
    (202) anonymousFunction -> FUN type PONTO parametersWithOptionalType . DOISP type
    (205) anonymousFunction -> FUN type PONTO parametersWithOptionalType .
    (209) typeConstraint -> . simpleIdentifier DOISP type
    (10) functionBody -> . block
    (11) functionBody -> . ATRIBUICAO expression
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (67) block -> . LCHAVE statements RCHAVE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for LCHAVE resolved as shift
    DOISP           shift and go to state 390
    INCREMENTO      reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    DECREMENTO      reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    MENOR           reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    LCCT            reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    LPAREN          reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    COLONCOLON      reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    RCHAVE          reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    PONTO           reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    AS              reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    MAISIGUAL       reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    MENOSIGUAL      reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    MULTIGUAL       reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    DIVIGUAL        reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    MODIGUAL        reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    MULT            reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    DIVIDE          reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    MOD             reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    PLUS            reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    MINUS           reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    PONTOPONTO      reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    ELVIS           reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    IN              reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    NOT_IN          reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    IS              reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    NOT_IS          reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    MAIOR           reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    MENORIGUAL      reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    MAIORIGUAL      reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    DIFERENTE       reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    IDENTIDADE      reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    IGUALDADE       reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    SEMIDENTIDADE   reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    AND             reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    OR              reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    FUN             reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    FOR             reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    WHILE           reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    DO              reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    LITERAL_STRING  reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    IF              reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    RETURN          reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    RETURN_AT       reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    CONTINUE        reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    CONTINUE_AT     reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    BREAK           reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    BREAK_AT        reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    NOT             reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    SUSPEND         reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    COMMA           reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    RPAREN          reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    PV              reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    ELSE            reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    RCCT            reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .)
    ATRIBUICAO      shift and go to state 286
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    LCHAVE          shift and go to state 49

  ! ID              [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! CROSSINLINE     [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! IMPORT          [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! INIT            [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! NOINLINE        [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! OUT             [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! VARARG          [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! WHERE           [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! INT             [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! FLOAT           [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! BOOLEAN         [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! STRING          [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! ARRAY           [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! CHAR            [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! OBJECT          [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! CONST           [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! CONSTRUCTOR     [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! EOF             [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! FALSE           [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! FUNCTION        [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! NULL            [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! NULLABLE        [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! NUMBER          [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! OPERATOR        [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! SMARTCAST       [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! THIS            [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! TRUE            [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! VAL             [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! VAR             [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! DOUBLE          [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! WHEN            [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! LONG            [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]
  ! LCHAVE          [ reduce using rule 205 (anonymousFunction -> FUN type PONTO parametersWithOptionalType .) ]

    typeConstraint                 shift and go to state 391
    functionBody                   shift and go to state 392
    simpleIdentifier               shift and go to state 284
    block                          shift and go to state 285

state 358

    (172) parametersWithOptionalType -> LPAREN . pwot RPAREN
    (173) parametersWithOptionalType -> LPAREN . RPAREN
    (174) pwot -> . parameterWithOptionalType
    (175) pwot -> . parameterWithOptionalType COMMA pwot COMMA
    (176) parameterWithOptionalType -> . parameterModifiers simpleIdentifier DOISP type
    (177) parameterWithOptionalType -> . simpleIdentifier DOISP type
    (178) parameterWithOptionalType -> . parameterModifiers simpleIdentifier
    (179) parameterWithOptionalType -> . simpleIdentifier
    (180) parameterModifiers -> . VARARG
    (181) parameterModifiers -> . NOINLINE
    (182) parameterModifiers -> . CROSSINLINE
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    RPAREN          shift and go to state 288
    VARARG          shift and go to state 394
    NOINLINE        shift and go to state 395
    CROSSINLINE     shift and go to state 396
    ID              shift and go to state 6
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    OUT             shift and go to state 11
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    pwot                           shift and go to state 287
    parameterWithOptionalType      shift and go to state 289
    parameterModifiers             shift and go to state 291
    simpleIdentifier               shift and go to state 393

state 359

    (193) anonymousFunction -> FUN parametersWithOptionalType DOISP type . typeConstraint functionBody
    (198) anonymousFunction -> FUN parametersWithOptionalType DOISP type . functionBody
    (199) anonymousFunction -> FUN parametersWithOptionalType DOISP type . typeConstraint
    (209) typeConstraint -> . simpleIdentifier DOISP type
    (10) functionBody -> . block
    (11) functionBody -> . ATRIBUICAO expression
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (67) block -> . LCHAVE statements RCHAVE

    ATRIBUICAO      shift and go to state 286
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    LCHAVE          shift and go to state 49

    typeConstraint                 shift and go to state 397
    functionBody                   shift and go to state 398
    simpleIdentifier               shift and go to state 284
    block                          shift and go to state 285

state 360

    (197) anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .

    INCREMENTO      reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    DECREMENTO      reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    MENOR           reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    LCCT            reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    LPAREN          reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    COLONCOLON      reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    RCHAVE          reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    PONTO           reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    AS              reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    MAISIGUAL       reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    MENOSIGUAL      reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    MULTIGUAL       reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    DIVIGUAL        reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    MODIGUAL        reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    MULT            reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    DIVIDE          reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    MOD             reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    PLUS            reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    MINUS           reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    PONTOPONTO      reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    ID              reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    CROSSINLINE     reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    IMPORT          reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    INIT            reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    NOINLINE        reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    OUT             reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    VARARG          reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    WHERE           reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    INT             reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    FLOAT           reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    BOOLEAN         reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    STRING          reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    ARRAY           reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    CHAR            reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    OBJECT          reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    CONST           reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    CONSTRUCTOR     reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    EOF             reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    FALSE           reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    FUNCTION        reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    NULL            reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    NULLABLE        reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    NUMBER          reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    OPERATOR        reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    SMARTCAST       reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    THIS            reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    TRUE            reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    VAL             reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    VAR             reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    DOUBLE          reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    WHEN            reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    LONG            reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    ELVIS           reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    IN              reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    NOT_IN          reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    IS              reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    NOT_IS          reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    MAIOR           reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    MENORIGUAL      reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    MAIORIGUAL      reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    DIFERENTE       reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    IDENTIDADE      reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    IGUALDADE       reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    SEMIDENTIDADE   reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    AND             reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    OR              reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    FUN             reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    FOR             reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    WHILE           reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    DO              reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    LITERAL_STRING  reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    IF              reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    RETURN          reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    RETURN_AT       reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    CONTINUE        reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    CONTINUE_AT     reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    BREAK           reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    BREAK_AT        reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    NOT             reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    SUSPEND         reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    COMMA           reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    RPAREN          reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    LCHAVE          reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    PV              reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    ELSE            reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)
    RCCT            reduce using rule 197 (anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody .)


state 361

    (209) typeConstraint -> simpleIdentifier DOISP . type
    (26) type -> . typeModifiers optype
    (27) type -> . optype
    (31) typeModifiers -> . typeModifier
    (32) typeModifiers -> . typeModifier typeModifiers
    (28) optype -> . parenthesizedType
    (29) optype -> . functionType
    (30) optype -> . userType
    (33) typeModifier -> . SUSPEND
    (56) parenthesizedType -> . LPAREN type RPAREN
    (44) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (45) functionType -> . functionTypeParameters SETA type
    (37) userType -> . simpleUserType
    (57) receiverType -> . typeModifier rt
    (46) functionTypeParameters -> . functionTypeParameters_p
    (47) functionTypeParameters -> . functionTypeParameters_t
    (38) simpleUserType -> . simpleIdentifier typeArguments
    (39) simpleUserType -> . simpleIdentifier
    (48) functionTypeParameters_p -> . LPAREN parameter ftp RPAREN
    (49) functionTypeParameters_p -> . LPAREN parameter RPAREN
    (50) functionTypeParameters_t -> . LPAREN type RPAREN
    (51) functionTypeParameters_t -> . LPAREN type ftp RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    SUSPEND         shift and go to state 57
    LPAREN          shift and go to state 58
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    simpleIdentifier               shift and go to state 64
    type                           shift and go to state 399
    typeModifiers                  shift and go to state 51
    optype                         shift and go to state 52
    typeModifier                   shift and go to state 53
    parenthesizedType              shift and go to state 54
    functionType                   shift and go to state 55
    userType                       shift and go to state 56
    receiverType                   shift and go to state 59
    functionTypeParameters         shift and go to state 60
    simpleUserType                 shift and go to state 61
    functionTypeParameters_p       shift and go to state 62
    functionTypeParameters_t       shift and go to state 63

state 362

    (11) functionBody -> ATRIBUICAO expression .
    (217) jumpExpression -> expression .

  ! reduce/reduce conflict for FUN resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for FOR resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for DO resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for ID resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for INIT resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for OUT resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for VARARG resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for WHERE resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for INT resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for STRING resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for CHAR resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for CONST resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for EOF resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for FALSE resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for NULL resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for THIS resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for TRUE resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for VAL resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for VAR resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for WHEN resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for LONG resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for LCCT resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for IF resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for RETURN resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for BREAK resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for NOT resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for PV resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MENOR resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for PONTO resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for AS resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MULT resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MOD resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for IN resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for IS resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for AND resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for OR resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for RCCT resolved using rule 11 (functionBody -> ATRIBUICAO expression .)
    FUN             reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    FOR             reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    WHILE           reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    DO              reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    ID              reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    CROSSINLINE     reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    IMPORT          reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    INIT            reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    NOINLINE        reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    OUT             reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    VARARG          reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    WHERE           reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    INT             reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    FLOAT           reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    BOOLEAN         reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    STRING          reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    ARRAY           reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    CHAR            reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    OBJECT          reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    CONST           reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    CONSTRUCTOR     reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    EOF             reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    FALSE           reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    FUNCTION        reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    NULL            reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    NULLABLE        reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    NUMBER          reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    OPERATOR        reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    SMARTCAST       reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    THIS            reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    TRUE            reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    VAL             reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    VAR             reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    DOUBLE          reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    WHEN            reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    LONG            reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    LPAREN          reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    LITERAL_STRING  reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    COLONCOLON      reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    LCCT            reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    IF              reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    RETURN          reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    RETURN_AT       reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    CONTINUE        reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    CONTINUE_AT     reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    BREAK           reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    BREAK_AT        reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    RCHAVE          reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    INCREMENTO      reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    DECREMENTO      reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    MINUS           reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    PLUS            reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    NOT             reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    SUSPEND         reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    LCHAVE          reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    PV              reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    ELSE            reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    MENOR           reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    PONTO           reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    AS              reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    MAISIGUAL       reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    MENOSIGUAL      reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    MULTIGUAL       reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    DIVIGUAL        reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    MODIGUAL        reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    MULT            reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    DIVIDE          reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    MOD             reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    PONTOPONTO      reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    ELVIS           reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    IN              reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    NOT_IN          reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    IS              reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    NOT_IS          reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    MAIOR           reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    MENORIGUAL      reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    MAIORIGUAL      reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    DIFERENTE       reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    IDENTIDADE      reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    IGUALDADE       reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    SEMIDENTIDADE   reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    AND             reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    OR              reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    COMMA           reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    RPAREN          reduce using rule 11 (functionBody -> ATRIBUICAO expression .)
    RCCT            reduce using rule 11 (functionBody -> ATRIBUICAO expression .)

  ! FUN             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! FOR             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! WHILE           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DO              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! ID              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CROSSINLINE     [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IMPORT          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! INIT            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NOINLINE        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! OUT             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! VARARG          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! WHERE           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! INT             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! FLOAT           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! BOOLEAN         [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! STRING          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! ARRAY           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CHAR            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! OBJECT          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CONST           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CONSTRUCTOR     [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! EOF             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! FALSE           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! FUNCTION        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NULL            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NULLABLE        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NUMBER          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! OPERATOR        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! SMARTCAST       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! THIS            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! TRUE            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! VAL             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! VAR             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DOUBLE          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! WHEN            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! LONG            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! LPAREN          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! LITERAL_STRING  [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! COLONCOLON      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! LCCT            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IF              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RETURN          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RETURN_AT       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CONTINUE        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! CONTINUE_AT     [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! BREAK           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! BREAK_AT        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RCHAVE          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! INCREMENTO      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DECREMENTO      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MINUS           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! PLUS            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NOT             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! SUSPEND         [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! LCHAVE          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! PV              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! ELSE            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MENOR           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! PONTO           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! AS              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MAISIGUAL       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MENOSIGUAL      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MULTIGUAL       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DIVIGUAL        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MODIGUAL        [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MULT            [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DIVIDE          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MOD             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! PONTOPONTO      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! ELVIS           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IN              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NOT_IN          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IS              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! NOT_IS          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MAIOR           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MENORIGUAL      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! MAIORIGUAL      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! DIFERENTE       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IDENTIDADE      [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! IGUALDADE       [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! AND             [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! OR              [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! COMMA           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RCCT            [ reduce using rule 217 (jumpExpression -> expression .) ]


state 363

    (172) parametersWithOptionalType -> LPAREN pwot RPAREN .

    DOISP           reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    ATRIBUICAO      reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    ID              reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    CROSSINLINE     reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    IMPORT          reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    INIT            reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    NOINLINE        reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    OUT             reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    VARARG          reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    WHERE           reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    INT             reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    FLOAT           reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    BOOLEAN         reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    STRING          reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    ARRAY           reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    CHAR            reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    OBJECT          reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    CONST           reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    CONSTRUCTOR     reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    EOF             reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    FALSE           reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    FUNCTION        reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    NULL            reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    NULLABLE        reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    NUMBER          reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    OPERATOR        reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    SMARTCAST       reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    THIS            reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    TRUE            reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    VAL             reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    VAR             reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    DOUBLE          reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    WHEN            reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    LONG            reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    LCHAVE          reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    INCREMENTO      reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    DECREMENTO      reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    MENOR           reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    LCCT            reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    LPAREN          reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    COLONCOLON      reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    RCHAVE          reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    PONTO           reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    AS              reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    MAISIGUAL       reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    MENOSIGUAL      reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    MULTIGUAL       reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    DIVIGUAL        reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    MODIGUAL        reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    MULT            reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    DIVIDE          reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    MOD             reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    PLUS            reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    MINUS           reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    PONTOPONTO      reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    ELVIS           reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    IN              reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    NOT_IN          reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    IS              reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    NOT_IS          reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    MAIOR           reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    MENORIGUAL      reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    MAIORIGUAL      reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    DIFERENTE       reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    IDENTIDADE      reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    IGUALDADE       reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    SEMIDENTIDADE   reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    AND             reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    OR              reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    FUN             reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    FOR             reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    WHILE           reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    DO              reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    LITERAL_STRING  reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    IF              reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    RETURN          reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    RETURN_AT       reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    CONTINUE        reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    CONTINUE_AT     reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    BREAK           reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    BREAK_AT        reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    NOT             reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    SUSPEND         reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    PV              reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    ELSE            reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    COMMA           reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    RPAREN          reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    RCCT            reduce using rule 172 (parametersWithOptionalType -> LPAREN pwot RPAREN .)


state 364

    (175) pwot -> parameterWithOptionalType COMMA . pwot COMMA
    (174) pwot -> . parameterWithOptionalType
    (175) pwot -> . parameterWithOptionalType COMMA pwot COMMA
    (176) parameterWithOptionalType -> . parameterModifiers simpleIdentifier DOISP type
    (177) parameterWithOptionalType -> . simpleIdentifier DOISP type
    (178) parameterWithOptionalType -> . parameterModifiers simpleIdentifier
    (179) parameterWithOptionalType -> . simpleIdentifier
    (180) parameterModifiers -> . VARARG
    (181) parameterModifiers -> . NOINLINE
    (182) parameterModifiers -> . CROSSINLINE
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    VARARG          shift and go to state 394
    NOINLINE        shift and go to state 395
    CROSSINLINE     shift and go to state 396
    ID              shift and go to state 6
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    OUT             shift and go to state 11
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    parameterWithOptionalType      shift and go to state 289
    pwot                           shift and go to state 400
    parameterModifiers             shift and go to state 291
    simpleIdentifier               shift and go to state 393

state 365

    (25) parameter -> simpleIdentifier DOISP . type
    (177) parameterWithOptionalType -> simpleIdentifier DOISP . type
    (26) type -> . typeModifiers optype
    (27) type -> . optype
    (31) typeModifiers -> . typeModifier
    (32) typeModifiers -> . typeModifier typeModifiers
    (28) optype -> . parenthesizedType
    (29) optype -> . functionType
    (30) optype -> . userType
    (33) typeModifier -> . SUSPEND
    (56) parenthesizedType -> . LPAREN type RPAREN
    (44) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (45) functionType -> . functionTypeParameters SETA type
    (37) userType -> . simpleUserType
    (57) receiverType -> . typeModifier rt
    (46) functionTypeParameters -> . functionTypeParameters_p
    (47) functionTypeParameters -> . functionTypeParameters_t
    (38) simpleUserType -> . simpleIdentifier typeArguments
    (39) simpleUserType -> . simpleIdentifier
    (48) functionTypeParameters_p -> . LPAREN parameter ftp RPAREN
    (49) functionTypeParameters_p -> . LPAREN parameter RPAREN
    (50) functionTypeParameters_t -> . LPAREN type RPAREN
    (51) functionTypeParameters_t -> . LPAREN type ftp RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    SUSPEND         shift and go to state 57
    LPAREN          shift and go to state 58
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    simpleIdentifier               shift and go to state 64
    type                           shift and go to state 401
    typeModifiers                  shift and go to state 51
    optype                         shift and go to state 52
    typeModifier                   shift and go to state 53
    parenthesizedType              shift and go to state 54
    functionType                   shift and go to state 55
    userType                       shift and go to state 56
    receiverType                   shift and go to state 59
    functionTypeParameters         shift and go to state 60
    simpleUserType                 shift and go to state 61
    functionTypeParameters_p       shift and go to state 62
    functionTypeParameters_t       shift and go to state 63

state 366

    (176) parameterWithOptionalType -> parameterModifiers simpleIdentifier . DOISP type
    (178) parameterWithOptionalType -> parameterModifiers simpleIdentifier .

    DOISP           shift and go to state 402
    COMMA           reduce using rule 178 (parameterWithOptionalType -> parameterModifiers simpleIdentifier .)
    RPAREN          reduce using rule 178 (parameterWithOptionalType -> parameterModifiers simpleIdentifier .)


state 367

    (135) indexingSuffix -> LCCT isuf RCCT .

    IGUALDADE       reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    RPAREN          reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    INCREMENTO      reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    DECREMENTO      reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    MENOR           reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    LCCT            reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    LPAREN          reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    COLONCOLON      reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    RCHAVE          reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    PONTO           reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    AS              reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    MAISIGUAL       reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    MENOSIGUAL      reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    MULTIGUAL       reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    DIVIGUAL        reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    MODIGUAL        reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    MULT            reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    DIVIDE          reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    MOD             reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    PLUS            reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    MINUS           reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    PONTOPONTO      reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    ID              reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    CROSSINLINE     reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    IMPORT          reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    INIT            reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    NOINLINE        reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    OUT             reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    VARARG          reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    WHERE           reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    INT             reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    FLOAT           reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    BOOLEAN         reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    STRING          reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    ARRAY           reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    CHAR            reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    OBJECT          reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    CONST           reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    CONSTRUCTOR     reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    EOF             reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    FALSE           reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    FUNCTION        reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    NULL            reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    NULLABLE        reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    NUMBER          reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    OPERATOR        reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    SMARTCAST       reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    THIS            reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    TRUE            reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    VAL             reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    VAR             reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    DOUBLE          reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    WHEN            reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    LONG            reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    ELVIS           reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    IN              reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    NOT_IN          reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    IS              reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    NOT_IS          reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    MAIOR           reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    MENORIGUAL      reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    MAIORIGUAL      reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    DIFERENTE       reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    IDENTIDADE      reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    SEMIDENTIDADE   reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    AND             reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    OR              reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    FUN             reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    FOR             reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    WHILE           reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    DO              reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    LITERAL_STRING  reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    IF              reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    RETURN          reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    RETURN_AT       reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    CONTINUE        reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    CONTINUE_AT     reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    BREAK           reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    BREAK_AT        reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    NOT             reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    SUSPEND         reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    COMMA           reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    LCHAVE          reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    PV              reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    ELSE            reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)
    RCCT            reduce using rule 135 (indexingSuffix -> LCCT isuf RCCT .)


state 368

    (138) isuf -> expression COMMA . isuf
    (137) isuf -> . expression
    (138) isuf -> . expression COMMA isuf
    (82) expression -> . disjunction
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (33) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 99
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    LPAREN          shift and go to state 152
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57

    expression                     shift and go to state 299
    isuf                           shift and go to state 403
    disjunction                    shift and go to state 85
    conjunction                    shift and go to state 94
    equality                       shift and go to state 97
    comparison                     shift and go to state 106
    infixOperation                 shift and go to state 121
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    simpleIdentifier               shift and go to state 149
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133
    prefixUnaryExpression          shift and go to state 150
    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 151
    unaryPrefix                    shift and go to state 105
    primaryExpression              shift and go to state 95
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122

state 369

    (139) navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .

    IGUALDADE       reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    RPAREN          reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    INCREMENTO      reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DECREMENTO      reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MENOR           reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    LCCT            reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    LPAREN          reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    COLONCOLON      reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    RCHAVE          reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    PONTO           reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    AS              reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MAISIGUAL       reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MENOSIGUAL      reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MULTIGUAL       reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DIVIGUAL        reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MODIGUAL        reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MULT            reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DIVIDE          reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MOD             reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    PLUS            reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MINUS           reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    PONTOPONTO      reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    ID              reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    CROSSINLINE     reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IMPORT          reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    INIT            reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NOINLINE        reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    OUT             reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    VARARG          reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    WHERE           reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    INT             reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    FLOAT           reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    BOOLEAN         reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    STRING          reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    ARRAY           reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    CHAR            reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    OBJECT          reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    CONST           reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    CONSTRUCTOR     reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    EOF             reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    FALSE           reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    FUNCTION        reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NULL            reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NULLABLE        reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NUMBER          reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    OPERATOR        reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    SMARTCAST       reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    THIS            reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    TRUE            reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    VAL             reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    VAR             reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DOUBLE          reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    WHEN            reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    LONG            reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    ELVIS           reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IN              reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NOT_IN          reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IS              reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NOT_IS          reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MAIOR           reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MENORIGUAL      reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MAIORIGUAL      reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DIFERENTE       reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IDENTIDADE      reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    SEMIDENTIDADE   reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    AND             reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    OR              reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    FUN             reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    FOR             reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    WHILE           reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DO              reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    LITERAL_STRING  reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IF              reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    RETURN          reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    RETURN_AT       reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    CONTINUE        reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    CONTINUE_AT     reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    BREAK           reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    BREAK_AT        reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NOT             reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    SUSPEND         reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    COMMA           reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    LCHAVE          reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    PV              reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    ELSE            reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    RCCT            reduce using rule 139 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)


state 370

    (140) navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .

    IGUALDADE       reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    RPAREN          reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    INCREMENTO      reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DECREMENTO      reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MENOR           reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    LCCT            reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    LPAREN          reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    COLONCOLON      reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    RCHAVE          reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    PONTO           reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    AS              reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MAISIGUAL       reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MENOSIGUAL      reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MULTIGUAL       reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DIVIGUAL        reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MODIGUAL        reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MULT            reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DIVIDE          reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MOD             reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    PLUS            reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MINUS           reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    PONTOPONTO      reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    ID              reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    CROSSINLINE     reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IMPORT          reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    INIT            reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NOINLINE        reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    OUT             reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    VARARG          reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    WHERE           reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    INT             reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    FLOAT           reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    BOOLEAN         reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    STRING          reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    ARRAY           reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    CHAR            reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    OBJECT          reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    CONST           reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    CONSTRUCTOR     reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    EOF             reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    FALSE           reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    FUNCTION        reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NULL            reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NULLABLE        reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NUMBER          reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    OPERATOR        reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    SMARTCAST       reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    THIS            reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    TRUE            reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    VAL             reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    VAR             reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DOUBLE          reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    WHEN            reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    LONG            reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    ELVIS           reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IN              reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NOT_IN          reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IS              reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NOT_IS          reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MAIOR           reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MENORIGUAL      reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MAIORIGUAL      reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DIFERENTE       reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IDENTIDADE      reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    SEMIDENTIDADE   reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    AND             reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    OR              reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    FUN             reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    FOR             reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    WHILE           reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DO              reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    LITERAL_STRING  reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IF              reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    RETURN          reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    RETURN_AT       reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    CONTINUE        reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    CONTINUE_AT     reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    BREAK           reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    BREAK_AT        reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NOT             reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    SUSPEND         reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    COMMA           reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    LCHAVE          reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    PV              reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    ELSE            reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    RCCT            reduce using rule 140 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)


state 371

    (72) forStatement_MD -> FOR LPAREN multiVariableDeclaration IN . expression RPAREN controlStructureBody
    (73) forStatement_MD -> FOR LPAREN multiVariableDeclaration IN . expression RPAREN
    (82) expression -> . disjunction
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (33) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 99
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    LPAREN          shift and go to state 152
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57

    expression                     shift and go to state 404
    disjunction                    shift and go to state 85
    conjunction                    shift and go to state 94
    equality                       shift and go to state 97
    comparison                     shift and go to state 106
    infixOperation                 shift and go to state 121
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    simpleIdentifier               shift and go to state 149
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133
    prefixUnaryExpression          shift and go to state 150
    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 151
    unaryPrefix                    shift and go to state 105
    primaryExpression              shift and go to state 95
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122

state 372

    (74) forStatement_VD -> FOR LPAREN variableDeclaration IN . expression RPAREN controlStructureBody
    (75) forStatement_VD -> FOR LPAREN variableDeclaration IN . expression RPAREN
    (82) expression -> . disjunction
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (33) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 99
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    LPAREN          shift and go to state 152
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57

    expression                     shift and go to state 405
    disjunction                    shift and go to state 85
    conjunction                    shift and go to state 94
    equality                       shift and go to state 97
    comparison                     shift and go to state 106
    infixOperation                 shift and go to state 121
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    simpleIdentifier               shift and go to state 149
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133
    prefixUnaryExpression          shift and go to state 150
    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 151
    unaryPrefix                    shift and go to state 105
    primaryExpression              shift and go to state 95
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122

state 373

    (76) whileStatement -> WHILE LPAREN expression RPAREN . controlStructureBody
    (77) whileStatement -> WHILE LPAREN expression RPAREN . PV
    (65) controlStructureBody -> . block
    (66) controlStructureBody -> . statement
    (67) block -> . LCHAVE statements RCHAVE
    (61) statement -> . functionDeclaration
    (62) statement -> . assignment
    (63) statement -> . loopStatement
    (64) statement -> . expression
    (3) functionDeclaration -> . FUN simpleIdentifier functionValueParameters fd2 fd3
    (80) assignment -> . directlyAssignableExpression IGUALDADE expression
    (81) assignment -> . assignableExpression assignmentAndOperator expression
    (68) loopStatement -> . forStatement_MD
    (69) loopStatement -> . forStatement_VD
    (70) loopStatement -> . whileStatement
    (71) loopStatement -> . doWhileStatement
    (82) expression -> . disjunction
    (125) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (126) directlyAssignableExpression -> . simpleIdentifier
    (127) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (129) assignableExpression -> . prefixUnaryExpression
    (130) assignableExpression -> . parenthesizedAssignableExpression
    (72) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (73) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (74) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (75) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (76) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (77) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (78) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (79) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (128) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (131) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (33) typeModifier -> . SUSPEND
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type

    PV              shift and go to state 407
    LCHAVE          shift and go to state 49
    FUN             shift and go to state 77
    FOR             shift and go to state 90
    WHILE           shift and go to state 92
    DO              shift and go to state 93
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    LPAREN          shift and go to state 91
    LITERAL_STRING  shift and go to state 99
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    SUSPEND         shift and go to state 57

    expression                     shift and go to state 76
    controlStructureBody           shift and go to state 406
    block                          shift and go to state 195
    statement                      shift and go to state 196
    functionDeclaration            shift and go to state 73
    assignment                     shift and go to state 74
    loopStatement                  shift and go to state 75
    simpleIdentifier               shift and go to state 78
    directlyAssignableExpression   shift and go to state 79
    assignableExpression           shift and go to state 80
    forStatement_MD                shift and go to state 81
    forStatement_VD                shift and go to state 82
    whileStatement                 shift and go to state 83
    doWhileStatement               shift and go to state 84
    disjunction                    shift and go to state 85
    postfixUnaryExpression         shift and go to state 86
    parenthesizedDirectlyAssignableExpression shift and go to state 87
    prefixUnaryExpression          shift and go to state 88
    parenthesizedAssignableExpression shift and go to state 89
    conjunction                    shift and go to state 94
    primaryExpression              shift and go to state 95
    preue                          shift and go to state 96
    equality                       shift and go to state 97
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    unaryPrefix                    shift and go to state 105
    comparison                     shift and go to state 106
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    infixOperation                 shift and go to state 121
    typeModifier                   shift and go to state 122
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133

state 374

    (78) doWhileStatement -> DO controlStructureBody WHILE LPAREN . expression RPAREN
    (82) expression -> . disjunction
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (33) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 99
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    LPAREN          shift and go to state 152
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57

    expression                     shift and go to state 408
    disjunction                    shift and go to state 85
    conjunction                    shift and go to state 94
    equality                       shift and go to state 97
    comparison                     shift and go to state 106
    infixOperation                 shift and go to state 121
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    simpleIdentifier               shift and go to state 149
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133
    prefixUnaryExpression          shift and go to state 150
    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 151
    unaryPrefix                    shift and go to state 105
    primaryExpression              shift and go to state 95
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122

state 375

    (79) doWhileStatement -> DO WHILE LPAREN expression . RPAREN
    (76) whileStatement -> WHILE LPAREN expression . RPAREN controlStructureBody
    (77) whileStatement -> WHILE LPAREN expression . RPAREN PV
    (217) jumpExpression -> expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 409
    INCREMENTO      reduce using rule 217 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 217 (jumpExpression -> expression .)
    MENOR           reduce using rule 217 (jumpExpression -> expression .)
    LCCT            reduce using rule 217 (jumpExpression -> expression .)
    LPAREN          reduce using rule 217 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 217 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 217 (jumpExpression -> expression .)
    PONTO           reduce using rule 217 (jumpExpression -> expression .)
    AS              reduce using rule 217 (jumpExpression -> expression .)
    MULT            reduce using rule 217 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 217 (jumpExpression -> expression .)
    MOD             reduce using rule 217 (jumpExpression -> expression .)
    PLUS            reduce using rule 217 (jumpExpression -> expression .)
    MINUS           reduce using rule 217 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 217 (jumpExpression -> expression .)
    ID              reduce using rule 217 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 217 (jumpExpression -> expression .)
    IMPORT          reduce using rule 217 (jumpExpression -> expression .)
    INIT            reduce using rule 217 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 217 (jumpExpression -> expression .)
    OUT             reduce using rule 217 (jumpExpression -> expression .)
    VARARG          reduce using rule 217 (jumpExpression -> expression .)
    WHERE           reduce using rule 217 (jumpExpression -> expression .)
    INT             reduce using rule 217 (jumpExpression -> expression .)
    FLOAT           reduce using rule 217 (jumpExpression -> expression .)
    BOOLEAN         reduce using rule 217 (jumpExpression -> expression .)
    STRING          reduce using rule 217 (jumpExpression -> expression .)
    ARRAY           reduce using rule 217 (jumpExpression -> expression .)
    CHAR            reduce using rule 217 (jumpExpression -> expression .)
    OBJECT          reduce using rule 217 (jumpExpression -> expression .)
    CONST           reduce using rule 217 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 217 (jumpExpression -> expression .)
    EOF             reduce using rule 217 (jumpExpression -> expression .)
    FALSE           reduce using rule 217 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 217 (jumpExpression -> expression .)
    NULL            reduce using rule 217 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 217 (jumpExpression -> expression .)
    NUMBER          reduce using rule 217 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 217 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 217 (jumpExpression -> expression .)
    THIS            reduce using rule 217 (jumpExpression -> expression .)
    TRUE            reduce using rule 217 (jumpExpression -> expression .)
    VAL             reduce using rule 217 (jumpExpression -> expression .)
    VAR             reduce using rule 217 (jumpExpression -> expression .)
    DOUBLE          reduce using rule 217 (jumpExpression -> expression .)
    WHEN            reduce using rule 217 (jumpExpression -> expression .)
    LONG            reduce using rule 217 (jumpExpression -> expression .)
    ELVIS           reduce using rule 217 (jumpExpression -> expression .)
    IN              reduce using rule 217 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 217 (jumpExpression -> expression .)
    IS              reduce using rule 217 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 217 (jumpExpression -> expression .)
    MAIOR           reduce using rule 217 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 217 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 217 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 217 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 217 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 217 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 217 (jumpExpression -> expression .)
    AND             reduce using rule 217 (jumpExpression -> expression .)
    OR              reduce using rule 217 (jumpExpression -> expression .)

  ! RPAREN          [ reduce using rule 217 (jumpExpression -> expression .) ]


state 376

    (141) callSuffix -> typeArguments valueArguments annotatedLambda .

    INCREMENTO      reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    DECREMENTO      reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    MENOR           reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    LCCT            reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    LPAREN          reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    COLONCOLON      reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    RCHAVE          reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    PONTO           reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    AS              reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    MAISIGUAL       reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    MENOSIGUAL      reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    MULTIGUAL       reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    DIVIGUAL        reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    MODIGUAL        reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    MULT            reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    DIVIDE          reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    MOD             reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    PLUS            reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    MINUS           reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    PONTOPONTO      reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    ID              reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    CROSSINLINE     reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    IMPORT          reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    INIT            reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    NOINLINE        reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    OUT             reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    VARARG          reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    WHERE           reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    INT             reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    FLOAT           reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    BOOLEAN         reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    STRING          reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    ARRAY           reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    CHAR            reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    OBJECT          reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    CONST           reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    CONSTRUCTOR     reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    EOF             reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    FALSE           reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    FUNCTION        reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    NULL            reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    NULLABLE        reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    NUMBER          reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    OPERATOR        reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    SMARTCAST       reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    THIS            reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    TRUE            reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    VAL             reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    VAR             reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    DOUBLE          reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    WHEN            reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    LONG            reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    ELVIS           reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    IN              reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    NOT_IN          reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    IS              reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    NOT_IS          reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    MAIOR           reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    MENORIGUAL      reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    MAIORIGUAL      reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    DIFERENTE       reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    IDENTIDADE      reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    IGUALDADE       reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    SEMIDENTIDADE   reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    AND             reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    OR              reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    FUN             reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    FOR             reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    WHILE           reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    DO              reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    LITERAL_STRING  reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    IF              reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    RETURN          reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    RETURN_AT       reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    CONTINUE        reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    CONTINUE_AT     reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    BREAK           reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    BREAK_AT        reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    NOT             reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    SUSPEND         reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    COMMA           reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    RPAREN          reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    LCHAVE          reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    PV              reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    ELSE            reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    RCCT            reduce using rule 141 (callSuffix -> typeArguments valueArguments annotatedLambda .)


state 377

    (153) valueArguments -> LPAREN vas RPAREN .

    RCHAVE          reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    INCREMENTO      reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    DECREMENTO      reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    MENOR           reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    LCCT            reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    LPAREN          reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    COLONCOLON      reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    PONTO           reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    AS              reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    MAISIGUAL       reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    MENOSIGUAL      reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    MULTIGUAL       reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    DIVIGUAL        reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    MODIGUAL        reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    MULT            reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    DIVIDE          reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    MOD             reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    PLUS            reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    MINUS           reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    PONTOPONTO      reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    ID              reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    CROSSINLINE     reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    IMPORT          reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    INIT            reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    NOINLINE        reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    OUT             reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    VARARG          reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    WHERE           reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    INT             reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    FLOAT           reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    BOOLEAN         reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    STRING          reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    ARRAY           reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    CHAR            reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    OBJECT          reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    CONST           reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    CONSTRUCTOR     reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    EOF             reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    FALSE           reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    FUNCTION        reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    NULL            reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    NULLABLE        reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    NUMBER          reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    OPERATOR        reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    SMARTCAST       reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    THIS            reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    TRUE            reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    VAL             reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    VAR             reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    DOUBLE          reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    WHEN            reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    LONG            reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    ELVIS           reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    IN              reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    NOT_IN          reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    IS              reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    NOT_IS          reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    MAIOR           reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    MENORIGUAL      reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    MAIORIGUAL      reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    DIFERENTE       reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    IDENTIDADE      reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    IGUALDADE       reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    SEMIDENTIDADE   reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    AND             reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    OR              reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    FUN             reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    FOR             reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    WHILE           reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    DO              reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    LITERAL_STRING  reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    IF              reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    RETURN          reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    RETURN_AT       reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    CONTINUE        reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    CONTINUE_AT     reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    BREAK           reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    BREAK_AT        reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    NOT             reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    SUSPEND         reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    COMMA           reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    RPAREN          reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    LCHAVE          reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    PV              reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    ELSE            reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)
    RCCT            reduce using rule 153 (valueArguments -> LPAREN vas RPAREN .)


state 378

    (155) vas -> valueArgument COMMA . vas
    (154) vas -> . valueArgument
    (155) vas -> . valueArgument COMMA vas
    (156) valueArgument -> . simpleIdentifier IGUALDADE MULT expression
    (157) valueArgument -> . simpleIdentifier IGUALDADE expression
    (158) valueArgument -> . expression
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (82) expression -> . disjunction
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (33) typeModifier -> . SUSPEND

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    LITERAL_STRING  shift and go to state 99
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    LPAREN          shift and go to state 152
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57

    valueArgument                  shift and go to state 321
    vas                            shift and go to state 410
    simpleIdentifier               shift and go to state 322
    expression                     shift and go to state 323
    disjunction                    shift and go to state 85
    conjunction                    shift and go to state 94
    equality                       shift and go to state 97
    comparison                     shift and go to state 106
    infixOperation                 shift and go to state 121
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133
    prefixUnaryExpression          shift and go to state 150
    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 151
    unaryPrefix                    shift and go to state 105
    primaryExpression              shift and go to state 95
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122

state 379

    (156) valueArgument -> simpleIdentifier IGUALDADE . MULT expression
    (157) valueArgument -> simpleIdentifier IGUALDADE . expression
    (82) expression -> . disjunction
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (33) typeModifier -> . SUSPEND

    MULT            shift and go to state 411
    LITERAL_STRING  shift and go to state 99
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    LPAREN          shift and go to state 152
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57

    simpleIdentifier               shift and go to state 149
    expression                     shift and go to state 412
    disjunction                    shift and go to state 85
    conjunction                    shift and go to state 94
    equality                       shift and go to state 97
    comparison                     shift and go to state 106
    infixOperation                 shift and go to state 121
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133
    prefixUnaryExpression          shift and go to state 150
    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 151
    unaryPrefix                    shift and go to state 105
    primaryExpression              shift and go to state 95
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122

state 380

    (171) cl -> expression COMMA cl .

    RCCT            reduce using rule 171 (cl -> expression COMMA cl .)


state 381

    (210) ifExpression -> IF LPAREN expression RPAREN . if1 if2 ELSE if1 if2
    (211) if1 -> . controlStructureBody
    (212) if1 -> .
    (65) controlStructureBody -> . block
    (66) controlStructureBody -> . statement
    (67) block -> . LCHAVE statements RCHAVE
    (61) statement -> . functionDeclaration
    (62) statement -> . assignment
    (63) statement -> . loopStatement
    (64) statement -> . expression
    (3) functionDeclaration -> . FUN simpleIdentifier functionValueParameters fd2 fd3
    (80) assignment -> . directlyAssignableExpression IGUALDADE expression
    (81) assignment -> . assignableExpression assignmentAndOperator expression
    (68) loopStatement -> . forStatement_MD
    (69) loopStatement -> . forStatement_VD
    (70) loopStatement -> . whileStatement
    (71) loopStatement -> . doWhileStatement
    (82) expression -> . disjunction
    (125) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (126) directlyAssignableExpression -> . simpleIdentifier
    (127) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (129) assignableExpression -> . prefixUnaryExpression
    (130) assignableExpression -> . parenthesizedAssignableExpression
    (72) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (73) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (74) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (75) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (76) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (77) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (78) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (79) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (128) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (131) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (33) typeModifier -> . SUSPEND
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type

    PV              reduce using rule 212 (if1 -> .)
    ELSE            reduce using rule 212 (if1 -> .)
    LCHAVE          shift and go to state 49
    FUN             shift and go to state 77
    FOR             shift and go to state 90
    WHILE           shift and go to state 92
    DO              shift and go to state 93
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    LPAREN          shift and go to state 91
    LITERAL_STRING  shift and go to state 99
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    SUSPEND         shift and go to state 57

    expression                     shift and go to state 76
    if1                            shift and go to state 413
    controlStructureBody           shift and go to state 414
    block                          shift and go to state 195
    statement                      shift and go to state 196
    functionDeclaration            shift and go to state 73
    assignment                     shift and go to state 74
    loopStatement                  shift and go to state 75
    simpleIdentifier               shift and go to state 78
    directlyAssignableExpression   shift and go to state 79
    assignableExpression           shift and go to state 80
    forStatement_MD                shift and go to state 81
    forStatement_VD                shift and go to state 82
    whileStatement                 shift and go to state 83
    doWhileStatement               shift and go to state 84
    disjunction                    shift and go to state 85
    postfixUnaryExpression         shift and go to state 86
    parenthesizedDirectlyAssignableExpression shift and go to state 87
    prefixUnaryExpression          shift and go to state 88
    parenthesizedAssignableExpression shift and go to state 89
    conjunction                    shift and go to state 94
    primaryExpression              shift and go to state 95
    preue                          shift and go to state 96
    equality                       shift and go to state 97
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    unaryPrefix                    shift and go to state 105
    comparison                     shift and go to state 106
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    infixOperation                 shift and go to state 121
    typeModifier                   shift and go to state 122
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133

state 382

    (94) io -> inOperator elvisExpression io .
    (91) infixOperation -> elvisExpression io .

  ! reduce/reduce conflict for FUN resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for FOR resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for WHILE resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for DO resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for ID resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for IMPORT resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for INIT resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for OUT resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for VARARG resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for WHERE resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for INT resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for FLOAT resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for STRING resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for ARRAY resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for CHAR resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for OBJECT resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for CONST resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for EOF resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for FALSE resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for NULL resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for NUMBER resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for THIS resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for TRUE resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for VAL resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for VAR resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for WHEN resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for LONG resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for LPAREN resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for LCCT resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for IF resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for RETURN resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for BREAK resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for MINUS resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for PLUS resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for NOT resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for PV resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for ELSE resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for MENOR resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for PONTO resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for AS resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for MULT resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for MOD resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for ELVIS resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for IN resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for IS resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for MAIOR resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for AND resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for OR resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for COMMA resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for RPAREN resolved using rule 91 (infixOperation -> elvisExpression io .)
  ! reduce/reduce conflict for RCCT resolved using rule 91 (infixOperation -> elvisExpression io .)
    FUN             reduce using rule 91 (infixOperation -> elvisExpression io .)
    FOR             reduce using rule 91 (infixOperation -> elvisExpression io .)
    WHILE           reduce using rule 91 (infixOperation -> elvisExpression io .)
    DO              reduce using rule 91 (infixOperation -> elvisExpression io .)
    ID              reduce using rule 91 (infixOperation -> elvisExpression io .)
    CROSSINLINE     reduce using rule 91 (infixOperation -> elvisExpression io .)
    IMPORT          reduce using rule 91 (infixOperation -> elvisExpression io .)
    INIT            reduce using rule 91 (infixOperation -> elvisExpression io .)
    NOINLINE        reduce using rule 91 (infixOperation -> elvisExpression io .)
    OUT             reduce using rule 91 (infixOperation -> elvisExpression io .)
    VARARG          reduce using rule 91 (infixOperation -> elvisExpression io .)
    WHERE           reduce using rule 91 (infixOperation -> elvisExpression io .)
    INT             reduce using rule 91 (infixOperation -> elvisExpression io .)
    FLOAT           reduce using rule 91 (infixOperation -> elvisExpression io .)
    BOOLEAN         reduce using rule 91 (infixOperation -> elvisExpression io .)
    STRING          reduce using rule 91 (infixOperation -> elvisExpression io .)
    ARRAY           reduce using rule 91 (infixOperation -> elvisExpression io .)
    CHAR            reduce using rule 91 (infixOperation -> elvisExpression io .)
    OBJECT          reduce using rule 91 (infixOperation -> elvisExpression io .)
    CONST           reduce using rule 91 (infixOperation -> elvisExpression io .)
    CONSTRUCTOR     reduce using rule 91 (infixOperation -> elvisExpression io .)
    EOF             reduce using rule 91 (infixOperation -> elvisExpression io .)
    FALSE           reduce using rule 91 (infixOperation -> elvisExpression io .)
    FUNCTION        reduce using rule 91 (infixOperation -> elvisExpression io .)
    NULL            reduce using rule 91 (infixOperation -> elvisExpression io .)
    NULLABLE        reduce using rule 91 (infixOperation -> elvisExpression io .)
    NUMBER          reduce using rule 91 (infixOperation -> elvisExpression io .)
    OPERATOR        reduce using rule 91 (infixOperation -> elvisExpression io .)
    SMARTCAST       reduce using rule 91 (infixOperation -> elvisExpression io .)
    THIS            reduce using rule 91 (infixOperation -> elvisExpression io .)
    TRUE            reduce using rule 91 (infixOperation -> elvisExpression io .)
    VAL             reduce using rule 91 (infixOperation -> elvisExpression io .)
    VAR             reduce using rule 91 (infixOperation -> elvisExpression io .)
    DOUBLE          reduce using rule 91 (infixOperation -> elvisExpression io .)
    WHEN            reduce using rule 91 (infixOperation -> elvisExpression io .)
    LONG            reduce using rule 91 (infixOperation -> elvisExpression io .)
    LPAREN          reduce using rule 91 (infixOperation -> elvisExpression io .)
    LITERAL_STRING  reduce using rule 91 (infixOperation -> elvisExpression io .)
    COLONCOLON      reduce using rule 91 (infixOperation -> elvisExpression io .)
    LCCT            reduce using rule 91 (infixOperation -> elvisExpression io .)
    IF              reduce using rule 91 (infixOperation -> elvisExpression io .)
    RETURN          reduce using rule 91 (infixOperation -> elvisExpression io .)
    RETURN_AT       reduce using rule 91 (infixOperation -> elvisExpression io .)
    CONTINUE        reduce using rule 91 (infixOperation -> elvisExpression io .)
    CONTINUE_AT     reduce using rule 91 (infixOperation -> elvisExpression io .)
    BREAK           reduce using rule 91 (infixOperation -> elvisExpression io .)
    BREAK_AT        reduce using rule 91 (infixOperation -> elvisExpression io .)
    RCHAVE          reduce using rule 91 (infixOperation -> elvisExpression io .)
    INCREMENTO      reduce using rule 91 (infixOperation -> elvisExpression io .)
    DECREMENTO      reduce using rule 91 (infixOperation -> elvisExpression io .)
    MINUS           reduce using rule 91 (infixOperation -> elvisExpression io .)
    PLUS            reduce using rule 91 (infixOperation -> elvisExpression io .)
    NOT             reduce using rule 91 (infixOperation -> elvisExpression io .)
    SUSPEND         reduce using rule 91 (infixOperation -> elvisExpression io .)
    LCHAVE          reduce using rule 91 (infixOperation -> elvisExpression io .)
    PV              reduce using rule 91 (infixOperation -> elvisExpression io .)
    ELSE            reduce using rule 91 (infixOperation -> elvisExpression io .)
    MENOR           reduce using rule 91 (infixOperation -> elvisExpression io .)
    PONTO           reduce using rule 91 (infixOperation -> elvisExpression io .)
    AS              reduce using rule 91 (infixOperation -> elvisExpression io .)
    MAISIGUAL       reduce using rule 91 (infixOperation -> elvisExpression io .)
    MENOSIGUAL      reduce using rule 91 (infixOperation -> elvisExpression io .)
    MULTIGUAL       reduce using rule 91 (infixOperation -> elvisExpression io .)
    DIVIGUAL        reduce using rule 91 (infixOperation -> elvisExpression io .)
    MODIGUAL        reduce using rule 91 (infixOperation -> elvisExpression io .)
    MULT            reduce using rule 91 (infixOperation -> elvisExpression io .)
    DIVIDE          reduce using rule 91 (infixOperation -> elvisExpression io .)
    MOD             reduce using rule 91 (infixOperation -> elvisExpression io .)
    PONTOPONTO      reduce using rule 91 (infixOperation -> elvisExpression io .)
    ELVIS           reduce using rule 91 (infixOperation -> elvisExpression io .)
    IN              reduce using rule 91 (infixOperation -> elvisExpression io .)
    NOT_IN          reduce using rule 91 (infixOperation -> elvisExpression io .)
    IS              reduce using rule 91 (infixOperation -> elvisExpression io .)
    NOT_IS          reduce using rule 91 (infixOperation -> elvisExpression io .)
    MAIOR           reduce using rule 91 (infixOperation -> elvisExpression io .)
    MENORIGUAL      reduce using rule 91 (infixOperation -> elvisExpression io .)
    MAIORIGUAL      reduce using rule 91 (infixOperation -> elvisExpression io .)
    DIFERENTE       reduce using rule 91 (infixOperation -> elvisExpression io .)
    IDENTIDADE      reduce using rule 91 (infixOperation -> elvisExpression io .)
    IGUALDADE       reduce using rule 91 (infixOperation -> elvisExpression io .)
    SEMIDENTIDADE   reduce using rule 91 (infixOperation -> elvisExpression io .)
    AND             reduce using rule 91 (infixOperation -> elvisExpression io .)
    OR              reduce using rule 91 (infixOperation -> elvisExpression io .)
    COMMA           reduce using rule 91 (infixOperation -> elvisExpression io .)
    RPAREN          reduce using rule 91 (infixOperation -> elvisExpression io .)
    RCCT            reduce using rule 91 (infixOperation -> elvisExpression io .)

  ! FUN             [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! FOR             [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! WHILE           [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! DO              [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! ID              [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! CROSSINLINE     [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! IMPORT          [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! INIT            [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! NOINLINE        [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! OUT             [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! VARARG          [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! WHERE           [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! INT             [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! FLOAT           [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! BOOLEAN         [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! STRING          [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! ARRAY           [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! CHAR            [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! OBJECT          [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! CONST           [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! CONSTRUCTOR     [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! EOF             [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! FALSE           [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! FUNCTION        [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! NULL            [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! NULLABLE        [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! NUMBER          [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! OPERATOR        [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! SMARTCAST       [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! THIS            [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! TRUE            [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! VAL             [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! VAR             [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! DOUBLE          [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! WHEN            [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! LONG            [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! LPAREN          [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! LITERAL_STRING  [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! COLONCOLON      [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! LCCT            [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! IF              [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! RETURN          [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! RETURN_AT       [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! CONTINUE        [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! CONTINUE_AT     [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! BREAK           [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! BREAK_AT        [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! RCHAVE          [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! INCREMENTO      [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! DECREMENTO      [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! MINUS           [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! PLUS            [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! NOT             [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! SUSPEND         [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! LCHAVE          [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! PV              [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! ELSE            [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! MENOR           [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! PONTO           [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! AS              [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! MAISIGUAL       [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! MENOSIGUAL      [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! MULTIGUAL       [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! DIVIGUAL        [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! MODIGUAL        [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! MULT            [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! DIVIDE          [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! MOD             [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! PONTOPONTO      [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! ELVIS           [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! IN              [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! NOT_IN          [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! IS              [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! NOT_IS          [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! MAIOR           [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! MENORIGUAL      [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! MAIORIGUAL      [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! DIFERENTE       [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! IDENTIDADE      [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! IGUALDADE       [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! SEMIDENTIDADE   [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! AND             [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! OR              [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! COMMA           [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! RPAREN          [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]
  ! RCCT            [ reduce using rule 94 (io -> inOperator elvisExpression io .) ]


state 383

    (96) io -> isOperator type io .

    FUN             reduce using rule 96 (io -> isOperator type io .)
    FOR             reduce using rule 96 (io -> isOperator type io .)
    WHILE           reduce using rule 96 (io -> isOperator type io .)
    DO              reduce using rule 96 (io -> isOperator type io .)
    ID              reduce using rule 96 (io -> isOperator type io .)
    CROSSINLINE     reduce using rule 96 (io -> isOperator type io .)
    IMPORT          reduce using rule 96 (io -> isOperator type io .)
    INIT            reduce using rule 96 (io -> isOperator type io .)
    NOINLINE        reduce using rule 96 (io -> isOperator type io .)
    OUT             reduce using rule 96 (io -> isOperator type io .)
    VARARG          reduce using rule 96 (io -> isOperator type io .)
    WHERE           reduce using rule 96 (io -> isOperator type io .)
    INT             reduce using rule 96 (io -> isOperator type io .)
    FLOAT           reduce using rule 96 (io -> isOperator type io .)
    BOOLEAN         reduce using rule 96 (io -> isOperator type io .)
    STRING          reduce using rule 96 (io -> isOperator type io .)
    ARRAY           reduce using rule 96 (io -> isOperator type io .)
    CHAR            reduce using rule 96 (io -> isOperator type io .)
    OBJECT          reduce using rule 96 (io -> isOperator type io .)
    CONST           reduce using rule 96 (io -> isOperator type io .)
    CONSTRUCTOR     reduce using rule 96 (io -> isOperator type io .)
    EOF             reduce using rule 96 (io -> isOperator type io .)
    FALSE           reduce using rule 96 (io -> isOperator type io .)
    FUNCTION        reduce using rule 96 (io -> isOperator type io .)
    NULL            reduce using rule 96 (io -> isOperator type io .)
    NULLABLE        reduce using rule 96 (io -> isOperator type io .)
    NUMBER          reduce using rule 96 (io -> isOperator type io .)
    OPERATOR        reduce using rule 96 (io -> isOperator type io .)
    SMARTCAST       reduce using rule 96 (io -> isOperator type io .)
    THIS            reduce using rule 96 (io -> isOperator type io .)
    TRUE            reduce using rule 96 (io -> isOperator type io .)
    VAL             reduce using rule 96 (io -> isOperator type io .)
    VAR             reduce using rule 96 (io -> isOperator type io .)
    DOUBLE          reduce using rule 96 (io -> isOperator type io .)
    WHEN            reduce using rule 96 (io -> isOperator type io .)
    LONG            reduce using rule 96 (io -> isOperator type io .)
    LPAREN          reduce using rule 96 (io -> isOperator type io .)
    LITERAL_STRING  reduce using rule 96 (io -> isOperator type io .)
    COLONCOLON      reduce using rule 96 (io -> isOperator type io .)
    LCCT            reduce using rule 96 (io -> isOperator type io .)
    IF              reduce using rule 96 (io -> isOperator type io .)
    RETURN          reduce using rule 96 (io -> isOperator type io .)
    RETURN_AT       reduce using rule 96 (io -> isOperator type io .)
    CONTINUE        reduce using rule 96 (io -> isOperator type io .)
    CONTINUE_AT     reduce using rule 96 (io -> isOperator type io .)
    BREAK           reduce using rule 96 (io -> isOperator type io .)
    BREAK_AT        reduce using rule 96 (io -> isOperator type io .)
    RCHAVE          reduce using rule 96 (io -> isOperator type io .)
    INCREMENTO      reduce using rule 96 (io -> isOperator type io .)
    DECREMENTO      reduce using rule 96 (io -> isOperator type io .)
    MINUS           reduce using rule 96 (io -> isOperator type io .)
    PLUS            reduce using rule 96 (io -> isOperator type io .)
    NOT             reduce using rule 96 (io -> isOperator type io .)
    SUSPEND         reduce using rule 96 (io -> isOperator type io .)
    LCHAVE          reduce using rule 96 (io -> isOperator type io .)
    PV              reduce using rule 96 (io -> isOperator type io .)
    ELSE            reduce using rule 96 (io -> isOperator type io .)
    MENOR           reduce using rule 96 (io -> isOperator type io .)
    PONTO           reduce using rule 96 (io -> isOperator type io .)
    AS              reduce using rule 96 (io -> isOperator type io .)
    MAISIGUAL       reduce using rule 96 (io -> isOperator type io .)
    MENOSIGUAL      reduce using rule 96 (io -> isOperator type io .)
    MULTIGUAL       reduce using rule 96 (io -> isOperator type io .)
    DIVIGUAL        reduce using rule 96 (io -> isOperator type io .)
    MODIGUAL        reduce using rule 96 (io -> isOperator type io .)
    MULT            reduce using rule 96 (io -> isOperator type io .)
    DIVIDE          reduce using rule 96 (io -> isOperator type io .)
    MOD             reduce using rule 96 (io -> isOperator type io .)
    PONTOPONTO      reduce using rule 96 (io -> isOperator type io .)
    ELVIS           reduce using rule 96 (io -> isOperator type io .)
    IN              reduce using rule 96 (io -> isOperator type io .)
    NOT_IN          reduce using rule 96 (io -> isOperator type io .)
    IS              reduce using rule 96 (io -> isOperator type io .)
    NOT_IS          reduce using rule 96 (io -> isOperator type io .)
    MAIOR           reduce using rule 96 (io -> isOperator type io .)
    MENORIGUAL      reduce using rule 96 (io -> isOperator type io .)
    MAIORIGUAL      reduce using rule 96 (io -> isOperator type io .)
    DIFERENTE       reduce using rule 96 (io -> isOperator type io .)
    IDENTIDADE      reduce using rule 96 (io -> isOperator type io .)
    IGUALDADE       reduce using rule 96 (io -> isOperator type io .)
    SEMIDENTIDADE   reduce using rule 96 (io -> isOperator type io .)
    AND             reduce using rule 96 (io -> isOperator type io .)
    OR              reduce using rule 96 (io -> isOperator type io .)
    COMMA           reduce using rule 96 (io -> isOperator type io .)
    RPAREN          reduce using rule 96 (io -> isOperator type io .)
    RCCT            reduce using rule 96 (io -> isOperator type io .)


state 384

    (54) ftp -> COMMA parameter ftp .

    RPAREN          reduce using rule 54 (ftp -> COMMA parameter ftp .)


state 385

    (55) ftp -> COMMA type ftp .

    RPAREN          reduce using rule 55 (ftp -> COMMA type ftp .)


state 386

    (44) functionType -> receiverType PONTO functionTypeParameters SETA type .

    LCHAVE          reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    FUN             reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    $end            reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    FOR             reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    WHILE           reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DO              reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    ID              reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    CROSSINLINE     reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IMPORT          reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    INIT            reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NOINLINE        reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    OUT             reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    VARARG          reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    WHERE           reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    INT             reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    FLOAT           reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    BOOLEAN         reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    STRING          reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    ARRAY           reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    CHAR            reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    OBJECT          reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    CONST           reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    CONSTRUCTOR     reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    EOF             reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    FALSE           reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    FUNCTION        reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NULL            reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NULLABLE        reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NUMBER          reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    OPERATOR        reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    SMARTCAST       reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    THIS            reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    TRUE            reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    VAL             reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    VAR             reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DOUBLE          reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    WHEN            reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    LONG            reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    LPAREN          reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    LITERAL_STRING  reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    COLONCOLON      reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    LCCT            reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IF              reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    RETURN          reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    RETURN_AT       reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    CONTINUE        reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    CONTINUE_AT     reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    BREAK           reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    BREAK_AT        reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    RCHAVE          reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    INCREMENTO      reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DECREMENTO      reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MINUS           reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    PLUS            reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NOT             reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    SUSPEND         reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    PV              reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    ELSE            reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MENOR           reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    PONTO           reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    AS              reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MAISIGUAL       reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MENOSIGUAL      reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MULTIGUAL       reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DIVIGUAL        reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MODIGUAL        reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MULT            reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DIVIDE          reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MOD             reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    PONTOPONTO      reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    ELVIS           reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IN              reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NOT_IN          reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IS              reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NOT_IS          reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MAIOR           reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MENORIGUAL      reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MAIORIGUAL      reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DIFERENTE       reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IDENTIDADE      reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IGUALDADE       reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    SEMIDENTIDADE   reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    AND             reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    OR              reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    COMMA           reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    RPAREN          reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    RCCT            reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    ATRIBUICAO      reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    SETA            reduce using rule 44 (functionType -> receiverType PONTO functionTypeParameters SETA type .)


state 387

    (50) functionTypeParameters_t -> LPAREN type RPAREN .

    SETA            reduce using rule 50 (functionTypeParameters_t -> LPAREN type RPAREN .)


state 388

    (151) ta -> typeProjection COMMA ta .

    MAIOR           reduce using rule 151 (ta -> typeProjection COMMA ta .)


state 389

    (24) mvd -> variableDeclaration COMMA mvd .

    RPAREN          reduce using rule 24 (mvd -> variableDeclaration COMMA mvd .)


state 390

    (192) anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP . type typeConstraint functionBody
    (195) anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP . type functionBody
    (196) anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP . type typeConstraint
    (202) anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP . type
    (26) type -> . typeModifiers optype
    (27) type -> . optype
    (31) typeModifiers -> . typeModifier
    (32) typeModifiers -> . typeModifier typeModifiers
    (28) optype -> . parenthesizedType
    (29) optype -> . functionType
    (30) optype -> . userType
    (33) typeModifier -> . SUSPEND
    (56) parenthesizedType -> . LPAREN type RPAREN
    (44) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (45) functionType -> . functionTypeParameters SETA type
    (37) userType -> . simpleUserType
    (57) receiverType -> . typeModifier rt
    (46) functionTypeParameters -> . functionTypeParameters_p
    (47) functionTypeParameters -> . functionTypeParameters_t
    (38) simpleUserType -> . simpleIdentifier typeArguments
    (39) simpleUserType -> . simpleIdentifier
    (48) functionTypeParameters_p -> . LPAREN parameter ftp RPAREN
    (49) functionTypeParameters_p -> . LPAREN parameter RPAREN
    (50) functionTypeParameters_t -> . LPAREN type RPAREN
    (51) functionTypeParameters_t -> . LPAREN type ftp RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    SUSPEND         shift and go to state 57
    LPAREN          shift and go to state 58
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    type                           shift and go to state 415
    typeModifiers                  shift and go to state 51
    optype                         shift and go to state 52
    typeModifier                   shift and go to state 53
    parenthesizedType              shift and go to state 54
    functionType                   shift and go to state 55
    userType                       shift and go to state 56
    receiverType                   shift and go to state 59
    functionTypeParameters         shift and go to state 60
    simpleUserType                 shift and go to state 61
    functionTypeParameters_p       shift and go to state 62
    functionTypeParameters_t       shift and go to state 63
    simpleIdentifier               shift and go to state 64

state 391

    (194) anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint . functionBody
    (201) anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .
    (10) functionBody -> . block
    (11) functionBody -> . ATRIBUICAO expression
    (67) block -> . LCHAVE statements RCHAVE

  ! shift/reduce conflict for LCHAVE resolved as shift
    INCREMENTO      reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    DECREMENTO      reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    MENOR           reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    LCCT            reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    LPAREN          reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    COLONCOLON      reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    RCHAVE          reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    PONTO           reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    AS              reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    MAISIGUAL       reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    MENOSIGUAL      reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    MULTIGUAL       reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    DIVIGUAL        reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    MODIGUAL        reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    MULT            reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    DIVIDE          reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    MOD             reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    PLUS            reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    MINUS           reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    PONTOPONTO      reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    ID              reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    CROSSINLINE     reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    IMPORT          reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    INIT            reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    NOINLINE        reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    OUT             reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    VARARG          reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    WHERE           reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    INT             reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    FLOAT           reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    BOOLEAN         reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    STRING          reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    ARRAY           reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    CHAR            reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    OBJECT          reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    CONST           reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    CONSTRUCTOR     reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    EOF             reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    FALSE           reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    FUNCTION        reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    NULL            reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    NULLABLE        reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    NUMBER          reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    OPERATOR        reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    SMARTCAST       reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    THIS            reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    TRUE            reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    VAL             reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    VAR             reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    DOUBLE          reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    WHEN            reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    LONG            reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    ELVIS           reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    IN              reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    NOT_IN          reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    IS              reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    NOT_IS          reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    MAIOR           reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    MENORIGUAL      reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    MAIORIGUAL      reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    DIFERENTE       reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    IDENTIDADE      reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    IGUALDADE       reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    SEMIDENTIDADE   reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    AND             reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    OR              reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    FUN             reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    FOR             reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    WHILE           reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    DO              reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    LITERAL_STRING  reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    IF              reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    RETURN          reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    RETURN_AT       reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    CONTINUE        reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    CONTINUE_AT     reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    BREAK           reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    BREAK_AT        reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    NOT             reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    SUSPEND         reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    COMMA           reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    RPAREN          reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    PV              reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    ELSE            reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    RCCT            reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .)
    ATRIBUICAO      shift and go to state 286
    LCHAVE          shift and go to state 49

  ! LCHAVE          [ reduce using rule 201 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint .) ]

    functionBody                   shift and go to state 416
    block                          shift and go to state 285

state 392

    (200) anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .

    INCREMENTO      reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    DECREMENTO      reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    MENOR           reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    LCCT            reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    LPAREN          reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    COLONCOLON      reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    RCHAVE          reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    PONTO           reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    AS              reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    MAISIGUAL       reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    MENOSIGUAL      reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    MULTIGUAL       reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    DIVIGUAL        reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    MODIGUAL        reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    MULT            reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    DIVIDE          reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    MOD             reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    PLUS            reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    MINUS           reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    PONTOPONTO      reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    ID              reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    CROSSINLINE     reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    IMPORT          reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    INIT            reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    NOINLINE        reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    OUT             reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    VARARG          reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    WHERE           reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    INT             reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    FLOAT           reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    BOOLEAN         reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    STRING          reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    ARRAY           reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    CHAR            reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    OBJECT          reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    CONST           reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    CONSTRUCTOR     reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    EOF             reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    FALSE           reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    FUNCTION        reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    NULL            reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    NULLABLE        reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    NUMBER          reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    OPERATOR        reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    SMARTCAST       reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    THIS            reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    TRUE            reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    VAL             reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    VAR             reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    DOUBLE          reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    WHEN            reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    LONG            reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    ELVIS           reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    IN              reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    NOT_IN          reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    IS              reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    NOT_IS          reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    MAIOR           reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    MENORIGUAL      reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    MAIORIGUAL      reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    DIFERENTE       reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    IDENTIDADE      reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    IGUALDADE       reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    SEMIDENTIDADE   reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    AND             reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    OR              reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    FUN             reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    FOR             reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    WHILE           reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    DO              reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    LITERAL_STRING  reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    IF              reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    RETURN          reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    RETURN_AT       reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    CONTINUE        reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    CONTINUE_AT     reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    BREAK           reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    BREAK_AT        reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    NOT             reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    SUSPEND         reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    COMMA           reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    RPAREN          reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    LCHAVE          reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    PV              reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    ELSE            reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)
    RCCT            reduce using rule 200 (anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody .)


state 393

    (177) parameterWithOptionalType -> simpleIdentifier . DOISP type
    (179) parameterWithOptionalType -> simpleIdentifier .

    DOISP           shift and go to state 417
    COMMA           reduce using rule 179 (parameterWithOptionalType -> simpleIdentifier .)
    RPAREN          reduce using rule 179 (parameterWithOptionalType -> simpleIdentifier .)


state 394

    (180) parameterModifiers -> VARARG .
    (266) simpleIdentifier -> VARARG .

    ID              reduce using rule 180 (parameterModifiers -> VARARG .)
    CROSSINLINE     reduce using rule 180 (parameterModifiers -> VARARG .)
    IMPORT          reduce using rule 180 (parameterModifiers -> VARARG .)
    INIT            reduce using rule 180 (parameterModifiers -> VARARG .)
    NOINLINE        reduce using rule 180 (parameterModifiers -> VARARG .)
    OUT             reduce using rule 180 (parameterModifiers -> VARARG .)
    VARARG          reduce using rule 180 (parameterModifiers -> VARARG .)
    WHERE           reduce using rule 180 (parameterModifiers -> VARARG .)
    INT             reduce using rule 180 (parameterModifiers -> VARARG .)
    FLOAT           reduce using rule 180 (parameterModifiers -> VARARG .)
    BOOLEAN         reduce using rule 180 (parameterModifiers -> VARARG .)
    STRING          reduce using rule 180 (parameterModifiers -> VARARG .)
    ARRAY           reduce using rule 180 (parameterModifiers -> VARARG .)
    CHAR            reduce using rule 180 (parameterModifiers -> VARARG .)
    OBJECT          reduce using rule 180 (parameterModifiers -> VARARG .)
    CONST           reduce using rule 180 (parameterModifiers -> VARARG .)
    CONSTRUCTOR     reduce using rule 180 (parameterModifiers -> VARARG .)
    EOF             reduce using rule 180 (parameterModifiers -> VARARG .)
    FALSE           reduce using rule 180 (parameterModifiers -> VARARG .)
    FUNCTION        reduce using rule 180 (parameterModifiers -> VARARG .)
    NULL            reduce using rule 180 (parameterModifiers -> VARARG .)
    NULLABLE        reduce using rule 180 (parameterModifiers -> VARARG .)
    NUMBER          reduce using rule 180 (parameterModifiers -> VARARG .)
    OPERATOR        reduce using rule 180 (parameterModifiers -> VARARG .)
    SMARTCAST       reduce using rule 180 (parameterModifiers -> VARARG .)
    THIS            reduce using rule 180 (parameterModifiers -> VARARG .)
    TRUE            reduce using rule 180 (parameterModifiers -> VARARG .)
    VAL             reduce using rule 180 (parameterModifiers -> VARARG .)
    VAR             reduce using rule 180 (parameterModifiers -> VARARG .)
    DOUBLE          reduce using rule 180 (parameterModifiers -> VARARG .)
    WHEN            reduce using rule 180 (parameterModifiers -> VARARG .)
    LONG            reduce using rule 180 (parameterModifiers -> VARARG .)
    DOISP           reduce using rule 266 (simpleIdentifier -> VARARG .)
    COMMA           reduce using rule 266 (simpleIdentifier -> VARARG .)
    RPAREN          reduce using rule 266 (simpleIdentifier -> VARARG .)


state 395

    (181) parameterModifiers -> NOINLINE .
    (264) simpleIdentifier -> NOINLINE .

    ID              reduce using rule 181 (parameterModifiers -> NOINLINE .)
    CROSSINLINE     reduce using rule 181 (parameterModifiers -> NOINLINE .)
    IMPORT          reduce using rule 181 (parameterModifiers -> NOINLINE .)
    INIT            reduce using rule 181 (parameterModifiers -> NOINLINE .)
    NOINLINE        reduce using rule 181 (parameterModifiers -> NOINLINE .)
    OUT             reduce using rule 181 (parameterModifiers -> NOINLINE .)
    VARARG          reduce using rule 181 (parameterModifiers -> NOINLINE .)
    WHERE           reduce using rule 181 (parameterModifiers -> NOINLINE .)
    INT             reduce using rule 181 (parameterModifiers -> NOINLINE .)
    FLOAT           reduce using rule 181 (parameterModifiers -> NOINLINE .)
    BOOLEAN         reduce using rule 181 (parameterModifiers -> NOINLINE .)
    STRING          reduce using rule 181 (parameterModifiers -> NOINLINE .)
    ARRAY           reduce using rule 181 (parameterModifiers -> NOINLINE .)
    CHAR            reduce using rule 181 (parameterModifiers -> NOINLINE .)
    OBJECT          reduce using rule 181 (parameterModifiers -> NOINLINE .)
    CONST           reduce using rule 181 (parameterModifiers -> NOINLINE .)
    CONSTRUCTOR     reduce using rule 181 (parameterModifiers -> NOINLINE .)
    EOF             reduce using rule 181 (parameterModifiers -> NOINLINE .)
    FALSE           reduce using rule 181 (parameterModifiers -> NOINLINE .)
    FUNCTION        reduce using rule 181 (parameterModifiers -> NOINLINE .)
    NULL            reduce using rule 181 (parameterModifiers -> NOINLINE .)
    NULLABLE        reduce using rule 181 (parameterModifiers -> NOINLINE .)
    NUMBER          reduce using rule 181 (parameterModifiers -> NOINLINE .)
    OPERATOR        reduce using rule 181 (parameterModifiers -> NOINLINE .)
    SMARTCAST       reduce using rule 181 (parameterModifiers -> NOINLINE .)
    THIS            reduce using rule 181 (parameterModifiers -> NOINLINE .)
    TRUE            reduce using rule 181 (parameterModifiers -> NOINLINE .)
    VAL             reduce using rule 181 (parameterModifiers -> NOINLINE .)
    VAR             reduce using rule 181 (parameterModifiers -> NOINLINE .)
    DOUBLE          reduce using rule 181 (parameterModifiers -> NOINLINE .)
    WHEN            reduce using rule 181 (parameterModifiers -> NOINLINE .)
    LONG            reduce using rule 181 (parameterModifiers -> NOINLINE .)
    DOISP           reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    COMMA           reduce using rule 264 (simpleIdentifier -> NOINLINE .)
    RPAREN          reduce using rule 264 (simpleIdentifier -> NOINLINE .)


state 396

    (182) parameterModifiers -> CROSSINLINE .
    (261) simpleIdentifier -> CROSSINLINE .

    ID              reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    CROSSINLINE     reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    IMPORT          reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    INIT            reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    NOINLINE        reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    OUT             reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    VARARG          reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    WHERE           reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    INT             reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    FLOAT           reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    BOOLEAN         reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    STRING          reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    ARRAY           reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    CHAR            reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    OBJECT          reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    CONST           reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    CONSTRUCTOR     reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    EOF             reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    FALSE           reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    FUNCTION        reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    NULL            reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    NULLABLE        reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    NUMBER          reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    OPERATOR        reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    SMARTCAST       reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    THIS            reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    TRUE            reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    VAL             reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    VAR             reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    DOUBLE          reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    WHEN            reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    LONG            reduce using rule 182 (parameterModifiers -> CROSSINLINE .)
    DOISP           reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    COMMA           reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)
    RPAREN          reduce using rule 261 (simpleIdentifier -> CROSSINLINE .)


state 397

    (193) anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint . functionBody
    (199) anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .
    (10) functionBody -> . block
    (11) functionBody -> . ATRIBUICAO expression
    (67) block -> . LCHAVE statements RCHAVE

  ! shift/reduce conflict for LCHAVE resolved as shift
    INCREMENTO      reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    DECREMENTO      reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    MENOR           reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    LCCT            reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    LPAREN          reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    COLONCOLON      reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    RCHAVE          reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    PONTO           reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    AS              reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    MAISIGUAL       reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    MENOSIGUAL      reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    MULTIGUAL       reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    DIVIGUAL        reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    MODIGUAL        reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    MULT            reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    DIVIDE          reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    MOD             reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    PLUS            reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    MINUS           reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    PONTOPONTO      reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    ID              reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    CROSSINLINE     reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    IMPORT          reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    INIT            reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    NOINLINE        reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    OUT             reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    VARARG          reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    WHERE           reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    INT             reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    FLOAT           reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    BOOLEAN         reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    STRING          reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    ARRAY           reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    CHAR            reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    OBJECT          reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    CONST           reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    CONSTRUCTOR     reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    EOF             reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    FALSE           reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    FUNCTION        reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    NULL            reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    NULLABLE        reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    NUMBER          reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    OPERATOR        reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    SMARTCAST       reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    THIS            reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    TRUE            reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    VAL             reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    VAR             reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    DOUBLE          reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    WHEN            reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    LONG            reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    ELVIS           reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    IN              reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    NOT_IN          reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    IS              reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    NOT_IS          reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    MAIOR           reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    MENORIGUAL      reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    MAIORIGUAL      reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    DIFERENTE       reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    IDENTIDADE      reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    IGUALDADE       reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    SEMIDENTIDADE   reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    AND             reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    OR              reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    FUN             reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    FOR             reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    WHILE           reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    DO              reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    LITERAL_STRING  reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    IF              reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    RETURN          reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    RETURN_AT       reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    CONTINUE        reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    CONTINUE_AT     reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    BREAK           reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    BREAK_AT        reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    NOT             reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    SUSPEND         reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    COMMA           reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    RPAREN          reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    PV              reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    ELSE            reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    RCCT            reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .)
    ATRIBUICAO      shift and go to state 286
    LCHAVE          shift and go to state 49

  ! LCHAVE          [ reduce using rule 199 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint .) ]

    functionBody                   shift and go to state 418
    block                          shift and go to state 285

state 398

    (198) anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .

    INCREMENTO      reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    DECREMENTO      reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    MENOR           reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    LCCT            reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    LPAREN          reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    COLONCOLON      reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    RCHAVE          reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    PONTO           reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    AS              reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    MAISIGUAL       reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    MENOSIGUAL      reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    MULTIGUAL       reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    DIVIGUAL        reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    MODIGUAL        reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    MULT            reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    DIVIDE          reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    MOD             reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    PLUS            reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    MINUS           reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    PONTOPONTO      reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    ID              reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    CROSSINLINE     reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    IMPORT          reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    INIT            reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    NOINLINE        reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    OUT             reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    VARARG          reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    WHERE           reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    INT             reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    FLOAT           reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    BOOLEAN         reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    STRING          reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    ARRAY           reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    CHAR            reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    OBJECT          reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    CONST           reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    CONSTRUCTOR     reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    EOF             reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    FALSE           reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    FUNCTION        reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    NULL            reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    NULLABLE        reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    NUMBER          reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    OPERATOR        reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    SMARTCAST       reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    THIS            reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    TRUE            reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    VAL             reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    VAR             reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    DOUBLE          reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    WHEN            reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    LONG            reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    ELVIS           reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    IN              reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    NOT_IN          reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    IS              reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    NOT_IS          reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    MAIOR           reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    MENORIGUAL      reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    MAIORIGUAL      reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    DIFERENTE       reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    IDENTIDADE      reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    IGUALDADE       reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    SEMIDENTIDADE   reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    AND             reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    OR              reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    FUN             reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    FOR             reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    WHILE           reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    DO              reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    LITERAL_STRING  reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    IF              reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    RETURN          reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    RETURN_AT       reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    CONTINUE        reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    CONTINUE_AT     reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    BREAK           reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    BREAK_AT        reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    NOT             reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    SUSPEND         reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    COMMA           reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    RPAREN          reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    LCHAVE          reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    PV              reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    ELSE            reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)
    RCCT            reduce using rule 198 (anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody .)


state 399

    (209) typeConstraint -> simpleIdentifier DOISP type .

    ATRIBUICAO      reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    LCHAVE          reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    INCREMENTO      reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    DECREMENTO      reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    MENOR           reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    LCCT            reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    LPAREN          reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    COLONCOLON      reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    RCHAVE          reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    PONTO           reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    AS              reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    MAISIGUAL       reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    MENOSIGUAL      reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    MULTIGUAL       reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    DIVIGUAL        reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    MODIGUAL        reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    MULT            reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    DIVIDE          reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    MOD             reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    PLUS            reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    MINUS           reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    PONTOPONTO      reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    ID              reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    CROSSINLINE     reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    IMPORT          reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    INIT            reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    NOINLINE        reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    OUT             reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    VARARG          reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    WHERE           reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    INT             reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    FLOAT           reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    BOOLEAN         reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    STRING          reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    ARRAY           reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    CHAR            reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    OBJECT          reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    CONST           reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    CONSTRUCTOR     reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    EOF             reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    FALSE           reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    FUNCTION        reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    NULL            reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    NULLABLE        reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    NUMBER          reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    OPERATOR        reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    SMARTCAST       reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    THIS            reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    TRUE            reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    VAL             reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    VAR             reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    DOUBLE          reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    WHEN            reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    LONG            reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    ELVIS           reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    IN              reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    NOT_IN          reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    IS              reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    NOT_IS          reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    MAIOR           reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    MENORIGUAL      reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    MAIORIGUAL      reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    DIFERENTE       reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    IDENTIDADE      reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    IGUALDADE       reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    SEMIDENTIDADE   reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    AND             reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    OR              reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    FUN             reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    FOR             reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    WHILE           reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    DO              reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    LITERAL_STRING  reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    IF              reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    RETURN          reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    RETURN_AT       reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    CONTINUE        reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    CONTINUE_AT     reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    BREAK           reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    BREAK_AT        reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    NOT             reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    SUSPEND         reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    COMMA           reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    RPAREN          reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    PV              reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    ELSE            reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)
    RCCT            reduce using rule 209 (typeConstraint -> simpleIdentifier DOISP type .)


state 400

    (175) pwot -> parameterWithOptionalType COMMA pwot . COMMA

    COMMA           shift and go to state 419


state 401

    (25) parameter -> simpleIdentifier DOISP type .
    (177) parameterWithOptionalType -> simpleIdentifier DOISP type .

  ! reduce/reduce conflict for COMMA resolved using rule 25 (parameter -> simpleIdentifier DOISP type .)
  ! reduce/reduce conflict for RPAREN resolved using rule 25 (parameter -> simpleIdentifier DOISP type .)
    RPAREN          reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)
    COMMA           reduce using rule 25 (parameter -> simpleIdentifier DOISP type .)

  ! COMMA           [ reduce using rule 177 (parameterWithOptionalType -> simpleIdentifier DOISP type .) ]
  ! RPAREN          [ reduce using rule 177 (parameterWithOptionalType -> simpleIdentifier DOISP type .) ]


state 402

    (176) parameterWithOptionalType -> parameterModifiers simpleIdentifier DOISP . type
    (26) type -> . typeModifiers optype
    (27) type -> . optype
    (31) typeModifiers -> . typeModifier
    (32) typeModifiers -> . typeModifier typeModifiers
    (28) optype -> . parenthesizedType
    (29) optype -> . functionType
    (30) optype -> . userType
    (33) typeModifier -> . SUSPEND
    (56) parenthesizedType -> . LPAREN type RPAREN
    (44) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (45) functionType -> . functionTypeParameters SETA type
    (37) userType -> . simpleUserType
    (57) receiverType -> . typeModifier rt
    (46) functionTypeParameters -> . functionTypeParameters_p
    (47) functionTypeParameters -> . functionTypeParameters_t
    (38) simpleUserType -> . simpleIdentifier typeArguments
    (39) simpleUserType -> . simpleIdentifier
    (48) functionTypeParameters_p -> . LPAREN parameter ftp RPAREN
    (49) functionTypeParameters_p -> . LPAREN parameter RPAREN
    (50) functionTypeParameters_t -> . LPAREN type RPAREN
    (51) functionTypeParameters_t -> . LPAREN type ftp RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    SUSPEND         shift and go to state 57
    LPAREN          shift and go to state 58
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    simpleIdentifier               shift and go to state 64
    type                           shift and go to state 420
    typeModifiers                  shift and go to state 51
    optype                         shift and go to state 52
    typeModifier                   shift and go to state 53
    parenthesizedType              shift and go to state 54
    functionType                   shift and go to state 55
    userType                       shift and go to state 56
    receiverType                   shift and go to state 59
    functionTypeParameters         shift and go to state 60
    simpleUserType                 shift and go to state 61
    functionTypeParameters_p       shift and go to state 62
    functionTypeParameters_t       shift and go to state 63

state 403

    (138) isuf -> expression COMMA isuf .

    RCCT            reduce using rule 138 (isuf -> expression COMMA isuf .)


state 404

    (72) forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression . RPAREN controlStructureBody
    (73) forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression . RPAREN
    (217) jumpExpression -> expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 421
    INCREMENTO      reduce using rule 217 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 217 (jumpExpression -> expression .)
    MENOR           reduce using rule 217 (jumpExpression -> expression .)
    LCCT            reduce using rule 217 (jumpExpression -> expression .)
    LPAREN          reduce using rule 217 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 217 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 217 (jumpExpression -> expression .)
    PONTO           reduce using rule 217 (jumpExpression -> expression .)
    AS              reduce using rule 217 (jumpExpression -> expression .)
    MULT            reduce using rule 217 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 217 (jumpExpression -> expression .)
    MOD             reduce using rule 217 (jumpExpression -> expression .)
    PLUS            reduce using rule 217 (jumpExpression -> expression .)
    MINUS           reduce using rule 217 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 217 (jumpExpression -> expression .)
    ID              reduce using rule 217 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 217 (jumpExpression -> expression .)
    IMPORT          reduce using rule 217 (jumpExpression -> expression .)
    INIT            reduce using rule 217 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 217 (jumpExpression -> expression .)
    OUT             reduce using rule 217 (jumpExpression -> expression .)
    VARARG          reduce using rule 217 (jumpExpression -> expression .)
    WHERE           reduce using rule 217 (jumpExpression -> expression .)
    INT             reduce using rule 217 (jumpExpression -> expression .)
    FLOAT           reduce using rule 217 (jumpExpression -> expression .)
    BOOLEAN         reduce using rule 217 (jumpExpression -> expression .)
    STRING          reduce using rule 217 (jumpExpression -> expression .)
    ARRAY           reduce using rule 217 (jumpExpression -> expression .)
    CHAR            reduce using rule 217 (jumpExpression -> expression .)
    OBJECT          reduce using rule 217 (jumpExpression -> expression .)
    CONST           reduce using rule 217 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 217 (jumpExpression -> expression .)
    EOF             reduce using rule 217 (jumpExpression -> expression .)
    FALSE           reduce using rule 217 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 217 (jumpExpression -> expression .)
    NULL            reduce using rule 217 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 217 (jumpExpression -> expression .)
    NUMBER          reduce using rule 217 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 217 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 217 (jumpExpression -> expression .)
    THIS            reduce using rule 217 (jumpExpression -> expression .)
    TRUE            reduce using rule 217 (jumpExpression -> expression .)
    VAL             reduce using rule 217 (jumpExpression -> expression .)
    VAR             reduce using rule 217 (jumpExpression -> expression .)
    DOUBLE          reduce using rule 217 (jumpExpression -> expression .)
    WHEN            reduce using rule 217 (jumpExpression -> expression .)
    LONG            reduce using rule 217 (jumpExpression -> expression .)
    ELVIS           reduce using rule 217 (jumpExpression -> expression .)
    IN              reduce using rule 217 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 217 (jumpExpression -> expression .)
    IS              reduce using rule 217 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 217 (jumpExpression -> expression .)
    MAIOR           reduce using rule 217 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 217 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 217 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 217 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 217 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 217 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 217 (jumpExpression -> expression .)
    AND             reduce using rule 217 (jumpExpression -> expression .)
    OR              reduce using rule 217 (jumpExpression -> expression .)

  ! RPAREN          [ reduce using rule 217 (jumpExpression -> expression .) ]


state 405

    (74) forStatement_VD -> FOR LPAREN variableDeclaration IN expression . RPAREN controlStructureBody
    (75) forStatement_VD -> FOR LPAREN variableDeclaration IN expression . RPAREN
    (217) jumpExpression -> expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 422
    INCREMENTO      reduce using rule 217 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 217 (jumpExpression -> expression .)
    MENOR           reduce using rule 217 (jumpExpression -> expression .)
    LCCT            reduce using rule 217 (jumpExpression -> expression .)
    LPAREN          reduce using rule 217 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 217 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 217 (jumpExpression -> expression .)
    PONTO           reduce using rule 217 (jumpExpression -> expression .)
    AS              reduce using rule 217 (jumpExpression -> expression .)
    MULT            reduce using rule 217 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 217 (jumpExpression -> expression .)
    MOD             reduce using rule 217 (jumpExpression -> expression .)
    PLUS            reduce using rule 217 (jumpExpression -> expression .)
    MINUS           reduce using rule 217 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 217 (jumpExpression -> expression .)
    ID              reduce using rule 217 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 217 (jumpExpression -> expression .)
    IMPORT          reduce using rule 217 (jumpExpression -> expression .)
    INIT            reduce using rule 217 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 217 (jumpExpression -> expression .)
    OUT             reduce using rule 217 (jumpExpression -> expression .)
    VARARG          reduce using rule 217 (jumpExpression -> expression .)
    WHERE           reduce using rule 217 (jumpExpression -> expression .)
    INT             reduce using rule 217 (jumpExpression -> expression .)
    FLOAT           reduce using rule 217 (jumpExpression -> expression .)
    BOOLEAN         reduce using rule 217 (jumpExpression -> expression .)
    STRING          reduce using rule 217 (jumpExpression -> expression .)
    ARRAY           reduce using rule 217 (jumpExpression -> expression .)
    CHAR            reduce using rule 217 (jumpExpression -> expression .)
    OBJECT          reduce using rule 217 (jumpExpression -> expression .)
    CONST           reduce using rule 217 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 217 (jumpExpression -> expression .)
    EOF             reduce using rule 217 (jumpExpression -> expression .)
    FALSE           reduce using rule 217 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 217 (jumpExpression -> expression .)
    NULL            reduce using rule 217 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 217 (jumpExpression -> expression .)
    NUMBER          reduce using rule 217 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 217 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 217 (jumpExpression -> expression .)
    THIS            reduce using rule 217 (jumpExpression -> expression .)
    TRUE            reduce using rule 217 (jumpExpression -> expression .)
    VAL             reduce using rule 217 (jumpExpression -> expression .)
    VAR             reduce using rule 217 (jumpExpression -> expression .)
    DOUBLE          reduce using rule 217 (jumpExpression -> expression .)
    WHEN            reduce using rule 217 (jumpExpression -> expression .)
    LONG            reduce using rule 217 (jumpExpression -> expression .)
    ELVIS           reduce using rule 217 (jumpExpression -> expression .)
    IN              reduce using rule 217 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 217 (jumpExpression -> expression .)
    IS              reduce using rule 217 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 217 (jumpExpression -> expression .)
    MAIOR           reduce using rule 217 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 217 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 217 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 217 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 217 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 217 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 217 (jumpExpression -> expression .)
    AND             reduce using rule 217 (jumpExpression -> expression .)
    OR              reduce using rule 217 (jumpExpression -> expression .)

  ! RPAREN          [ reduce using rule 217 (jumpExpression -> expression .) ]


state 406

    (76) whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .

    FUN             reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    FOR             reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    WHILE           reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DO              reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    ID              reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    CROSSINLINE     reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IMPORT          reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    INIT            reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NOINLINE        reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    OUT             reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    VARARG          reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    WHERE           reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    INT             reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    FLOAT           reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    BOOLEAN         reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    STRING          reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    ARRAY           reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    CHAR            reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    OBJECT          reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    CONST           reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    CONSTRUCTOR     reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    EOF             reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    FALSE           reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    FUNCTION        reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NULL            reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NULLABLE        reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NUMBER          reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    OPERATOR        reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    SMARTCAST       reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    THIS            reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    TRUE            reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    VAL             reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    VAR             reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DOUBLE          reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    WHEN            reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    LONG            reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    LPAREN          reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    LITERAL_STRING  reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    COLONCOLON      reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    LCCT            reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IF              reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    RETURN          reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    RETURN_AT       reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    CONTINUE        reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    CONTINUE_AT     reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    BREAK           reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    BREAK_AT        reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    RCHAVE          reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    INCREMENTO      reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DECREMENTO      reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MINUS           reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    PLUS            reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NOT             reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    SUSPEND         reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    LCHAVE          reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    PV              reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    ELSE            reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MENOR           reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    PONTO           reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    AS              reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MAISIGUAL       reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MENOSIGUAL      reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MULTIGUAL       reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DIVIGUAL        reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MODIGUAL        reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MULT            reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DIVIDE          reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MOD             reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    PONTOPONTO      reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    ELVIS           reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IN              reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NOT_IN          reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IS              reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NOT_IS          reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MAIOR           reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MENORIGUAL      reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MAIORIGUAL      reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DIFERENTE       reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IDENTIDADE      reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IGUALDADE       reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    SEMIDENTIDADE   reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    AND             reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    OR              reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    COMMA           reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    RPAREN          reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    RCCT            reduce using rule 76 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)


state 407

    (77) whileStatement -> WHILE LPAREN expression RPAREN PV .

    FUN             reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    FOR             reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    WHILE           reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DO              reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    ID              reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    CROSSINLINE     reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IMPORT          reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    INIT            reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NOINLINE        reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    OUT             reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    VARARG          reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    WHERE           reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    INT             reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    FLOAT           reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    BOOLEAN         reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    STRING          reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    ARRAY           reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    CHAR            reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    OBJECT          reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    CONST           reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    CONSTRUCTOR     reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    EOF             reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    FALSE           reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    FUNCTION        reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NULL            reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NULLABLE        reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NUMBER          reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    OPERATOR        reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    SMARTCAST       reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    THIS            reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    TRUE            reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    VAL             reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    VAR             reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DOUBLE          reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    WHEN            reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    LONG            reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    LPAREN          reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    LITERAL_STRING  reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    COLONCOLON      reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    LCCT            reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IF              reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    RETURN          reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    RETURN_AT       reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    CONTINUE        reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    CONTINUE_AT     reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    BREAK           reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    BREAK_AT        reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    RCHAVE          reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    INCREMENTO      reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DECREMENTO      reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MINUS           reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    PLUS            reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NOT             reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    SUSPEND         reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    LCHAVE          reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    PV              reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    ELSE            reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MENOR           reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    PONTO           reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    AS              reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MAISIGUAL       reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MENOSIGUAL      reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MULTIGUAL       reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DIVIGUAL        reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MODIGUAL        reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MULT            reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DIVIDE          reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MOD             reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    PONTOPONTO      reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    ELVIS           reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IN              reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NOT_IN          reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IS              reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NOT_IS          reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MAIOR           reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MENORIGUAL      reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MAIORIGUAL      reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DIFERENTE       reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IDENTIDADE      reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IGUALDADE       reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    SEMIDENTIDADE   reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    AND             reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    OR              reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    COMMA           reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    RPAREN          reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    RCCT            reduce using rule 77 (whileStatement -> WHILE LPAREN expression RPAREN PV .)


state 408

    (78) doWhileStatement -> DO controlStructureBody WHILE LPAREN expression . RPAREN
    (217) jumpExpression -> expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 423
    INCREMENTO      reduce using rule 217 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 217 (jumpExpression -> expression .)
    MENOR           reduce using rule 217 (jumpExpression -> expression .)
    LCCT            reduce using rule 217 (jumpExpression -> expression .)
    LPAREN          reduce using rule 217 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 217 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 217 (jumpExpression -> expression .)
    PONTO           reduce using rule 217 (jumpExpression -> expression .)
    AS              reduce using rule 217 (jumpExpression -> expression .)
    MULT            reduce using rule 217 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 217 (jumpExpression -> expression .)
    MOD             reduce using rule 217 (jumpExpression -> expression .)
    PLUS            reduce using rule 217 (jumpExpression -> expression .)
    MINUS           reduce using rule 217 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 217 (jumpExpression -> expression .)
    ID              reduce using rule 217 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 217 (jumpExpression -> expression .)
    IMPORT          reduce using rule 217 (jumpExpression -> expression .)
    INIT            reduce using rule 217 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 217 (jumpExpression -> expression .)
    OUT             reduce using rule 217 (jumpExpression -> expression .)
    VARARG          reduce using rule 217 (jumpExpression -> expression .)
    WHERE           reduce using rule 217 (jumpExpression -> expression .)
    INT             reduce using rule 217 (jumpExpression -> expression .)
    FLOAT           reduce using rule 217 (jumpExpression -> expression .)
    BOOLEAN         reduce using rule 217 (jumpExpression -> expression .)
    STRING          reduce using rule 217 (jumpExpression -> expression .)
    ARRAY           reduce using rule 217 (jumpExpression -> expression .)
    CHAR            reduce using rule 217 (jumpExpression -> expression .)
    OBJECT          reduce using rule 217 (jumpExpression -> expression .)
    CONST           reduce using rule 217 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 217 (jumpExpression -> expression .)
    EOF             reduce using rule 217 (jumpExpression -> expression .)
    FALSE           reduce using rule 217 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 217 (jumpExpression -> expression .)
    NULL            reduce using rule 217 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 217 (jumpExpression -> expression .)
    NUMBER          reduce using rule 217 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 217 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 217 (jumpExpression -> expression .)
    THIS            reduce using rule 217 (jumpExpression -> expression .)
    TRUE            reduce using rule 217 (jumpExpression -> expression .)
    VAL             reduce using rule 217 (jumpExpression -> expression .)
    VAR             reduce using rule 217 (jumpExpression -> expression .)
    DOUBLE          reduce using rule 217 (jumpExpression -> expression .)
    WHEN            reduce using rule 217 (jumpExpression -> expression .)
    LONG            reduce using rule 217 (jumpExpression -> expression .)
    ELVIS           reduce using rule 217 (jumpExpression -> expression .)
    IN              reduce using rule 217 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 217 (jumpExpression -> expression .)
    IS              reduce using rule 217 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 217 (jumpExpression -> expression .)
    MAIOR           reduce using rule 217 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 217 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 217 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 217 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 217 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 217 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 217 (jumpExpression -> expression .)
    AND             reduce using rule 217 (jumpExpression -> expression .)
    OR              reduce using rule 217 (jumpExpression -> expression .)

  ! RPAREN          [ reduce using rule 217 (jumpExpression -> expression .) ]


state 409

    (79) doWhileStatement -> DO WHILE LPAREN expression RPAREN .
    (76) whileStatement -> WHILE LPAREN expression RPAREN . controlStructureBody
    (77) whileStatement -> WHILE LPAREN expression RPAREN . PV
    (65) controlStructureBody -> . block
    (66) controlStructureBody -> . statement
    (67) block -> . LCHAVE statements RCHAVE
    (61) statement -> . functionDeclaration
    (62) statement -> . assignment
    (63) statement -> . loopStatement
    (64) statement -> . expression
    (3) functionDeclaration -> . FUN simpleIdentifier functionValueParameters fd2 fd3
    (80) assignment -> . directlyAssignableExpression IGUALDADE expression
    (81) assignment -> . assignableExpression assignmentAndOperator expression
    (68) loopStatement -> . forStatement_MD
    (69) loopStatement -> . forStatement_VD
    (70) loopStatement -> . whileStatement
    (71) loopStatement -> . doWhileStatement
    (82) expression -> . disjunction
    (125) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (126) directlyAssignableExpression -> . simpleIdentifier
    (127) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (129) assignableExpression -> . prefixUnaryExpression
    (130) assignableExpression -> . parenthesizedAssignableExpression
    (72) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (73) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (74) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (75) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (76) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (77) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (78) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (79) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (128) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (131) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (33) typeModifier -> . SUSPEND
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type

  ! shift/reduce conflict for PV resolved as shift
  ! shift/reduce conflict for LCHAVE resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for COLONCOLON resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
    ELSE            reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MENOR           reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    PONTO           reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    AS              reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MAISIGUAL       reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MENOSIGUAL      reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MULTIGUAL       reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    DIVIGUAL        reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MODIGUAL        reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MULT            reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MOD             reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    PONTOPONTO      reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    ELVIS           reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    IN              reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    NOT_IN          reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    IS              reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    NOT_IS          reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MAIOR           reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MENORIGUAL      reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MAIORIGUAL      reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    DIFERENTE       reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    IDENTIDADE      reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    IGUALDADE       reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    SEMIDENTIDADE   reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    AND             reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    OR              reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    COMMA           reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    RPAREN          reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    RCCT            reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    PV              shift and go to state 407
    LCHAVE          shift and go to state 49
    FUN             shift and go to state 77
    FOR             shift and go to state 90
    WHILE           shift and go to state 92
    DO              shift and go to state 93
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    LPAREN          shift and go to state 91
    LITERAL_STRING  shift and go to state 99
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    SUSPEND         shift and go to state 57

  ! FUN             [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! FOR             [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! WHILE           [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! DO              [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! ID              [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! CROSSINLINE     [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! IMPORT          [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! INIT            [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! NOINLINE        [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! OUT             [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! VARARG          [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! WHERE           [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! INT             [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! FLOAT           [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! BOOLEAN         [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! STRING          [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! ARRAY           [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! CHAR            [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! OBJECT          [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! CONST           [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! CONSTRUCTOR     [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! EOF             [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! FALSE           [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! FUNCTION        [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! NULL            [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! NULLABLE        [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! NUMBER          [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! OPERATOR        [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! SMARTCAST       [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! THIS            [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! TRUE            [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! VAL             [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! VAR             [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! DOUBLE          [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! WHEN            [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! LONG            [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! LPAREN          [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! LITERAL_STRING  [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! COLONCOLON      [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! LCCT            [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! IF              [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! RETURN          [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! RETURN_AT       [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! CONTINUE        [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! CONTINUE_AT     [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! BREAK           [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! BREAK_AT        [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! RCHAVE          [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! INCREMENTO      [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! DECREMENTO      [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! MINUS           [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! PLUS            [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! NOT             [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! SUSPEND         [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! LCHAVE          [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! PV              [ reduce using rule 79 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]

    expression                     shift and go to state 76
    controlStructureBody           shift and go to state 406
    block                          shift and go to state 195
    statement                      shift and go to state 196
    functionDeclaration            shift and go to state 73
    assignment                     shift and go to state 74
    loopStatement                  shift and go to state 75
    simpleIdentifier               shift and go to state 78
    directlyAssignableExpression   shift and go to state 79
    assignableExpression           shift and go to state 80
    forStatement_MD                shift and go to state 81
    forStatement_VD                shift and go to state 82
    whileStatement                 shift and go to state 83
    doWhileStatement               shift and go to state 84
    disjunction                    shift and go to state 85
    postfixUnaryExpression         shift and go to state 86
    parenthesizedDirectlyAssignableExpression shift and go to state 87
    prefixUnaryExpression          shift and go to state 88
    parenthesizedAssignableExpression shift and go to state 89
    conjunction                    shift and go to state 94
    primaryExpression              shift and go to state 95
    preue                          shift and go to state 96
    equality                       shift and go to state 97
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    unaryPrefix                    shift and go to state 105
    comparison                     shift and go to state 106
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    infixOperation                 shift and go to state 121
    typeModifier                   shift and go to state 122
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133

state 410

    (155) vas -> valueArgument COMMA vas .

    RPAREN          reduce using rule 155 (vas -> valueArgument COMMA vas .)


state 411

    (156) valueArgument -> simpleIdentifier IGUALDADE MULT . expression
    (82) expression -> . disjunction
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (33) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 99
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    LPAREN          shift and go to state 152
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    FUN             shift and go to state 153
    SUSPEND         shift and go to state 57

    simpleIdentifier               shift and go to state 149
    expression                     shift and go to state 424
    disjunction                    shift and go to state 85
    conjunction                    shift and go to state 94
    equality                       shift and go to state 97
    comparison                     shift and go to state 106
    infixOperation                 shift and go to state 121
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133
    prefixUnaryExpression          shift and go to state 150
    preue                          shift and go to state 96
    postfixUnaryExpression         shift and go to state 151
    unaryPrefix                    shift and go to state 105
    primaryExpression              shift and go to state 95
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    typeModifier                   shift and go to state 122

state 412

    (157) valueArgument -> simpleIdentifier IGUALDADE expression .
    (217) jumpExpression -> expression .

  ! reduce/reduce conflict for COMMA resolved using rule 157 (valueArgument -> simpleIdentifier IGUALDADE expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 157 (valueArgument -> simpleIdentifier IGUALDADE expression .)
    COMMA           reduce using rule 157 (valueArgument -> simpleIdentifier IGUALDADE expression .)
    RPAREN          reduce using rule 157 (valueArgument -> simpleIdentifier IGUALDADE expression .)
    INCREMENTO      reduce using rule 217 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 217 (jumpExpression -> expression .)
    MENOR           reduce using rule 217 (jumpExpression -> expression .)
    LCCT            reduce using rule 217 (jumpExpression -> expression .)
    LPAREN          reduce using rule 217 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 217 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 217 (jumpExpression -> expression .)
    PONTO           reduce using rule 217 (jumpExpression -> expression .)
    AS              reduce using rule 217 (jumpExpression -> expression .)
    MULT            reduce using rule 217 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 217 (jumpExpression -> expression .)
    MOD             reduce using rule 217 (jumpExpression -> expression .)
    PLUS            reduce using rule 217 (jumpExpression -> expression .)
    MINUS           reduce using rule 217 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 217 (jumpExpression -> expression .)
    ID              reduce using rule 217 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 217 (jumpExpression -> expression .)
    IMPORT          reduce using rule 217 (jumpExpression -> expression .)
    INIT            reduce using rule 217 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 217 (jumpExpression -> expression .)
    OUT             reduce using rule 217 (jumpExpression -> expression .)
    VARARG          reduce using rule 217 (jumpExpression -> expression .)
    WHERE           reduce using rule 217 (jumpExpression -> expression .)
    INT             reduce using rule 217 (jumpExpression -> expression .)
    FLOAT           reduce using rule 217 (jumpExpression -> expression .)
    BOOLEAN         reduce using rule 217 (jumpExpression -> expression .)
    STRING          reduce using rule 217 (jumpExpression -> expression .)
    ARRAY           reduce using rule 217 (jumpExpression -> expression .)
    CHAR            reduce using rule 217 (jumpExpression -> expression .)
    OBJECT          reduce using rule 217 (jumpExpression -> expression .)
    CONST           reduce using rule 217 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 217 (jumpExpression -> expression .)
    EOF             reduce using rule 217 (jumpExpression -> expression .)
    FALSE           reduce using rule 217 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 217 (jumpExpression -> expression .)
    NULL            reduce using rule 217 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 217 (jumpExpression -> expression .)
    NUMBER          reduce using rule 217 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 217 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 217 (jumpExpression -> expression .)
    THIS            reduce using rule 217 (jumpExpression -> expression .)
    TRUE            reduce using rule 217 (jumpExpression -> expression .)
    VAL             reduce using rule 217 (jumpExpression -> expression .)
    VAR             reduce using rule 217 (jumpExpression -> expression .)
    DOUBLE          reduce using rule 217 (jumpExpression -> expression .)
    WHEN            reduce using rule 217 (jumpExpression -> expression .)
    LONG            reduce using rule 217 (jumpExpression -> expression .)
    ELVIS           reduce using rule 217 (jumpExpression -> expression .)
    IN              reduce using rule 217 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 217 (jumpExpression -> expression .)
    IS              reduce using rule 217 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 217 (jumpExpression -> expression .)
    MAIOR           reduce using rule 217 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 217 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 217 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 217 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 217 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 217 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 217 (jumpExpression -> expression .)
    AND             reduce using rule 217 (jumpExpression -> expression .)
    OR              reduce using rule 217 (jumpExpression -> expression .)

  ! COMMA           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 217 (jumpExpression -> expression .) ]


state 413

    (210) ifExpression -> IF LPAREN expression RPAREN if1 . if2 ELSE if1 if2
    (213) if2 -> . PV
    (214) if2 -> .

    PV              shift and go to state 426
    ELSE            reduce using rule 214 (if2 -> .)

    if2                            shift and go to state 425

state 414

    (211) if1 -> controlStructureBody .

    PV              reduce using rule 211 (if1 -> controlStructureBody .)
    ELSE            reduce using rule 211 (if1 -> controlStructureBody .)
    FUN             reduce using rule 211 (if1 -> controlStructureBody .)
    FOR             reduce using rule 211 (if1 -> controlStructureBody .)
    WHILE           reduce using rule 211 (if1 -> controlStructureBody .)
    DO              reduce using rule 211 (if1 -> controlStructureBody .)
    ID              reduce using rule 211 (if1 -> controlStructureBody .)
    CROSSINLINE     reduce using rule 211 (if1 -> controlStructureBody .)
    IMPORT          reduce using rule 211 (if1 -> controlStructureBody .)
    INIT            reduce using rule 211 (if1 -> controlStructureBody .)
    NOINLINE        reduce using rule 211 (if1 -> controlStructureBody .)
    OUT             reduce using rule 211 (if1 -> controlStructureBody .)
    VARARG          reduce using rule 211 (if1 -> controlStructureBody .)
    WHERE           reduce using rule 211 (if1 -> controlStructureBody .)
    INT             reduce using rule 211 (if1 -> controlStructureBody .)
    FLOAT           reduce using rule 211 (if1 -> controlStructureBody .)
    BOOLEAN         reduce using rule 211 (if1 -> controlStructureBody .)
    STRING          reduce using rule 211 (if1 -> controlStructureBody .)
    ARRAY           reduce using rule 211 (if1 -> controlStructureBody .)
    CHAR            reduce using rule 211 (if1 -> controlStructureBody .)
    OBJECT          reduce using rule 211 (if1 -> controlStructureBody .)
    CONST           reduce using rule 211 (if1 -> controlStructureBody .)
    CONSTRUCTOR     reduce using rule 211 (if1 -> controlStructureBody .)
    EOF             reduce using rule 211 (if1 -> controlStructureBody .)
    FALSE           reduce using rule 211 (if1 -> controlStructureBody .)
    FUNCTION        reduce using rule 211 (if1 -> controlStructureBody .)
    NULL            reduce using rule 211 (if1 -> controlStructureBody .)
    NULLABLE        reduce using rule 211 (if1 -> controlStructureBody .)
    NUMBER          reduce using rule 211 (if1 -> controlStructureBody .)
    OPERATOR        reduce using rule 211 (if1 -> controlStructureBody .)
    SMARTCAST       reduce using rule 211 (if1 -> controlStructureBody .)
    THIS            reduce using rule 211 (if1 -> controlStructureBody .)
    TRUE            reduce using rule 211 (if1 -> controlStructureBody .)
    VAL             reduce using rule 211 (if1 -> controlStructureBody .)
    VAR             reduce using rule 211 (if1 -> controlStructureBody .)
    DOUBLE          reduce using rule 211 (if1 -> controlStructureBody .)
    WHEN            reduce using rule 211 (if1 -> controlStructureBody .)
    LONG            reduce using rule 211 (if1 -> controlStructureBody .)
    LPAREN          reduce using rule 211 (if1 -> controlStructureBody .)
    LITERAL_STRING  reduce using rule 211 (if1 -> controlStructureBody .)
    COLONCOLON      reduce using rule 211 (if1 -> controlStructureBody .)
    LCCT            reduce using rule 211 (if1 -> controlStructureBody .)
    IF              reduce using rule 211 (if1 -> controlStructureBody .)
    RETURN          reduce using rule 211 (if1 -> controlStructureBody .)
    RETURN_AT       reduce using rule 211 (if1 -> controlStructureBody .)
    CONTINUE        reduce using rule 211 (if1 -> controlStructureBody .)
    CONTINUE_AT     reduce using rule 211 (if1 -> controlStructureBody .)
    BREAK           reduce using rule 211 (if1 -> controlStructureBody .)
    BREAK_AT        reduce using rule 211 (if1 -> controlStructureBody .)
    RCHAVE          reduce using rule 211 (if1 -> controlStructureBody .)
    INCREMENTO      reduce using rule 211 (if1 -> controlStructureBody .)
    DECREMENTO      reduce using rule 211 (if1 -> controlStructureBody .)
    MINUS           reduce using rule 211 (if1 -> controlStructureBody .)
    PLUS            reduce using rule 211 (if1 -> controlStructureBody .)
    NOT             reduce using rule 211 (if1 -> controlStructureBody .)
    SUSPEND         reduce using rule 211 (if1 -> controlStructureBody .)
    LCHAVE          reduce using rule 211 (if1 -> controlStructureBody .)
    MENOR           reduce using rule 211 (if1 -> controlStructureBody .)
    PONTO           reduce using rule 211 (if1 -> controlStructureBody .)
    AS              reduce using rule 211 (if1 -> controlStructureBody .)
    MAISIGUAL       reduce using rule 211 (if1 -> controlStructureBody .)
    MENOSIGUAL      reduce using rule 211 (if1 -> controlStructureBody .)
    MULTIGUAL       reduce using rule 211 (if1 -> controlStructureBody .)
    DIVIGUAL        reduce using rule 211 (if1 -> controlStructureBody .)
    MODIGUAL        reduce using rule 211 (if1 -> controlStructureBody .)
    MULT            reduce using rule 211 (if1 -> controlStructureBody .)
    DIVIDE          reduce using rule 211 (if1 -> controlStructureBody .)
    MOD             reduce using rule 211 (if1 -> controlStructureBody .)
    PONTOPONTO      reduce using rule 211 (if1 -> controlStructureBody .)
    ELVIS           reduce using rule 211 (if1 -> controlStructureBody .)
    IN              reduce using rule 211 (if1 -> controlStructureBody .)
    NOT_IN          reduce using rule 211 (if1 -> controlStructureBody .)
    IS              reduce using rule 211 (if1 -> controlStructureBody .)
    NOT_IS          reduce using rule 211 (if1 -> controlStructureBody .)
    MAIOR           reduce using rule 211 (if1 -> controlStructureBody .)
    MENORIGUAL      reduce using rule 211 (if1 -> controlStructureBody .)
    MAIORIGUAL      reduce using rule 211 (if1 -> controlStructureBody .)
    DIFERENTE       reduce using rule 211 (if1 -> controlStructureBody .)
    IDENTIDADE      reduce using rule 211 (if1 -> controlStructureBody .)
    IGUALDADE       reduce using rule 211 (if1 -> controlStructureBody .)
    SEMIDENTIDADE   reduce using rule 211 (if1 -> controlStructureBody .)
    AND             reduce using rule 211 (if1 -> controlStructureBody .)
    OR              reduce using rule 211 (if1 -> controlStructureBody .)
    COMMA           reduce using rule 211 (if1 -> controlStructureBody .)
    RPAREN          reduce using rule 211 (if1 -> controlStructureBody .)
    RCCT            reduce using rule 211 (if1 -> controlStructureBody .)


state 415

    (192) anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type . typeConstraint functionBody
    (195) anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type . functionBody
    (196) anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type . typeConstraint
    (202) anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .
    (209) typeConstraint -> . simpleIdentifier DOISP type
    (10) functionBody -> . block
    (11) functionBody -> . ATRIBUICAO expression
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (67) block -> . LCHAVE statements RCHAVE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for LCHAVE resolved as shift
    INCREMENTO      reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    DECREMENTO      reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    MENOR           reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    LCCT            reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    LPAREN          reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    COLONCOLON      reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    RCHAVE          reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    PONTO           reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    AS              reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    MAISIGUAL       reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    MENOSIGUAL      reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    MULTIGUAL       reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    DIVIGUAL        reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    MODIGUAL        reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    MULT            reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    DIVIDE          reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    MOD             reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    PLUS            reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    MINUS           reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    PONTOPONTO      reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    ELVIS           reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    IN              reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    NOT_IN          reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    IS              reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    NOT_IS          reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    MAIOR           reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    MENORIGUAL      reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    MAIORIGUAL      reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    DIFERENTE       reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    IDENTIDADE      reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    IGUALDADE       reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    SEMIDENTIDADE   reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    AND             reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    OR              reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    FUN             reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    FOR             reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    WHILE           reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    DO              reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    LITERAL_STRING  reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    IF              reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    RETURN          reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    RETURN_AT       reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    CONTINUE        reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    CONTINUE_AT     reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    BREAK           reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    BREAK_AT        reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    NOT             reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    SUSPEND         reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    COMMA           reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    RPAREN          reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    PV              reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    ELSE            reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    RCCT            reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .)
    ATRIBUICAO      shift and go to state 286
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    LCHAVE          shift and go to state 49

  ! ID              [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! CROSSINLINE     [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! IMPORT          [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! INIT            [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! NOINLINE        [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! OUT             [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! VARARG          [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! WHERE           [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! INT             [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! FLOAT           [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! BOOLEAN         [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! STRING          [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! ARRAY           [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! CHAR            [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! OBJECT          [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! CONST           [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! CONSTRUCTOR     [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! EOF             [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! FALSE           [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! FUNCTION        [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! NULL            [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! NULLABLE        [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! NUMBER          [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! OPERATOR        [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! SMARTCAST       [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! THIS            [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! TRUE            [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! VAL             [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! VAR             [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! DOUBLE          [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! WHEN            [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! LONG            [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]
  ! LCHAVE          [ reduce using rule 202 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type .) ]

    typeConstraint                 shift and go to state 427
    functionBody                   shift and go to state 428
    simpleIdentifier               shift and go to state 284
    block                          shift and go to state 285

state 416

    (194) anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .

    INCREMENTO      reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    DECREMENTO      reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    MENOR           reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    LCCT            reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    LPAREN          reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    COLONCOLON      reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    RCHAVE          reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    PONTO           reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    AS              reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    MAISIGUAL       reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    MENOSIGUAL      reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    MULTIGUAL       reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    DIVIGUAL        reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    MODIGUAL        reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    MULT            reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    DIVIDE          reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    MOD             reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    PLUS            reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    MINUS           reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    PONTOPONTO      reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    ID              reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    CROSSINLINE     reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    IMPORT          reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    INIT            reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    NOINLINE        reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    OUT             reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    VARARG          reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    WHERE           reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    INT             reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    FLOAT           reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    BOOLEAN         reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    STRING          reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    ARRAY           reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    CHAR            reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    OBJECT          reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    CONST           reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    CONSTRUCTOR     reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    EOF             reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    FALSE           reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    FUNCTION        reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    NULL            reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    NULLABLE        reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    NUMBER          reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    OPERATOR        reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    SMARTCAST       reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    THIS            reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    TRUE            reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    VAL             reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    VAR             reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    DOUBLE          reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    WHEN            reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    LONG            reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    ELVIS           reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    IN              reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    NOT_IN          reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    IS              reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    NOT_IS          reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    MAIOR           reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    MENORIGUAL      reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    MAIORIGUAL      reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    DIFERENTE       reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    IDENTIDADE      reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    IGUALDADE       reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    SEMIDENTIDADE   reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    AND             reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    OR              reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    FUN             reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    FOR             reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    WHILE           reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    DO              reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    LITERAL_STRING  reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    IF              reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    RETURN          reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    RETURN_AT       reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    CONTINUE        reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    CONTINUE_AT     reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    BREAK           reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    BREAK_AT        reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    NOT             reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    SUSPEND         reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    COMMA           reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    RPAREN          reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    LCHAVE          reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    PV              reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    ELSE            reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)
    RCCT            reduce using rule 194 (anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody .)


state 417

    (177) parameterWithOptionalType -> simpleIdentifier DOISP . type
    (26) type -> . typeModifiers optype
    (27) type -> . optype
    (31) typeModifiers -> . typeModifier
    (32) typeModifiers -> . typeModifier typeModifiers
    (28) optype -> . parenthesizedType
    (29) optype -> . functionType
    (30) optype -> . userType
    (33) typeModifier -> . SUSPEND
    (56) parenthesizedType -> . LPAREN type RPAREN
    (44) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (45) functionType -> . functionTypeParameters SETA type
    (37) userType -> . simpleUserType
    (57) receiverType -> . typeModifier rt
    (46) functionTypeParameters -> . functionTypeParameters_p
    (47) functionTypeParameters -> . functionTypeParameters_t
    (38) simpleUserType -> . simpleIdentifier typeArguments
    (39) simpleUserType -> . simpleIdentifier
    (48) functionTypeParameters_p -> . LPAREN parameter ftp RPAREN
    (49) functionTypeParameters_p -> . LPAREN parameter RPAREN
    (50) functionTypeParameters_t -> . LPAREN type RPAREN
    (51) functionTypeParameters_t -> . LPAREN type ftp RPAREN
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG

    SUSPEND         shift and go to state 57
    LPAREN          shift and go to state 58
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37

    simpleIdentifier               shift and go to state 64
    type                           shift and go to state 429
    typeModifiers                  shift and go to state 51
    optype                         shift and go to state 52
    typeModifier                   shift and go to state 53
    parenthesizedType              shift and go to state 54
    functionType                   shift and go to state 55
    userType                       shift and go to state 56
    receiverType                   shift and go to state 59
    functionTypeParameters         shift and go to state 60
    simpleUserType                 shift and go to state 61
    functionTypeParameters_p       shift and go to state 62
    functionTypeParameters_t       shift and go to state 63

state 418

    (193) anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .

    INCREMENTO      reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    DECREMENTO      reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    MENOR           reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    LCCT            reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    LPAREN          reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    COLONCOLON      reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    RCHAVE          reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    PONTO           reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    AS              reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    MAISIGUAL       reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    MENOSIGUAL      reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    MULTIGUAL       reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    DIVIGUAL        reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    MODIGUAL        reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    MULT            reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    DIVIDE          reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    MOD             reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    PLUS            reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    MINUS           reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    PONTOPONTO      reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    ID              reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    CROSSINLINE     reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    IMPORT          reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    INIT            reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    NOINLINE        reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    OUT             reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    VARARG          reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    WHERE           reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    INT             reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    FLOAT           reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    BOOLEAN         reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    STRING          reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    ARRAY           reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    CHAR            reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    OBJECT          reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    CONST           reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    CONSTRUCTOR     reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    EOF             reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    FALSE           reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    FUNCTION        reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    NULL            reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    NULLABLE        reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    NUMBER          reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    OPERATOR        reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    SMARTCAST       reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    THIS            reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    TRUE            reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    VAL             reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    VAR             reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    DOUBLE          reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    WHEN            reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    LONG            reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    ELVIS           reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    IN              reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    NOT_IN          reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    IS              reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    NOT_IS          reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    MAIOR           reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    MENORIGUAL      reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    MAIORIGUAL      reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    DIFERENTE       reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    IDENTIDADE      reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    IGUALDADE       reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    SEMIDENTIDADE   reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    AND             reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    OR              reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    FUN             reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    FOR             reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    WHILE           reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    DO              reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    LITERAL_STRING  reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    IF              reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    RETURN          reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    RETURN_AT       reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    CONTINUE        reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    CONTINUE_AT     reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    BREAK           reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    BREAK_AT        reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    NOT             reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    SUSPEND         reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    COMMA           reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    RPAREN          reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    LCHAVE          reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    PV              reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    ELSE            reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)
    RCCT            reduce using rule 193 (anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody .)


state 419

    (175) pwot -> parameterWithOptionalType COMMA pwot COMMA .

    RPAREN          reduce using rule 175 (pwot -> parameterWithOptionalType COMMA pwot COMMA .)
    COMMA           reduce using rule 175 (pwot -> parameterWithOptionalType COMMA pwot COMMA .)


state 420

    (176) parameterWithOptionalType -> parameterModifiers simpleIdentifier DOISP type .

    COMMA           reduce using rule 176 (parameterWithOptionalType -> parameterModifiers simpleIdentifier DOISP type .)
    RPAREN          reduce using rule 176 (parameterWithOptionalType -> parameterModifiers simpleIdentifier DOISP type .)


state 421

    (72) forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN . controlStructureBody
    (73) forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .
    (65) controlStructureBody -> . block
    (66) controlStructureBody -> . statement
    (67) block -> . LCHAVE statements RCHAVE
    (61) statement -> . functionDeclaration
    (62) statement -> . assignment
    (63) statement -> . loopStatement
    (64) statement -> . expression
    (3) functionDeclaration -> . FUN simpleIdentifier functionValueParameters fd2 fd3
    (80) assignment -> . directlyAssignableExpression IGUALDADE expression
    (81) assignment -> . assignableExpression assignmentAndOperator expression
    (68) loopStatement -> . forStatement_MD
    (69) loopStatement -> . forStatement_VD
    (70) loopStatement -> . whileStatement
    (71) loopStatement -> . doWhileStatement
    (82) expression -> . disjunction
    (125) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (126) directlyAssignableExpression -> . simpleIdentifier
    (127) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (129) assignableExpression -> . prefixUnaryExpression
    (130) assignableExpression -> . parenthesizedAssignableExpression
    (72) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (73) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (74) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (75) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (76) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (77) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (78) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (79) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (128) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (131) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (33) typeModifier -> . SUSPEND
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type

  ! shift/reduce conflict for LCHAVE resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for COLONCOLON resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
    PV              reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    ELSE            reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    MENOR           reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    PONTO           reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    AS              reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    MAISIGUAL       reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    MENOSIGUAL      reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    MULTIGUAL       reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    DIVIGUAL        reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    MODIGUAL        reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    MULT            reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    DIVIDE          reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    MOD             reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    PONTOPONTO      reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    ELVIS           reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    IN              reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    NOT_IN          reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    IS              reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    NOT_IS          reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    MAIOR           reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    MENORIGUAL      reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    MAIORIGUAL      reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    DIFERENTE       reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    IDENTIDADE      reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    IGUALDADE       reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    SEMIDENTIDADE   reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    AND             reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    OR              reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    COMMA           reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    RPAREN          reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    RCCT            reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    LCHAVE          shift and go to state 49
    FUN             shift and go to state 77
    FOR             shift and go to state 90
    WHILE           shift and go to state 92
    DO              shift and go to state 93
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    LPAREN          shift and go to state 91
    LITERAL_STRING  shift and go to state 99
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    SUSPEND         shift and go to state 57

  ! FUN             [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! FOR             [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! WHILE           [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! DO              [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! ID              [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! CROSSINLINE     [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! IMPORT          [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! INIT            [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! NOINLINE        [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! OUT             [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! VARARG          [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! WHERE           [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! INT             [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! FLOAT           [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! BOOLEAN         [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! STRING          [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! ARRAY           [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! CHAR            [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! OBJECT          [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! CONST           [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! CONSTRUCTOR     [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! EOF             [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! FALSE           [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! FUNCTION        [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! NULL            [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! NULLABLE        [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! NUMBER          [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! OPERATOR        [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! SMARTCAST       [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! THIS            [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! TRUE            [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! VAL             [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! VAR             [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! DOUBLE          [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! WHEN            [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! LONG            [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! LPAREN          [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! LITERAL_STRING  [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! COLONCOLON      [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! LCCT            [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! IF              [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! RETURN          [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! RETURN_AT       [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! CONTINUE        [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! CONTINUE_AT     [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! BREAK           [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! BREAK_AT        [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! RCHAVE          [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! INCREMENTO      [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! DECREMENTO      [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! MINUS           [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! PLUS            [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! NOT             [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! SUSPEND         [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! LCHAVE          [ reduce using rule 73 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]

    expression                     shift and go to state 76
    controlStructureBody           shift and go to state 430
    block                          shift and go to state 195
    statement                      shift and go to state 196
    functionDeclaration            shift and go to state 73
    assignment                     shift and go to state 74
    loopStatement                  shift and go to state 75
    simpleIdentifier               shift and go to state 78
    directlyAssignableExpression   shift and go to state 79
    assignableExpression           shift and go to state 80
    forStatement_MD                shift and go to state 81
    forStatement_VD                shift and go to state 82
    whileStatement                 shift and go to state 83
    doWhileStatement               shift and go to state 84
    disjunction                    shift and go to state 85
    postfixUnaryExpression         shift and go to state 86
    parenthesizedDirectlyAssignableExpression shift and go to state 87
    prefixUnaryExpression          shift and go to state 88
    parenthesizedAssignableExpression shift and go to state 89
    conjunction                    shift and go to state 94
    primaryExpression              shift and go to state 95
    preue                          shift and go to state 96
    equality                       shift and go to state 97
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    unaryPrefix                    shift and go to state 105
    comparison                     shift and go to state 106
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    infixOperation                 shift and go to state 121
    typeModifier                   shift and go to state 122
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133

state 422

    (74) forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN . controlStructureBody
    (75) forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .
    (65) controlStructureBody -> . block
    (66) controlStructureBody -> . statement
    (67) block -> . LCHAVE statements RCHAVE
    (61) statement -> . functionDeclaration
    (62) statement -> . assignment
    (63) statement -> . loopStatement
    (64) statement -> . expression
    (3) functionDeclaration -> . FUN simpleIdentifier functionValueParameters fd2 fd3
    (80) assignment -> . directlyAssignableExpression IGUALDADE expression
    (81) assignment -> . assignableExpression assignmentAndOperator expression
    (68) loopStatement -> . forStatement_MD
    (69) loopStatement -> . forStatement_VD
    (70) loopStatement -> . whileStatement
    (71) loopStatement -> . doWhileStatement
    (82) expression -> . disjunction
    (125) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (126) directlyAssignableExpression -> . simpleIdentifier
    (127) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (129) assignableExpression -> . prefixUnaryExpression
    (130) assignableExpression -> . parenthesizedAssignableExpression
    (72) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (73) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (74) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (75) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (76) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (77) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (78) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (79) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (128) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (131) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (33) typeModifier -> . SUSPEND
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type

  ! shift/reduce conflict for LCHAVE resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for COLONCOLON resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
    PV              reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    ELSE            reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    MENOR           reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    PONTO           reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    AS              reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    MAISIGUAL       reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    MENOSIGUAL      reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    MULTIGUAL       reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    DIVIGUAL        reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    MODIGUAL        reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    MULT            reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    DIVIDE          reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    MOD             reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    PONTOPONTO      reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    ELVIS           reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    IN              reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    NOT_IN          reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    IS              reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    NOT_IS          reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    MAIOR           reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    MENORIGUAL      reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    MAIORIGUAL      reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    DIFERENTE       reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    IDENTIDADE      reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    IGUALDADE       reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    SEMIDENTIDADE   reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    AND             reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    OR              reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    COMMA           reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    RPAREN          reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    RCCT            reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    LCHAVE          shift and go to state 49
    FUN             shift and go to state 77
    FOR             shift and go to state 90
    WHILE           shift and go to state 92
    DO              shift and go to state 93
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    LPAREN          shift and go to state 91
    LITERAL_STRING  shift and go to state 99
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    SUSPEND         shift and go to state 57

  ! FUN             [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! FOR             [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! WHILE           [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! DO              [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! ID              [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! CROSSINLINE     [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! IMPORT          [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! INIT            [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! NOINLINE        [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! OUT             [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! VARARG          [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! WHERE           [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! INT             [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! FLOAT           [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! BOOLEAN         [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! STRING          [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! ARRAY           [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! CHAR            [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! OBJECT          [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! CONST           [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! CONSTRUCTOR     [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! EOF             [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! FALSE           [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! FUNCTION        [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! NULL            [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! NULLABLE        [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! NUMBER          [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! OPERATOR        [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! SMARTCAST       [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! THIS            [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! TRUE            [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! VAL             [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! VAR             [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! DOUBLE          [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! WHEN            [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! LONG            [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! LPAREN          [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! LITERAL_STRING  [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! COLONCOLON      [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! LCCT            [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! IF              [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! RETURN          [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! RETURN_AT       [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! CONTINUE        [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! CONTINUE_AT     [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! BREAK           [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! BREAK_AT        [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! RCHAVE          [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! INCREMENTO      [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! DECREMENTO      [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! MINUS           [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! PLUS            [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! NOT             [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! SUSPEND         [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! LCHAVE          [ reduce using rule 75 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]

    expression                     shift and go to state 76
    controlStructureBody           shift and go to state 431
    block                          shift and go to state 195
    statement                      shift and go to state 196
    functionDeclaration            shift and go to state 73
    assignment                     shift and go to state 74
    loopStatement                  shift and go to state 75
    simpleIdentifier               shift and go to state 78
    directlyAssignableExpression   shift and go to state 79
    assignableExpression           shift and go to state 80
    forStatement_MD                shift and go to state 81
    forStatement_VD                shift and go to state 82
    whileStatement                 shift and go to state 83
    doWhileStatement               shift and go to state 84
    disjunction                    shift and go to state 85
    postfixUnaryExpression         shift and go to state 86
    parenthesizedDirectlyAssignableExpression shift and go to state 87
    prefixUnaryExpression          shift and go to state 88
    parenthesizedAssignableExpression shift and go to state 89
    conjunction                    shift and go to state 94
    primaryExpression              shift and go to state 95
    preue                          shift and go to state 96
    equality                       shift and go to state 97
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    unaryPrefix                    shift and go to state 105
    comparison                     shift and go to state 106
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    infixOperation                 shift and go to state 121
    typeModifier                   shift and go to state 122
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133

state 423

    (78) doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .

    FUN             reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    FOR             reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    WHILE           reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DO              reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    ID              reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    CROSSINLINE     reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IMPORT          reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    INIT            reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NOINLINE        reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    OUT             reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    VARARG          reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    WHERE           reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    INT             reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    FLOAT           reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    BOOLEAN         reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    STRING          reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    ARRAY           reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    CHAR            reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    OBJECT          reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    CONST           reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    CONSTRUCTOR     reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    EOF             reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    FALSE           reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NULL            reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NULLABLE        reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NUMBER          reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    OPERATOR        reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    SMARTCAST       reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    THIS            reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    TRUE            reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    VAL             reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    VAR             reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DOUBLE          reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    WHEN            reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    LONG            reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    LPAREN          reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    LITERAL_STRING  reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    COLONCOLON      reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    LCCT            reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IF              reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    RETURN          reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    RETURN_AT       reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    CONTINUE_AT     reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    BREAK           reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    BREAK_AT        reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    RCHAVE          reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    INCREMENTO      reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DECREMENTO      reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MINUS           reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    PLUS            reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NOT             reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    SUSPEND         reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    LCHAVE          reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    PV              reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    ELSE            reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MENOR           reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    PONTO           reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    AS              reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MAISIGUAL       reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MENOSIGUAL      reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MULTIGUAL       reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DIVIGUAL        reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MODIGUAL        reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MULT            reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MOD             reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    PONTOPONTO      reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    ELVIS           reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IN              reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NOT_IN          reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IS              reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NOT_IS          reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MAIOR           reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MENORIGUAL      reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MAIORIGUAL      reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DIFERENTE       reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IDENTIDADE      reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IGUALDADE       reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    SEMIDENTIDADE   reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    AND             reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    OR              reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    COMMA           reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    RPAREN          reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    RCCT            reduce using rule 78 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)


state 424

    (156) valueArgument -> simpleIdentifier IGUALDADE MULT expression .
    (217) jumpExpression -> expression .

  ! reduce/reduce conflict for COMMA resolved using rule 156 (valueArgument -> simpleIdentifier IGUALDADE MULT expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 156 (valueArgument -> simpleIdentifier IGUALDADE MULT expression .)
    COMMA           reduce using rule 156 (valueArgument -> simpleIdentifier IGUALDADE MULT expression .)
    RPAREN          reduce using rule 156 (valueArgument -> simpleIdentifier IGUALDADE MULT expression .)
    INCREMENTO      reduce using rule 217 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 217 (jumpExpression -> expression .)
    MENOR           reduce using rule 217 (jumpExpression -> expression .)
    LCCT            reduce using rule 217 (jumpExpression -> expression .)
    LPAREN          reduce using rule 217 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 217 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 217 (jumpExpression -> expression .)
    PONTO           reduce using rule 217 (jumpExpression -> expression .)
    AS              reduce using rule 217 (jumpExpression -> expression .)
    MULT            reduce using rule 217 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 217 (jumpExpression -> expression .)
    MOD             reduce using rule 217 (jumpExpression -> expression .)
    PLUS            reduce using rule 217 (jumpExpression -> expression .)
    MINUS           reduce using rule 217 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 217 (jumpExpression -> expression .)
    ID              reduce using rule 217 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 217 (jumpExpression -> expression .)
    IMPORT          reduce using rule 217 (jumpExpression -> expression .)
    INIT            reduce using rule 217 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 217 (jumpExpression -> expression .)
    OUT             reduce using rule 217 (jumpExpression -> expression .)
    VARARG          reduce using rule 217 (jumpExpression -> expression .)
    WHERE           reduce using rule 217 (jumpExpression -> expression .)
    INT             reduce using rule 217 (jumpExpression -> expression .)
    FLOAT           reduce using rule 217 (jumpExpression -> expression .)
    BOOLEAN         reduce using rule 217 (jumpExpression -> expression .)
    STRING          reduce using rule 217 (jumpExpression -> expression .)
    ARRAY           reduce using rule 217 (jumpExpression -> expression .)
    CHAR            reduce using rule 217 (jumpExpression -> expression .)
    OBJECT          reduce using rule 217 (jumpExpression -> expression .)
    CONST           reduce using rule 217 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 217 (jumpExpression -> expression .)
    EOF             reduce using rule 217 (jumpExpression -> expression .)
    FALSE           reduce using rule 217 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 217 (jumpExpression -> expression .)
    NULL            reduce using rule 217 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 217 (jumpExpression -> expression .)
    NUMBER          reduce using rule 217 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 217 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 217 (jumpExpression -> expression .)
    THIS            reduce using rule 217 (jumpExpression -> expression .)
    TRUE            reduce using rule 217 (jumpExpression -> expression .)
    VAL             reduce using rule 217 (jumpExpression -> expression .)
    VAR             reduce using rule 217 (jumpExpression -> expression .)
    DOUBLE          reduce using rule 217 (jumpExpression -> expression .)
    WHEN            reduce using rule 217 (jumpExpression -> expression .)
    LONG            reduce using rule 217 (jumpExpression -> expression .)
    ELVIS           reduce using rule 217 (jumpExpression -> expression .)
    IN              reduce using rule 217 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 217 (jumpExpression -> expression .)
    IS              reduce using rule 217 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 217 (jumpExpression -> expression .)
    MAIOR           reduce using rule 217 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 217 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 217 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 217 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 217 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 217 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 217 (jumpExpression -> expression .)
    AND             reduce using rule 217 (jumpExpression -> expression .)
    OR              reduce using rule 217 (jumpExpression -> expression .)

  ! COMMA           [ reduce using rule 217 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 217 (jumpExpression -> expression .) ]


state 425

    (210) ifExpression -> IF LPAREN expression RPAREN if1 if2 . ELSE if1 if2

    ELSE            shift and go to state 432


state 426

    (213) if2 -> PV .

    ELSE            reduce using rule 213 (if2 -> PV .)
    INCREMENTO      reduce using rule 213 (if2 -> PV .)
    DECREMENTO      reduce using rule 213 (if2 -> PV .)
    MENOR           reduce using rule 213 (if2 -> PV .)
    LCCT            reduce using rule 213 (if2 -> PV .)
    LPAREN          reduce using rule 213 (if2 -> PV .)
    COLONCOLON      reduce using rule 213 (if2 -> PV .)
    RCHAVE          reduce using rule 213 (if2 -> PV .)
    PONTO           reduce using rule 213 (if2 -> PV .)
    AS              reduce using rule 213 (if2 -> PV .)
    MAISIGUAL       reduce using rule 213 (if2 -> PV .)
    MENOSIGUAL      reduce using rule 213 (if2 -> PV .)
    MULTIGUAL       reduce using rule 213 (if2 -> PV .)
    DIVIGUAL        reduce using rule 213 (if2 -> PV .)
    MODIGUAL        reduce using rule 213 (if2 -> PV .)
    MULT            reduce using rule 213 (if2 -> PV .)
    DIVIDE          reduce using rule 213 (if2 -> PV .)
    MOD             reduce using rule 213 (if2 -> PV .)
    PLUS            reduce using rule 213 (if2 -> PV .)
    MINUS           reduce using rule 213 (if2 -> PV .)
    PONTOPONTO      reduce using rule 213 (if2 -> PV .)
    ID              reduce using rule 213 (if2 -> PV .)
    CROSSINLINE     reduce using rule 213 (if2 -> PV .)
    IMPORT          reduce using rule 213 (if2 -> PV .)
    INIT            reduce using rule 213 (if2 -> PV .)
    NOINLINE        reduce using rule 213 (if2 -> PV .)
    OUT             reduce using rule 213 (if2 -> PV .)
    VARARG          reduce using rule 213 (if2 -> PV .)
    WHERE           reduce using rule 213 (if2 -> PV .)
    INT             reduce using rule 213 (if2 -> PV .)
    FLOAT           reduce using rule 213 (if2 -> PV .)
    BOOLEAN         reduce using rule 213 (if2 -> PV .)
    STRING          reduce using rule 213 (if2 -> PV .)
    ARRAY           reduce using rule 213 (if2 -> PV .)
    CHAR            reduce using rule 213 (if2 -> PV .)
    OBJECT          reduce using rule 213 (if2 -> PV .)
    CONST           reduce using rule 213 (if2 -> PV .)
    CONSTRUCTOR     reduce using rule 213 (if2 -> PV .)
    EOF             reduce using rule 213 (if2 -> PV .)
    FALSE           reduce using rule 213 (if2 -> PV .)
    FUNCTION        reduce using rule 213 (if2 -> PV .)
    NULL            reduce using rule 213 (if2 -> PV .)
    NULLABLE        reduce using rule 213 (if2 -> PV .)
    NUMBER          reduce using rule 213 (if2 -> PV .)
    OPERATOR        reduce using rule 213 (if2 -> PV .)
    SMARTCAST       reduce using rule 213 (if2 -> PV .)
    THIS            reduce using rule 213 (if2 -> PV .)
    TRUE            reduce using rule 213 (if2 -> PV .)
    VAL             reduce using rule 213 (if2 -> PV .)
    VAR             reduce using rule 213 (if2 -> PV .)
    DOUBLE          reduce using rule 213 (if2 -> PV .)
    WHEN            reduce using rule 213 (if2 -> PV .)
    LONG            reduce using rule 213 (if2 -> PV .)
    ELVIS           reduce using rule 213 (if2 -> PV .)
    IN              reduce using rule 213 (if2 -> PV .)
    NOT_IN          reduce using rule 213 (if2 -> PV .)
    IS              reduce using rule 213 (if2 -> PV .)
    NOT_IS          reduce using rule 213 (if2 -> PV .)
    MAIOR           reduce using rule 213 (if2 -> PV .)
    MENORIGUAL      reduce using rule 213 (if2 -> PV .)
    MAIORIGUAL      reduce using rule 213 (if2 -> PV .)
    DIFERENTE       reduce using rule 213 (if2 -> PV .)
    IDENTIDADE      reduce using rule 213 (if2 -> PV .)
    IGUALDADE       reduce using rule 213 (if2 -> PV .)
    SEMIDENTIDADE   reduce using rule 213 (if2 -> PV .)
    AND             reduce using rule 213 (if2 -> PV .)
    OR              reduce using rule 213 (if2 -> PV .)
    FUN             reduce using rule 213 (if2 -> PV .)
    FOR             reduce using rule 213 (if2 -> PV .)
    WHILE           reduce using rule 213 (if2 -> PV .)
    DO              reduce using rule 213 (if2 -> PV .)
    LITERAL_STRING  reduce using rule 213 (if2 -> PV .)
    IF              reduce using rule 213 (if2 -> PV .)
    RETURN          reduce using rule 213 (if2 -> PV .)
    RETURN_AT       reduce using rule 213 (if2 -> PV .)
    CONTINUE        reduce using rule 213 (if2 -> PV .)
    CONTINUE_AT     reduce using rule 213 (if2 -> PV .)
    BREAK           reduce using rule 213 (if2 -> PV .)
    BREAK_AT        reduce using rule 213 (if2 -> PV .)
    NOT             reduce using rule 213 (if2 -> PV .)
    SUSPEND         reduce using rule 213 (if2 -> PV .)
    COMMA           reduce using rule 213 (if2 -> PV .)
    RPAREN          reduce using rule 213 (if2 -> PV .)
    LCHAVE          reduce using rule 213 (if2 -> PV .)
    PV              reduce using rule 213 (if2 -> PV .)
    RCCT            reduce using rule 213 (if2 -> PV .)


state 427

    (192) anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint . functionBody
    (196) anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .
    (10) functionBody -> . block
    (11) functionBody -> . ATRIBUICAO expression
    (67) block -> . LCHAVE statements RCHAVE

  ! shift/reduce conflict for LCHAVE resolved as shift
    INCREMENTO      reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    DECREMENTO      reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    MENOR           reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    LCCT            reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    LPAREN          reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    COLONCOLON      reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    RCHAVE          reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    PONTO           reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    AS              reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    MAISIGUAL       reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    MENOSIGUAL      reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    MULTIGUAL       reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    DIVIGUAL        reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    MODIGUAL        reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    MULT            reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    DIVIDE          reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    MOD             reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    PLUS            reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    MINUS           reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    PONTOPONTO      reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    ID              reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    CROSSINLINE     reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    IMPORT          reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    INIT            reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    NOINLINE        reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    OUT             reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    VARARG          reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    WHERE           reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    INT             reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    FLOAT           reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    BOOLEAN         reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    STRING          reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    ARRAY           reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    CHAR            reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    OBJECT          reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    CONST           reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    CONSTRUCTOR     reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    EOF             reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    FALSE           reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    FUNCTION        reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    NULL            reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    NULLABLE        reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    NUMBER          reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    OPERATOR        reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    SMARTCAST       reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    THIS            reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    TRUE            reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    VAL             reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    VAR             reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    DOUBLE          reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    WHEN            reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    LONG            reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    ELVIS           reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    IN              reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    NOT_IN          reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    IS              reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    NOT_IS          reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    MAIOR           reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    MENORIGUAL      reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    MAIORIGUAL      reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    DIFERENTE       reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    IDENTIDADE      reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    IGUALDADE       reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    SEMIDENTIDADE   reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    AND             reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    OR              reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    FUN             reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    FOR             reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    WHILE           reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    DO              reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    LITERAL_STRING  reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    IF              reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    RETURN          reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    RETURN_AT       reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    CONTINUE        reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    CONTINUE_AT     reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    BREAK           reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    BREAK_AT        reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    NOT             reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    SUSPEND         reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    COMMA           reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    RPAREN          reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    PV              reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    ELSE            reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    RCCT            reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .)
    ATRIBUICAO      shift and go to state 286
    LCHAVE          shift and go to state 49

  ! LCHAVE          [ reduce using rule 196 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint .) ]

    functionBody                   shift and go to state 433
    block                          shift and go to state 285

state 428

    (195) anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .

    INCREMENTO      reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    DECREMENTO      reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    MENOR           reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    LCCT            reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    LPAREN          reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    COLONCOLON      reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    RCHAVE          reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    PONTO           reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    AS              reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    MAISIGUAL       reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    MENOSIGUAL      reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    MULTIGUAL       reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    DIVIGUAL        reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    MODIGUAL        reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    MULT            reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    DIVIDE          reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    MOD             reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    PLUS            reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    MINUS           reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    PONTOPONTO      reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    ID              reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    CROSSINLINE     reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    IMPORT          reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    INIT            reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    NOINLINE        reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    OUT             reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    VARARG          reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    WHERE           reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    INT             reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    FLOAT           reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    BOOLEAN         reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    STRING          reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    ARRAY           reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    CHAR            reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    OBJECT          reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    CONST           reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    CONSTRUCTOR     reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    EOF             reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    FALSE           reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    FUNCTION        reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    NULL            reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    NULLABLE        reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    NUMBER          reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    OPERATOR        reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    SMARTCAST       reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    THIS            reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    TRUE            reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    VAL             reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    VAR             reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    DOUBLE          reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    WHEN            reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    LONG            reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    ELVIS           reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    IN              reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    NOT_IN          reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    IS              reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    NOT_IS          reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    MAIOR           reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    MENORIGUAL      reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    MAIORIGUAL      reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    DIFERENTE       reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    IDENTIDADE      reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    IGUALDADE       reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    SEMIDENTIDADE   reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    AND             reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    OR              reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    FUN             reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    FOR             reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    WHILE           reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    DO              reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    LITERAL_STRING  reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    IF              reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    RETURN          reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    RETURN_AT       reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    CONTINUE        reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    CONTINUE_AT     reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    BREAK           reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    BREAK_AT        reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    NOT             reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    SUSPEND         reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    COMMA           reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    RPAREN          reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    LCHAVE          reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    PV              reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    ELSE            reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)
    RCCT            reduce using rule 195 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody .)


state 429

    (177) parameterWithOptionalType -> simpleIdentifier DOISP type .

    COMMA           reduce using rule 177 (parameterWithOptionalType -> simpleIdentifier DOISP type .)
    RPAREN          reduce using rule 177 (parameterWithOptionalType -> simpleIdentifier DOISP type .)


state 430

    (72) forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .

    FUN             reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    FOR             reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    WHILE           reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    DO              reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    ID              reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    CROSSINLINE     reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    IMPORT          reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    INIT            reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    NOINLINE        reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    OUT             reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    VARARG          reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    WHERE           reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    INT             reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    FLOAT           reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    BOOLEAN         reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    STRING          reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    ARRAY           reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    CHAR            reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    OBJECT          reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    CONST           reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    CONSTRUCTOR     reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    EOF             reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    FALSE           reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    FUNCTION        reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    NULL            reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    NULLABLE        reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    NUMBER          reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    OPERATOR        reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    SMARTCAST       reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    THIS            reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    TRUE            reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    VAL             reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    VAR             reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    DOUBLE          reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    WHEN            reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    LONG            reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    LPAREN          reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    LITERAL_STRING  reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    COLONCOLON      reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    LCCT            reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    IF              reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    RETURN          reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    RETURN_AT       reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    CONTINUE        reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    CONTINUE_AT     reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    BREAK           reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    BREAK_AT        reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    RCHAVE          reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    INCREMENTO      reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    DECREMENTO      reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    MINUS           reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    PLUS            reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    NOT             reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    SUSPEND         reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    LCHAVE          reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    PV              reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    ELSE            reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    MENOR           reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    PONTO           reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    AS              reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    MAISIGUAL       reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    MENOSIGUAL      reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    MULTIGUAL       reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    DIVIGUAL        reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    MODIGUAL        reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    MULT            reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    DIVIDE          reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    MOD             reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    PONTOPONTO      reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    ELVIS           reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    IN              reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    NOT_IN          reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    IS              reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    NOT_IS          reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    MAIOR           reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    MENORIGUAL      reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    MAIORIGUAL      reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    DIFERENTE       reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    IDENTIDADE      reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    IGUALDADE       reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    SEMIDENTIDADE   reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    AND             reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    OR              reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    COMMA           reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    RPAREN          reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    RCCT            reduce using rule 72 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)


state 431

    (74) forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .

    FUN             reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    FOR             reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    WHILE           reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    DO              reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    ID              reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    CROSSINLINE     reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    IMPORT          reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    INIT            reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    NOINLINE        reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    OUT             reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    VARARG          reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    WHERE           reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    INT             reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    FLOAT           reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    BOOLEAN         reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    STRING          reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    ARRAY           reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    CHAR            reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    OBJECT          reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    CONST           reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    CONSTRUCTOR     reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    EOF             reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    FALSE           reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    FUNCTION        reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    NULL            reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    NULLABLE        reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    NUMBER          reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    OPERATOR        reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    SMARTCAST       reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    THIS            reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    TRUE            reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    VAL             reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    VAR             reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    DOUBLE          reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    WHEN            reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    LONG            reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    LPAREN          reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    LITERAL_STRING  reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    COLONCOLON      reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    LCCT            reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    IF              reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    RETURN          reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    RETURN_AT       reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    CONTINUE        reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    CONTINUE_AT     reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    BREAK           reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    BREAK_AT        reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    RCHAVE          reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    INCREMENTO      reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    DECREMENTO      reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    MINUS           reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    PLUS            reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    NOT             reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    SUSPEND         reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    LCHAVE          reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    PV              reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    ELSE            reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    MENOR           reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    PONTO           reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    AS              reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    MAISIGUAL       reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    MENOSIGUAL      reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    MULTIGUAL       reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    DIVIGUAL        reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    MODIGUAL        reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    MULT            reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    DIVIDE          reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    MOD             reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    PONTOPONTO      reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    ELVIS           reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    IN              reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    NOT_IN          reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    IS              reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    NOT_IS          reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    MAIOR           reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    MENORIGUAL      reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    MAIORIGUAL      reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    DIFERENTE       reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    IDENTIDADE      reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    IGUALDADE       reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    SEMIDENTIDADE   reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    AND             reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    OR              reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    COMMA           reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    RPAREN          reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    RCCT            reduce using rule 74 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)


state 432

    (210) ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE . if1 if2
    (211) if1 -> . controlStructureBody
    (212) if1 -> .
    (65) controlStructureBody -> . block
    (66) controlStructureBody -> . statement
    (67) block -> . LCHAVE statements RCHAVE
    (61) statement -> . functionDeclaration
    (62) statement -> . assignment
    (63) statement -> . loopStatement
    (64) statement -> . expression
    (3) functionDeclaration -> . FUN simpleIdentifier functionValueParameters fd2 fd3
    (80) assignment -> . directlyAssignableExpression IGUALDADE expression
    (81) assignment -> . assignableExpression assignmentAndOperator expression
    (68) loopStatement -> . forStatement_MD
    (69) loopStatement -> . forStatement_VD
    (70) loopStatement -> . whileStatement
    (71) loopStatement -> . doWhileStatement
    (82) expression -> . disjunction
    (125) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (126) directlyAssignableExpression -> . simpleIdentifier
    (127) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (129) assignableExpression -> . prefixUnaryExpression
    (130) assignableExpression -> . parenthesizedAssignableExpression
    (72) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (73) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (74) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (75) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (76) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (77) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (78) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (79) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (83) disjunction -> . conjunction
    (84) disjunction -> . conjunction OR disjunction
    (116) postfixUnaryExpression -> . primaryExpression
    (117) postfixUnaryExpression -> . primaryExpression posue
    (260) simpleIdentifier -> . ID
    (261) simpleIdentifier -> . CROSSINLINE
    (262) simpleIdentifier -> . IMPORT
    (263) simpleIdentifier -> . INIT
    (264) simpleIdentifier -> . NOINLINE
    (265) simpleIdentifier -> . OUT
    (266) simpleIdentifier -> . VARARG
    (267) simpleIdentifier -> . WHERE
    (268) simpleIdentifier -> . INT
    (269) simpleIdentifier -> . FLOAT
    (270) simpleIdentifier -> . BOOLEAN
    (271) simpleIdentifier -> . STRING
    (272) simpleIdentifier -> . ARRAY
    (273) simpleIdentifier -> . CHAR
    (274) simpleIdentifier -> . OBJECT
    (275) simpleIdentifier -> . CONST
    (276) simpleIdentifier -> . CONSTRUCTOR
    (277) simpleIdentifier -> . EOF
    (278) simpleIdentifier -> . FALSE
    (279) simpleIdentifier -> . FUNCTION
    (280) simpleIdentifier -> . NULL
    (281) simpleIdentifier -> . NULLABLE
    (282) simpleIdentifier -> . NUMBER
    (283) simpleIdentifier -> . OPERATOR
    (284) simpleIdentifier -> . SMARTCAST
    (285) simpleIdentifier -> . THIS
    (286) simpleIdentifier -> . TRUE
    (287) simpleIdentifier -> . VAL
    (288) simpleIdentifier -> . VAR
    (289) simpleIdentifier -> . DOUBLE
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (128) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (109) prefixUnaryExpression -> . preue postfixUnaryExpression
    (110) prefixUnaryExpression -> . postfixUnaryExpression
    (131) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (85) conjunction -> . equality
    (86) conjunction -> . equality AND conjunction
    (159) primaryExpression -> . parenthesizedExpression
    (160) primaryExpression -> . simpleIdentifier
    (161) primaryExpression -> . LITERAL_STRING
    (162) primaryExpression -> . callableReference
    (163) primaryExpression -> . functionLiteral
    (164) primaryExpression -> . collectionLiteral
    (165) primaryExpression -> . ifExpression
    (166) primaryExpression -> . jumpExpression
    (111) preue -> . unaryPrefix
    (112) preue -> . unaryPrefix preue
    (87) equality -> . comparison
    (88) equality -> . comparison equalityOperator equality
    (167) parenthesizedExpression -> . LPAREN expression RPAREN
    (222) callableReference -> . receiverType COLONCOLON simpleIdentifier
    (223) callableReference -> . COLONCOLON simpleIdentifier
    (224) callableReference -> . receiverType COLONCOLON CLASS
    (225) callableReference -> . COLONCOLON CLASS
    (207) functionLiteral -> . lambdaLiteral
    (208) functionLiteral -> . anonymousFunction
    (168) collectionLiteral -> . LCCT cl RCCT
    (169) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
    (215) jumpExpression -> . RETURN expression
    (216) jumpExpression -> . RETURN_AT expression
    (217) jumpExpression -> . expression
    (218) jumpExpression -> . CONTINUE
    (219) jumpExpression -> . CONTINUE_AT
    (220) jumpExpression -> . BREAK
    (221) jumpExpression -> . BREAK_AT
    (113) unaryPrefix -> . label
    (114) unaryPrefix -> . prefixUnaryOperator
    (89) comparison -> . infixOperation
    (90) comparison -> . infixOperation comparisonOperator infixOperation
    (57) receiverType -> . typeModifier rt
    (183) lambdaLiteral -> . RCHAVE ll LCHAVE
    (192) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
    (193) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint functionBody
    (194) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint functionBody
    (195) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type functionBody
    (196) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
    (197) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint functionBody
    (198) anonymousFunction -> . FUN parametersWithOptionalType DOISP type functionBody
    (199) anonymousFunction -> . FUN parametersWithOptionalType DOISP type typeConstraint
    (200) anonymousFunction -> . FUN type PONTO parametersWithOptionalType functionBody
    (201) anonymousFunction -> . FUN type PONTO parametersWithOptionalType typeConstraint
    (202) anonymousFunction -> . FUN type PONTO parametersWithOptionalType DOISP type
    (203) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraint
    (205) anonymousFunction -> . FUN type PONTO parametersWithOptionalType
    (206) anonymousFunction -> . FUN parametersWithOptionalType
    (115) label -> . simpleIdentifier
    (250) prefixUnaryOperator -> . INCREMENTO
    (251) prefixUnaryOperator -> . DECREMENTO
    (252) prefixUnaryOperator -> . MINUS
    (253) prefixUnaryOperator -> . PLUS
    (254) prefixUnaryOperator -> . NOT
    (91) infixOperation -> . elvisExpression io
    (92) infixOperation -> . elvisExpression
    (33) typeModifier -> . SUSPEND
    (97) elvisExpression -> . infixFunctionCall
    (98) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (99) infixFunctionCall -> . rangeExpression
    (100) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (101) rangeExpression -> . additiveExpression
    (102) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (103) additiveExpression -> . multiplicativeExpression
    (104) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (105) multiplicativeExpression -> . asExpression
    (106) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (107) asExpression -> . prefixUnaryExpression
    (108) asExpression -> . prefixUnaryExpression asOperator type

  ! shift/reduce conflict for LCHAVE resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for COLONCOLON resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
    PV              reduce using rule 212 (if1 -> .)
    ELSE            reduce using rule 212 (if1 -> .)
    MENOR           reduce using rule 212 (if1 -> .)
    PONTO           reduce using rule 212 (if1 -> .)
    AS              reduce using rule 212 (if1 -> .)
    MAISIGUAL       reduce using rule 212 (if1 -> .)
    MENOSIGUAL      reduce using rule 212 (if1 -> .)
    MULTIGUAL       reduce using rule 212 (if1 -> .)
    DIVIGUAL        reduce using rule 212 (if1 -> .)
    MODIGUAL        reduce using rule 212 (if1 -> .)
    MULT            reduce using rule 212 (if1 -> .)
    DIVIDE          reduce using rule 212 (if1 -> .)
    MOD             reduce using rule 212 (if1 -> .)
    PONTOPONTO      reduce using rule 212 (if1 -> .)
    ELVIS           reduce using rule 212 (if1 -> .)
    IN              reduce using rule 212 (if1 -> .)
    NOT_IN          reduce using rule 212 (if1 -> .)
    IS              reduce using rule 212 (if1 -> .)
    NOT_IS          reduce using rule 212 (if1 -> .)
    MAIOR           reduce using rule 212 (if1 -> .)
    MENORIGUAL      reduce using rule 212 (if1 -> .)
    MAIORIGUAL      reduce using rule 212 (if1 -> .)
    DIFERENTE       reduce using rule 212 (if1 -> .)
    IDENTIDADE      reduce using rule 212 (if1 -> .)
    IGUALDADE       reduce using rule 212 (if1 -> .)
    SEMIDENTIDADE   reduce using rule 212 (if1 -> .)
    AND             reduce using rule 212 (if1 -> .)
    OR              reduce using rule 212 (if1 -> .)
    COMMA           reduce using rule 212 (if1 -> .)
    RPAREN          reduce using rule 212 (if1 -> .)
    RCCT            reduce using rule 212 (if1 -> .)
    LCHAVE          shift and go to state 49
    FUN             shift and go to state 77
    FOR             shift and go to state 90
    WHILE           shift and go to state 92
    DO              shift and go to state 93
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    STRING          shift and go to state 17
    ARRAY           shift and go to state 18
    CHAR            shift and go to state 19
    OBJECT          shift and go to state 20
    CONST           shift and go to state 21
    CONSTRUCTOR     shift and go to state 22
    EOF             shift and go to state 23
    FALSE           shift and go to state 24
    FUNCTION        shift and go to state 25
    NULL            shift and go to state 26
    NULLABLE        shift and go to state 27
    NUMBER          shift and go to state 28
    OPERATOR        shift and go to state 29
    SMARTCAST       shift and go to state 30
    THIS            shift and go to state 31
    TRUE            shift and go to state 32
    VAL             shift and go to state 33
    VAR             shift and go to state 34
    DOUBLE          shift and go to state 35
    WHEN            shift and go to state 36
    LONG            shift and go to state 37
    LPAREN          shift and go to state 91
    LITERAL_STRING  shift and go to state 99
    COLONCOLON      shift and go to state 108
    LCCT            shift and go to state 111
    IF              shift and go to state 112
    RETURN          shift and go to state 113
    RETURN_AT       shift and go to state 114
    CONTINUE        shift and go to state 115
    CONTINUE_AT     shift and go to state 116
    BREAK           shift and go to state 117
    BREAK_AT        shift and go to state 118
    RCHAVE          shift and go to state 71
    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124
    MINUS           shift and go to state 125
    PLUS            shift and go to state 126
    NOT             shift and go to state 127
    SUSPEND         shift and go to state 57

  ! FUN             [ reduce using rule 212 (if1 -> .) ]
  ! FOR             [ reduce using rule 212 (if1 -> .) ]
  ! WHILE           [ reduce using rule 212 (if1 -> .) ]
  ! DO              [ reduce using rule 212 (if1 -> .) ]
  ! ID              [ reduce using rule 212 (if1 -> .) ]
  ! CROSSINLINE     [ reduce using rule 212 (if1 -> .) ]
  ! IMPORT          [ reduce using rule 212 (if1 -> .) ]
  ! INIT            [ reduce using rule 212 (if1 -> .) ]
  ! NOINLINE        [ reduce using rule 212 (if1 -> .) ]
  ! OUT             [ reduce using rule 212 (if1 -> .) ]
  ! VARARG          [ reduce using rule 212 (if1 -> .) ]
  ! WHERE           [ reduce using rule 212 (if1 -> .) ]
  ! INT             [ reduce using rule 212 (if1 -> .) ]
  ! FLOAT           [ reduce using rule 212 (if1 -> .) ]
  ! BOOLEAN         [ reduce using rule 212 (if1 -> .) ]
  ! STRING          [ reduce using rule 212 (if1 -> .) ]
  ! ARRAY           [ reduce using rule 212 (if1 -> .) ]
  ! CHAR            [ reduce using rule 212 (if1 -> .) ]
  ! OBJECT          [ reduce using rule 212 (if1 -> .) ]
  ! CONST           [ reduce using rule 212 (if1 -> .) ]
  ! CONSTRUCTOR     [ reduce using rule 212 (if1 -> .) ]
  ! EOF             [ reduce using rule 212 (if1 -> .) ]
  ! FALSE           [ reduce using rule 212 (if1 -> .) ]
  ! FUNCTION        [ reduce using rule 212 (if1 -> .) ]
  ! NULL            [ reduce using rule 212 (if1 -> .) ]
  ! NULLABLE        [ reduce using rule 212 (if1 -> .) ]
  ! NUMBER          [ reduce using rule 212 (if1 -> .) ]
  ! OPERATOR        [ reduce using rule 212 (if1 -> .) ]
  ! SMARTCAST       [ reduce using rule 212 (if1 -> .) ]
  ! THIS            [ reduce using rule 212 (if1 -> .) ]
  ! TRUE            [ reduce using rule 212 (if1 -> .) ]
  ! VAL             [ reduce using rule 212 (if1 -> .) ]
  ! VAR             [ reduce using rule 212 (if1 -> .) ]
  ! DOUBLE          [ reduce using rule 212 (if1 -> .) ]
  ! WHEN            [ reduce using rule 212 (if1 -> .) ]
  ! LONG            [ reduce using rule 212 (if1 -> .) ]
  ! LPAREN          [ reduce using rule 212 (if1 -> .) ]
  ! LITERAL_STRING  [ reduce using rule 212 (if1 -> .) ]
  ! COLONCOLON      [ reduce using rule 212 (if1 -> .) ]
  ! LCCT            [ reduce using rule 212 (if1 -> .) ]
  ! IF              [ reduce using rule 212 (if1 -> .) ]
  ! RETURN          [ reduce using rule 212 (if1 -> .) ]
  ! RETURN_AT       [ reduce using rule 212 (if1 -> .) ]
  ! CONTINUE        [ reduce using rule 212 (if1 -> .) ]
  ! CONTINUE_AT     [ reduce using rule 212 (if1 -> .) ]
  ! BREAK           [ reduce using rule 212 (if1 -> .) ]
  ! BREAK_AT        [ reduce using rule 212 (if1 -> .) ]
  ! RCHAVE          [ reduce using rule 212 (if1 -> .) ]
  ! INCREMENTO      [ reduce using rule 212 (if1 -> .) ]
  ! DECREMENTO      [ reduce using rule 212 (if1 -> .) ]
  ! MINUS           [ reduce using rule 212 (if1 -> .) ]
  ! PLUS            [ reduce using rule 212 (if1 -> .) ]
  ! NOT             [ reduce using rule 212 (if1 -> .) ]
  ! SUSPEND         [ reduce using rule 212 (if1 -> .) ]
  ! LCHAVE          [ reduce using rule 212 (if1 -> .) ]

    expression                     shift and go to state 76
    if1                            shift and go to state 434
    controlStructureBody           shift and go to state 414
    block                          shift and go to state 195
    statement                      shift and go to state 196
    functionDeclaration            shift and go to state 73
    assignment                     shift and go to state 74
    loopStatement                  shift and go to state 75
    simpleIdentifier               shift and go to state 78
    directlyAssignableExpression   shift and go to state 79
    assignableExpression           shift and go to state 80
    forStatement_MD                shift and go to state 81
    forStatement_VD                shift and go to state 82
    whileStatement                 shift and go to state 83
    doWhileStatement               shift and go to state 84
    disjunction                    shift and go to state 85
    postfixUnaryExpression         shift and go to state 86
    parenthesizedDirectlyAssignableExpression shift and go to state 87
    prefixUnaryExpression          shift and go to state 88
    parenthesizedAssignableExpression shift and go to state 89
    conjunction                    shift and go to state 94
    primaryExpression              shift and go to state 95
    preue                          shift and go to state 96
    equality                       shift and go to state 97
    parenthesizedExpression        shift and go to state 98
    callableReference              shift and go to state 100
    functionLiteral                shift and go to state 101
    collectionLiteral              shift and go to state 102
    ifExpression                   shift and go to state 103
    jumpExpression                 shift and go to state 104
    unaryPrefix                    shift and go to state 105
    comparison                     shift and go to state 106
    receiverType                   shift and go to state 107
    lambdaLiteral                  shift and go to state 109
    anonymousFunction              shift and go to state 110
    label                          shift and go to state 119
    prefixUnaryOperator            shift and go to state 120
    infixOperation                 shift and go to state 121
    typeModifier                   shift and go to state 122
    elvisExpression                shift and go to state 128
    infixFunctionCall              shift and go to state 129
    rangeExpression                shift and go to state 130
    additiveExpression             shift and go to state 131
    multiplicativeExpression       shift and go to state 132
    asExpression                   shift and go to state 133

state 433

    (192) anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .

    INCREMENTO      reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    DECREMENTO      reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    MENOR           reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    LCCT            reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    LPAREN          reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    COLONCOLON      reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    RCHAVE          reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    PONTO           reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    AS              reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    MAISIGUAL       reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    MENOSIGUAL      reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    MULTIGUAL       reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    DIVIGUAL        reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    MODIGUAL        reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    MULT            reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    DIVIDE          reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    MOD             reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    PLUS            reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    MINUS           reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    PONTOPONTO      reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    ID              reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    CROSSINLINE     reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    IMPORT          reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    INIT            reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    NOINLINE        reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    OUT             reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    VARARG          reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    WHERE           reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    INT             reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    FLOAT           reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    BOOLEAN         reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    STRING          reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    ARRAY           reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    CHAR            reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    OBJECT          reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    CONST           reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    CONSTRUCTOR     reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    EOF             reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    FALSE           reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    FUNCTION        reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    NULL            reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    NULLABLE        reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    NUMBER          reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    OPERATOR        reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    SMARTCAST       reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    THIS            reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    TRUE            reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    VAL             reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    VAR             reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    DOUBLE          reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    WHEN            reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    LONG            reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    ELVIS           reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    IN              reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    NOT_IN          reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    IS              reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    NOT_IS          reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    MAIOR           reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    MENORIGUAL      reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    MAIORIGUAL      reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    DIFERENTE       reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    IDENTIDADE      reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    IGUALDADE       reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    SEMIDENTIDADE   reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    AND             reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    OR              reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    FUN             reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    FOR             reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    WHILE           reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    DO              reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    LITERAL_STRING  reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    IF              reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    RETURN          reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    RETURN_AT       reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    CONTINUE        reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    CONTINUE_AT     reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    BREAK           reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    BREAK_AT        reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    NOT             reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    SUSPEND         reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    COMMA           reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    RPAREN          reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    LCHAVE          reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    PV              reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    ELSE            reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)
    RCCT            reduce using rule 192 (anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody .)


state 434

    (210) ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 . if2
    (213) if2 -> . PV
    (214) if2 -> .

  ! shift/reduce conflict for PV resolved as shift
    PV              shift and go to state 426
    INCREMENTO      reduce using rule 214 (if2 -> .)
    DECREMENTO      reduce using rule 214 (if2 -> .)
    MENOR           reduce using rule 214 (if2 -> .)
    LCCT            reduce using rule 214 (if2 -> .)
    LPAREN          reduce using rule 214 (if2 -> .)
    COLONCOLON      reduce using rule 214 (if2 -> .)
    RCHAVE          reduce using rule 214 (if2 -> .)
    PONTO           reduce using rule 214 (if2 -> .)
    AS              reduce using rule 214 (if2 -> .)
    MAISIGUAL       reduce using rule 214 (if2 -> .)
    MENOSIGUAL      reduce using rule 214 (if2 -> .)
    MULTIGUAL       reduce using rule 214 (if2 -> .)
    DIVIGUAL        reduce using rule 214 (if2 -> .)
    MODIGUAL        reduce using rule 214 (if2 -> .)
    MULT            reduce using rule 214 (if2 -> .)
    DIVIDE          reduce using rule 214 (if2 -> .)
    MOD             reduce using rule 214 (if2 -> .)
    PLUS            reduce using rule 214 (if2 -> .)
    MINUS           reduce using rule 214 (if2 -> .)
    PONTOPONTO      reduce using rule 214 (if2 -> .)
    ID              reduce using rule 214 (if2 -> .)
    CROSSINLINE     reduce using rule 214 (if2 -> .)
    IMPORT          reduce using rule 214 (if2 -> .)
    INIT            reduce using rule 214 (if2 -> .)
    NOINLINE        reduce using rule 214 (if2 -> .)
    OUT             reduce using rule 214 (if2 -> .)
    VARARG          reduce using rule 214 (if2 -> .)
    WHERE           reduce using rule 214 (if2 -> .)
    INT             reduce using rule 214 (if2 -> .)
    FLOAT           reduce using rule 214 (if2 -> .)
    BOOLEAN         reduce using rule 214 (if2 -> .)
    STRING          reduce using rule 214 (if2 -> .)
    ARRAY           reduce using rule 214 (if2 -> .)
    CHAR            reduce using rule 214 (if2 -> .)
    OBJECT          reduce using rule 214 (if2 -> .)
    CONST           reduce using rule 214 (if2 -> .)
    CONSTRUCTOR     reduce using rule 214 (if2 -> .)
    EOF             reduce using rule 214 (if2 -> .)
    FALSE           reduce using rule 214 (if2 -> .)
    FUNCTION        reduce using rule 214 (if2 -> .)
    NULL            reduce using rule 214 (if2 -> .)
    NULLABLE        reduce using rule 214 (if2 -> .)
    NUMBER          reduce using rule 214 (if2 -> .)
    OPERATOR        reduce using rule 214 (if2 -> .)
    SMARTCAST       reduce using rule 214 (if2 -> .)
    THIS            reduce using rule 214 (if2 -> .)
    TRUE            reduce using rule 214 (if2 -> .)
    VAL             reduce using rule 214 (if2 -> .)
    VAR             reduce using rule 214 (if2 -> .)
    DOUBLE          reduce using rule 214 (if2 -> .)
    WHEN            reduce using rule 214 (if2 -> .)
    LONG            reduce using rule 214 (if2 -> .)
    ELVIS           reduce using rule 214 (if2 -> .)
    IN              reduce using rule 214 (if2 -> .)
    NOT_IN          reduce using rule 214 (if2 -> .)
    IS              reduce using rule 214 (if2 -> .)
    NOT_IS          reduce using rule 214 (if2 -> .)
    MAIOR           reduce using rule 214 (if2 -> .)
    MENORIGUAL      reduce using rule 214 (if2 -> .)
    MAIORIGUAL      reduce using rule 214 (if2 -> .)
    DIFERENTE       reduce using rule 214 (if2 -> .)
    IDENTIDADE      reduce using rule 214 (if2 -> .)
    IGUALDADE       reduce using rule 214 (if2 -> .)
    SEMIDENTIDADE   reduce using rule 214 (if2 -> .)
    AND             reduce using rule 214 (if2 -> .)
    OR              reduce using rule 214 (if2 -> .)
    FUN             reduce using rule 214 (if2 -> .)
    FOR             reduce using rule 214 (if2 -> .)
    WHILE           reduce using rule 214 (if2 -> .)
    DO              reduce using rule 214 (if2 -> .)
    LITERAL_STRING  reduce using rule 214 (if2 -> .)
    IF              reduce using rule 214 (if2 -> .)
    RETURN          reduce using rule 214 (if2 -> .)
    RETURN_AT       reduce using rule 214 (if2 -> .)
    CONTINUE        reduce using rule 214 (if2 -> .)
    CONTINUE_AT     reduce using rule 214 (if2 -> .)
    BREAK           reduce using rule 214 (if2 -> .)
    BREAK_AT        reduce using rule 214 (if2 -> .)
    NOT             reduce using rule 214 (if2 -> .)
    SUSPEND         reduce using rule 214 (if2 -> .)
    COMMA           reduce using rule 214 (if2 -> .)
    RPAREN          reduce using rule 214 (if2 -> .)
    LCHAVE          reduce using rule 214 (if2 -> .)
    ELSE            reduce using rule 214 (if2 -> .)
    RCCT            reduce using rule 214 (if2 -> .)

  ! PV              [ reduce using rule 214 (if2 -> .) ]

    if2                            shift and go to state 435

state 435

    (210) ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .

    INCREMENTO      reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    DECREMENTO      reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    MENOR           reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    LCCT            reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    LPAREN          reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    COLONCOLON      reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    RCHAVE          reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    PONTO           reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    AS              reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    MAISIGUAL       reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    MENOSIGUAL      reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    MULTIGUAL       reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    DIVIGUAL        reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    MODIGUAL        reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    MULT            reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    DIVIDE          reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    MOD             reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    PLUS            reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    MINUS           reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    PONTOPONTO      reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    ID              reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    CROSSINLINE     reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    IMPORT          reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    INIT            reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    NOINLINE        reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    OUT             reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    VARARG          reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    WHERE           reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    INT             reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    FLOAT           reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    BOOLEAN         reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    STRING          reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    ARRAY           reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    CHAR            reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    OBJECT          reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    CONST           reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    CONSTRUCTOR     reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    EOF             reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    FALSE           reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    FUNCTION        reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    NULL            reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    NULLABLE        reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    NUMBER          reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    OPERATOR        reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    SMARTCAST       reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    THIS            reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    TRUE            reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    VAL             reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    VAR             reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    DOUBLE          reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    WHEN            reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    LONG            reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    ELVIS           reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    IN              reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    NOT_IN          reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    IS              reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    NOT_IS          reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    MAIOR           reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    MENORIGUAL      reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    MAIORIGUAL      reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    DIFERENTE       reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    IDENTIDADE      reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    IGUALDADE       reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    SEMIDENTIDADE   reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    AND             reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    OR              reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    FUN             reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    FOR             reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    WHILE           reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    DO              reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    LITERAL_STRING  reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    IF              reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    RETURN          reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    RETURN_AT       reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    CONTINUE        reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    CONTINUE_AT     reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    BREAK           reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    BREAK_AT        reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    NOT             reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    SUSPEND         reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    COMMA           reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    RPAREN          reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    LCHAVE          reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    PV              reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    ELSE            reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)
    RCCT            reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LCHAVE in state 40 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 53 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 53 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 64 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 72 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 86 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 86 resolved as shift
WARNING: shift/reduce conflict for COLONCOLON in state 86 resolved as shift
WARNING: shift/reduce conflict for PONTO in state 86 resolved as shift
WARNING: shift/reduce conflict for AS in state 88 resolved as shift
WARNING: shift/reduce conflict for OR in state 94 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 95 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 95 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 95 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 95 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 95 resolved as shift
WARNING: shift/reduce conflict for COLONCOLON in state 95 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 95 resolved as shift
WARNING: shift/reduce conflict for PONTO in state 95 resolved as shift
WARNING: shift/reduce conflict for AND in state 97 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 105 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 105 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 105 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 105 resolved as shift
WARNING: shift/reduce conflict for NOT in state 105 resolved as shift
WARNING: shift/reduce conflict for ID in state 105 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 105 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 105 resolved as shift
WARNING: shift/reduce conflict for INIT in state 105 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 105 resolved as shift
WARNING: shift/reduce conflict for OUT in state 105 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 105 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 105 resolved as shift
WARNING: shift/reduce conflict for INT in state 105 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 105 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 105 resolved as shift
WARNING: shift/reduce conflict for STRING in state 105 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 105 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 105 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 105 resolved as shift
WARNING: shift/reduce conflict for CONST in state 105 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 105 resolved as shift
WARNING: shift/reduce conflict for EOF in state 105 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 105 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 105 resolved as shift
WARNING: shift/reduce conflict for NULL in state 105 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 105 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 105 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 105 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 105 resolved as shift
WARNING: shift/reduce conflict for THIS in state 105 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 105 resolved as shift
WARNING: shift/reduce conflict for VAL in state 105 resolved as shift
WARNING: shift/reduce conflict for VAR in state 105 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 105 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 105 resolved as shift
WARNING: shift/reduce conflict for LONG in state 105 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 106 resolved as shift
WARNING: shift/reduce conflict for IDENTIDADE in state 106 resolved as shift
WARNING: shift/reduce conflict for IGUALDADE in state 106 resolved as shift
WARNING: shift/reduce conflict for SEMIDENTIDADE in state 106 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 121 resolved as shift
WARNING: shift/reduce conflict for MAIOR in state 121 resolved as shift
WARNING: shift/reduce conflict for MENORIGUAL in state 121 resolved as shift
WARNING: shift/reduce conflict for MAIORIGUAL in state 121 resolved as shift
WARNING: shift/reduce conflict for IN in state 128 resolved as shift
WARNING: shift/reduce conflict for NOT_IN in state 128 resolved as shift
WARNING: shift/reduce conflict for IS in state 128 resolved as shift
WARNING: shift/reduce conflict for NOT_IS in state 128 resolved as shift
WARNING: shift/reduce conflict for ELVIS in state 129 resolved as shift
WARNING: shift/reduce conflict for ID in state 130 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 130 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 130 resolved as shift
WARNING: shift/reduce conflict for INIT in state 130 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 130 resolved as shift
WARNING: shift/reduce conflict for OUT in state 130 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 130 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 130 resolved as shift
WARNING: shift/reduce conflict for INT in state 130 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 130 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 130 resolved as shift
WARNING: shift/reduce conflict for STRING in state 130 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 130 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 130 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 130 resolved as shift
WARNING: shift/reduce conflict for CONST in state 130 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 130 resolved as shift
WARNING: shift/reduce conflict for EOF in state 130 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 130 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 130 resolved as shift
WARNING: shift/reduce conflict for NULL in state 130 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 130 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 130 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 130 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 130 resolved as shift
WARNING: shift/reduce conflict for THIS in state 130 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 130 resolved as shift
WARNING: shift/reduce conflict for VAL in state 130 resolved as shift
WARNING: shift/reduce conflict for VAR in state 130 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 130 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 130 resolved as shift
WARNING: shift/reduce conflict for LONG in state 130 resolved as shift
WARNING: shift/reduce conflict for PONTOPONTO in state 131 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 132 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 132 resolved as shift
WARNING: shift/reduce conflict for MULT in state 133 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 133 resolved as shift
WARNING: shift/reduce conflict for MOD in state 133 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 135 resolved as shift
WARNING: shift/reduce conflict for AS in state 150 resolved as shift
WARNING: shift/reduce conflict for ID in state 168 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 168 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 168 resolved as shift
WARNING: shift/reduce conflict for INIT in state 168 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 168 resolved as shift
WARNING: shift/reduce conflict for OUT in state 168 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 168 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 168 resolved as shift
WARNING: shift/reduce conflict for INT in state 168 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 168 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 168 resolved as shift
WARNING: shift/reduce conflict for STRING in state 168 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 168 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 168 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 168 resolved as shift
WARNING: shift/reduce conflict for CONST in state 168 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 168 resolved as shift
WARNING: shift/reduce conflict for EOF in state 168 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 168 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 168 resolved as shift
WARNING: shift/reduce conflict for NULL in state 168 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 168 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 168 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 168 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 168 resolved as shift
WARNING: shift/reduce conflict for THIS in state 168 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 168 resolved as shift
WARNING: shift/reduce conflict for VAL in state 168 resolved as shift
WARNING: shift/reduce conflict for VAR in state 168 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 168 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 168 resolved as shift
WARNING: shift/reduce conflict for LONG in state 168 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 168 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 191 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 199 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 199 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 199 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 199 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 199 resolved as shift
WARNING: shift/reduce conflict for COLONCOLON in state 199 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 199 resolved as shift
WARNING: shift/reduce conflict for PONTO in state 199 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 201 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 201 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 207 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 226 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 282 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 289 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 299 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 311 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 316 resolved as shift
WARNING: shift/reduce conflict for IGUALDADE in state 322 resolved as shift
WARNING: shift/reduce conflict for OR in state 324 resolved as shift
WARNING: shift/reduce conflict for AND in state 325 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 330 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 331 resolved as shift
WARNING: shift/reduce conflict for MAIOR in state 331 resolved as shift
WARNING: shift/reduce conflict for MENORIGUAL in state 331 resolved as shift
WARNING: shift/reduce conflict for MAIORIGUAL in state 331 resolved as shift
WARNING: shift/reduce conflict for IN in state 332 resolved as shift
WARNING: shift/reduce conflict for NOT_IN in state 332 resolved as shift
WARNING: shift/reduce conflict for IS in state 332 resolved as shift
WARNING: shift/reduce conflict for NOT_IS in state 332 resolved as shift
WARNING: shift/reduce conflict for IN in state 333 resolved as shift
WARNING: shift/reduce conflict for NOT_IN in state 333 resolved as shift
WARNING: shift/reduce conflict for IS in state 333 resolved as shift
WARNING: shift/reduce conflict for NOT_IS in state 333 resolved as shift
WARNING: shift/reduce conflict for IN in state 334 resolved as shift
WARNING: shift/reduce conflict for NOT_IN in state 334 resolved as shift
WARNING: shift/reduce conflict for IS in state 334 resolved as shift
WARNING: shift/reduce conflict for NOT_IS in state 334 resolved as shift
WARNING: shift/reduce conflict for ELVIS in state 335 resolved as shift
WARNING: shift/reduce conflict for ID in state 336 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 336 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 336 resolved as shift
WARNING: shift/reduce conflict for INIT in state 336 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 336 resolved as shift
WARNING: shift/reduce conflict for OUT in state 336 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 336 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 336 resolved as shift
WARNING: shift/reduce conflict for INT in state 336 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 336 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 336 resolved as shift
WARNING: shift/reduce conflict for STRING in state 336 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 336 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 336 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 336 resolved as shift
WARNING: shift/reduce conflict for CONST in state 336 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 336 resolved as shift
WARNING: shift/reduce conflict for EOF in state 336 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 336 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 336 resolved as shift
WARNING: shift/reduce conflict for NULL in state 336 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 336 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 336 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 336 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 336 resolved as shift
WARNING: shift/reduce conflict for THIS in state 336 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 336 resolved as shift
WARNING: shift/reduce conflict for VAL in state 336 resolved as shift
WARNING: shift/reduce conflict for VAR in state 336 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 336 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 336 resolved as shift
WARNING: shift/reduce conflict for LONG in state 336 resolved as shift
WARNING: shift/reduce conflict for PONTOPONTO in state 337 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 338 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 338 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 349 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 349 resolved as shift
WARNING: shift/reduce conflict for ID in state 349 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 349 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 349 resolved as shift
WARNING: shift/reduce conflict for INIT in state 349 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 349 resolved as shift
WARNING: shift/reduce conflict for OUT in state 349 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 349 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 349 resolved as shift
WARNING: shift/reduce conflict for INT in state 349 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 349 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 349 resolved as shift
WARNING: shift/reduce conflict for STRING in state 349 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 349 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 349 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 349 resolved as shift
WARNING: shift/reduce conflict for CONST in state 349 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 349 resolved as shift
WARNING: shift/reduce conflict for EOF in state 349 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 349 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 349 resolved as shift
WARNING: shift/reduce conflict for NULL in state 349 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 349 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 349 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 349 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 349 resolved as shift
WARNING: shift/reduce conflict for THIS in state 349 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 349 resolved as shift
WARNING: shift/reduce conflict for VAL in state 349 resolved as shift
WARNING: shift/reduce conflict for VAR in state 349 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 349 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 349 resolved as shift
WARNING: shift/reduce conflict for LONG in state 349 resolved as shift
WARNING: shift/reduce conflict for ID in state 357 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 357 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 357 resolved as shift
WARNING: shift/reduce conflict for INIT in state 357 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 357 resolved as shift
WARNING: shift/reduce conflict for OUT in state 357 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 357 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 357 resolved as shift
WARNING: shift/reduce conflict for INT in state 357 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 357 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 357 resolved as shift
WARNING: shift/reduce conflict for STRING in state 357 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 357 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 357 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 357 resolved as shift
WARNING: shift/reduce conflict for CONST in state 357 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 357 resolved as shift
WARNING: shift/reduce conflict for EOF in state 357 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 357 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 357 resolved as shift
WARNING: shift/reduce conflict for NULL in state 357 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 357 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 357 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 357 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 357 resolved as shift
WARNING: shift/reduce conflict for THIS in state 357 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 357 resolved as shift
WARNING: shift/reduce conflict for VAL in state 357 resolved as shift
WARNING: shift/reduce conflict for VAR in state 357 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 357 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 357 resolved as shift
WARNING: shift/reduce conflict for LONG in state 357 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 357 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 375 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 391 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 397 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 404 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 405 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 408 resolved as shift
WARNING: shift/reduce conflict for PV in state 409 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 409 resolved as shift
WARNING: shift/reduce conflict for FUN in state 409 resolved as shift
WARNING: shift/reduce conflict for FOR in state 409 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 409 resolved as shift
WARNING: shift/reduce conflict for DO in state 409 resolved as shift
WARNING: shift/reduce conflict for ID in state 409 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 409 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 409 resolved as shift
WARNING: shift/reduce conflict for INIT in state 409 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 409 resolved as shift
WARNING: shift/reduce conflict for OUT in state 409 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 409 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 409 resolved as shift
WARNING: shift/reduce conflict for INT in state 409 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 409 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 409 resolved as shift
WARNING: shift/reduce conflict for STRING in state 409 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 409 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 409 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 409 resolved as shift
WARNING: shift/reduce conflict for CONST in state 409 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 409 resolved as shift
WARNING: shift/reduce conflict for EOF in state 409 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 409 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 409 resolved as shift
WARNING: shift/reduce conflict for NULL in state 409 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 409 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 409 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 409 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 409 resolved as shift
WARNING: shift/reduce conflict for THIS in state 409 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 409 resolved as shift
WARNING: shift/reduce conflict for VAL in state 409 resolved as shift
WARNING: shift/reduce conflict for VAR in state 409 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 409 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 409 resolved as shift
WARNING: shift/reduce conflict for LONG in state 409 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 409 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 409 resolved as shift
WARNING: shift/reduce conflict for COLONCOLON in state 409 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 409 resolved as shift
WARNING: shift/reduce conflict for IF in state 409 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 409 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 409 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 409 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 409 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 409 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 409 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 409 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 409 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 409 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 409 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 409 resolved as shift
WARNING: shift/reduce conflict for NOT in state 409 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 409 resolved as shift
WARNING: shift/reduce conflict for ID in state 415 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 415 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 415 resolved as shift
WARNING: shift/reduce conflict for INIT in state 415 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 415 resolved as shift
WARNING: shift/reduce conflict for OUT in state 415 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 415 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 415 resolved as shift
WARNING: shift/reduce conflict for INT in state 415 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 415 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 415 resolved as shift
WARNING: shift/reduce conflict for STRING in state 415 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 415 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 415 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 415 resolved as shift
WARNING: shift/reduce conflict for CONST in state 415 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 415 resolved as shift
WARNING: shift/reduce conflict for EOF in state 415 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 415 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 415 resolved as shift
WARNING: shift/reduce conflict for NULL in state 415 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 415 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 415 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 415 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 415 resolved as shift
WARNING: shift/reduce conflict for THIS in state 415 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 415 resolved as shift
WARNING: shift/reduce conflict for VAL in state 415 resolved as shift
WARNING: shift/reduce conflict for VAR in state 415 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 415 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 415 resolved as shift
WARNING: shift/reduce conflict for LONG in state 415 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 415 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 421 resolved as shift
WARNING: shift/reduce conflict for FUN in state 421 resolved as shift
WARNING: shift/reduce conflict for FOR in state 421 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 421 resolved as shift
WARNING: shift/reduce conflict for DO in state 421 resolved as shift
WARNING: shift/reduce conflict for ID in state 421 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 421 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 421 resolved as shift
WARNING: shift/reduce conflict for INIT in state 421 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 421 resolved as shift
WARNING: shift/reduce conflict for OUT in state 421 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 421 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 421 resolved as shift
WARNING: shift/reduce conflict for INT in state 421 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 421 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 421 resolved as shift
WARNING: shift/reduce conflict for STRING in state 421 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 421 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 421 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 421 resolved as shift
WARNING: shift/reduce conflict for CONST in state 421 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 421 resolved as shift
WARNING: shift/reduce conflict for EOF in state 421 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 421 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 421 resolved as shift
WARNING: shift/reduce conflict for NULL in state 421 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 421 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 421 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 421 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 421 resolved as shift
WARNING: shift/reduce conflict for THIS in state 421 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 421 resolved as shift
WARNING: shift/reduce conflict for VAL in state 421 resolved as shift
WARNING: shift/reduce conflict for VAR in state 421 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 421 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 421 resolved as shift
WARNING: shift/reduce conflict for LONG in state 421 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 421 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 421 resolved as shift
WARNING: shift/reduce conflict for COLONCOLON in state 421 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 421 resolved as shift
WARNING: shift/reduce conflict for IF in state 421 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 421 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 421 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 421 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 421 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 421 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 421 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 421 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 421 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 421 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 421 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 421 resolved as shift
WARNING: shift/reduce conflict for NOT in state 421 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 421 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 422 resolved as shift
WARNING: shift/reduce conflict for FUN in state 422 resolved as shift
WARNING: shift/reduce conflict for FOR in state 422 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 422 resolved as shift
WARNING: shift/reduce conflict for DO in state 422 resolved as shift
WARNING: shift/reduce conflict for ID in state 422 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 422 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 422 resolved as shift
WARNING: shift/reduce conflict for INIT in state 422 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 422 resolved as shift
WARNING: shift/reduce conflict for OUT in state 422 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 422 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 422 resolved as shift
WARNING: shift/reduce conflict for INT in state 422 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 422 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 422 resolved as shift
WARNING: shift/reduce conflict for STRING in state 422 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 422 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 422 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 422 resolved as shift
WARNING: shift/reduce conflict for CONST in state 422 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 422 resolved as shift
WARNING: shift/reduce conflict for EOF in state 422 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 422 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 422 resolved as shift
WARNING: shift/reduce conflict for NULL in state 422 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 422 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 422 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 422 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 422 resolved as shift
WARNING: shift/reduce conflict for THIS in state 422 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 422 resolved as shift
WARNING: shift/reduce conflict for VAL in state 422 resolved as shift
WARNING: shift/reduce conflict for VAR in state 422 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 422 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 422 resolved as shift
WARNING: shift/reduce conflict for LONG in state 422 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 422 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 422 resolved as shift
WARNING: shift/reduce conflict for COLONCOLON in state 422 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 422 resolved as shift
WARNING: shift/reduce conflict for IF in state 422 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 422 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 422 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 422 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 422 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 422 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 422 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 422 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 422 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 422 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 422 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 422 resolved as shift
WARNING: shift/reduce conflict for NOT in state 422 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 422 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 427 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 432 resolved as shift
WARNING: shift/reduce conflict for FUN in state 432 resolved as shift
WARNING: shift/reduce conflict for FOR in state 432 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 432 resolved as shift
WARNING: shift/reduce conflict for DO in state 432 resolved as shift
WARNING: shift/reduce conflict for ID in state 432 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 432 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 432 resolved as shift
WARNING: shift/reduce conflict for INIT in state 432 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 432 resolved as shift
WARNING: shift/reduce conflict for OUT in state 432 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 432 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 432 resolved as shift
WARNING: shift/reduce conflict for INT in state 432 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 432 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 432 resolved as shift
WARNING: shift/reduce conflict for STRING in state 432 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 432 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 432 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 432 resolved as shift
WARNING: shift/reduce conflict for CONST in state 432 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 432 resolved as shift
WARNING: shift/reduce conflict for EOF in state 432 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 432 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 432 resolved as shift
WARNING: shift/reduce conflict for NULL in state 432 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 432 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 432 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 432 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 432 resolved as shift
WARNING: shift/reduce conflict for THIS in state 432 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 432 resolved as shift
WARNING: shift/reduce conflict for VAL in state 432 resolved as shift
WARNING: shift/reduce conflict for VAR in state 432 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 432 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 432 resolved as shift
WARNING: shift/reduce conflict for LONG in state 432 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 432 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 432 resolved as shift
WARNING: shift/reduce conflict for COLONCOLON in state 432 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 432 resolved as shift
WARNING: shift/reduce conflict for IF in state 432 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 432 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 432 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 432 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 432 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 432 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 432 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 432 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 432 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 432 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 432 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 432 resolved as shift
WARNING: shift/reduce conflict for NOT in state 432 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 432 resolved as shift
WARNING: shift/reduce conflict for PV in state 434 resolved as shift
WARNING: reduce/reduce conflict in state 76 resolved using rule (statement -> expression)
WARNING: rejected rule (jumpExpression -> expression) in state 76
WARNING: reduce/reduce conflict in state 78 resolved using rule (directlyAssignableExpression -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 78
WARNING: reduce/reduce conflict in state 78 resolved using rule (label -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 78
WARNING: reduce/reduce conflict in state 88 resolved using rule (asExpression -> prefixUnaryExpression)
WARNING: rejected rule (assignableExpression -> prefixUnaryExpression) in state 88
WARNING: reduce/reduce conflict in state 148 resolved using rule (functionValueParameter -> parameter ATRIBUICAO expression)
WARNING: rejected rule (jumpExpression -> expression) in state 148
WARNING: reduce/reduce conflict in state 149 resolved using rule (label -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 149
WARNING: reduce/reduce conflict in state 163 resolved using rule (directlyAssignableExpression -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 163
WARNING: reduce/reduce conflict in state 163 resolved using rule (label -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 163
WARNING: reduce/reduce conflict in state 211 resolved using rule (prefixUnaryExpression -> preue postfixUnaryExpression)
WARNING: rejected rule (prefixUnaryExpression -> postfixUnaryExpression) in state 211
WARNING: reduce/reduce conflict in state 226 resolved using rule (cl -> expression)
WARNING: rejected rule (jumpExpression -> expression) in state 226
WARNING: reduce/reduce conflict in state 228 resolved using rule (jumpExpression -> RETURN expression)
WARNING: rejected rule (jumpExpression -> expression) in state 228
WARNING: reduce/reduce conflict in state 229 resolved using rule (jumpExpression -> RETURN_AT expression)
WARNING: rejected rule (jumpExpression -> expression) in state 229
WARNING: reduce/reduce conflict in state 253 resolved using rule (functionTypeParameters_t -> LPAREN type RPAREN)
WARNING: rejected rule (parenthesizedType -> LPAREN type RPAREN) in state 253
WARNING: reduce/reduce conflict in state 269 resolved using rule (varianceModifier -> OUT)
WARNING: rejected rule (simpleIdentifier -> OUT) in state 269
WARNING: reduce/reduce conflict in state 279 resolved using rule (variableDeclaration -> simpleIdentifier)
WARNING: rejected rule (directlyAssignableExpression -> simpleIdentifier) in state 279
WARNING: reduce/reduce conflict in state 279 resolved using rule (variableDeclaration -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 279
WARNING: reduce/reduce conflict in state 279 resolved using rule (label -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 279
WARNING: reduce/reduce conflict in state 290 resolved using rule (simpleUserType -> simpleIdentifier)
WARNING: rejected rule (parameterWithOptionalType -> simpleIdentifier) in state 290
WARNING: reduce/reduce conflict in state 295 resolved using rule (assignment -> directlyAssignableExpression IGUALDADE expression)
WARNING: rejected rule (jumpExpression -> expression) in state 295
WARNING: reduce/reduce conflict in state 296 resolved using rule (assignment -> assignableExpression assignmentAndOperator expression)
WARNING: rejected rule (jumpExpression -> expression) in state 296
WARNING: reduce/reduce conflict in state 299 resolved using rule (isuf -> expression)
WARNING: rejected rule (jumpExpression -> expression) in state 299
WARNING: reduce/reduce conflict in state 314 resolved using rule (expression -> disjunction)
WARNING: rejected rule (disjunction -> conjunction OR disjunction) in state 314
WARNING: reduce/reduce conflict in state 322 resolved using rule (label -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 322
WARNING: reduce/reduce conflict in state 323 resolved using rule (valueArgument -> expression)
WARNING: rejected rule (jumpExpression -> expression) in state 323
WARNING: reduce/reduce conflict in state 324 resolved using rule (disjunction -> conjunction)
WARNING: rejected rule (conjunction -> equality AND conjunction) in state 324
WARNING: reduce/reduce conflict in state 325 resolved using rule (conjunction -> equality)
WARNING: rejected rule (equality -> comparison equalityOperator equality) in state 325
WARNING: reduce/reduce conflict in state 331 resolved using rule (comparison -> infixOperation)
WARNING: rejected rule (comparison -> infixOperation comparisonOperator infixOperation) in state 331
WARNING: reduce/reduce conflict in state 332 resolved using rule (infixOperation -> elvisExpression)
WARNING: rejected rule (io -> inOperator elvisExpression) in state 332
WARNING: reduce/reduce conflict in state 334 resolved using rule (infixOperation -> elvisExpression)
WARNING: rejected rule (elvisExpression -> infixFunctionCall ELVIS elvisExpression) in state 334
WARNING: reduce/reduce conflict in state 335 resolved using rule (elvisExpression -> infixFunctionCall)
WARNING: rejected rule (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall) in state 335
WARNING: reduce/reduce conflict in state 336 resolved using rule (infixFunctionCall -> rangeExpression)
WARNING: rejected rule (rangeExpression -> additiveExpression PONTOPONTO rangeExpression) in state 336
WARNING: reduce/reduce conflict in state 337 resolved using rule (rangeExpression -> additiveExpression)
WARNING: rejected rule (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression) in state 337
WARNING: reduce/reduce conflict in state 338 resolved using rule (additiveExpression -> multiplicativeExpression)
WARNING: rejected rule (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression) in state 338
WARNING: reduce/reduce conflict in state 362 resolved using rule (functionBody -> ATRIBUICAO expression)
WARNING: rejected rule (jumpExpression -> expression) in state 362
WARNING: reduce/reduce conflict in state 382 resolved using rule (infixOperation -> elvisExpression io)
WARNING: rejected rule (io -> inOperator elvisExpression io) in state 382
WARNING: reduce/reduce conflict in state 401 resolved using rule (parameter -> simpleIdentifier DOISP type)
WARNING: rejected rule (parameterWithOptionalType -> simpleIdentifier DOISP type) in state 401
WARNING: reduce/reduce conflict in state 412 resolved using rule (valueArgument -> simpleIdentifier IGUALDADE expression)
WARNING: rejected rule (jumpExpression -> expression) in state 412
WARNING: reduce/reduce conflict in state 424 resolved using rule (valueArgument -> simpleIdentifier IGUALDADE MULT expression)
WARNING: rejected rule (jumpExpression -> expression) in state 424
WARNING: Rule (assignableExpression -> prefixUnaryExpression) is never reduced
WARNING: Rule (disjunction -> conjunction OR disjunction) is never reduced
WARNING: Rule (conjunction -> equality AND conjunction) is never reduced
WARNING: Rule (equality -> comparison equalityOperator equality) is never reduced
WARNING: Rule (comparison -> infixOperation comparisonOperator infixOperation) is never reduced
WARNING: Rule (io -> inOperator elvisExpression) is never reduced
WARNING: Rule (elvisExpression -> infixFunctionCall ELVIS elvisExpression) is never reduced
WARNING: Rule (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall) is never reduced
WARNING: Rule (rangeExpression -> additiveExpression PONTOPONTO rangeExpression) is never reduced
WARNING: Rule (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression) is never reduced
WARNING: Rule (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression) is never reduced
WARNING: Rule (io -> inOperator elvisExpression io) is never reduced
