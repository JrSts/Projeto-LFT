Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARRAY
    BOOLEAN
    CHAR
    CONST
    CONSTRUCTOR
    DOUBLE
    EOF
    FALSE
    FLOAT
    FUNCTION
    INT
    NULL
    NULLABLE
    NUMBER
    OBJECT
    OPERATOR
    SMARTCAST
    STRING
    THIS
    TRUE
    VAL
    VAR
    WHEN

Grammar

Rule 0     S' -> kotlinFile
Rule 1     kotlinFile -> functionDeclaration kotlinFile
Rule 2     kotlinFile -> functionDeclaration
Rule 3     functionDeclaration -> FUN fd1 simpleIdentifier functionValueParameters fd2 fd3
Rule 4     fd1 -> simpleIdentifier
Rule 5     fd1 -> <empty>
Rule 6     fd2 -> DOISP type
Rule 7     fd2 -> <empty>
Rule 8     fd3 -> block
Rule 9     fd3 -> <empty>
Rule 10    functionBody -> block
Rule 11    functionBody -> ATRIBUICAO expression
Rule 12    functionValueParameters -> LPAREN fvps RPAREN
Rule 13    functionValueParameters -> LPAREN RPAREN
Rule 14    fvps -> functionValueParameter
Rule 15    fvps -> functionValueParameter COMMA fvps
Rule 16    fvps -> functionValueParameter fvps
Rule 17    functionValueParameter -> parameter ATRIBUICAO expression
Rule 18    functionValueParameter -> parameter
Rule 19    variableDeclaration -> simpleIdentifier DOISP type
Rule 20    variableDeclaration -> simpleIdentifier
Rule 21    multiVariableDeclaration -> LPAREN mvd RPAREN
Rule 22    multiVariableDeclaration -> LPAREN RPAREN
Rule 23    mvd -> variableDeclaration
Rule 24    mvd -> variableDeclaration COMMA mvd
Rule 25    parameter -> simpleIdentifier DOISP type
Rule 26    type -> typeModifiers optype
Rule 27    type -> optype
Rule 28    optype -> parenthesizedType
Rule 29    optype -> functionType
Rule 30    optype -> userType
Rule 31    typeModifiers -> typeModifier
Rule 32    typeModifiers -> typeModifier typeModifiers
Rule 33    typeModifier -> SUSPEND
Rule 34    typeProjectionModifier -> varianceModifier
Rule 35    varianceModifier -> IN
Rule 36    varianceModifier -> OUT
Rule 37    userType -> simpleUserType
Rule 38    simpleUserType -> simpleIdentifier typeArguments
Rule 39    simpleUserType -> simpleIdentifier
Rule 40    typeProjection -> typeProjectionModifiers type
Rule 41    typeProjection -> type
Rule 42    typeProjectionModifiers -> typeProjection
Rule 43    typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers
Rule 44    functionType -> receiverType PONTO functionTypeParameters SETA type
Rule 45    functionType -> functionTypeParameters SETA type
Rule 46    functionTypeParameters_p -> LPAREN parameter ftp RPAREN
Rule 47    functionTypeParameters_p -> LPAREN parameter RPAREN
Rule 48    functionTypeParameters_t -> LPAREN type RPAREN
Rule 49    functionTypeParameters_t -> LPAREN type ftp RPAREN
Rule 50    ftp -> COMMA parameter
Rule 51    ftp -> COMMA type
Rule 52    parenthesizedType -> LPAREN type RPAREN
Rule 53    receiverType -> typeModifier rt
Rule 54    rt -> parenthesizedType
Rule 55    statements -> statement
Rule 56    statements -> statement statements
Rule 57    statement -> functionDeclaration
Rule 58    statement -> assignment
Rule 59    statement -> loopStatement
Rule 60    statement -> expression
Rule 61    controlStructureBody -> block
Rule 62    controlStructureBody -> statement
Rule 63    block -> LCHAVE statements RCHAVE
Rule 64    loopStatement -> forStatement_MD
Rule 65    loopStatement -> forStatement_VD
Rule 66    loopStatement -> whileStatement
Rule 67    loopStatement -> doWhileStatement
Rule 68    forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
Rule 69    forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN
Rule 70    forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
Rule 71    forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN
Rule 72    whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody
Rule 73    whileStatement -> WHILE LPAREN expression RPAREN PV
Rule 74    doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN
Rule 75    doWhileStatement -> DO WHILE LPAREN expression RPAREN
Rule 76    assignment -> directlyAssignableExpression IGUALDADE expression
Rule 77    assignment -> assignableExpression assignmentAndOperator expression
Rule 78    expression -> disjunction
Rule 79    disjunction -> conjunction
Rule 80    disjunction -> conjunction OR disjunction
Rule 81    conjunction -> equality
Rule 82    conjunction -> equality AND conjunction
Rule 83    equality -> comparison
Rule 84    equality -> comparison equalityOperator equality
Rule 85    comparison -> infixOperation
Rule 86    comparison -> infixOperation comparisonOperator infixOperation
Rule 87    infixOperation -> elvisExpression io
Rule 88    infixOperation -> elvisExpression
Rule 89    io -> inOperator elvisExpression
Rule 90    io -> inOperator elvisExpression io
Rule 91    io -> isOperator type
Rule 92    io -> isOperator type io
Rule 93    elvisExpression -> infixFunctionCall
Rule 94    elvisExpression -> infixFunctionCall ELVIS elvisExpression
Rule 95    infixFunctionCall -> rangeExpression
Rule 96    infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall
Rule 97    rangeExpression -> additiveExpression
Rule 98    rangeExpression -> additiveExpression PONTOPONTO rangeExpression
Rule 99    additiveExpression -> multiplicativeExpression
Rule 100   additiveExpression -> multiplicativeExpression additiveOperator additiveExpression
Rule 101   multiplicativeExpression -> asExpression
Rule 102   multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression
Rule 103   asExpression -> prefixUnaryExpression
Rule 104   asExpression -> prefixUnaryExpression asOperator type
Rule 105   prefixUnaryExpression -> preue postfixUnaryExpression
Rule 106   prefixUnaryExpression -> postfixUnaryExpression
Rule 107   preue -> unaryPrefix
Rule 108   preue -> unaryPrefix preue
Rule 109   unaryPrefix -> label
Rule 110   unaryPrefix -> prefixUnaryOperator
Rule 111   label -> simpleIdentifier
Rule 112   postfixUnaryExpression -> primaryExpression
Rule 113   postfixUnaryExpression -> primaryExpression posue
Rule 114   posue -> postfixUnarySuffix
Rule 115   posue -> postfixUnarySuffix posue
Rule 116   postfixUnarySuffix -> postfixUnaryOperator
Rule 117   postfixUnarySuffix -> typeArguments
Rule 118   postfixUnarySuffix -> callSuffix
Rule 119   postfixUnarySuffix -> indexingSuffix
Rule 120   postfixUnarySuffix -> navigationSuffix
Rule 121   directlyAssignableExpression -> postfixUnaryExpression assignableSuffix
Rule 122   directlyAssignableExpression -> simpleIdentifier
Rule 123   directlyAssignableExpression -> parenthesizedDirectlyAssignableExpression
Rule 124   parenthesizedDirectlyAssignableExpression -> LPAREN directlyAssignableExpression RPAREN
Rule 125   assignableExpression -> prefixUnaryExpression
Rule 126   assignableExpression -> parenthesizedAssignableExpression
Rule 127   parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN
Rule 128   assignableSuffix -> typeArguments
Rule 129   assignableSuffix -> indexingSuffix
Rule 130   assignableSuffix -> navigationSuffix
Rule 131   indexingSuffix -> LCCT isuf RCCT
Rule 132   indexingSuffix -> LCCT RCCT
Rule 133   isuf -> expression
Rule 134   isuf -> expression COMMA isuf
Rule 135   navigationSuffix -> memberAccessOperator simpleIdentifier CLASS
Rule 136   navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS
Rule 137   callSuffix -> typeArguments valueArguments annotatedLambda
Rule 138   callSuffix -> valueArguments annotatedLambda
Rule 139   callSuffix -> typeArguments annotatedLambda
Rule 140   callSuffix -> annotatedLambda
Rule 141   callSuffix -> typeArguments valueArguments
Rule 142   callSuffix -> valueArguments
Rule 143   annotatedLambda -> lambdaLiteral
Rule 144   typeArguments -> MENOR ta MAIOR
Rule 145   typeArguments -> MENOR MAIOR
Rule 146   ta -> typeProjection
Rule 147   ta -> typeProjection COMMA ta
Rule 148   valueArguments -> LPAREN RPAREN
Rule 149   valueArguments -> LPAREN vas RPAREN
Rule 150   vas -> valueArgument
Rule 151   vas -> valueArgument COMMA vas
Rule 152   valueArgument -> simpleIdentifier IGUALDADE MULT expression
Rule 153   valueArgument -> simpleIdentifier IGUALDADE expression
Rule 154   valueArgument -> expression
Rule 155   primaryExpression -> parenthesizedExpression
Rule 156   primaryExpression -> simpleIdentifier
Rule 157   primaryExpression -> LITERAL_STRING
Rule 158   primaryExpression -> callableReference
Rule 159   primaryExpression -> functionLiteral
Rule 160   primaryExpression -> collectionLiteral
Rule 161   primaryExpression -> ifExpression
Rule 162   primaryExpression -> jumpExpression
Rule 163   parenthesizedExpression -> LPAREN expression RPAREN
Rule 164   collectionLiteral -> LCCT cl RCCT
Rule 165   collectionLiteral -> LCCT RCCT
Rule 166   cl -> expression
Rule 167   cl -> expression COMMA cl
Rule 168   parametersWithOptionalType -> LPAREN pwot RPAREN
Rule 169   parametersWithOptionalType -> LPAREN RPAREN
Rule 170   pwot -> parameterWithOptionalType
Rule 171   pwot -> parameterWithOptionalType COMMA pwot COMMA
Rule 172   parameterWithOptionalType -> parameterModifiers simpleIdentifier DOISP type
Rule 173   parameterWithOptionalType -> simpleIdentifier DOISP type
Rule 174   parameterWithOptionalType -> parameterModifiers simpleIdentifier
Rule 175   parameterWithOptionalType -> simpleIdentifier
Rule 176   parameterModifiers -> VARARG
Rule 177   parameterModifiers -> NOINLINE
Rule 178   parameterModifiers -> CROSSINLINE
Rule 179   lambdaLiteral -> RCHAVE ll LCHAVE
Rule 180   ll -> statements
Rule 181   ll -> lambdaParameters SETA statements
Rule 182   ll -> SETA statements
Rule 183   lambdaParameters -> lambdaParameter
Rule 184   lambdaParameters -> lambdaParameter COMMA lambdaParameters
Rule 185   lambdaParameter -> variableDeclaration
Rule 186   lambdaParameter -> multiVariableDeclaration DOISP type
Rule 187   lambdaParameter -> multiVariableDeclaration
Rule 188   anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint functionBody
Rule 189   anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint functionBody
Rule 190   anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint functionBody
Rule 191   anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type functionBody
Rule 192   anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type typeConstraint
Rule 193   anonymousFunction -> FUN parametersWithOptionalType typeConstraint functionBody
Rule 194   anonymousFunction -> FUN parametersWithOptionalType DOISP type functionBody
Rule 195   anonymousFunction -> FUN parametersWithOptionalType DOISP type typeConstraint
Rule 196   anonymousFunction -> FUN type PONTO parametersWithOptionalType functionBody
Rule 197   anonymousFunction -> FUN type PONTO parametersWithOptionalType typeConstraint
Rule 198   anonymousFunction -> FUN type PONTO parametersWithOptionalType DOISP type
Rule 199   anonymousFunction -> FUN parametersWithOptionalType functionBody
Rule 200   anonymousFunction -> FUN parametersWithOptionalType typeConstraint
Rule 201   anonymousFunction -> FUN type PONTO parametersWithOptionalType
Rule 202   anonymousFunction -> FUN parametersWithOptionalType
Rule 203   functionLiteral -> lambdaLiteral
Rule 204   functionLiteral -> anonymousFunction
Rule 205   typeConstraint -> simpleIdentifier DOISP type
Rule 206   ifExpression -> IF LPAREN expression RPAREN if1 if2 ELSE if1 if2
Rule 207   if1 -> controlStructureBody
Rule 208   if1 -> <empty>
Rule 209   if2 -> PV
Rule 210   if2 -> <empty>
Rule 211   jumpExpression -> RETURN expression
Rule 212   jumpExpression -> RETURN_AT expression
Rule 213   jumpExpression -> expression
Rule 214   jumpExpression -> CONTINUE
Rule 215   jumpExpression -> CONTINUE_AT
Rule 216   jumpExpression -> BREAK
Rule 217   jumpExpression -> BREAK_AT
Rule 218   callableReference -> receiverType COLONCOLON simpleIdentifier
Rule 219   callableReference -> COLONCOLON simpleIdentifier
Rule 220   callableReference -> receiverType COLONCOLON CLASS
Rule 221   callableReference -> COLONCOLON CLASS
Rule 222   assignmentAndOperator -> MAISIGUAL
Rule 223   assignmentAndOperator -> MENOSIGUAL
Rule 224   assignmentAndOperator -> MULTIGUAL
Rule 225   assignmentAndOperator -> DIVIGUAL
Rule 226   assignmentAndOperator -> MODIGUAL
Rule 227   equalityOperator -> DIFERENTE
Rule 228   equalityOperator -> IDENTIDADE
Rule 229   equalityOperator -> IGUALDADE
Rule 230   equalityOperator -> SEMIDENTIDADE
Rule 231   comparisonOperator -> MENOR
Rule 232   comparisonOperator -> MAIOR
Rule 233   comparisonOperator -> MENORIGUAL
Rule 234   comparisonOperator -> MAIORIGUAL
Rule 235   inOperator -> IN
Rule 236   inOperator -> NOT_IN
Rule 237   isOperator -> IS
Rule 238   isOperator -> NOT_IS
Rule 239   additiveOperator -> PLUS
Rule 240   additiveOperator -> MINUS
Rule 241   multiplicativeOperator -> MULT
Rule 242   multiplicativeOperator -> DIVIDE
Rule 243   multiplicativeOperator -> MOD
Rule 244   asOperator -> AS
Rule 245   asOperator -> AS asOperator
Rule 246   prefixUnaryOperator -> INCREMENTO
Rule 247   prefixUnaryOperator -> DECREMENTO
Rule 248   prefixUnaryOperator -> MINUS
Rule 249   prefixUnaryOperator -> PLUS
Rule 250   prefixUnaryOperator -> NOT
Rule 251   postfixUnaryOperator -> INCREMENTO
Rule 252   postfixUnaryOperator -> DECREMENTO
Rule 253   memberAccessOperator -> safeNav
Rule 254   memberAccessOperator -> COLONCOLON
Rule 255   safeNav -> PONTO
Rule 256   simpleIdentifier -> ID
Rule 257   simpleIdentifier -> CROSSINLINE
Rule 258   simpleIdentifier -> IMPORT
Rule 259   simpleIdentifier -> INIT
Rule 260   simpleIdentifier -> NOINLINE
Rule 261   simpleIdentifier -> OUT
Rule 262   simpleIdentifier -> VARARG
Rule 263   simpleIdentifier -> WHERE

Terminals, with rules where they appear

AND                  : 82
ARRAY                : 
AS                   : 244 245
ATRIBUICAO           : 11 17
BOOLEAN              : 
BREAK                : 216
BREAK_AT             : 217
CHAR                 : 
CLASS                : 135 136 220 221
COLONCOLON           : 218 219 220 221 254
COMMA                : 15 24 50 51 134 147 151 167 171 171 184
CONST                : 
CONSTRUCTOR          : 
CONTINUE             : 214
CONTINUE_AT          : 215
CROSSINLINE          : 178 257
DECREMENTO           : 247 252
DIFERENTE            : 227
DIVIDE               : 242
DIVIGUAL             : 225
DO                   : 74 75
DOISP                : 6 19 25 172 173 186 188 189 191 192 194 195 198 205
DOUBLE               : 
ELSE                 : 206
ELVIS                : 94
EOF                  : 
FALSE                : 
FLOAT                : 
FOR                  : 68 69 70 71
FUN                  : 3 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202
FUNCTION             : 
ID                   : 256
IDENTIDADE           : 228
IF                   : 206
IGUALDADE            : 76 152 153 229
IMPORT               : 258
IN                   : 35 68 69 70 71 235
INCREMENTO           : 246 251
INIT                 : 259
INT                  : 
IS                   : 237
LCCT                 : 131 132 164 165
LCHAVE               : 63 179
LITERAL_STRING       : 157
LPAREN               : 12 13 21 22 46 47 48 49 52 68 69 70 71 72 73 74 75 124 127 148 149 163 168 169 206
MAIOR                : 144 145 232
MAIORIGUAL           : 234
MENOR                : 144 145 231
MENORIGUAL           : 233
MINUS                : 240 248
MOD                  : 243
MODIGUAL             : 226
MULT                 : 152 241
MULTIGUAL            : 224
NOINLINE             : 177 260
NOT                  : 250
NOT_IN               : 236
NOT_IS               : 238
NULL                 : 
NULLABLE             : 
NUMBER               : 
OBJECT               : 
OPERATOR             : 
OR                   : 80
OUT                  : 36 261
PLUS                 : 239 249
PONTO                : 44 188 190 191 192 196 197 198 201 255
PONTOPONTO           : 98
PV                   : 73 209
RCCT                 : 131 132 164 165
RCHAVE               : 63 179
RETURN               : 211
RETURN_AT            : 212
RPAREN               : 12 13 21 22 46 47 48 49 52 68 69 70 71 72 73 74 75 124 127 148 149 163 168 169 206
SEMIDENTIDADE        : 230
SETA                 : 44 45 181 182
SMARTCAST            : 
STRING               : 
SUSPEND              : 33
THIS                 : 
TRUE                 : 
VAL                  : 
VAR                  : 
VARARG               : 176 262
WHEN                 : 
WHERE                : 263
WHILE                : 72 73 74 75
error                : 

Nonterminals, with rules where they appear

MAISIGUAL            : 222
MENOSIGUAL           : 223
additiveExpression   : 97 98 100
additiveOperator     : 100
annotatedLambda      : 137 138 139 140
anonymousFunction    : 204
asExpression         : 101 102
asOperator           : 104 245
assignableExpression : 77 127
assignableSuffix     : 121
assignment           : 58
assignmentAndOperator : 77
block                : 8 10 61
callSuffix           : 118
callableReference    : 158
cl                   : 164 167
collectionLiteral    : 160
comparison           : 83 84
comparisonOperator   : 86
conjunction          : 79 80 82
controlStructureBody : 68 70 72 74 207
directlyAssignableExpression : 76 124
disjunction          : 78 80
doWhileStatement     : 67
elvisExpression      : 87 88 89 90 94
equality             : 81 82 84
equalityOperator     : 84
expression           : 11 17 60 68 69 70 71 72 73 74 75 76 77 133 134 152 153 154 163 166 167 206 211 212 213
fd1                  : 3
fd2                  : 3
fd3                  : 3
forStatement_MD      : 64
forStatement_VD      : 65
ftp                  : 46 49
functionBody         : 188 189 190 191 193 194 196 199
functionDeclaration  : 1 2 57
functionLiteral      : 159
functionType         : 29
functionTypeParameters : 44 45
functionTypeParameters_p : 
functionTypeParameters_t : 
functionValueParameter : 14 15 16
functionValueParameters : 3
fvps                 : 12 15 16
if1                  : 206 206
if2                  : 206 206
ifExpression         : 161
inOperator           : 89 90
indexingSuffix       : 119 129
infixFunctionCall    : 93 94 96
infixOperation       : 85 86 86
io                   : 87 90 92
isOperator           : 91 92
isuf                 : 131 134
jumpExpression       : 162
kotlinFile           : 1 0
label                : 109
lambdaLiteral        : 143 203
lambdaParameter      : 183 184
lambdaParameters     : 181 184
ll                   : 179
loopStatement        : 59
memberAccessOperator : 135 136
multiVariableDeclaration : 68 69 186 187
multiplicativeExpression : 99 100 102
multiplicativeOperator : 102
mvd                  : 21 24
navigationSuffix     : 120 130
optype               : 26 27
parameter            : 17 18 46 47 50
parameterModifiers   : 172 174
parameterWithOptionalType : 170 171
parametersWithOptionalType : 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202
parenthesizedAssignableExpression : 126
parenthesizedDirectlyAssignableExpression : 123
parenthesizedExpression : 136 155
parenthesizedType    : 28 54
postfixUnaryExpression : 105 106 121
postfixUnaryOperator : 116
postfixUnarySuffix   : 114 115
posue                : 113 115
prefixUnaryExpression : 103 104 125
prefixUnaryOperator  : 110
preue                : 105 108
primaryExpression    : 112 113
pwot                 : 168 171
rangeExpression      : 95 96 98
receiverType         : 44 218 220
rt                   : 53
safeNav              : 253
simpleIdentifier     : 3 4 19 20 25 38 39 96 111 122 135 152 153 156 172 173 174 175 205 218 219
simpleUserType       : 37
statement            : 55 56 62
statements           : 56 63 180 181 182
ta                   : 144 147
type                 : 6 19 25 40 41 44 45 48 49 51 52 91 92 104 172 173 186 188 188 189 190 191 191 192 192 194 195 196 197 198 198 201 205
typeArguments        : 38 117 128 137 139 141
typeConstraint       : 188 189 190 192 193 195 197 200
typeModifier         : 31 32 53
typeModifiers        : 26 32
typeProjection       : 42 146 147
typeProjectionModifier : 43
typeProjectionModifiers : 40 43
unaryPrefix          : 107 108
userType             : 30
valueArgument        : 150 151
valueArguments       : 137 138 141 142
variableDeclaration  : 23 24 70 71 185
varianceModifier     : 34
vas                  : 149 151
whileStatement       : 66

