Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOLEAN
    CHAR
    CONST
    CONSTRUCTOR
    DOUBLE
    EOF
    FALSE
    FLOAT
    FUNCTION
    INT
    LONG
    NULL
    NULLABLE
    OBJECT
    SMARTCAST
    STRING
    THIS
    TRUE
    WHEN

Grammar

Rule 0     S' -> kotlinFile
Rule 1     kotlinFile -> functionDeclaration kotlinFile
Rule 2     kotlinFile -> functionDeclaration
Rule 3     optionalType -> DOISP type
Rule 4     functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody
Rule 5     functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody
Rule 6     genericVariableDeclaration -> multiVariableDeclaration
Rule 7     genericVariableDeclaration -> variableDeclaration
Rule 8     expression -> disjunction
Rule 9     varOrVal -> VAR
Rule 10    varOrVal -> VAL
Rule 11    propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV
Rule 12    propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV
Rule 13    propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression
Rule 14    propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression
Rule 15    typeParameters -> MENOR typeParameter typeParametersRecursive MAIOR
Rule 16    typeParametersRecursive -> COMMA typeParameter
Rule 17    typeParametersRecursive -> COMMA typeParameter typeParametersRecursive
Rule 18    typeParameter -> simpleIdentifier
Rule 19    typeParameter -> simpleIdentifier DOISP type
Rule 20    functionBody -> block
Rule 21    functionBody -> ATRIBUICAO expression
Rule 22    functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN
Rule 23    functionValueParameters -> LPAREN RPAREN
Rule 24    functionValueParametersRecursive -> functionValueParameter
Rule 25    functionValueParametersRecursive -> functionValueParameter COMMA functionValueParametersRecursive
Rule 26    functionValueParameter -> parameter ATRIBUICAO expression
Rule 27    functionValueParameter -> parameter
Rule 28    variableDeclaration -> simpleIdentifier DOISP type
Rule 29    variableDeclaration -> simpleIdentifier
Rule 30    multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive RPAREN
Rule 31    multiVariableDeclaration -> LPAREN RPAREN
Rule 32    multiVariableDeclarationRecursive -> variableDeclaration
Rule 33    multiVariableDeclarationRecursive -> variableDeclaration COMMA multiVariableDeclarationRecursive
Rule 34    parameter -> simpleIdentifier optionalType
Rule 35    type -> typeModifiers optype
Rule 36    type -> optype
Rule 37    optype -> parenthesizedType
Rule 38    optype -> functionType
Rule 39    optype -> userType
Rule 40    typeModifiers -> typeModifier
Rule 41    typeModifiers -> typeModifier typeModifiers
Rule 42    typeModifier -> SUSPEND
Rule 43    typeProjectionModifier -> varianceModifier
Rule 44    varianceModifier -> IN
Rule 45    varianceModifier -> OUT
Rule 46    userType -> simpleUserType
Rule 47    simpleUserType -> simpleIdentifier typeArguments
Rule 48    simpleUserType -> simpleIdentifier
Rule 49    typeProjection -> typeProjectionModifiers type
Rule 50    typeProjection -> type
Rule 51    typeProjectionModifiers -> typeProjection
Rule 52    typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers
Rule 53    functionType -> receiverType PONTO functionTypeParameters SETA type
Rule 54    functionType -> functionTypeParameters SETA type
Rule 55    parameterOrType -> parameter
Rule 56    parameterOrType -> type
Rule 57    parameterOrTypeRecursive -> COMMA parameterOrType
Rule 58    parameterOrTypeRecursive -> COMMA parameterOrType parameterOrTypeRecursive
Rule 59    functionTypeParameters -> LPAREN parameterOrType parameterOrTypeRecursive RPAREN
Rule 60    parenthesizedType -> LPAREN type RPAREN
Rule 61    receiverType -> typeModifier parenthesizedType
Rule 62    statements -> statement
Rule 63    statements -> statement statements
Rule 64    statement -> functionDeclaration
Rule 65    statement -> assignment
Rule 66    statement -> loopStatement
Rule 67    statement -> expression
Rule 68    statement -> propertyDeclaration
Rule 69    statement -> chamadaDeFuncao
Rule 70    controlStructureBody -> block
Rule 71    controlStructureBody -> statement
Rule 72    block -> LCHAVE statements RCHAVE
Rule 73    loopStatement -> forStatement
Rule 74    loopStatement -> whileStatement
Rule 75    loopStatement -> doWhileStatement
Rule 76    forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody
Rule 77    forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN
Rule 78    whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody
Rule 79    whileStatement -> WHILE LPAREN expression RPAREN PV
Rule 80    doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN
Rule 81    doWhileStatement -> DO WHILE LPAREN expression RPAREN
Rule 82    parametersFunction -> primaryExpression
Rule 83    parametersFunction -> primaryExpression COMMA parametersFunction
Rule 84    chamadaDeFuncao -> ID LPAREN RPAREN
Rule 85    chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN
Rule 86    assignment -> directlyAssignableExpression ATRIBUICAO expression
Rule 87    assignment -> asExpression assignmentAndOperator expression
Rule 88    disjunction -> conjunction
Rule 89    disjunction -> conjunction OR disjunction
Rule 90    conjunction -> equality
Rule 91    conjunction -> equality AND conjunction
Rule 92    equality -> comparison
Rule 93    equality -> comparison equalityOperator equality
Rule 94    comparison -> infixOperation
Rule 95    comparison -> infixOperation comparisonOperator infixOperation
Rule 96    infixOperation -> elvisExpression infixOperationRecursive
Rule 97    infixOperation -> elvisExpression
Rule 98    infixOperationRecursive -> inOrIs elvisOrType
Rule 99    infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive
Rule 100   inOrIs -> inOperator
Rule 101   inOrIs -> isOperator
Rule 102   elvisOrType -> elvisExpression
Rule 103   elvisOrType -> type
Rule 104   elvisExpression -> infixFunctionCall
Rule 105   elvisExpression -> infixFunctionCall ELVIS elvisExpression
Rule 106   infixFunctionCall -> rangeExpression
Rule 107   infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall
Rule 108   rangeExpression -> additiveExpression
Rule 109   rangeExpression -> additiveExpression PONTOPONTO rangeExpression
Rule 110   additiveExpression -> multiplicativeExpression
Rule 111   additiveExpression -> multiplicativeExpression additiveOperator additiveExpression
Rule 112   multiplicativeExpression -> asExpression
Rule 113   multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression
Rule 114   asExpression -> prefixUnaryExpression
Rule 115   asExpression -> prefixUnaryExpression asOperator type
Rule 116   prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression
Rule 117   prefixUnaryExpression -> postfixUnaryExpression
Rule 118   unaryPrefix -> label
Rule 119   unaryPrefix -> prefixUnaryOperator
Rule 120   prefixUnaryExpressionRecursive -> unaryPrefix
Rule 121   prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive
Rule 122   postfixUnaryExpressionRecursive -> postfixUnarySuffix
Rule 123   postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive
Rule 124   postfixUnaryExpression -> primaryExpression
Rule 125   postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive
Rule 126   postfixUnarySuffix -> postfixUnaryOperator
Rule 127   postfixUnarySuffix -> typeArguments
Rule 128   postfixUnarySuffix -> callSuffix
Rule 129   postfixUnarySuffix -> indexingSuffix
Rule 130   postfixUnarySuffix -> navigationSuffix
Rule 131   directlyAssignableExpression -> postfixUnaryExpression assignableSuffix
Rule 132   directlyAssignableExpression -> simpleIdentifier
Rule 133   directlyAssignableExpression -> parenthesizedDirectlyAssignableExpression
Rule 134   parenthesizedDirectlyAssignableExpression -> LPAREN directlyAssignableExpression RPAREN
Rule 135   assignableExpression -> prefixUnaryExpression
Rule 136   assignableExpression -> parenthesizedAssignableExpression
Rule 137   parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN
Rule 138   assignableSuffix -> typeArguments
Rule 139   assignableSuffix -> indexingSuffix
Rule 140   assignableSuffix -> navigationSuffix
Rule 141   indexingSuffix -> LCCT indexingSuffixRecursive RCCT
Rule 142   indexingSuffix -> LCCT RCCT
Rule 143   indexingSuffixRecursive -> expression
Rule 144   indexingSuffixRecursive -> expression COMMA indexingSuffixRecursive
Rule 145   navigationSuffix -> memberAccessOperator simpleIdentifier CLASS
Rule 146   navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS
Rule 147   callSuffix -> typeArguments valueArguments annotatedLambda
Rule 148   callSuffix -> typeArguments valueArguments
Rule 149   callSuffix -> annotatedLambda
Rule 150   callSuffix -> valueArguments annotatedLambda
Rule 151   callSuffix -> valueArguments
Rule 152   annotatedLambda -> lambdaLiteral
Rule 153   typeArguments -> MENOR typeArgumentsRecursive MAIOR
Rule 154   typeArguments -> MENOR MAIOR
Rule 155   typeArgumentsRecursive -> typeProjection
Rule 156   typeArgumentsRecursive -> typeProjection COMMA typeArgumentsRecursive
Rule 157   valueArgumentsRecursive -> valueArgument
Rule 158   valueArgumentsRecursive -> valueArgument COMMA valueArgumentsRecursive
Rule 159   valueArguments -> LPAREN RPAREN
Rule 160   valueArguments -> LPAREN valueArgumentsRecursive RPAREN
Rule 161   valueArgument -> simpleIdentifier ATRIBUICAO MULT expression
Rule 162   valueArgument -> simpleIdentifier ATRIBUICAO expression
Rule 163   valueArgument -> expression
Rule 164   primaryExpression -> parenthesizedExpression
Rule 165   primaryExpression -> simpleIdentifier
Rule 166   primaryExpression -> LITERAL_STRING
Rule 167   primaryExpression -> NUMBER
Rule 168   primaryExpression -> callableReference
Rule 169   primaryExpression -> functionLiteral
Rule 170   primaryExpression -> collectionLiteral
Rule 171   primaryExpression -> ifExpression
Rule 172   primaryExpression -> jumpExpression
Rule 173   parenthesizedExpression -> LPAREN expression RPAREN
Rule 174   collectionLiteral -> LCCT collectionLiteralRecursive RCCT
Rule 175   collectionLiteral -> LCCT RCCT
Rule 176   collectionLiteralRecursive -> expression
Rule 177   collectionLiteralRecursive -> expression COMMA collectionLiteralRecursive
Rule 178   parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN
Rule 179   parametersWithOptionalType -> LPAREN RPAREN
Rule 180   parametersWithOptionalTypeRecursive -> parameterWithOptionalType
Rule 181   parametersWithOptionalTypeRecursive -> parameterWithOptionalType COMMA parametersWithOptionalTypeRecursive
Rule 182   parameterWithOptionalType -> parameterModifiers simpleIdentifier optionalType
Rule 183   parameterWithOptionalType -> parameterModifiers simpleIdentifier
Rule 184   parameterWithOptionalType -> simpleIdentifier optionalType
Rule 185   parameterWithOptionalType -> simpleIdentifier
Rule 186   parameterModifiers -> VARARG
Rule 187   parameterModifiers -> NOINLINE
Rule 188   parameterModifiers -> CROSSINLINE
Rule 189   lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE
Rule 190   optionsLambdaLiteral -> statements
Rule 191   optionsLambdaLiteral -> lambdaParameters SETA statements
Rule 192   optionsLambdaLiteral -> SETA statements
Rule 193   lambdaParameters -> lambdaParameter
Rule 194   lambdaParameters -> lambdaParameter COMMA lambdaParameters
Rule 195   lambdaParameter -> variableDeclaration
Rule 196   lambdaParameter -> multiVariableDeclaration optionalType
Rule 197   lambdaParameter -> multiVariableDeclaration
Rule 198   typePonto -> type PONTO
Rule 199   anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
Rule 200   anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody
Rule 201   anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody
Rule 202   anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody
Rule 203   anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints
Rule 204   anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody
Rule 205   anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody
Rule 206   anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints
Rule 207   anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody
Rule 208   anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints
Rule 209   anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType
Rule 210   anonymousFunction -> FUN typePonto parametersWithOptionalType
Rule 211   anonymousFunction -> FUN parametersWithOptionalType functionBody
Rule 212   anonymousFunction -> FUN parametersWithOptionalType optionalType
Rule 213   anonymousFunction -> FUN parametersWithOptionalType typeConstraints
Rule 214   anonymousFunction -> FUN parametersWithOptionalType
Rule 215   functionLiteral -> lambdaLiteral
Rule 216   functionLiteral -> anonymousFunction
Rule 217   typeConstraints -> simpleIdentifier DOISP type
Rule 218   ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV
Rule 219   ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
Rule 220   ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
Rule 221   ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
Rule 222   controlStructureBodyOrPV -> controlStructureBody
Rule 223   controlStructureBodyOrPV -> PV
Rule 224   jumpExpression -> RETURN expression
Rule 225   jumpExpression -> RETURN_AT expression
Rule 226   jumpExpression -> CONTINUE
Rule 227   jumpExpression -> CONTINUE_AT
Rule 228   jumpExpression -> BREAK
Rule 229   jumpExpression -> BREAK_AT
Rule 230   callableReference -> receiverType COLONCOLON simpleIdentifierOrClass
Rule 231   callableReference -> COLONCOLON simpleIdentifierOrClass
Rule 232   simpleIdentifierOrClass -> simpleIdentifier
Rule 233   simpleIdentifierOrClass -> CLASS
Rule 234   assignmentAndOperator -> MAISIGUAL
Rule 235   assignmentAndOperator -> MENOSIGUAL
Rule 236   assignmentAndOperator -> MULTIGUAL
Rule 237   assignmentAndOperator -> DIVIGUAL
Rule 238   assignmentAndOperator -> MODIGUAL
Rule 239   equalityOperator -> DIFERENTE
Rule 240   equalityOperator -> IDENTIDADE
Rule 241   equalityOperator -> IGUALDADE
Rule 242   equalityOperator -> SEMIDENTIDADE
Rule 243   comparisonOperator -> MENOR
Rule 244   comparisonOperator -> MAIOR
Rule 245   comparisonOperator -> MENORIGUAL
Rule 246   comparisonOperator -> MAIORIGUAL
Rule 247   inOperator -> IN
Rule 248   inOperator -> NOT_IN
Rule 249   isOperator -> IS
Rule 250   isOperator -> NOT_IS
Rule 251   additiveOperator -> PLUS
Rule 252   additiveOperator -> MINUS
Rule 253   multiplicativeOperator -> MULT
Rule 254   multiplicativeOperator -> DIVIDE
Rule 255   multiplicativeOperator -> MOD
Rule 256   asOperator -> AS
Rule 257   asOperator -> AS asOperator
Rule 258   prefixUnaryOperator -> INCREMENTO
Rule 259   prefixUnaryOperator -> DECREMENTO
Rule 260   prefixUnaryOperator -> MINUS
Rule 261   prefixUnaryOperator -> PLUS
Rule 262   prefixUnaryOperator -> NOT
Rule 263   postfixUnaryOperator -> INCREMENTO
Rule 264   postfixUnaryOperator -> DECREMENTO
Rule 265   memberAccessOperator -> safeNav
Rule 266   memberAccessOperator -> COLONCOLON
Rule 267   safeNav -> PONTO
Rule 268   label -> simpleIdentifier
Rule 269   simpleIdentifier -> ID
Rule 270   simpleIdentifier -> CROSSINLINE
Rule 271   simpleIdentifier -> IMPORT
Rule 272   simpleIdentifier -> INIT
Rule 273   simpleIdentifier -> NOINLINE
Rule 274   simpleIdentifier -> OUT
Rule 275   simpleIdentifier -> VARARG
Rule 276   simpleIdentifier -> WHERE
Rule 277   simpleIdentifier -> OPERATOR

Terminals, with rules where they appear

AND                  : 91
AS                   : 256 257
ATRIBUICAO           : 11 12 13 14 21 26 86 161 162
BOOLEAN              : 
BREAK                : 228
BREAK_AT             : 229
CHAR                 : 
CLASS                : 145 146 233
COLONCOLON           : 230 231 266
COMMA                : 16 17 25 33 57 58 83 144 156 158 177 181 194
CONST                : 
CONSTRUCTOR          : 
CONTINUE             : 226
CONTINUE_AT          : 227
CROSSINLINE          : 188 270
DECREMENTO           : 259 264
DIFERENTE            : 239
DIVIDE               : 254
DIVIGUAL             : 237
DO                   : 80 81
DOISP                : 3 19 28 217
DOUBLE               : 
ELSE                 : 219 220 221
ELVIS                : 105
EOF                  : 
FALSE                : 
FLOAT                : 
FOR                  : 76 77
FUN                  : 4 5 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214
FUNCTION             : 
ID                   : 84 85 269
IDENTIDADE           : 240
IF                   : 218 219 220 221
IGUALDADE            : 241
IMPORT               : 271
IN                   : 44 76 77 247
INCREMENTO           : 258 263
INIT                 : 272
INT                  : 
IS                   : 249
LCCT                 : 141 142 174 175
LCHAVE               : 72 189
LITERAL_STRING       : 166
LONG                 : 
LPAREN               : 22 23 30 31 59 60 76 77 78 79 80 81 84 85 134 137 159 160 173 178 179 218 219 220 221
MAIOR                : 15 153 154 244
MAIORIGUAL           : 246
MAISIGUAL            : 234
MENOR                : 15 153 154 243
MENORIGUAL           : 245
MENOSIGUAL           : 235
MINUS                : 252 260
MOD                  : 255
MODIGUAL             : 238
MULT                 : 161 253
MULTIGUAL            : 236
NOINLINE             : 187 273
NOT                  : 262
NOT_IN               : 248
NOT_IS               : 250
NULL                 : 
NULLABLE             : 
NUMBER               : 167
OBJECT               : 
OPERATOR             : 277
OR                   : 89
OUT                  : 45 274
PLUS                 : 251 261
PONTO                : 53 198 267
PONTOPONTO           : 109
PV                   : 11 12 79 219 220 223
RCCT                 : 141 142 174 175
RCHAVE               : 72 189
RETURN               : 224
RETURN_AT            : 225
RPAREN               : 22 23 30 31 59 60 76 77 78 79 80 81 84 85 134 137 159 160 173 178 179 218 219 220 221
SEMIDENTIDADE        : 242
SETA                 : 53 54 191 192
SMARTCAST            : 
STRING               : 
SUSPEND              : 42
THIS                 : 
TRUE                 : 
VAL                  : 10
VAR                  : 9
VARARG               : 186 275
WHEN                 : 
WHERE                : 276
WHILE                : 78 79 80 81
error                : 

Nonterminals, with rules where they appear

additiveExpression   : 108 109 111
additiveOperator     : 111
annotatedLambda      : 147 149 150
anonymousFunction    : 216
asExpression         : 87 112 113
asOperator           : 115 257
assignableExpression : 137
assignableSuffix     : 131
assignment           : 65
assignmentAndOperator : 87
block                : 20 70
callSuffix           : 128
callableReference    : 168
chamadaDeFuncao      : 69
collectionLiteral    : 170
collectionLiteralRecursive : 174 177
comparison           : 92 93
comparisonOperator   : 95
conjunction          : 88 89 91
controlStructureBody : 76 78 80 219 221 222
controlStructureBodyOrPV : 218 219 220 221
directlyAssignableExpression : 86 134
disjunction          : 8 89
doWhileStatement     : 75
elvisExpression      : 96 97 102 105
elvisOrType          : 98 99
equality             : 90 91 93
equalityOperator     : 93
expression           : 11 12 13 14 21 26 67 76 77 78 79 80 81 86 87 143 144 161 162 163 173 176 177 218 219 220 221 224 225
forStatement         : 73
functionBody         : 4 5 199 200 201 202 204 205 207 211
functionDeclaration  : 1 2 64
functionLiteral      : 169
functionType         : 38
functionTypeParameters : 53 54
functionValueParameter : 24 25
functionValueParameters : 4 5
functionValueParametersRecursive : 22 25
genericVariableDeclaration : 11 12 13 14 76 77
ifExpression         : 171
inOperator           : 100
inOrIs               : 98 99
indexingSuffix       : 129 139
indexingSuffixRecursive : 141 144
infixFunctionCall    : 104 105 107
infixOperation       : 94 95 95
infixOperationRecursive : 96 99
isOperator           : 101
jumpExpression       : 172
kotlinFile           : 1 0
label                : 118
lambdaLiteral        : 152 215
lambdaParameter      : 193 194
lambdaParameters     : 191 194
loopStatement        : 66
memberAccessOperator : 145 146
multiVariableDeclaration : 6 196 197
multiVariableDeclarationRecursive : 30 33
multiplicativeExpression : 110 111 113
multiplicativeOperator : 113
navigationSuffix     : 130 140
optionalType         : 5 34 182 184 196 199 200 202 203 205 206 209 212
optionsLambdaLiteral : 189
optype               : 35 36
parameter            : 26 27 55
parameterModifiers   : 182 183
parameterOrType      : 57 58 59
parameterOrTypeRecursive : 58 59
parameterWithOptionalType : 180 181
parametersFunction   : 83 85
parametersWithOptionalType : 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214
parametersWithOptionalTypeRecursive : 178 181
parenthesizedAssignableExpression : 136
parenthesizedDirectlyAssignableExpression : 133
parenthesizedExpression : 146 164
parenthesizedType    : 37 61
postfixUnaryExpression : 116 117 131
postfixUnaryExpressionRecursive : 123 125
postfixUnaryOperator : 126
postfixUnarySuffix   : 122 123
prefixUnaryExpression : 114 115 135
prefixUnaryExpressionRecursive : 116 121
prefixUnaryOperator  : 119
primaryExpression    : 82 83 124 125
propertyDeclaration  : 68
rangeExpression      : 106 107 109
receiverType         : 53 230
safeNav              : 265
simpleIdentifier     : 4 5 18 19 28 29 34 47 48 107 132 145 161 162 165 182 183 184 185 217 232 268
simpleIdentifierOrClass : 230 231
simpleUserType       : 46
statement            : 62 63 71
statements           : 63 72 190 191 192
type                 : 3 19 28 49 50 53 54 56 60 103 115 198 217
typeArguments        : 47 127 138 147 148
typeArgumentsRecursive : 153 156
typeConstraints      : 199 200 201 203 204 206 208 213
typeModifier         : 40 41 61
typeModifiers        : 35 41
typeParameter        : 15 16 17
typeParameters       : 11 14
typeParametersRecursive : 15 17
typePonto            : 199 201 202 203 207 208 209 210
typeProjection       : 51 155 156
typeProjectionModifier : 52
typeProjectionModifiers : 49 52
unaryPrefix          : 120 121
userType             : 39
valueArgument        : 157 158
valueArguments       : 147 148 150 151
valueArgumentsRecursive : 158 160
varOrVal             : 11 12 13 14
variableDeclaration  : 7 32 33 195
varianceModifier     : 43
whileStatement       : 74

Parsing method: LALR

state 0

    (0) S' -> . kotlinFile
    (1) kotlinFile -> . functionDeclaration kotlinFile
    (2) kotlinFile -> . functionDeclaration
    (4) functionDeclaration -> . FUN simpleIdentifier functionValueParameters functionBody
    (5) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType functionBody

    FUN             shift and go to state 3

    kotlinFile                     shift and go to state 1
    functionDeclaration            shift and go to state 2

state 1

    (0) S' -> kotlinFile .



state 2

    (1) kotlinFile -> functionDeclaration . kotlinFile
    (2) kotlinFile -> functionDeclaration .
    (1) kotlinFile -> . functionDeclaration kotlinFile
    (2) kotlinFile -> . functionDeclaration
    (4) functionDeclaration -> . FUN simpleIdentifier functionValueParameters functionBody
    (5) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType functionBody

    $end            reduce using rule 2 (kotlinFile -> functionDeclaration .)
    FUN             shift and go to state 3

    functionDeclaration            shift and go to state 2
    kotlinFile                     shift and go to state 4

state 3

    (4) functionDeclaration -> FUN . simpleIdentifier functionValueParameters functionBody
    (5) functionDeclaration -> FUN . simpleIdentifier functionValueParameters optionalType functionBody
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    simpleIdentifier               shift and go to state 5

state 4

    (1) kotlinFile -> functionDeclaration kotlinFile .

    $end            reduce using rule 1 (kotlinFile -> functionDeclaration kotlinFile .)


state 5

    (4) functionDeclaration -> FUN simpleIdentifier . functionValueParameters functionBody
    (5) functionDeclaration -> FUN simpleIdentifier . functionValueParameters optionalType functionBody
    (22) functionValueParameters -> . LPAREN functionValueParametersRecursive RPAREN
    (23) functionValueParameters -> . LPAREN RPAREN

    LPAREN          shift and go to state 16

    functionValueParameters        shift and go to state 15

state 6

    (269) simpleIdentifier -> ID .

    LPAREN          reduce using rule 269 (simpleIdentifier -> ID .)
    DOISP           reduce using rule 269 (simpleIdentifier -> ID .)
    FUN             reduce using rule 269 (simpleIdentifier -> ID .)
    $end            reduce using rule 269 (simpleIdentifier -> ID .)
    ID              reduce using rule 269 (simpleIdentifier -> ID .)
    FOR             reduce using rule 269 (simpleIdentifier -> ID .)
    WHILE           reduce using rule 269 (simpleIdentifier -> ID .)
    DO              reduce using rule 269 (simpleIdentifier -> ID .)
    VAR             reduce using rule 269 (simpleIdentifier -> ID .)
    VAL             reduce using rule 269 (simpleIdentifier -> ID .)
    CROSSINLINE     reduce using rule 269 (simpleIdentifier -> ID .)
    IMPORT          reduce using rule 269 (simpleIdentifier -> ID .)
    INIT            reduce using rule 269 (simpleIdentifier -> ID .)
    NOINLINE        reduce using rule 269 (simpleIdentifier -> ID .)
    OUT             reduce using rule 269 (simpleIdentifier -> ID .)
    VARARG          reduce using rule 269 (simpleIdentifier -> ID .)
    WHERE           reduce using rule 269 (simpleIdentifier -> ID .)
    OPERATOR        reduce using rule 269 (simpleIdentifier -> ID .)
    LITERAL_STRING  reduce using rule 269 (simpleIdentifier -> ID .)
    NUMBER          reduce using rule 269 (simpleIdentifier -> ID .)
    COLONCOLON      reduce using rule 269 (simpleIdentifier -> ID .)
    LCCT            reduce using rule 269 (simpleIdentifier -> ID .)
    IF              reduce using rule 269 (simpleIdentifier -> ID .)
    RETURN          reduce using rule 269 (simpleIdentifier -> ID .)
    RETURN_AT       reduce using rule 269 (simpleIdentifier -> ID .)
    CONTINUE        reduce using rule 269 (simpleIdentifier -> ID .)
    CONTINUE_AT     reduce using rule 269 (simpleIdentifier -> ID .)
    BREAK           reduce using rule 269 (simpleIdentifier -> ID .)
    BREAK_AT        reduce using rule 269 (simpleIdentifier -> ID .)
    LCHAVE          reduce using rule 269 (simpleIdentifier -> ID .)
    INCREMENTO      reduce using rule 269 (simpleIdentifier -> ID .)
    DECREMENTO      reduce using rule 269 (simpleIdentifier -> ID .)
    MINUS           reduce using rule 269 (simpleIdentifier -> ID .)
    PLUS            reduce using rule 269 (simpleIdentifier -> ID .)
    NOT             reduce using rule 269 (simpleIdentifier -> ID .)
    SUSPEND         reduce using rule 269 (simpleIdentifier -> ID .)
    RCHAVE          reduce using rule 269 (simpleIdentifier -> ID .)
    PV              reduce using rule 269 (simpleIdentifier -> ID .)
    ELSE            reduce using rule 269 (simpleIdentifier -> ID .)
    MENOR           reduce using rule 269 (simpleIdentifier -> ID .)
    PONTO           reduce using rule 269 (simpleIdentifier -> ID .)
    AS              reduce using rule 269 (simpleIdentifier -> ID .)
    MULT            reduce using rule 269 (simpleIdentifier -> ID .)
    DIVIDE          reduce using rule 269 (simpleIdentifier -> ID .)
    MOD             reduce using rule 269 (simpleIdentifier -> ID .)
    PONTOPONTO      reduce using rule 269 (simpleIdentifier -> ID .)
    ELVIS           reduce using rule 269 (simpleIdentifier -> ID .)
    IN              reduce using rule 269 (simpleIdentifier -> ID .)
    NOT_IN          reduce using rule 269 (simpleIdentifier -> ID .)
    IS              reduce using rule 269 (simpleIdentifier -> ID .)
    NOT_IS          reduce using rule 269 (simpleIdentifier -> ID .)
    MAIOR           reduce using rule 269 (simpleIdentifier -> ID .)
    MENORIGUAL      reduce using rule 269 (simpleIdentifier -> ID .)
    MAIORIGUAL      reduce using rule 269 (simpleIdentifier -> ID .)
    DIFERENTE       reduce using rule 269 (simpleIdentifier -> ID .)
    IDENTIDADE      reduce using rule 269 (simpleIdentifier -> ID .)
    IGUALDADE       reduce using rule 269 (simpleIdentifier -> ID .)
    SEMIDENTIDADE   reduce using rule 269 (simpleIdentifier -> ID .)
    AND             reduce using rule 269 (simpleIdentifier -> ID .)
    OR              reduce using rule 269 (simpleIdentifier -> ID .)
    MAISIGUAL       reduce using rule 269 (simpleIdentifier -> ID .)
    MENOSIGUAL      reduce using rule 269 (simpleIdentifier -> ID .)
    MULTIGUAL       reduce using rule 269 (simpleIdentifier -> ID .)
    DIVIGUAL        reduce using rule 269 (simpleIdentifier -> ID .)
    MODIGUAL        reduce using rule 269 (simpleIdentifier -> ID .)
    RPAREN          reduce using rule 269 (simpleIdentifier -> ID .)
    COMMA           reduce using rule 269 (simpleIdentifier -> ID .)
    RCCT            reduce using rule 269 (simpleIdentifier -> ID .)
    ATRIBUICAO      reduce using rule 269 (simpleIdentifier -> ID .)
    SETA            reduce using rule 269 (simpleIdentifier -> ID .)
    CLASS           reduce using rule 269 (simpleIdentifier -> ID .)


state 7

    (270) simpleIdentifier -> CROSSINLINE .

    LPAREN          reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    DOISP           reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    FUN             reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    $end            reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    ID              reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    FOR             reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    WHILE           reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    DO              reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    VAR             reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    VAL             reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    CROSSINLINE     reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    IMPORT          reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    INIT            reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    NOINLINE        reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    OUT             reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    VARARG          reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    WHERE           reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    OPERATOR        reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    LITERAL_STRING  reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    NUMBER          reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    COLONCOLON      reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    LCCT            reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    IF              reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    RETURN          reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    RETURN_AT       reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    CONTINUE        reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    CONTINUE_AT     reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    BREAK           reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    BREAK_AT        reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    LCHAVE          reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    INCREMENTO      reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    DECREMENTO      reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    MINUS           reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    PLUS            reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    NOT             reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    SUSPEND         reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    RCHAVE          reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    PV              reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    ELSE            reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    MENOR           reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    PONTO           reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    AS              reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    MULT            reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    DIVIDE          reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    MOD             reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    PONTOPONTO      reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    ELVIS           reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    IN              reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    NOT_IN          reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    IS              reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    NOT_IS          reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    MAIOR           reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    MENORIGUAL      reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    MAIORIGUAL      reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    DIFERENTE       reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    IDENTIDADE      reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    IGUALDADE       reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    SEMIDENTIDADE   reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    AND             reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    OR              reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    MAISIGUAL       reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    MENOSIGUAL      reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    MULTIGUAL       reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    DIVIGUAL        reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    MODIGUAL        reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    RPAREN          reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    COMMA           reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    RCCT            reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    ATRIBUICAO      reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    SETA            reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    CLASS           reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)


state 8

    (271) simpleIdentifier -> IMPORT .

    LPAREN          reduce using rule 271 (simpleIdentifier -> IMPORT .)
    DOISP           reduce using rule 271 (simpleIdentifier -> IMPORT .)
    FUN             reduce using rule 271 (simpleIdentifier -> IMPORT .)
    $end            reduce using rule 271 (simpleIdentifier -> IMPORT .)
    ID              reduce using rule 271 (simpleIdentifier -> IMPORT .)
    FOR             reduce using rule 271 (simpleIdentifier -> IMPORT .)
    WHILE           reduce using rule 271 (simpleIdentifier -> IMPORT .)
    DO              reduce using rule 271 (simpleIdentifier -> IMPORT .)
    VAR             reduce using rule 271 (simpleIdentifier -> IMPORT .)
    VAL             reduce using rule 271 (simpleIdentifier -> IMPORT .)
    CROSSINLINE     reduce using rule 271 (simpleIdentifier -> IMPORT .)
    IMPORT          reduce using rule 271 (simpleIdentifier -> IMPORT .)
    INIT            reduce using rule 271 (simpleIdentifier -> IMPORT .)
    NOINLINE        reduce using rule 271 (simpleIdentifier -> IMPORT .)
    OUT             reduce using rule 271 (simpleIdentifier -> IMPORT .)
    VARARG          reduce using rule 271 (simpleIdentifier -> IMPORT .)
    WHERE           reduce using rule 271 (simpleIdentifier -> IMPORT .)
    OPERATOR        reduce using rule 271 (simpleIdentifier -> IMPORT .)
    LITERAL_STRING  reduce using rule 271 (simpleIdentifier -> IMPORT .)
    NUMBER          reduce using rule 271 (simpleIdentifier -> IMPORT .)
    COLONCOLON      reduce using rule 271 (simpleIdentifier -> IMPORT .)
    LCCT            reduce using rule 271 (simpleIdentifier -> IMPORT .)
    IF              reduce using rule 271 (simpleIdentifier -> IMPORT .)
    RETURN          reduce using rule 271 (simpleIdentifier -> IMPORT .)
    RETURN_AT       reduce using rule 271 (simpleIdentifier -> IMPORT .)
    CONTINUE        reduce using rule 271 (simpleIdentifier -> IMPORT .)
    CONTINUE_AT     reduce using rule 271 (simpleIdentifier -> IMPORT .)
    BREAK           reduce using rule 271 (simpleIdentifier -> IMPORT .)
    BREAK_AT        reduce using rule 271 (simpleIdentifier -> IMPORT .)
    LCHAVE          reduce using rule 271 (simpleIdentifier -> IMPORT .)
    INCREMENTO      reduce using rule 271 (simpleIdentifier -> IMPORT .)
    DECREMENTO      reduce using rule 271 (simpleIdentifier -> IMPORT .)
    MINUS           reduce using rule 271 (simpleIdentifier -> IMPORT .)
    PLUS            reduce using rule 271 (simpleIdentifier -> IMPORT .)
    NOT             reduce using rule 271 (simpleIdentifier -> IMPORT .)
    SUSPEND         reduce using rule 271 (simpleIdentifier -> IMPORT .)
    RCHAVE          reduce using rule 271 (simpleIdentifier -> IMPORT .)
    PV              reduce using rule 271 (simpleIdentifier -> IMPORT .)
    ELSE            reduce using rule 271 (simpleIdentifier -> IMPORT .)
    MENOR           reduce using rule 271 (simpleIdentifier -> IMPORT .)
    PONTO           reduce using rule 271 (simpleIdentifier -> IMPORT .)
    AS              reduce using rule 271 (simpleIdentifier -> IMPORT .)
    MULT            reduce using rule 271 (simpleIdentifier -> IMPORT .)
    DIVIDE          reduce using rule 271 (simpleIdentifier -> IMPORT .)
    MOD             reduce using rule 271 (simpleIdentifier -> IMPORT .)
    PONTOPONTO      reduce using rule 271 (simpleIdentifier -> IMPORT .)
    ELVIS           reduce using rule 271 (simpleIdentifier -> IMPORT .)
    IN              reduce using rule 271 (simpleIdentifier -> IMPORT .)
    NOT_IN          reduce using rule 271 (simpleIdentifier -> IMPORT .)
    IS              reduce using rule 271 (simpleIdentifier -> IMPORT .)
    NOT_IS          reduce using rule 271 (simpleIdentifier -> IMPORT .)
    MAIOR           reduce using rule 271 (simpleIdentifier -> IMPORT .)
    MENORIGUAL      reduce using rule 271 (simpleIdentifier -> IMPORT .)
    MAIORIGUAL      reduce using rule 271 (simpleIdentifier -> IMPORT .)
    DIFERENTE       reduce using rule 271 (simpleIdentifier -> IMPORT .)
    IDENTIDADE      reduce using rule 271 (simpleIdentifier -> IMPORT .)
    IGUALDADE       reduce using rule 271 (simpleIdentifier -> IMPORT .)
    SEMIDENTIDADE   reduce using rule 271 (simpleIdentifier -> IMPORT .)
    AND             reduce using rule 271 (simpleIdentifier -> IMPORT .)
    OR              reduce using rule 271 (simpleIdentifier -> IMPORT .)
    MAISIGUAL       reduce using rule 271 (simpleIdentifier -> IMPORT .)
    MENOSIGUAL      reduce using rule 271 (simpleIdentifier -> IMPORT .)
    MULTIGUAL       reduce using rule 271 (simpleIdentifier -> IMPORT .)
    DIVIGUAL        reduce using rule 271 (simpleIdentifier -> IMPORT .)
    MODIGUAL        reduce using rule 271 (simpleIdentifier -> IMPORT .)
    RPAREN          reduce using rule 271 (simpleIdentifier -> IMPORT .)
    COMMA           reduce using rule 271 (simpleIdentifier -> IMPORT .)
    RCCT            reduce using rule 271 (simpleIdentifier -> IMPORT .)
    ATRIBUICAO      reduce using rule 271 (simpleIdentifier -> IMPORT .)
    SETA            reduce using rule 271 (simpleIdentifier -> IMPORT .)
    CLASS           reduce using rule 271 (simpleIdentifier -> IMPORT .)


state 9

    (272) simpleIdentifier -> INIT .

    LPAREN          reduce using rule 272 (simpleIdentifier -> INIT .)
    DOISP           reduce using rule 272 (simpleIdentifier -> INIT .)
    FUN             reduce using rule 272 (simpleIdentifier -> INIT .)
    $end            reduce using rule 272 (simpleIdentifier -> INIT .)
    ID              reduce using rule 272 (simpleIdentifier -> INIT .)
    FOR             reduce using rule 272 (simpleIdentifier -> INIT .)
    WHILE           reduce using rule 272 (simpleIdentifier -> INIT .)
    DO              reduce using rule 272 (simpleIdentifier -> INIT .)
    VAR             reduce using rule 272 (simpleIdentifier -> INIT .)
    VAL             reduce using rule 272 (simpleIdentifier -> INIT .)
    CROSSINLINE     reduce using rule 272 (simpleIdentifier -> INIT .)
    IMPORT          reduce using rule 272 (simpleIdentifier -> INIT .)
    INIT            reduce using rule 272 (simpleIdentifier -> INIT .)
    NOINLINE        reduce using rule 272 (simpleIdentifier -> INIT .)
    OUT             reduce using rule 272 (simpleIdentifier -> INIT .)
    VARARG          reduce using rule 272 (simpleIdentifier -> INIT .)
    WHERE           reduce using rule 272 (simpleIdentifier -> INIT .)
    OPERATOR        reduce using rule 272 (simpleIdentifier -> INIT .)
    LITERAL_STRING  reduce using rule 272 (simpleIdentifier -> INIT .)
    NUMBER          reduce using rule 272 (simpleIdentifier -> INIT .)
    COLONCOLON      reduce using rule 272 (simpleIdentifier -> INIT .)
    LCCT            reduce using rule 272 (simpleIdentifier -> INIT .)
    IF              reduce using rule 272 (simpleIdentifier -> INIT .)
    RETURN          reduce using rule 272 (simpleIdentifier -> INIT .)
    RETURN_AT       reduce using rule 272 (simpleIdentifier -> INIT .)
    CONTINUE        reduce using rule 272 (simpleIdentifier -> INIT .)
    CONTINUE_AT     reduce using rule 272 (simpleIdentifier -> INIT .)
    BREAK           reduce using rule 272 (simpleIdentifier -> INIT .)
    BREAK_AT        reduce using rule 272 (simpleIdentifier -> INIT .)
    LCHAVE          reduce using rule 272 (simpleIdentifier -> INIT .)
    INCREMENTO      reduce using rule 272 (simpleIdentifier -> INIT .)
    DECREMENTO      reduce using rule 272 (simpleIdentifier -> INIT .)
    MINUS           reduce using rule 272 (simpleIdentifier -> INIT .)
    PLUS            reduce using rule 272 (simpleIdentifier -> INIT .)
    NOT             reduce using rule 272 (simpleIdentifier -> INIT .)
    SUSPEND         reduce using rule 272 (simpleIdentifier -> INIT .)
    RCHAVE          reduce using rule 272 (simpleIdentifier -> INIT .)
    PV              reduce using rule 272 (simpleIdentifier -> INIT .)
    ELSE            reduce using rule 272 (simpleIdentifier -> INIT .)
    MENOR           reduce using rule 272 (simpleIdentifier -> INIT .)
    PONTO           reduce using rule 272 (simpleIdentifier -> INIT .)
    AS              reduce using rule 272 (simpleIdentifier -> INIT .)
    MULT            reduce using rule 272 (simpleIdentifier -> INIT .)
    DIVIDE          reduce using rule 272 (simpleIdentifier -> INIT .)
    MOD             reduce using rule 272 (simpleIdentifier -> INIT .)
    PONTOPONTO      reduce using rule 272 (simpleIdentifier -> INIT .)
    ELVIS           reduce using rule 272 (simpleIdentifier -> INIT .)
    IN              reduce using rule 272 (simpleIdentifier -> INIT .)
    NOT_IN          reduce using rule 272 (simpleIdentifier -> INIT .)
    IS              reduce using rule 272 (simpleIdentifier -> INIT .)
    NOT_IS          reduce using rule 272 (simpleIdentifier -> INIT .)
    MAIOR           reduce using rule 272 (simpleIdentifier -> INIT .)
    MENORIGUAL      reduce using rule 272 (simpleIdentifier -> INIT .)
    MAIORIGUAL      reduce using rule 272 (simpleIdentifier -> INIT .)
    DIFERENTE       reduce using rule 272 (simpleIdentifier -> INIT .)
    IDENTIDADE      reduce using rule 272 (simpleIdentifier -> INIT .)
    IGUALDADE       reduce using rule 272 (simpleIdentifier -> INIT .)
    SEMIDENTIDADE   reduce using rule 272 (simpleIdentifier -> INIT .)
    AND             reduce using rule 272 (simpleIdentifier -> INIT .)
    OR              reduce using rule 272 (simpleIdentifier -> INIT .)
    MAISIGUAL       reduce using rule 272 (simpleIdentifier -> INIT .)
    MENOSIGUAL      reduce using rule 272 (simpleIdentifier -> INIT .)
    MULTIGUAL       reduce using rule 272 (simpleIdentifier -> INIT .)
    DIVIGUAL        reduce using rule 272 (simpleIdentifier -> INIT .)
    MODIGUAL        reduce using rule 272 (simpleIdentifier -> INIT .)
    RPAREN          reduce using rule 272 (simpleIdentifier -> INIT .)
    COMMA           reduce using rule 272 (simpleIdentifier -> INIT .)
    RCCT            reduce using rule 272 (simpleIdentifier -> INIT .)
    ATRIBUICAO      reduce using rule 272 (simpleIdentifier -> INIT .)
    SETA            reduce using rule 272 (simpleIdentifier -> INIT .)
    CLASS           reduce using rule 272 (simpleIdentifier -> INIT .)


state 10

    (273) simpleIdentifier -> NOINLINE .

    LPAREN          reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    DOISP           reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    FUN             reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    $end            reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    ID              reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    FOR             reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    WHILE           reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    DO              reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    VAR             reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    VAL             reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    CROSSINLINE     reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    IMPORT          reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    INIT            reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    NOINLINE        reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    OUT             reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    VARARG          reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    WHERE           reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    OPERATOR        reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    LITERAL_STRING  reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    NUMBER          reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    COLONCOLON      reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    LCCT            reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    IF              reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    RETURN          reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    RETURN_AT       reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    CONTINUE        reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    CONTINUE_AT     reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    BREAK           reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    BREAK_AT        reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    LCHAVE          reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    INCREMENTO      reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    DECREMENTO      reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    MINUS           reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    PLUS            reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    NOT             reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    SUSPEND         reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    RCHAVE          reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    PV              reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    ELSE            reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    MENOR           reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    PONTO           reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    AS              reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    MULT            reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    DIVIDE          reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    MOD             reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    PONTOPONTO      reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    ELVIS           reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    IN              reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    NOT_IN          reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    IS              reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    NOT_IS          reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    MAIOR           reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    MENORIGUAL      reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    MAIORIGUAL      reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    DIFERENTE       reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    IDENTIDADE      reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    IGUALDADE       reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    SEMIDENTIDADE   reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    AND             reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    OR              reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    MAISIGUAL       reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    MENOSIGUAL      reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    MULTIGUAL       reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    DIVIGUAL        reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    MODIGUAL        reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    RPAREN          reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    COMMA           reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    RCCT            reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    ATRIBUICAO      reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    SETA            reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    CLASS           reduce using rule 273 (simpleIdentifier -> NOINLINE .)


state 11

    (274) simpleIdentifier -> OUT .

    LPAREN          reduce using rule 274 (simpleIdentifier -> OUT .)
    DOISP           reduce using rule 274 (simpleIdentifier -> OUT .)
    FUN             reduce using rule 274 (simpleIdentifier -> OUT .)
    $end            reduce using rule 274 (simpleIdentifier -> OUT .)
    ID              reduce using rule 274 (simpleIdentifier -> OUT .)
    FOR             reduce using rule 274 (simpleIdentifier -> OUT .)
    WHILE           reduce using rule 274 (simpleIdentifier -> OUT .)
    DO              reduce using rule 274 (simpleIdentifier -> OUT .)
    VAR             reduce using rule 274 (simpleIdentifier -> OUT .)
    VAL             reduce using rule 274 (simpleIdentifier -> OUT .)
    CROSSINLINE     reduce using rule 274 (simpleIdentifier -> OUT .)
    IMPORT          reduce using rule 274 (simpleIdentifier -> OUT .)
    INIT            reduce using rule 274 (simpleIdentifier -> OUT .)
    NOINLINE        reduce using rule 274 (simpleIdentifier -> OUT .)
    OUT             reduce using rule 274 (simpleIdentifier -> OUT .)
    VARARG          reduce using rule 274 (simpleIdentifier -> OUT .)
    WHERE           reduce using rule 274 (simpleIdentifier -> OUT .)
    OPERATOR        reduce using rule 274 (simpleIdentifier -> OUT .)
    LITERAL_STRING  reduce using rule 274 (simpleIdentifier -> OUT .)
    NUMBER          reduce using rule 274 (simpleIdentifier -> OUT .)
    COLONCOLON      reduce using rule 274 (simpleIdentifier -> OUT .)
    LCCT            reduce using rule 274 (simpleIdentifier -> OUT .)
    IF              reduce using rule 274 (simpleIdentifier -> OUT .)
    RETURN          reduce using rule 274 (simpleIdentifier -> OUT .)
    RETURN_AT       reduce using rule 274 (simpleIdentifier -> OUT .)
    CONTINUE        reduce using rule 274 (simpleIdentifier -> OUT .)
    CONTINUE_AT     reduce using rule 274 (simpleIdentifier -> OUT .)
    BREAK           reduce using rule 274 (simpleIdentifier -> OUT .)
    BREAK_AT        reduce using rule 274 (simpleIdentifier -> OUT .)
    LCHAVE          reduce using rule 274 (simpleIdentifier -> OUT .)
    INCREMENTO      reduce using rule 274 (simpleIdentifier -> OUT .)
    DECREMENTO      reduce using rule 274 (simpleIdentifier -> OUT .)
    MINUS           reduce using rule 274 (simpleIdentifier -> OUT .)
    PLUS            reduce using rule 274 (simpleIdentifier -> OUT .)
    NOT             reduce using rule 274 (simpleIdentifier -> OUT .)
    SUSPEND         reduce using rule 274 (simpleIdentifier -> OUT .)
    RCHAVE          reduce using rule 274 (simpleIdentifier -> OUT .)
    PV              reduce using rule 274 (simpleIdentifier -> OUT .)
    ELSE            reduce using rule 274 (simpleIdentifier -> OUT .)
    MENOR           reduce using rule 274 (simpleIdentifier -> OUT .)
    PONTO           reduce using rule 274 (simpleIdentifier -> OUT .)
    AS              reduce using rule 274 (simpleIdentifier -> OUT .)
    MULT            reduce using rule 274 (simpleIdentifier -> OUT .)
    DIVIDE          reduce using rule 274 (simpleIdentifier -> OUT .)
    MOD             reduce using rule 274 (simpleIdentifier -> OUT .)
    PONTOPONTO      reduce using rule 274 (simpleIdentifier -> OUT .)
    ELVIS           reduce using rule 274 (simpleIdentifier -> OUT .)
    IN              reduce using rule 274 (simpleIdentifier -> OUT .)
    NOT_IN          reduce using rule 274 (simpleIdentifier -> OUT .)
    IS              reduce using rule 274 (simpleIdentifier -> OUT .)
    NOT_IS          reduce using rule 274 (simpleIdentifier -> OUT .)
    MAIOR           reduce using rule 274 (simpleIdentifier -> OUT .)
    MENORIGUAL      reduce using rule 274 (simpleIdentifier -> OUT .)
    MAIORIGUAL      reduce using rule 274 (simpleIdentifier -> OUT .)
    DIFERENTE       reduce using rule 274 (simpleIdentifier -> OUT .)
    IDENTIDADE      reduce using rule 274 (simpleIdentifier -> OUT .)
    IGUALDADE       reduce using rule 274 (simpleIdentifier -> OUT .)
    SEMIDENTIDADE   reduce using rule 274 (simpleIdentifier -> OUT .)
    AND             reduce using rule 274 (simpleIdentifier -> OUT .)
    OR              reduce using rule 274 (simpleIdentifier -> OUT .)
    MAISIGUAL       reduce using rule 274 (simpleIdentifier -> OUT .)
    MENOSIGUAL      reduce using rule 274 (simpleIdentifier -> OUT .)
    MULTIGUAL       reduce using rule 274 (simpleIdentifier -> OUT .)
    DIVIGUAL        reduce using rule 274 (simpleIdentifier -> OUT .)
    MODIGUAL        reduce using rule 274 (simpleIdentifier -> OUT .)
    RPAREN          reduce using rule 274 (simpleIdentifier -> OUT .)
    COMMA           reduce using rule 274 (simpleIdentifier -> OUT .)
    RCCT            reduce using rule 274 (simpleIdentifier -> OUT .)
    ATRIBUICAO      reduce using rule 274 (simpleIdentifier -> OUT .)
    SETA            reduce using rule 274 (simpleIdentifier -> OUT .)
    CLASS           reduce using rule 274 (simpleIdentifier -> OUT .)


state 12

    (275) simpleIdentifier -> VARARG .

    LPAREN          reduce using rule 275 (simpleIdentifier -> VARARG .)
    DOISP           reduce using rule 275 (simpleIdentifier -> VARARG .)
    FUN             reduce using rule 275 (simpleIdentifier -> VARARG .)
    $end            reduce using rule 275 (simpleIdentifier -> VARARG .)
    ID              reduce using rule 275 (simpleIdentifier -> VARARG .)
    FOR             reduce using rule 275 (simpleIdentifier -> VARARG .)
    WHILE           reduce using rule 275 (simpleIdentifier -> VARARG .)
    DO              reduce using rule 275 (simpleIdentifier -> VARARG .)
    VAR             reduce using rule 275 (simpleIdentifier -> VARARG .)
    VAL             reduce using rule 275 (simpleIdentifier -> VARARG .)
    CROSSINLINE     reduce using rule 275 (simpleIdentifier -> VARARG .)
    IMPORT          reduce using rule 275 (simpleIdentifier -> VARARG .)
    INIT            reduce using rule 275 (simpleIdentifier -> VARARG .)
    NOINLINE        reduce using rule 275 (simpleIdentifier -> VARARG .)
    OUT             reduce using rule 275 (simpleIdentifier -> VARARG .)
    VARARG          reduce using rule 275 (simpleIdentifier -> VARARG .)
    WHERE           reduce using rule 275 (simpleIdentifier -> VARARG .)
    OPERATOR        reduce using rule 275 (simpleIdentifier -> VARARG .)
    LITERAL_STRING  reduce using rule 275 (simpleIdentifier -> VARARG .)
    NUMBER          reduce using rule 275 (simpleIdentifier -> VARARG .)
    COLONCOLON      reduce using rule 275 (simpleIdentifier -> VARARG .)
    LCCT            reduce using rule 275 (simpleIdentifier -> VARARG .)
    IF              reduce using rule 275 (simpleIdentifier -> VARARG .)
    RETURN          reduce using rule 275 (simpleIdentifier -> VARARG .)
    RETURN_AT       reduce using rule 275 (simpleIdentifier -> VARARG .)
    CONTINUE        reduce using rule 275 (simpleIdentifier -> VARARG .)
    CONTINUE_AT     reduce using rule 275 (simpleIdentifier -> VARARG .)
    BREAK           reduce using rule 275 (simpleIdentifier -> VARARG .)
    BREAK_AT        reduce using rule 275 (simpleIdentifier -> VARARG .)
    LCHAVE          reduce using rule 275 (simpleIdentifier -> VARARG .)
    INCREMENTO      reduce using rule 275 (simpleIdentifier -> VARARG .)
    DECREMENTO      reduce using rule 275 (simpleIdentifier -> VARARG .)
    MINUS           reduce using rule 275 (simpleIdentifier -> VARARG .)
    PLUS            reduce using rule 275 (simpleIdentifier -> VARARG .)
    NOT             reduce using rule 275 (simpleIdentifier -> VARARG .)
    SUSPEND         reduce using rule 275 (simpleIdentifier -> VARARG .)
    RCHAVE          reduce using rule 275 (simpleIdentifier -> VARARG .)
    PV              reduce using rule 275 (simpleIdentifier -> VARARG .)
    ELSE            reduce using rule 275 (simpleIdentifier -> VARARG .)
    MENOR           reduce using rule 275 (simpleIdentifier -> VARARG .)
    PONTO           reduce using rule 275 (simpleIdentifier -> VARARG .)
    AS              reduce using rule 275 (simpleIdentifier -> VARARG .)
    MULT            reduce using rule 275 (simpleIdentifier -> VARARG .)
    DIVIDE          reduce using rule 275 (simpleIdentifier -> VARARG .)
    MOD             reduce using rule 275 (simpleIdentifier -> VARARG .)
    PONTOPONTO      reduce using rule 275 (simpleIdentifier -> VARARG .)
    ELVIS           reduce using rule 275 (simpleIdentifier -> VARARG .)
    IN              reduce using rule 275 (simpleIdentifier -> VARARG .)
    NOT_IN          reduce using rule 275 (simpleIdentifier -> VARARG .)
    IS              reduce using rule 275 (simpleIdentifier -> VARARG .)
    NOT_IS          reduce using rule 275 (simpleIdentifier -> VARARG .)
    MAIOR           reduce using rule 275 (simpleIdentifier -> VARARG .)
    MENORIGUAL      reduce using rule 275 (simpleIdentifier -> VARARG .)
    MAIORIGUAL      reduce using rule 275 (simpleIdentifier -> VARARG .)
    DIFERENTE       reduce using rule 275 (simpleIdentifier -> VARARG .)
    IDENTIDADE      reduce using rule 275 (simpleIdentifier -> VARARG .)
    IGUALDADE       reduce using rule 275 (simpleIdentifier -> VARARG .)
    SEMIDENTIDADE   reduce using rule 275 (simpleIdentifier -> VARARG .)
    AND             reduce using rule 275 (simpleIdentifier -> VARARG .)
    OR              reduce using rule 275 (simpleIdentifier -> VARARG .)
    MAISIGUAL       reduce using rule 275 (simpleIdentifier -> VARARG .)
    MENOSIGUAL      reduce using rule 275 (simpleIdentifier -> VARARG .)
    MULTIGUAL       reduce using rule 275 (simpleIdentifier -> VARARG .)
    DIVIGUAL        reduce using rule 275 (simpleIdentifier -> VARARG .)
    MODIGUAL        reduce using rule 275 (simpleIdentifier -> VARARG .)
    RPAREN          reduce using rule 275 (simpleIdentifier -> VARARG .)
    COMMA           reduce using rule 275 (simpleIdentifier -> VARARG .)
    RCCT            reduce using rule 275 (simpleIdentifier -> VARARG .)
    ATRIBUICAO      reduce using rule 275 (simpleIdentifier -> VARARG .)
    SETA            reduce using rule 275 (simpleIdentifier -> VARARG .)
    CLASS           reduce using rule 275 (simpleIdentifier -> VARARG .)


state 13

    (276) simpleIdentifier -> WHERE .

    LPAREN          reduce using rule 276 (simpleIdentifier -> WHERE .)
    DOISP           reduce using rule 276 (simpleIdentifier -> WHERE .)
    FUN             reduce using rule 276 (simpleIdentifier -> WHERE .)
    $end            reduce using rule 276 (simpleIdentifier -> WHERE .)
    ID              reduce using rule 276 (simpleIdentifier -> WHERE .)
    FOR             reduce using rule 276 (simpleIdentifier -> WHERE .)
    WHILE           reduce using rule 276 (simpleIdentifier -> WHERE .)
    DO              reduce using rule 276 (simpleIdentifier -> WHERE .)
    VAR             reduce using rule 276 (simpleIdentifier -> WHERE .)
    VAL             reduce using rule 276 (simpleIdentifier -> WHERE .)
    CROSSINLINE     reduce using rule 276 (simpleIdentifier -> WHERE .)
    IMPORT          reduce using rule 276 (simpleIdentifier -> WHERE .)
    INIT            reduce using rule 276 (simpleIdentifier -> WHERE .)
    NOINLINE        reduce using rule 276 (simpleIdentifier -> WHERE .)
    OUT             reduce using rule 276 (simpleIdentifier -> WHERE .)
    VARARG          reduce using rule 276 (simpleIdentifier -> WHERE .)
    WHERE           reduce using rule 276 (simpleIdentifier -> WHERE .)
    OPERATOR        reduce using rule 276 (simpleIdentifier -> WHERE .)
    LITERAL_STRING  reduce using rule 276 (simpleIdentifier -> WHERE .)
    NUMBER          reduce using rule 276 (simpleIdentifier -> WHERE .)
    COLONCOLON      reduce using rule 276 (simpleIdentifier -> WHERE .)
    LCCT            reduce using rule 276 (simpleIdentifier -> WHERE .)
    IF              reduce using rule 276 (simpleIdentifier -> WHERE .)
    RETURN          reduce using rule 276 (simpleIdentifier -> WHERE .)
    RETURN_AT       reduce using rule 276 (simpleIdentifier -> WHERE .)
    CONTINUE        reduce using rule 276 (simpleIdentifier -> WHERE .)
    CONTINUE_AT     reduce using rule 276 (simpleIdentifier -> WHERE .)
    BREAK           reduce using rule 276 (simpleIdentifier -> WHERE .)
    BREAK_AT        reduce using rule 276 (simpleIdentifier -> WHERE .)
    LCHAVE          reduce using rule 276 (simpleIdentifier -> WHERE .)
    INCREMENTO      reduce using rule 276 (simpleIdentifier -> WHERE .)
    DECREMENTO      reduce using rule 276 (simpleIdentifier -> WHERE .)
    MINUS           reduce using rule 276 (simpleIdentifier -> WHERE .)
    PLUS            reduce using rule 276 (simpleIdentifier -> WHERE .)
    NOT             reduce using rule 276 (simpleIdentifier -> WHERE .)
    SUSPEND         reduce using rule 276 (simpleIdentifier -> WHERE .)
    RCHAVE          reduce using rule 276 (simpleIdentifier -> WHERE .)
    PV              reduce using rule 276 (simpleIdentifier -> WHERE .)
    ELSE            reduce using rule 276 (simpleIdentifier -> WHERE .)
    MENOR           reduce using rule 276 (simpleIdentifier -> WHERE .)
    PONTO           reduce using rule 276 (simpleIdentifier -> WHERE .)
    AS              reduce using rule 276 (simpleIdentifier -> WHERE .)
    MULT            reduce using rule 276 (simpleIdentifier -> WHERE .)
    DIVIDE          reduce using rule 276 (simpleIdentifier -> WHERE .)
    MOD             reduce using rule 276 (simpleIdentifier -> WHERE .)
    PONTOPONTO      reduce using rule 276 (simpleIdentifier -> WHERE .)
    ELVIS           reduce using rule 276 (simpleIdentifier -> WHERE .)
    IN              reduce using rule 276 (simpleIdentifier -> WHERE .)
    NOT_IN          reduce using rule 276 (simpleIdentifier -> WHERE .)
    IS              reduce using rule 276 (simpleIdentifier -> WHERE .)
    NOT_IS          reduce using rule 276 (simpleIdentifier -> WHERE .)
    MAIOR           reduce using rule 276 (simpleIdentifier -> WHERE .)
    MENORIGUAL      reduce using rule 276 (simpleIdentifier -> WHERE .)
    MAIORIGUAL      reduce using rule 276 (simpleIdentifier -> WHERE .)
    DIFERENTE       reduce using rule 276 (simpleIdentifier -> WHERE .)
    IDENTIDADE      reduce using rule 276 (simpleIdentifier -> WHERE .)
    IGUALDADE       reduce using rule 276 (simpleIdentifier -> WHERE .)
    SEMIDENTIDADE   reduce using rule 276 (simpleIdentifier -> WHERE .)
    AND             reduce using rule 276 (simpleIdentifier -> WHERE .)
    OR              reduce using rule 276 (simpleIdentifier -> WHERE .)
    MAISIGUAL       reduce using rule 276 (simpleIdentifier -> WHERE .)
    MENOSIGUAL      reduce using rule 276 (simpleIdentifier -> WHERE .)
    MULTIGUAL       reduce using rule 276 (simpleIdentifier -> WHERE .)
    DIVIGUAL        reduce using rule 276 (simpleIdentifier -> WHERE .)
    MODIGUAL        reduce using rule 276 (simpleIdentifier -> WHERE .)
    RPAREN          reduce using rule 276 (simpleIdentifier -> WHERE .)
    COMMA           reduce using rule 276 (simpleIdentifier -> WHERE .)
    RCCT            reduce using rule 276 (simpleIdentifier -> WHERE .)
    ATRIBUICAO      reduce using rule 276 (simpleIdentifier -> WHERE .)
    SETA            reduce using rule 276 (simpleIdentifier -> WHERE .)
    CLASS           reduce using rule 276 (simpleIdentifier -> WHERE .)


state 14

    (277) simpleIdentifier -> OPERATOR .

    LPAREN          reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    DOISP           reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    FUN             reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    $end            reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    ID              reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    FOR             reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    WHILE           reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    DO              reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    VAR             reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    VAL             reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    CROSSINLINE     reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    IMPORT          reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    INIT            reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    NOINLINE        reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    OUT             reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    VARARG          reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    WHERE           reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    OPERATOR        reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    LITERAL_STRING  reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    NUMBER          reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    COLONCOLON      reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    LCCT            reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    IF              reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    RETURN          reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    RETURN_AT       reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    CONTINUE        reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    CONTINUE_AT     reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    BREAK           reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    BREAK_AT        reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    LCHAVE          reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    INCREMENTO      reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    DECREMENTO      reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    MINUS           reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    PLUS            reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    NOT             reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    SUSPEND         reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    RCHAVE          reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    PV              reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    ELSE            reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    MENOR           reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    PONTO           reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    AS              reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    MULT            reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    DIVIDE          reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    MOD             reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    PONTOPONTO      reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    ELVIS           reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    IN              reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    NOT_IN          reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    IS              reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    NOT_IS          reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    MAIOR           reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    MENORIGUAL      reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    MAIORIGUAL      reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    DIFERENTE       reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    IDENTIDADE      reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    IGUALDADE       reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    SEMIDENTIDADE   reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    AND             reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    OR              reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    MAISIGUAL       reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    MENOSIGUAL      reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    MULTIGUAL       reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    DIVIGUAL        reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    MODIGUAL        reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    RPAREN          reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    COMMA           reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    RCCT            reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    ATRIBUICAO      reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    SETA            reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    CLASS           reduce using rule 277 (simpleIdentifier -> OPERATOR .)


state 15

    (4) functionDeclaration -> FUN simpleIdentifier functionValueParameters . functionBody
    (5) functionDeclaration -> FUN simpleIdentifier functionValueParameters . optionalType functionBody
    (20) functionBody -> . block
    (21) functionBody -> . ATRIBUICAO expression
    (3) optionalType -> . DOISP type
    (72) block -> . LCHAVE statements RCHAVE

    ATRIBUICAO      shift and go to state 20
    DOISP           shift and go to state 21
    LCHAVE          shift and go to state 22

    functionBody                   shift and go to state 17
    optionalType                   shift and go to state 18
    block                          shift and go to state 19

state 16

    (22) functionValueParameters -> LPAREN . functionValueParametersRecursive RPAREN
    (23) functionValueParameters -> LPAREN . RPAREN
    (24) functionValueParametersRecursive -> . functionValueParameter
    (25) functionValueParametersRecursive -> . functionValueParameter COMMA functionValueParametersRecursive
    (26) functionValueParameter -> . parameter ATRIBUICAO expression
    (27) functionValueParameter -> . parameter
    (34) parameter -> . simpleIdentifier optionalType
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    RPAREN          shift and go to state 24
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    functionValueParametersRecursive shift and go to state 23
    functionValueParameter         shift and go to state 25
    parameter                      shift and go to state 26
    simpleIdentifier               shift and go to state 27

state 17

    (4) functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .

    FUN             reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    $end            reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    ID              reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    FOR             reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    WHILE           reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    DO              reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    VAR             reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    VAL             reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    CROSSINLINE     reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    IMPORT          reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    INIT            reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    NOINLINE        reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    OUT             reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    VARARG          reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    WHERE           reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    OPERATOR        reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    LPAREN          reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    LITERAL_STRING  reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    NUMBER          reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    COLONCOLON      reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    LCCT            reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    IF              reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    RETURN          reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    RETURN_AT       reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    CONTINUE        reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    CONTINUE_AT     reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    BREAK           reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    BREAK_AT        reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    LCHAVE          reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    INCREMENTO      reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    DECREMENTO      reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    MINUS           reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    PLUS            reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    NOT             reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    SUSPEND         reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    RCHAVE          reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    PV              reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    ELSE            reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    MENOR           reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    PONTO           reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    AS              reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    MULT            reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    DIVIDE          reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    MOD             reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    PONTOPONTO      reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    ELVIS           reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    IN              reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    NOT_IN          reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    IS              reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    NOT_IS          reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    MAIOR           reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    MENORIGUAL      reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    MAIORIGUAL      reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    DIFERENTE       reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    IDENTIDADE      reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    IGUALDADE       reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    SEMIDENTIDADE   reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    AND             reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    OR              reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    MAISIGUAL       reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    MENOSIGUAL      reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    MULTIGUAL       reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    DIVIGUAL        reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    MODIGUAL        reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    RPAREN          reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    COMMA           reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)
    RCCT            reduce using rule 4 (functionDeclaration -> FUN simpleIdentifier functionValueParameters functionBody .)


state 18

    (5) functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType . functionBody
    (20) functionBody -> . block
    (21) functionBody -> . ATRIBUICAO expression
    (72) block -> . LCHAVE statements RCHAVE

    ATRIBUICAO      shift and go to state 20
    LCHAVE          shift and go to state 22

    functionBody                   shift and go to state 28
    block                          shift and go to state 19

state 19

    (20) functionBody -> block .

    FUN             reduce using rule 20 (functionBody -> block .)
    $end            reduce using rule 20 (functionBody -> block .)
    ID              reduce using rule 20 (functionBody -> block .)
    FOR             reduce using rule 20 (functionBody -> block .)
    WHILE           reduce using rule 20 (functionBody -> block .)
    DO              reduce using rule 20 (functionBody -> block .)
    VAR             reduce using rule 20 (functionBody -> block .)
    VAL             reduce using rule 20 (functionBody -> block .)
    CROSSINLINE     reduce using rule 20 (functionBody -> block .)
    IMPORT          reduce using rule 20 (functionBody -> block .)
    INIT            reduce using rule 20 (functionBody -> block .)
    NOINLINE        reduce using rule 20 (functionBody -> block .)
    OUT             reduce using rule 20 (functionBody -> block .)
    VARARG          reduce using rule 20 (functionBody -> block .)
    WHERE           reduce using rule 20 (functionBody -> block .)
    OPERATOR        reduce using rule 20 (functionBody -> block .)
    LPAREN          reduce using rule 20 (functionBody -> block .)
    LITERAL_STRING  reduce using rule 20 (functionBody -> block .)
    NUMBER          reduce using rule 20 (functionBody -> block .)
    COLONCOLON      reduce using rule 20 (functionBody -> block .)
    LCCT            reduce using rule 20 (functionBody -> block .)
    IF              reduce using rule 20 (functionBody -> block .)
    RETURN          reduce using rule 20 (functionBody -> block .)
    RETURN_AT       reduce using rule 20 (functionBody -> block .)
    CONTINUE        reduce using rule 20 (functionBody -> block .)
    CONTINUE_AT     reduce using rule 20 (functionBody -> block .)
    BREAK           reduce using rule 20 (functionBody -> block .)
    BREAK_AT        reduce using rule 20 (functionBody -> block .)
    LCHAVE          reduce using rule 20 (functionBody -> block .)
    INCREMENTO      reduce using rule 20 (functionBody -> block .)
    DECREMENTO      reduce using rule 20 (functionBody -> block .)
    MINUS           reduce using rule 20 (functionBody -> block .)
    PLUS            reduce using rule 20 (functionBody -> block .)
    NOT             reduce using rule 20 (functionBody -> block .)
    SUSPEND         reduce using rule 20 (functionBody -> block .)
    RCHAVE          reduce using rule 20 (functionBody -> block .)
    PV              reduce using rule 20 (functionBody -> block .)
    ELSE            reduce using rule 20 (functionBody -> block .)
    MENOR           reduce using rule 20 (functionBody -> block .)
    PONTO           reduce using rule 20 (functionBody -> block .)
    AS              reduce using rule 20 (functionBody -> block .)
    MULT            reduce using rule 20 (functionBody -> block .)
    DIVIDE          reduce using rule 20 (functionBody -> block .)
    MOD             reduce using rule 20 (functionBody -> block .)
    PONTOPONTO      reduce using rule 20 (functionBody -> block .)
    ELVIS           reduce using rule 20 (functionBody -> block .)
    IN              reduce using rule 20 (functionBody -> block .)
    NOT_IN          reduce using rule 20 (functionBody -> block .)
    IS              reduce using rule 20 (functionBody -> block .)
    NOT_IS          reduce using rule 20 (functionBody -> block .)
    MAIOR           reduce using rule 20 (functionBody -> block .)
    MENORIGUAL      reduce using rule 20 (functionBody -> block .)
    MAIORIGUAL      reduce using rule 20 (functionBody -> block .)
    DIFERENTE       reduce using rule 20 (functionBody -> block .)
    IDENTIDADE      reduce using rule 20 (functionBody -> block .)
    IGUALDADE       reduce using rule 20 (functionBody -> block .)
    SEMIDENTIDADE   reduce using rule 20 (functionBody -> block .)
    AND             reduce using rule 20 (functionBody -> block .)
    OR              reduce using rule 20 (functionBody -> block .)
    MAISIGUAL       reduce using rule 20 (functionBody -> block .)
    MENOSIGUAL      reduce using rule 20 (functionBody -> block .)
    MULTIGUAL       reduce using rule 20 (functionBody -> block .)
    DIVIGUAL        reduce using rule 20 (functionBody -> block .)
    MODIGUAL        reduce using rule 20 (functionBody -> block .)
    RPAREN          reduce using rule 20 (functionBody -> block .)
    COMMA           reduce using rule 20 (functionBody -> block .)
    RCCT            reduce using rule 20 (functionBody -> block .)


state 20

    (21) functionBody -> ATRIBUICAO . expression
    (8) expression -> . disjunction
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    expression                     shift and go to state 29
    disjunction                    shift and go to state 30
    conjunction                    shift and go to state 31
    equality                       shift and go to state 32
    comparison                     shift and go to state 33
    infixOperation                 shift and go to state 34
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    simpleIdentifier               shift and go to state 38
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 21

    (3) optionalType -> DOISP . type
    (35) type -> . typeModifiers optype
    (36) type -> . optype
    (40) typeModifiers -> . typeModifier
    (41) typeModifiers -> . typeModifier typeModifiers
    (37) optype -> . parenthesizedType
    (38) optype -> . functionType
    (39) optype -> . userType
    (42) typeModifier -> . SUSPEND
    (60) parenthesizedType -> . LPAREN type RPAREN
    (53) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (54) functionType -> . functionTypeParameters SETA type
    (46) userType -> . simpleUserType
    (61) receiverType -> . typeModifier parenthesizedType
    (59) functionTypeParameters -> . LPAREN parameterOrType parameterOrTypeRecursive RPAREN
    (47) simpleUserType -> . simpleIdentifier typeArguments
    (48) simpleUserType -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    SUSPEND         shift and go to state 78
    LPAREN          shift and go to state 86
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    type                           shift and go to state 79
    typeModifiers                  shift and go to state 80
    optype                         shift and go to state 81
    typeModifier                   shift and go to state 82
    parenthesizedType              shift and go to state 83
    functionType                   shift and go to state 84
    userType                       shift and go to state 85
    receiverType                   shift and go to state 87
    functionTypeParameters         shift and go to state 88
    simpleUserType                 shift and go to state 89
    simpleIdentifier               shift and go to state 90

state 22

    (72) block -> LCHAVE . statements RCHAVE
    (62) statements -> . statement
    (63) statements -> . statement statements
    (64) statement -> . functionDeclaration
    (65) statement -> . assignment
    (66) statement -> . loopStatement
    (67) statement -> . expression
    (68) statement -> . propertyDeclaration
    (69) statement -> . chamadaDeFuncao
    (4) functionDeclaration -> . FUN simpleIdentifier functionValueParameters functionBody
    (5) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType functionBody
    (86) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (87) assignment -> . asExpression assignmentAndOperator expression
    (73) loopStatement -> . forStatement
    (74) loopStatement -> . whileStatement
    (75) loopStatement -> . doWhileStatement
    (8) expression -> . disjunction
    (11) propertyDeclaration -> . varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV
    (12) propertyDeclaration -> . varOrVal genericVariableDeclaration ATRIBUICAO expression PV
    (13) propertyDeclaration -> . varOrVal genericVariableDeclaration ATRIBUICAO expression
    (14) propertyDeclaration -> . varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression
    (84) chamadaDeFuncao -> . ID LPAREN RPAREN
    (85) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (131) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (132) directlyAssignableExpression -> . simpleIdentifier
    (133) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (76) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody
    (77) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN
    (78) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (79) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (80) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (81) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (9) varOrVal -> . VAR
    (10) varOrVal -> . VAL
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (134) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (42) typeModifier -> . SUSPEND
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression

    FUN             shift and go to state 99
    ID              shift and go to state 107
    FOR             shift and go to state 111
    WHILE           shift and go to state 112
    DO              shift and go to state 113
    VAR             shift and go to state 114
    VAL             shift and go to state 115
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LPAREN          shift and go to state 108
    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    SUSPEND         shift and go to state 78

    statements                     shift and go to state 91
    statement                      shift and go to state 92
    functionDeclaration            shift and go to state 93
    assignment                     shift and go to state 94
    loopStatement                  shift and go to state 95
    expression                     shift and go to state 96
    propertyDeclaration            shift and go to state 97
    chamadaDeFuncao                shift and go to state 98
    simpleIdentifier               shift and go to state 100
    directlyAssignableExpression   shift and go to state 101
    asExpression                   shift and go to state 102
    forStatement                   shift and go to state 103
    whileStatement                 shift and go to state 104
    doWhileStatement               shift and go to state 105
    disjunction                    shift and go to state 30
    varOrVal                       shift and go to state 106
    postfixUnaryExpression         shift and go to state 109
    parenthesizedDirectlyAssignableExpression shift and go to state 110
    prefixUnaryExpression          shift and go to state 42
    conjunction                    shift and go to state 31
    primaryExpression              shift and go to state 46
    prefixUnaryExpressionRecursive shift and go to state 43
    equality                       shift and go to state 32
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    unaryPrefix                    shift and go to state 45
    comparison                     shift and go to state 33
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    infixOperation                 shift and go to state 34
    typeModifier                   shift and go to state 75
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40

state 23

    (22) functionValueParameters -> LPAREN functionValueParametersRecursive . RPAREN

    RPAREN          shift and go to state 116


state 24

    (23) functionValueParameters -> LPAREN RPAREN .

    ATRIBUICAO      reduce using rule 23 (functionValueParameters -> LPAREN RPAREN .)
    DOISP           reduce using rule 23 (functionValueParameters -> LPAREN RPAREN .)
    LCHAVE          reduce using rule 23 (functionValueParameters -> LPAREN RPAREN .)


state 25

    (24) functionValueParametersRecursive -> functionValueParameter .
    (25) functionValueParametersRecursive -> functionValueParameter . COMMA functionValueParametersRecursive

    RPAREN          reduce using rule 24 (functionValueParametersRecursive -> functionValueParameter .)
    COMMA           shift and go to state 117


state 26

    (26) functionValueParameter -> parameter . ATRIBUICAO expression
    (27) functionValueParameter -> parameter .

    ATRIBUICAO      shift and go to state 118
    COMMA           reduce using rule 27 (functionValueParameter -> parameter .)
    RPAREN          reduce using rule 27 (functionValueParameter -> parameter .)


state 27

    (34) parameter -> simpleIdentifier . optionalType
    (3) optionalType -> . DOISP type

    DOISP           shift and go to state 21

    optionalType                   shift and go to state 119

state 28

    (5) functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .

    FUN             reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    $end            reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    ID              reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    FOR             reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    WHILE           reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    DO              reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    VAR             reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    VAL             reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    CROSSINLINE     reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    IMPORT          reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    INIT            reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    NOINLINE        reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    OUT             reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    VARARG          reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    WHERE           reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    OPERATOR        reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    LPAREN          reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    LITERAL_STRING  reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    NUMBER          reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    COLONCOLON      reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    LCCT            reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    IF              reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    RETURN          reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    RETURN_AT       reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    CONTINUE        reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    CONTINUE_AT     reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    BREAK           reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    BREAK_AT        reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    LCHAVE          reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    INCREMENTO      reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    DECREMENTO      reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    MINUS           reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    PLUS            reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    NOT             reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    SUSPEND         reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    RCHAVE          reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    PV              reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    ELSE            reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    MENOR           reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    PONTO           reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    AS              reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    MULT            reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    DIVIDE          reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    MOD             reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    PONTOPONTO      reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    ELVIS           reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    IN              reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    NOT_IN          reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    IS              reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    NOT_IS          reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    MAIOR           reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    MENORIGUAL      reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    MAIORIGUAL      reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    DIFERENTE       reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    IDENTIDADE      reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    IGUALDADE       reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    SEMIDENTIDADE   reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    AND             reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    OR              reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    MAISIGUAL       reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    MENOSIGUAL      reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    MULTIGUAL       reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    DIVIGUAL        reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    MODIGUAL        reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    RPAREN          reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    COMMA           reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)
    RCCT            reduce using rule 5 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType functionBody .)


state 29

    (21) functionBody -> ATRIBUICAO expression .

    FUN             reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    $end            reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    ID              reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    FOR             reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    WHILE           reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    DO              reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    VAR             reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    VAL             reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    CROSSINLINE     reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    IMPORT          reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    INIT            reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    NOINLINE        reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    OUT             reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    VARARG          reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    WHERE           reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    OPERATOR        reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    LPAREN          reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    LITERAL_STRING  reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    NUMBER          reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    COLONCOLON      reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    LCCT            reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    IF              reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    RETURN          reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    RETURN_AT       reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    CONTINUE        reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    CONTINUE_AT     reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    BREAK           reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    BREAK_AT        reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    LCHAVE          reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    INCREMENTO      reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    DECREMENTO      reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    MINUS           reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    PLUS            reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    NOT             reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    SUSPEND         reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    RCHAVE          reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    PV              reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    ELSE            reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    MENOR           reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    PONTO           reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    AS              reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    MULT            reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    DIVIDE          reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    MOD             reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    PONTOPONTO      reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    ELVIS           reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    IN              reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    NOT_IN          reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    IS              reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    NOT_IS          reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    MAIOR           reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    MENORIGUAL      reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    MAIORIGUAL      reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    DIFERENTE       reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    IDENTIDADE      reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    IGUALDADE       reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    SEMIDENTIDADE   reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    AND             reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    OR              reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    MAISIGUAL       reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    MENOSIGUAL      reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    MULTIGUAL       reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    DIVIGUAL        reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    MODIGUAL        reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    RPAREN          reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    COMMA           reduce using rule 21 (functionBody -> ATRIBUICAO expression .)
    RCCT            reduce using rule 21 (functionBody -> ATRIBUICAO expression .)


state 30

    (8) expression -> disjunction .

    FUN             reduce using rule 8 (expression -> disjunction .)
    $end            reduce using rule 8 (expression -> disjunction .)
    ID              reduce using rule 8 (expression -> disjunction .)
    FOR             reduce using rule 8 (expression -> disjunction .)
    WHILE           reduce using rule 8 (expression -> disjunction .)
    DO              reduce using rule 8 (expression -> disjunction .)
    VAR             reduce using rule 8 (expression -> disjunction .)
    VAL             reduce using rule 8 (expression -> disjunction .)
    CROSSINLINE     reduce using rule 8 (expression -> disjunction .)
    IMPORT          reduce using rule 8 (expression -> disjunction .)
    INIT            reduce using rule 8 (expression -> disjunction .)
    NOINLINE        reduce using rule 8 (expression -> disjunction .)
    OUT             reduce using rule 8 (expression -> disjunction .)
    VARARG          reduce using rule 8 (expression -> disjunction .)
    WHERE           reduce using rule 8 (expression -> disjunction .)
    OPERATOR        reduce using rule 8 (expression -> disjunction .)
    LPAREN          reduce using rule 8 (expression -> disjunction .)
    LITERAL_STRING  reduce using rule 8 (expression -> disjunction .)
    NUMBER          reduce using rule 8 (expression -> disjunction .)
    COLONCOLON      reduce using rule 8 (expression -> disjunction .)
    LCCT            reduce using rule 8 (expression -> disjunction .)
    IF              reduce using rule 8 (expression -> disjunction .)
    RETURN          reduce using rule 8 (expression -> disjunction .)
    RETURN_AT       reduce using rule 8 (expression -> disjunction .)
    CONTINUE        reduce using rule 8 (expression -> disjunction .)
    CONTINUE_AT     reduce using rule 8 (expression -> disjunction .)
    BREAK           reduce using rule 8 (expression -> disjunction .)
    BREAK_AT        reduce using rule 8 (expression -> disjunction .)
    LCHAVE          reduce using rule 8 (expression -> disjunction .)
    INCREMENTO      reduce using rule 8 (expression -> disjunction .)
    DECREMENTO      reduce using rule 8 (expression -> disjunction .)
    MINUS           reduce using rule 8 (expression -> disjunction .)
    PLUS            reduce using rule 8 (expression -> disjunction .)
    NOT             reduce using rule 8 (expression -> disjunction .)
    SUSPEND         reduce using rule 8 (expression -> disjunction .)
    RCHAVE          reduce using rule 8 (expression -> disjunction .)
    PV              reduce using rule 8 (expression -> disjunction .)
    ELSE            reduce using rule 8 (expression -> disjunction .)
    MENOR           reduce using rule 8 (expression -> disjunction .)
    PONTO           reduce using rule 8 (expression -> disjunction .)
    AS              reduce using rule 8 (expression -> disjunction .)
    MULT            reduce using rule 8 (expression -> disjunction .)
    DIVIDE          reduce using rule 8 (expression -> disjunction .)
    MOD             reduce using rule 8 (expression -> disjunction .)
    PONTOPONTO      reduce using rule 8 (expression -> disjunction .)
    ELVIS           reduce using rule 8 (expression -> disjunction .)
    IN              reduce using rule 8 (expression -> disjunction .)
    NOT_IN          reduce using rule 8 (expression -> disjunction .)
    IS              reduce using rule 8 (expression -> disjunction .)
    NOT_IS          reduce using rule 8 (expression -> disjunction .)
    MAIOR           reduce using rule 8 (expression -> disjunction .)
    MENORIGUAL      reduce using rule 8 (expression -> disjunction .)
    MAIORIGUAL      reduce using rule 8 (expression -> disjunction .)
    DIFERENTE       reduce using rule 8 (expression -> disjunction .)
    IDENTIDADE      reduce using rule 8 (expression -> disjunction .)
    IGUALDADE       reduce using rule 8 (expression -> disjunction .)
    SEMIDENTIDADE   reduce using rule 8 (expression -> disjunction .)
    AND             reduce using rule 8 (expression -> disjunction .)
    OR              reduce using rule 8 (expression -> disjunction .)
    MAISIGUAL       reduce using rule 8 (expression -> disjunction .)
    MENOSIGUAL      reduce using rule 8 (expression -> disjunction .)
    MULTIGUAL       reduce using rule 8 (expression -> disjunction .)
    DIVIGUAL        reduce using rule 8 (expression -> disjunction .)
    MODIGUAL        reduce using rule 8 (expression -> disjunction .)
    RPAREN          reduce using rule 8 (expression -> disjunction .)
    COMMA           reduce using rule 8 (expression -> disjunction .)
    RCCT            reduce using rule 8 (expression -> disjunction .)


state 31

    (88) disjunction -> conjunction .
    (89) disjunction -> conjunction . OR disjunction

  ! shift/reduce conflict for OR resolved as shift
    FUN             reduce using rule 88 (disjunction -> conjunction .)
    $end            reduce using rule 88 (disjunction -> conjunction .)
    ID              reduce using rule 88 (disjunction -> conjunction .)
    FOR             reduce using rule 88 (disjunction -> conjunction .)
    WHILE           reduce using rule 88 (disjunction -> conjunction .)
    DO              reduce using rule 88 (disjunction -> conjunction .)
    VAR             reduce using rule 88 (disjunction -> conjunction .)
    VAL             reduce using rule 88 (disjunction -> conjunction .)
    CROSSINLINE     reduce using rule 88 (disjunction -> conjunction .)
    IMPORT          reduce using rule 88 (disjunction -> conjunction .)
    INIT            reduce using rule 88 (disjunction -> conjunction .)
    NOINLINE        reduce using rule 88 (disjunction -> conjunction .)
    OUT             reduce using rule 88 (disjunction -> conjunction .)
    VARARG          reduce using rule 88 (disjunction -> conjunction .)
    WHERE           reduce using rule 88 (disjunction -> conjunction .)
    OPERATOR        reduce using rule 88 (disjunction -> conjunction .)
    LPAREN          reduce using rule 88 (disjunction -> conjunction .)
    LITERAL_STRING  reduce using rule 88 (disjunction -> conjunction .)
    NUMBER          reduce using rule 88 (disjunction -> conjunction .)
    COLONCOLON      reduce using rule 88 (disjunction -> conjunction .)
    LCCT            reduce using rule 88 (disjunction -> conjunction .)
    IF              reduce using rule 88 (disjunction -> conjunction .)
    RETURN          reduce using rule 88 (disjunction -> conjunction .)
    RETURN_AT       reduce using rule 88 (disjunction -> conjunction .)
    CONTINUE        reduce using rule 88 (disjunction -> conjunction .)
    CONTINUE_AT     reduce using rule 88 (disjunction -> conjunction .)
    BREAK           reduce using rule 88 (disjunction -> conjunction .)
    BREAK_AT        reduce using rule 88 (disjunction -> conjunction .)
    LCHAVE          reduce using rule 88 (disjunction -> conjunction .)
    INCREMENTO      reduce using rule 88 (disjunction -> conjunction .)
    DECREMENTO      reduce using rule 88 (disjunction -> conjunction .)
    MINUS           reduce using rule 88 (disjunction -> conjunction .)
    PLUS            reduce using rule 88 (disjunction -> conjunction .)
    NOT             reduce using rule 88 (disjunction -> conjunction .)
    SUSPEND         reduce using rule 88 (disjunction -> conjunction .)
    RCHAVE          reduce using rule 88 (disjunction -> conjunction .)
    PV              reduce using rule 88 (disjunction -> conjunction .)
    ELSE            reduce using rule 88 (disjunction -> conjunction .)
    MENOR           reduce using rule 88 (disjunction -> conjunction .)
    PONTO           reduce using rule 88 (disjunction -> conjunction .)
    AS              reduce using rule 88 (disjunction -> conjunction .)
    MULT            reduce using rule 88 (disjunction -> conjunction .)
    DIVIDE          reduce using rule 88 (disjunction -> conjunction .)
    MOD             reduce using rule 88 (disjunction -> conjunction .)
    PONTOPONTO      reduce using rule 88 (disjunction -> conjunction .)
    ELVIS           reduce using rule 88 (disjunction -> conjunction .)
    IN              reduce using rule 88 (disjunction -> conjunction .)
    NOT_IN          reduce using rule 88 (disjunction -> conjunction .)
    IS              reduce using rule 88 (disjunction -> conjunction .)
    NOT_IS          reduce using rule 88 (disjunction -> conjunction .)
    MAIOR           reduce using rule 88 (disjunction -> conjunction .)
    MENORIGUAL      reduce using rule 88 (disjunction -> conjunction .)
    MAIORIGUAL      reduce using rule 88 (disjunction -> conjunction .)
    DIFERENTE       reduce using rule 88 (disjunction -> conjunction .)
    IDENTIDADE      reduce using rule 88 (disjunction -> conjunction .)
    IGUALDADE       reduce using rule 88 (disjunction -> conjunction .)
    SEMIDENTIDADE   reduce using rule 88 (disjunction -> conjunction .)
    AND             reduce using rule 88 (disjunction -> conjunction .)
    MAISIGUAL       reduce using rule 88 (disjunction -> conjunction .)
    MENOSIGUAL      reduce using rule 88 (disjunction -> conjunction .)
    MULTIGUAL       reduce using rule 88 (disjunction -> conjunction .)
    DIVIGUAL        reduce using rule 88 (disjunction -> conjunction .)
    MODIGUAL        reduce using rule 88 (disjunction -> conjunction .)
    RPAREN          reduce using rule 88 (disjunction -> conjunction .)
    COMMA           reduce using rule 88 (disjunction -> conjunction .)
    RCCT            reduce using rule 88 (disjunction -> conjunction .)
    OR              shift and go to state 120

  ! OR              [ reduce using rule 88 (disjunction -> conjunction .) ]


state 32

    (90) conjunction -> equality .
    (91) conjunction -> equality . AND conjunction

  ! shift/reduce conflict for AND resolved as shift
    FUN             reduce using rule 90 (conjunction -> equality .)
    $end            reduce using rule 90 (conjunction -> equality .)
    ID              reduce using rule 90 (conjunction -> equality .)
    FOR             reduce using rule 90 (conjunction -> equality .)
    WHILE           reduce using rule 90 (conjunction -> equality .)
    DO              reduce using rule 90 (conjunction -> equality .)
    VAR             reduce using rule 90 (conjunction -> equality .)
    VAL             reduce using rule 90 (conjunction -> equality .)
    CROSSINLINE     reduce using rule 90 (conjunction -> equality .)
    IMPORT          reduce using rule 90 (conjunction -> equality .)
    INIT            reduce using rule 90 (conjunction -> equality .)
    NOINLINE        reduce using rule 90 (conjunction -> equality .)
    OUT             reduce using rule 90 (conjunction -> equality .)
    VARARG          reduce using rule 90 (conjunction -> equality .)
    WHERE           reduce using rule 90 (conjunction -> equality .)
    OPERATOR        reduce using rule 90 (conjunction -> equality .)
    LPAREN          reduce using rule 90 (conjunction -> equality .)
    LITERAL_STRING  reduce using rule 90 (conjunction -> equality .)
    NUMBER          reduce using rule 90 (conjunction -> equality .)
    COLONCOLON      reduce using rule 90 (conjunction -> equality .)
    LCCT            reduce using rule 90 (conjunction -> equality .)
    IF              reduce using rule 90 (conjunction -> equality .)
    RETURN          reduce using rule 90 (conjunction -> equality .)
    RETURN_AT       reduce using rule 90 (conjunction -> equality .)
    CONTINUE        reduce using rule 90 (conjunction -> equality .)
    CONTINUE_AT     reduce using rule 90 (conjunction -> equality .)
    BREAK           reduce using rule 90 (conjunction -> equality .)
    BREAK_AT        reduce using rule 90 (conjunction -> equality .)
    LCHAVE          reduce using rule 90 (conjunction -> equality .)
    INCREMENTO      reduce using rule 90 (conjunction -> equality .)
    DECREMENTO      reduce using rule 90 (conjunction -> equality .)
    MINUS           reduce using rule 90 (conjunction -> equality .)
    PLUS            reduce using rule 90 (conjunction -> equality .)
    NOT             reduce using rule 90 (conjunction -> equality .)
    SUSPEND         reduce using rule 90 (conjunction -> equality .)
    RCHAVE          reduce using rule 90 (conjunction -> equality .)
    PV              reduce using rule 90 (conjunction -> equality .)
    ELSE            reduce using rule 90 (conjunction -> equality .)
    MENOR           reduce using rule 90 (conjunction -> equality .)
    PONTO           reduce using rule 90 (conjunction -> equality .)
    AS              reduce using rule 90 (conjunction -> equality .)
    MULT            reduce using rule 90 (conjunction -> equality .)
    DIVIDE          reduce using rule 90 (conjunction -> equality .)
    MOD             reduce using rule 90 (conjunction -> equality .)
    PONTOPONTO      reduce using rule 90 (conjunction -> equality .)
    ELVIS           reduce using rule 90 (conjunction -> equality .)
    IN              reduce using rule 90 (conjunction -> equality .)
    NOT_IN          reduce using rule 90 (conjunction -> equality .)
    IS              reduce using rule 90 (conjunction -> equality .)
    NOT_IS          reduce using rule 90 (conjunction -> equality .)
    MAIOR           reduce using rule 90 (conjunction -> equality .)
    MENORIGUAL      reduce using rule 90 (conjunction -> equality .)
    MAIORIGUAL      reduce using rule 90 (conjunction -> equality .)
    DIFERENTE       reduce using rule 90 (conjunction -> equality .)
    IDENTIDADE      reduce using rule 90 (conjunction -> equality .)
    IGUALDADE       reduce using rule 90 (conjunction -> equality .)
    SEMIDENTIDADE   reduce using rule 90 (conjunction -> equality .)
    OR              reduce using rule 90 (conjunction -> equality .)
    MAISIGUAL       reduce using rule 90 (conjunction -> equality .)
    MENOSIGUAL      reduce using rule 90 (conjunction -> equality .)
    MULTIGUAL       reduce using rule 90 (conjunction -> equality .)
    DIVIGUAL        reduce using rule 90 (conjunction -> equality .)
    MODIGUAL        reduce using rule 90 (conjunction -> equality .)
    RPAREN          reduce using rule 90 (conjunction -> equality .)
    COMMA           reduce using rule 90 (conjunction -> equality .)
    RCCT            reduce using rule 90 (conjunction -> equality .)
    AND             shift and go to state 121

  ! AND             [ reduce using rule 90 (conjunction -> equality .) ]


state 33

    (92) equality -> comparison .
    (93) equality -> comparison . equalityOperator equality
    (239) equalityOperator -> . DIFERENTE
    (240) equalityOperator -> . IDENTIDADE
    (241) equalityOperator -> . IGUALDADE
    (242) equalityOperator -> . SEMIDENTIDADE

  ! shift/reduce conflict for DIFERENTE resolved as shift
  ! shift/reduce conflict for IDENTIDADE resolved as shift
  ! shift/reduce conflict for IGUALDADE resolved as shift
  ! shift/reduce conflict for SEMIDENTIDADE resolved as shift
    FUN             reduce using rule 92 (equality -> comparison .)
    $end            reduce using rule 92 (equality -> comparison .)
    ID              reduce using rule 92 (equality -> comparison .)
    FOR             reduce using rule 92 (equality -> comparison .)
    WHILE           reduce using rule 92 (equality -> comparison .)
    DO              reduce using rule 92 (equality -> comparison .)
    VAR             reduce using rule 92 (equality -> comparison .)
    VAL             reduce using rule 92 (equality -> comparison .)
    CROSSINLINE     reduce using rule 92 (equality -> comparison .)
    IMPORT          reduce using rule 92 (equality -> comparison .)
    INIT            reduce using rule 92 (equality -> comparison .)
    NOINLINE        reduce using rule 92 (equality -> comparison .)
    OUT             reduce using rule 92 (equality -> comparison .)
    VARARG          reduce using rule 92 (equality -> comparison .)
    WHERE           reduce using rule 92 (equality -> comparison .)
    OPERATOR        reduce using rule 92 (equality -> comparison .)
    LPAREN          reduce using rule 92 (equality -> comparison .)
    LITERAL_STRING  reduce using rule 92 (equality -> comparison .)
    NUMBER          reduce using rule 92 (equality -> comparison .)
    COLONCOLON      reduce using rule 92 (equality -> comparison .)
    LCCT            reduce using rule 92 (equality -> comparison .)
    IF              reduce using rule 92 (equality -> comparison .)
    RETURN          reduce using rule 92 (equality -> comparison .)
    RETURN_AT       reduce using rule 92 (equality -> comparison .)
    CONTINUE        reduce using rule 92 (equality -> comparison .)
    CONTINUE_AT     reduce using rule 92 (equality -> comparison .)
    BREAK           reduce using rule 92 (equality -> comparison .)
    BREAK_AT        reduce using rule 92 (equality -> comparison .)
    LCHAVE          reduce using rule 92 (equality -> comparison .)
    INCREMENTO      reduce using rule 92 (equality -> comparison .)
    DECREMENTO      reduce using rule 92 (equality -> comparison .)
    MINUS           reduce using rule 92 (equality -> comparison .)
    PLUS            reduce using rule 92 (equality -> comparison .)
    NOT             reduce using rule 92 (equality -> comparison .)
    SUSPEND         reduce using rule 92 (equality -> comparison .)
    RCHAVE          reduce using rule 92 (equality -> comparison .)
    PV              reduce using rule 92 (equality -> comparison .)
    ELSE            reduce using rule 92 (equality -> comparison .)
    MENOR           reduce using rule 92 (equality -> comparison .)
    PONTO           reduce using rule 92 (equality -> comparison .)
    AS              reduce using rule 92 (equality -> comparison .)
    MULT            reduce using rule 92 (equality -> comparison .)
    DIVIDE          reduce using rule 92 (equality -> comparison .)
    MOD             reduce using rule 92 (equality -> comparison .)
    PONTOPONTO      reduce using rule 92 (equality -> comparison .)
    ELVIS           reduce using rule 92 (equality -> comparison .)
    IN              reduce using rule 92 (equality -> comparison .)
    NOT_IN          reduce using rule 92 (equality -> comparison .)
    IS              reduce using rule 92 (equality -> comparison .)
    NOT_IS          reduce using rule 92 (equality -> comparison .)
    MAIOR           reduce using rule 92 (equality -> comparison .)
    MENORIGUAL      reduce using rule 92 (equality -> comparison .)
    MAIORIGUAL      reduce using rule 92 (equality -> comparison .)
    AND             reduce using rule 92 (equality -> comparison .)
    OR              reduce using rule 92 (equality -> comparison .)
    MAISIGUAL       reduce using rule 92 (equality -> comparison .)
    MENOSIGUAL      reduce using rule 92 (equality -> comparison .)
    MULTIGUAL       reduce using rule 92 (equality -> comparison .)
    DIVIGUAL        reduce using rule 92 (equality -> comparison .)
    MODIGUAL        reduce using rule 92 (equality -> comparison .)
    RPAREN          reduce using rule 92 (equality -> comparison .)
    COMMA           reduce using rule 92 (equality -> comparison .)
    RCCT            reduce using rule 92 (equality -> comparison .)
    DIFERENTE       shift and go to state 123
    IDENTIDADE      shift and go to state 124
    IGUALDADE       shift and go to state 125
    SEMIDENTIDADE   shift and go to state 126

  ! DIFERENTE       [ reduce using rule 92 (equality -> comparison .) ]
  ! IDENTIDADE      [ reduce using rule 92 (equality -> comparison .) ]
  ! IGUALDADE       [ reduce using rule 92 (equality -> comparison .) ]
  ! SEMIDENTIDADE   [ reduce using rule 92 (equality -> comparison .) ]

    equalityOperator               shift and go to state 122

state 34

    (94) comparison -> infixOperation .
    (95) comparison -> infixOperation . comparisonOperator infixOperation
    (243) comparisonOperator -> . MENOR
    (244) comparisonOperator -> . MAIOR
    (245) comparisonOperator -> . MENORIGUAL
    (246) comparisonOperator -> . MAIORIGUAL

  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAIOR resolved as shift
  ! shift/reduce conflict for MENORIGUAL resolved as shift
  ! shift/reduce conflict for MAIORIGUAL resolved as shift
    FUN             reduce using rule 94 (comparison -> infixOperation .)
    $end            reduce using rule 94 (comparison -> infixOperation .)
    ID              reduce using rule 94 (comparison -> infixOperation .)
    FOR             reduce using rule 94 (comparison -> infixOperation .)
    WHILE           reduce using rule 94 (comparison -> infixOperation .)
    DO              reduce using rule 94 (comparison -> infixOperation .)
    VAR             reduce using rule 94 (comparison -> infixOperation .)
    VAL             reduce using rule 94 (comparison -> infixOperation .)
    CROSSINLINE     reduce using rule 94 (comparison -> infixOperation .)
    IMPORT          reduce using rule 94 (comparison -> infixOperation .)
    INIT            reduce using rule 94 (comparison -> infixOperation .)
    NOINLINE        reduce using rule 94 (comparison -> infixOperation .)
    OUT             reduce using rule 94 (comparison -> infixOperation .)
    VARARG          reduce using rule 94 (comparison -> infixOperation .)
    WHERE           reduce using rule 94 (comparison -> infixOperation .)
    OPERATOR        reduce using rule 94 (comparison -> infixOperation .)
    LPAREN          reduce using rule 94 (comparison -> infixOperation .)
    LITERAL_STRING  reduce using rule 94 (comparison -> infixOperation .)
    NUMBER          reduce using rule 94 (comparison -> infixOperation .)
    COLONCOLON      reduce using rule 94 (comparison -> infixOperation .)
    LCCT            reduce using rule 94 (comparison -> infixOperation .)
    IF              reduce using rule 94 (comparison -> infixOperation .)
    RETURN          reduce using rule 94 (comparison -> infixOperation .)
    RETURN_AT       reduce using rule 94 (comparison -> infixOperation .)
    CONTINUE        reduce using rule 94 (comparison -> infixOperation .)
    CONTINUE_AT     reduce using rule 94 (comparison -> infixOperation .)
    BREAK           reduce using rule 94 (comparison -> infixOperation .)
    BREAK_AT        reduce using rule 94 (comparison -> infixOperation .)
    LCHAVE          reduce using rule 94 (comparison -> infixOperation .)
    INCREMENTO      reduce using rule 94 (comparison -> infixOperation .)
    DECREMENTO      reduce using rule 94 (comparison -> infixOperation .)
    MINUS           reduce using rule 94 (comparison -> infixOperation .)
    PLUS            reduce using rule 94 (comparison -> infixOperation .)
    NOT             reduce using rule 94 (comparison -> infixOperation .)
    SUSPEND         reduce using rule 94 (comparison -> infixOperation .)
    RCHAVE          reduce using rule 94 (comparison -> infixOperation .)
    PV              reduce using rule 94 (comparison -> infixOperation .)
    ELSE            reduce using rule 94 (comparison -> infixOperation .)
    PONTO           reduce using rule 94 (comparison -> infixOperation .)
    AS              reduce using rule 94 (comparison -> infixOperation .)
    MULT            reduce using rule 94 (comparison -> infixOperation .)
    DIVIDE          reduce using rule 94 (comparison -> infixOperation .)
    MOD             reduce using rule 94 (comparison -> infixOperation .)
    PONTOPONTO      reduce using rule 94 (comparison -> infixOperation .)
    ELVIS           reduce using rule 94 (comparison -> infixOperation .)
    IN              reduce using rule 94 (comparison -> infixOperation .)
    NOT_IN          reduce using rule 94 (comparison -> infixOperation .)
    IS              reduce using rule 94 (comparison -> infixOperation .)
    NOT_IS          reduce using rule 94 (comparison -> infixOperation .)
    DIFERENTE       reduce using rule 94 (comparison -> infixOperation .)
    IDENTIDADE      reduce using rule 94 (comparison -> infixOperation .)
    IGUALDADE       reduce using rule 94 (comparison -> infixOperation .)
    SEMIDENTIDADE   reduce using rule 94 (comparison -> infixOperation .)
    AND             reduce using rule 94 (comparison -> infixOperation .)
    OR              reduce using rule 94 (comparison -> infixOperation .)
    MAISIGUAL       reduce using rule 94 (comparison -> infixOperation .)
    MENOSIGUAL      reduce using rule 94 (comparison -> infixOperation .)
    MULTIGUAL       reduce using rule 94 (comparison -> infixOperation .)
    DIVIGUAL        reduce using rule 94 (comparison -> infixOperation .)
    MODIGUAL        reduce using rule 94 (comparison -> infixOperation .)
    RPAREN          reduce using rule 94 (comparison -> infixOperation .)
    COMMA           reduce using rule 94 (comparison -> infixOperation .)
    RCCT            reduce using rule 94 (comparison -> infixOperation .)
    MENOR           shift and go to state 128
    MAIOR           shift and go to state 129
    MENORIGUAL      shift and go to state 130
    MAIORIGUAL      shift and go to state 131

  ! MENOR           [ reduce using rule 94 (comparison -> infixOperation .) ]
  ! MAIOR           [ reduce using rule 94 (comparison -> infixOperation .) ]
  ! MENORIGUAL      [ reduce using rule 94 (comparison -> infixOperation .) ]
  ! MAIORIGUAL      [ reduce using rule 94 (comparison -> infixOperation .) ]

    comparisonOperator             shift and go to state 127

state 35

    (96) infixOperation -> elvisExpression . infixOperationRecursive
    (97) infixOperation -> elvisExpression .
    (98) infixOperationRecursive -> . inOrIs elvisOrType
    (99) infixOperationRecursive -> . inOrIs elvisOrType infixOperationRecursive
    (100) inOrIs -> . inOperator
    (101) inOrIs -> . isOperator
    (247) inOperator -> . IN
    (248) inOperator -> . NOT_IN
    (249) isOperator -> . IS
    (250) isOperator -> . NOT_IS

  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT_IN resolved as shift
  ! shift/reduce conflict for IS resolved as shift
  ! shift/reduce conflict for NOT_IS resolved as shift
    FUN             reduce using rule 97 (infixOperation -> elvisExpression .)
    $end            reduce using rule 97 (infixOperation -> elvisExpression .)
    ID              reduce using rule 97 (infixOperation -> elvisExpression .)
    FOR             reduce using rule 97 (infixOperation -> elvisExpression .)
    WHILE           reduce using rule 97 (infixOperation -> elvisExpression .)
    DO              reduce using rule 97 (infixOperation -> elvisExpression .)
    VAR             reduce using rule 97 (infixOperation -> elvisExpression .)
    VAL             reduce using rule 97 (infixOperation -> elvisExpression .)
    CROSSINLINE     reduce using rule 97 (infixOperation -> elvisExpression .)
    IMPORT          reduce using rule 97 (infixOperation -> elvisExpression .)
    INIT            reduce using rule 97 (infixOperation -> elvisExpression .)
    NOINLINE        reduce using rule 97 (infixOperation -> elvisExpression .)
    OUT             reduce using rule 97 (infixOperation -> elvisExpression .)
    VARARG          reduce using rule 97 (infixOperation -> elvisExpression .)
    WHERE           reduce using rule 97 (infixOperation -> elvisExpression .)
    OPERATOR        reduce using rule 97 (infixOperation -> elvisExpression .)
    LPAREN          reduce using rule 97 (infixOperation -> elvisExpression .)
    LITERAL_STRING  reduce using rule 97 (infixOperation -> elvisExpression .)
    NUMBER          reduce using rule 97 (infixOperation -> elvisExpression .)
    COLONCOLON      reduce using rule 97 (infixOperation -> elvisExpression .)
    LCCT            reduce using rule 97 (infixOperation -> elvisExpression .)
    IF              reduce using rule 97 (infixOperation -> elvisExpression .)
    RETURN          reduce using rule 97 (infixOperation -> elvisExpression .)
    RETURN_AT       reduce using rule 97 (infixOperation -> elvisExpression .)
    CONTINUE        reduce using rule 97 (infixOperation -> elvisExpression .)
    CONTINUE_AT     reduce using rule 97 (infixOperation -> elvisExpression .)
    BREAK           reduce using rule 97 (infixOperation -> elvisExpression .)
    BREAK_AT        reduce using rule 97 (infixOperation -> elvisExpression .)
    LCHAVE          reduce using rule 97 (infixOperation -> elvisExpression .)
    INCREMENTO      reduce using rule 97 (infixOperation -> elvisExpression .)
    DECREMENTO      reduce using rule 97 (infixOperation -> elvisExpression .)
    MINUS           reduce using rule 97 (infixOperation -> elvisExpression .)
    PLUS            reduce using rule 97 (infixOperation -> elvisExpression .)
    NOT             reduce using rule 97 (infixOperation -> elvisExpression .)
    SUSPEND         reduce using rule 97 (infixOperation -> elvisExpression .)
    RCHAVE          reduce using rule 97 (infixOperation -> elvisExpression .)
    PV              reduce using rule 97 (infixOperation -> elvisExpression .)
    ELSE            reduce using rule 97 (infixOperation -> elvisExpression .)
    MENOR           reduce using rule 97 (infixOperation -> elvisExpression .)
    PONTO           reduce using rule 97 (infixOperation -> elvisExpression .)
    AS              reduce using rule 97 (infixOperation -> elvisExpression .)
    MULT            reduce using rule 97 (infixOperation -> elvisExpression .)
    DIVIDE          reduce using rule 97 (infixOperation -> elvisExpression .)
    MOD             reduce using rule 97 (infixOperation -> elvisExpression .)
    PONTOPONTO      reduce using rule 97 (infixOperation -> elvisExpression .)
    ELVIS           reduce using rule 97 (infixOperation -> elvisExpression .)
    MAIOR           reduce using rule 97 (infixOperation -> elvisExpression .)
    MENORIGUAL      reduce using rule 97 (infixOperation -> elvisExpression .)
    MAIORIGUAL      reduce using rule 97 (infixOperation -> elvisExpression .)
    DIFERENTE       reduce using rule 97 (infixOperation -> elvisExpression .)
    IDENTIDADE      reduce using rule 97 (infixOperation -> elvisExpression .)
    IGUALDADE       reduce using rule 97 (infixOperation -> elvisExpression .)
    SEMIDENTIDADE   reduce using rule 97 (infixOperation -> elvisExpression .)
    AND             reduce using rule 97 (infixOperation -> elvisExpression .)
    OR              reduce using rule 97 (infixOperation -> elvisExpression .)
    MAISIGUAL       reduce using rule 97 (infixOperation -> elvisExpression .)
    MENOSIGUAL      reduce using rule 97 (infixOperation -> elvisExpression .)
    MULTIGUAL       reduce using rule 97 (infixOperation -> elvisExpression .)
    DIVIGUAL        reduce using rule 97 (infixOperation -> elvisExpression .)
    MODIGUAL        reduce using rule 97 (infixOperation -> elvisExpression .)
    RPAREN          reduce using rule 97 (infixOperation -> elvisExpression .)
    COMMA           reduce using rule 97 (infixOperation -> elvisExpression .)
    RCCT            reduce using rule 97 (infixOperation -> elvisExpression .)
    IN              shift and go to state 136
    NOT_IN          shift and go to state 137
    IS              shift and go to state 138
    NOT_IS          shift and go to state 139

  ! IN              [ reduce using rule 97 (infixOperation -> elvisExpression .) ]
  ! NOT_IN          [ reduce using rule 97 (infixOperation -> elvisExpression .) ]
  ! IS              [ reduce using rule 97 (infixOperation -> elvisExpression .) ]
  ! NOT_IS          [ reduce using rule 97 (infixOperation -> elvisExpression .) ]

    infixOperationRecursive        shift and go to state 132
    inOrIs                         shift and go to state 133
    inOperator                     shift and go to state 134
    isOperator                     shift and go to state 135

state 36

    (104) elvisExpression -> infixFunctionCall .
    (105) elvisExpression -> infixFunctionCall . ELVIS elvisExpression

  ! shift/reduce conflict for ELVIS resolved as shift
    FUN             reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    $end            reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    ID              reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    FOR             reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    WHILE           reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    DO              reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    VAR             reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    VAL             reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    CROSSINLINE     reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    IMPORT          reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    INIT            reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    NOINLINE        reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    OUT             reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    VARARG          reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    WHERE           reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    OPERATOR        reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    LPAREN          reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    LITERAL_STRING  reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    NUMBER          reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    COLONCOLON      reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    LCCT            reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    IF              reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    RETURN          reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    RETURN_AT       reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    CONTINUE        reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    CONTINUE_AT     reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    BREAK           reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    BREAK_AT        reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    LCHAVE          reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    INCREMENTO      reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    DECREMENTO      reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    MINUS           reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    PLUS            reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    NOT             reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    SUSPEND         reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    RCHAVE          reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    PV              reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    ELSE            reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    MENOR           reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    PONTO           reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    AS              reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    MULT            reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    DIVIDE          reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    MOD             reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    PONTOPONTO      reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    IN              reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    NOT_IN          reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    IS              reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    NOT_IS          reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    MAIOR           reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    MENORIGUAL      reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    MAIORIGUAL      reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    DIFERENTE       reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    IDENTIDADE      reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    IGUALDADE       reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    SEMIDENTIDADE   reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    AND             reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    OR              reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    MAISIGUAL       reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    MENOSIGUAL      reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    MULTIGUAL       reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    DIVIGUAL        reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    MODIGUAL        reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    RPAREN          reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    COMMA           reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    RCCT            reduce using rule 104 (elvisExpression -> infixFunctionCall .)
    ELVIS           shift and go to state 140

  ! ELVIS           [ reduce using rule 104 (elvisExpression -> infixFunctionCall .) ]


state 37

    (106) infixFunctionCall -> rangeExpression .
    (107) infixFunctionCall -> rangeExpression . simpleIdentifier infixFunctionCall
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
    FUN             reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    $end            reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    FOR             reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    WHILE           reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    DO              reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    VAR             reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    VAL             reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    LPAREN          reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    LITERAL_STRING  reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    NUMBER          reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    COLONCOLON      reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    LCCT            reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    IF              reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    RETURN          reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    RETURN_AT       reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    CONTINUE        reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    CONTINUE_AT     reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    BREAK           reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    BREAK_AT        reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    LCHAVE          reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    INCREMENTO      reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    DECREMENTO      reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    MINUS           reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    PLUS            reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    NOT             reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    SUSPEND         reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    RCHAVE          reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    PV              reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    ELSE            reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    MENOR           reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    PONTO           reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    AS              reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    MULT            reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    DIVIDE          reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    MOD             reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    PONTOPONTO      reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    ELVIS           reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    IN              reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    NOT_IN          reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    IS              reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    NOT_IS          reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    MAIOR           reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    MENORIGUAL      reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    MAIORIGUAL      reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    DIFERENTE       reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    IDENTIDADE      reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    IGUALDADE       reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    SEMIDENTIDADE   reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    AND             reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    OR              reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    MAISIGUAL       reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    MENOSIGUAL      reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    MULTIGUAL       reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    DIVIGUAL        reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    MODIGUAL        reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    RPAREN          reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    COMMA           reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    RCCT            reduce using rule 106 (infixFunctionCall -> rangeExpression .)
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

  ! ID              [ reduce using rule 106 (infixFunctionCall -> rangeExpression .) ]
  ! CROSSINLINE     [ reduce using rule 106 (infixFunctionCall -> rangeExpression .) ]
  ! IMPORT          [ reduce using rule 106 (infixFunctionCall -> rangeExpression .) ]
  ! INIT            [ reduce using rule 106 (infixFunctionCall -> rangeExpression .) ]
  ! NOINLINE        [ reduce using rule 106 (infixFunctionCall -> rangeExpression .) ]
  ! OUT             [ reduce using rule 106 (infixFunctionCall -> rangeExpression .) ]
  ! VARARG          [ reduce using rule 106 (infixFunctionCall -> rangeExpression .) ]
  ! WHERE           [ reduce using rule 106 (infixFunctionCall -> rangeExpression .) ]
  ! OPERATOR        [ reduce using rule 106 (infixFunctionCall -> rangeExpression .) ]

    simpleIdentifier               shift and go to state 141

state 38

    (165) primaryExpression -> simpleIdentifier .
    (268) label -> simpleIdentifier .

  ! reduce/reduce conflict for INCREMENTO resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for NOT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for NUMBER resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for IF resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for FUN resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 165 (primaryExpression -> simpleIdentifier .)
    FUN             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    $end            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    ID              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    FOR             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    WHILE           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    DO              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    VAR             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    VAL             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IMPORT          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    INIT            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NOINLINE        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    OUT             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    VARARG          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    WHERE           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    OPERATOR        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    LPAREN          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NUMBER          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    COLONCOLON      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    LCCT            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IF              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    RETURN          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    RETURN_AT       reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    CONTINUE        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    BREAK           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    BREAK_AT        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    LCHAVE          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    INCREMENTO      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    DECREMENTO      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MINUS           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    PLUS            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NOT             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    SUSPEND         reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    RCHAVE          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    PV              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    ELSE            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MENOR           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    PONTO           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    AS              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MULT            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    DIVIDE          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MOD             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    ELVIS           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IN              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NOT_IN          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IS              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NOT_IS          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MAIOR           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    DIFERENTE       reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IGUALDADE       reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    AND             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    OR              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MAISIGUAL       reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MENOSIGUAL      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MODIGUAL        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    RPAREN          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    COMMA           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    RCCT            reduce using rule 165 (primaryExpression -> simpleIdentifier .)

  ! INCREMENTO      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! PLUS            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NOT             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! OPERATOR        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LITERAL_STRING  [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NUMBER          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! IF              [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! RETURN          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! RETURN_AT       [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CONTINUE        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CONTINUE_AT     [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! BREAK           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! BREAK_AT        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LCHAVE          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! FUN             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! SUSPEND         [ reduce using rule 268 (label -> simpleIdentifier .) ]


state 39

    (108) rangeExpression -> additiveExpression .
    (109) rangeExpression -> additiveExpression . PONTOPONTO rangeExpression

  ! shift/reduce conflict for PONTOPONTO resolved as shift
    FUN             reduce using rule 108 (rangeExpression -> additiveExpression .)
    $end            reduce using rule 108 (rangeExpression -> additiveExpression .)
    ID              reduce using rule 108 (rangeExpression -> additiveExpression .)
    FOR             reduce using rule 108 (rangeExpression -> additiveExpression .)
    WHILE           reduce using rule 108 (rangeExpression -> additiveExpression .)
    DO              reduce using rule 108 (rangeExpression -> additiveExpression .)
    VAR             reduce using rule 108 (rangeExpression -> additiveExpression .)
    VAL             reduce using rule 108 (rangeExpression -> additiveExpression .)
    CROSSINLINE     reduce using rule 108 (rangeExpression -> additiveExpression .)
    IMPORT          reduce using rule 108 (rangeExpression -> additiveExpression .)
    INIT            reduce using rule 108 (rangeExpression -> additiveExpression .)
    NOINLINE        reduce using rule 108 (rangeExpression -> additiveExpression .)
    OUT             reduce using rule 108 (rangeExpression -> additiveExpression .)
    VARARG          reduce using rule 108 (rangeExpression -> additiveExpression .)
    WHERE           reduce using rule 108 (rangeExpression -> additiveExpression .)
    OPERATOR        reduce using rule 108 (rangeExpression -> additiveExpression .)
    LPAREN          reduce using rule 108 (rangeExpression -> additiveExpression .)
    LITERAL_STRING  reduce using rule 108 (rangeExpression -> additiveExpression .)
    NUMBER          reduce using rule 108 (rangeExpression -> additiveExpression .)
    COLONCOLON      reduce using rule 108 (rangeExpression -> additiveExpression .)
    LCCT            reduce using rule 108 (rangeExpression -> additiveExpression .)
    IF              reduce using rule 108 (rangeExpression -> additiveExpression .)
    RETURN          reduce using rule 108 (rangeExpression -> additiveExpression .)
    RETURN_AT       reduce using rule 108 (rangeExpression -> additiveExpression .)
    CONTINUE        reduce using rule 108 (rangeExpression -> additiveExpression .)
    CONTINUE_AT     reduce using rule 108 (rangeExpression -> additiveExpression .)
    BREAK           reduce using rule 108 (rangeExpression -> additiveExpression .)
    BREAK_AT        reduce using rule 108 (rangeExpression -> additiveExpression .)
    LCHAVE          reduce using rule 108 (rangeExpression -> additiveExpression .)
    INCREMENTO      reduce using rule 108 (rangeExpression -> additiveExpression .)
    DECREMENTO      reduce using rule 108 (rangeExpression -> additiveExpression .)
    MINUS           reduce using rule 108 (rangeExpression -> additiveExpression .)
    PLUS            reduce using rule 108 (rangeExpression -> additiveExpression .)
    NOT             reduce using rule 108 (rangeExpression -> additiveExpression .)
    SUSPEND         reduce using rule 108 (rangeExpression -> additiveExpression .)
    RCHAVE          reduce using rule 108 (rangeExpression -> additiveExpression .)
    PV              reduce using rule 108 (rangeExpression -> additiveExpression .)
    ELSE            reduce using rule 108 (rangeExpression -> additiveExpression .)
    MENOR           reduce using rule 108 (rangeExpression -> additiveExpression .)
    PONTO           reduce using rule 108 (rangeExpression -> additiveExpression .)
    AS              reduce using rule 108 (rangeExpression -> additiveExpression .)
    MULT            reduce using rule 108 (rangeExpression -> additiveExpression .)
    DIVIDE          reduce using rule 108 (rangeExpression -> additiveExpression .)
    MOD             reduce using rule 108 (rangeExpression -> additiveExpression .)
    ELVIS           reduce using rule 108 (rangeExpression -> additiveExpression .)
    IN              reduce using rule 108 (rangeExpression -> additiveExpression .)
    NOT_IN          reduce using rule 108 (rangeExpression -> additiveExpression .)
    IS              reduce using rule 108 (rangeExpression -> additiveExpression .)
    NOT_IS          reduce using rule 108 (rangeExpression -> additiveExpression .)
    MAIOR           reduce using rule 108 (rangeExpression -> additiveExpression .)
    MENORIGUAL      reduce using rule 108 (rangeExpression -> additiveExpression .)
    MAIORIGUAL      reduce using rule 108 (rangeExpression -> additiveExpression .)
    DIFERENTE       reduce using rule 108 (rangeExpression -> additiveExpression .)
    IDENTIDADE      reduce using rule 108 (rangeExpression -> additiveExpression .)
    IGUALDADE       reduce using rule 108 (rangeExpression -> additiveExpression .)
    SEMIDENTIDADE   reduce using rule 108 (rangeExpression -> additiveExpression .)
    AND             reduce using rule 108 (rangeExpression -> additiveExpression .)
    OR              reduce using rule 108 (rangeExpression -> additiveExpression .)
    MAISIGUAL       reduce using rule 108 (rangeExpression -> additiveExpression .)
    MENOSIGUAL      reduce using rule 108 (rangeExpression -> additiveExpression .)
    MULTIGUAL       reduce using rule 108 (rangeExpression -> additiveExpression .)
    DIVIGUAL        reduce using rule 108 (rangeExpression -> additiveExpression .)
    MODIGUAL        reduce using rule 108 (rangeExpression -> additiveExpression .)
    RPAREN          reduce using rule 108 (rangeExpression -> additiveExpression .)
    COMMA           reduce using rule 108 (rangeExpression -> additiveExpression .)
    RCCT            reduce using rule 108 (rangeExpression -> additiveExpression .)
    PONTOPONTO      shift and go to state 142

  ! PONTOPONTO      [ reduce using rule 108 (rangeExpression -> additiveExpression .) ]


state 40

    (110) additiveExpression -> multiplicativeExpression .
    (111) additiveExpression -> multiplicativeExpression . additiveOperator additiveExpression
    (251) additiveOperator -> . PLUS
    (252) additiveOperator -> . MINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    FUN             reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    $end            reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    ID              reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    FOR             reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    WHILE           reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    DO              reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    VAR             reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    VAL             reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    CROSSINLINE     reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    IMPORT          reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    INIT            reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    NOINLINE        reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    OUT             reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    VARARG          reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    WHERE           reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    OPERATOR        reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    LPAREN          reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    LITERAL_STRING  reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    NUMBER          reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    COLONCOLON      reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    LCCT            reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    IF              reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    RETURN          reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    RETURN_AT       reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    CONTINUE        reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    CONTINUE_AT     reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    BREAK           reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    BREAK_AT        reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    LCHAVE          reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    INCREMENTO      reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    DECREMENTO      reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    NOT             reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    SUSPEND         reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    RCHAVE          reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    PV              reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    ELSE            reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    MENOR           reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    PONTO           reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    AS              reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    MULT            reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    DIVIDE          reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    MOD             reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    PONTOPONTO      reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    ELVIS           reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    IN              reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    NOT_IN          reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    IS              reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    NOT_IS          reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    MAIOR           reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    MENORIGUAL      reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    MAIORIGUAL      reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    DIFERENTE       reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    IDENTIDADE      reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    IGUALDADE       reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    SEMIDENTIDADE   reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    AND             reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    OR              reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    MAISIGUAL       reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    MENOSIGUAL      reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    MULTIGUAL       reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    DIVIGUAL        reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    MODIGUAL        reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    RPAREN          reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    COMMA           reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    RCCT            reduce using rule 110 (additiveExpression -> multiplicativeExpression .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 145

  ! MINUS           [ reduce using rule 110 (additiveExpression -> multiplicativeExpression .) ]
  ! PLUS            [ reduce using rule 110 (additiveExpression -> multiplicativeExpression .) ]

    additiveOperator               shift and go to state 143

state 41

    (112) multiplicativeExpression -> asExpression .
    (113) multiplicativeExpression -> asExpression . multiplicativeOperator multiplicativeExpression
    (253) multiplicativeOperator -> . MULT
    (254) multiplicativeOperator -> . DIVIDE
    (255) multiplicativeOperator -> . MOD

  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    FUN             reduce using rule 112 (multiplicativeExpression -> asExpression .)
    $end            reduce using rule 112 (multiplicativeExpression -> asExpression .)
    ID              reduce using rule 112 (multiplicativeExpression -> asExpression .)
    FOR             reduce using rule 112 (multiplicativeExpression -> asExpression .)
    WHILE           reduce using rule 112 (multiplicativeExpression -> asExpression .)
    DO              reduce using rule 112 (multiplicativeExpression -> asExpression .)
    VAR             reduce using rule 112 (multiplicativeExpression -> asExpression .)
    VAL             reduce using rule 112 (multiplicativeExpression -> asExpression .)
    CROSSINLINE     reduce using rule 112 (multiplicativeExpression -> asExpression .)
    IMPORT          reduce using rule 112 (multiplicativeExpression -> asExpression .)
    INIT            reduce using rule 112 (multiplicativeExpression -> asExpression .)
    NOINLINE        reduce using rule 112 (multiplicativeExpression -> asExpression .)
    OUT             reduce using rule 112 (multiplicativeExpression -> asExpression .)
    VARARG          reduce using rule 112 (multiplicativeExpression -> asExpression .)
    WHERE           reduce using rule 112 (multiplicativeExpression -> asExpression .)
    OPERATOR        reduce using rule 112 (multiplicativeExpression -> asExpression .)
    LPAREN          reduce using rule 112 (multiplicativeExpression -> asExpression .)
    LITERAL_STRING  reduce using rule 112 (multiplicativeExpression -> asExpression .)
    NUMBER          reduce using rule 112 (multiplicativeExpression -> asExpression .)
    COLONCOLON      reduce using rule 112 (multiplicativeExpression -> asExpression .)
    LCCT            reduce using rule 112 (multiplicativeExpression -> asExpression .)
    IF              reduce using rule 112 (multiplicativeExpression -> asExpression .)
    RETURN          reduce using rule 112 (multiplicativeExpression -> asExpression .)
    RETURN_AT       reduce using rule 112 (multiplicativeExpression -> asExpression .)
    CONTINUE        reduce using rule 112 (multiplicativeExpression -> asExpression .)
    CONTINUE_AT     reduce using rule 112 (multiplicativeExpression -> asExpression .)
    BREAK           reduce using rule 112 (multiplicativeExpression -> asExpression .)
    BREAK_AT        reduce using rule 112 (multiplicativeExpression -> asExpression .)
    LCHAVE          reduce using rule 112 (multiplicativeExpression -> asExpression .)
    INCREMENTO      reduce using rule 112 (multiplicativeExpression -> asExpression .)
    DECREMENTO      reduce using rule 112 (multiplicativeExpression -> asExpression .)
    MINUS           reduce using rule 112 (multiplicativeExpression -> asExpression .)
    PLUS            reduce using rule 112 (multiplicativeExpression -> asExpression .)
    NOT             reduce using rule 112 (multiplicativeExpression -> asExpression .)
    SUSPEND         reduce using rule 112 (multiplicativeExpression -> asExpression .)
    RCHAVE          reduce using rule 112 (multiplicativeExpression -> asExpression .)
    PV              reduce using rule 112 (multiplicativeExpression -> asExpression .)
    ELSE            reduce using rule 112 (multiplicativeExpression -> asExpression .)
    MENOR           reduce using rule 112 (multiplicativeExpression -> asExpression .)
    PONTO           reduce using rule 112 (multiplicativeExpression -> asExpression .)
    AS              reduce using rule 112 (multiplicativeExpression -> asExpression .)
    PONTOPONTO      reduce using rule 112 (multiplicativeExpression -> asExpression .)
    ELVIS           reduce using rule 112 (multiplicativeExpression -> asExpression .)
    IN              reduce using rule 112 (multiplicativeExpression -> asExpression .)
    NOT_IN          reduce using rule 112 (multiplicativeExpression -> asExpression .)
    IS              reduce using rule 112 (multiplicativeExpression -> asExpression .)
    NOT_IS          reduce using rule 112 (multiplicativeExpression -> asExpression .)
    MAIOR           reduce using rule 112 (multiplicativeExpression -> asExpression .)
    MENORIGUAL      reduce using rule 112 (multiplicativeExpression -> asExpression .)
    MAIORIGUAL      reduce using rule 112 (multiplicativeExpression -> asExpression .)
    DIFERENTE       reduce using rule 112 (multiplicativeExpression -> asExpression .)
    IDENTIDADE      reduce using rule 112 (multiplicativeExpression -> asExpression .)
    IGUALDADE       reduce using rule 112 (multiplicativeExpression -> asExpression .)
    SEMIDENTIDADE   reduce using rule 112 (multiplicativeExpression -> asExpression .)
    AND             reduce using rule 112 (multiplicativeExpression -> asExpression .)
    OR              reduce using rule 112 (multiplicativeExpression -> asExpression .)
    MAISIGUAL       reduce using rule 112 (multiplicativeExpression -> asExpression .)
    MENOSIGUAL      reduce using rule 112 (multiplicativeExpression -> asExpression .)
    MULTIGUAL       reduce using rule 112 (multiplicativeExpression -> asExpression .)
    DIVIGUAL        reduce using rule 112 (multiplicativeExpression -> asExpression .)
    MODIGUAL        reduce using rule 112 (multiplicativeExpression -> asExpression .)
    RPAREN          reduce using rule 112 (multiplicativeExpression -> asExpression .)
    COMMA           reduce using rule 112 (multiplicativeExpression -> asExpression .)
    RCCT            reduce using rule 112 (multiplicativeExpression -> asExpression .)
    MULT            shift and go to state 147
    DIVIDE          shift and go to state 148
    MOD             shift and go to state 149

  ! MULT            [ reduce using rule 112 (multiplicativeExpression -> asExpression .) ]
  ! DIVIDE          [ reduce using rule 112 (multiplicativeExpression -> asExpression .) ]
  ! MOD             [ reduce using rule 112 (multiplicativeExpression -> asExpression .) ]

    multiplicativeOperator         shift and go to state 146

state 42

    (114) asExpression -> prefixUnaryExpression .
    (115) asExpression -> prefixUnaryExpression . asOperator type
    (256) asOperator -> . AS
    (257) asOperator -> . AS asOperator

  ! shift/reduce conflict for AS resolved as shift
    FUN             reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    $end            reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    ID              reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    FOR             reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    WHILE           reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    DO              reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    VAR             reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    VAL             reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    CROSSINLINE     reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    IMPORT          reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    INIT            reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    NOINLINE        reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    OUT             reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    VARARG          reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    WHERE           reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    OPERATOR        reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    LPAREN          reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    LITERAL_STRING  reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    NUMBER          reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    COLONCOLON      reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    LCCT            reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    IF              reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    RETURN          reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    RETURN_AT       reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    CONTINUE        reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    CONTINUE_AT     reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    BREAK           reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    BREAK_AT        reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    LCHAVE          reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    INCREMENTO      reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    DECREMENTO      reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    MINUS           reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    PLUS            reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    NOT             reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    SUSPEND         reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    RCHAVE          reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    PV              reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    ELSE            reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    MENOR           reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    PONTO           reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    MULT            reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    DIVIDE          reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    MOD             reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    PONTOPONTO      reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    ELVIS           reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    IN              reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    NOT_IN          reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    IS              reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    NOT_IS          reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    MAIOR           reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    MENORIGUAL      reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    MAIORIGUAL      reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    DIFERENTE       reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    IDENTIDADE      reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    IGUALDADE       reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    SEMIDENTIDADE   reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    AND             reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    OR              reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    MAISIGUAL       reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    MENOSIGUAL      reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    MULTIGUAL       reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    DIVIGUAL        reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    MODIGUAL        reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    RPAREN          reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    COMMA           reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    RCCT            reduce using rule 114 (asExpression -> prefixUnaryExpression .)
    AS              shift and go to state 151

  ! AS              [ reduce using rule 114 (asExpression -> prefixUnaryExpression .) ]

    asOperator                     shift and go to state 150

state 43

    (116) prefixUnaryExpression -> prefixUnaryExpressionRecursive . postfixUnaryExpression
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    postfixUnaryExpression         shift and go to state 152
    primaryExpression              shift and go to state 46
    parenthesizedExpression        shift and go to state 49
    simpleIdentifier               shift and go to state 153
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 44

    (117) prefixUnaryExpression -> postfixUnaryExpression .

    FUN             reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    $end            reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    ID              reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    FOR             reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    WHILE           reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    DO              reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    VAR             reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    VAL             reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    CROSSINLINE     reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    IMPORT          reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    INIT            reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOINLINE        reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    OUT             reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    VARARG          reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    WHERE           reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    OPERATOR        reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    LPAREN          reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    LITERAL_STRING  reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    NUMBER          reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    COLONCOLON      reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    LCCT            reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    IF              reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    RETURN          reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    RETURN_AT       reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONTINUE        reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONTINUE_AT     reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    BREAK           reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    BREAK_AT        reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    LCHAVE          reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    INCREMENTO      reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    DECREMENTO      reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    MINUS           reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    PLUS            reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOT             reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    SUSPEND         reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    RCHAVE          reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    PV              reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    ELSE            reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    MENOR           reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    PONTO           reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    AS              reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    MULT            reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    DIVIDE          reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    MOD             reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    PONTOPONTO      reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    ELVIS           reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    IN              reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOT_IN          reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    IS              reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOT_IS          reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    MAIOR           reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    MENORIGUAL      reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    MAIORIGUAL      reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    DIFERENTE       reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    IDENTIDADE      reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    IGUALDADE       reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    SEMIDENTIDADE   reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    AND             reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    OR              reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    MAISIGUAL       reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    MENOSIGUAL      reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    MULTIGUAL       reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    DIVIGUAL        reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    MODIGUAL        reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    RPAREN          reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    COMMA           reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    RCCT            reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)


state 45

    (120) prefixUnaryExpressionRecursive -> unaryPrefix .
    (121) prefixUnaryExpressionRecursive -> unaryPrefix . prefixUnaryExpressionRecursive
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
    LITERAL_STRING  reduce using rule 120 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    NUMBER          reduce using rule 120 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    LPAREN          reduce using rule 120 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    COLONCOLON      reduce using rule 120 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    LCCT            reduce using rule 120 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    IF              reduce using rule 120 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    RETURN          reduce using rule 120 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    RETURN_AT       reduce using rule 120 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    CONTINUE        reduce using rule 120 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    CONTINUE_AT     reduce using rule 120 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    BREAK           reduce using rule 120 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    BREAK_AT        reduce using rule 120 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    LCHAVE          reduce using rule 120 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    FUN             reduce using rule 120 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    SUSPEND         reduce using rule 120 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

  ! ID              [ reduce using rule 120 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! CROSSINLINE     [ reduce using rule 120 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! IMPORT          [ reduce using rule 120 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! INIT            [ reduce using rule 120 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! NOINLINE        [ reduce using rule 120 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! OUT             [ reduce using rule 120 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! VARARG          [ reduce using rule 120 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! WHERE           [ reduce using rule 120 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! OPERATOR        [ reduce using rule 120 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]

    unaryPrefix                    shift and go to state 45
    prefixUnaryExpressionRecursive shift and go to state 154
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    simpleIdentifier               shift and go to state 155

state 46

    (124) postfixUnaryExpression -> primaryExpression .
    (125) postfixUnaryExpression -> primaryExpression . postfixUnaryExpressionRecursive
    (122) postfixUnaryExpressionRecursive -> . postfixUnarySuffix
    (123) postfixUnaryExpressionRecursive -> . postfixUnarySuffix postfixUnaryExpressionRecursive
    (126) postfixUnarySuffix -> . postfixUnaryOperator
    (127) postfixUnarySuffix -> . typeArguments
    (128) postfixUnarySuffix -> . callSuffix
    (129) postfixUnarySuffix -> . indexingSuffix
    (130) postfixUnarySuffix -> . navigationSuffix
    (263) postfixUnaryOperator -> . INCREMENTO
    (264) postfixUnaryOperator -> . DECREMENTO
    (153) typeArguments -> . MENOR typeArgumentsRecursive MAIOR
    (154) typeArguments -> . MENOR MAIOR
    (147) callSuffix -> . typeArguments valueArguments annotatedLambda
    (148) callSuffix -> . typeArguments valueArguments
    (149) callSuffix -> . annotatedLambda
    (150) callSuffix -> . valueArguments annotatedLambda
    (151) callSuffix -> . valueArguments
    (141) indexingSuffix -> . LCCT indexingSuffixRecursive RCCT
    (142) indexingSuffix -> . LCCT RCCT
    (145) navigationSuffix -> . memberAccessOperator simpleIdentifier CLASS
    (146) navigationSuffix -> . memberAccessOperator parenthesizedExpression CLASS
    (152) annotatedLambda -> . lambdaLiteral
    (159) valueArguments -> . LPAREN RPAREN
    (160) valueArguments -> . LPAREN valueArgumentsRecursive RPAREN
    (265) memberAccessOperator -> . safeNav
    (266) memberAccessOperator -> . COLONCOLON
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (267) safeNav -> . PONTO

  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for COLONCOLON resolved as shift
  ! shift/reduce conflict for LCHAVE resolved as shift
  ! shift/reduce conflict for PONTO resolved as shift
    FUN             reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    $end            reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    ID              reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    FOR             reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    WHILE           reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    DO              reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    VAR             reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    VAL             reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    CROSSINLINE     reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    IMPORT          reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    INIT            reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    NOINLINE        reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    OUT             reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    VARARG          reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    WHERE           reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    OPERATOR        reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    LITERAL_STRING  reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    NUMBER          reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    IF              reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    RETURN          reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    RETURN_AT       reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    CONTINUE        reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    CONTINUE_AT     reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    BREAK           reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    BREAK_AT        reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    MINUS           reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    PLUS            reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    NOT             reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    SUSPEND         reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    RCHAVE          reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    PV              reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    ELSE            reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    AS              reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    MULT            reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    DIVIDE          reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    MOD             reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    PONTOPONTO      reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    ELVIS           reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    IN              reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    NOT_IN          reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    IS              reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    NOT_IS          reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    MAIOR           reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    MENORIGUAL      reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    MAIORIGUAL      reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    DIFERENTE       reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    IDENTIDADE      reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    IGUALDADE       reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    SEMIDENTIDADE   reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    AND             reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    OR              reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    MAISIGUAL       reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    MENOSIGUAL      reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    MULTIGUAL       reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    DIVIGUAL        reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    MODIGUAL        reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    RPAREN          reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    COMMA           reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    RCCT            reduce using rule 124 (postfixUnaryExpression -> primaryExpression .)
    INCREMENTO      shift and go to state 163
    DECREMENTO      shift and go to state 164
    MENOR           shift and go to state 165
    LCCT            shift and go to state 168
    LPAREN          shift and go to state 171
    COLONCOLON      shift and go to state 173
    LCHAVE          shift and go to state 76
    PONTO           shift and go to state 174

  ! LPAREN          [ reduce using rule 124 (postfixUnaryExpression -> primaryExpression .) ]
  ! COLONCOLON      [ reduce using rule 124 (postfixUnaryExpression -> primaryExpression .) ]
  ! LCCT            [ reduce using rule 124 (postfixUnaryExpression -> primaryExpression .) ]
  ! LCHAVE          [ reduce using rule 124 (postfixUnaryExpression -> primaryExpression .) ]
  ! INCREMENTO      [ reduce using rule 124 (postfixUnaryExpression -> primaryExpression .) ]
  ! DECREMENTO      [ reduce using rule 124 (postfixUnaryExpression -> primaryExpression .) ]
  ! MENOR           [ reduce using rule 124 (postfixUnaryExpression -> primaryExpression .) ]
  ! PONTO           [ reduce using rule 124 (postfixUnaryExpression -> primaryExpression .) ]

    postfixUnaryExpressionRecursive shift and go to state 156
    postfixUnarySuffix             shift and go to state 157
    postfixUnaryOperator           shift and go to state 158
    typeArguments                  shift and go to state 159
    callSuffix                     shift and go to state 160
    indexingSuffix                 shift and go to state 161
    navigationSuffix               shift and go to state 162
    valueArguments                 shift and go to state 166
    annotatedLambda                shift and go to state 167
    memberAccessOperator           shift and go to state 169
    lambdaLiteral                  shift and go to state 170
    safeNav                        shift and go to state 172

state 47

    (118) unaryPrefix -> label .

    INCREMENTO      reduce using rule 118 (unaryPrefix -> label .)
    DECREMENTO      reduce using rule 118 (unaryPrefix -> label .)
    MINUS           reduce using rule 118 (unaryPrefix -> label .)
    PLUS            reduce using rule 118 (unaryPrefix -> label .)
    NOT             reduce using rule 118 (unaryPrefix -> label .)
    ID              reduce using rule 118 (unaryPrefix -> label .)
    CROSSINLINE     reduce using rule 118 (unaryPrefix -> label .)
    IMPORT          reduce using rule 118 (unaryPrefix -> label .)
    INIT            reduce using rule 118 (unaryPrefix -> label .)
    NOINLINE        reduce using rule 118 (unaryPrefix -> label .)
    OUT             reduce using rule 118 (unaryPrefix -> label .)
    VARARG          reduce using rule 118 (unaryPrefix -> label .)
    WHERE           reduce using rule 118 (unaryPrefix -> label .)
    OPERATOR        reduce using rule 118 (unaryPrefix -> label .)
    LITERAL_STRING  reduce using rule 118 (unaryPrefix -> label .)
    NUMBER          reduce using rule 118 (unaryPrefix -> label .)
    LPAREN          reduce using rule 118 (unaryPrefix -> label .)
    COLONCOLON      reduce using rule 118 (unaryPrefix -> label .)
    LCCT            reduce using rule 118 (unaryPrefix -> label .)
    IF              reduce using rule 118 (unaryPrefix -> label .)
    RETURN          reduce using rule 118 (unaryPrefix -> label .)
    RETURN_AT       reduce using rule 118 (unaryPrefix -> label .)
    CONTINUE        reduce using rule 118 (unaryPrefix -> label .)
    CONTINUE_AT     reduce using rule 118 (unaryPrefix -> label .)
    BREAK           reduce using rule 118 (unaryPrefix -> label .)
    BREAK_AT        reduce using rule 118 (unaryPrefix -> label .)
    LCHAVE          reduce using rule 118 (unaryPrefix -> label .)
    FUN             reduce using rule 118 (unaryPrefix -> label .)
    SUSPEND         reduce using rule 118 (unaryPrefix -> label .)


state 48

    (119) unaryPrefix -> prefixUnaryOperator .

    INCREMENTO      reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    DECREMENTO      reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    MINUS           reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    PLUS            reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    NOT             reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    ID              reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    CROSSINLINE     reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    IMPORT          reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    INIT            reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    NOINLINE        reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    OUT             reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    VARARG          reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    WHERE           reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    OPERATOR        reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    LITERAL_STRING  reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    NUMBER          reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    LPAREN          reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    COLONCOLON      reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    LCCT            reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    IF              reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    RETURN          reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    RETURN_AT       reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    CONTINUE        reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    CONTINUE_AT     reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    BREAK           reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    BREAK_AT        reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    LCHAVE          reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    FUN             reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    SUSPEND         reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)


state 49

    (164) primaryExpression -> parenthesizedExpression .

    FUN             reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    $end            reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    ID              reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    FOR             reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    WHILE           reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    DO              reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    VAR             reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    VAL             reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    CROSSINLINE     reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    IMPORT          reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    INIT            reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    NOINLINE        reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    OUT             reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    VARARG          reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    WHERE           reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    OPERATOR        reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    LPAREN          reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    LITERAL_STRING  reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    NUMBER          reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    COLONCOLON      reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    LCCT            reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    IF              reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    RETURN          reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    RETURN_AT       reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    CONTINUE        reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    CONTINUE_AT     reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    BREAK           reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    BREAK_AT        reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    LCHAVE          reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    INCREMENTO      reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    DECREMENTO      reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    MINUS           reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    PLUS            reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    NOT             reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    SUSPEND         reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    RCHAVE          reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    PV              reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    ELSE            reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    MENOR           reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    PONTO           reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    AS              reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    MULT            reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    DIVIDE          reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    MOD             reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    PONTOPONTO      reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    ELVIS           reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    IN              reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    NOT_IN          reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    IS              reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    NOT_IS          reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    MAIOR           reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    MENORIGUAL      reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    MAIORIGUAL      reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    DIFERENTE       reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    IDENTIDADE      reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    IGUALDADE       reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    SEMIDENTIDADE   reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    AND             reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    OR              reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    MAISIGUAL       reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    MENOSIGUAL      reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    MULTIGUAL       reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    DIVIGUAL        reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    MODIGUAL        reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    RPAREN          reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    COMMA           reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    RCCT            reduce using rule 164 (primaryExpression -> parenthesizedExpression .)


state 50

    (166) primaryExpression -> LITERAL_STRING .

    FUN             reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    $end            reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    ID              reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    FOR             reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    WHILE           reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    DO              reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    VAR             reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    VAL             reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    CROSSINLINE     reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    IMPORT          reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    INIT            reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    NOINLINE        reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    OUT             reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    VARARG          reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    WHERE           reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    OPERATOR        reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    LPAREN          reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    LITERAL_STRING  reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    NUMBER          reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    COLONCOLON      reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    LCCT            reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    IF              reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    RETURN          reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    RETURN_AT       reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    CONTINUE        reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    CONTINUE_AT     reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    BREAK           reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    BREAK_AT        reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    LCHAVE          reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    INCREMENTO      reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    DECREMENTO      reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    MINUS           reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    PLUS            reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    NOT             reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    SUSPEND         reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    RCHAVE          reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    PV              reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    ELSE            reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    MENOR           reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    PONTO           reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    AS              reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    MULT            reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    DIVIDE          reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    MOD             reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    PONTOPONTO      reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    ELVIS           reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    IN              reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    NOT_IN          reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    IS              reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    NOT_IS          reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    MAIOR           reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    MENORIGUAL      reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    MAIORIGUAL      reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    DIFERENTE       reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    IDENTIDADE      reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    IGUALDADE       reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    SEMIDENTIDADE   reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    AND             reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    OR              reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    MAISIGUAL       reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    MENOSIGUAL      reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    MULTIGUAL       reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    DIVIGUAL        reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    MODIGUAL        reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    RPAREN          reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    COMMA           reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    RCCT            reduce using rule 166 (primaryExpression -> LITERAL_STRING .)


state 51

    (167) primaryExpression -> NUMBER .

    FUN             reduce using rule 167 (primaryExpression -> NUMBER .)
    $end            reduce using rule 167 (primaryExpression -> NUMBER .)
    ID              reduce using rule 167 (primaryExpression -> NUMBER .)
    FOR             reduce using rule 167 (primaryExpression -> NUMBER .)
    WHILE           reduce using rule 167 (primaryExpression -> NUMBER .)
    DO              reduce using rule 167 (primaryExpression -> NUMBER .)
    VAR             reduce using rule 167 (primaryExpression -> NUMBER .)
    VAL             reduce using rule 167 (primaryExpression -> NUMBER .)
    CROSSINLINE     reduce using rule 167 (primaryExpression -> NUMBER .)
    IMPORT          reduce using rule 167 (primaryExpression -> NUMBER .)
    INIT            reduce using rule 167 (primaryExpression -> NUMBER .)
    NOINLINE        reduce using rule 167 (primaryExpression -> NUMBER .)
    OUT             reduce using rule 167 (primaryExpression -> NUMBER .)
    VARARG          reduce using rule 167 (primaryExpression -> NUMBER .)
    WHERE           reduce using rule 167 (primaryExpression -> NUMBER .)
    OPERATOR        reduce using rule 167 (primaryExpression -> NUMBER .)
    LPAREN          reduce using rule 167 (primaryExpression -> NUMBER .)
    LITERAL_STRING  reduce using rule 167 (primaryExpression -> NUMBER .)
    NUMBER          reduce using rule 167 (primaryExpression -> NUMBER .)
    COLONCOLON      reduce using rule 167 (primaryExpression -> NUMBER .)
    LCCT            reduce using rule 167 (primaryExpression -> NUMBER .)
    IF              reduce using rule 167 (primaryExpression -> NUMBER .)
    RETURN          reduce using rule 167 (primaryExpression -> NUMBER .)
    RETURN_AT       reduce using rule 167 (primaryExpression -> NUMBER .)
    CONTINUE        reduce using rule 167 (primaryExpression -> NUMBER .)
    CONTINUE_AT     reduce using rule 167 (primaryExpression -> NUMBER .)
    BREAK           reduce using rule 167 (primaryExpression -> NUMBER .)
    BREAK_AT        reduce using rule 167 (primaryExpression -> NUMBER .)
    LCHAVE          reduce using rule 167 (primaryExpression -> NUMBER .)
    INCREMENTO      reduce using rule 167 (primaryExpression -> NUMBER .)
    DECREMENTO      reduce using rule 167 (primaryExpression -> NUMBER .)
    MINUS           reduce using rule 167 (primaryExpression -> NUMBER .)
    PLUS            reduce using rule 167 (primaryExpression -> NUMBER .)
    NOT             reduce using rule 167 (primaryExpression -> NUMBER .)
    SUSPEND         reduce using rule 167 (primaryExpression -> NUMBER .)
    RCHAVE          reduce using rule 167 (primaryExpression -> NUMBER .)
    PV              reduce using rule 167 (primaryExpression -> NUMBER .)
    ELSE            reduce using rule 167 (primaryExpression -> NUMBER .)
    MENOR           reduce using rule 167 (primaryExpression -> NUMBER .)
    PONTO           reduce using rule 167 (primaryExpression -> NUMBER .)
    AS              reduce using rule 167 (primaryExpression -> NUMBER .)
    MULT            reduce using rule 167 (primaryExpression -> NUMBER .)
    DIVIDE          reduce using rule 167 (primaryExpression -> NUMBER .)
    MOD             reduce using rule 167 (primaryExpression -> NUMBER .)
    PONTOPONTO      reduce using rule 167 (primaryExpression -> NUMBER .)
    ELVIS           reduce using rule 167 (primaryExpression -> NUMBER .)
    IN              reduce using rule 167 (primaryExpression -> NUMBER .)
    NOT_IN          reduce using rule 167 (primaryExpression -> NUMBER .)
    IS              reduce using rule 167 (primaryExpression -> NUMBER .)
    NOT_IS          reduce using rule 167 (primaryExpression -> NUMBER .)
    MAIOR           reduce using rule 167 (primaryExpression -> NUMBER .)
    MENORIGUAL      reduce using rule 167 (primaryExpression -> NUMBER .)
    MAIORIGUAL      reduce using rule 167 (primaryExpression -> NUMBER .)
    DIFERENTE       reduce using rule 167 (primaryExpression -> NUMBER .)
    IDENTIDADE      reduce using rule 167 (primaryExpression -> NUMBER .)
    IGUALDADE       reduce using rule 167 (primaryExpression -> NUMBER .)
    SEMIDENTIDADE   reduce using rule 167 (primaryExpression -> NUMBER .)
    AND             reduce using rule 167 (primaryExpression -> NUMBER .)
    OR              reduce using rule 167 (primaryExpression -> NUMBER .)
    MAISIGUAL       reduce using rule 167 (primaryExpression -> NUMBER .)
    MENOSIGUAL      reduce using rule 167 (primaryExpression -> NUMBER .)
    MULTIGUAL       reduce using rule 167 (primaryExpression -> NUMBER .)
    DIVIGUAL        reduce using rule 167 (primaryExpression -> NUMBER .)
    MODIGUAL        reduce using rule 167 (primaryExpression -> NUMBER .)
    RPAREN          reduce using rule 167 (primaryExpression -> NUMBER .)
    COMMA           reduce using rule 167 (primaryExpression -> NUMBER .)
    RCCT            reduce using rule 167 (primaryExpression -> NUMBER .)


state 52

    (168) primaryExpression -> callableReference .

    FUN             reduce using rule 168 (primaryExpression -> callableReference .)
    $end            reduce using rule 168 (primaryExpression -> callableReference .)
    ID              reduce using rule 168 (primaryExpression -> callableReference .)
    FOR             reduce using rule 168 (primaryExpression -> callableReference .)
    WHILE           reduce using rule 168 (primaryExpression -> callableReference .)
    DO              reduce using rule 168 (primaryExpression -> callableReference .)
    VAR             reduce using rule 168 (primaryExpression -> callableReference .)
    VAL             reduce using rule 168 (primaryExpression -> callableReference .)
    CROSSINLINE     reduce using rule 168 (primaryExpression -> callableReference .)
    IMPORT          reduce using rule 168 (primaryExpression -> callableReference .)
    INIT            reduce using rule 168 (primaryExpression -> callableReference .)
    NOINLINE        reduce using rule 168 (primaryExpression -> callableReference .)
    OUT             reduce using rule 168 (primaryExpression -> callableReference .)
    VARARG          reduce using rule 168 (primaryExpression -> callableReference .)
    WHERE           reduce using rule 168 (primaryExpression -> callableReference .)
    OPERATOR        reduce using rule 168 (primaryExpression -> callableReference .)
    LPAREN          reduce using rule 168 (primaryExpression -> callableReference .)
    LITERAL_STRING  reduce using rule 168 (primaryExpression -> callableReference .)
    NUMBER          reduce using rule 168 (primaryExpression -> callableReference .)
    COLONCOLON      reduce using rule 168 (primaryExpression -> callableReference .)
    LCCT            reduce using rule 168 (primaryExpression -> callableReference .)
    IF              reduce using rule 168 (primaryExpression -> callableReference .)
    RETURN          reduce using rule 168 (primaryExpression -> callableReference .)
    RETURN_AT       reduce using rule 168 (primaryExpression -> callableReference .)
    CONTINUE        reduce using rule 168 (primaryExpression -> callableReference .)
    CONTINUE_AT     reduce using rule 168 (primaryExpression -> callableReference .)
    BREAK           reduce using rule 168 (primaryExpression -> callableReference .)
    BREAK_AT        reduce using rule 168 (primaryExpression -> callableReference .)
    LCHAVE          reduce using rule 168 (primaryExpression -> callableReference .)
    INCREMENTO      reduce using rule 168 (primaryExpression -> callableReference .)
    DECREMENTO      reduce using rule 168 (primaryExpression -> callableReference .)
    MINUS           reduce using rule 168 (primaryExpression -> callableReference .)
    PLUS            reduce using rule 168 (primaryExpression -> callableReference .)
    NOT             reduce using rule 168 (primaryExpression -> callableReference .)
    SUSPEND         reduce using rule 168 (primaryExpression -> callableReference .)
    RCHAVE          reduce using rule 168 (primaryExpression -> callableReference .)
    PV              reduce using rule 168 (primaryExpression -> callableReference .)
    ELSE            reduce using rule 168 (primaryExpression -> callableReference .)
    MENOR           reduce using rule 168 (primaryExpression -> callableReference .)
    PONTO           reduce using rule 168 (primaryExpression -> callableReference .)
    AS              reduce using rule 168 (primaryExpression -> callableReference .)
    MULT            reduce using rule 168 (primaryExpression -> callableReference .)
    DIVIDE          reduce using rule 168 (primaryExpression -> callableReference .)
    MOD             reduce using rule 168 (primaryExpression -> callableReference .)
    PONTOPONTO      reduce using rule 168 (primaryExpression -> callableReference .)
    ELVIS           reduce using rule 168 (primaryExpression -> callableReference .)
    IN              reduce using rule 168 (primaryExpression -> callableReference .)
    NOT_IN          reduce using rule 168 (primaryExpression -> callableReference .)
    IS              reduce using rule 168 (primaryExpression -> callableReference .)
    NOT_IS          reduce using rule 168 (primaryExpression -> callableReference .)
    MAIOR           reduce using rule 168 (primaryExpression -> callableReference .)
    MENORIGUAL      reduce using rule 168 (primaryExpression -> callableReference .)
    MAIORIGUAL      reduce using rule 168 (primaryExpression -> callableReference .)
    DIFERENTE       reduce using rule 168 (primaryExpression -> callableReference .)
    IDENTIDADE      reduce using rule 168 (primaryExpression -> callableReference .)
    IGUALDADE       reduce using rule 168 (primaryExpression -> callableReference .)
    SEMIDENTIDADE   reduce using rule 168 (primaryExpression -> callableReference .)
    AND             reduce using rule 168 (primaryExpression -> callableReference .)
    OR              reduce using rule 168 (primaryExpression -> callableReference .)
    MAISIGUAL       reduce using rule 168 (primaryExpression -> callableReference .)
    MENOSIGUAL      reduce using rule 168 (primaryExpression -> callableReference .)
    MULTIGUAL       reduce using rule 168 (primaryExpression -> callableReference .)
    DIVIGUAL        reduce using rule 168 (primaryExpression -> callableReference .)
    MODIGUAL        reduce using rule 168 (primaryExpression -> callableReference .)
    RPAREN          reduce using rule 168 (primaryExpression -> callableReference .)
    COMMA           reduce using rule 168 (primaryExpression -> callableReference .)
    RCCT            reduce using rule 168 (primaryExpression -> callableReference .)


state 53

    (169) primaryExpression -> functionLiteral .

    FUN             reduce using rule 169 (primaryExpression -> functionLiteral .)
    $end            reduce using rule 169 (primaryExpression -> functionLiteral .)
    ID              reduce using rule 169 (primaryExpression -> functionLiteral .)
    FOR             reduce using rule 169 (primaryExpression -> functionLiteral .)
    WHILE           reduce using rule 169 (primaryExpression -> functionLiteral .)
    DO              reduce using rule 169 (primaryExpression -> functionLiteral .)
    VAR             reduce using rule 169 (primaryExpression -> functionLiteral .)
    VAL             reduce using rule 169 (primaryExpression -> functionLiteral .)
    CROSSINLINE     reduce using rule 169 (primaryExpression -> functionLiteral .)
    IMPORT          reduce using rule 169 (primaryExpression -> functionLiteral .)
    INIT            reduce using rule 169 (primaryExpression -> functionLiteral .)
    NOINLINE        reduce using rule 169 (primaryExpression -> functionLiteral .)
    OUT             reduce using rule 169 (primaryExpression -> functionLiteral .)
    VARARG          reduce using rule 169 (primaryExpression -> functionLiteral .)
    WHERE           reduce using rule 169 (primaryExpression -> functionLiteral .)
    OPERATOR        reduce using rule 169 (primaryExpression -> functionLiteral .)
    LPAREN          reduce using rule 169 (primaryExpression -> functionLiteral .)
    LITERAL_STRING  reduce using rule 169 (primaryExpression -> functionLiteral .)
    NUMBER          reduce using rule 169 (primaryExpression -> functionLiteral .)
    COLONCOLON      reduce using rule 169 (primaryExpression -> functionLiteral .)
    LCCT            reduce using rule 169 (primaryExpression -> functionLiteral .)
    IF              reduce using rule 169 (primaryExpression -> functionLiteral .)
    RETURN          reduce using rule 169 (primaryExpression -> functionLiteral .)
    RETURN_AT       reduce using rule 169 (primaryExpression -> functionLiteral .)
    CONTINUE        reduce using rule 169 (primaryExpression -> functionLiteral .)
    CONTINUE_AT     reduce using rule 169 (primaryExpression -> functionLiteral .)
    BREAK           reduce using rule 169 (primaryExpression -> functionLiteral .)
    BREAK_AT        reduce using rule 169 (primaryExpression -> functionLiteral .)
    LCHAVE          reduce using rule 169 (primaryExpression -> functionLiteral .)
    INCREMENTO      reduce using rule 169 (primaryExpression -> functionLiteral .)
    DECREMENTO      reduce using rule 169 (primaryExpression -> functionLiteral .)
    MINUS           reduce using rule 169 (primaryExpression -> functionLiteral .)
    PLUS            reduce using rule 169 (primaryExpression -> functionLiteral .)
    NOT             reduce using rule 169 (primaryExpression -> functionLiteral .)
    SUSPEND         reduce using rule 169 (primaryExpression -> functionLiteral .)
    RCHAVE          reduce using rule 169 (primaryExpression -> functionLiteral .)
    PV              reduce using rule 169 (primaryExpression -> functionLiteral .)
    ELSE            reduce using rule 169 (primaryExpression -> functionLiteral .)
    MENOR           reduce using rule 169 (primaryExpression -> functionLiteral .)
    PONTO           reduce using rule 169 (primaryExpression -> functionLiteral .)
    AS              reduce using rule 169 (primaryExpression -> functionLiteral .)
    MULT            reduce using rule 169 (primaryExpression -> functionLiteral .)
    DIVIDE          reduce using rule 169 (primaryExpression -> functionLiteral .)
    MOD             reduce using rule 169 (primaryExpression -> functionLiteral .)
    PONTOPONTO      reduce using rule 169 (primaryExpression -> functionLiteral .)
    ELVIS           reduce using rule 169 (primaryExpression -> functionLiteral .)
    IN              reduce using rule 169 (primaryExpression -> functionLiteral .)
    NOT_IN          reduce using rule 169 (primaryExpression -> functionLiteral .)
    IS              reduce using rule 169 (primaryExpression -> functionLiteral .)
    NOT_IS          reduce using rule 169 (primaryExpression -> functionLiteral .)
    MAIOR           reduce using rule 169 (primaryExpression -> functionLiteral .)
    MENORIGUAL      reduce using rule 169 (primaryExpression -> functionLiteral .)
    MAIORIGUAL      reduce using rule 169 (primaryExpression -> functionLiteral .)
    DIFERENTE       reduce using rule 169 (primaryExpression -> functionLiteral .)
    IDENTIDADE      reduce using rule 169 (primaryExpression -> functionLiteral .)
    IGUALDADE       reduce using rule 169 (primaryExpression -> functionLiteral .)
    SEMIDENTIDADE   reduce using rule 169 (primaryExpression -> functionLiteral .)
    AND             reduce using rule 169 (primaryExpression -> functionLiteral .)
    OR              reduce using rule 169 (primaryExpression -> functionLiteral .)
    MAISIGUAL       reduce using rule 169 (primaryExpression -> functionLiteral .)
    MENOSIGUAL      reduce using rule 169 (primaryExpression -> functionLiteral .)
    MULTIGUAL       reduce using rule 169 (primaryExpression -> functionLiteral .)
    DIVIGUAL        reduce using rule 169 (primaryExpression -> functionLiteral .)
    MODIGUAL        reduce using rule 169 (primaryExpression -> functionLiteral .)
    RPAREN          reduce using rule 169 (primaryExpression -> functionLiteral .)
    COMMA           reduce using rule 169 (primaryExpression -> functionLiteral .)
    RCCT            reduce using rule 169 (primaryExpression -> functionLiteral .)


state 54

    (170) primaryExpression -> collectionLiteral .

    FUN             reduce using rule 170 (primaryExpression -> collectionLiteral .)
    $end            reduce using rule 170 (primaryExpression -> collectionLiteral .)
    ID              reduce using rule 170 (primaryExpression -> collectionLiteral .)
    FOR             reduce using rule 170 (primaryExpression -> collectionLiteral .)
    WHILE           reduce using rule 170 (primaryExpression -> collectionLiteral .)
    DO              reduce using rule 170 (primaryExpression -> collectionLiteral .)
    VAR             reduce using rule 170 (primaryExpression -> collectionLiteral .)
    VAL             reduce using rule 170 (primaryExpression -> collectionLiteral .)
    CROSSINLINE     reduce using rule 170 (primaryExpression -> collectionLiteral .)
    IMPORT          reduce using rule 170 (primaryExpression -> collectionLiteral .)
    INIT            reduce using rule 170 (primaryExpression -> collectionLiteral .)
    NOINLINE        reduce using rule 170 (primaryExpression -> collectionLiteral .)
    OUT             reduce using rule 170 (primaryExpression -> collectionLiteral .)
    VARARG          reduce using rule 170 (primaryExpression -> collectionLiteral .)
    WHERE           reduce using rule 170 (primaryExpression -> collectionLiteral .)
    OPERATOR        reduce using rule 170 (primaryExpression -> collectionLiteral .)
    LPAREN          reduce using rule 170 (primaryExpression -> collectionLiteral .)
    LITERAL_STRING  reduce using rule 170 (primaryExpression -> collectionLiteral .)
    NUMBER          reduce using rule 170 (primaryExpression -> collectionLiteral .)
    COLONCOLON      reduce using rule 170 (primaryExpression -> collectionLiteral .)
    LCCT            reduce using rule 170 (primaryExpression -> collectionLiteral .)
    IF              reduce using rule 170 (primaryExpression -> collectionLiteral .)
    RETURN          reduce using rule 170 (primaryExpression -> collectionLiteral .)
    RETURN_AT       reduce using rule 170 (primaryExpression -> collectionLiteral .)
    CONTINUE        reduce using rule 170 (primaryExpression -> collectionLiteral .)
    CONTINUE_AT     reduce using rule 170 (primaryExpression -> collectionLiteral .)
    BREAK           reduce using rule 170 (primaryExpression -> collectionLiteral .)
    BREAK_AT        reduce using rule 170 (primaryExpression -> collectionLiteral .)
    LCHAVE          reduce using rule 170 (primaryExpression -> collectionLiteral .)
    INCREMENTO      reduce using rule 170 (primaryExpression -> collectionLiteral .)
    DECREMENTO      reduce using rule 170 (primaryExpression -> collectionLiteral .)
    MINUS           reduce using rule 170 (primaryExpression -> collectionLiteral .)
    PLUS            reduce using rule 170 (primaryExpression -> collectionLiteral .)
    NOT             reduce using rule 170 (primaryExpression -> collectionLiteral .)
    SUSPEND         reduce using rule 170 (primaryExpression -> collectionLiteral .)
    RCHAVE          reduce using rule 170 (primaryExpression -> collectionLiteral .)
    PV              reduce using rule 170 (primaryExpression -> collectionLiteral .)
    ELSE            reduce using rule 170 (primaryExpression -> collectionLiteral .)
    MENOR           reduce using rule 170 (primaryExpression -> collectionLiteral .)
    PONTO           reduce using rule 170 (primaryExpression -> collectionLiteral .)
    AS              reduce using rule 170 (primaryExpression -> collectionLiteral .)
    MULT            reduce using rule 170 (primaryExpression -> collectionLiteral .)
    DIVIDE          reduce using rule 170 (primaryExpression -> collectionLiteral .)
    MOD             reduce using rule 170 (primaryExpression -> collectionLiteral .)
    PONTOPONTO      reduce using rule 170 (primaryExpression -> collectionLiteral .)
    ELVIS           reduce using rule 170 (primaryExpression -> collectionLiteral .)
    IN              reduce using rule 170 (primaryExpression -> collectionLiteral .)
    NOT_IN          reduce using rule 170 (primaryExpression -> collectionLiteral .)
    IS              reduce using rule 170 (primaryExpression -> collectionLiteral .)
    NOT_IS          reduce using rule 170 (primaryExpression -> collectionLiteral .)
    MAIOR           reduce using rule 170 (primaryExpression -> collectionLiteral .)
    MENORIGUAL      reduce using rule 170 (primaryExpression -> collectionLiteral .)
    MAIORIGUAL      reduce using rule 170 (primaryExpression -> collectionLiteral .)
    DIFERENTE       reduce using rule 170 (primaryExpression -> collectionLiteral .)
    IDENTIDADE      reduce using rule 170 (primaryExpression -> collectionLiteral .)
    IGUALDADE       reduce using rule 170 (primaryExpression -> collectionLiteral .)
    SEMIDENTIDADE   reduce using rule 170 (primaryExpression -> collectionLiteral .)
    AND             reduce using rule 170 (primaryExpression -> collectionLiteral .)
    OR              reduce using rule 170 (primaryExpression -> collectionLiteral .)
    MAISIGUAL       reduce using rule 170 (primaryExpression -> collectionLiteral .)
    MENOSIGUAL      reduce using rule 170 (primaryExpression -> collectionLiteral .)
    MULTIGUAL       reduce using rule 170 (primaryExpression -> collectionLiteral .)
    DIVIGUAL        reduce using rule 170 (primaryExpression -> collectionLiteral .)
    MODIGUAL        reduce using rule 170 (primaryExpression -> collectionLiteral .)
    RPAREN          reduce using rule 170 (primaryExpression -> collectionLiteral .)
    COMMA           reduce using rule 170 (primaryExpression -> collectionLiteral .)
    RCCT            reduce using rule 170 (primaryExpression -> collectionLiteral .)


state 55

    (171) primaryExpression -> ifExpression .

    FUN             reduce using rule 171 (primaryExpression -> ifExpression .)
    $end            reduce using rule 171 (primaryExpression -> ifExpression .)
    ID              reduce using rule 171 (primaryExpression -> ifExpression .)
    FOR             reduce using rule 171 (primaryExpression -> ifExpression .)
    WHILE           reduce using rule 171 (primaryExpression -> ifExpression .)
    DO              reduce using rule 171 (primaryExpression -> ifExpression .)
    VAR             reduce using rule 171 (primaryExpression -> ifExpression .)
    VAL             reduce using rule 171 (primaryExpression -> ifExpression .)
    CROSSINLINE     reduce using rule 171 (primaryExpression -> ifExpression .)
    IMPORT          reduce using rule 171 (primaryExpression -> ifExpression .)
    INIT            reduce using rule 171 (primaryExpression -> ifExpression .)
    NOINLINE        reduce using rule 171 (primaryExpression -> ifExpression .)
    OUT             reduce using rule 171 (primaryExpression -> ifExpression .)
    VARARG          reduce using rule 171 (primaryExpression -> ifExpression .)
    WHERE           reduce using rule 171 (primaryExpression -> ifExpression .)
    OPERATOR        reduce using rule 171 (primaryExpression -> ifExpression .)
    LPAREN          reduce using rule 171 (primaryExpression -> ifExpression .)
    LITERAL_STRING  reduce using rule 171 (primaryExpression -> ifExpression .)
    NUMBER          reduce using rule 171 (primaryExpression -> ifExpression .)
    COLONCOLON      reduce using rule 171 (primaryExpression -> ifExpression .)
    LCCT            reduce using rule 171 (primaryExpression -> ifExpression .)
    IF              reduce using rule 171 (primaryExpression -> ifExpression .)
    RETURN          reduce using rule 171 (primaryExpression -> ifExpression .)
    RETURN_AT       reduce using rule 171 (primaryExpression -> ifExpression .)
    CONTINUE        reduce using rule 171 (primaryExpression -> ifExpression .)
    CONTINUE_AT     reduce using rule 171 (primaryExpression -> ifExpression .)
    BREAK           reduce using rule 171 (primaryExpression -> ifExpression .)
    BREAK_AT        reduce using rule 171 (primaryExpression -> ifExpression .)
    LCHAVE          reduce using rule 171 (primaryExpression -> ifExpression .)
    INCREMENTO      reduce using rule 171 (primaryExpression -> ifExpression .)
    DECREMENTO      reduce using rule 171 (primaryExpression -> ifExpression .)
    MINUS           reduce using rule 171 (primaryExpression -> ifExpression .)
    PLUS            reduce using rule 171 (primaryExpression -> ifExpression .)
    NOT             reduce using rule 171 (primaryExpression -> ifExpression .)
    SUSPEND         reduce using rule 171 (primaryExpression -> ifExpression .)
    RCHAVE          reduce using rule 171 (primaryExpression -> ifExpression .)
    PV              reduce using rule 171 (primaryExpression -> ifExpression .)
    ELSE            reduce using rule 171 (primaryExpression -> ifExpression .)
    MENOR           reduce using rule 171 (primaryExpression -> ifExpression .)
    PONTO           reduce using rule 171 (primaryExpression -> ifExpression .)
    AS              reduce using rule 171 (primaryExpression -> ifExpression .)
    MULT            reduce using rule 171 (primaryExpression -> ifExpression .)
    DIVIDE          reduce using rule 171 (primaryExpression -> ifExpression .)
    MOD             reduce using rule 171 (primaryExpression -> ifExpression .)
    PONTOPONTO      reduce using rule 171 (primaryExpression -> ifExpression .)
    ELVIS           reduce using rule 171 (primaryExpression -> ifExpression .)
    IN              reduce using rule 171 (primaryExpression -> ifExpression .)
    NOT_IN          reduce using rule 171 (primaryExpression -> ifExpression .)
    IS              reduce using rule 171 (primaryExpression -> ifExpression .)
    NOT_IS          reduce using rule 171 (primaryExpression -> ifExpression .)
    MAIOR           reduce using rule 171 (primaryExpression -> ifExpression .)
    MENORIGUAL      reduce using rule 171 (primaryExpression -> ifExpression .)
    MAIORIGUAL      reduce using rule 171 (primaryExpression -> ifExpression .)
    DIFERENTE       reduce using rule 171 (primaryExpression -> ifExpression .)
    IDENTIDADE      reduce using rule 171 (primaryExpression -> ifExpression .)
    IGUALDADE       reduce using rule 171 (primaryExpression -> ifExpression .)
    SEMIDENTIDADE   reduce using rule 171 (primaryExpression -> ifExpression .)
    AND             reduce using rule 171 (primaryExpression -> ifExpression .)
    OR              reduce using rule 171 (primaryExpression -> ifExpression .)
    MAISIGUAL       reduce using rule 171 (primaryExpression -> ifExpression .)
    MENOSIGUAL      reduce using rule 171 (primaryExpression -> ifExpression .)
    MULTIGUAL       reduce using rule 171 (primaryExpression -> ifExpression .)
    DIVIGUAL        reduce using rule 171 (primaryExpression -> ifExpression .)
    MODIGUAL        reduce using rule 171 (primaryExpression -> ifExpression .)
    RPAREN          reduce using rule 171 (primaryExpression -> ifExpression .)
    COMMA           reduce using rule 171 (primaryExpression -> ifExpression .)
    RCCT            reduce using rule 171 (primaryExpression -> ifExpression .)


state 56

    (172) primaryExpression -> jumpExpression .

    FUN             reduce using rule 172 (primaryExpression -> jumpExpression .)
    $end            reduce using rule 172 (primaryExpression -> jumpExpression .)
    ID              reduce using rule 172 (primaryExpression -> jumpExpression .)
    FOR             reduce using rule 172 (primaryExpression -> jumpExpression .)
    WHILE           reduce using rule 172 (primaryExpression -> jumpExpression .)
    DO              reduce using rule 172 (primaryExpression -> jumpExpression .)
    VAR             reduce using rule 172 (primaryExpression -> jumpExpression .)
    VAL             reduce using rule 172 (primaryExpression -> jumpExpression .)
    CROSSINLINE     reduce using rule 172 (primaryExpression -> jumpExpression .)
    IMPORT          reduce using rule 172 (primaryExpression -> jumpExpression .)
    INIT            reduce using rule 172 (primaryExpression -> jumpExpression .)
    NOINLINE        reduce using rule 172 (primaryExpression -> jumpExpression .)
    OUT             reduce using rule 172 (primaryExpression -> jumpExpression .)
    VARARG          reduce using rule 172 (primaryExpression -> jumpExpression .)
    WHERE           reduce using rule 172 (primaryExpression -> jumpExpression .)
    OPERATOR        reduce using rule 172 (primaryExpression -> jumpExpression .)
    LPAREN          reduce using rule 172 (primaryExpression -> jumpExpression .)
    LITERAL_STRING  reduce using rule 172 (primaryExpression -> jumpExpression .)
    NUMBER          reduce using rule 172 (primaryExpression -> jumpExpression .)
    COLONCOLON      reduce using rule 172 (primaryExpression -> jumpExpression .)
    LCCT            reduce using rule 172 (primaryExpression -> jumpExpression .)
    IF              reduce using rule 172 (primaryExpression -> jumpExpression .)
    RETURN          reduce using rule 172 (primaryExpression -> jumpExpression .)
    RETURN_AT       reduce using rule 172 (primaryExpression -> jumpExpression .)
    CONTINUE        reduce using rule 172 (primaryExpression -> jumpExpression .)
    CONTINUE_AT     reduce using rule 172 (primaryExpression -> jumpExpression .)
    BREAK           reduce using rule 172 (primaryExpression -> jumpExpression .)
    BREAK_AT        reduce using rule 172 (primaryExpression -> jumpExpression .)
    LCHAVE          reduce using rule 172 (primaryExpression -> jumpExpression .)
    INCREMENTO      reduce using rule 172 (primaryExpression -> jumpExpression .)
    DECREMENTO      reduce using rule 172 (primaryExpression -> jumpExpression .)
    MINUS           reduce using rule 172 (primaryExpression -> jumpExpression .)
    PLUS            reduce using rule 172 (primaryExpression -> jumpExpression .)
    NOT             reduce using rule 172 (primaryExpression -> jumpExpression .)
    SUSPEND         reduce using rule 172 (primaryExpression -> jumpExpression .)
    RCHAVE          reduce using rule 172 (primaryExpression -> jumpExpression .)
    PV              reduce using rule 172 (primaryExpression -> jumpExpression .)
    ELSE            reduce using rule 172 (primaryExpression -> jumpExpression .)
    MENOR           reduce using rule 172 (primaryExpression -> jumpExpression .)
    PONTO           reduce using rule 172 (primaryExpression -> jumpExpression .)
    AS              reduce using rule 172 (primaryExpression -> jumpExpression .)
    MULT            reduce using rule 172 (primaryExpression -> jumpExpression .)
    DIVIDE          reduce using rule 172 (primaryExpression -> jumpExpression .)
    MOD             reduce using rule 172 (primaryExpression -> jumpExpression .)
    PONTOPONTO      reduce using rule 172 (primaryExpression -> jumpExpression .)
    ELVIS           reduce using rule 172 (primaryExpression -> jumpExpression .)
    IN              reduce using rule 172 (primaryExpression -> jumpExpression .)
    NOT_IN          reduce using rule 172 (primaryExpression -> jumpExpression .)
    IS              reduce using rule 172 (primaryExpression -> jumpExpression .)
    NOT_IS          reduce using rule 172 (primaryExpression -> jumpExpression .)
    MAIOR           reduce using rule 172 (primaryExpression -> jumpExpression .)
    MENORIGUAL      reduce using rule 172 (primaryExpression -> jumpExpression .)
    MAIORIGUAL      reduce using rule 172 (primaryExpression -> jumpExpression .)
    DIFERENTE       reduce using rule 172 (primaryExpression -> jumpExpression .)
    IDENTIDADE      reduce using rule 172 (primaryExpression -> jumpExpression .)
    IGUALDADE       reduce using rule 172 (primaryExpression -> jumpExpression .)
    SEMIDENTIDADE   reduce using rule 172 (primaryExpression -> jumpExpression .)
    AND             reduce using rule 172 (primaryExpression -> jumpExpression .)
    OR              reduce using rule 172 (primaryExpression -> jumpExpression .)
    MAISIGUAL       reduce using rule 172 (primaryExpression -> jumpExpression .)
    MENOSIGUAL      reduce using rule 172 (primaryExpression -> jumpExpression .)
    MULTIGUAL       reduce using rule 172 (primaryExpression -> jumpExpression .)
    DIVIGUAL        reduce using rule 172 (primaryExpression -> jumpExpression .)
    MODIGUAL        reduce using rule 172 (primaryExpression -> jumpExpression .)
    RPAREN          reduce using rule 172 (primaryExpression -> jumpExpression .)
    COMMA           reduce using rule 172 (primaryExpression -> jumpExpression .)
    RCCT            reduce using rule 172 (primaryExpression -> jumpExpression .)


state 57

    (258) prefixUnaryOperator -> INCREMENTO .

    INCREMENTO      reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    DECREMENTO      reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    MINUS           reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    PLUS            reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    NOT             reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    ID              reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    CROSSINLINE     reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    IMPORT          reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    INIT            reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    NOINLINE        reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    OUT             reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    VARARG          reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    WHERE           reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    OPERATOR        reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    LITERAL_STRING  reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    NUMBER          reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    LPAREN          reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    COLONCOLON      reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    LCCT            reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    IF              reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    RETURN          reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    RETURN_AT       reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    CONTINUE        reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    CONTINUE_AT     reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    BREAK           reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    BREAK_AT        reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    LCHAVE          reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    FUN             reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    SUSPEND         reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)


state 58

    (259) prefixUnaryOperator -> DECREMENTO .

    INCREMENTO      reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    DECREMENTO      reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    MINUS           reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    PLUS            reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    NOT             reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    ID              reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    CROSSINLINE     reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    IMPORT          reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    INIT            reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    NOINLINE        reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    OUT             reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    VARARG          reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    WHERE           reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    OPERATOR        reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    LITERAL_STRING  reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    NUMBER          reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    LPAREN          reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    COLONCOLON      reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    LCCT            reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    IF              reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    RETURN          reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    RETURN_AT       reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    CONTINUE        reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    CONTINUE_AT     reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    BREAK           reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    BREAK_AT        reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    LCHAVE          reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    FUN             reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    SUSPEND         reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)


state 59

    (260) prefixUnaryOperator -> MINUS .

    INCREMENTO      reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    DECREMENTO      reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    MINUS           reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    PLUS            reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    NOT             reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    ID              reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    CROSSINLINE     reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    IMPORT          reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    INIT            reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    NOINLINE        reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    OUT             reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    VARARG          reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    WHERE           reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    OPERATOR        reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    LITERAL_STRING  reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    NUMBER          reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    LPAREN          reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    COLONCOLON      reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    LCCT            reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    IF              reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    RETURN          reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    RETURN_AT       reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    CONTINUE        reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    CONTINUE_AT     reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    BREAK           reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    BREAK_AT        reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    LCHAVE          reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    FUN             reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    SUSPEND         reduce using rule 260 (prefixUnaryOperator -> MINUS .)


state 60

    (261) prefixUnaryOperator -> PLUS .

    INCREMENTO      reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    DECREMENTO      reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    MINUS           reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    PLUS            reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    NOT             reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    ID              reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    CROSSINLINE     reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    IMPORT          reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    INIT            reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    NOINLINE        reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    OUT             reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    VARARG          reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    WHERE           reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    OPERATOR        reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    LITERAL_STRING  reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    NUMBER          reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    LPAREN          reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    COLONCOLON      reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    LCCT            reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    IF              reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    RETURN          reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    RETURN_AT       reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    CONTINUE        reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    CONTINUE_AT     reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    BREAK           reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    BREAK_AT        reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    LCHAVE          reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    FUN             reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    SUSPEND         reduce using rule 261 (prefixUnaryOperator -> PLUS .)


state 61

    (262) prefixUnaryOperator -> NOT .

    INCREMENTO      reduce using rule 262 (prefixUnaryOperator -> NOT .)
    DECREMENTO      reduce using rule 262 (prefixUnaryOperator -> NOT .)
    MINUS           reduce using rule 262 (prefixUnaryOperator -> NOT .)
    PLUS            reduce using rule 262 (prefixUnaryOperator -> NOT .)
    NOT             reduce using rule 262 (prefixUnaryOperator -> NOT .)
    ID              reduce using rule 262 (prefixUnaryOperator -> NOT .)
    CROSSINLINE     reduce using rule 262 (prefixUnaryOperator -> NOT .)
    IMPORT          reduce using rule 262 (prefixUnaryOperator -> NOT .)
    INIT            reduce using rule 262 (prefixUnaryOperator -> NOT .)
    NOINLINE        reduce using rule 262 (prefixUnaryOperator -> NOT .)
    OUT             reduce using rule 262 (prefixUnaryOperator -> NOT .)
    VARARG          reduce using rule 262 (prefixUnaryOperator -> NOT .)
    WHERE           reduce using rule 262 (prefixUnaryOperator -> NOT .)
    OPERATOR        reduce using rule 262 (prefixUnaryOperator -> NOT .)
    LITERAL_STRING  reduce using rule 262 (prefixUnaryOperator -> NOT .)
    NUMBER          reduce using rule 262 (prefixUnaryOperator -> NOT .)
    LPAREN          reduce using rule 262 (prefixUnaryOperator -> NOT .)
    COLONCOLON      reduce using rule 262 (prefixUnaryOperator -> NOT .)
    LCCT            reduce using rule 262 (prefixUnaryOperator -> NOT .)
    IF              reduce using rule 262 (prefixUnaryOperator -> NOT .)
    RETURN          reduce using rule 262 (prefixUnaryOperator -> NOT .)
    RETURN_AT       reduce using rule 262 (prefixUnaryOperator -> NOT .)
    CONTINUE        reduce using rule 262 (prefixUnaryOperator -> NOT .)
    CONTINUE_AT     reduce using rule 262 (prefixUnaryOperator -> NOT .)
    BREAK           reduce using rule 262 (prefixUnaryOperator -> NOT .)
    BREAK_AT        reduce using rule 262 (prefixUnaryOperator -> NOT .)
    LCHAVE          reduce using rule 262 (prefixUnaryOperator -> NOT .)
    FUN             reduce using rule 262 (prefixUnaryOperator -> NOT .)
    SUSPEND         reduce using rule 262 (prefixUnaryOperator -> NOT .)


state 62

    (173) parenthesizedExpression -> LPAREN . expression RPAREN
    (8) expression -> . disjunction
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    expression                     shift and go to state 175
    disjunction                    shift and go to state 30
    conjunction                    shift and go to state 31
    equality                       shift and go to state 32
    comparison                     shift and go to state 33
    infixOperation                 shift and go to state 34
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    simpleIdentifier               shift and go to state 38
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 63

    (230) callableReference -> receiverType . COLONCOLON simpleIdentifierOrClass

    COLONCOLON      shift and go to state 176


state 64

    (231) callableReference -> COLONCOLON . simpleIdentifierOrClass
    (232) simpleIdentifierOrClass -> . simpleIdentifier
    (233) simpleIdentifierOrClass -> . CLASS
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    CLASS           shift and go to state 179
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    simpleIdentifierOrClass        shift and go to state 177
    simpleIdentifier               shift and go to state 178

state 65

    (215) functionLiteral -> lambdaLiteral .

    FUN             reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    $end            reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    ID              reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    FOR             reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    WHILE           reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    DO              reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    VAR             reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    VAL             reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    CROSSINLINE     reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    IMPORT          reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    INIT            reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    NOINLINE        reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    OUT             reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    VARARG          reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    WHERE           reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    OPERATOR        reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    LPAREN          reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    LITERAL_STRING  reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    NUMBER          reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    COLONCOLON      reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    LCCT            reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    IF              reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    RETURN          reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    RETURN_AT       reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    CONTINUE        reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    CONTINUE_AT     reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    BREAK           reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    BREAK_AT        reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    LCHAVE          reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    INCREMENTO      reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    DECREMENTO      reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    MINUS           reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    PLUS            reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    NOT             reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    SUSPEND         reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    RCHAVE          reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    PV              reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    ELSE            reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    MENOR           reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    PONTO           reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    AS              reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    MULT            reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    DIVIDE          reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    MOD             reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    PONTOPONTO      reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    ELVIS           reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    IN              reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    NOT_IN          reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    IS              reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    NOT_IS          reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    MAIOR           reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    MENORIGUAL      reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    MAIORIGUAL      reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    DIFERENTE       reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    IDENTIDADE      reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    IGUALDADE       reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    SEMIDENTIDADE   reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    AND             reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    OR              reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    MAISIGUAL       reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    MENOSIGUAL      reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    MULTIGUAL       reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    DIVIGUAL        reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    MODIGUAL        reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    RPAREN          reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    COMMA           reduce using rule 215 (functionLiteral -> lambdaLiteral .)
    RCCT            reduce using rule 215 (functionLiteral -> lambdaLiteral .)


state 66

    (216) functionLiteral -> anonymousFunction .

    FUN             reduce using rule 216 (functionLiteral -> anonymousFunction .)
    $end            reduce using rule 216 (functionLiteral -> anonymousFunction .)
    ID              reduce using rule 216 (functionLiteral -> anonymousFunction .)
    FOR             reduce using rule 216 (functionLiteral -> anonymousFunction .)
    WHILE           reduce using rule 216 (functionLiteral -> anonymousFunction .)
    DO              reduce using rule 216 (functionLiteral -> anonymousFunction .)
    VAR             reduce using rule 216 (functionLiteral -> anonymousFunction .)
    VAL             reduce using rule 216 (functionLiteral -> anonymousFunction .)
    CROSSINLINE     reduce using rule 216 (functionLiteral -> anonymousFunction .)
    IMPORT          reduce using rule 216 (functionLiteral -> anonymousFunction .)
    INIT            reduce using rule 216 (functionLiteral -> anonymousFunction .)
    NOINLINE        reduce using rule 216 (functionLiteral -> anonymousFunction .)
    OUT             reduce using rule 216 (functionLiteral -> anonymousFunction .)
    VARARG          reduce using rule 216 (functionLiteral -> anonymousFunction .)
    WHERE           reduce using rule 216 (functionLiteral -> anonymousFunction .)
    OPERATOR        reduce using rule 216 (functionLiteral -> anonymousFunction .)
    LPAREN          reduce using rule 216 (functionLiteral -> anonymousFunction .)
    LITERAL_STRING  reduce using rule 216 (functionLiteral -> anonymousFunction .)
    NUMBER          reduce using rule 216 (functionLiteral -> anonymousFunction .)
    COLONCOLON      reduce using rule 216 (functionLiteral -> anonymousFunction .)
    LCCT            reduce using rule 216 (functionLiteral -> anonymousFunction .)
    IF              reduce using rule 216 (functionLiteral -> anonymousFunction .)
    RETURN          reduce using rule 216 (functionLiteral -> anonymousFunction .)
    RETURN_AT       reduce using rule 216 (functionLiteral -> anonymousFunction .)
    CONTINUE        reduce using rule 216 (functionLiteral -> anonymousFunction .)
    CONTINUE_AT     reduce using rule 216 (functionLiteral -> anonymousFunction .)
    BREAK           reduce using rule 216 (functionLiteral -> anonymousFunction .)
    BREAK_AT        reduce using rule 216 (functionLiteral -> anonymousFunction .)
    LCHAVE          reduce using rule 216 (functionLiteral -> anonymousFunction .)
    INCREMENTO      reduce using rule 216 (functionLiteral -> anonymousFunction .)
    DECREMENTO      reduce using rule 216 (functionLiteral -> anonymousFunction .)
    MINUS           reduce using rule 216 (functionLiteral -> anonymousFunction .)
    PLUS            reduce using rule 216 (functionLiteral -> anonymousFunction .)
    NOT             reduce using rule 216 (functionLiteral -> anonymousFunction .)
    SUSPEND         reduce using rule 216 (functionLiteral -> anonymousFunction .)
    RCHAVE          reduce using rule 216 (functionLiteral -> anonymousFunction .)
    PV              reduce using rule 216 (functionLiteral -> anonymousFunction .)
    ELSE            reduce using rule 216 (functionLiteral -> anonymousFunction .)
    MENOR           reduce using rule 216 (functionLiteral -> anonymousFunction .)
    PONTO           reduce using rule 216 (functionLiteral -> anonymousFunction .)
    AS              reduce using rule 216 (functionLiteral -> anonymousFunction .)
    MULT            reduce using rule 216 (functionLiteral -> anonymousFunction .)
    DIVIDE          reduce using rule 216 (functionLiteral -> anonymousFunction .)
    MOD             reduce using rule 216 (functionLiteral -> anonymousFunction .)
    PONTOPONTO      reduce using rule 216 (functionLiteral -> anonymousFunction .)
    ELVIS           reduce using rule 216 (functionLiteral -> anonymousFunction .)
    IN              reduce using rule 216 (functionLiteral -> anonymousFunction .)
    NOT_IN          reduce using rule 216 (functionLiteral -> anonymousFunction .)
    IS              reduce using rule 216 (functionLiteral -> anonymousFunction .)
    NOT_IS          reduce using rule 216 (functionLiteral -> anonymousFunction .)
    MAIOR           reduce using rule 216 (functionLiteral -> anonymousFunction .)
    MENORIGUAL      reduce using rule 216 (functionLiteral -> anonymousFunction .)
    MAIORIGUAL      reduce using rule 216 (functionLiteral -> anonymousFunction .)
    DIFERENTE       reduce using rule 216 (functionLiteral -> anonymousFunction .)
    IDENTIDADE      reduce using rule 216 (functionLiteral -> anonymousFunction .)
    IGUALDADE       reduce using rule 216 (functionLiteral -> anonymousFunction .)
    SEMIDENTIDADE   reduce using rule 216 (functionLiteral -> anonymousFunction .)
    AND             reduce using rule 216 (functionLiteral -> anonymousFunction .)
    OR              reduce using rule 216 (functionLiteral -> anonymousFunction .)
    MAISIGUAL       reduce using rule 216 (functionLiteral -> anonymousFunction .)
    MENOSIGUAL      reduce using rule 216 (functionLiteral -> anonymousFunction .)
    MULTIGUAL       reduce using rule 216 (functionLiteral -> anonymousFunction .)
    DIVIGUAL        reduce using rule 216 (functionLiteral -> anonymousFunction .)
    MODIGUAL        reduce using rule 216 (functionLiteral -> anonymousFunction .)
    RPAREN          reduce using rule 216 (functionLiteral -> anonymousFunction .)
    COMMA           reduce using rule 216 (functionLiteral -> anonymousFunction .)
    RCCT            reduce using rule 216 (functionLiteral -> anonymousFunction .)


state 67

    (174) collectionLiteral -> LCCT . collectionLiteralRecursive RCCT
    (175) collectionLiteral -> LCCT . RCCT
    (176) collectionLiteralRecursive -> . expression
    (177) collectionLiteralRecursive -> . expression COMMA collectionLiteralRecursive
    (8) expression -> . disjunction
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    RCCT            shift and go to state 181
    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    collectionLiteralRecursive     shift and go to state 180
    expression                     shift and go to state 182
    disjunction                    shift and go to state 30
    conjunction                    shift and go to state 31
    equality                       shift and go to state 32
    comparison                     shift and go to state 33
    infixOperation                 shift and go to state 34
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    simpleIdentifier               shift and go to state 38
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 68

    (218) ifExpression -> IF . LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> IF . LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> IF . LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> IF . LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV

    LPAREN          shift and go to state 183


state 69

    (224) jumpExpression -> RETURN . expression
    (8) expression -> . disjunction
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    expression                     shift and go to state 184
    disjunction                    shift and go to state 30
    conjunction                    shift and go to state 31
    equality                       shift and go to state 32
    comparison                     shift and go to state 33
    infixOperation                 shift and go to state 34
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    simpleIdentifier               shift and go to state 38
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 70

    (225) jumpExpression -> RETURN_AT . expression
    (8) expression -> . disjunction
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    expression                     shift and go to state 185
    disjunction                    shift and go to state 30
    conjunction                    shift and go to state 31
    equality                       shift and go to state 32
    comparison                     shift and go to state 33
    infixOperation                 shift and go to state 34
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    simpleIdentifier               shift and go to state 38
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 71

    (226) jumpExpression -> CONTINUE .

    FUN             reduce using rule 226 (jumpExpression -> CONTINUE .)
    $end            reduce using rule 226 (jumpExpression -> CONTINUE .)
    ID              reduce using rule 226 (jumpExpression -> CONTINUE .)
    FOR             reduce using rule 226 (jumpExpression -> CONTINUE .)
    WHILE           reduce using rule 226 (jumpExpression -> CONTINUE .)
    DO              reduce using rule 226 (jumpExpression -> CONTINUE .)
    VAR             reduce using rule 226 (jumpExpression -> CONTINUE .)
    VAL             reduce using rule 226 (jumpExpression -> CONTINUE .)
    CROSSINLINE     reduce using rule 226 (jumpExpression -> CONTINUE .)
    IMPORT          reduce using rule 226 (jumpExpression -> CONTINUE .)
    INIT            reduce using rule 226 (jumpExpression -> CONTINUE .)
    NOINLINE        reduce using rule 226 (jumpExpression -> CONTINUE .)
    OUT             reduce using rule 226 (jumpExpression -> CONTINUE .)
    VARARG          reduce using rule 226 (jumpExpression -> CONTINUE .)
    WHERE           reduce using rule 226 (jumpExpression -> CONTINUE .)
    OPERATOR        reduce using rule 226 (jumpExpression -> CONTINUE .)
    LPAREN          reduce using rule 226 (jumpExpression -> CONTINUE .)
    LITERAL_STRING  reduce using rule 226 (jumpExpression -> CONTINUE .)
    NUMBER          reduce using rule 226 (jumpExpression -> CONTINUE .)
    COLONCOLON      reduce using rule 226 (jumpExpression -> CONTINUE .)
    LCCT            reduce using rule 226 (jumpExpression -> CONTINUE .)
    IF              reduce using rule 226 (jumpExpression -> CONTINUE .)
    RETURN          reduce using rule 226 (jumpExpression -> CONTINUE .)
    RETURN_AT       reduce using rule 226 (jumpExpression -> CONTINUE .)
    CONTINUE        reduce using rule 226 (jumpExpression -> CONTINUE .)
    CONTINUE_AT     reduce using rule 226 (jumpExpression -> CONTINUE .)
    BREAK           reduce using rule 226 (jumpExpression -> CONTINUE .)
    BREAK_AT        reduce using rule 226 (jumpExpression -> CONTINUE .)
    LCHAVE          reduce using rule 226 (jumpExpression -> CONTINUE .)
    INCREMENTO      reduce using rule 226 (jumpExpression -> CONTINUE .)
    DECREMENTO      reduce using rule 226 (jumpExpression -> CONTINUE .)
    MINUS           reduce using rule 226 (jumpExpression -> CONTINUE .)
    PLUS            reduce using rule 226 (jumpExpression -> CONTINUE .)
    NOT             reduce using rule 226 (jumpExpression -> CONTINUE .)
    SUSPEND         reduce using rule 226 (jumpExpression -> CONTINUE .)
    RCHAVE          reduce using rule 226 (jumpExpression -> CONTINUE .)
    PV              reduce using rule 226 (jumpExpression -> CONTINUE .)
    ELSE            reduce using rule 226 (jumpExpression -> CONTINUE .)
    MENOR           reduce using rule 226 (jumpExpression -> CONTINUE .)
    PONTO           reduce using rule 226 (jumpExpression -> CONTINUE .)
    AS              reduce using rule 226 (jumpExpression -> CONTINUE .)
    MULT            reduce using rule 226 (jumpExpression -> CONTINUE .)
    DIVIDE          reduce using rule 226 (jumpExpression -> CONTINUE .)
    MOD             reduce using rule 226 (jumpExpression -> CONTINUE .)
    PONTOPONTO      reduce using rule 226 (jumpExpression -> CONTINUE .)
    ELVIS           reduce using rule 226 (jumpExpression -> CONTINUE .)
    IN              reduce using rule 226 (jumpExpression -> CONTINUE .)
    NOT_IN          reduce using rule 226 (jumpExpression -> CONTINUE .)
    IS              reduce using rule 226 (jumpExpression -> CONTINUE .)
    NOT_IS          reduce using rule 226 (jumpExpression -> CONTINUE .)
    MAIOR           reduce using rule 226 (jumpExpression -> CONTINUE .)
    MENORIGUAL      reduce using rule 226 (jumpExpression -> CONTINUE .)
    MAIORIGUAL      reduce using rule 226 (jumpExpression -> CONTINUE .)
    DIFERENTE       reduce using rule 226 (jumpExpression -> CONTINUE .)
    IDENTIDADE      reduce using rule 226 (jumpExpression -> CONTINUE .)
    IGUALDADE       reduce using rule 226 (jumpExpression -> CONTINUE .)
    SEMIDENTIDADE   reduce using rule 226 (jumpExpression -> CONTINUE .)
    AND             reduce using rule 226 (jumpExpression -> CONTINUE .)
    OR              reduce using rule 226 (jumpExpression -> CONTINUE .)
    MAISIGUAL       reduce using rule 226 (jumpExpression -> CONTINUE .)
    MENOSIGUAL      reduce using rule 226 (jumpExpression -> CONTINUE .)
    MULTIGUAL       reduce using rule 226 (jumpExpression -> CONTINUE .)
    DIVIGUAL        reduce using rule 226 (jumpExpression -> CONTINUE .)
    MODIGUAL        reduce using rule 226 (jumpExpression -> CONTINUE .)
    RPAREN          reduce using rule 226 (jumpExpression -> CONTINUE .)
    COMMA           reduce using rule 226 (jumpExpression -> CONTINUE .)
    RCCT            reduce using rule 226 (jumpExpression -> CONTINUE .)


state 72

    (227) jumpExpression -> CONTINUE_AT .

    FUN             reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    $end            reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    ID              reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    FOR             reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    WHILE           reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    DO              reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    VAR             reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    VAL             reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    CROSSINLINE     reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    IMPORT          reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    INIT            reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    NOINLINE        reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    OUT             reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    VARARG          reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    WHERE           reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    OPERATOR        reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    LPAREN          reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    LITERAL_STRING  reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    NUMBER          reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    COLONCOLON      reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    LCCT            reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    IF              reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    RETURN          reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    RETURN_AT       reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    CONTINUE        reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    CONTINUE_AT     reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    BREAK           reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    BREAK_AT        reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    LCHAVE          reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    INCREMENTO      reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    DECREMENTO      reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    MINUS           reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    PLUS            reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    NOT             reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    SUSPEND         reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    RCHAVE          reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    PV              reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    ELSE            reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    MENOR           reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    PONTO           reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    AS              reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    MULT            reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    DIVIDE          reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    MOD             reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    PONTOPONTO      reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    ELVIS           reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    IN              reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    NOT_IN          reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    IS              reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    NOT_IS          reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    MAIOR           reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    MENORIGUAL      reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    MAIORIGUAL      reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    DIFERENTE       reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    IDENTIDADE      reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    IGUALDADE       reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    SEMIDENTIDADE   reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    AND             reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    OR              reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    MAISIGUAL       reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    MENOSIGUAL      reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    MULTIGUAL       reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    DIVIGUAL        reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    MODIGUAL        reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    RPAREN          reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    COMMA           reduce using rule 227 (jumpExpression -> CONTINUE_AT .)
    RCCT            reduce using rule 227 (jumpExpression -> CONTINUE_AT .)


state 73

    (228) jumpExpression -> BREAK .

    FUN             reduce using rule 228 (jumpExpression -> BREAK .)
    $end            reduce using rule 228 (jumpExpression -> BREAK .)
    ID              reduce using rule 228 (jumpExpression -> BREAK .)
    FOR             reduce using rule 228 (jumpExpression -> BREAK .)
    WHILE           reduce using rule 228 (jumpExpression -> BREAK .)
    DO              reduce using rule 228 (jumpExpression -> BREAK .)
    VAR             reduce using rule 228 (jumpExpression -> BREAK .)
    VAL             reduce using rule 228 (jumpExpression -> BREAK .)
    CROSSINLINE     reduce using rule 228 (jumpExpression -> BREAK .)
    IMPORT          reduce using rule 228 (jumpExpression -> BREAK .)
    INIT            reduce using rule 228 (jumpExpression -> BREAK .)
    NOINLINE        reduce using rule 228 (jumpExpression -> BREAK .)
    OUT             reduce using rule 228 (jumpExpression -> BREAK .)
    VARARG          reduce using rule 228 (jumpExpression -> BREAK .)
    WHERE           reduce using rule 228 (jumpExpression -> BREAK .)
    OPERATOR        reduce using rule 228 (jumpExpression -> BREAK .)
    LPAREN          reduce using rule 228 (jumpExpression -> BREAK .)
    LITERAL_STRING  reduce using rule 228 (jumpExpression -> BREAK .)
    NUMBER          reduce using rule 228 (jumpExpression -> BREAK .)
    COLONCOLON      reduce using rule 228 (jumpExpression -> BREAK .)
    LCCT            reduce using rule 228 (jumpExpression -> BREAK .)
    IF              reduce using rule 228 (jumpExpression -> BREAK .)
    RETURN          reduce using rule 228 (jumpExpression -> BREAK .)
    RETURN_AT       reduce using rule 228 (jumpExpression -> BREAK .)
    CONTINUE        reduce using rule 228 (jumpExpression -> BREAK .)
    CONTINUE_AT     reduce using rule 228 (jumpExpression -> BREAK .)
    BREAK           reduce using rule 228 (jumpExpression -> BREAK .)
    BREAK_AT        reduce using rule 228 (jumpExpression -> BREAK .)
    LCHAVE          reduce using rule 228 (jumpExpression -> BREAK .)
    INCREMENTO      reduce using rule 228 (jumpExpression -> BREAK .)
    DECREMENTO      reduce using rule 228 (jumpExpression -> BREAK .)
    MINUS           reduce using rule 228 (jumpExpression -> BREAK .)
    PLUS            reduce using rule 228 (jumpExpression -> BREAK .)
    NOT             reduce using rule 228 (jumpExpression -> BREAK .)
    SUSPEND         reduce using rule 228 (jumpExpression -> BREAK .)
    RCHAVE          reduce using rule 228 (jumpExpression -> BREAK .)
    PV              reduce using rule 228 (jumpExpression -> BREAK .)
    ELSE            reduce using rule 228 (jumpExpression -> BREAK .)
    MENOR           reduce using rule 228 (jumpExpression -> BREAK .)
    PONTO           reduce using rule 228 (jumpExpression -> BREAK .)
    AS              reduce using rule 228 (jumpExpression -> BREAK .)
    MULT            reduce using rule 228 (jumpExpression -> BREAK .)
    DIVIDE          reduce using rule 228 (jumpExpression -> BREAK .)
    MOD             reduce using rule 228 (jumpExpression -> BREAK .)
    PONTOPONTO      reduce using rule 228 (jumpExpression -> BREAK .)
    ELVIS           reduce using rule 228 (jumpExpression -> BREAK .)
    IN              reduce using rule 228 (jumpExpression -> BREAK .)
    NOT_IN          reduce using rule 228 (jumpExpression -> BREAK .)
    IS              reduce using rule 228 (jumpExpression -> BREAK .)
    NOT_IS          reduce using rule 228 (jumpExpression -> BREAK .)
    MAIOR           reduce using rule 228 (jumpExpression -> BREAK .)
    MENORIGUAL      reduce using rule 228 (jumpExpression -> BREAK .)
    MAIORIGUAL      reduce using rule 228 (jumpExpression -> BREAK .)
    DIFERENTE       reduce using rule 228 (jumpExpression -> BREAK .)
    IDENTIDADE      reduce using rule 228 (jumpExpression -> BREAK .)
    IGUALDADE       reduce using rule 228 (jumpExpression -> BREAK .)
    SEMIDENTIDADE   reduce using rule 228 (jumpExpression -> BREAK .)
    AND             reduce using rule 228 (jumpExpression -> BREAK .)
    OR              reduce using rule 228 (jumpExpression -> BREAK .)
    MAISIGUAL       reduce using rule 228 (jumpExpression -> BREAK .)
    MENOSIGUAL      reduce using rule 228 (jumpExpression -> BREAK .)
    MULTIGUAL       reduce using rule 228 (jumpExpression -> BREAK .)
    DIVIGUAL        reduce using rule 228 (jumpExpression -> BREAK .)
    MODIGUAL        reduce using rule 228 (jumpExpression -> BREAK .)
    RPAREN          reduce using rule 228 (jumpExpression -> BREAK .)
    COMMA           reduce using rule 228 (jumpExpression -> BREAK .)
    RCCT            reduce using rule 228 (jumpExpression -> BREAK .)


state 74

    (229) jumpExpression -> BREAK_AT .

    FUN             reduce using rule 229 (jumpExpression -> BREAK_AT .)
    $end            reduce using rule 229 (jumpExpression -> BREAK_AT .)
    ID              reduce using rule 229 (jumpExpression -> BREAK_AT .)
    FOR             reduce using rule 229 (jumpExpression -> BREAK_AT .)
    WHILE           reduce using rule 229 (jumpExpression -> BREAK_AT .)
    DO              reduce using rule 229 (jumpExpression -> BREAK_AT .)
    VAR             reduce using rule 229 (jumpExpression -> BREAK_AT .)
    VAL             reduce using rule 229 (jumpExpression -> BREAK_AT .)
    CROSSINLINE     reduce using rule 229 (jumpExpression -> BREAK_AT .)
    IMPORT          reduce using rule 229 (jumpExpression -> BREAK_AT .)
    INIT            reduce using rule 229 (jumpExpression -> BREAK_AT .)
    NOINLINE        reduce using rule 229 (jumpExpression -> BREAK_AT .)
    OUT             reduce using rule 229 (jumpExpression -> BREAK_AT .)
    VARARG          reduce using rule 229 (jumpExpression -> BREAK_AT .)
    WHERE           reduce using rule 229 (jumpExpression -> BREAK_AT .)
    OPERATOR        reduce using rule 229 (jumpExpression -> BREAK_AT .)
    LPAREN          reduce using rule 229 (jumpExpression -> BREAK_AT .)
    LITERAL_STRING  reduce using rule 229 (jumpExpression -> BREAK_AT .)
    NUMBER          reduce using rule 229 (jumpExpression -> BREAK_AT .)
    COLONCOLON      reduce using rule 229 (jumpExpression -> BREAK_AT .)
    LCCT            reduce using rule 229 (jumpExpression -> BREAK_AT .)
    IF              reduce using rule 229 (jumpExpression -> BREAK_AT .)
    RETURN          reduce using rule 229 (jumpExpression -> BREAK_AT .)
    RETURN_AT       reduce using rule 229 (jumpExpression -> BREAK_AT .)
    CONTINUE        reduce using rule 229 (jumpExpression -> BREAK_AT .)
    CONTINUE_AT     reduce using rule 229 (jumpExpression -> BREAK_AT .)
    BREAK           reduce using rule 229 (jumpExpression -> BREAK_AT .)
    BREAK_AT        reduce using rule 229 (jumpExpression -> BREAK_AT .)
    LCHAVE          reduce using rule 229 (jumpExpression -> BREAK_AT .)
    INCREMENTO      reduce using rule 229 (jumpExpression -> BREAK_AT .)
    DECREMENTO      reduce using rule 229 (jumpExpression -> BREAK_AT .)
    MINUS           reduce using rule 229 (jumpExpression -> BREAK_AT .)
    PLUS            reduce using rule 229 (jumpExpression -> BREAK_AT .)
    NOT             reduce using rule 229 (jumpExpression -> BREAK_AT .)
    SUSPEND         reduce using rule 229 (jumpExpression -> BREAK_AT .)
    RCHAVE          reduce using rule 229 (jumpExpression -> BREAK_AT .)
    PV              reduce using rule 229 (jumpExpression -> BREAK_AT .)
    ELSE            reduce using rule 229 (jumpExpression -> BREAK_AT .)
    MENOR           reduce using rule 229 (jumpExpression -> BREAK_AT .)
    PONTO           reduce using rule 229 (jumpExpression -> BREAK_AT .)
    AS              reduce using rule 229 (jumpExpression -> BREAK_AT .)
    MULT            reduce using rule 229 (jumpExpression -> BREAK_AT .)
    DIVIDE          reduce using rule 229 (jumpExpression -> BREAK_AT .)
    MOD             reduce using rule 229 (jumpExpression -> BREAK_AT .)
    PONTOPONTO      reduce using rule 229 (jumpExpression -> BREAK_AT .)
    ELVIS           reduce using rule 229 (jumpExpression -> BREAK_AT .)
    IN              reduce using rule 229 (jumpExpression -> BREAK_AT .)
    NOT_IN          reduce using rule 229 (jumpExpression -> BREAK_AT .)
    IS              reduce using rule 229 (jumpExpression -> BREAK_AT .)
    NOT_IS          reduce using rule 229 (jumpExpression -> BREAK_AT .)
    MAIOR           reduce using rule 229 (jumpExpression -> BREAK_AT .)
    MENORIGUAL      reduce using rule 229 (jumpExpression -> BREAK_AT .)
    MAIORIGUAL      reduce using rule 229 (jumpExpression -> BREAK_AT .)
    DIFERENTE       reduce using rule 229 (jumpExpression -> BREAK_AT .)
    IDENTIDADE      reduce using rule 229 (jumpExpression -> BREAK_AT .)
    IGUALDADE       reduce using rule 229 (jumpExpression -> BREAK_AT .)
    SEMIDENTIDADE   reduce using rule 229 (jumpExpression -> BREAK_AT .)
    AND             reduce using rule 229 (jumpExpression -> BREAK_AT .)
    OR              reduce using rule 229 (jumpExpression -> BREAK_AT .)
    MAISIGUAL       reduce using rule 229 (jumpExpression -> BREAK_AT .)
    MENOSIGUAL      reduce using rule 229 (jumpExpression -> BREAK_AT .)
    MULTIGUAL       reduce using rule 229 (jumpExpression -> BREAK_AT .)
    DIVIGUAL        reduce using rule 229 (jumpExpression -> BREAK_AT .)
    MODIGUAL        reduce using rule 229 (jumpExpression -> BREAK_AT .)
    RPAREN          reduce using rule 229 (jumpExpression -> BREAK_AT .)
    COMMA           reduce using rule 229 (jumpExpression -> BREAK_AT .)
    RCCT            reduce using rule 229 (jumpExpression -> BREAK_AT .)


state 75

    (61) receiverType -> typeModifier . parenthesizedType
    (60) parenthesizedType -> . LPAREN type RPAREN

    LPAREN          shift and go to state 187

    parenthesizedType              shift and go to state 186

state 76

    (189) lambdaLiteral -> LCHAVE . optionsLambdaLiteral RCHAVE
    (190) optionsLambdaLiteral -> . statements
    (191) optionsLambdaLiteral -> . lambdaParameters SETA statements
    (192) optionsLambdaLiteral -> . SETA statements
    (62) statements -> . statement
    (63) statements -> . statement statements
    (193) lambdaParameters -> . lambdaParameter
    (194) lambdaParameters -> . lambdaParameter COMMA lambdaParameters
    (64) statement -> . functionDeclaration
    (65) statement -> . assignment
    (66) statement -> . loopStatement
    (67) statement -> . expression
    (68) statement -> . propertyDeclaration
    (69) statement -> . chamadaDeFuncao
    (195) lambdaParameter -> . variableDeclaration
    (196) lambdaParameter -> . multiVariableDeclaration optionalType
    (197) lambdaParameter -> . multiVariableDeclaration
    (4) functionDeclaration -> . FUN simpleIdentifier functionValueParameters functionBody
    (5) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType functionBody
    (86) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (87) assignment -> . asExpression assignmentAndOperator expression
    (73) loopStatement -> . forStatement
    (74) loopStatement -> . whileStatement
    (75) loopStatement -> . doWhileStatement
    (8) expression -> . disjunction
    (11) propertyDeclaration -> . varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV
    (12) propertyDeclaration -> . varOrVal genericVariableDeclaration ATRIBUICAO expression PV
    (13) propertyDeclaration -> . varOrVal genericVariableDeclaration ATRIBUICAO expression
    (14) propertyDeclaration -> . varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression
    (84) chamadaDeFuncao -> . ID LPAREN RPAREN
    (85) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (28) variableDeclaration -> . simpleIdentifier DOISP type
    (29) variableDeclaration -> . simpleIdentifier
    (30) multiVariableDeclaration -> . LPAREN multiVariableDeclarationRecursive RPAREN
    (31) multiVariableDeclaration -> . LPAREN RPAREN
    (131) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (132) directlyAssignableExpression -> . simpleIdentifier
    (133) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (76) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody
    (77) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN
    (78) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (79) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (80) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (81) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (9) varOrVal -> . VAR
    (10) varOrVal -> . VAL
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (134) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (42) typeModifier -> . SUSPEND
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression

    SETA            shift and go to state 191
    FUN             shift and go to state 99
    ID              shift and go to state 107
    LPAREN          shift and go to state 196
    FOR             shift and go to state 111
    WHILE           shift and go to state 112
    DO              shift and go to state 113
    VAR             shift and go to state 114
    VAL             shift and go to state 115
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    SUSPEND         shift and go to state 78

    optionsLambdaLiteral           shift and go to state 188
    statements                     shift and go to state 189
    lambdaParameters               shift and go to state 190
    statement                      shift and go to state 92
    lambdaParameter                shift and go to state 192
    functionDeclaration            shift and go to state 93
    assignment                     shift and go to state 94
    loopStatement                  shift and go to state 95
    expression                     shift and go to state 96
    propertyDeclaration            shift and go to state 97
    chamadaDeFuncao                shift and go to state 98
    variableDeclaration            shift and go to state 193
    multiVariableDeclaration       shift and go to state 194
    simpleIdentifier               shift and go to state 195
    directlyAssignableExpression   shift and go to state 101
    asExpression                   shift and go to state 102
    forStatement                   shift and go to state 103
    whileStatement                 shift and go to state 104
    doWhileStatement               shift and go to state 105
    disjunction                    shift and go to state 30
    varOrVal                       shift and go to state 106
    postfixUnaryExpression         shift and go to state 109
    parenthesizedDirectlyAssignableExpression shift and go to state 110
    prefixUnaryExpression          shift and go to state 42
    conjunction                    shift and go to state 31
    primaryExpression              shift and go to state 46
    prefixUnaryExpressionRecursive shift and go to state 43
    equality                       shift and go to state 32
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    unaryPrefix                    shift and go to state 45
    comparison                     shift and go to state 33
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    infixOperation                 shift and go to state 34
    typeModifier                   shift and go to state 75
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40

state 77

    (199) anonymousFunction -> FUN . typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> FUN . parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> FUN . typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> FUN . typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> FUN . typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> FUN . parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> FUN . parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> FUN . parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> FUN . typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> FUN . typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> FUN . typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> FUN . typePonto parametersWithOptionalType
    (211) anonymousFunction -> FUN . parametersWithOptionalType functionBody
    (212) anonymousFunction -> FUN . parametersWithOptionalType optionalType
    (213) anonymousFunction -> FUN . parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> FUN . parametersWithOptionalType
    (198) typePonto -> . type PONTO
    (178) parametersWithOptionalType -> . LPAREN parametersWithOptionalTypeRecursive RPAREN
    (179) parametersWithOptionalType -> . LPAREN RPAREN
    (35) type -> . typeModifiers optype
    (36) type -> . optype
    (40) typeModifiers -> . typeModifier
    (41) typeModifiers -> . typeModifier typeModifiers
    (37) optype -> . parenthesizedType
    (38) optype -> . functionType
    (39) optype -> . userType
    (42) typeModifier -> . SUSPEND
    (60) parenthesizedType -> . LPAREN type RPAREN
    (53) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (54) functionType -> . functionTypeParameters SETA type
    (46) userType -> . simpleUserType
    (61) receiverType -> . typeModifier parenthesizedType
    (59) functionTypeParameters -> . LPAREN parameterOrType parameterOrTypeRecursive RPAREN
    (47) simpleUserType -> . simpleIdentifier typeArguments
    (48) simpleUserType -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    LPAREN          shift and go to state 200
    SUSPEND         shift and go to state 78
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    typePonto                      shift and go to state 197
    parametersWithOptionalType     shift and go to state 198
    type                           shift and go to state 199
    typeModifiers                  shift and go to state 80
    optype                         shift and go to state 81
    typeModifier                   shift and go to state 82
    parenthesizedType              shift and go to state 83
    functionType                   shift and go to state 84
    userType                       shift and go to state 85
    receiverType                   shift and go to state 87
    functionTypeParameters         shift and go to state 88
    simpleUserType                 shift and go to state 89
    simpleIdentifier               shift and go to state 90

state 78

    (42) typeModifier -> SUSPEND .

    LPAREN          reduce using rule 42 (typeModifier -> SUSPEND .)
    SUSPEND         reduce using rule 42 (typeModifier -> SUSPEND .)
    ID              reduce using rule 42 (typeModifier -> SUSPEND .)
    CROSSINLINE     reduce using rule 42 (typeModifier -> SUSPEND .)
    IMPORT          reduce using rule 42 (typeModifier -> SUSPEND .)
    INIT            reduce using rule 42 (typeModifier -> SUSPEND .)
    NOINLINE        reduce using rule 42 (typeModifier -> SUSPEND .)
    OUT             reduce using rule 42 (typeModifier -> SUSPEND .)
    VARARG          reduce using rule 42 (typeModifier -> SUSPEND .)
    WHERE           reduce using rule 42 (typeModifier -> SUSPEND .)
    OPERATOR        reduce using rule 42 (typeModifier -> SUSPEND .)


state 79

    (3) optionalType -> DOISP type .

    ATRIBUICAO      reduce using rule 3 (optionalType -> DOISP type .)
    LCHAVE          reduce using rule 3 (optionalType -> DOISP type .)
    COMMA           reduce using rule 3 (optionalType -> DOISP type .)
    RPAREN          reduce using rule 3 (optionalType -> DOISP type .)
    SETA            reduce using rule 3 (optionalType -> DOISP type .)
    ID              reduce using rule 3 (optionalType -> DOISP type .)
    CROSSINLINE     reduce using rule 3 (optionalType -> DOISP type .)
    IMPORT          reduce using rule 3 (optionalType -> DOISP type .)
    INIT            reduce using rule 3 (optionalType -> DOISP type .)
    NOINLINE        reduce using rule 3 (optionalType -> DOISP type .)
    OUT             reduce using rule 3 (optionalType -> DOISP type .)
    VARARG          reduce using rule 3 (optionalType -> DOISP type .)
    WHERE           reduce using rule 3 (optionalType -> DOISP type .)
    OPERATOR        reduce using rule 3 (optionalType -> DOISP type .)
    FUN             reduce using rule 3 (optionalType -> DOISP type .)
    $end            reduce using rule 3 (optionalType -> DOISP type .)
    FOR             reduce using rule 3 (optionalType -> DOISP type .)
    WHILE           reduce using rule 3 (optionalType -> DOISP type .)
    DO              reduce using rule 3 (optionalType -> DOISP type .)
    VAR             reduce using rule 3 (optionalType -> DOISP type .)
    VAL             reduce using rule 3 (optionalType -> DOISP type .)
    LPAREN          reduce using rule 3 (optionalType -> DOISP type .)
    LITERAL_STRING  reduce using rule 3 (optionalType -> DOISP type .)
    NUMBER          reduce using rule 3 (optionalType -> DOISP type .)
    COLONCOLON      reduce using rule 3 (optionalType -> DOISP type .)
    LCCT            reduce using rule 3 (optionalType -> DOISP type .)
    IF              reduce using rule 3 (optionalType -> DOISP type .)
    RETURN          reduce using rule 3 (optionalType -> DOISP type .)
    RETURN_AT       reduce using rule 3 (optionalType -> DOISP type .)
    CONTINUE        reduce using rule 3 (optionalType -> DOISP type .)
    CONTINUE_AT     reduce using rule 3 (optionalType -> DOISP type .)
    BREAK           reduce using rule 3 (optionalType -> DOISP type .)
    BREAK_AT        reduce using rule 3 (optionalType -> DOISP type .)
    INCREMENTO      reduce using rule 3 (optionalType -> DOISP type .)
    DECREMENTO      reduce using rule 3 (optionalType -> DOISP type .)
    MINUS           reduce using rule 3 (optionalType -> DOISP type .)
    PLUS            reduce using rule 3 (optionalType -> DOISP type .)
    NOT             reduce using rule 3 (optionalType -> DOISP type .)
    SUSPEND         reduce using rule 3 (optionalType -> DOISP type .)
    RCHAVE          reduce using rule 3 (optionalType -> DOISP type .)
    PV              reduce using rule 3 (optionalType -> DOISP type .)
    ELSE            reduce using rule 3 (optionalType -> DOISP type .)
    MENOR           reduce using rule 3 (optionalType -> DOISP type .)
    PONTO           reduce using rule 3 (optionalType -> DOISP type .)
    AS              reduce using rule 3 (optionalType -> DOISP type .)
    MULT            reduce using rule 3 (optionalType -> DOISP type .)
    DIVIDE          reduce using rule 3 (optionalType -> DOISP type .)
    MOD             reduce using rule 3 (optionalType -> DOISP type .)
    PONTOPONTO      reduce using rule 3 (optionalType -> DOISP type .)
    ELVIS           reduce using rule 3 (optionalType -> DOISP type .)
    IN              reduce using rule 3 (optionalType -> DOISP type .)
    NOT_IN          reduce using rule 3 (optionalType -> DOISP type .)
    IS              reduce using rule 3 (optionalType -> DOISP type .)
    NOT_IS          reduce using rule 3 (optionalType -> DOISP type .)
    MAIOR           reduce using rule 3 (optionalType -> DOISP type .)
    MENORIGUAL      reduce using rule 3 (optionalType -> DOISP type .)
    MAIORIGUAL      reduce using rule 3 (optionalType -> DOISP type .)
    DIFERENTE       reduce using rule 3 (optionalType -> DOISP type .)
    IDENTIDADE      reduce using rule 3 (optionalType -> DOISP type .)
    IGUALDADE       reduce using rule 3 (optionalType -> DOISP type .)
    SEMIDENTIDADE   reduce using rule 3 (optionalType -> DOISP type .)
    AND             reduce using rule 3 (optionalType -> DOISP type .)
    OR              reduce using rule 3 (optionalType -> DOISP type .)
    MAISIGUAL       reduce using rule 3 (optionalType -> DOISP type .)
    MENOSIGUAL      reduce using rule 3 (optionalType -> DOISP type .)
    MULTIGUAL       reduce using rule 3 (optionalType -> DOISP type .)
    DIVIGUAL        reduce using rule 3 (optionalType -> DOISP type .)
    MODIGUAL        reduce using rule 3 (optionalType -> DOISP type .)
    RCCT            reduce using rule 3 (optionalType -> DOISP type .)


state 80

    (35) type -> typeModifiers . optype
    (37) optype -> . parenthesizedType
    (38) optype -> . functionType
    (39) optype -> . userType
    (60) parenthesizedType -> . LPAREN type RPAREN
    (53) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (54) functionType -> . functionTypeParameters SETA type
    (46) userType -> . simpleUserType
    (61) receiverType -> . typeModifier parenthesizedType
    (59) functionTypeParameters -> . LPAREN parameterOrType parameterOrTypeRecursive RPAREN
    (47) simpleUserType -> . simpleIdentifier typeArguments
    (48) simpleUserType -> . simpleIdentifier
    (42) typeModifier -> . SUSPEND
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    LPAREN          shift and go to state 86
    SUSPEND         shift and go to state 78
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    optype                         shift and go to state 201
    parenthesizedType              shift and go to state 83
    functionType                   shift and go to state 84
    userType                       shift and go to state 85
    receiverType                   shift and go to state 87
    functionTypeParameters         shift and go to state 88
    simpleUserType                 shift and go to state 89
    typeModifier                   shift and go to state 75
    simpleIdentifier               shift and go to state 90

state 81

    (36) type -> optype .

    ATRIBUICAO      reduce using rule 36 (type -> optype .)
    LCHAVE          reduce using rule 36 (type -> optype .)
    COMMA           reduce using rule 36 (type -> optype .)
    RPAREN          reduce using rule 36 (type -> optype .)
    SETA            reduce using rule 36 (type -> optype .)
    ID              reduce using rule 36 (type -> optype .)
    CROSSINLINE     reduce using rule 36 (type -> optype .)
    IMPORT          reduce using rule 36 (type -> optype .)
    INIT            reduce using rule 36 (type -> optype .)
    NOINLINE        reduce using rule 36 (type -> optype .)
    OUT             reduce using rule 36 (type -> optype .)
    VARARG          reduce using rule 36 (type -> optype .)
    WHERE           reduce using rule 36 (type -> optype .)
    OPERATOR        reduce using rule 36 (type -> optype .)
    FUN             reduce using rule 36 (type -> optype .)
    $end            reduce using rule 36 (type -> optype .)
    FOR             reduce using rule 36 (type -> optype .)
    WHILE           reduce using rule 36 (type -> optype .)
    DO              reduce using rule 36 (type -> optype .)
    VAR             reduce using rule 36 (type -> optype .)
    VAL             reduce using rule 36 (type -> optype .)
    LPAREN          reduce using rule 36 (type -> optype .)
    LITERAL_STRING  reduce using rule 36 (type -> optype .)
    NUMBER          reduce using rule 36 (type -> optype .)
    COLONCOLON      reduce using rule 36 (type -> optype .)
    LCCT            reduce using rule 36 (type -> optype .)
    IF              reduce using rule 36 (type -> optype .)
    RETURN          reduce using rule 36 (type -> optype .)
    RETURN_AT       reduce using rule 36 (type -> optype .)
    CONTINUE        reduce using rule 36 (type -> optype .)
    CONTINUE_AT     reduce using rule 36 (type -> optype .)
    BREAK           reduce using rule 36 (type -> optype .)
    BREAK_AT        reduce using rule 36 (type -> optype .)
    INCREMENTO      reduce using rule 36 (type -> optype .)
    DECREMENTO      reduce using rule 36 (type -> optype .)
    MINUS           reduce using rule 36 (type -> optype .)
    PLUS            reduce using rule 36 (type -> optype .)
    NOT             reduce using rule 36 (type -> optype .)
    SUSPEND         reduce using rule 36 (type -> optype .)
    RCHAVE          reduce using rule 36 (type -> optype .)
    PV              reduce using rule 36 (type -> optype .)
    ELSE            reduce using rule 36 (type -> optype .)
    MENOR           reduce using rule 36 (type -> optype .)
    PONTO           reduce using rule 36 (type -> optype .)
    AS              reduce using rule 36 (type -> optype .)
    MULT            reduce using rule 36 (type -> optype .)
    DIVIDE          reduce using rule 36 (type -> optype .)
    MOD             reduce using rule 36 (type -> optype .)
    PONTOPONTO      reduce using rule 36 (type -> optype .)
    ELVIS           reduce using rule 36 (type -> optype .)
    IN              reduce using rule 36 (type -> optype .)
    NOT_IN          reduce using rule 36 (type -> optype .)
    IS              reduce using rule 36 (type -> optype .)
    NOT_IS          reduce using rule 36 (type -> optype .)
    MAIOR           reduce using rule 36 (type -> optype .)
    MENORIGUAL      reduce using rule 36 (type -> optype .)
    MAIORIGUAL      reduce using rule 36 (type -> optype .)
    DIFERENTE       reduce using rule 36 (type -> optype .)
    IDENTIDADE      reduce using rule 36 (type -> optype .)
    IGUALDADE       reduce using rule 36 (type -> optype .)
    SEMIDENTIDADE   reduce using rule 36 (type -> optype .)
    AND             reduce using rule 36 (type -> optype .)
    OR              reduce using rule 36 (type -> optype .)
    MAISIGUAL       reduce using rule 36 (type -> optype .)
    MENOSIGUAL      reduce using rule 36 (type -> optype .)
    MULTIGUAL       reduce using rule 36 (type -> optype .)
    DIVIGUAL        reduce using rule 36 (type -> optype .)
    MODIGUAL        reduce using rule 36 (type -> optype .)
    RCCT            reduce using rule 36 (type -> optype .)


state 82

    (40) typeModifiers -> typeModifier .
    (41) typeModifiers -> typeModifier . typeModifiers
    (61) receiverType -> typeModifier . parenthesizedType
    (40) typeModifiers -> . typeModifier
    (41) typeModifiers -> . typeModifier typeModifiers
    (60) parenthesizedType -> . LPAREN type RPAREN
    (42) typeModifier -> . SUSPEND

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
    ID              reduce using rule 40 (typeModifiers -> typeModifier .)
    CROSSINLINE     reduce using rule 40 (typeModifiers -> typeModifier .)
    IMPORT          reduce using rule 40 (typeModifiers -> typeModifier .)
    INIT            reduce using rule 40 (typeModifiers -> typeModifier .)
    NOINLINE        reduce using rule 40 (typeModifiers -> typeModifier .)
    OUT             reduce using rule 40 (typeModifiers -> typeModifier .)
    VARARG          reduce using rule 40 (typeModifiers -> typeModifier .)
    WHERE           reduce using rule 40 (typeModifiers -> typeModifier .)
    OPERATOR        reduce using rule 40 (typeModifiers -> typeModifier .)
    LPAREN          shift and go to state 187
    SUSPEND         shift and go to state 78

  ! LPAREN          [ reduce using rule 40 (typeModifiers -> typeModifier .) ]
  ! SUSPEND         [ reduce using rule 40 (typeModifiers -> typeModifier .) ]

    typeModifier                   shift and go to state 202
    typeModifiers                  shift and go to state 203
    parenthesizedType              shift and go to state 186

state 83

    (37) optype -> parenthesizedType .

    ATRIBUICAO      reduce using rule 37 (optype -> parenthesizedType .)
    LCHAVE          reduce using rule 37 (optype -> parenthesizedType .)
    COMMA           reduce using rule 37 (optype -> parenthesizedType .)
    RPAREN          reduce using rule 37 (optype -> parenthesizedType .)
    SETA            reduce using rule 37 (optype -> parenthesizedType .)
    ID              reduce using rule 37 (optype -> parenthesizedType .)
    CROSSINLINE     reduce using rule 37 (optype -> parenthesizedType .)
    IMPORT          reduce using rule 37 (optype -> parenthesizedType .)
    INIT            reduce using rule 37 (optype -> parenthesizedType .)
    NOINLINE        reduce using rule 37 (optype -> parenthesizedType .)
    OUT             reduce using rule 37 (optype -> parenthesizedType .)
    VARARG          reduce using rule 37 (optype -> parenthesizedType .)
    WHERE           reduce using rule 37 (optype -> parenthesizedType .)
    OPERATOR        reduce using rule 37 (optype -> parenthesizedType .)
    FUN             reduce using rule 37 (optype -> parenthesizedType .)
    $end            reduce using rule 37 (optype -> parenthesizedType .)
    FOR             reduce using rule 37 (optype -> parenthesizedType .)
    WHILE           reduce using rule 37 (optype -> parenthesizedType .)
    DO              reduce using rule 37 (optype -> parenthesizedType .)
    VAR             reduce using rule 37 (optype -> parenthesizedType .)
    VAL             reduce using rule 37 (optype -> parenthesizedType .)
    LPAREN          reduce using rule 37 (optype -> parenthesizedType .)
    LITERAL_STRING  reduce using rule 37 (optype -> parenthesizedType .)
    NUMBER          reduce using rule 37 (optype -> parenthesizedType .)
    COLONCOLON      reduce using rule 37 (optype -> parenthesizedType .)
    LCCT            reduce using rule 37 (optype -> parenthesizedType .)
    IF              reduce using rule 37 (optype -> parenthesizedType .)
    RETURN          reduce using rule 37 (optype -> parenthesizedType .)
    RETURN_AT       reduce using rule 37 (optype -> parenthesizedType .)
    CONTINUE        reduce using rule 37 (optype -> parenthesizedType .)
    CONTINUE_AT     reduce using rule 37 (optype -> parenthesizedType .)
    BREAK           reduce using rule 37 (optype -> parenthesizedType .)
    BREAK_AT        reduce using rule 37 (optype -> parenthesizedType .)
    INCREMENTO      reduce using rule 37 (optype -> parenthesizedType .)
    DECREMENTO      reduce using rule 37 (optype -> parenthesizedType .)
    MINUS           reduce using rule 37 (optype -> parenthesizedType .)
    PLUS            reduce using rule 37 (optype -> parenthesizedType .)
    NOT             reduce using rule 37 (optype -> parenthesizedType .)
    SUSPEND         reduce using rule 37 (optype -> parenthesizedType .)
    RCHAVE          reduce using rule 37 (optype -> parenthesizedType .)
    PV              reduce using rule 37 (optype -> parenthesizedType .)
    ELSE            reduce using rule 37 (optype -> parenthesizedType .)
    MENOR           reduce using rule 37 (optype -> parenthesizedType .)
    PONTO           reduce using rule 37 (optype -> parenthesizedType .)
    AS              reduce using rule 37 (optype -> parenthesizedType .)
    MULT            reduce using rule 37 (optype -> parenthesizedType .)
    DIVIDE          reduce using rule 37 (optype -> parenthesizedType .)
    MOD             reduce using rule 37 (optype -> parenthesizedType .)
    PONTOPONTO      reduce using rule 37 (optype -> parenthesizedType .)
    ELVIS           reduce using rule 37 (optype -> parenthesizedType .)
    IN              reduce using rule 37 (optype -> parenthesizedType .)
    NOT_IN          reduce using rule 37 (optype -> parenthesizedType .)
    IS              reduce using rule 37 (optype -> parenthesizedType .)
    NOT_IS          reduce using rule 37 (optype -> parenthesizedType .)
    MAIOR           reduce using rule 37 (optype -> parenthesizedType .)
    MENORIGUAL      reduce using rule 37 (optype -> parenthesizedType .)
    MAIORIGUAL      reduce using rule 37 (optype -> parenthesizedType .)
    DIFERENTE       reduce using rule 37 (optype -> parenthesizedType .)
    IDENTIDADE      reduce using rule 37 (optype -> parenthesizedType .)
    IGUALDADE       reduce using rule 37 (optype -> parenthesizedType .)
    SEMIDENTIDADE   reduce using rule 37 (optype -> parenthesizedType .)
    AND             reduce using rule 37 (optype -> parenthesizedType .)
    OR              reduce using rule 37 (optype -> parenthesizedType .)
    MAISIGUAL       reduce using rule 37 (optype -> parenthesizedType .)
    MENOSIGUAL      reduce using rule 37 (optype -> parenthesizedType .)
    MULTIGUAL       reduce using rule 37 (optype -> parenthesizedType .)
    DIVIGUAL        reduce using rule 37 (optype -> parenthesizedType .)
    MODIGUAL        reduce using rule 37 (optype -> parenthesizedType .)
    RCCT            reduce using rule 37 (optype -> parenthesizedType .)


state 84

    (38) optype -> functionType .

    ATRIBUICAO      reduce using rule 38 (optype -> functionType .)
    LCHAVE          reduce using rule 38 (optype -> functionType .)
    COMMA           reduce using rule 38 (optype -> functionType .)
    RPAREN          reduce using rule 38 (optype -> functionType .)
    SETA            reduce using rule 38 (optype -> functionType .)
    ID              reduce using rule 38 (optype -> functionType .)
    CROSSINLINE     reduce using rule 38 (optype -> functionType .)
    IMPORT          reduce using rule 38 (optype -> functionType .)
    INIT            reduce using rule 38 (optype -> functionType .)
    NOINLINE        reduce using rule 38 (optype -> functionType .)
    OUT             reduce using rule 38 (optype -> functionType .)
    VARARG          reduce using rule 38 (optype -> functionType .)
    WHERE           reduce using rule 38 (optype -> functionType .)
    OPERATOR        reduce using rule 38 (optype -> functionType .)
    FUN             reduce using rule 38 (optype -> functionType .)
    $end            reduce using rule 38 (optype -> functionType .)
    FOR             reduce using rule 38 (optype -> functionType .)
    WHILE           reduce using rule 38 (optype -> functionType .)
    DO              reduce using rule 38 (optype -> functionType .)
    VAR             reduce using rule 38 (optype -> functionType .)
    VAL             reduce using rule 38 (optype -> functionType .)
    LPAREN          reduce using rule 38 (optype -> functionType .)
    LITERAL_STRING  reduce using rule 38 (optype -> functionType .)
    NUMBER          reduce using rule 38 (optype -> functionType .)
    COLONCOLON      reduce using rule 38 (optype -> functionType .)
    LCCT            reduce using rule 38 (optype -> functionType .)
    IF              reduce using rule 38 (optype -> functionType .)
    RETURN          reduce using rule 38 (optype -> functionType .)
    RETURN_AT       reduce using rule 38 (optype -> functionType .)
    CONTINUE        reduce using rule 38 (optype -> functionType .)
    CONTINUE_AT     reduce using rule 38 (optype -> functionType .)
    BREAK           reduce using rule 38 (optype -> functionType .)
    BREAK_AT        reduce using rule 38 (optype -> functionType .)
    INCREMENTO      reduce using rule 38 (optype -> functionType .)
    DECREMENTO      reduce using rule 38 (optype -> functionType .)
    MINUS           reduce using rule 38 (optype -> functionType .)
    PLUS            reduce using rule 38 (optype -> functionType .)
    NOT             reduce using rule 38 (optype -> functionType .)
    SUSPEND         reduce using rule 38 (optype -> functionType .)
    RCHAVE          reduce using rule 38 (optype -> functionType .)
    PV              reduce using rule 38 (optype -> functionType .)
    ELSE            reduce using rule 38 (optype -> functionType .)
    MENOR           reduce using rule 38 (optype -> functionType .)
    PONTO           reduce using rule 38 (optype -> functionType .)
    AS              reduce using rule 38 (optype -> functionType .)
    MULT            reduce using rule 38 (optype -> functionType .)
    DIVIDE          reduce using rule 38 (optype -> functionType .)
    MOD             reduce using rule 38 (optype -> functionType .)
    PONTOPONTO      reduce using rule 38 (optype -> functionType .)
    ELVIS           reduce using rule 38 (optype -> functionType .)
    IN              reduce using rule 38 (optype -> functionType .)
    NOT_IN          reduce using rule 38 (optype -> functionType .)
    IS              reduce using rule 38 (optype -> functionType .)
    NOT_IS          reduce using rule 38 (optype -> functionType .)
    MAIOR           reduce using rule 38 (optype -> functionType .)
    MENORIGUAL      reduce using rule 38 (optype -> functionType .)
    MAIORIGUAL      reduce using rule 38 (optype -> functionType .)
    DIFERENTE       reduce using rule 38 (optype -> functionType .)
    IDENTIDADE      reduce using rule 38 (optype -> functionType .)
    IGUALDADE       reduce using rule 38 (optype -> functionType .)
    SEMIDENTIDADE   reduce using rule 38 (optype -> functionType .)
    AND             reduce using rule 38 (optype -> functionType .)
    OR              reduce using rule 38 (optype -> functionType .)
    MAISIGUAL       reduce using rule 38 (optype -> functionType .)
    MENOSIGUAL      reduce using rule 38 (optype -> functionType .)
    MULTIGUAL       reduce using rule 38 (optype -> functionType .)
    DIVIGUAL        reduce using rule 38 (optype -> functionType .)
    MODIGUAL        reduce using rule 38 (optype -> functionType .)
    RCCT            reduce using rule 38 (optype -> functionType .)


state 85

    (39) optype -> userType .

    ATRIBUICAO      reduce using rule 39 (optype -> userType .)
    LCHAVE          reduce using rule 39 (optype -> userType .)
    COMMA           reduce using rule 39 (optype -> userType .)
    RPAREN          reduce using rule 39 (optype -> userType .)
    SETA            reduce using rule 39 (optype -> userType .)
    ID              reduce using rule 39 (optype -> userType .)
    CROSSINLINE     reduce using rule 39 (optype -> userType .)
    IMPORT          reduce using rule 39 (optype -> userType .)
    INIT            reduce using rule 39 (optype -> userType .)
    NOINLINE        reduce using rule 39 (optype -> userType .)
    OUT             reduce using rule 39 (optype -> userType .)
    VARARG          reduce using rule 39 (optype -> userType .)
    WHERE           reduce using rule 39 (optype -> userType .)
    OPERATOR        reduce using rule 39 (optype -> userType .)
    FUN             reduce using rule 39 (optype -> userType .)
    $end            reduce using rule 39 (optype -> userType .)
    FOR             reduce using rule 39 (optype -> userType .)
    WHILE           reduce using rule 39 (optype -> userType .)
    DO              reduce using rule 39 (optype -> userType .)
    VAR             reduce using rule 39 (optype -> userType .)
    VAL             reduce using rule 39 (optype -> userType .)
    LPAREN          reduce using rule 39 (optype -> userType .)
    LITERAL_STRING  reduce using rule 39 (optype -> userType .)
    NUMBER          reduce using rule 39 (optype -> userType .)
    COLONCOLON      reduce using rule 39 (optype -> userType .)
    LCCT            reduce using rule 39 (optype -> userType .)
    IF              reduce using rule 39 (optype -> userType .)
    RETURN          reduce using rule 39 (optype -> userType .)
    RETURN_AT       reduce using rule 39 (optype -> userType .)
    CONTINUE        reduce using rule 39 (optype -> userType .)
    CONTINUE_AT     reduce using rule 39 (optype -> userType .)
    BREAK           reduce using rule 39 (optype -> userType .)
    BREAK_AT        reduce using rule 39 (optype -> userType .)
    INCREMENTO      reduce using rule 39 (optype -> userType .)
    DECREMENTO      reduce using rule 39 (optype -> userType .)
    MINUS           reduce using rule 39 (optype -> userType .)
    PLUS            reduce using rule 39 (optype -> userType .)
    NOT             reduce using rule 39 (optype -> userType .)
    SUSPEND         reduce using rule 39 (optype -> userType .)
    RCHAVE          reduce using rule 39 (optype -> userType .)
    PV              reduce using rule 39 (optype -> userType .)
    ELSE            reduce using rule 39 (optype -> userType .)
    MENOR           reduce using rule 39 (optype -> userType .)
    PONTO           reduce using rule 39 (optype -> userType .)
    AS              reduce using rule 39 (optype -> userType .)
    MULT            reduce using rule 39 (optype -> userType .)
    DIVIDE          reduce using rule 39 (optype -> userType .)
    MOD             reduce using rule 39 (optype -> userType .)
    PONTOPONTO      reduce using rule 39 (optype -> userType .)
    ELVIS           reduce using rule 39 (optype -> userType .)
    IN              reduce using rule 39 (optype -> userType .)
    NOT_IN          reduce using rule 39 (optype -> userType .)
    IS              reduce using rule 39 (optype -> userType .)
    NOT_IS          reduce using rule 39 (optype -> userType .)
    MAIOR           reduce using rule 39 (optype -> userType .)
    MENORIGUAL      reduce using rule 39 (optype -> userType .)
    MAIORIGUAL      reduce using rule 39 (optype -> userType .)
    DIFERENTE       reduce using rule 39 (optype -> userType .)
    IDENTIDADE      reduce using rule 39 (optype -> userType .)
    IGUALDADE       reduce using rule 39 (optype -> userType .)
    SEMIDENTIDADE   reduce using rule 39 (optype -> userType .)
    AND             reduce using rule 39 (optype -> userType .)
    OR              reduce using rule 39 (optype -> userType .)
    MAISIGUAL       reduce using rule 39 (optype -> userType .)
    MENOSIGUAL      reduce using rule 39 (optype -> userType .)
    MULTIGUAL       reduce using rule 39 (optype -> userType .)
    DIVIGUAL        reduce using rule 39 (optype -> userType .)
    MODIGUAL        reduce using rule 39 (optype -> userType .)
    RCCT            reduce using rule 39 (optype -> userType .)


state 86

    (60) parenthesizedType -> LPAREN . type RPAREN
    (59) functionTypeParameters -> LPAREN . parameterOrType parameterOrTypeRecursive RPAREN
    (35) type -> . typeModifiers optype
    (36) type -> . optype
    (55) parameterOrType -> . parameter
    (56) parameterOrType -> . type
    (40) typeModifiers -> . typeModifier
    (41) typeModifiers -> . typeModifier typeModifiers
    (37) optype -> . parenthesizedType
    (38) optype -> . functionType
    (39) optype -> . userType
    (34) parameter -> . simpleIdentifier optionalType
    (42) typeModifier -> . SUSPEND
    (60) parenthesizedType -> . LPAREN type RPAREN
    (53) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (54) functionType -> . functionTypeParameters SETA type
    (46) userType -> . simpleUserType
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (61) receiverType -> . typeModifier parenthesizedType
    (59) functionTypeParameters -> . LPAREN parameterOrType parameterOrTypeRecursive RPAREN
    (47) simpleUserType -> . simpleIdentifier typeArguments
    (48) simpleUserType -> . simpleIdentifier

    SUSPEND         shift and go to state 78
    LPAREN          shift and go to state 86
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    type                           shift and go to state 204
    parameterOrType                shift and go to state 205
    typeModifiers                  shift and go to state 80
    optype                         shift and go to state 81
    parameter                      shift and go to state 206
    typeModifier                   shift and go to state 82
    parenthesizedType              shift and go to state 83
    functionType                   shift and go to state 84
    userType                       shift and go to state 85
    simpleIdentifier               shift and go to state 207
    receiverType                   shift and go to state 87
    functionTypeParameters         shift and go to state 88
    simpleUserType                 shift and go to state 89

state 87

    (53) functionType -> receiverType . PONTO functionTypeParameters SETA type

    PONTO           shift and go to state 208


state 88

    (54) functionType -> functionTypeParameters . SETA type

    SETA            shift and go to state 209


state 89

    (46) userType -> simpleUserType .

    ATRIBUICAO      reduce using rule 46 (userType -> simpleUserType .)
    LCHAVE          reduce using rule 46 (userType -> simpleUserType .)
    COMMA           reduce using rule 46 (userType -> simpleUserType .)
    RPAREN          reduce using rule 46 (userType -> simpleUserType .)
    SETA            reduce using rule 46 (userType -> simpleUserType .)
    ID              reduce using rule 46 (userType -> simpleUserType .)
    CROSSINLINE     reduce using rule 46 (userType -> simpleUserType .)
    IMPORT          reduce using rule 46 (userType -> simpleUserType .)
    INIT            reduce using rule 46 (userType -> simpleUserType .)
    NOINLINE        reduce using rule 46 (userType -> simpleUserType .)
    OUT             reduce using rule 46 (userType -> simpleUserType .)
    VARARG          reduce using rule 46 (userType -> simpleUserType .)
    WHERE           reduce using rule 46 (userType -> simpleUserType .)
    OPERATOR        reduce using rule 46 (userType -> simpleUserType .)
    FUN             reduce using rule 46 (userType -> simpleUserType .)
    $end            reduce using rule 46 (userType -> simpleUserType .)
    FOR             reduce using rule 46 (userType -> simpleUserType .)
    WHILE           reduce using rule 46 (userType -> simpleUserType .)
    DO              reduce using rule 46 (userType -> simpleUserType .)
    VAR             reduce using rule 46 (userType -> simpleUserType .)
    VAL             reduce using rule 46 (userType -> simpleUserType .)
    LPAREN          reduce using rule 46 (userType -> simpleUserType .)
    LITERAL_STRING  reduce using rule 46 (userType -> simpleUserType .)
    NUMBER          reduce using rule 46 (userType -> simpleUserType .)
    COLONCOLON      reduce using rule 46 (userType -> simpleUserType .)
    LCCT            reduce using rule 46 (userType -> simpleUserType .)
    IF              reduce using rule 46 (userType -> simpleUserType .)
    RETURN          reduce using rule 46 (userType -> simpleUserType .)
    RETURN_AT       reduce using rule 46 (userType -> simpleUserType .)
    CONTINUE        reduce using rule 46 (userType -> simpleUserType .)
    CONTINUE_AT     reduce using rule 46 (userType -> simpleUserType .)
    BREAK           reduce using rule 46 (userType -> simpleUserType .)
    BREAK_AT        reduce using rule 46 (userType -> simpleUserType .)
    INCREMENTO      reduce using rule 46 (userType -> simpleUserType .)
    DECREMENTO      reduce using rule 46 (userType -> simpleUserType .)
    MINUS           reduce using rule 46 (userType -> simpleUserType .)
    PLUS            reduce using rule 46 (userType -> simpleUserType .)
    NOT             reduce using rule 46 (userType -> simpleUserType .)
    SUSPEND         reduce using rule 46 (userType -> simpleUserType .)
    RCHAVE          reduce using rule 46 (userType -> simpleUserType .)
    PV              reduce using rule 46 (userType -> simpleUserType .)
    ELSE            reduce using rule 46 (userType -> simpleUserType .)
    MENOR           reduce using rule 46 (userType -> simpleUserType .)
    PONTO           reduce using rule 46 (userType -> simpleUserType .)
    AS              reduce using rule 46 (userType -> simpleUserType .)
    MULT            reduce using rule 46 (userType -> simpleUserType .)
    DIVIDE          reduce using rule 46 (userType -> simpleUserType .)
    MOD             reduce using rule 46 (userType -> simpleUserType .)
    PONTOPONTO      reduce using rule 46 (userType -> simpleUserType .)
    ELVIS           reduce using rule 46 (userType -> simpleUserType .)
    IN              reduce using rule 46 (userType -> simpleUserType .)
    NOT_IN          reduce using rule 46 (userType -> simpleUserType .)
    IS              reduce using rule 46 (userType -> simpleUserType .)
    NOT_IS          reduce using rule 46 (userType -> simpleUserType .)
    MAIOR           reduce using rule 46 (userType -> simpleUserType .)
    MENORIGUAL      reduce using rule 46 (userType -> simpleUserType .)
    MAIORIGUAL      reduce using rule 46 (userType -> simpleUserType .)
    DIFERENTE       reduce using rule 46 (userType -> simpleUserType .)
    IDENTIDADE      reduce using rule 46 (userType -> simpleUserType .)
    IGUALDADE       reduce using rule 46 (userType -> simpleUserType .)
    SEMIDENTIDADE   reduce using rule 46 (userType -> simpleUserType .)
    AND             reduce using rule 46 (userType -> simpleUserType .)
    OR              reduce using rule 46 (userType -> simpleUserType .)
    MAISIGUAL       reduce using rule 46 (userType -> simpleUserType .)
    MENOSIGUAL      reduce using rule 46 (userType -> simpleUserType .)
    MULTIGUAL       reduce using rule 46 (userType -> simpleUserType .)
    DIVIGUAL        reduce using rule 46 (userType -> simpleUserType .)
    MODIGUAL        reduce using rule 46 (userType -> simpleUserType .)
    RCCT            reduce using rule 46 (userType -> simpleUserType .)


state 90

    (47) simpleUserType -> simpleIdentifier . typeArguments
    (48) simpleUserType -> simpleIdentifier .
    (153) typeArguments -> . MENOR typeArgumentsRecursive MAIOR
    (154) typeArguments -> . MENOR MAIOR

  ! shift/reduce conflict for MENOR resolved as shift
    ATRIBUICAO      reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    LCHAVE          reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    COMMA           reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    RPAREN          reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    SETA            reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    ID              reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    IMPORT          reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    INIT            reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    NOINLINE        reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    OUT             reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    VARARG          reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    WHERE           reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    OPERATOR        reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    FUN             reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    $end            reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    FOR             reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    WHILE           reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    DO              reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    VAR             reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    VAL             reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    LPAREN          reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    NUMBER          reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    COLONCOLON      reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    LCCT            reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    IF              reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    RETURN          reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    RETURN_AT       reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    CONTINUE        reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    BREAK           reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    BREAK_AT        reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    INCREMENTO      reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    DECREMENTO      reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    MINUS           reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    PLUS            reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    NOT             reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    SUSPEND         reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    RCHAVE          reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    PV              reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    ELSE            reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    PONTO           reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    AS              reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    MULT            reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    DIVIDE          reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    MOD             reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    ELVIS           reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    IN              reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    NOT_IN          reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    IS              reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    NOT_IS          reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    MAIOR           reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    DIFERENTE       reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    IGUALDADE       reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    AND             reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    OR              reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    MAISIGUAL       reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    MENOSIGUAL      reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    MODIGUAL        reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    RCCT            reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    MENOR           shift and go to state 165

  ! MENOR           [ reduce using rule 48 (simpleUserType -> simpleIdentifier .) ]

    typeArguments                  shift and go to state 210

state 91

    (72) block -> LCHAVE statements . RCHAVE

    RCHAVE          shift and go to state 211


state 92

    (62) statements -> statement .
    (63) statements -> statement . statements
    (62) statements -> . statement
    (63) statements -> . statement statements
    (64) statement -> . functionDeclaration
    (65) statement -> . assignment
    (66) statement -> . loopStatement
    (67) statement -> . expression
    (68) statement -> . propertyDeclaration
    (69) statement -> . chamadaDeFuncao
    (4) functionDeclaration -> . FUN simpleIdentifier functionValueParameters functionBody
    (5) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType functionBody
    (86) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (87) assignment -> . asExpression assignmentAndOperator expression
    (73) loopStatement -> . forStatement
    (74) loopStatement -> . whileStatement
    (75) loopStatement -> . doWhileStatement
    (8) expression -> . disjunction
    (11) propertyDeclaration -> . varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV
    (12) propertyDeclaration -> . varOrVal genericVariableDeclaration ATRIBUICAO expression PV
    (13) propertyDeclaration -> . varOrVal genericVariableDeclaration ATRIBUICAO expression
    (14) propertyDeclaration -> . varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression
    (84) chamadaDeFuncao -> . ID LPAREN RPAREN
    (85) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (131) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (132) directlyAssignableExpression -> . simpleIdentifier
    (133) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (76) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody
    (77) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN
    (78) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (79) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (80) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (81) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (9) varOrVal -> . VAR
    (10) varOrVal -> . VAL
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (134) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (42) typeModifier -> . SUSPEND
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression

    RCHAVE          reduce using rule 62 (statements -> statement .)
    FUN             shift and go to state 99
    ID              shift and go to state 107
    FOR             shift and go to state 111
    WHILE           shift and go to state 112
    DO              shift and go to state 113
    VAR             shift and go to state 114
    VAL             shift and go to state 115
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LPAREN          shift and go to state 108
    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    SUSPEND         shift and go to state 78

    statement                      shift and go to state 92
    statements                     shift and go to state 212
    functionDeclaration            shift and go to state 93
    assignment                     shift and go to state 94
    loopStatement                  shift and go to state 95
    expression                     shift and go to state 96
    propertyDeclaration            shift and go to state 97
    chamadaDeFuncao                shift and go to state 98
    simpleIdentifier               shift and go to state 100
    directlyAssignableExpression   shift and go to state 101
    asExpression                   shift and go to state 102
    forStatement                   shift and go to state 103
    whileStatement                 shift and go to state 104
    doWhileStatement               shift and go to state 105
    disjunction                    shift and go to state 30
    varOrVal                       shift and go to state 106
    postfixUnaryExpression         shift and go to state 109
    parenthesizedDirectlyAssignableExpression shift and go to state 110
    prefixUnaryExpression          shift and go to state 42
    conjunction                    shift and go to state 31
    primaryExpression              shift and go to state 46
    prefixUnaryExpressionRecursive shift and go to state 43
    equality                       shift and go to state 32
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    unaryPrefix                    shift and go to state 45
    comparison                     shift and go to state 33
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    infixOperation                 shift and go to state 34
    typeModifier                   shift and go to state 75
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40

state 93

    (64) statement -> functionDeclaration .

    FUN             reduce using rule 64 (statement -> functionDeclaration .)
    ID              reduce using rule 64 (statement -> functionDeclaration .)
    FOR             reduce using rule 64 (statement -> functionDeclaration .)
    WHILE           reduce using rule 64 (statement -> functionDeclaration .)
    DO              reduce using rule 64 (statement -> functionDeclaration .)
    VAR             reduce using rule 64 (statement -> functionDeclaration .)
    VAL             reduce using rule 64 (statement -> functionDeclaration .)
    CROSSINLINE     reduce using rule 64 (statement -> functionDeclaration .)
    IMPORT          reduce using rule 64 (statement -> functionDeclaration .)
    INIT            reduce using rule 64 (statement -> functionDeclaration .)
    NOINLINE        reduce using rule 64 (statement -> functionDeclaration .)
    OUT             reduce using rule 64 (statement -> functionDeclaration .)
    VARARG          reduce using rule 64 (statement -> functionDeclaration .)
    WHERE           reduce using rule 64 (statement -> functionDeclaration .)
    OPERATOR        reduce using rule 64 (statement -> functionDeclaration .)
    LPAREN          reduce using rule 64 (statement -> functionDeclaration .)
    LITERAL_STRING  reduce using rule 64 (statement -> functionDeclaration .)
    NUMBER          reduce using rule 64 (statement -> functionDeclaration .)
    COLONCOLON      reduce using rule 64 (statement -> functionDeclaration .)
    LCCT            reduce using rule 64 (statement -> functionDeclaration .)
    IF              reduce using rule 64 (statement -> functionDeclaration .)
    RETURN          reduce using rule 64 (statement -> functionDeclaration .)
    RETURN_AT       reduce using rule 64 (statement -> functionDeclaration .)
    CONTINUE        reduce using rule 64 (statement -> functionDeclaration .)
    CONTINUE_AT     reduce using rule 64 (statement -> functionDeclaration .)
    BREAK           reduce using rule 64 (statement -> functionDeclaration .)
    BREAK_AT        reduce using rule 64 (statement -> functionDeclaration .)
    LCHAVE          reduce using rule 64 (statement -> functionDeclaration .)
    INCREMENTO      reduce using rule 64 (statement -> functionDeclaration .)
    DECREMENTO      reduce using rule 64 (statement -> functionDeclaration .)
    MINUS           reduce using rule 64 (statement -> functionDeclaration .)
    PLUS            reduce using rule 64 (statement -> functionDeclaration .)
    NOT             reduce using rule 64 (statement -> functionDeclaration .)
    SUSPEND         reduce using rule 64 (statement -> functionDeclaration .)
    RCHAVE          reduce using rule 64 (statement -> functionDeclaration .)
    $end            reduce using rule 64 (statement -> functionDeclaration .)
    PV              reduce using rule 64 (statement -> functionDeclaration .)
    ELSE            reduce using rule 64 (statement -> functionDeclaration .)
    MENOR           reduce using rule 64 (statement -> functionDeclaration .)
    PONTO           reduce using rule 64 (statement -> functionDeclaration .)
    AS              reduce using rule 64 (statement -> functionDeclaration .)
    MULT            reduce using rule 64 (statement -> functionDeclaration .)
    DIVIDE          reduce using rule 64 (statement -> functionDeclaration .)
    MOD             reduce using rule 64 (statement -> functionDeclaration .)
    PONTOPONTO      reduce using rule 64 (statement -> functionDeclaration .)
    ELVIS           reduce using rule 64 (statement -> functionDeclaration .)
    IN              reduce using rule 64 (statement -> functionDeclaration .)
    NOT_IN          reduce using rule 64 (statement -> functionDeclaration .)
    IS              reduce using rule 64 (statement -> functionDeclaration .)
    NOT_IS          reduce using rule 64 (statement -> functionDeclaration .)
    MAIOR           reduce using rule 64 (statement -> functionDeclaration .)
    MENORIGUAL      reduce using rule 64 (statement -> functionDeclaration .)
    MAIORIGUAL      reduce using rule 64 (statement -> functionDeclaration .)
    DIFERENTE       reduce using rule 64 (statement -> functionDeclaration .)
    IDENTIDADE      reduce using rule 64 (statement -> functionDeclaration .)
    IGUALDADE       reduce using rule 64 (statement -> functionDeclaration .)
    SEMIDENTIDADE   reduce using rule 64 (statement -> functionDeclaration .)
    AND             reduce using rule 64 (statement -> functionDeclaration .)
    OR              reduce using rule 64 (statement -> functionDeclaration .)
    MAISIGUAL       reduce using rule 64 (statement -> functionDeclaration .)
    MENOSIGUAL      reduce using rule 64 (statement -> functionDeclaration .)
    MULTIGUAL       reduce using rule 64 (statement -> functionDeclaration .)
    DIVIGUAL        reduce using rule 64 (statement -> functionDeclaration .)
    MODIGUAL        reduce using rule 64 (statement -> functionDeclaration .)
    RPAREN          reduce using rule 64 (statement -> functionDeclaration .)
    COMMA           reduce using rule 64 (statement -> functionDeclaration .)
    RCCT            reduce using rule 64 (statement -> functionDeclaration .)


state 94

    (65) statement -> assignment .

    FUN             reduce using rule 65 (statement -> assignment .)
    ID              reduce using rule 65 (statement -> assignment .)
    FOR             reduce using rule 65 (statement -> assignment .)
    WHILE           reduce using rule 65 (statement -> assignment .)
    DO              reduce using rule 65 (statement -> assignment .)
    VAR             reduce using rule 65 (statement -> assignment .)
    VAL             reduce using rule 65 (statement -> assignment .)
    CROSSINLINE     reduce using rule 65 (statement -> assignment .)
    IMPORT          reduce using rule 65 (statement -> assignment .)
    INIT            reduce using rule 65 (statement -> assignment .)
    NOINLINE        reduce using rule 65 (statement -> assignment .)
    OUT             reduce using rule 65 (statement -> assignment .)
    VARARG          reduce using rule 65 (statement -> assignment .)
    WHERE           reduce using rule 65 (statement -> assignment .)
    OPERATOR        reduce using rule 65 (statement -> assignment .)
    LPAREN          reduce using rule 65 (statement -> assignment .)
    LITERAL_STRING  reduce using rule 65 (statement -> assignment .)
    NUMBER          reduce using rule 65 (statement -> assignment .)
    COLONCOLON      reduce using rule 65 (statement -> assignment .)
    LCCT            reduce using rule 65 (statement -> assignment .)
    IF              reduce using rule 65 (statement -> assignment .)
    RETURN          reduce using rule 65 (statement -> assignment .)
    RETURN_AT       reduce using rule 65 (statement -> assignment .)
    CONTINUE        reduce using rule 65 (statement -> assignment .)
    CONTINUE_AT     reduce using rule 65 (statement -> assignment .)
    BREAK           reduce using rule 65 (statement -> assignment .)
    BREAK_AT        reduce using rule 65 (statement -> assignment .)
    LCHAVE          reduce using rule 65 (statement -> assignment .)
    INCREMENTO      reduce using rule 65 (statement -> assignment .)
    DECREMENTO      reduce using rule 65 (statement -> assignment .)
    MINUS           reduce using rule 65 (statement -> assignment .)
    PLUS            reduce using rule 65 (statement -> assignment .)
    NOT             reduce using rule 65 (statement -> assignment .)
    SUSPEND         reduce using rule 65 (statement -> assignment .)
    RCHAVE          reduce using rule 65 (statement -> assignment .)
    $end            reduce using rule 65 (statement -> assignment .)
    PV              reduce using rule 65 (statement -> assignment .)
    ELSE            reduce using rule 65 (statement -> assignment .)
    MENOR           reduce using rule 65 (statement -> assignment .)
    PONTO           reduce using rule 65 (statement -> assignment .)
    AS              reduce using rule 65 (statement -> assignment .)
    MULT            reduce using rule 65 (statement -> assignment .)
    DIVIDE          reduce using rule 65 (statement -> assignment .)
    MOD             reduce using rule 65 (statement -> assignment .)
    PONTOPONTO      reduce using rule 65 (statement -> assignment .)
    ELVIS           reduce using rule 65 (statement -> assignment .)
    IN              reduce using rule 65 (statement -> assignment .)
    NOT_IN          reduce using rule 65 (statement -> assignment .)
    IS              reduce using rule 65 (statement -> assignment .)
    NOT_IS          reduce using rule 65 (statement -> assignment .)
    MAIOR           reduce using rule 65 (statement -> assignment .)
    MENORIGUAL      reduce using rule 65 (statement -> assignment .)
    MAIORIGUAL      reduce using rule 65 (statement -> assignment .)
    DIFERENTE       reduce using rule 65 (statement -> assignment .)
    IDENTIDADE      reduce using rule 65 (statement -> assignment .)
    IGUALDADE       reduce using rule 65 (statement -> assignment .)
    SEMIDENTIDADE   reduce using rule 65 (statement -> assignment .)
    AND             reduce using rule 65 (statement -> assignment .)
    OR              reduce using rule 65 (statement -> assignment .)
    MAISIGUAL       reduce using rule 65 (statement -> assignment .)
    MENOSIGUAL      reduce using rule 65 (statement -> assignment .)
    MULTIGUAL       reduce using rule 65 (statement -> assignment .)
    DIVIGUAL        reduce using rule 65 (statement -> assignment .)
    MODIGUAL        reduce using rule 65 (statement -> assignment .)
    RPAREN          reduce using rule 65 (statement -> assignment .)
    COMMA           reduce using rule 65 (statement -> assignment .)
    RCCT            reduce using rule 65 (statement -> assignment .)


state 95

    (66) statement -> loopStatement .

    FUN             reduce using rule 66 (statement -> loopStatement .)
    ID              reduce using rule 66 (statement -> loopStatement .)
    FOR             reduce using rule 66 (statement -> loopStatement .)
    WHILE           reduce using rule 66 (statement -> loopStatement .)
    DO              reduce using rule 66 (statement -> loopStatement .)
    VAR             reduce using rule 66 (statement -> loopStatement .)
    VAL             reduce using rule 66 (statement -> loopStatement .)
    CROSSINLINE     reduce using rule 66 (statement -> loopStatement .)
    IMPORT          reduce using rule 66 (statement -> loopStatement .)
    INIT            reduce using rule 66 (statement -> loopStatement .)
    NOINLINE        reduce using rule 66 (statement -> loopStatement .)
    OUT             reduce using rule 66 (statement -> loopStatement .)
    VARARG          reduce using rule 66 (statement -> loopStatement .)
    WHERE           reduce using rule 66 (statement -> loopStatement .)
    OPERATOR        reduce using rule 66 (statement -> loopStatement .)
    LPAREN          reduce using rule 66 (statement -> loopStatement .)
    LITERAL_STRING  reduce using rule 66 (statement -> loopStatement .)
    NUMBER          reduce using rule 66 (statement -> loopStatement .)
    COLONCOLON      reduce using rule 66 (statement -> loopStatement .)
    LCCT            reduce using rule 66 (statement -> loopStatement .)
    IF              reduce using rule 66 (statement -> loopStatement .)
    RETURN          reduce using rule 66 (statement -> loopStatement .)
    RETURN_AT       reduce using rule 66 (statement -> loopStatement .)
    CONTINUE        reduce using rule 66 (statement -> loopStatement .)
    CONTINUE_AT     reduce using rule 66 (statement -> loopStatement .)
    BREAK           reduce using rule 66 (statement -> loopStatement .)
    BREAK_AT        reduce using rule 66 (statement -> loopStatement .)
    LCHAVE          reduce using rule 66 (statement -> loopStatement .)
    INCREMENTO      reduce using rule 66 (statement -> loopStatement .)
    DECREMENTO      reduce using rule 66 (statement -> loopStatement .)
    MINUS           reduce using rule 66 (statement -> loopStatement .)
    PLUS            reduce using rule 66 (statement -> loopStatement .)
    NOT             reduce using rule 66 (statement -> loopStatement .)
    SUSPEND         reduce using rule 66 (statement -> loopStatement .)
    RCHAVE          reduce using rule 66 (statement -> loopStatement .)
    $end            reduce using rule 66 (statement -> loopStatement .)
    PV              reduce using rule 66 (statement -> loopStatement .)
    ELSE            reduce using rule 66 (statement -> loopStatement .)
    MENOR           reduce using rule 66 (statement -> loopStatement .)
    PONTO           reduce using rule 66 (statement -> loopStatement .)
    AS              reduce using rule 66 (statement -> loopStatement .)
    MULT            reduce using rule 66 (statement -> loopStatement .)
    DIVIDE          reduce using rule 66 (statement -> loopStatement .)
    MOD             reduce using rule 66 (statement -> loopStatement .)
    PONTOPONTO      reduce using rule 66 (statement -> loopStatement .)
    ELVIS           reduce using rule 66 (statement -> loopStatement .)
    IN              reduce using rule 66 (statement -> loopStatement .)
    NOT_IN          reduce using rule 66 (statement -> loopStatement .)
    IS              reduce using rule 66 (statement -> loopStatement .)
    NOT_IS          reduce using rule 66 (statement -> loopStatement .)
    MAIOR           reduce using rule 66 (statement -> loopStatement .)
    MENORIGUAL      reduce using rule 66 (statement -> loopStatement .)
    MAIORIGUAL      reduce using rule 66 (statement -> loopStatement .)
    DIFERENTE       reduce using rule 66 (statement -> loopStatement .)
    IDENTIDADE      reduce using rule 66 (statement -> loopStatement .)
    IGUALDADE       reduce using rule 66 (statement -> loopStatement .)
    SEMIDENTIDADE   reduce using rule 66 (statement -> loopStatement .)
    AND             reduce using rule 66 (statement -> loopStatement .)
    OR              reduce using rule 66 (statement -> loopStatement .)
    MAISIGUAL       reduce using rule 66 (statement -> loopStatement .)
    MENOSIGUAL      reduce using rule 66 (statement -> loopStatement .)
    MULTIGUAL       reduce using rule 66 (statement -> loopStatement .)
    DIVIGUAL        reduce using rule 66 (statement -> loopStatement .)
    MODIGUAL        reduce using rule 66 (statement -> loopStatement .)
    RPAREN          reduce using rule 66 (statement -> loopStatement .)
    COMMA           reduce using rule 66 (statement -> loopStatement .)
    RCCT            reduce using rule 66 (statement -> loopStatement .)


state 96

    (67) statement -> expression .

    FUN             reduce using rule 67 (statement -> expression .)
    ID              reduce using rule 67 (statement -> expression .)
    FOR             reduce using rule 67 (statement -> expression .)
    WHILE           reduce using rule 67 (statement -> expression .)
    DO              reduce using rule 67 (statement -> expression .)
    VAR             reduce using rule 67 (statement -> expression .)
    VAL             reduce using rule 67 (statement -> expression .)
    CROSSINLINE     reduce using rule 67 (statement -> expression .)
    IMPORT          reduce using rule 67 (statement -> expression .)
    INIT            reduce using rule 67 (statement -> expression .)
    NOINLINE        reduce using rule 67 (statement -> expression .)
    OUT             reduce using rule 67 (statement -> expression .)
    VARARG          reduce using rule 67 (statement -> expression .)
    WHERE           reduce using rule 67 (statement -> expression .)
    OPERATOR        reduce using rule 67 (statement -> expression .)
    LPAREN          reduce using rule 67 (statement -> expression .)
    LITERAL_STRING  reduce using rule 67 (statement -> expression .)
    NUMBER          reduce using rule 67 (statement -> expression .)
    COLONCOLON      reduce using rule 67 (statement -> expression .)
    LCCT            reduce using rule 67 (statement -> expression .)
    IF              reduce using rule 67 (statement -> expression .)
    RETURN          reduce using rule 67 (statement -> expression .)
    RETURN_AT       reduce using rule 67 (statement -> expression .)
    CONTINUE        reduce using rule 67 (statement -> expression .)
    CONTINUE_AT     reduce using rule 67 (statement -> expression .)
    BREAK           reduce using rule 67 (statement -> expression .)
    BREAK_AT        reduce using rule 67 (statement -> expression .)
    LCHAVE          reduce using rule 67 (statement -> expression .)
    INCREMENTO      reduce using rule 67 (statement -> expression .)
    DECREMENTO      reduce using rule 67 (statement -> expression .)
    MINUS           reduce using rule 67 (statement -> expression .)
    PLUS            reduce using rule 67 (statement -> expression .)
    NOT             reduce using rule 67 (statement -> expression .)
    SUSPEND         reduce using rule 67 (statement -> expression .)
    RCHAVE          reduce using rule 67 (statement -> expression .)
    $end            reduce using rule 67 (statement -> expression .)
    PV              reduce using rule 67 (statement -> expression .)
    ELSE            reduce using rule 67 (statement -> expression .)
    MENOR           reduce using rule 67 (statement -> expression .)
    PONTO           reduce using rule 67 (statement -> expression .)
    AS              reduce using rule 67 (statement -> expression .)
    MULT            reduce using rule 67 (statement -> expression .)
    DIVIDE          reduce using rule 67 (statement -> expression .)
    MOD             reduce using rule 67 (statement -> expression .)
    PONTOPONTO      reduce using rule 67 (statement -> expression .)
    ELVIS           reduce using rule 67 (statement -> expression .)
    IN              reduce using rule 67 (statement -> expression .)
    NOT_IN          reduce using rule 67 (statement -> expression .)
    IS              reduce using rule 67 (statement -> expression .)
    NOT_IS          reduce using rule 67 (statement -> expression .)
    MAIOR           reduce using rule 67 (statement -> expression .)
    MENORIGUAL      reduce using rule 67 (statement -> expression .)
    MAIORIGUAL      reduce using rule 67 (statement -> expression .)
    DIFERENTE       reduce using rule 67 (statement -> expression .)
    IDENTIDADE      reduce using rule 67 (statement -> expression .)
    IGUALDADE       reduce using rule 67 (statement -> expression .)
    SEMIDENTIDADE   reduce using rule 67 (statement -> expression .)
    AND             reduce using rule 67 (statement -> expression .)
    OR              reduce using rule 67 (statement -> expression .)
    MAISIGUAL       reduce using rule 67 (statement -> expression .)
    MENOSIGUAL      reduce using rule 67 (statement -> expression .)
    MULTIGUAL       reduce using rule 67 (statement -> expression .)
    DIVIGUAL        reduce using rule 67 (statement -> expression .)
    MODIGUAL        reduce using rule 67 (statement -> expression .)
    RPAREN          reduce using rule 67 (statement -> expression .)
    COMMA           reduce using rule 67 (statement -> expression .)
    RCCT            reduce using rule 67 (statement -> expression .)


state 97

    (68) statement -> propertyDeclaration .

    FUN             reduce using rule 68 (statement -> propertyDeclaration .)
    ID              reduce using rule 68 (statement -> propertyDeclaration .)
    FOR             reduce using rule 68 (statement -> propertyDeclaration .)
    WHILE           reduce using rule 68 (statement -> propertyDeclaration .)
    DO              reduce using rule 68 (statement -> propertyDeclaration .)
    VAR             reduce using rule 68 (statement -> propertyDeclaration .)
    VAL             reduce using rule 68 (statement -> propertyDeclaration .)
    CROSSINLINE     reduce using rule 68 (statement -> propertyDeclaration .)
    IMPORT          reduce using rule 68 (statement -> propertyDeclaration .)
    INIT            reduce using rule 68 (statement -> propertyDeclaration .)
    NOINLINE        reduce using rule 68 (statement -> propertyDeclaration .)
    OUT             reduce using rule 68 (statement -> propertyDeclaration .)
    VARARG          reduce using rule 68 (statement -> propertyDeclaration .)
    WHERE           reduce using rule 68 (statement -> propertyDeclaration .)
    OPERATOR        reduce using rule 68 (statement -> propertyDeclaration .)
    LPAREN          reduce using rule 68 (statement -> propertyDeclaration .)
    LITERAL_STRING  reduce using rule 68 (statement -> propertyDeclaration .)
    NUMBER          reduce using rule 68 (statement -> propertyDeclaration .)
    COLONCOLON      reduce using rule 68 (statement -> propertyDeclaration .)
    LCCT            reduce using rule 68 (statement -> propertyDeclaration .)
    IF              reduce using rule 68 (statement -> propertyDeclaration .)
    RETURN          reduce using rule 68 (statement -> propertyDeclaration .)
    RETURN_AT       reduce using rule 68 (statement -> propertyDeclaration .)
    CONTINUE        reduce using rule 68 (statement -> propertyDeclaration .)
    CONTINUE_AT     reduce using rule 68 (statement -> propertyDeclaration .)
    BREAK           reduce using rule 68 (statement -> propertyDeclaration .)
    BREAK_AT        reduce using rule 68 (statement -> propertyDeclaration .)
    LCHAVE          reduce using rule 68 (statement -> propertyDeclaration .)
    INCREMENTO      reduce using rule 68 (statement -> propertyDeclaration .)
    DECREMENTO      reduce using rule 68 (statement -> propertyDeclaration .)
    MINUS           reduce using rule 68 (statement -> propertyDeclaration .)
    PLUS            reduce using rule 68 (statement -> propertyDeclaration .)
    NOT             reduce using rule 68 (statement -> propertyDeclaration .)
    SUSPEND         reduce using rule 68 (statement -> propertyDeclaration .)
    RCHAVE          reduce using rule 68 (statement -> propertyDeclaration .)
    $end            reduce using rule 68 (statement -> propertyDeclaration .)
    PV              reduce using rule 68 (statement -> propertyDeclaration .)
    ELSE            reduce using rule 68 (statement -> propertyDeclaration .)
    MENOR           reduce using rule 68 (statement -> propertyDeclaration .)
    PONTO           reduce using rule 68 (statement -> propertyDeclaration .)
    AS              reduce using rule 68 (statement -> propertyDeclaration .)
    MULT            reduce using rule 68 (statement -> propertyDeclaration .)
    DIVIDE          reduce using rule 68 (statement -> propertyDeclaration .)
    MOD             reduce using rule 68 (statement -> propertyDeclaration .)
    PONTOPONTO      reduce using rule 68 (statement -> propertyDeclaration .)
    ELVIS           reduce using rule 68 (statement -> propertyDeclaration .)
    IN              reduce using rule 68 (statement -> propertyDeclaration .)
    NOT_IN          reduce using rule 68 (statement -> propertyDeclaration .)
    IS              reduce using rule 68 (statement -> propertyDeclaration .)
    NOT_IS          reduce using rule 68 (statement -> propertyDeclaration .)
    MAIOR           reduce using rule 68 (statement -> propertyDeclaration .)
    MENORIGUAL      reduce using rule 68 (statement -> propertyDeclaration .)
    MAIORIGUAL      reduce using rule 68 (statement -> propertyDeclaration .)
    DIFERENTE       reduce using rule 68 (statement -> propertyDeclaration .)
    IDENTIDADE      reduce using rule 68 (statement -> propertyDeclaration .)
    IGUALDADE       reduce using rule 68 (statement -> propertyDeclaration .)
    SEMIDENTIDADE   reduce using rule 68 (statement -> propertyDeclaration .)
    AND             reduce using rule 68 (statement -> propertyDeclaration .)
    OR              reduce using rule 68 (statement -> propertyDeclaration .)
    MAISIGUAL       reduce using rule 68 (statement -> propertyDeclaration .)
    MENOSIGUAL      reduce using rule 68 (statement -> propertyDeclaration .)
    MULTIGUAL       reduce using rule 68 (statement -> propertyDeclaration .)
    DIVIGUAL        reduce using rule 68 (statement -> propertyDeclaration .)
    MODIGUAL        reduce using rule 68 (statement -> propertyDeclaration .)
    RPAREN          reduce using rule 68 (statement -> propertyDeclaration .)
    COMMA           reduce using rule 68 (statement -> propertyDeclaration .)
    RCCT            reduce using rule 68 (statement -> propertyDeclaration .)


state 98

    (69) statement -> chamadaDeFuncao .

    FUN             reduce using rule 69 (statement -> chamadaDeFuncao .)
    ID              reduce using rule 69 (statement -> chamadaDeFuncao .)
    FOR             reduce using rule 69 (statement -> chamadaDeFuncao .)
    WHILE           reduce using rule 69 (statement -> chamadaDeFuncao .)
    DO              reduce using rule 69 (statement -> chamadaDeFuncao .)
    VAR             reduce using rule 69 (statement -> chamadaDeFuncao .)
    VAL             reduce using rule 69 (statement -> chamadaDeFuncao .)
    CROSSINLINE     reduce using rule 69 (statement -> chamadaDeFuncao .)
    IMPORT          reduce using rule 69 (statement -> chamadaDeFuncao .)
    INIT            reduce using rule 69 (statement -> chamadaDeFuncao .)
    NOINLINE        reduce using rule 69 (statement -> chamadaDeFuncao .)
    OUT             reduce using rule 69 (statement -> chamadaDeFuncao .)
    VARARG          reduce using rule 69 (statement -> chamadaDeFuncao .)
    WHERE           reduce using rule 69 (statement -> chamadaDeFuncao .)
    OPERATOR        reduce using rule 69 (statement -> chamadaDeFuncao .)
    LPAREN          reduce using rule 69 (statement -> chamadaDeFuncao .)
    LITERAL_STRING  reduce using rule 69 (statement -> chamadaDeFuncao .)
    NUMBER          reduce using rule 69 (statement -> chamadaDeFuncao .)
    COLONCOLON      reduce using rule 69 (statement -> chamadaDeFuncao .)
    LCCT            reduce using rule 69 (statement -> chamadaDeFuncao .)
    IF              reduce using rule 69 (statement -> chamadaDeFuncao .)
    RETURN          reduce using rule 69 (statement -> chamadaDeFuncao .)
    RETURN_AT       reduce using rule 69 (statement -> chamadaDeFuncao .)
    CONTINUE        reduce using rule 69 (statement -> chamadaDeFuncao .)
    CONTINUE_AT     reduce using rule 69 (statement -> chamadaDeFuncao .)
    BREAK           reduce using rule 69 (statement -> chamadaDeFuncao .)
    BREAK_AT        reduce using rule 69 (statement -> chamadaDeFuncao .)
    LCHAVE          reduce using rule 69 (statement -> chamadaDeFuncao .)
    INCREMENTO      reduce using rule 69 (statement -> chamadaDeFuncao .)
    DECREMENTO      reduce using rule 69 (statement -> chamadaDeFuncao .)
    MINUS           reduce using rule 69 (statement -> chamadaDeFuncao .)
    PLUS            reduce using rule 69 (statement -> chamadaDeFuncao .)
    NOT             reduce using rule 69 (statement -> chamadaDeFuncao .)
    SUSPEND         reduce using rule 69 (statement -> chamadaDeFuncao .)
    RCHAVE          reduce using rule 69 (statement -> chamadaDeFuncao .)
    $end            reduce using rule 69 (statement -> chamadaDeFuncao .)
    PV              reduce using rule 69 (statement -> chamadaDeFuncao .)
    ELSE            reduce using rule 69 (statement -> chamadaDeFuncao .)
    MENOR           reduce using rule 69 (statement -> chamadaDeFuncao .)
    PONTO           reduce using rule 69 (statement -> chamadaDeFuncao .)
    AS              reduce using rule 69 (statement -> chamadaDeFuncao .)
    MULT            reduce using rule 69 (statement -> chamadaDeFuncao .)
    DIVIDE          reduce using rule 69 (statement -> chamadaDeFuncao .)
    MOD             reduce using rule 69 (statement -> chamadaDeFuncao .)
    PONTOPONTO      reduce using rule 69 (statement -> chamadaDeFuncao .)
    ELVIS           reduce using rule 69 (statement -> chamadaDeFuncao .)
    IN              reduce using rule 69 (statement -> chamadaDeFuncao .)
    NOT_IN          reduce using rule 69 (statement -> chamadaDeFuncao .)
    IS              reduce using rule 69 (statement -> chamadaDeFuncao .)
    NOT_IS          reduce using rule 69 (statement -> chamadaDeFuncao .)
    MAIOR           reduce using rule 69 (statement -> chamadaDeFuncao .)
    MENORIGUAL      reduce using rule 69 (statement -> chamadaDeFuncao .)
    MAIORIGUAL      reduce using rule 69 (statement -> chamadaDeFuncao .)
    DIFERENTE       reduce using rule 69 (statement -> chamadaDeFuncao .)
    IDENTIDADE      reduce using rule 69 (statement -> chamadaDeFuncao .)
    IGUALDADE       reduce using rule 69 (statement -> chamadaDeFuncao .)
    SEMIDENTIDADE   reduce using rule 69 (statement -> chamadaDeFuncao .)
    AND             reduce using rule 69 (statement -> chamadaDeFuncao .)
    OR              reduce using rule 69 (statement -> chamadaDeFuncao .)
    MAISIGUAL       reduce using rule 69 (statement -> chamadaDeFuncao .)
    MENOSIGUAL      reduce using rule 69 (statement -> chamadaDeFuncao .)
    MULTIGUAL       reduce using rule 69 (statement -> chamadaDeFuncao .)
    DIVIGUAL        reduce using rule 69 (statement -> chamadaDeFuncao .)
    MODIGUAL        reduce using rule 69 (statement -> chamadaDeFuncao .)
    RPAREN          reduce using rule 69 (statement -> chamadaDeFuncao .)
    COMMA           reduce using rule 69 (statement -> chamadaDeFuncao .)
    RCCT            reduce using rule 69 (statement -> chamadaDeFuncao .)


state 99

    (4) functionDeclaration -> FUN . simpleIdentifier functionValueParameters functionBody
    (5) functionDeclaration -> FUN . simpleIdentifier functionValueParameters optionalType functionBody
    (199) anonymousFunction -> FUN . typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> FUN . parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> FUN . typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> FUN . typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> FUN . typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> FUN . parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> FUN . parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> FUN . parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> FUN . typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> FUN . typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> FUN . typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> FUN . typePonto parametersWithOptionalType
    (211) anonymousFunction -> FUN . parametersWithOptionalType functionBody
    (212) anonymousFunction -> FUN . parametersWithOptionalType optionalType
    (213) anonymousFunction -> FUN . parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> FUN . parametersWithOptionalType
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (198) typePonto -> . type PONTO
    (178) parametersWithOptionalType -> . LPAREN parametersWithOptionalTypeRecursive RPAREN
    (179) parametersWithOptionalType -> . LPAREN RPAREN
    (35) type -> . typeModifiers optype
    (36) type -> . optype
    (40) typeModifiers -> . typeModifier
    (41) typeModifiers -> . typeModifier typeModifiers
    (37) optype -> . parenthesizedType
    (38) optype -> . functionType
    (39) optype -> . userType
    (42) typeModifier -> . SUSPEND
    (60) parenthesizedType -> . LPAREN type RPAREN
    (53) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (54) functionType -> . functionTypeParameters SETA type
    (46) userType -> . simpleUserType
    (61) receiverType -> . typeModifier parenthesizedType
    (59) functionTypeParameters -> . LPAREN parameterOrType parameterOrTypeRecursive RPAREN
    (47) simpleUserType -> . simpleIdentifier typeArguments
    (48) simpleUserType -> . simpleIdentifier

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LPAREN          shift and go to state 200
    SUSPEND         shift and go to state 78

    simpleIdentifier               shift and go to state 213
    typePonto                      shift and go to state 197
    parametersWithOptionalType     shift and go to state 198
    type                           shift and go to state 199
    typeModifiers                  shift and go to state 80
    optype                         shift and go to state 81
    typeModifier                   shift and go to state 82
    parenthesizedType              shift and go to state 83
    functionType                   shift and go to state 84
    userType                       shift and go to state 85
    receiverType                   shift and go to state 87
    functionTypeParameters         shift and go to state 88
    simpleUserType                 shift and go to state 89

state 100

    (132) directlyAssignableExpression -> simpleIdentifier .
    (165) primaryExpression -> simpleIdentifier .
    (268) label -> simpleIdentifier .

  ! reduce/reduce conflict for RPAREN resolved using rule 132 (directlyAssignableExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for NOT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for NUMBER resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for IF resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for FUN resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 165 (primaryExpression -> simpleIdentifier .)
    ATRIBUICAO      reduce using rule 132 (directlyAssignableExpression -> simpleIdentifier .)
    RPAREN          reduce using rule 132 (directlyAssignableExpression -> simpleIdentifier .)
    INCREMENTO      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    DECREMENTO      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MENOR           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    LCCT            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    LPAREN          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    COLONCOLON      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    LCHAVE          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    PONTO           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    AS              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MAISIGUAL       reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MENOSIGUAL      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MODIGUAL        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MULT            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    DIVIDE          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MOD             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    PLUS            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MINUS           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    ID              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IMPORT          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    INIT            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NOINLINE        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    OUT             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    VARARG          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    WHERE           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    OPERATOR        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    ELVIS           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IN              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NOT_IN          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IS              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NOT_IS          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MAIOR           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    DIFERENTE       reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IGUALDADE       reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    AND             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    OR              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    FUN             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    FOR             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    WHILE           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    DO              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    VAR             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    VAL             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NUMBER          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IF              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    RETURN          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    RETURN_AT       reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    CONTINUE        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    BREAK           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    BREAK_AT        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NOT             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    SUSPEND         reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    RCHAVE          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    $end            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    PV              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    ELSE            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    COMMA           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    RCCT            reduce using rule 165 (primaryExpression -> simpleIdentifier .)

  ! RPAREN          [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! INCREMENTO      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! PLUS            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NOT             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! OPERATOR        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LITERAL_STRING  [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NUMBER          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! IF              [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! RETURN          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! RETURN_AT       [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CONTINUE        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CONTINUE_AT     [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! BREAK           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! BREAK_AT        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LCHAVE          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! FUN             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! SUSPEND         [ reduce using rule 268 (label -> simpleIdentifier .) ]


state 101

    (86) assignment -> directlyAssignableExpression . ATRIBUICAO expression

    ATRIBUICAO      shift and go to state 214


state 102

    (87) assignment -> asExpression . assignmentAndOperator expression
    (112) multiplicativeExpression -> asExpression .
    (113) multiplicativeExpression -> asExpression . multiplicativeOperator multiplicativeExpression
    (234) assignmentAndOperator -> . MAISIGUAL
    (235) assignmentAndOperator -> . MENOSIGUAL
    (236) assignmentAndOperator -> . MULTIGUAL
    (237) assignmentAndOperator -> . DIVIGUAL
    (238) assignmentAndOperator -> . MODIGUAL
    (253) multiplicativeOperator -> . MULT
    (254) multiplicativeOperator -> . DIVIDE
    (255) multiplicativeOperator -> . MOD

  ! shift/reduce conflict for MAISIGUAL resolved as shift
  ! shift/reduce conflict for MENOSIGUAL resolved as shift
  ! shift/reduce conflict for MULTIGUAL resolved as shift
  ! shift/reduce conflict for DIVIGUAL resolved as shift
  ! shift/reduce conflict for MODIGUAL resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    PLUS            reduce using rule 112 (multiplicativeExpression -> asExpression .)
    MINUS           reduce using rule 112 (multiplicativeExpression -> asExpression .)
    PONTOPONTO      reduce using rule 112 (multiplicativeExpression -> asExpression .)
    ID              reduce using rule 112 (multiplicativeExpression -> asExpression .)
    CROSSINLINE     reduce using rule 112 (multiplicativeExpression -> asExpression .)
    IMPORT          reduce using rule 112 (multiplicativeExpression -> asExpression .)
    INIT            reduce using rule 112 (multiplicativeExpression -> asExpression .)
    NOINLINE        reduce using rule 112 (multiplicativeExpression -> asExpression .)
    OUT             reduce using rule 112 (multiplicativeExpression -> asExpression .)
    VARARG          reduce using rule 112 (multiplicativeExpression -> asExpression .)
    WHERE           reduce using rule 112 (multiplicativeExpression -> asExpression .)
    OPERATOR        reduce using rule 112 (multiplicativeExpression -> asExpression .)
    ELVIS           reduce using rule 112 (multiplicativeExpression -> asExpression .)
    IN              reduce using rule 112 (multiplicativeExpression -> asExpression .)
    NOT_IN          reduce using rule 112 (multiplicativeExpression -> asExpression .)
    IS              reduce using rule 112 (multiplicativeExpression -> asExpression .)
    NOT_IS          reduce using rule 112 (multiplicativeExpression -> asExpression .)
    MENOR           reduce using rule 112 (multiplicativeExpression -> asExpression .)
    MAIOR           reduce using rule 112 (multiplicativeExpression -> asExpression .)
    MENORIGUAL      reduce using rule 112 (multiplicativeExpression -> asExpression .)
    MAIORIGUAL      reduce using rule 112 (multiplicativeExpression -> asExpression .)
    DIFERENTE       reduce using rule 112 (multiplicativeExpression -> asExpression .)
    IDENTIDADE      reduce using rule 112 (multiplicativeExpression -> asExpression .)
    IGUALDADE       reduce using rule 112 (multiplicativeExpression -> asExpression .)
    SEMIDENTIDADE   reduce using rule 112 (multiplicativeExpression -> asExpression .)
    AND             reduce using rule 112 (multiplicativeExpression -> asExpression .)
    OR              reduce using rule 112 (multiplicativeExpression -> asExpression .)
    FUN             reduce using rule 112 (multiplicativeExpression -> asExpression .)
    FOR             reduce using rule 112 (multiplicativeExpression -> asExpression .)
    WHILE           reduce using rule 112 (multiplicativeExpression -> asExpression .)
    DO              reduce using rule 112 (multiplicativeExpression -> asExpression .)
    VAR             reduce using rule 112 (multiplicativeExpression -> asExpression .)
    VAL             reduce using rule 112 (multiplicativeExpression -> asExpression .)
    LPAREN          reduce using rule 112 (multiplicativeExpression -> asExpression .)
    LITERAL_STRING  reduce using rule 112 (multiplicativeExpression -> asExpression .)
    NUMBER          reduce using rule 112 (multiplicativeExpression -> asExpression .)
    COLONCOLON      reduce using rule 112 (multiplicativeExpression -> asExpression .)
    LCCT            reduce using rule 112 (multiplicativeExpression -> asExpression .)
    IF              reduce using rule 112 (multiplicativeExpression -> asExpression .)
    RETURN          reduce using rule 112 (multiplicativeExpression -> asExpression .)
    RETURN_AT       reduce using rule 112 (multiplicativeExpression -> asExpression .)
    CONTINUE        reduce using rule 112 (multiplicativeExpression -> asExpression .)
    CONTINUE_AT     reduce using rule 112 (multiplicativeExpression -> asExpression .)
    BREAK           reduce using rule 112 (multiplicativeExpression -> asExpression .)
    BREAK_AT        reduce using rule 112 (multiplicativeExpression -> asExpression .)
    LCHAVE          reduce using rule 112 (multiplicativeExpression -> asExpression .)
    INCREMENTO      reduce using rule 112 (multiplicativeExpression -> asExpression .)
    DECREMENTO      reduce using rule 112 (multiplicativeExpression -> asExpression .)
    NOT             reduce using rule 112 (multiplicativeExpression -> asExpression .)
    SUSPEND         reduce using rule 112 (multiplicativeExpression -> asExpression .)
    RCHAVE          reduce using rule 112 (multiplicativeExpression -> asExpression .)
    $end            reduce using rule 112 (multiplicativeExpression -> asExpression .)
    PV              reduce using rule 112 (multiplicativeExpression -> asExpression .)
    ELSE            reduce using rule 112 (multiplicativeExpression -> asExpression .)
    PONTO           reduce using rule 112 (multiplicativeExpression -> asExpression .)
    AS              reduce using rule 112 (multiplicativeExpression -> asExpression .)
    RPAREN          reduce using rule 112 (multiplicativeExpression -> asExpression .)
    COMMA           reduce using rule 112 (multiplicativeExpression -> asExpression .)
    RCCT            reduce using rule 112 (multiplicativeExpression -> asExpression .)
    MAISIGUAL       shift and go to state 216
    MENOSIGUAL      shift and go to state 217
    MULTIGUAL       shift and go to state 218
    DIVIGUAL        shift and go to state 219
    MODIGUAL        shift and go to state 220
    MULT            shift and go to state 147
    DIVIDE          shift and go to state 148
    MOD             shift and go to state 149

  ! MULT            [ reduce using rule 112 (multiplicativeExpression -> asExpression .) ]
  ! DIVIDE          [ reduce using rule 112 (multiplicativeExpression -> asExpression .) ]
  ! MOD             [ reduce using rule 112 (multiplicativeExpression -> asExpression .) ]
  ! MAISIGUAL       [ reduce using rule 112 (multiplicativeExpression -> asExpression .) ]
  ! MENOSIGUAL      [ reduce using rule 112 (multiplicativeExpression -> asExpression .) ]
  ! MULTIGUAL       [ reduce using rule 112 (multiplicativeExpression -> asExpression .) ]
  ! DIVIGUAL        [ reduce using rule 112 (multiplicativeExpression -> asExpression .) ]
  ! MODIGUAL        [ reduce using rule 112 (multiplicativeExpression -> asExpression .) ]

    assignmentAndOperator          shift and go to state 215
    multiplicativeOperator         shift and go to state 146

state 103

    (73) loopStatement -> forStatement .

    FUN             reduce using rule 73 (loopStatement -> forStatement .)
    ID              reduce using rule 73 (loopStatement -> forStatement .)
    FOR             reduce using rule 73 (loopStatement -> forStatement .)
    WHILE           reduce using rule 73 (loopStatement -> forStatement .)
    DO              reduce using rule 73 (loopStatement -> forStatement .)
    VAR             reduce using rule 73 (loopStatement -> forStatement .)
    VAL             reduce using rule 73 (loopStatement -> forStatement .)
    CROSSINLINE     reduce using rule 73 (loopStatement -> forStatement .)
    IMPORT          reduce using rule 73 (loopStatement -> forStatement .)
    INIT            reduce using rule 73 (loopStatement -> forStatement .)
    NOINLINE        reduce using rule 73 (loopStatement -> forStatement .)
    OUT             reduce using rule 73 (loopStatement -> forStatement .)
    VARARG          reduce using rule 73 (loopStatement -> forStatement .)
    WHERE           reduce using rule 73 (loopStatement -> forStatement .)
    OPERATOR        reduce using rule 73 (loopStatement -> forStatement .)
    LPAREN          reduce using rule 73 (loopStatement -> forStatement .)
    LITERAL_STRING  reduce using rule 73 (loopStatement -> forStatement .)
    NUMBER          reduce using rule 73 (loopStatement -> forStatement .)
    COLONCOLON      reduce using rule 73 (loopStatement -> forStatement .)
    LCCT            reduce using rule 73 (loopStatement -> forStatement .)
    IF              reduce using rule 73 (loopStatement -> forStatement .)
    RETURN          reduce using rule 73 (loopStatement -> forStatement .)
    RETURN_AT       reduce using rule 73 (loopStatement -> forStatement .)
    CONTINUE        reduce using rule 73 (loopStatement -> forStatement .)
    CONTINUE_AT     reduce using rule 73 (loopStatement -> forStatement .)
    BREAK           reduce using rule 73 (loopStatement -> forStatement .)
    BREAK_AT        reduce using rule 73 (loopStatement -> forStatement .)
    LCHAVE          reduce using rule 73 (loopStatement -> forStatement .)
    INCREMENTO      reduce using rule 73 (loopStatement -> forStatement .)
    DECREMENTO      reduce using rule 73 (loopStatement -> forStatement .)
    MINUS           reduce using rule 73 (loopStatement -> forStatement .)
    PLUS            reduce using rule 73 (loopStatement -> forStatement .)
    NOT             reduce using rule 73 (loopStatement -> forStatement .)
    SUSPEND         reduce using rule 73 (loopStatement -> forStatement .)
    RCHAVE          reduce using rule 73 (loopStatement -> forStatement .)
    $end            reduce using rule 73 (loopStatement -> forStatement .)
    PV              reduce using rule 73 (loopStatement -> forStatement .)
    ELSE            reduce using rule 73 (loopStatement -> forStatement .)
    MENOR           reduce using rule 73 (loopStatement -> forStatement .)
    PONTO           reduce using rule 73 (loopStatement -> forStatement .)
    AS              reduce using rule 73 (loopStatement -> forStatement .)
    MULT            reduce using rule 73 (loopStatement -> forStatement .)
    DIVIDE          reduce using rule 73 (loopStatement -> forStatement .)
    MOD             reduce using rule 73 (loopStatement -> forStatement .)
    PONTOPONTO      reduce using rule 73 (loopStatement -> forStatement .)
    ELVIS           reduce using rule 73 (loopStatement -> forStatement .)
    IN              reduce using rule 73 (loopStatement -> forStatement .)
    NOT_IN          reduce using rule 73 (loopStatement -> forStatement .)
    IS              reduce using rule 73 (loopStatement -> forStatement .)
    NOT_IS          reduce using rule 73 (loopStatement -> forStatement .)
    MAIOR           reduce using rule 73 (loopStatement -> forStatement .)
    MENORIGUAL      reduce using rule 73 (loopStatement -> forStatement .)
    MAIORIGUAL      reduce using rule 73 (loopStatement -> forStatement .)
    DIFERENTE       reduce using rule 73 (loopStatement -> forStatement .)
    IDENTIDADE      reduce using rule 73 (loopStatement -> forStatement .)
    IGUALDADE       reduce using rule 73 (loopStatement -> forStatement .)
    SEMIDENTIDADE   reduce using rule 73 (loopStatement -> forStatement .)
    AND             reduce using rule 73 (loopStatement -> forStatement .)
    OR              reduce using rule 73 (loopStatement -> forStatement .)
    MAISIGUAL       reduce using rule 73 (loopStatement -> forStatement .)
    MENOSIGUAL      reduce using rule 73 (loopStatement -> forStatement .)
    MULTIGUAL       reduce using rule 73 (loopStatement -> forStatement .)
    DIVIGUAL        reduce using rule 73 (loopStatement -> forStatement .)
    MODIGUAL        reduce using rule 73 (loopStatement -> forStatement .)
    RPAREN          reduce using rule 73 (loopStatement -> forStatement .)
    COMMA           reduce using rule 73 (loopStatement -> forStatement .)
    RCCT            reduce using rule 73 (loopStatement -> forStatement .)


state 104

    (74) loopStatement -> whileStatement .

    FUN             reduce using rule 74 (loopStatement -> whileStatement .)
    ID              reduce using rule 74 (loopStatement -> whileStatement .)
    FOR             reduce using rule 74 (loopStatement -> whileStatement .)
    WHILE           reduce using rule 74 (loopStatement -> whileStatement .)
    DO              reduce using rule 74 (loopStatement -> whileStatement .)
    VAR             reduce using rule 74 (loopStatement -> whileStatement .)
    VAL             reduce using rule 74 (loopStatement -> whileStatement .)
    CROSSINLINE     reduce using rule 74 (loopStatement -> whileStatement .)
    IMPORT          reduce using rule 74 (loopStatement -> whileStatement .)
    INIT            reduce using rule 74 (loopStatement -> whileStatement .)
    NOINLINE        reduce using rule 74 (loopStatement -> whileStatement .)
    OUT             reduce using rule 74 (loopStatement -> whileStatement .)
    VARARG          reduce using rule 74 (loopStatement -> whileStatement .)
    WHERE           reduce using rule 74 (loopStatement -> whileStatement .)
    OPERATOR        reduce using rule 74 (loopStatement -> whileStatement .)
    LPAREN          reduce using rule 74 (loopStatement -> whileStatement .)
    LITERAL_STRING  reduce using rule 74 (loopStatement -> whileStatement .)
    NUMBER          reduce using rule 74 (loopStatement -> whileStatement .)
    COLONCOLON      reduce using rule 74 (loopStatement -> whileStatement .)
    LCCT            reduce using rule 74 (loopStatement -> whileStatement .)
    IF              reduce using rule 74 (loopStatement -> whileStatement .)
    RETURN          reduce using rule 74 (loopStatement -> whileStatement .)
    RETURN_AT       reduce using rule 74 (loopStatement -> whileStatement .)
    CONTINUE        reduce using rule 74 (loopStatement -> whileStatement .)
    CONTINUE_AT     reduce using rule 74 (loopStatement -> whileStatement .)
    BREAK           reduce using rule 74 (loopStatement -> whileStatement .)
    BREAK_AT        reduce using rule 74 (loopStatement -> whileStatement .)
    LCHAVE          reduce using rule 74 (loopStatement -> whileStatement .)
    INCREMENTO      reduce using rule 74 (loopStatement -> whileStatement .)
    DECREMENTO      reduce using rule 74 (loopStatement -> whileStatement .)
    MINUS           reduce using rule 74 (loopStatement -> whileStatement .)
    PLUS            reduce using rule 74 (loopStatement -> whileStatement .)
    NOT             reduce using rule 74 (loopStatement -> whileStatement .)
    SUSPEND         reduce using rule 74 (loopStatement -> whileStatement .)
    RCHAVE          reduce using rule 74 (loopStatement -> whileStatement .)
    $end            reduce using rule 74 (loopStatement -> whileStatement .)
    PV              reduce using rule 74 (loopStatement -> whileStatement .)
    ELSE            reduce using rule 74 (loopStatement -> whileStatement .)
    MENOR           reduce using rule 74 (loopStatement -> whileStatement .)
    PONTO           reduce using rule 74 (loopStatement -> whileStatement .)
    AS              reduce using rule 74 (loopStatement -> whileStatement .)
    MULT            reduce using rule 74 (loopStatement -> whileStatement .)
    DIVIDE          reduce using rule 74 (loopStatement -> whileStatement .)
    MOD             reduce using rule 74 (loopStatement -> whileStatement .)
    PONTOPONTO      reduce using rule 74 (loopStatement -> whileStatement .)
    ELVIS           reduce using rule 74 (loopStatement -> whileStatement .)
    IN              reduce using rule 74 (loopStatement -> whileStatement .)
    NOT_IN          reduce using rule 74 (loopStatement -> whileStatement .)
    IS              reduce using rule 74 (loopStatement -> whileStatement .)
    NOT_IS          reduce using rule 74 (loopStatement -> whileStatement .)
    MAIOR           reduce using rule 74 (loopStatement -> whileStatement .)
    MENORIGUAL      reduce using rule 74 (loopStatement -> whileStatement .)
    MAIORIGUAL      reduce using rule 74 (loopStatement -> whileStatement .)
    DIFERENTE       reduce using rule 74 (loopStatement -> whileStatement .)
    IDENTIDADE      reduce using rule 74 (loopStatement -> whileStatement .)
    IGUALDADE       reduce using rule 74 (loopStatement -> whileStatement .)
    SEMIDENTIDADE   reduce using rule 74 (loopStatement -> whileStatement .)
    AND             reduce using rule 74 (loopStatement -> whileStatement .)
    OR              reduce using rule 74 (loopStatement -> whileStatement .)
    MAISIGUAL       reduce using rule 74 (loopStatement -> whileStatement .)
    MENOSIGUAL      reduce using rule 74 (loopStatement -> whileStatement .)
    MULTIGUAL       reduce using rule 74 (loopStatement -> whileStatement .)
    DIVIGUAL        reduce using rule 74 (loopStatement -> whileStatement .)
    MODIGUAL        reduce using rule 74 (loopStatement -> whileStatement .)
    RPAREN          reduce using rule 74 (loopStatement -> whileStatement .)
    COMMA           reduce using rule 74 (loopStatement -> whileStatement .)
    RCCT            reduce using rule 74 (loopStatement -> whileStatement .)


state 105

    (75) loopStatement -> doWhileStatement .

    FUN             reduce using rule 75 (loopStatement -> doWhileStatement .)
    ID              reduce using rule 75 (loopStatement -> doWhileStatement .)
    FOR             reduce using rule 75 (loopStatement -> doWhileStatement .)
    WHILE           reduce using rule 75 (loopStatement -> doWhileStatement .)
    DO              reduce using rule 75 (loopStatement -> doWhileStatement .)
    VAR             reduce using rule 75 (loopStatement -> doWhileStatement .)
    VAL             reduce using rule 75 (loopStatement -> doWhileStatement .)
    CROSSINLINE     reduce using rule 75 (loopStatement -> doWhileStatement .)
    IMPORT          reduce using rule 75 (loopStatement -> doWhileStatement .)
    INIT            reduce using rule 75 (loopStatement -> doWhileStatement .)
    NOINLINE        reduce using rule 75 (loopStatement -> doWhileStatement .)
    OUT             reduce using rule 75 (loopStatement -> doWhileStatement .)
    VARARG          reduce using rule 75 (loopStatement -> doWhileStatement .)
    WHERE           reduce using rule 75 (loopStatement -> doWhileStatement .)
    OPERATOR        reduce using rule 75 (loopStatement -> doWhileStatement .)
    LPAREN          reduce using rule 75 (loopStatement -> doWhileStatement .)
    LITERAL_STRING  reduce using rule 75 (loopStatement -> doWhileStatement .)
    NUMBER          reduce using rule 75 (loopStatement -> doWhileStatement .)
    COLONCOLON      reduce using rule 75 (loopStatement -> doWhileStatement .)
    LCCT            reduce using rule 75 (loopStatement -> doWhileStatement .)
    IF              reduce using rule 75 (loopStatement -> doWhileStatement .)
    RETURN          reduce using rule 75 (loopStatement -> doWhileStatement .)
    RETURN_AT       reduce using rule 75 (loopStatement -> doWhileStatement .)
    CONTINUE        reduce using rule 75 (loopStatement -> doWhileStatement .)
    CONTINUE_AT     reduce using rule 75 (loopStatement -> doWhileStatement .)
    BREAK           reduce using rule 75 (loopStatement -> doWhileStatement .)
    BREAK_AT        reduce using rule 75 (loopStatement -> doWhileStatement .)
    LCHAVE          reduce using rule 75 (loopStatement -> doWhileStatement .)
    INCREMENTO      reduce using rule 75 (loopStatement -> doWhileStatement .)
    DECREMENTO      reduce using rule 75 (loopStatement -> doWhileStatement .)
    MINUS           reduce using rule 75 (loopStatement -> doWhileStatement .)
    PLUS            reduce using rule 75 (loopStatement -> doWhileStatement .)
    NOT             reduce using rule 75 (loopStatement -> doWhileStatement .)
    SUSPEND         reduce using rule 75 (loopStatement -> doWhileStatement .)
    RCHAVE          reduce using rule 75 (loopStatement -> doWhileStatement .)
    $end            reduce using rule 75 (loopStatement -> doWhileStatement .)
    PV              reduce using rule 75 (loopStatement -> doWhileStatement .)
    ELSE            reduce using rule 75 (loopStatement -> doWhileStatement .)
    MENOR           reduce using rule 75 (loopStatement -> doWhileStatement .)
    PONTO           reduce using rule 75 (loopStatement -> doWhileStatement .)
    AS              reduce using rule 75 (loopStatement -> doWhileStatement .)
    MULT            reduce using rule 75 (loopStatement -> doWhileStatement .)
    DIVIDE          reduce using rule 75 (loopStatement -> doWhileStatement .)
    MOD             reduce using rule 75 (loopStatement -> doWhileStatement .)
    PONTOPONTO      reduce using rule 75 (loopStatement -> doWhileStatement .)
    ELVIS           reduce using rule 75 (loopStatement -> doWhileStatement .)
    IN              reduce using rule 75 (loopStatement -> doWhileStatement .)
    NOT_IN          reduce using rule 75 (loopStatement -> doWhileStatement .)
    IS              reduce using rule 75 (loopStatement -> doWhileStatement .)
    NOT_IS          reduce using rule 75 (loopStatement -> doWhileStatement .)
    MAIOR           reduce using rule 75 (loopStatement -> doWhileStatement .)
    MENORIGUAL      reduce using rule 75 (loopStatement -> doWhileStatement .)
    MAIORIGUAL      reduce using rule 75 (loopStatement -> doWhileStatement .)
    DIFERENTE       reduce using rule 75 (loopStatement -> doWhileStatement .)
    IDENTIDADE      reduce using rule 75 (loopStatement -> doWhileStatement .)
    IGUALDADE       reduce using rule 75 (loopStatement -> doWhileStatement .)
    SEMIDENTIDADE   reduce using rule 75 (loopStatement -> doWhileStatement .)
    AND             reduce using rule 75 (loopStatement -> doWhileStatement .)
    OR              reduce using rule 75 (loopStatement -> doWhileStatement .)
    MAISIGUAL       reduce using rule 75 (loopStatement -> doWhileStatement .)
    MENOSIGUAL      reduce using rule 75 (loopStatement -> doWhileStatement .)
    MULTIGUAL       reduce using rule 75 (loopStatement -> doWhileStatement .)
    DIVIGUAL        reduce using rule 75 (loopStatement -> doWhileStatement .)
    MODIGUAL        reduce using rule 75 (loopStatement -> doWhileStatement .)
    RPAREN          reduce using rule 75 (loopStatement -> doWhileStatement .)
    COMMA           reduce using rule 75 (loopStatement -> doWhileStatement .)
    RCCT            reduce using rule 75 (loopStatement -> doWhileStatement .)


state 106

    (11) propertyDeclaration -> varOrVal . typeParameters genericVariableDeclaration ATRIBUICAO expression PV
    (12) propertyDeclaration -> varOrVal . genericVariableDeclaration ATRIBUICAO expression PV
    (13) propertyDeclaration -> varOrVal . genericVariableDeclaration ATRIBUICAO expression
    (14) propertyDeclaration -> varOrVal . typeParameters genericVariableDeclaration ATRIBUICAO expression
    (15) typeParameters -> . MENOR typeParameter typeParametersRecursive MAIOR
    (6) genericVariableDeclaration -> . multiVariableDeclaration
    (7) genericVariableDeclaration -> . variableDeclaration
    (30) multiVariableDeclaration -> . LPAREN multiVariableDeclarationRecursive RPAREN
    (31) multiVariableDeclaration -> . LPAREN RPAREN
    (28) variableDeclaration -> . simpleIdentifier DOISP type
    (29) variableDeclaration -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    MENOR           shift and go to state 223
    LPAREN          shift and go to state 226
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    typeParameters                 shift and go to state 221
    genericVariableDeclaration     shift and go to state 222
    multiVariableDeclaration       shift and go to state 224
    variableDeclaration            shift and go to state 225
    simpleIdentifier               shift and go to state 227

state 107

    (84) chamadaDeFuncao -> ID . LPAREN RPAREN
    (85) chamadaDeFuncao -> ID . LPAREN parametersFunction RPAREN
    (269) simpleIdentifier -> ID .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 228
    ATRIBUICAO      reduce using rule 269 (simpleIdentifier -> ID .)
    INCREMENTO      reduce using rule 269 (simpleIdentifier -> ID .)
    DECREMENTO      reduce using rule 269 (simpleIdentifier -> ID .)
    MENOR           reduce using rule 269 (simpleIdentifier -> ID .)
    LCCT            reduce using rule 269 (simpleIdentifier -> ID .)
    COLONCOLON      reduce using rule 269 (simpleIdentifier -> ID .)
    LCHAVE          reduce using rule 269 (simpleIdentifier -> ID .)
    PONTO           reduce using rule 269 (simpleIdentifier -> ID .)
    AS              reduce using rule 269 (simpleIdentifier -> ID .)
    MAISIGUAL       reduce using rule 269 (simpleIdentifier -> ID .)
    MENOSIGUAL      reduce using rule 269 (simpleIdentifier -> ID .)
    MULTIGUAL       reduce using rule 269 (simpleIdentifier -> ID .)
    DIVIGUAL        reduce using rule 269 (simpleIdentifier -> ID .)
    MODIGUAL        reduce using rule 269 (simpleIdentifier -> ID .)
    MULT            reduce using rule 269 (simpleIdentifier -> ID .)
    DIVIDE          reduce using rule 269 (simpleIdentifier -> ID .)
    MOD             reduce using rule 269 (simpleIdentifier -> ID .)
    PLUS            reduce using rule 269 (simpleIdentifier -> ID .)
    MINUS           reduce using rule 269 (simpleIdentifier -> ID .)
    PONTOPONTO      reduce using rule 269 (simpleIdentifier -> ID .)
    ID              reduce using rule 269 (simpleIdentifier -> ID .)
    CROSSINLINE     reduce using rule 269 (simpleIdentifier -> ID .)
    IMPORT          reduce using rule 269 (simpleIdentifier -> ID .)
    INIT            reduce using rule 269 (simpleIdentifier -> ID .)
    NOINLINE        reduce using rule 269 (simpleIdentifier -> ID .)
    OUT             reduce using rule 269 (simpleIdentifier -> ID .)
    VARARG          reduce using rule 269 (simpleIdentifier -> ID .)
    WHERE           reduce using rule 269 (simpleIdentifier -> ID .)
    OPERATOR        reduce using rule 269 (simpleIdentifier -> ID .)
    ELVIS           reduce using rule 269 (simpleIdentifier -> ID .)
    IN              reduce using rule 269 (simpleIdentifier -> ID .)
    NOT_IN          reduce using rule 269 (simpleIdentifier -> ID .)
    IS              reduce using rule 269 (simpleIdentifier -> ID .)
    NOT_IS          reduce using rule 269 (simpleIdentifier -> ID .)
    MAIOR           reduce using rule 269 (simpleIdentifier -> ID .)
    MENORIGUAL      reduce using rule 269 (simpleIdentifier -> ID .)
    MAIORIGUAL      reduce using rule 269 (simpleIdentifier -> ID .)
    DIFERENTE       reduce using rule 269 (simpleIdentifier -> ID .)
    IDENTIDADE      reduce using rule 269 (simpleIdentifier -> ID .)
    IGUALDADE       reduce using rule 269 (simpleIdentifier -> ID .)
    SEMIDENTIDADE   reduce using rule 269 (simpleIdentifier -> ID .)
    AND             reduce using rule 269 (simpleIdentifier -> ID .)
    OR              reduce using rule 269 (simpleIdentifier -> ID .)
    FUN             reduce using rule 269 (simpleIdentifier -> ID .)
    FOR             reduce using rule 269 (simpleIdentifier -> ID .)
    WHILE           reduce using rule 269 (simpleIdentifier -> ID .)
    DO              reduce using rule 269 (simpleIdentifier -> ID .)
    VAR             reduce using rule 269 (simpleIdentifier -> ID .)
    VAL             reduce using rule 269 (simpleIdentifier -> ID .)
    LITERAL_STRING  reduce using rule 269 (simpleIdentifier -> ID .)
    NUMBER          reduce using rule 269 (simpleIdentifier -> ID .)
    IF              reduce using rule 269 (simpleIdentifier -> ID .)
    RETURN          reduce using rule 269 (simpleIdentifier -> ID .)
    RETURN_AT       reduce using rule 269 (simpleIdentifier -> ID .)
    CONTINUE        reduce using rule 269 (simpleIdentifier -> ID .)
    CONTINUE_AT     reduce using rule 269 (simpleIdentifier -> ID .)
    BREAK           reduce using rule 269 (simpleIdentifier -> ID .)
    BREAK_AT        reduce using rule 269 (simpleIdentifier -> ID .)
    NOT             reduce using rule 269 (simpleIdentifier -> ID .)
    SUSPEND         reduce using rule 269 (simpleIdentifier -> ID .)
    RCHAVE          reduce using rule 269 (simpleIdentifier -> ID .)
    DOISP           reduce using rule 269 (simpleIdentifier -> ID .)
    COMMA           reduce using rule 269 (simpleIdentifier -> ID .)
    SETA            reduce using rule 269 (simpleIdentifier -> ID .)
    $end            reduce using rule 269 (simpleIdentifier -> ID .)
    PV              reduce using rule 269 (simpleIdentifier -> ID .)
    ELSE            reduce using rule 269 (simpleIdentifier -> ID .)
    RPAREN          reduce using rule 269 (simpleIdentifier -> ID .)
    RCCT            reduce using rule 269 (simpleIdentifier -> ID .)

  ! LPAREN          [ reduce using rule 269 (simpleIdentifier -> ID .) ]


state 108

    (134) parenthesizedDirectlyAssignableExpression -> LPAREN . directlyAssignableExpression RPAREN
    (173) parenthesizedExpression -> LPAREN . expression RPAREN
    (131) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (132) directlyAssignableExpression -> . simpleIdentifier
    (133) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (8) expression -> . disjunction
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (134) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (42) typeModifier -> . SUSPEND
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LPAREN          shift and go to state 108
    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61

    directlyAssignableExpression   shift and go to state 229
    expression                     shift and go to state 175
    postfixUnaryExpression         shift and go to state 109
    simpleIdentifier               shift and go to state 100
    parenthesizedDirectlyAssignableExpression shift and go to state 110
    disjunction                    shift and go to state 30
    primaryExpression              shift and go to state 46
    conjunction                    shift and go to state 31
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    equality                       shift and go to state 32
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    comparison                     shift and go to state 33
    typeModifier                   shift and go to state 75
    infixOperation                 shift and go to state 34
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    unaryPrefix                    shift and go to state 45
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48

state 109

    (131) directlyAssignableExpression -> postfixUnaryExpression . assignableSuffix
    (117) prefixUnaryExpression -> postfixUnaryExpression .
    (138) assignableSuffix -> . typeArguments
    (139) assignableSuffix -> . indexingSuffix
    (140) assignableSuffix -> . navigationSuffix
    (153) typeArguments -> . MENOR typeArgumentsRecursive MAIOR
    (154) typeArguments -> . MENOR MAIOR
    (141) indexingSuffix -> . LCCT indexingSuffixRecursive RCCT
    (142) indexingSuffix -> . LCCT RCCT
    (145) navigationSuffix -> . memberAccessOperator simpleIdentifier CLASS
    (146) navigationSuffix -> . memberAccessOperator parenthesizedExpression CLASS
    (265) memberAccessOperator -> . safeNav
    (266) memberAccessOperator -> . COLONCOLON
    (267) safeNav -> . PONTO

  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for COLONCOLON resolved as shift
  ! shift/reduce conflict for PONTO resolved as shift
    AS              reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    MAISIGUAL       reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    MENOSIGUAL      reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    MULTIGUAL       reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    DIVIGUAL        reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    MODIGUAL        reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    MULT            reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    DIVIDE          reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    MOD             reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    PLUS            reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    MINUS           reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    PONTOPONTO      reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    ID              reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    CROSSINLINE     reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    IMPORT          reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    INIT            reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOINLINE        reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    OUT             reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    VARARG          reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    WHERE           reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    OPERATOR        reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    ELVIS           reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    IN              reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOT_IN          reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    IS              reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOT_IS          reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    MAIOR           reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    MENORIGUAL      reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    MAIORIGUAL      reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    DIFERENTE       reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    IDENTIDADE      reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    IGUALDADE       reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    SEMIDENTIDADE   reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    AND             reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    OR              reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    FUN             reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    FOR             reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    WHILE           reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    DO              reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    VAR             reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    VAL             reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    LPAREN          reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    LITERAL_STRING  reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    NUMBER          reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    IF              reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    RETURN          reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    RETURN_AT       reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONTINUE        reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONTINUE_AT     reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    BREAK           reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    BREAK_AT        reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    LCHAVE          reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    INCREMENTO      reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    DECREMENTO      reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOT             reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    SUSPEND         reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    RCHAVE          reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    RPAREN          reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    $end            reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    PV              reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    ELSE            reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    COMMA           reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    RCCT            reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .)
    MENOR           shift and go to state 165
    LCCT            shift and go to state 168
    COLONCOLON      shift and go to state 173
    PONTO           shift and go to state 174

  ! MENOR           [ reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! COLONCOLON      [ reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! LCCT            [ reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! PONTO           [ reduce using rule 117 (prefixUnaryExpression -> postfixUnaryExpression .) ]

    assignableSuffix               shift and go to state 230
    typeArguments                  shift and go to state 231
    indexingSuffix                 shift and go to state 232
    navigationSuffix               shift and go to state 233
    memberAccessOperator           shift and go to state 169
    safeNav                        shift and go to state 172

state 110

    (133) directlyAssignableExpression -> parenthesizedDirectlyAssignableExpression .

    ATRIBUICAO      reduce using rule 133 (directlyAssignableExpression -> parenthesizedDirectlyAssignableExpression .)
    RPAREN          reduce using rule 133 (directlyAssignableExpression -> parenthesizedDirectlyAssignableExpression .)


state 111

    (76) forStatement -> FOR . LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody
    (77) forStatement -> FOR . LPAREN genericVariableDeclaration IN expression RPAREN

    LPAREN          shift and go to state 234


state 112

    (78) whileStatement -> WHILE . LPAREN expression RPAREN controlStructureBody
    (79) whileStatement -> WHILE . LPAREN expression RPAREN PV

    LPAREN          shift and go to state 235


state 113

    (80) doWhileStatement -> DO . controlStructureBody WHILE LPAREN expression RPAREN
    (81) doWhileStatement -> DO . WHILE LPAREN expression RPAREN
    (70) controlStructureBody -> . block
    (71) controlStructureBody -> . statement
    (72) block -> . LCHAVE statements RCHAVE
    (64) statement -> . functionDeclaration
    (65) statement -> . assignment
    (66) statement -> . loopStatement
    (67) statement -> . expression
    (68) statement -> . propertyDeclaration
    (69) statement -> . chamadaDeFuncao
    (4) functionDeclaration -> . FUN simpleIdentifier functionValueParameters functionBody
    (5) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType functionBody
    (86) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (87) assignment -> . asExpression assignmentAndOperator expression
    (73) loopStatement -> . forStatement
    (74) loopStatement -> . whileStatement
    (75) loopStatement -> . doWhileStatement
    (8) expression -> . disjunction
    (11) propertyDeclaration -> . varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV
    (12) propertyDeclaration -> . varOrVal genericVariableDeclaration ATRIBUICAO expression PV
    (13) propertyDeclaration -> . varOrVal genericVariableDeclaration ATRIBUICAO expression
    (14) propertyDeclaration -> . varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression
    (84) chamadaDeFuncao -> . ID LPAREN RPAREN
    (85) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (131) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (132) directlyAssignableExpression -> . simpleIdentifier
    (133) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (76) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody
    (77) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN
    (78) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (79) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (80) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (81) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (9) varOrVal -> . VAR
    (10) varOrVal -> . VAL
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (134) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (42) typeModifier -> . SUSPEND
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression

    WHILE           shift and go to state 237
    LCHAVE          shift and go to state 240
    FUN             shift and go to state 99
    ID              shift and go to state 107
    FOR             shift and go to state 111
    DO              shift and go to state 113
    VAR             shift and go to state 114
    VAL             shift and go to state 115
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LPAREN          shift and go to state 108
    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    SUSPEND         shift and go to state 78

    controlStructureBody           shift and go to state 236
    expression                     shift and go to state 96
    block                          shift and go to state 238
    statement                      shift and go to state 239
    functionDeclaration            shift and go to state 93
    assignment                     shift and go to state 94
    loopStatement                  shift and go to state 95
    propertyDeclaration            shift and go to state 97
    chamadaDeFuncao                shift and go to state 98
    simpleIdentifier               shift and go to state 100
    directlyAssignableExpression   shift and go to state 101
    asExpression                   shift and go to state 102
    forStatement                   shift and go to state 103
    whileStatement                 shift and go to state 104
    doWhileStatement               shift and go to state 105
    disjunction                    shift and go to state 30
    varOrVal                       shift and go to state 106
    postfixUnaryExpression         shift and go to state 109
    parenthesizedDirectlyAssignableExpression shift and go to state 110
    prefixUnaryExpression          shift and go to state 42
    conjunction                    shift and go to state 31
    primaryExpression              shift and go to state 46
    prefixUnaryExpressionRecursive shift and go to state 43
    equality                       shift and go to state 32
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    unaryPrefix                    shift and go to state 45
    comparison                     shift and go to state 33
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    infixOperation                 shift and go to state 34
    typeModifier                   shift and go to state 75
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40

state 114

    (9) varOrVal -> VAR .

    MENOR           reduce using rule 9 (varOrVal -> VAR .)
    LPAREN          reduce using rule 9 (varOrVal -> VAR .)
    ID              reduce using rule 9 (varOrVal -> VAR .)
    CROSSINLINE     reduce using rule 9 (varOrVal -> VAR .)
    IMPORT          reduce using rule 9 (varOrVal -> VAR .)
    INIT            reduce using rule 9 (varOrVal -> VAR .)
    NOINLINE        reduce using rule 9 (varOrVal -> VAR .)
    OUT             reduce using rule 9 (varOrVal -> VAR .)
    VARARG          reduce using rule 9 (varOrVal -> VAR .)
    WHERE           reduce using rule 9 (varOrVal -> VAR .)
    OPERATOR        reduce using rule 9 (varOrVal -> VAR .)


state 115

    (10) varOrVal -> VAL .

    MENOR           reduce using rule 10 (varOrVal -> VAL .)
    LPAREN          reduce using rule 10 (varOrVal -> VAL .)
    ID              reduce using rule 10 (varOrVal -> VAL .)
    CROSSINLINE     reduce using rule 10 (varOrVal -> VAL .)
    IMPORT          reduce using rule 10 (varOrVal -> VAL .)
    INIT            reduce using rule 10 (varOrVal -> VAL .)
    NOINLINE        reduce using rule 10 (varOrVal -> VAL .)
    OUT             reduce using rule 10 (varOrVal -> VAL .)
    VARARG          reduce using rule 10 (varOrVal -> VAL .)
    WHERE           reduce using rule 10 (varOrVal -> VAL .)
    OPERATOR        reduce using rule 10 (varOrVal -> VAL .)


state 116

    (22) functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .

    ATRIBUICAO      reduce using rule 22 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    DOISP           reduce using rule 22 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    LCHAVE          reduce using rule 22 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)


state 117

    (25) functionValueParametersRecursive -> functionValueParameter COMMA . functionValueParametersRecursive
    (24) functionValueParametersRecursive -> . functionValueParameter
    (25) functionValueParametersRecursive -> . functionValueParameter COMMA functionValueParametersRecursive
    (26) functionValueParameter -> . parameter ATRIBUICAO expression
    (27) functionValueParameter -> . parameter
    (34) parameter -> . simpleIdentifier optionalType
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    functionValueParameter         shift and go to state 25
    functionValueParametersRecursive shift and go to state 241
    parameter                      shift and go to state 26
    simpleIdentifier               shift and go to state 27

state 118

    (26) functionValueParameter -> parameter ATRIBUICAO . expression
    (8) expression -> . disjunction
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    expression                     shift and go to state 242
    disjunction                    shift and go to state 30
    conjunction                    shift and go to state 31
    equality                       shift and go to state 32
    comparison                     shift and go to state 33
    infixOperation                 shift and go to state 34
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    simpleIdentifier               shift and go to state 38
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 119

    (34) parameter -> simpleIdentifier optionalType .

    ATRIBUICAO      reduce using rule 34 (parameter -> simpleIdentifier optionalType .)
    COMMA           reduce using rule 34 (parameter -> simpleIdentifier optionalType .)
    RPAREN          reduce using rule 34 (parameter -> simpleIdentifier optionalType .)


state 120

    (89) disjunction -> conjunction OR . disjunction
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    conjunction                    shift and go to state 31
    disjunction                    shift and go to state 243
    equality                       shift and go to state 32
    comparison                     shift and go to state 33
    infixOperation                 shift and go to state 34
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    simpleIdentifier               shift and go to state 38
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 121

    (91) conjunction -> equality AND . conjunction
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    equality                       shift and go to state 32
    conjunction                    shift and go to state 244
    comparison                     shift and go to state 33
    infixOperation                 shift and go to state 34
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    simpleIdentifier               shift and go to state 38
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 122

    (93) equality -> comparison equalityOperator . equality
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    comparison                     shift and go to state 33
    equality                       shift and go to state 245
    infixOperation                 shift and go to state 34
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    simpleIdentifier               shift and go to state 38
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 123

    (239) equalityOperator -> DIFERENTE .

    LITERAL_STRING  reduce using rule 239 (equalityOperator -> DIFERENTE .)
    NUMBER          reduce using rule 239 (equalityOperator -> DIFERENTE .)
    INCREMENTO      reduce using rule 239 (equalityOperator -> DIFERENTE .)
    DECREMENTO      reduce using rule 239 (equalityOperator -> DIFERENTE .)
    MINUS           reduce using rule 239 (equalityOperator -> DIFERENTE .)
    PLUS            reduce using rule 239 (equalityOperator -> DIFERENTE .)
    NOT             reduce using rule 239 (equalityOperator -> DIFERENTE .)
    LPAREN          reduce using rule 239 (equalityOperator -> DIFERENTE .)
    ID              reduce using rule 239 (equalityOperator -> DIFERENTE .)
    CROSSINLINE     reduce using rule 239 (equalityOperator -> DIFERENTE .)
    IMPORT          reduce using rule 239 (equalityOperator -> DIFERENTE .)
    INIT            reduce using rule 239 (equalityOperator -> DIFERENTE .)
    NOINLINE        reduce using rule 239 (equalityOperator -> DIFERENTE .)
    OUT             reduce using rule 239 (equalityOperator -> DIFERENTE .)
    VARARG          reduce using rule 239 (equalityOperator -> DIFERENTE .)
    WHERE           reduce using rule 239 (equalityOperator -> DIFERENTE .)
    OPERATOR        reduce using rule 239 (equalityOperator -> DIFERENTE .)
    COLONCOLON      reduce using rule 239 (equalityOperator -> DIFERENTE .)
    LCCT            reduce using rule 239 (equalityOperator -> DIFERENTE .)
    IF              reduce using rule 239 (equalityOperator -> DIFERENTE .)
    RETURN          reduce using rule 239 (equalityOperator -> DIFERENTE .)
    RETURN_AT       reduce using rule 239 (equalityOperator -> DIFERENTE .)
    CONTINUE        reduce using rule 239 (equalityOperator -> DIFERENTE .)
    CONTINUE_AT     reduce using rule 239 (equalityOperator -> DIFERENTE .)
    BREAK           reduce using rule 239 (equalityOperator -> DIFERENTE .)
    BREAK_AT        reduce using rule 239 (equalityOperator -> DIFERENTE .)
    LCHAVE          reduce using rule 239 (equalityOperator -> DIFERENTE .)
    FUN             reduce using rule 239 (equalityOperator -> DIFERENTE .)
    SUSPEND         reduce using rule 239 (equalityOperator -> DIFERENTE .)


state 124

    (240) equalityOperator -> IDENTIDADE .

    LITERAL_STRING  reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    NUMBER          reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    INCREMENTO      reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    DECREMENTO      reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    MINUS           reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    PLUS            reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    NOT             reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    LPAREN          reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    ID              reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    CROSSINLINE     reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    IMPORT          reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    INIT            reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    NOINLINE        reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    OUT             reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    VARARG          reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    WHERE           reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    OPERATOR        reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    COLONCOLON      reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    LCCT            reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    IF              reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    RETURN          reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    RETURN_AT       reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    CONTINUE        reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    CONTINUE_AT     reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    BREAK           reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    BREAK_AT        reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    LCHAVE          reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    FUN             reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    SUSPEND         reduce using rule 240 (equalityOperator -> IDENTIDADE .)


state 125

    (241) equalityOperator -> IGUALDADE .

    LITERAL_STRING  reduce using rule 241 (equalityOperator -> IGUALDADE .)
    NUMBER          reduce using rule 241 (equalityOperator -> IGUALDADE .)
    INCREMENTO      reduce using rule 241 (equalityOperator -> IGUALDADE .)
    DECREMENTO      reduce using rule 241 (equalityOperator -> IGUALDADE .)
    MINUS           reduce using rule 241 (equalityOperator -> IGUALDADE .)
    PLUS            reduce using rule 241 (equalityOperator -> IGUALDADE .)
    NOT             reduce using rule 241 (equalityOperator -> IGUALDADE .)
    LPAREN          reduce using rule 241 (equalityOperator -> IGUALDADE .)
    ID              reduce using rule 241 (equalityOperator -> IGUALDADE .)
    CROSSINLINE     reduce using rule 241 (equalityOperator -> IGUALDADE .)
    IMPORT          reduce using rule 241 (equalityOperator -> IGUALDADE .)
    INIT            reduce using rule 241 (equalityOperator -> IGUALDADE .)
    NOINLINE        reduce using rule 241 (equalityOperator -> IGUALDADE .)
    OUT             reduce using rule 241 (equalityOperator -> IGUALDADE .)
    VARARG          reduce using rule 241 (equalityOperator -> IGUALDADE .)
    WHERE           reduce using rule 241 (equalityOperator -> IGUALDADE .)
    OPERATOR        reduce using rule 241 (equalityOperator -> IGUALDADE .)
    COLONCOLON      reduce using rule 241 (equalityOperator -> IGUALDADE .)
    LCCT            reduce using rule 241 (equalityOperator -> IGUALDADE .)
    IF              reduce using rule 241 (equalityOperator -> IGUALDADE .)
    RETURN          reduce using rule 241 (equalityOperator -> IGUALDADE .)
    RETURN_AT       reduce using rule 241 (equalityOperator -> IGUALDADE .)
    CONTINUE        reduce using rule 241 (equalityOperator -> IGUALDADE .)
    CONTINUE_AT     reduce using rule 241 (equalityOperator -> IGUALDADE .)
    BREAK           reduce using rule 241 (equalityOperator -> IGUALDADE .)
    BREAK_AT        reduce using rule 241 (equalityOperator -> IGUALDADE .)
    LCHAVE          reduce using rule 241 (equalityOperator -> IGUALDADE .)
    FUN             reduce using rule 241 (equalityOperator -> IGUALDADE .)
    SUSPEND         reduce using rule 241 (equalityOperator -> IGUALDADE .)


state 126

    (242) equalityOperator -> SEMIDENTIDADE .

    LITERAL_STRING  reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    NUMBER          reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    INCREMENTO      reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    DECREMENTO      reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    MINUS           reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    PLUS            reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    NOT             reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    LPAREN          reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    ID              reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    CROSSINLINE     reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    IMPORT          reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    INIT            reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    NOINLINE        reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    OUT             reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    VARARG          reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    WHERE           reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    OPERATOR        reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    COLONCOLON      reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    LCCT            reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    IF              reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    RETURN          reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    RETURN_AT       reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    CONTINUE        reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    CONTINUE_AT     reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    BREAK           reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    BREAK_AT        reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    LCHAVE          reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    FUN             reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    SUSPEND         reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)


state 127

    (95) comparison -> infixOperation comparisonOperator . infixOperation
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    infixOperation                 shift and go to state 246
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    simpleIdentifier               shift and go to state 38
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 128

    (243) comparisonOperator -> MENOR .

    LITERAL_STRING  reduce using rule 243 (comparisonOperator -> MENOR .)
    NUMBER          reduce using rule 243 (comparisonOperator -> MENOR .)
    INCREMENTO      reduce using rule 243 (comparisonOperator -> MENOR .)
    DECREMENTO      reduce using rule 243 (comparisonOperator -> MENOR .)
    MINUS           reduce using rule 243 (comparisonOperator -> MENOR .)
    PLUS            reduce using rule 243 (comparisonOperator -> MENOR .)
    NOT             reduce using rule 243 (comparisonOperator -> MENOR .)
    LPAREN          reduce using rule 243 (comparisonOperator -> MENOR .)
    ID              reduce using rule 243 (comparisonOperator -> MENOR .)
    CROSSINLINE     reduce using rule 243 (comparisonOperator -> MENOR .)
    IMPORT          reduce using rule 243 (comparisonOperator -> MENOR .)
    INIT            reduce using rule 243 (comparisonOperator -> MENOR .)
    NOINLINE        reduce using rule 243 (comparisonOperator -> MENOR .)
    OUT             reduce using rule 243 (comparisonOperator -> MENOR .)
    VARARG          reduce using rule 243 (comparisonOperator -> MENOR .)
    WHERE           reduce using rule 243 (comparisonOperator -> MENOR .)
    OPERATOR        reduce using rule 243 (comparisonOperator -> MENOR .)
    COLONCOLON      reduce using rule 243 (comparisonOperator -> MENOR .)
    LCCT            reduce using rule 243 (comparisonOperator -> MENOR .)
    IF              reduce using rule 243 (comparisonOperator -> MENOR .)
    RETURN          reduce using rule 243 (comparisonOperator -> MENOR .)
    RETURN_AT       reduce using rule 243 (comparisonOperator -> MENOR .)
    CONTINUE        reduce using rule 243 (comparisonOperator -> MENOR .)
    CONTINUE_AT     reduce using rule 243 (comparisonOperator -> MENOR .)
    BREAK           reduce using rule 243 (comparisonOperator -> MENOR .)
    BREAK_AT        reduce using rule 243 (comparisonOperator -> MENOR .)
    LCHAVE          reduce using rule 243 (comparisonOperator -> MENOR .)
    FUN             reduce using rule 243 (comparisonOperator -> MENOR .)
    SUSPEND         reduce using rule 243 (comparisonOperator -> MENOR .)


state 129

    (244) comparisonOperator -> MAIOR .

    LITERAL_STRING  reduce using rule 244 (comparisonOperator -> MAIOR .)
    NUMBER          reduce using rule 244 (comparisonOperator -> MAIOR .)
    INCREMENTO      reduce using rule 244 (comparisonOperator -> MAIOR .)
    DECREMENTO      reduce using rule 244 (comparisonOperator -> MAIOR .)
    MINUS           reduce using rule 244 (comparisonOperator -> MAIOR .)
    PLUS            reduce using rule 244 (comparisonOperator -> MAIOR .)
    NOT             reduce using rule 244 (comparisonOperator -> MAIOR .)
    LPAREN          reduce using rule 244 (comparisonOperator -> MAIOR .)
    ID              reduce using rule 244 (comparisonOperator -> MAIOR .)
    CROSSINLINE     reduce using rule 244 (comparisonOperator -> MAIOR .)
    IMPORT          reduce using rule 244 (comparisonOperator -> MAIOR .)
    INIT            reduce using rule 244 (comparisonOperator -> MAIOR .)
    NOINLINE        reduce using rule 244 (comparisonOperator -> MAIOR .)
    OUT             reduce using rule 244 (comparisonOperator -> MAIOR .)
    VARARG          reduce using rule 244 (comparisonOperator -> MAIOR .)
    WHERE           reduce using rule 244 (comparisonOperator -> MAIOR .)
    OPERATOR        reduce using rule 244 (comparisonOperator -> MAIOR .)
    COLONCOLON      reduce using rule 244 (comparisonOperator -> MAIOR .)
    LCCT            reduce using rule 244 (comparisonOperator -> MAIOR .)
    IF              reduce using rule 244 (comparisonOperator -> MAIOR .)
    RETURN          reduce using rule 244 (comparisonOperator -> MAIOR .)
    RETURN_AT       reduce using rule 244 (comparisonOperator -> MAIOR .)
    CONTINUE        reduce using rule 244 (comparisonOperator -> MAIOR .)
    CONTINUE_AT     reduce using rule 244 (comparisonOperator -> MAIOR .)
    BREAK           reduce using rule 244 (comparisonOperator -> MAIOR .)
    BREAK_AT        reduce using rule 244 (comparisonOperator -> MAIOR .)
    LCHAVE          reduce using rule 244 (comparisonOperator -> MAIOR .)
    FUN             reduce using rule 244 (comparisonOperator -> MAIOR .)
    SUSPEND         reduce using rule 244 (comparisonOperator -> MAIOR .)


state 130

    (245) comparisonOperator -> MENORIGUAL .

    LITERAL_STRING  reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    NUMBER          reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    INCREMENTO      reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    DECREMENTO      reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    MINUS           reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    PLUS            reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    NOT             reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    LPAREN          reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    ID              reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    CROSSINLINE     reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    IMPORT          reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    INIT            reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    NOINLINE        reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    OUT             reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    VARARG          reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    WHERE           reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    OPERATOR        reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    COLONCOLON      reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    LCCT            reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    IF              reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    RETURN          reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    RETURN_AT       reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    CONTINUE        reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    CONTINUE_AT     reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    BREAK           reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    BREAK_AT        reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    LCHAVE          reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    FUN             reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    SUSPEND         reduce using rule 245 (comparisonOperator -> MENORIGUAL .)


state 131

    (246) comparisonOperator -> MAIORIGUAL .

    LITERAL_STRING  reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    NUMBER          reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    INCREMENTO      reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    DECREMENTO      reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    MINUS           reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    PLUS            reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    NOT             reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    LPAREN          reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    ID              reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    CROSSINLINE     reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    IMPORT          reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    INIT            reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    NOINLINE        reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    OUT             reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    VARARG          reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    WHERE           reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    OPERATOR        reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    COLONCOLON      reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    LCCT            reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    IF              reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    RETURN          reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    RETURN_AT       reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    CONTINUE        reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    CONTINUE_AT     reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    BREAK           reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    BREAK_AT        reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    LCHAVE          reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    FUN             reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    SUSPEND         reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)


state 132

    (96) infixOperation -> elvisExpression infixOperationRecursive .

    FUN             reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    $end            reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    ID              reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    FOR             reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    WHILE           reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    DO              reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    VAR             reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    VAL             reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    CROSSINLINE     reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    IMPORT          reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    INIT            reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    NOINLINE        reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    OUT             reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    VARARG          reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    WHERE           reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    OPERATOR        reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    LPAREN          reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    LITERAL_STRING  reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    NUMBER          reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    COLONCOLON      reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    LCCT            reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    IF              reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    RETURN          reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    RETURN_AT       reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    CONTINUE        reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    CONTINUE_AT     reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    BREAK           reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    BREAK_AT        reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    LCHAVE          reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    INCREMENTO      reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    DECREMENTO      reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    MINUS           reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    PLUS            reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    NOT             reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    SUSPEND         reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    RCHAVE          reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    PV              reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    ELSE            reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    MENOR           reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    PONTO           reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    AS              reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    MULT            reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    DIVIDE          reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    MOD             reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    PONTOPONTO      reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    ELVIS           reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    IN              reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    NOT_IN          reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    IS              reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    NOT_IS          reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    MAIOR           reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    MENORIGUAL      reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    MAIORIGUAL      reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    DIFERENTE       reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    IDENTIDADE      reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    IGUALDADE       reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    SEMIDENTIDADE   reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    AND             reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    OR              reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    MAISIGUAL       reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    MENOSIGUAL      reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    MULTIGUAL       reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    DIVIGUAL        reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    MODIGUAL        reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    RPAREN          reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    COMMA           reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)
    RCCT            reduce using rule 96 (infixOperation -> elvisExpression infixOperationRecursive .)


state 133

    (98) infixOperationRecursive -> inOrIs . elvisOrType
    (99) infixOperationRecursive -> inOrIs . elvisOrType infixOperationRecursive
    (102) elvisOrType -> . elvisExpression
    (103) elvisOrType -> . type
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (35) type -> . typeModifiers optype
    (36) type -> . optype
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (40) typeModifiers -> . typeModifier
    (41) typeModifiers -> . typeModifier typeModifiers
    (37) optype -> . parenthesizedType
    (38) optype -> . functionType
    (39) optype -> . userType
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (42) typeModifier -> . SUSPEND
    (60) parenthesizedType -> . LPAREN type RPAREN
    (53) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (54) functionType -> . functionTypeParameters SETA type
    (46) userType -> . simpleUserType
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (61) receiverType -> . typeModifier parenthesizedType
    (59) functionTypeParameters -> . LPAREN parameterOrType parameterOrTypeRecursive RPAREN
    (47) simpleUserType -> . simpleIdentifier typeArguments
    (48) simpleUserType -> . simpleIdentifier
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType

    SUSPEND         shift and go to state 78
    LPAREN          shift and go to state 251
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77

    elvisOrType                    shift and go to state 247
    elvisExpression                shift and go to state 248
    type                           shift and go to state 249
    infixFunctionCall              shift and go to state 36
    typeModifiers                  shift and go to state 80
    optype                         shift and go to state 81
    rangeExpression                shift and go to state 37
    simpleIdentifier               shift and go to state 250
    typeModifier                   shift and go to state 82
    parenthesizedType              shift and go to state 83
    functionType                   shift and go to state 84
    userType                       shift and go to state 85
    additiveExpression             shift and go to state 39
    receiverType                   shift and go to state 252
    functionTypeParameters         shift and go to state 88
    simpleUserType                 shift and go to state 89
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66

state 134

    (100) inOrIs -> inOperator .

    SUSPEND         reduce using rule 100 (inOrIs -> inOperator .)
    LPAREN          reduce using rule 100 (inOrIs -> inOperator .)
    ID              reduce using rule 100 (inOrIs -> inOperator .)
    CROSSINLINE     reduce using rule 100 (inOrIs -> inOperator .)
    IMPORT          reduce using rule 100 (inOrIs -> inOperator .)
    INIT            reduce using rule 100 (inOrIs -> inOperator .)
    NOINLINE        reduce using rule 100 (inOrIs -> inOperator .)
    OUT             reduce using rule 100 (inOrIs -> inOperator .)
    VARARG          reduce using rule 100 (inOrIs -> inOperator .)
    WHERE           reduce using rule 100 (inOrIs -> inOperator .)
    OPERATOR        reduce using rule 100 (inOrIs -> inOperator .)
    LITERAL_STRING  reduce using rule 100 (inOrIs -> inOperator .)
    NUMBER          reduce using rule 100 (inOrIs -> inOperator .)
    INCREMENTO      reduce using rule 100 (inOrIs -> inOperator .)
    DECREMENTO      reduce using rule 100 (inOrIs -> inOperator .)
    MINUS           reduce using rule 100 (inOrIs -> inOperator .)
    PLUS            reduce using rule 100 (inOrIs -> inOperator .)
    NOT             reduce using rule 100 (inOrIs -> inOperator .)
    COLONCOLON      reduce using rule 100 (inOrIs -> inOperator .)
    LCCT            reduce using rule 100 (inOrIs -> inOperator .)
    IF              reduce using rule 100 (inOrIs -> inOperator .)
    RETURN          reduce using rule 100 (inOrIs -> inOperator .)
    RETURN_AT       reduce using rule 100 (inOrIs -> inOperator .)
    CONTINUE        reduce using rule 100 (inOrIs -> inOperator .)
    CONTINUE_AT     reduce using rule 100 (inOrIs -> inOperator .)
    BREAK           reduce using rule 100 (inOrIs -> inOperator .)
    BREAK_AT        reduce using rule 100 (inOrIs -> inOperator .)
    LCHAVE          reduce using rule 100 (inOrIs -> inOperator .)
    FUN             reduce using rule 100 (inOrIs -> inOperator .)


state 135

    (101) inOrIs -> isOperator .

    SUSPEND         reduce using rule 101 (inOrIs -> isOperator .)
    LPAREN          reduce using rule 101 (inOrIs -> isOperator .)
    ID              reduce using rule 101 (inOrIs -> isOperator .)
    CROSSINLINE     reduce using rule 101 (inOrIs -> isOperator .)
    IMPORT          reduce using rule 101 (inOrIs -> isOperator .)
    INIT            reduce using rule 101 (inOrIs -> isOperator .)
    NOINLINE        reduce using rule 101 (inOrIs -> isOperator .)
    OUT             reduce using rule 101 (inOrIs -> isOperator .)
    VARARG          reduce using rule 101 (inOrIs -> isOperator .)
    WHERE           reduce using rule 101 (inOrIs -> isOperator .)
    OPERATOR        reduce using rule 101 (inOrIs -> isOperator .)
    LITERAL_STRING  reduce using rule 101 (inOrIs -> isOperator .)
    NUMBER          reduce using rule 101 (inOrIs -> isOperator .)
    INCREMENTO      reduce using rule 101 (inOrIs -> isOperator .)
    DECREMENTO      reduce using rule 101 (inOrIs -> isOperator .)
    MINUS           reduce using rule 101 (inOrIs -> isOperator .)
    PLUS            reduce using rule 101 (inOrIs -> isOperator .)
    NOT             reduce using rule 101 (inOrIs -> isOperator .)
    COLONCOLON      reduce using rule 101 (inOrIs -> isOperator .)
    LCCT            reduce using rule 101 (inOrIs -> isOperator .)
    IF              reduce using rule 101 (inOrIs -> isOperator .)
    RETURN          reduce using rule 101 (inOrIs -> isOperator .)
    RETURN_AT       reduce using rule 101 (inOrIs -> isOperator .)
    CONTINUE        reduce using rule 101 (inOrIs -> isOperator .)
    CONTINUE_AT     reduce using rule 101 (inOrIs -> isOperator .)
    BREAK           reduce using rule 101 (inOrIs -> isOperator .)
    BREAK_AT        reduce using rule 101 (inOrIs -> isOperator .)
    LCHAVE          reduce using rule 101 (inOrIs -> isOperator .)
    FUN             reduce using rule 101 (inOrIs -> isOperator .)


state 136

    (247) inOperator -> IN .

    SUSPEND         reduce using rule 247 (inOperator -> IN .)
    LPAREN          reduce using rule 247 (inOperator -> IN .)
    ID              reduce using rule 247 (inOperator -> IN .)
    CROSSINLINE     reduce using rule 247 (inOperator -> IN .)
    IMPORT          reduce using rule 247 (inOperator -> IN .)
    INIT            reduce using rule 247 (inOperator -> IN .)
    NOINLINE        reduce using rule 247 (inOperator -> IN .)
    OUT             reduce using rule 247 (inOperator -> IN .)
    VARARG          reduce using rule 247 (inOperator -> IN .)
    WHERE           reduce using rule 247 (inOperator -> IN .)
    OPERATOR        reduce using rule 247 (inOperator -> IN .)
    LITERAL_STRING  reduce using rule 247 (inOperator -> IN .)
    NUMBER          reduce using rule 247 (inOperator -> IN .)
    INCREMENTO      reduce using rule 247 (inOperator -> IN .)
    DECREMENTO      reduce using rule 247 (inOperator -> IN .)
    MINUS           reduce using rule 247 (inOperator -> IN .)
    PLUS            reduce using rule 247 (inOperator -> IN .)
    NOT             reduce using rule 247 (inOperator -> IN .)
    COLONCOLON      reduce using rule 247 (inOperator -> IN .)
    LCCT            reduce using rule 247 (inOperator -> IN .)
    IF              reduce using rule 247 (inOperator -> IN .)
    RETURN          reduce using rule 247 (inOperator -> IN .)
    RETURN_AT       reduce using rule 247 (inOperator -> IN .)
    CONTINUE        reduce using rule 247 (inOperator -> IN .)
    CONTINUE_AT     reduce using rule 247 (inOperator -> IN .)
    BREAK           reduce using rule 247 (inOperator -> IN .)
    BREAK_AT        reduce using rule 247 (inOperator -> IN .)
    LCHAVE          reduce using rule 247 (inOperator -> IN .)
    FUN             reduce using rule 247 (inOperator -> IN .)


state 137

    (248) inOperator -> NOT_IN .

    SUSPEND         reduce using rule 248 (inOperator -> NOT_IN .)
    LPAREN          reduce using rule 248 (inOperator -> NOT_IN .)
    ID              reduce using rule 248 (inOperator -> NOT_IN .)
    CROSSINLINE     reduce using rule 248 (inOperator -> NOT_IN .)
    IMPORT          reduce using rule 248 (inOperator -> NOT_IN .)
    INIT            reduce using rule 248 (inOperator -> NOT_IN .)
    NOINLINE        reduce using rule 248 (inOperator -> NOT_IN .)
    OUT             reduce using rule 248 (inOperator -> NOT_IN .)
    VARARG          reduce using rule 248 (inOperator -> NOT_IN .)
    WHERE           reduce using rule 248 (inOperator -> NOT_IN .)
    OPERATOR        reduce using rule 248 (inOperator -> NOT_IN .)
    LITERAL_STRING  reduce using rule 248 (inOperator -> NOT_IN .)
    NUMBER          reduce using rule 248 (inOperator -> NOT_IN .)
    INCREMENTO      reduce using rule 248 (inOperator -> NOT_IN .)
    DECREMENTO      reduce using rule 248 (inOperator -> NOT_IN .)
    MINUS           reduce using rule 248 (inOperator -> NOT_IN .)
    PLUS            reduce using rule 248 (inOperator -> NOT_IN .)
    NOT             reduce using rule 248 (inOperator -> NOT_IN .)
    COLONCOLON      reduce using rule 248 (inOperator -> NOT_IN .)
    LCCT            reduce using rule 248 (inOperator -> NOT_IN .)
    IF              reduce using rule 248 (inOperator -> NOT_IN .)
    RETURN          reduce using rule 248 (inOperator -> NOT_IN .)
    RETURN_AT       reduce using rule 248 (inOperator -> NOT_IN .)
    CONTINUE        reduce using rule 248 (inOperator -> NOT_IN .)
    CONTINUE_AT     reduce using rule 248 (inOperator -> NOT_IN .)
    BREAK           reduce using rule 248 (inOperator -> NOT_IN .)
    BREAK_AT        reduce using rule 248 (inOperator -> NOT_IN .)
    LCHAVE          reduce using rule 248 (inOperator -> NOT_IN .)
    FUN             reduce using rule 248 (inOperator -> NOT_IN .)


state 138

    (249) isOperator -> IS .

    SUSPEND         reduce using rule 249 (isOperator -> IS .)
    LPAREN          reduce using rule 249 (isOperator -> IS .)
    ID              reduce using rule 249 (isOperator -> IS .)
    CROSSINLINE     reduce using rule 249 (isOperator -> IS .)
    IMPORT          reduce using rule 249 (isOperator -> IS .)
    INIT            reduce using rule 249 (isOperator -> IS .)
    NOINLINE        reduce using rule 249 (isOperator -> IS .)
    OUT             reduce using rule 249 (isOperator -> IS .)
    VARARG          reduce using rule 249 (isOperator -> IS .)
    WHERE           reduce using rule 249 (isOperator -> IS .)
    OPERATOR        reduce using rule 249 (isOperator -> IS .)
    LITERAL_STRING  reduce using rule 249 (isOperator -> IS .)
    NUMBER          reduce using rule 249 (isOperator -> IS .)
    INCREMENTO      reduce using rule 249 (isOperator -> IS .)
    DECREMENTO      reduce using rule 249 (isOperator -> IS .)
    MINUS           reduce using rule 249 (isOperator -> IS .)
    PLUS            reduce using rule 249 (isOperator -> IS .)
    NOT             reduce using rule 249 (isOperator -> IS .)
    COLONCOLON      reduce using rule 249 (isOperator -> IS .)
    LCCT            reduce using rule 249 (isOperator -> IS .)
    IF              reduce using rule 249 (isOperator -> IS .)
    RETURN          reduce using rule 249 (isOperator -> IS .)
    RETURN_AT       reduce using rule 249 (isOperator -> IS .)
    CONTINUE        reduce using rule 249 (isOperator -> IS .)
    CONTINUE_AT     reduce using rule 249 (isOperator -> IS .)
    BREAK           reduce using rule 249 (isOperator -> IS .)
    BREAK_AT        reduce using rule 249 (isOperator -> IS .)
    LCHAVE          reduce using rule 249 (isOperator -> IS .)
    FUN             reduce using rule 249 (isOperator -> IS .)


state 139

    (250) isOperator -> NOT_IS .

    SUSPEND         reduce using rule 250 (isOperator -> NOT_IS .)
    LPAREN          reduce using rule 250 (isOperator -> NOT_IS .)
    ID              reduce using rule 250 (isOperator -> NOT_IS .)
    CROSSINLINE     reduce using rule 250 (isOperator -> NOT_IS .)
    IMPORT          reduce using rule 250 (isOperator -> NOT_IS .)
    INIT            reduce using rule 250 (isOperator -> NOT_IS .)
    NOINLINE        reduce using rule 250 (isOperator -> NOT_IS .)
    OUT             reduce using rule 250 (isOperator -> NOT_IS .)
    VARARG          reduce using rule 250 (isOperator -> NOT_IS .)
    WHERE           reduce using rule 250 (isOperator -> NOT_IS .)
    OPERATOR        reduce using rule 250 (isOperator -> NOT_IS .)
    LITERAL_STRING  reduce using rule 250 (isOperator -> NOT_IS .)
    NUMBER          reduce using rule 250 (isOperator -> NOT_IS .)
    INCREMENTO      reduce using rule 250 (isOperator -> NOT_IS .)
    DECREMENTO      reduce using rule 250 (isOperator -> NOT_IS .)
    MINUS           reduce using rule 250 (isOperator -> NOT_IS .)
    PLUS            reduce using rule 250 (isOperator -> NOT_IS .)
    NOT             reduce using rule 250 (isOperator -> NOT_IS .)
    COLONCOLON      reduce using rule 250 (isOperator -> NOT_IS .)
    LCCT            reduce using rule 250 (isOperator -> NOT_IS .)
    IF              reduce using rule 250 (isOperator -> NOT_IS .)
    RETURN          reduce using rule 250 (isOperator -> NOT_IS .)
    RETURN_AT       reduce using rule 250 (isOperator -> NOT_IS .)
    CONTINUE        reduce using rule 250 (isOperator -> NOT_IS .)
    CONTINUE_AT     reduce using rule 250 (isOperator -> NOT_IS .)
    BREAK           reduce using rule 250 (isOperator -> NOT_IS .)
    BREAK_AT        reduce using rule 250 (isOperator -> NOT_IS .)
    LCHAVE          reduce using rule 250 (isOperator -> NOT_IS .)
    FUN             reduce using rule 250 (isOperator -> NOT_IS .)


state 140

    (105) elvisExpression -> infixFunctionCall ELVIS . elvisExpression
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    infixFunctionCall              shift and go to state 36
    elvisExpression                shift and go to state 253
    rangeExpression                shift and go to state 37
    simpleIdentifier               shift and go to state 38
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 141

    (107) infixFunctionCall -> rangeExpression simpleIdentifier . infixFunctionCall
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    rangeExpression                shift and go to state 37
    simpleIdentifier               shift and go to state 38
    infixFunctionCall              shift and go to state 254
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 142

    (109) rangeExpression -> additiveExpression PONTOPONTO . rangeExpression
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    additiveExpression             shift and go to state 39
    rangeExpression                shift and go to state 255
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    simpleIdentifier               shift and go to state 38
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 143

    (111) additiveExpression -> multiplicativeExpression additiveOperator . additiveExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    multiplicativeExpression       shift and go to state 40
    additiveExpression             shift and go to state 256
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    simpleIdentifier               shift and go to state 38
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 144

    (251) additiveOperator -> PLUS .

    LITERAL_STRING  reduce using rule 251 (additiveOperator -> PLUS .)
    NUMBER          reduce using rule 251 (additiveOperator -> PLUS .)
    INCREMENTO      reduce using rule 251 (additiveOperator -> PLUS .)
    DECREMENTO      reduce using rule 251 (additiveOperator -> PLUS .)
    MINUS           reduce using rule 251 (additiveOperator -> PLUS .)
    PLUS            reduce using rule 251 (additiveOperator -> PLUS .)
    NOT             reduce using rule 251 (additiveOperator -> PLUS .)
    LPAREN          reduce using rule 251 (additiveOperator -> PLUS .)
    ID              reduce using rule 251 (additiveOperator -> PLUS .)
    CROSSINLINE     reduce using rule 251 (additiveOperator -> PLUS .)
    IMPORT          reduce using rule 251 (additiveOperator -> PLUS .)
    INIT            reduce using rule 251 (additiveOperator -> PLUS .)
    NOINLINE        reduce using rule 251 (additiveOperator -> PLUS .)
    OUT             reduce using rule 251 (additiveOperator -> PLUS .)
    VARARG          reduce using rule 251 (additiveOperator -> PLUS .)
    WHERE           reduce using rule 251 (additiveOperator -> PLUS .)
    OPERATOR        reduce using rule 251 (additiveOperator -> PLUS .)
    COLONCOLON      reduce using rule 251 (additiveOperator -> PLUS .)
    LCCT            reduce using rule 251 (additiveOperator -> PLUS .)
    IF              reduce using rule 251 (additiveOperator -> PLUS .)
    RETURN          reduce using rule 251 (additiveOperator -> PLUS .)
    RETURN_AT       reduce using rule 251 (additiveOperator -> PLUS .)
    CONTINUE        reduce using rule 251 (additiveOperator -> PLUS .)
    CONTINUE_AT     reduce using rule 251 (additiveOperator -> PLUS .)
    BREAK           reduce using rule 251 (additiveOperator -> PLUS .)
    BREAK_AT        reduce using rule 251 (additiveOperator -> PLUS .)
    LCHAVE          reduce using rule 251 (additiveOperator -> PLUS .)
    FUN             reduce using rule 251 (additiveOperator -> PLUS .)
    SUSPEND         reduce using rule 251 (additiveOperator -> PLUS .)


state 145

    (252) additiveOperator -> MINUS .

    LITERAL_STRING  reduce using rule 252 (additiveOperator -> MINUS .)
    NUMBER          reduce using rule 252 (additiveOperator -> MINUS .)
    INCREMENTO      reduce using rule 252 (additiveOperator -> MINUS .)
    DECREMENTO      reduce using rule 252 (additiveOperator -> MINUS .)
    MINUS           reduce using rule 252 (additiveOperator -> MINUS .)
    PLUS            reduce using rule 252 (additiveOperator -> MINUS .)
    NOT             reduce using rule 252 (additiveOperator -> MINUS .)
    LPAREN          reduce using rule 252 (additiveOperator -> MINUS .)
    ID              reduce using rule 252 (additiveOperator -> MINUS .)
    CROSSINLINE     reduce using rule 252 (additiveOperator -> MINUS .)
    IMPORT          reduce using rule 252 (additiveOperator -> MINUS .)
    INIT            reduce using rule 252 (additiveOperator -> MINUS .)
    NOINLINE        reduce using rule 252 (additiveOperator -> MINUS .)
    OUT             reduce using rule 252 (additiveOperator -> MINUS .)
    VARARG          reduce using rule 252 (additiveOperator -> MINUS .)
    WHERE           reduce using rule 252 (additiveOperator -> MINUS .)
    OPERATOR        reduce using rule 252 (additiveOperator -> MINUS .)
    COLONCOLON      reduce using rule 252 (additiveOperator -> MINUS .)
    LCCT            reduce using rule 252 (additiveOperator -> MINUS .)
    IF              reduce using rule 252 (additiveOperator -> MINUS .)
    RETURN          reduce using rule 252 (additiveOperator -> MINUS .)
    RETURN_AT       reduce using rule 252 (additiveOperator -> MINUS .)
    CONTINUE        reduce using rule 252 (additiveOperator -> MINUS .)
    CONTINUE_AT     reduce using rule 252 (additiveOperator -> MINUS .)
    BREAK           reduce using rule 252 (additiveOperator -> MINUS .)
    BREAK_AT        reduce using rule 252 (additiveOperator -> MINUS .)
    LCHAVE          reduce using rule 252 (additiveOperator -> MINUS .)
    FUN             reduce using rule 252 (additiveOperator -> MINUS .)
    SUSPEND         reduce using rule 252 (additiveOperator -> MINUS .)


state 146

    (113) multiplicativeExpression -> asExpression multiplicativeOperator . multiplicativeExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    asExpression                   shift and go to state 41
    multiplicativeExpression       shift and go to state 257
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    simpleIdentifier               shift and go to state 38
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 147

    (253) multiplicativeOperator -> MULT .

    LITERAL_STRING  reduce using rule 253 (multiplicativeOperator -> MULT .)
    NUMBER          reduce using rule 253 (multiplicativeOperator -> MULT .)
    INCREMENTO      reduce using rule 253 (multiplicativeOperator -> MULT .)
    DECREMENTO      reduce using rule 253 (multiplicativeOperator -> MULT .)
    MINUS           reduce using rule 253 (multiplicativeOperator -> MULT .)
    PLUS            reduce using rule 253 (multiplicativeOperator -> MULT .)
    NOT             reduce using rule 253 (multiplicativeOperator -> MULT .)
    LPAREN          reduce using rule 253 (multiplicativeOperator -> MULT .)
    ID              reduce using rule 253 (multiplicativeOperator -> MULT .)
    CROSSINLINE     reduce using rule 253 (multiplicativeOperator -> MULT .)
    IMPORT          reduce using rule 253 (multiplicativeOperator -> MULT .)
    INIT            reduce using rule 253 (multiplicativeOperator -> MULT .)
    NOINLINE        reduce using rule 253 (multiplicativeOperator -> MULT .)
    OUT             reduce using rule 253 (multiplicativeOperator -> MULT .)
    VARARG          reduce using rule 253 (multiplicativeOperator -> MULT .)
    WHERE           reduce using rule 253 (multiplicativeOperator -> MULT .)
    OPERATOR        reduce using rule 253 (multiplicativeOperator -> MULT .)
    COLONCOLON      reduce using rule 253 (multiplicativeOperator -> MULT .)
    LCCT            reduce using rule 253 (multiplicativeOperator -> MULT .)
    IF              reduce using rule 253 (multiplicativeOperator -> MULT .)
    RETURN          reduce using rule 253 (multiplicativeOperator -> MULT .)
    RETURN_AT       reduce using rule 253 (multiplicativeOperator -> MULT .)
    CONTINUE        reduce using rule 253 (multiplicativeOperator -> MULT .)
    CONTINUE_AT     reduce using rule 253 (multiplicativeOperator -> MULT .)
    BREAK           reduce using rule 253 (multiplicativeOperator -> MULT .)
    BREAK_AT        reduce using rule 253 (multiplicativeOperator -> MULT .)
    LCHAVE          reduce using rule 253 (multiplicativeOperator -> MULT .)
    FUN             reduce using rule 253 (multiplicativeOperator -> MULT .)
    SUSPEND         reduce using rule 253 (multiplicativeOperator -> MULT .)


state 148

    (254) multiplicativeOperator -> DIVIDE .

    LITERAL_STRING  reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    NUMBER          reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    INCREMENTO      reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    DECREMENTO      reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    MINUS           reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    PLUS            reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    NOT             reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    LPAREN          reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    ID              reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    CROSSINLINE     reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    IMPORT          reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    INIT            reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    NOINLINE        reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    OUT             reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    VARARG          reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    WHERE           reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    OPERATOR        reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    COLONCOLON      reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    LCCT            reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    IF              reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    RETURN          reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    RETURN_AT       reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    CONTINUE        reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    CONTINUE_AT     reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    BREAK           reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    BREAK_AT        reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    LCHAVE          reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    FUN             reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    SUSPEND         reduce using rule 254 (multiplicativeOperator -> DIVIDE .)


state 149

    (255) multiplicativeOperator -> MOD .

    LITERAL_STRING  reduce using rule 255 (multiplicativeOperator -> MOD .)
    NUMBER          reduce using rule 255 (multiplicativeOperator -> MOD .)
    INCREMENTO      reduce using rule 255 (multiplicativeOperator -> MOD .)
    DECREMENTO      reduce using rule 255 (multiplicativeOperator -> MOD .)
    MINUS           reduce using rule 255 (multiplicativeOperator -> MOD .)
    PLUS            reduce using rule 255 (multiplicativeOperator -> MOD .)
    NOT             reduce using rule 255 (multiplicativeOperator -> MOD .)
    LPAREN          reduce using rule 255 (multiplicativeOperator -> MOD .)
    ID              reduce using rule 255 (multiplicativeOperator -> MOD .)
    CROSSINLINE     reduce using rule 255 (multiplicativeOperator -> MOD .)
    IMPORT          reduce using rule 255 (multiplicativeOperator -> MOD .)
    INIT            reduce using rule 255 (multiplicativeOperator -> MOD .)
    NOINLINE        reduce using rule 255 (multiplicativeOperator -> MOD .)
    OUT             reduce using rule 255 (multiplicativeOperator -> MOD .)
    VARARG          reduce using rule 255 (multiplicativeOperator -> MOD .)
    WHERE           reduce using rule 255 (multiplicativeOperator -> MOD .)
    OPERATOR        reduce using rule 255 (multiplicativeOperator -> MOD .)
    COLONCOLON      reduce using rule 255 (multiplicativeOperator -> MOD .)
    LCCT            reduce using rule 255 (multiplicativeOperator -> MOD .)
    IF              reduce using rule 255 (multiplicativeOperator -> MOD .)
    RETURN          reduce using rule 255 (multiplicativeOperator -> MOD .)
    RETURN_AT       reduce using rule 255 (multiplicativeOperator -> MOD .)
    CONTINUE        reduce using rule 255 (multiplicativeOperator -> MOD .)
    CONTINUE_AT     reduce using rule 255 (multiplicativeOperator -> MOD .)
    BREAK           reduce using rule 255 (multiplicativeOperator -> MOD .)
    BREAK_AT        reduce using rule 255 (multiplicativeOperator -> MOD .)
    LCHAVE          reduce using rule 255 (multiplicativeOperator -> MOD .)
    FUN             reduce using rule 255 (multiplicativeOperator -> MOD .)
    SUSPEND         reduce using rule 255 (multiplicativeOperator -> MOD .)


state 150

    (115) asExpression -> prefixUnaryExpression asOperator . type
    (35) type -> . typeModifiers optype
    (36) type -> . optype
    (40) typeModifiers -> . typeModifier
    (41) typeModifiers -> . typeModifier typeModifiers
    (37) optype -> . parenthesizedType
    (38) optype -> . functionType
    (39) optype -> . userType
    (42) typeModifier -> . SUSPEND
    (60) parenthesizedType -> . LPAREN type RPAREN
    (53) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (54) functionType -> . functionTypeParameters SETA type
    (46) userType -> . simpleUserType
    (61) receiverType -> . typeModifier parenthesizedType
    (59) functionTypeParameters -> . LPAREN parameterOrType parameterOrTypeRecursive RPAREN
    (47) simpleUserType -> . simpleIdentifier typeArguments
    (48) simpleUserType -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    SUSPEND         shift and go to state 78
    LPAREN          shift and go to state 86
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    type                           shift and go to state 258
    typeModifiers                  shift and go to state 80
    optype                         shift and go to state 81
    typeModifier                   shift and go to state 82
    parenthesizedType              shift and go to state 83
    functionType                   shift and go to state 84
    userType                       shift and go to state 85
    receiverType                   shift and go to state 87
    functionTypeParameters         shift and go to state 88
    simpleUserType                 shift and go to state 89
    simpleIdentifier               shift and go to state 90

state 151

    (256) asOperator -> AS .
    (257) asOperator -> AS . asOperator
    (256) asOperator -> . AS
    (257) asOperator -> . AS asOperator

    SUSPEND         reduce using rule 256 (asOperator -> AS .)
    LPAREN          reduce using rule 256 (asOperator -> AS .)
    ID              reduce using rule 256 (asOperator -> AS .)
    CROSSINLINE     reduce using rule 256 (asOperator -> AS .)
    IMPORT          reduce using rule 256 (asOperator -> AS .)
    INIT            reduce using rule 256 (asOperator -> AS .)
    NOINLINE        reduce using rule 256 (asOperator -> AS .)
    OUT             reduce using rule 256 (asOperator -> AS .)
    VARARG          reduce using rule 256 (asOperator -> AS .)
    WHERE           reduce using rule 256 (asOperator -> AS .)
    OPERATOR        reduce using rule 256 (asOperator -> AS .)
    AS              shift and go to state 151

    asOperator                     shift and go to state 259

state 152

    (116) prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .

    FUN             reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    $end            reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    ID              reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    FOR             reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    WHILE           reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    DO              reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    VAR             reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    VAL             reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    CROSSINLINE     reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    IMPORT          reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    INIT            reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    NOINLINE        reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    OUT             reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    VARARG          reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    WHERE           reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    OPERATOR        reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    LPAREN          reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    LITERAL_STRING  reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    NUMBER          reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    COLONCOLON      reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    LCCT            reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    IF              reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    RETURN          reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    RETURN_AT       reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    CONTINUE        reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    CONTINUE_AT     reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    BREAK           reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    BREAK_AT        reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    LCHAVE          reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    INCREMENTO      reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    DECREMENTO      reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MINUS           reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    PLUS            reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    NOT             reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    SUSPEND         reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    RCHAVE          reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    PV              reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    ELSE            reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MENOR           reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    PONTO           reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    AS              reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MULT            reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    DIVIDE          reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MOD             reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    PONTOPONTO      reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    ELVIS           reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    IN              reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    NOT_IN          reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    IS              reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    NOT_IS          reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MAIOR           reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MENORIGUAL      reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MAIORIGUAL      reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    DIFERENTE       reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    IDENTIDADE      reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    IGUALDADE       reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    SEMIDENTIDADE   reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    AND             reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    OR              reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MAISIGUAL       reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MENOSIGUAL      reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MULTIGUAL       reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    DIVIGUAL        reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MODIGUAL        reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    RPAREN          reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    COMMA           reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    RCCT            reduce using rule 116 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)


state 153

    (165) primaryExpression -> simpleIdentifier .

    FUN             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    $end            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    ID              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    FOR             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    WHILE           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    DO              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    VAR             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    VAL             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IMPORT          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    INIT            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NOINLINE        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    OUT             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    VARARG          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    WHERE           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    OPERATOR        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    LPAREN          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NUMBER          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    COLONCOLON      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    LCCT            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IF              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    RETURN          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    RETURN_AT       reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    CONTINUE        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    BREAK           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    BREAK_AT        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    LCHAVE          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    INCREMENTO      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    DECREMENTO      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MINUS           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    PLUS            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NOT             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    SUSPEND         reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    RCHAVE          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    PV              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    ELSE            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MENOR           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    PONTO           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    AS              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MULT            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    DIVIDE          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MOD             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    ELVIS           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IN              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NOT_IN          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IS              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NOT_IS          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MAIOR           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    DIFERENTE       reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IGUALDADE       reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    AND             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    OR              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MAISIGUAL       reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MENOSIGUAL      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MODIGUAL        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    RPAREN          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    COMMA           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    RCCT            reduce using rule 165 (primaryExpression -> simpleIdentifier .)


state 154

    (121) prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .

    LITERAL_STRING  reduce using rule 121 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    NUMBER          reduce using rule 121 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    LPAREN          reduce using rule 121 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    ID              reduce using rule 121 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    CROSSINLINE     reduce using rule 121 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    IMPORT          reduce using rule 121 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    INIT            reduce using rule 121 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    NOINLINE        reduce using rule 121 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    OUT             reduce using rule 121 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    VARARG          reduce using rule 121 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    WHERE           reduce using rule 121 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    OPERATOR        reduce using rule 121 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    COLONCOLON      reduce using rule 121 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    LCCT            reduce using rule 121 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    IF              reduce using rule 121 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    RETURN          reduce using rule 121 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    RETURN_AT       reduce using rule 121 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    CONTINUE        reduce using rule 121 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    CONTINUE_AT     reduce using rule 121 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    BREAK           reduce using rule 121 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    BREAK_AT        reduce using rule 121 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    LCHAVE          reduce using rule 121 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    FUN             reduce using rule 121 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    SUSPEND         reduce using rule 121 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)


state 155

    (268) label -> simpleIdentifier .

    INCREMENTO      reduce using rule 268 (label -> simpleIdentifier .)
    DECREMENTO      reduce using rule 268 (label -> simpleIdentifier .)
    MINUS           reduce using rule 268 (label -> simpleIdentifier .)
    PLUS            reduce using rule 268 (label -> simpleIdentifier .)
    NOT             reduce using rule 268 (label -> simpleIdentifier .)
    ID              reduce using rule 268 (label -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 268 (label -> simpleIdentifier .)
    IMPORT          reduce using rule 268 (label -> simpleIdentifier .)
    INIT            reduce using rule 268 (label -> simpleIdentifier .)
    NOINLINE        reduce using rule 268 (label -> simpleIdentifier .)
    OUT             reduce using rule 268 (label -> simpleIdentifier .)
    VARARG          reduce using rule 268 (label -> simpleIdentifier .)
    WHERE           reduce using rule 268 (label -> simpleIdentifier .)
    OPERATOR        reduce using rule 268 (label -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 268 (label -> simpleIdentifier .)
    NUMBER          reduce using rule 268 (label -> simpleIdentifier .)
    LPAREN          reduce using rule 268 (label -> simpleIdentifier .)
    COLONCOLON      reduce using rule 268 (label -> simpleIdentifier .)
    LCCT            reduce using rule 268 (label -> simpleIdentifier .)
    IF              reduce using rule 268 (label -> simpleIdentifier .)
    RETURN          reduce using rule 268 (label -> simpleIdentifier .)
    RETURN_AT       reduce using rule 268 (label -> simpleIdentifier .)
    CONTINUE        reduce using rule 268 (label -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 268 (label -> simpleIdentifier .)
    BREAK           reduce using rule 268 (label -> simpleIdentifier .)
    BREAK_AT        reduce using rule 268 (label -> simpleIdentifier .)
    LCHAVE          reduce using rule 268 (label -> simpleIdentifier .)
    FUN             reduce using rule 268 (label -> simpleIdentifier .)
    SUSPEND         reduce using rule 268 (label -> simpleIdentifier .)


state 156

    (125) postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .

    FUN             reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    $end            reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    ID              reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    FOR             reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    WHILE           reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    DO              reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    VAR             reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    VAL             reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    CROSSINLINE     reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    IMPORT          reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    INIT            reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    NOINLINE        reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    OUT             reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    VARARG          reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    WHERE           reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    OPERATOR        reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    LPAREN          reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    LITERAL_STRING  reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    NUMBER          reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    COLONCOLON      reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    LCCT            reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    IF              reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    RETURN          reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    RETURN_AT       reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    CONTINUE        reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    CONTINUE_AT     reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    BREAK           reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    BREAK_AT        reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    LCHAVE          reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    INCREMENTO      reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    DECREMENTO      reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MINUS           reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    PLUS            reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    NOT             reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    SUSPEND         reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    RCHAVE          reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    PV              reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    ELSE            reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MENOR           reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    PONTO           reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    AS              reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MULT            reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    DIVIDE          reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MOD             reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    PONTOPONTO      reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    ELVIS           reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    IN              reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    NOT_IN          reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    IS              reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    NOT_IS          reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MAIOR           reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MENORIGUAL      reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MAIORIGUAL      reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    DIFERENTE       reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    IDENTIDADE      reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    IGUALDADE       reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    SEMIDENTIDADE   reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    AND             reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    OR              reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MAISIGUAL       reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MENOSIGUAL      reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MULTIGUAL       reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    DIVIGUAL        reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MODIGUAL        reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    RPAREN          reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    COMMA           reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    RCCT            reduce using rule 125 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)


state 157

    (122) postfixUnaryExpressionRecursive -> postfixUnarySuffix .
    (123) postfixUnaryExpressionRecursive -> postfixUnarySuffix . postfixUnaryExpressionRecursive
    (122) postfixUnaryExpressionRecursive -> . postfixUnarySuffix
    (123) postfixUnaryExpressionRecursive -> . postfixUnarySuffix postfixUnaryExpressionRecursive
    (126) postfixUnarySuffix -> . postfixUnaryOperator
    (127) postfixUnarySuffix -> . typeArguments
    (128) postfixUnarySuffix -> . callSuffix
    (129) postfixUnarySuffix -> . indexingSuffix
    (130) postfixUnarySuffix -> . navigationSuffix
    (263) postfixUnaryOperator -> . INCREMENTO
    (264) postfixUnaryOperator -> . DECREMENTO
    (153) typeArguments -> . MENOR typeArgumentsRecursive MAIOR
    (154) typeArguments -> . MENOR MAIOR
    (147) callSuffix -> . typeArguments valueArguments annotatedLambda
    (148) callSuffix -> . typeArguments valueArguments
    (149) callSuffix -> . annotatedLambda
    (150) callSuffix -> . valueArguments annotatedLambda
    (151) callSuffix -> . valueArguments
    (141) indexingSuffix -> . LCCT indexingSuffixRecursive RCCT
    (142) indexingSuffix -> . LCCT RCCT
    (145) navigationSuffix -> . memberAccessOperator simpleIdentifier CLASS
    (146) navigationSuffix -> . memberAccessOperator parenthesizedExpression CLASS
    (152) annotatedLambda -> . lambdaLiteral
    (159) valueArguments -> . LPAREN RPAREN
    (160) valueArguments -> . LPAREN valueArgumentsRecursive RPAREN
    (265) memberAccessOperator -> . safeNav
    (266) memberAccessOperator -> . COLONCOLON
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (267) safeNav -> . PONTO

  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for COLONCOLON resolved as shift
  ! shift/reduce conflict for LCHAVE resolved as shift
  ! shift/reduce conflict for PONTO resolved as shift
    FUN             reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    $end            reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    ID              reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    FOR             reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    WHILE           reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    DO              reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    VAR             reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    VAL             reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    CROSSINLINE     reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    IMPORT          reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    INIT            reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    NOINLINE        reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    OUT             reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    VARARG          reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    WHERE           reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    OPERATOR        reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    LITERAL_STRING  reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    NUMBER          reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    IF              reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    RETURN          reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    RETURN_AT       reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    CONTINUE        reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    CONTINUE_AT     reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    BREAK           reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    BREAK_AT        reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MINUS           reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    PLUS            reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    NOT             reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    SUSPEND         reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    RCHAVE          reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    PV              reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    ELSE            reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    AS              reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MULT            reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    DIVIDE          reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MOD             reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    PONTOPONTO      reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    ELVIS           reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    IN              reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    NOT_IN          reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    IS              reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    NOT_IS          reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MAIOR           reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MENORIGUAL      reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MAIORIGUAL      reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    DIFERENTE       reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    IDENTIDADE      reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    IGUALDADE       reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    SEMIDENTIDADE   reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    AND             reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    OR              reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MAISIGUAL       reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MENOSIGUAL      reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MULTIGUAL       reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    DIVIGUAL        reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MODIGUAL        reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    RPAREN          reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    COMMA           reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    RCCT            reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    INCREMENTO      shift and go to state 163
    DECREMENTO      shift and go to state 164
    MENOR           shift and go to state 165
    LCCT            shift and go to state 168
    LPAREN          shift and go to state 171
    COLONCOLON      shift and go to state 173
    LCHAVE          shift and go to state 76
    PONTO           shift and go to state 174

  ! LPAREN          [ reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .) ]
  ! COLONCOLON      [ reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .) ]
  ! LCCT            [ reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .) ]
  ! LCHAVE          [ reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .) ]
  ! INCREMENTO      [ reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .) ]
  ! DECREMENTO      [ reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .) ]
  ! MENOR           [ reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .) ]
  ! PONTO           [ reduce using rule 122 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .) ]

    postfixUnarySuffix             shift and go to state 157
    postfixUnaryExpressionRecursive shift and go to state 260
    postfixUnaryOperator           shift and go to state 158
    typeArguments                  shift and go to state 159
    callSuffix                     shift and go to state 160
    indexingSuffix                 shift and go to state 161
    navigationSuffix               shift and go to state 162
    valueArguments                 shift and go to state 166
    annotatedLambda                shift and go to state 167
    memberAccessOperator           shift and go to state 169
    lambdaLiteral                  shift and go to state 170
    safeNav                        shift and go to state 172

state 158

    (126) postfixUnarySuffix -> postfixUnaryOperator .

    INCREMENTO      reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    DECREMENTO      reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    MENOR           reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    LCCT            reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    LPAREN          reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    COLONCOLON      reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    LCHAVE          reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    PONTO           reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    FUN             reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    $end            reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    ID              reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    FOR             reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    WHILE           reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    DO              reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    VAR             reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    VAL             reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    CROSSINLINE     reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    IMPORT          reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    INIT            reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    NOINLINE        reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    OUT             reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    VARARG          reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    WHERE           reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    OPERATOR        reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    LITERAL_STRING  reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    NUMBER          reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    IF              reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    RETURN          reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    RETURN_AT       reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    CONTINUE        reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    CONTINUE_AT     reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    BREAK           reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    BREAK_AT        reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    MINUS           reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    PLUS            reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    NOT             reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    SUSPEND         reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    RCHAVE          reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    PV              reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    ELSE            reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    AS              reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    MULT            reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    DIVIDE          reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    MOD             reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    PONTOPONTO      reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    ELVIS           reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    IN              reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    NOT_IN          reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    IS              reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    NOT_IS          reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    MAIOR           reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    MENORIGUAL      reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    MAIORIGUAL      reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    DIFERENTE       reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    IDENTIDADE      reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    IGUALDADE       reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    SEMIDENTIDADE   reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    AND             reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    OR              reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    MAISIGUAL       reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    MENOSIGUAL      reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    MULTIGUAL       reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    DIVIGUAL        reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    MODIGUAL        reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    RPAREN          reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    COMMA           reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)
    RCCT            reduce using rule 126 (postfixUnarySuffix -> postfixUnaryOperator .)


state 159

    (127) postfixUnarySuffix -> typeArguments .
    (147) callSuffix -> typeArguments . valueArguments annotatedLambda
    (148) callSuffix -> typeArguments . valueArguments
    (159) valueArguments -> . LPAREN RPAREN
    (160) valueArguments -> . LPAREN valueArgumentsRecursive RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    INCREMENTO      reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    DECREMENTO      reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    MENOR           reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    LCCT            reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    COLONCOLON      reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    LCHAVE          reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    PONTO           reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    FUN             reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    $end            reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    ID              reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    FOR             reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    WHILE           reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    DO              reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    VAR             reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    VAL             reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    CROSSINLINE     reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    IMPORT          reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    INIT            reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    NOINLINE        reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    OUT             reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    VARARG          reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    WHERE           reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    OPERATOR        reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    LITERAL_STRING  reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    NUMBER          reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    IF              reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    RETURN          reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    RETURN_AT       reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    CONTINUE        reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    CONTINUE_AT     reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    BREAK           reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    BREAK_AT        reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    MINUS           reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    PLUS            reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    NOT             reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    SUSPEND         reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    RCHAVE          reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    PV              reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    ELSE            reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    AS              reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    MULT            reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    DIVIDE          reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    MOD             reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    PONTOPONTO      reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    ELVIS           reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    IN              reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    NOT_IN          reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    IS              reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    NOT_IS          reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    MAIOR           reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    MENORIGUAL      reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    MAIORIGUAL      reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    DIFERENTE       reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    IDENTIDADE      reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    IGUALDADE       reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    SEMIDENTIDADE   reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    AND             reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    OR              reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    MAISIGUAL       reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    MENOSIGUAL      reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    MULTIGUAL       reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    DIVIGUAL        reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    MODIGUAL        reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    RPAREN          reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    COMMA           reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    RCCT            reduce using rule 127 (postfixUnarySuffix -> typeArguments .)
    LPAREN          shift and go to state 171

  ! LPAREN          [ reduce using rule 127 (postfixUnarySuffix -> typeArguments .) ]

    valueArguments                 shift and go to state 261

state 160

    (128) postfixUnarySuffix -> callSuffix .

    INCREMENTO      reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    DECREMENTO      reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    MENOR           reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    LCCT            reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    LPAREN          reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    COLONCOLON      reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    LCHAVE          reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    PONTO           reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    FUN             reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    $end            reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    ID              reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    FOR             reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    WHILE           reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    DO              reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    VAR             reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    VAL             reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    CROSSINLINE     reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    IMPORT          reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    INIT            reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    NOINLINE        reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    OUT             reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    VARARG          reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    WHERE           reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    OPERATOR        reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    LITERAL_STRING  reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    NUMBER          reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    IF              reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    RETURN          reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    RETURN_AT       reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    CONTINUE        reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    CONTINUE_AT     reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    BREAK           reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    BREAK_AT        reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    MINUS           reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    PLUS            reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    NOT             reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    SUSPEND         reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    RCHAVE          reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    PV              reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    ELSE            reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    AS              reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    MULT            reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    DIVIDE          reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    MOD             reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    PONTOPONTO      reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    ELVIS           reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    IN              reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    NOT_IN          reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    IS              reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    NOT_IS          reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    MAIOR           reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    MENORIGUAL      reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    MAIORIGUAL      reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    DIFERENTE       reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    IDENTIDADE      reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    IGUALDADE       reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    SEMIDENTIDADE   reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    AND             reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    OR              reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    MAISIGUAL       reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    MENOSIGUAL      reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    MULTIGUAL       reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    DIVIGUAL        reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    MODIGUAL        reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    RPAREN          reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    COMMA           reduce using rule 128 (postfixUnarySuffix -> callSuffix .)
    RCCT            reduce using rule 128 (postfixUnarySuffix -> callSuffix .)


state 161

    (129) postfixUnarySuffix -> indexingSuffix .

    INCREMENTO      reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    DECREMENTO      reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    MENOR           reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    LCCT            reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    LPAREN          reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    COLONCOLON      reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    LCHAVE          reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    PONTO           reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    FUN             reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    $end            reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    ID              reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    FOR             reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    WHILE           reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    DO              reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    VAR             reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    VAL             reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    CROSSINLINE     reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    IMPORT          reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    INIT            reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    NOINLINE        reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    OUT             reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    VARARG          reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    WHERE           reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    OPERATOR        reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    LITERAL_STRING  reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    NUMBER          reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    IF              reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    RETURN          reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    RETURN_AT       reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    CONTINUE        reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    CONTINUE_AT     reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    BREAK           reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    BREAK_AT        reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    MINUS           reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    PLUS            reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    NOT             reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    SUSPEND         reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    RCHAVE          reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    PV              reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    ELSE            reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    AS              reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    MULT            reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    DIVIDE          reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    MOD             reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    PONTOPONTO      reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    ELVIS           reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    IN              reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    NOT_IN          reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    IS              reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    NOT_IS          reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    MAIOR           reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    MENORIGUAL      reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    MAIORIGUAL      reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    DIFERENTE       reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    IDENTIDADE      reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    IGUALDADE       reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    SEMIDENTIDADE   reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    AND             reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    OR              reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    MAISIGUAL       reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    MENOSIGUAL      reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    MULTIGUAL       reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    DIVIGUAL        reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    MODIGUAL        reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    RPAREN          reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    COMMA           reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)
    RCCT            reduce using rule 129 (postfixUnarySuffix -> indexingSuffix .)


state 162

    (130) postfixUnarySuffix -> navigationSuffix .

    INCREMENTO      reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    DECREMENTO      reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    MENOR           reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    LCCT            reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    LPAREN          reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    COLONCOLON      reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    LCHAVE          reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    PONTO           reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    FUN             reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    $end            reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    ID              reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    FOR             reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    WHILE           reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    DO              reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    VAR             reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    VAL             reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    CROSSINLINE     reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    IMPORT          reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    INIT            reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    NOINLINE        reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    OUT             reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    VARARG          reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    WHERE           reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    OPERATOR        reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    LITERAL_STRING  reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    NUMBER          reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    IF              reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    RETURN          reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    RETURN_AT       reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    CONTINUE        reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    CONTINUE_AT     reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    BREAK           reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    BREAK_AT        reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    MINUS           reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    PLUS            reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    NOT             reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    SUSPEND         reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    RCHAVE          reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    PV              reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    ELSE            reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    AS              reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    MULT            reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    DIVIDE          reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    MOD             reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    PONTOPONTO      reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    ELVIS           reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    IN              reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    NOT_IN          reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    IS              reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    NOT_IS          reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    MAIOR           reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    MENORIGUAL      reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    MAIORIGUAL      reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    DIFERENTE       reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    IDENTIDADE      reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    IGUALDADE       reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    SEMIDENTIDADE   reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    AND             reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    OR              reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    MAISIGUAL       reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    MENOSIGUAL      reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    MULTIGUAL       reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    DIVIGUAL        reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    MODIGUAL        reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    RPAREN          reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    COMMA           reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)
    RCCT            reduce using rule 130 (postfixUnarySuffix -> navigationSuffix .)


state 163

    (263) postfixUnaryOperator -> INCREMENTO .

    INCREMENTO      reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    DECREMENTO      reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    MENOR           reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    LCCT            reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    LPAREN          reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    COLONCOLON      reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    LCHAVE          reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    PONTO           reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    FUN             reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    $end            reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    ID              reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    FOR             reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    WHILE           reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    DO              reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    VAR             reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    VAL             reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    CROSSINLINE     reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    IMPORT          reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    INIT            reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    NOINLINE        reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    OUT             reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    VARARG          reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    WHERE           reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    OPERATOR        reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    LITERAL_STRING  reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    NUMBER          reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    IF              reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    RETURN          reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    RETURN_AT       reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    CONTINUE        reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    CONTINUE_AT     reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    BREAK           reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    BREAK_AT        reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    MINUS           reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    PLUS            reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    NOT             reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    SUSPEND         reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    RCHAVE          reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    PV              reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    ELSE            reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    AS              reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    MULT            reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    DIVIDE          reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    MOD             reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    PONTOPONTO      reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    ELVIS           reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    IN              reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    NOT_IN          reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    IS              reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    NOT_IS          reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    MAIOR           reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    MENORIGUAL      reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    MAIORIGUAL      reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    DIFERENTE       reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    IDENTIDADE      reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    IGUALDADE       reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    SEMIDENTIDADE   reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    AND             reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    OR              reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    MAISIGUAL       reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    MENOSIGUAL      reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    MULTIGUAL       reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    DIVIGUAL        reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    MODIGUAL        reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    RPAREN          reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    COMMA           reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    RCCT            reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)


state 164

    (264) postfixUnaryOperator -> DECREMENTO .

    INCREMENTO      reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    DECREMENTO      reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    MENOR           reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    LCCT            reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    LPAREN          reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    COLONCOLON      reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    LCHAVE          reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    PONTO           reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    FUN             reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    $end            reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    ID              reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    FOR             reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    WHILE           reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    DO              reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    VAR             reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    VAL             reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    CROSSINLINE     reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    IMPORT          reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    INIT            reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    NOINLINE        reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    OUT             reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    VARARG          reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    WHERE           reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    OPERATOR        reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    LITERAL_STRING  reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    NUMBER          reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    IF              reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    RETURN          reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    RETURN_AT       reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    CONTINUE        reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    CONTINUE_AT     reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    BREAK           reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    BREAK_AT        reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    MINUS           reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    PLUS            reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    NOT             reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    SUSPEND         reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    RCHAVE          reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    PV              reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    ELSE            reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    AS              reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    MULT            reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    DIVIDE          reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    MOD             reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    PONTOPONTO      reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    ELVIS           reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    IN              reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    NOT_IN          reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    IS              reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    NOT_IS          reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    MAIOR           reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    MENORIGUAL      reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    MAIORIGUAL      reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    DIFERENTE       reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    IDENTIDADE      reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    IGUALDADE       reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    SEMIDENTIDADE   reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    AND             reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    OR              reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    MAISIGUAL       reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    MENOSIGUAL      reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    MULTIGUAL       reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    DIVIGUAL        reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    MODIGUAL        reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    RPAREN          reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    COMMA           reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    RCCT            reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)


state 165

    (153) typeArguments -> MENOR . typeArgumentsRecursive MAIOR
    (154) typeArguments -> MENOR . MAIOR
    (155) typeArgumentsRecursive -> . typeProjection
    (156) typeArgumentsRecursive -> . typeProjection COMMA typeArgumentsRecursive
    (49) typeProjection -> . typeProjectionModifiers type
    (50) typeProjection -> . type
    (51) typeProjectionModifiers -> . typeProjection
    (52) typeProjectionModifiers -> . typeProjectionModifier typeProjectionModifiers
    (35) type -> . typeModifiers optype
    (36) type -> . optype
    (43) typeProjectionModifier -> . varianceModifier
    (40) typeModifiers -> . typeModifier
    (41) typeModifiers -> . typeModifier typeModifiers
    (37) optype -> . parenthesizedType
    (38) optype -> . functionType
    (39) optype -> . userType
    (44) varianceModifier -> . IN
    (45) varianceModifier -> . OUT
    (42) typeModifier -> . SUSPEND
    (60) parenthesizedType -> . LPAREN type RPAREN
    (53) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (54) functionType -> . functionTypeParameters SETA type
    (46) userType -> . simpleUserType
    (61) receiverType -> . typeModifier parenthesizedType
    (59) functionTypeParameters -> . LPAREN parameterOrType parameterOrTypeRecursive RPAREN
    (47) simpleUserType -> . simpleIdentifier typeArguments
    (48) simpleUserType -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    MAIOR           shift and go to state 263
    IN              shift and go to state 269
    OUT             shift and go to state 270
    SUSPEND         shift and go to state 78
    LPAREN          shift and go to state 86
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    typeArgumentsRecursive         shift and go to state 262
    typeProjection                 shift and go to state 264
    typeProjectionModifiers        shift and go to state 265
    type                           shift and go to state 266
    typeProjectionModifier         shift and go to state 267
    typeModifiers                  shift and go to state 80
    optype                         shift and go to state 81
    varianceModifier               shift and go to state 268
    typeModifier                   shift and go to state 82
    parenthesizedType              shift and go to state 83
    functionType                   shift and go to state 84
    userType                       shift and go to state 85
    receiverType                   shift and go to state 87
    functionTypeParameters         shift and go to state 88
    simpleUserType                 shift and go to state 89
    simpleIdentifier               shift and go to state 90

state 166

    (150) callSuffix -> valueArguments . annotatedLambda
    (151) callSuffix -> valueArguments .
    (152) annotatedLambda -> . lambdaLiteral
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE

  ! shift/reduce conflict for LCHAVE resolved as shift
    INCREMENTO      reduce using rule 151 (callSuffix -> valueArguments .)
    DECREMENTO      reduce using rule 151 (callSuffix -> valueArguments .)
    MENOR           reduce using rule 151 (callSuffix -> valueArguments .)
    LCCT            reduce using rule 151 (callSuffix -> valueArguments .)
    LPAREN          reduce using rule 151 (callSuffix -> valueArguments .)
    COLONCOLON      reduce using rule 151 (callSuffix -> valueArguments .)
    PONTO           reduce using rule 151 (callSuffix -> valueArguments .)
    FUN             reduce using rule 151 (callSuffix -> valueArguments .)
    $end            reduce using rule 151 (callSuffix -> valueArguments .)
    ID              reduce using rule 151 (callSuffix -> valueArguments .)
    FOR             reduce using rule 151 (callSuffix -> valueArguments .)
    WHILE           reduce using rule 151 (callSuffix -> valueArguments .)
    DO              reduce using rule 151 (callSuffix -> valueArguments .)
    VAR             reduce using rule 151 (callSuffix -> valueArguments .)
    VAL             reduce using rule 151 (callSuffix -> valueArguments .)
    CROSSINLINE     reduce using rule 151 (callSuffix -> valueArguments .)
    IMPORT          reduce using rule 151 (callSuffix -> valueArguments .)
    INIT            reduce using rule 151 (callSuffix -> valueArguments .)
    NOINLINE        reduce using rule 151 (callSuffix -> valueArguments .)
    OUT             reduce using rule 151 (callSuffix -> valueArguments .)
    VARARG          reduce using rule 151 (callSuffix -> valueArguments .)
    WHERE           reduce using rule 151 (callSuffix -> valueArguments .)
    OPERATOR        reduce using rule 151 (callSuffix -> valueArguments .)
    LITERAL_STRING  reduce using rule 151 (callSuffix -> valueArguments .)
    NUMBER          reduce using rule 151 (callSuffix -> valueArguments .)
    IF              reduce using rule 151 (callSuffix -> valueArguments .)
    RETURN          reduce using rule 151 (callSuffix -> valueArguments .)
    RETURN_AT       reduce using rule 151 (callSuffix -> valueArguments .)
    CONTINUE        reduce using rule 151 (callSuffix -> valueArguments .)
    CONTINUE_AT     reduce using rule 151 (callSuffix -> valueArguments .)
    BREAK           reduce using rule 151 (callSuffix -> valueArguments .)
    BREAK_AT        reduce using rule 151 (callSuffix -> valueArguments .)
    MINUS           reduce using rule 151 (callSuffix -> valueArguments .)
    PLUS            reduce using rule 151 (callSuffix -> valueArguments .)
    NOT             reduce using rule 151 (callSuffix -> valueArguments .)
    SUSPEND         reduce using rule 151 (callSuffix -> valueArguments .)
    RCHAVE          reduce using rule 151 (callSuffix -> valueArguments .)
    PV              reduce using rule 151 (callSuffix -> valueArguments .)
    ELSE            reduce using rule 151 (callSuffix -> valueArguments .)
    AS              reduce using rule 151 (callSuffix -> valueArguments .)
    MULT            reduce using rule 151 (callSuffix -> valueArguments .)
    DIVIDE          reduce using rule 151 (callSuffix -> valueArguments .)
    MOD             reduce using rule 151 (callSuffix -> valueArguments .)
    PONTOPONTO      reduce using rule 151 (callSuffix -> valueArguments .)
    ELVIS           reduce using rule 151 (callSuffix -> valueArguments .)
    IN              reduce using rule 151 (callSuffix -> valueArguments .)
    NOT_IN          reduce using rule 151 (callSuffix -> valueArguments .)
    IS              reduce using rule 151 (callSuffix -> valueArguments .)
    NOT_IS          reduce using rule 151 (callSuffix -> valueArguments .)
    MAIOR           reduce using rule 151 (callSuffix -> valueArguments .)
    MENORIGUAL      reduce using rule 151 (callSuffix -> valueArguments .)
    MAIORIGUAL      reduce using rule 151 (callSuffix -> valueArguments .)
    DIFERENTE       reduce using rule 151 (callSuffix -> valueArguments .)
    IDENTIDADE      reduce using rule 151 (callSuffix -> valueArguments .)
    IGUALDADE       reduce using rule 151 (callSuffix -> valueArguments .)
    SEMIDENTIDADE   reduce using rule 151 (callSuffix -> valueArguments .)
    AND             reduce using rule 151 (callSuffix -> valueArguments .)
    OR              reduce using rule 151 (callSuffix -> valueArguments .)
    MAISIGUAL       reduce using rule 151 (callSuffix -> valueArguments .)
    MENOSIGUAL      reduce using rule 151 (callSuffix -> valueArguments .)
    MULTIGUAL       reduce using rule 151 (callSuffix -> valueArguments .)
    DIVIGUAL        reduce using rule 151 (callSuffix -> valueArguments .)
    MODIGUAL        reduce using rule 151 (callSuffix -> valueArguments .)
    RPAREN          reduce using rule 151 (callSuffix -> valueArguments .)
    COMMA           reduce using rule 151 (callSuffix -> valueArguments .)
    RCCT            reduce using rule 151 (callSuffix -> valueArguments .)
    LCHAVE          shift and go to state 76

  ! LCHAVE          [ reduce using rule 151 (callSuffix -> valueArguments .) ]

    annotatedLambda                shift and go to state 271
    lambdaLiteral                  shift and go to state 170

state 167

    (149) callSuffix -> annotatedLambda .

    INCREMENTO      reduce using rule 149 (callSuffix -> annotatedLambda .)
    DECREMENTO      reduce using rule 149 (callSuffix -> annotatedLambda .)
    MENOR           reduce using rule 149 (callSuffix -> annotatedLambda .)
    LCCT            reduce using rule 149 (callSuffix -> annotatedLambda .)
    LPAREN          reduce using rule 149 (callSuffix -> annotatedLambda .)
    COLONCOLON      reduce using rule 149 (callSuffix -> annotatedLambda .)
    LCHAVE          reduce using rule 149 (callSuffix -> annotatedLambda .)
    PONTO           reduce using rule 149 (callSuffix -> annotatedLambda .)
    FUN             reduce using rule 149 (callSuffix -> annotatedLambda .)
    $end            reduce using rule 149 (callSuffix -> annotatedLambda .)
    ID              reduce using rule 149 (callSuffix -> annotatedLambda .)
    FOR             reduce using rule 149 (callSuffix -> annotatedLambda .)
    WHILE           reduce using rule 149 (callSuffix -> annotatedLambda .)
    DO              reduce using rule 149 (callSuffix -> annotatedLambda .)
    VAR             reduce using rule 149 (callSuffix -> annotatedLambda .)
    VAL             reduce using rule 149 (callSuffix -> annotatedLambda .)
    CROSSINLINE     reduce using rule 149 (callSuffix -> annotatedLambda .)
    IMPORT          reduce using rule 149 (callSuffix -> annotatedLambda .)
    INIT            reduce using rule 149 (callSuffix -> annotatedLambda .)
    NOINLINE        reduce using rule 149 (callSuffix -> annotatedLambda .)
    OUT             reduce using rule 149 (callSuffix -> annotatedLambda .)
    VARARG          reduce using rule 149 (callSuffix -> annotatedLambda .)
    WHERE           reduce using rule 149 (callSuffix -> annotatedLambda .)
    OPERATOR        reduce using rule 149 (callSuffix -> annotatedLambda .)
    LITERAL_STRING  reduce using rule 149 (callSuffix -> annotatedLambda .)
    NUMBER          reduce using rule 149 (callSuffix -> annotatedLambda .)
    IF              reduce using rule 149 (callSuffix -> annotatedLambda .)
    RETURN          reduce using rule 149 (callSuffix -> annotatedLambda .)
    RETURN_AT       reduce using rule 149 (callSuffix -> annotatedLambda .)
    CONTINUE        reduce using rule 149 (callSuffix -> annotatedLambda .)
    CONTINUE_AT     reduce using rule 149 (callSuffix -> annotatedLambda .)
    BREAK           reduce using rule 149 (callSuffix -> annotatedLambda .)
    BREAK_AT        reduce using rule 149 (callSuffix -> annotatedLambda .)
    MINUS           reduce using rule 149 (callSuffix -> annotatedLambda .)
    PLUS            reduce using rule 149 (callSuffix -> annotatedLambda .)
    NOT             reduce using rule 149 (callSuffix -> annotatedLambda .)
    SUSPEND         reduce using rule 149 (callSuffix -> annotatedLambda .)
    RCHAVE          reduce using rule 149 (callSuffix -> annotatedLambda .)
    PV              reduce using rule 149 (callSuffix -> annotatedLambda .)
    ELSE            reduce using rule 149 (callSuffix -> annotatedLambda .)
    AS              reduce using rule 149 (callSuffix -> annotatedLambda .)
    MULT            reduce using rule 149 (callSuffix -> annotatedLambda .)
    DIVIDE          reduce using rule 149 (callSuffix -> annotatedLambda .)
    MOD             reduce using rule 149 (callSuffix -> annotatedLambda .)
    PONTOPONTO      reduce using rule 149 (callSuffix -> annotatedLambda .)
    ELVIS           reduce using rule 149 (callSuffix -> annotatedLambda .)
    IN              reduce using rule 149 (callSuffix -> annotatedLambda .)
    NOT_IN          reduce using rule 149 (callSuffix -> annotatedLambda .)
    IS              reduce using rule 149 (callSuffix -> annotatedLambda .)
    NOT_IS          reduce using rule 149 (callSuffix -> annotatedLambda .)
    MAIOR           reduce using rule 149 (callSuffix -> annotatedLambda .)
    MENORIGUAL      reduce using rule 149 (callSuffix -> annotatedLambda .)
    MAIORIGUAL      reduce using rule 149 (callSuffix -> annotatedLambda .)
    DIFERENTE       reduce using rule 149 (callSuffix -> annotatedLambda .)
    IDENTIDADE      reduce using rule 149 (callSuffix -> annotatedLambda .)
    IGUALDADE       reduce using rule 149 (callSuffix -> annotatedLambda .)
    SEMIDENTIDADE   reduce using rule 149 (callSuffix -> annotatedLambda .)
    AND             reduce using rule 149 (callSuffix -> annotatedLambda .)
    OR              reduce using rule 149 (callSuffix -> annotatedLambda .)
    MAISIGUAL       reduce using rule 149 (callSuffix -> annotatedLambda .)
    MENOSIGUAL      reduce using rule 149 (callSuffix -> annotatedLambda .)
    MULTIGUAL       reduce using rule 149 (callSuffix -> annotatedLambda .)
    DIVIGUAL        reduce using rule 149 (callSuffix -> annotatedLambda .)
    MODIGUAL        reduce using rule 149 (callSuffix -> annotatedLambda .)
    RPAREN          reduce using rule 149 (callSuffix -> annotatedLambda .)
    COMMA           reduce using rule 149 (callSuffix -> annotatedLambda .)
    RCCT            reduce using rule 149 (callSuffix -> annotatedLambda .)


state 168

    (141) indexingSuffix -> LCCT . indexingSuffixRecursive RCCT
    (142) indexingSuffix -> LCCT . RCCT
    (143) indexingSuffixRecursive -> . expression
    (144) indexingSuffixRecursive -> . expression COMMA indexingSuffixRecursive
    (8) expression -> . disjunction
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    RCCT            shift and go to state 273
    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    indexingSuffixRecursive        shift and go to state 272
    expression                     shift and go to state 274
    disjunction                    shift and go to state 30
    conjunction                    shift and go to state 31
    equality                       shift and go to state 32
    comparison                     shift and go to state 33
    infixOperation                 shift and go to state 34
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    simpleIdentifier               shift and go to state 38
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 169

    (145) navigationSuffix -> memberAccessOperator . simpleIdentifier CLASS
    (146) navigationSuffix -> memberAccessOperator . parenthesizedExpression CLASS
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (173) parenthesizedExpression -> . LPAREN expression RPAREN

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LPAREN          shift and go to state 62

    simpleIdentifier               shift and go to state 275
    parenthesizedExpression        shift and go to state 276

state 170

    (152) annotatedLambda -> lambdaLiteral .

    INCREMENTO      reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    DECREMENTO      reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    MENOR           reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    LCCT            reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    LPAREN          reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    COLONCOLON      reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    LCHAVE          reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    PONTO           reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    FUN             reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    $end            reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    ID              reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    FOR             reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    WHILE           reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    DO              reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    VAR             reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    VAL             reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    CROSSINLINE     reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    IMPORT          reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    INIT            reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    NOINLINE        reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    OUT             reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    VARARG          reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    WHERE           reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    OPERATOR        reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    LITERAL_STRING  reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    NUMBER          reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    IF              reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    RETURN          reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    RETURN_AT       reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    CONTINUE        reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    CONTINUE_AT     reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    BREAK           reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    BREAK_AT        reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    MINUS           reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    PLUS            reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    NOT             reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    SUSPEND         reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    RCHAVE          reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    PV              reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    ELSE            reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    AS              reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    MULT            reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    DIVIDE          reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    MOD             reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    PONTOPONTO      reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    ELVIS           reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    IN              reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    NOT_IN          reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    IS              reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    NOT_IS          reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    MAIOR           reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    MENORIGUAL      reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    MAIORIGUAL      reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    DIFERENTE       reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    IDENTIDADE      reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    IGUALDADE       reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    SEMIDENTIDADE   reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    AND             reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    OR              reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    MAISIGUAL       reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    MENOSIGUAL      reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    MULTIGUAL       reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    DIVIGUAL        reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    MODIGUAL        reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    RPAREN          reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    COMMA           reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    RCCT            reduce using rule 152 (annotatedLambda -> lambdaLiteral .)


state 171

    (159) valueArguments -> LPAREN . RPAREN
    (160) valueArguments -> LPAREN . valueArgumentsRecursive RPAREN
    (157) valueArgumentsRecursive -> . valueArgument
    (158) valueArgumentsRecursive -> . valueArgument COMMA valueArgumentsRecursive
    (161) valueArgument -> . simpleIdentifier ATRIBUICAO MULT expression
    (162) valueArgument -> . simpleIdentifier ATRIBUICAO expression
    (163) valueArgument -> . expression
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (8) expression -> . disjunction
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    RPAREN          shift and go to state 277
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    LPAREN          shift and go to state 62
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    valueArgumentsRecursive        shift and go to state 278
    valueArgument                  shift and go to state 279
    simpleIdentifier               shift and go to state 280
    expression                     shift and go to state 281
    disjunction                    shift and go to state 30
    conjunction                    shift and go to state 31
    equality                       shift and go to state 32
    comparison                     shift and go to state 33
    infixOperation                 shift and go to state 34
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 172

    (265) memberAccessOperator -> safeNav .

    ID              reduce using rule 265 (memberAccessOperator -> safeNav .)
    CROSSINLINE     reduce using rule 265 (memberAccessOperator -> safeNav .)
    IMPORT          reduce using rule 265 (memberAccessOperator -> safeNav .)
    INIT            reduce using rule 265 (memberAccessOperator -> safeNav .)
    NOINLINE        reduce using rule 265 (memberAccessOperator -> safeNav .)
    OUT             reduce using rule 265 (memberAccessOperator -> safeNav .)
    VARARG          reduce using rule 265 (memberAccessOperator -> safeNav .)
    WHERE           reduce using rule 265 (memberAccessOperator -> safeNav .)
    OPERATOR        reduce using rule 265 (memberAccessOperator -> safeNav .)
    LPAREN          reduce using rule 265 (memberAccessOperator -> safeNav .)


state 173

    (266) memberAccessOperator -> COLONCOLON .

    ID              reduce using rule 266 (memberAccessOperator -> COLONCOLON .)
    CROSSINLINE     reduce using rule 266 (memberAccessOperator -> COLONCOLON .)
    IMPORT          reduce using rule 266 (memberAccessOperator -> COLONCOLON .)
    INIT            reduce using rule 266 (memberAccessOperator -> COLONCOLON .)
    NOINLINE        reduce using rule 266 (memberAccessOperator -> COLONCOLON .)
    OUT             reduce using rule 266 (memberAccessOperator -> COLONCOLON .)
    VARARG          reduce using rule 266 (memberAccessOperator -> COLONCOLON .)
    WHERE           reduce using rule 266 (memberAccessOperator -> COLONCOLON .)
    OPERATOR        reduce using rule 266 (memberAccessOperator -> COLONCOLON .)
    LPAREN          reduce using rule 266 (memberAccessOperator -> COLONCOLON .)


state 174

    (267) safeNav -> PONTO .

    ID              reduce using rule 267 (safeNav -> PONTO .)
    CROSSINLINE     reduce using rule 267 (safeNav -> PONTO .)
    IMPORT          reduce using rule 267 (safeNav -> PONTO .)
    INIT            reduce using rule 267 (safeNav -> PONTO .)
    NOINLINE        reduce using rule 267 (safeNav -> PONTO .)
    OUT             reduce using rule 267 (safeNav -> PONTO .)
    VARARG          reduce using rule 267 (safeNav -> PONTO .)
    WHERE           reduce using rule 267 (safeNav -> PONTO .)
    OPERATOR        reduce using rule 267 (safeNav -> PONTO .)
    LPAREN          reduce using rule 267 (safeNav -> PONTO .)


state 175

    (173) parenthesizedExpression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 282


state 176

    (230) callableReference -> receiverType COLONCOLON . simpleIdentifierOrClass
    (232) simpleIdentifierOrClass -> . simpleIdentifier
    (233) simpleIdentifierOrClass -> . CLASS
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    CLASS           shift and go to state 179
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    simpleIdentifierOrClass        shift and go to state 283
    simpleIdentifier               shift and go to state 178

state 177

    (231) callableReference -> COLONCOLON simpleIdentifierOrClass .

    FUN             reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    $end            reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    ID              reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    FOR             reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    WHILE           reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    DO              reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    VAR             reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    VAL             reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    CROSSINLINE     reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    IMPORT          reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    INIT            reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    NOINLINE        reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    OUT             reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    VARARG          reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    WHERE           reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    OPERATOR        reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    LPAREN          reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    LITERAL_STRING  reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    NUMBER          reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    COLONCOLON      reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    LCCT            reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    IF              reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    RETURN          reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    RETURN_AT       reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    CONTINUE        reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    CONTINUE_AT     reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    BREAK           reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    BREAK_AT        reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    LCHAVE          reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    INCREMENTO      reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    DECREMENTO      reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    MINUS           reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    PLUS            reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    NOT             reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    SUSPEND         reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    RCHAVE          reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    PV              reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    ELSE            reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    MENOR           reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    PONTO           reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    AS              reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    MULT            reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    DIVIDE          reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    MOD             reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    PONTOPONTO      reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    ELVIS           reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    IN              reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    NOT_IN          reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    IS              reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    NOT_IS          reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    MAIOR           reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    MENORIGUAL      reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    MAIORIGUAL      reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    DIFERENTE       reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    IDENTIDADE      reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    IGUALDADE       reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    SEMIDENTIDADE   reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    AND             reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    OR              reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    MAISIGUAL       reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    MENOSIGUAL      reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    MULTIGUAL       reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    DIVIGUAL        reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    MODIGUAL        reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    RPAREN          reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    COMMA           reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)
    RCCT            reduce using rule 231 (callableReference -> COLONCOLON simpleIdentifierOrClass .)


state 178

    (232) simpleIdentifierOrClass -> simpleIdentifier .

    FUN             reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    $end            reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    ID              reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    FOR             reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    WHILE           reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    DO              reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    VAR             reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    VAL             reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    IMPORT          reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    INIT            reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    NOINLINE        reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    OUT             reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    VARARG          reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    WHERE           reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    OPERATOR        reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    LPAREN          reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    NUMBER          reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    COLONCOLON      reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    LCCT            reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    IF              reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    RETURN          reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    RETURN_AT       reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    CONTINUE        reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    BREAK           reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    BREAK_AT        reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    LCHAVE          reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    INCREMENTO      reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    DECREMENTO      reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    MINUS           reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    PLUS            reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    NOT             reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    SUSPEND         reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    RCHAVE          reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    PV              reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    ELSE            reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    MENOR           reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    PONTO           reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    AS              reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    MULT            reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    DIVIDE          reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    MOD             reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    ELVIS           reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    IN              reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    NOT_IN          reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    IS              reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    NOT_IS          reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    MAIOR           reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    DIFERENTE       reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    IGUALDADE       reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    AND             reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    OR              reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    MAISIGUAL       reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    MENOSIGUAL      reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    MODIGUAL        reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    RPAREN          reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    COMMA           reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    RCCT            reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)


state 179

    (233) simpleIdentifierOrClass -> CLASS .

    FUN             reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    $end            reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    ID              reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    FOR             reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    WHILE           reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    DO              reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    VAR             reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    VAL             reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    CROSSINLINE     reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    IMPORT          reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    INIT            reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    NOINLINE        reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    OUT             reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    VARARG          reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    WHERE           reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    OPERATOR        reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    LPAREN          reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    LITERAL_STRING  reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    NUMBER          reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    COLONCOLON      reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    LCCT            reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    IF              reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    RETURN          reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    RETURN_AT       reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    CONTINUE        reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    CONTINUE_AT     reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    BREAK           reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    BREAK_AT        reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    LCHAVE          reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    INCREMENTO      reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    DECREMENTO      reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    MINUS           reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    PLUS            reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    NOT             reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    SUSPEND         reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    RCHAVE          reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    PV              reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    ELSE            reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    MENOR           reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    PONTO           reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    AS              reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    MULT            reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    DIVIDE          reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    MOD             reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    PONTOPONTO      reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    ELVIS           reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    IN              reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    NOT_IN          reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    IS              reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    NOT_IS          reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    MAIOR           reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    MENORIGUAL      reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    MAIORIGUAL      reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    DIFERENTE       reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    IDENTIDADE      reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    IGUALDADE       reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    SEMIDENTIDADE   reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    AND             reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    OR              reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    MAISIGUAL       reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    MENOSIGUAL      reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    MULTIGUAL       reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    DIVIGUAL        reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    MODIGUAL        reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    RPAREN          reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    COMMA           reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    RCCT            reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)


state 180

    (174) collectionLiteral -> LCCT collectionLiteralRecursive . RCCT

    RCCT            shift and go to state 284


state 181

    (175) collectionLiteral -> LCCT RCCT .

    FUN             reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    $end            reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    ID              reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    FOR             reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    WHILE           reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    DO              reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    VAR             reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    VAL             reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    CROSSINLINE     reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    IMPORT          reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    INIT            reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    NOINLINE        reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    OUT             reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    VARARG          reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    WHERE           reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    OPERATOR        reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    LPAREN          reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    LITERAL_STRING  reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    NUMBER          reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    COLONCOLON      reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    LCCT            reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    IF              reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    RETURN          reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    RETURN_AT       reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    CONTINUE        reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    CONTINUE_AT     reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    BREAK           reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    BREAK_AT        reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    LCHAVE          reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    INCREMENTO      reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    DECREMENTO      reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    MINUS           reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    PLUS            reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    NOT             reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    SUSPEND         reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    RCHAVE          reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    PV              reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    ELSE            reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    MENOR           reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    PONTO           reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    AS              reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    MULT            reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    DIVIDE          reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    MOD             reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    PONTOPONTO      reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    ELVIS           reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    IN              reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    NOT_IN          reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    IS              reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    NOT_IS          reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    MAIOR           reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    MENORIGUAL      reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    MAIORIGUAL      reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    DIFERENTE       reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    IDENTIDADE      reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    IGUALDADE       reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    SEMIDENTIDADE   reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    AND             reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    OR              reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    MAISIGUAL       reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    MENOSIGUAL      reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    MULTIGUAL       reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    DIVIGUAL        reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    MODIGUAL        reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    RPAREN          reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    COMMA           reduce using rule 175 (collectionLiteral -> LCCT RCCT .)
    RCCT            reduce using rule 175 (collectionLiteral -> LCCT RCCT .)


state 182

    (176) collectionLiteralRecursive -> expression .
    (177) collectionLiteralRecursive -> expression . COMMA collectionLiteralRecursive

    RCCT            reduce using rule 176 (collectionLiteralRecursive -> expression .)
    COMMA           shift and go to state 285


state 183

    (218) ifExpression -> IF LPAREN . expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> IF LPAREN . expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> IF LPAREN . expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> IF LPAREN . expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (8) expression -> . disjunction
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    expression                     shift and go to state 286
    disjunction                    shift and go to state 30
    conjunction                    shift and go to state 31
    equality                       shift and go to state 32
    comparison                     shift and go to state 33
    infixOperation                 shift and go to state 34
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    simpleIdentifier               shift and go to state 38
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 184

    (224) jumpExpression -> RETURN expression .

    FUN             reduce using rule 224 (jumpExpression -> RETURN expression .)
    $end            reduce using rule 224 (jumpExpression -> RETURN expression .)
    ID              reduce using rule 224 (jumpExpression -> RETURN expression .)
    FOR             reduce using rule 224 (jumpExpression -> RETURN expression .)
    WHILE           reduce using rule 224 (jumpExpression -> RETURN expression .)
    DO              reduce using rule 224 (jumpExpression -> RETURN expression .)
    VAR             reduce using rule 224 (jumpExpression -> RETURN expression .)
    VAL             reduce using rule 224 (jumpExpression -> RETURN expression .)
    CROSSINLINE     reduce using rule 224 (jumpExpression -> RETURN expression .)
    IMPORT          reduce using rule 224 (jumpExpression -> RETURN expression .)
    INIT            reduce using rule 224 (jumpExpression -> RETURN expression .)
    NOINLINE        reduce using rule 224 (jumpExpression -> RETURN expression .)
    OUT             reduce using rule 224 (jumpExpression -> RETURN expression .)
    VARARG          reduce using rule 224 (jumpExpression -> RETURN expression .)
    WHERE           reduce using rule 224 (jumpExpression -> RETURN expression .)
    OPERATOR        reduce using rule 224 (jumpExpression -> RETURN expression .)
    LPAREN          reduce using rule 224 (jumpExpression -> RETURN expression .)
    LITERAL_STRING  reduce using rule 224 (jumpExpression -> RETURN expression .)
    NUMBER          reduce using rule 224 (jumpExpression -> RETURN expression .)
    COLONCOLON      reduce using rule 224 (jumpExpression -> RETURN expression .)
    LCCT            reduce using rule 224 (jumpExpression -> RETURN expression .)
    IF              reduce using rule 224 (jumpExpression -> RETURN expression .)
    RETURN          reduce using rule 224 (jumpExpression -> RETURN expression .)
    RETURN_AT       reduce using rule 224 (jumpExpression -> RETURN expression .)
    CONTINUE        reduce using rule 224 (jumpExpression -> RETURN expression .)
    CONTINUE_AT     reduce using rule 224 (jumpExpression -> RETURN expression .)
    BREAK           reduce using rule 224 (jumpExpression -> RETURN expression .)
    BREAK_AT        reduce using rule 224 (jumpExpression -> RETURN expression .)
    LCHAVE          reduce using rule 224 (jumpExpression -> RETURN expression .)
    INCREMENTO      reduce using rule 224 (jumpExpression -> RETURN expression .)
    DECREMENTO      reduce using rule 224 (jumpExpression -> RETURN expression .)
    MINUS           reduce using rule 224 (jumpExpression -> RETURN expression .)
    PLUS            reduce using rule 224 (jumpExpression -> RETURN expression .)
    NOT             reduce using rule 224 (jumpExpression -> RETURN expression .)
    SUSPEND         reduce using rule 224 (jumpExpression -> RETURN expression .)
    RCHAVE          reduce using rule 224 (jumpExpression -> RETURN expression .)
    PV              reduce using rule 224 (jumpExpression -> RETURN expression .)
    ELSE            reduce using rule 224 (jumpExpression -> RETURN expression .)
    MENOR           reduce using rule 224 (jumpExpression -> RETURN expression .)
    PONTO           reduce using rule 224 (jumpExpression -> RETURN expression .)
    AS              reduce using rule 224 (jumpExpression -> RETURN expression .)
    MULT            reduce using rule 224 (jumpExpression -> RETURN expression .)
    DIVIDE          reduce using rule 224 (jumpExpression -> RETURN expression .)
    MOD             reduce using rule 224 (jumpExpression -> RETURN expression .)
    PONTOPONTO      reduce using rule 224 (jumpExpression -> RETURN expression .)
    ELVIS           reduce using rule 224 (jumpExpression -> RETURN expression .)
    IN              reduce using rule 224 (jumpExpression -> RETURN expression .)
    NOT_IN          reduce using rule 224 (jumpExpression -> RETURN expression .)
    IS              reduce using rule 224 (jumpExpression -> RETURN expression .)
    NOT_IS          reduce using rule 224 (jumpExpression -> RETURN expression .)
    MAIOR           reduce using rule 224 (jumpExpression -> RETURN expression .)
    MENORIGUAL      reduce using rule 224 (jumpExpression -> RETURN expression .)
    MAIORIGUAL      reduce using rule 224 (jumpExpression -> RETURN expression .)
    DIFERENTE       reduce using rule 224 (jumpExpression -> RETURN expression .)
    IDENTIDADE      reduce using rule 224 (jumpExpression -> RETURN expression .)
    IGUALDADE       reduce using rule 224 (jumpExpression -> RETURN expression .)
    SEMIDENTIDADE   reduce using rule 224 (jumpExpression -> RETURN expression .)
    AND             reduce using rule 224 (jumpExpression -> RETURN expression .)
    OR              reduce using rule 224 (jumpExpression -> RETURN expression .)
    MAISIGUAL       reduce using rule 224 (jumpExpression -> RETURN expression .)
    MENOSIGUAL      reduce using rule 224 (jumpExpression -> RETURN expression .)
    MULTIGUAL       reduce using rule 224 (jumpExpression -> RETURN expression .)
    DIVIGUAL        reduce using rule 224 (jumpExpression -> RETURN expression .)
    MODIGUAL        reduce using rule 224 (jumpExpression -> RETURN expression .)
    RPAREN          reduce using rule 224 (jumpExpression -> RETURN expression .)
    COMMA           reduce using rule 224 (jumpExpression -> RETURN expression .)
    RCCT            reduce using rule 224 (jumpExpression -> RETURN expression .)


state 185

    (225) jumpExpression -> RETURN_AT expression .

    FUN             reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    $end            reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    ID              reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    FOR             reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    WHILE           reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    DO              reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    VAR             reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    VAL             reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    CROSSINLINE     reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    IMPORT          reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    INIT            reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    NOINLINE        reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    OUT             reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    VARARG          reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    WHERE           reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    OPERATOR        reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    LPAREN          reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    LITERAL_STRING  reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    NUMBER          reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    COLONCOLON      reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    LCCT            reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    IF              reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    RETURN          reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    RETURN_AT       reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    CONTINUE        reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    CONTINUE_AT     reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    BREAK           reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    BREAK_AT        reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    LCHAVE          reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    INCREMENTO      reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    DECREMENTO      reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    MINUS           reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    PLUS            reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    NOT             reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    SUSPEND         reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    RCHAVE          reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    PV              reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    ELSE            reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    MENOR           reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    PONTO           reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    AS              reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    MULT            reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    DIVIDE          reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    MOD             reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    PONTOPONTO      reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    ELVIS           reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    IN              reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    NOT_IN          reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    IS              reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    NOT_IS          reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    MAIOR           reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    MENORIGUAL      reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    MAIORIGUAL      reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    DIFERENTE       reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    IDENTIDADE      reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    IGUALDADE       reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    SEMIDENTIDADE   reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    AND             reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    OR              reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    MAISIGUAL       reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    MENOSIGUAL      reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    MULTIGUAL       reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    DIVIGUAL        reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    MODIGUAL        reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    RPAREN          reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    COMMA           reduce using rule 225 (jumpExpression -> RETURN_AT expression .)
    RCCT            reduce using rule 225 (jumpExpression -> RETURN_AT expression .)


state 186

    (61) receiverType -> typeModifier parenthesizedType .

    COLONCOLON      reduce using rule 61 (receiverType -> typeModifier parenthesizedType .)
    PONTO           reduce using rule 61 (receiverType -> typeModifier parenthesizedType .)


state 187

    (60) parenthesizedType -> LPAREN . type RPAREN
    (35) type -> . typeModifiers optype
    (36) type -> . optype
    (40) typeModifiers -> . typeModifier
    (41) typeModifiers -> . typeModifier typeModifiers
    (37) optype -> . parenthesizedType
    (38) optype -> . functionType
    (39) optype -> . userType
    (42) typeModifier -> . SUSPEND
    (60) parenthesizedType -> . LPAREN type RPAREN
    (53) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (54) functionType -> . functionTypeParameters SETA type
    (46) userType -> . simpleUserType
    (61) receiverType -> . typeModifier parenthesizedType
    (59) functionTypeParameters -> . LPAREN parameterOrType parameterOrTypeRecursive RPAREN
    (47) simpleUserType -> . simpleIdentifier typeArguments
    (48) simpleUserType -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    SUSPEND         shift and go to state 78
    LPAREN          shift and go to state 86
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    type                           shift and go to state 287
    typeModifiers                  shift and go to state 80
    optype                         shift and go to state 81
    typeModifier                   shift and go to state 82
    parenthesizedType              shift and go to state 83
    functionType                   shift and go to state 84
    userType                       shift and go to state 85
    receiverType                   shift and go to state 87
    functionTypeParameters         shift and go to state 88
    simpleUserType                 shift and go to state 89
    simpleIdentifier               shift and go to state 90

state 188

    (189) lambdaLiteral -> LCHAVE optionsLambdaLiteral . RCHAVE

    RCHAVE          shift and go to state 288


state 189

    (190) optionsLambdaLiteral -> statements .

    RCHAVE          reduce using rule 190 (optionsLambdaLiteral -> statements .)


state 190

    (191) optionsLambdaLiteral -> lambdaParameters . SETA statements

    SETA            shift and go to state 289


state 191

    (192) optionsLambdaLiteral -> SETA . statements
    (62) statements -> . statement
    (63) statements -> . statement statements
    (64) statement -> . functionDeclaration
    (65) statement -> . assignment
    (66) statement -> . loopStatement
    (67) statement -> . expression
    (68) statement -> . propertyDeclaration
    (69) statement -> . chamadaDeFuncao
    (4) functionDeclaration -> . FUN simpleIdentifier functionValueParameters functionBody
    (5) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType functionBody
    (86) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (87) assignment -> . asExpression assignmentAndOperator expression
    (73) loopStatement -> . forStatement
    (74) loopStatement -> . whileStatement
    (75) loopStatement -> . doWhileStatement
    (8) expression -> . disjunction
    (11) propertyDeclaration -> . varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV
    (12) propertyDeclaration -> . varOrVal genericVariableDeclaration ATRIBUICAO expression PV
    (13) propertyDeclaration -> . varOrVal genericVariableDeclaration ATRIBUICAO expression
    (14) propertyDeclaration -> . varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression
    (84) chamadaDeFuncao -> . ID LPAREN RPAREN
    (85) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (131) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (132) directlyAssignableExpression -> . simpleIdentifier
    (133) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (76) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody
    (77) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN
    (78) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (79) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (80) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (81) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (9) varOrVal -> . VAR
    (10) varOrVal -> . VAL
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (134) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (42) typeModifier -> . SUSPEND
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression

    FUN             shift and go to state 99
    ID              shift and go to state 107
    FOR             shift and go to state 111
    WHILE           shift and go to state 112
    DO              shift and go to state 113
    VAR             shift and go to state 114
    VAL             shift and go to state 115
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LPAREN          shift and go to state 108
    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    SUSPEND         shift and go to state 78

    statements                     shift and go to state 290
    statement                      shift and go to state 92
    functionDeclaration            shift and go to state 93
    assignment                     shift and go to state 94
    loopStatement                  shift and go to state 95
    expression                     shift and go to state 96
    propertyDeclaration            shift and go to state 97
    chamadaDeFuncao                shift and go to state 98
    simpleIdentifier               shift and go to state 100
    directlyAssignableExpression   shift and go to state 101
    asExpression                   shift and go to state 102
    forStatement                   shift and go to state 103
    whileStatement                 shift and go to state 104
    doWhileStatement               shift and go to state 105
    disjunction                    shift and go to state 30
    varOrVal                       shift and go to state 106
    postfixUnaryExpression         shift and go to state 109
    parenthesizedDirectlyAssignableExpression shift and go to state 110
    prefixUnaryExpression          shift and go to state 42
    conjunction                    shift and go to state 31
    primaryExpression              shift and go to state 46
    prefixUnaryExpressionRecursive shift and go to state 43
    equality                       shift and go to state 32
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    unaryPrefix                    shift and go to state 45
    comparison                     shift and go to state 33
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    infixOperation                 shift and go to state 34
    typeModifier                   shift and go to state 75
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40

state 192

    (193) lambdaParameters -> lambdaParameter .
    (194) lambdaParameters -> lambdaParameter . COMMA lambdaParameters

    SETA            reduce using rule 193 (lambdaParameters -> lambdaParameter .)
    COMMA           shift and go to state 291


state 193

    (195) lambdaParameter -> variableDeclaration .

    COMMA           reduce using rule 195 (lambdaParameter -> variableDeclaration .)
    SETA            reduce using rule 195 (lambdaParameter -> variableDeclaration .)


state 194

    (196) lambdaParameter -> multiVariableDeclaration . optionalType
    (197) lambdaParameter -> multiVariableDeclaration .
    (3) optionalType -> . DOISP type

    COMMA           reduce using rule 197 (lambdaParameter -> multiVariableDeclaration .)
    SETA            reduce using rule 197 (lambdaParameter -> multiVariableDeclaration .)
    DOISP           shift and go to state 21

    optionalType                   shift and go to state 292

state 195

    (28) variableDeclaration -> simpleIdentifier . DOISP type
    (29) variableDeclaration -> simpleIdentifier .
    (132) directlyAssignableExpression -> simpleIdentifier .
    (165) primaryExpression -> simpleIdentifier .
    (268) label -> simpleIdentifier .

  ! reduce/reduce conflict for INCREMENTO resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for NOT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for NUMBER resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for IF resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for FUN resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 165 (primaryExpression -> simpleIdentifier .)
    DOISP           shift and go to state 293
    COMMA           reduce using rule 29 (variableDeclaration -> simpleIdentifier .)
    SETA            reduce using rule 29 (variableDeclaration -> simpleIdentifier .)
    ATRIBUICAO      reduce using rule 132 (directlyAssignableExpression -> simpleIdentifier .)
    INCREMENTO      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    DECREMENTO      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MENOR           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    LCCT            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    LPAREN          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    COLONCOLON      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    LCHAVE          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    PONTO           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    AS              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MAISIGUAL       reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MENOSIGUAL      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MODIGUAL        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MULT            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    DIVIDE          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MOD             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    PLUS            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MINUS           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    ID              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IMPORT          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    INIT            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NOINLINE        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    OUT             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    VARARG          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    WHERE           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    OPERATOR        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    ELVIS           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IN              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NOT_IN          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IS              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NOT_IS          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MAIOR           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    DIFERENTE       reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IGUALDADE       reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    AND             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    OR              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    FUN             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    FOR             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    WHILE           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    DO              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    VAR             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    VAL             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NUMBER          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IF              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    RETURN          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    RETURN_AT       reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    CONTINUE        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    BREAK           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    BREAK_AT        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NOT             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    SUSPEND         reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    RCHAVE          reduce using rule 165 (primaryExpression -> simpleIdentifier .)

  ! INCREMENTO      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! PLUS            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NOT             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! OPERATOR        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LITERAL_STRING  [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NUMBER          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! IF              [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! RETURN          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! RETURN_AT       [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CONTINUE        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CONTINUE_AT     [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! BREAK           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! BREAK_AT        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LCHAVE          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! FUN             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! SUSPEND         [ reduce using rule 268 (label -> simpleIdentifier .) ]


state 196

    (30) multiVariableDeclaration -> LPAREN . multiVariableDeclarationRecursive RPAREN
    (31) multiVariableDeclaration -> LPAREN . RPAREN
    (134) parenthesizedDirectlyAssignableExpression -> LPAREN . directlyAssignableExpression RPAREN
    (173) parenthesizedExpression -> LPAREN . expression RPAREN
    (32) multiVariableDeclarationRecursive -> . variableDeclaration
    (33) multiVariableDeclarationRecursive -> . variableDeclaration COMMA multiVariableDeclarationRecursive
    (131) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (132) directlyAssignableExpression -> . simpleIdentifier
    (133) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (8) expression -> . disjunction
    (28) variableDeclaration -> . simpleIdentifier DOISP type
    (29) variableDeclaration -> . simpleIdentifier
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (134) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (42) typeModifier -> . SUSPEND
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT

    RPAREN          shift and go to state 295
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LPAREN          shift and go to state 108
    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61

    multiVariableDeclarationRecursive shift and go to state 294
    directlyAssignableExpression   shift and go to state 229
    expression                     shift and go to state 175
    variableDeclaration            shift and go to state 296
    postfixUnaryExpression         shift and go to state 109
    simpleIdentifier               shift and go to state 297
    parenthesizedDirectlyAssignableExpression shift and go to state 110
    disjunction                    shift and go to state 30
    primaryExpression              shift and go to state 46
    conjunction                    shift and go to state 31
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    equality                       shift and go to state 32
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    comparison                     shift and go to state 33
    typeModifier                   shift and go to state 75
    infixOperation                 shift and go to state 34
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    unaryPrefix                    shift and go to state 45
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48

state 197

    (199) anonymousFunction -> FUN typePonto . parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> FUN typePonto . parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> FUN typePonto . parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> FUN typePonto . parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> FUN typePonto . parametersWithOptionalType functionBody
    (208) anonymousFunction -> FUN typePonto . parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> FUN typePonto . parametersWithOptionalType optionalType
    (210) anonymousFunction -> FUN typePonto . parametersWithOptionalType
    (178) parametersWithOptionalType -> . LPAREN parametersWithOptionalTypeRecursive RPAREN
    (179) parametersWithOptionalType -> . LPAREN RPAREN

    LPAREN          shift and go to state 299

    parametersWithOptionalType     shift and go to state 298

state 198

    (200) anonymousFunction -> FUN parametersWithOptionalType . optionalType typeConstraints functionBody
    (204) anonymousFunction -> FUN parametersWithOptionalType . typeConstraints functionBody
    (205) anonymousFunction -> FUN parametersWithOptionalType . optionalType functionBody
    (206) anonymousFunction -> FUN parametersWithOptionalType . optionalType typeConstraints
    (211) anonymousFunction -> FUN parametersWithOptionalType . functionBody
    (212) anonymousFunction -> FUN parametersWithOptionalType . optionalType
    (213) anonymousFunction -> FUN parametersWithOptionalType . typeConstraints
    (214) anonymousFunction -> FUN parametersWithOptionalType .
    (3) optionalType -> . DOISP type
    (217) typeConstraints -> . simpleIdentifier DOISP type
    (20) functionBody -> . block
    (21) functionBody -> . ATRIBUICAO expression
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (72) block -> . LCHAVE statements RCHAVE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for LCHAVE resolved as shift
    FUN             reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    $end            reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    FOR             reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    WHILE           reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    DO              reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    VAR             reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    VAL             reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    LPAREN          reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    LITERAL_STRING  reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    NUMBER          reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    COLONCOLON      reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    LCCT            reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    IF              reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    RETURN          reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    RETURN_AT       reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    CONTINUE        reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    CONTINUE_AT     reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    BREAK           reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    BREAK_AT        reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    INCREMENTO      reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    DECREMENTO      reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    MINUS           reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    PLUS            reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    NOT             reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    SUSPEND         reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    RCHAVE          reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    PV              reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    ELSE            reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    MENOR           reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    PONTO           reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    AS              reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    MULT            reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    DIVIDE          reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    MOD             reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    PONTOPONTO      reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    ELVIS           reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    IN              reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    NOT_IN          reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    IS              reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    NOT_IS          reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    MAIOR           reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    MENORIGUAL      reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    MAIORIGUAL      reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    DIFERENTE       reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    IDENTIDADE      reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    IGUALDADE       reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    SEMIDENTIDADE   reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    AND             reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    OR              reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    MAISIGUAL       reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    MENOSIGUAL      reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    MULTIGUAL       reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    DIVIGUAL        reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    MODIGUAL        reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    RPAREN          reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    COMMA           reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    RCCT            reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .)
    DOISP           shift and go to state 21
    ATRIBUICAO      shift and go to state 20
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCHAVE          shift and go to state 22

  ! ID              [ reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! CROSSINLINE     [ reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! IMPORT          [ reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! INIT            [ reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! NOINLINE        [ reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! OUT             [ reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! VARARG          [ reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! WHERE           [ reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! OPERATOR        [ reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .) ]
  ! LCHAVE          [ reduce using rule 214 (anonymousFunction -> FUN parametersWithOptionalType .) ]

    optionalType                   shift and go to state 300
    typeConstraints                shift and go to state 301
    functionBody                   shift and go to state 302
    simpleIdentifier               shift and go to state 303
    block                          shift and go to state 19

state 199

    (198) typePonto -> type . PONTO

    PONTO           shift and go to state 304


state 200

    (178) parametersWithOptionalType -> LPAREN . parametersWithOptionalTypeRecursive RPAREN
    (179) parametersWithOptionalType -> LPAREN . RPAREN
    (60) parenthesizedType -> LPAREN . type RPAREN
    (59) functionTypeParameters -> LPAREN . parameterOrType parameterOrTypeRecursive RPAREN
    (180) parametersWithOptionalTypeRecursive -> . parameterWithOptionalType
    (181) parametersWithOptionalTypeRecursive -> . parameterWithOptionalType COMMA parametersWithOptionalTypeRecursive
    (35) type -> . typeModifiers optype
    (36) type -> . optype
    (55) parameterOrType -> . parameter
    (56) parameterOrType -> . type
    (182) parameterWithOptionalType -> . parameterModifiers simpleIdentifier optionalType
    (183) parameterWithOptionalType -> . parameterModifiers simpleIdentifier
    (184) parameterWithOptionalType -> . simpleIdentifier optionalType
    (185) parameterWithOptionalType -> . simpleIdentifier
    (40) typeModifiers -> . typeModifier
    (41) typeModifiers -> . typeModifier typeModifiers
    (37) optype -> . parenthesizedType
    (38) optype -> . functionType
    (39) optype -> . userType
    (34) parameter -> . simpleIdentifier optionalType
    (186) parameterModifiers -> . VARARG
    (187) parameterModifiers -> . NOINLINE
    (188) parameterModifiers -> . CROSSINLINE
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (42) typeModifier -> . SUSPEND
    (60) parenthesizedType -> . LPAREN type RPAREN
    (53) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (54) functionType -> . functionTypeParameters SETA type
    (46) userType -> . simpleUserType
    (61) receiverType -> . typeModifier parenthesizedType
    (59) functionTypeParameters -> . LPAREN parameterOrType parameterOrTypeRecursive RPAREN
    (47) simpleUserType -> . simpleIdentifier typeArguments
    (48) simpleUserType -> . simpleIdentifier

    RPAREN          shift and go to state 306
    VARARG          shift and go to state 310
    NOINLINE        shift and go to state 311
    CROSSINLINE     shift and go to state 312
    ID              shift and go to state 6
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    OUT             shift and go to state 11
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    SUSPEND         shift and go to state 78
    LPAREN          shift and go to state 86

    parametersWithOptionalTypeRecursive shift and go to state 305
    type                           shift and go to state 204
    parameterOrType                shift and go to state 205
    parameterWithOptionalType      shift and go to state 307
    typeModifiers                  shift and go to state 80
    optype                         shift and go to state 81
    parameter                      shift and go to state 206
    parameterModifiers             shift and go to state 308
    simpleIdentifier               shift and go to state 309
    typeModifier                   shift and go to state 82
    parenthesizedType              shift and go to state 83
    functionType                   shift and go to state 84
    userType                       shift and go to state 85
    receiverType                   shift and go to state 87
    functionTypeParameters         shift and go to state 88
    simpleUserType                 shift and go to state 89

state 201

    (35) type -> typeModifiers optype .

    ATRIBUICAO      reduce using rule 35 (type -> typeModifiers optype .)
    LCHAVE          reduce using rule 35 (type -> typeModifiers optype .)
    COMMA           reduce using rule 35 (type -> typeModifiers optype .)
    RPAREN          reduce using rule 35 (type -> typeModifiers optype .)
    SETA            reduce using rule 35 (type -> typeModifiers optype .)
    ID              reduce using rule 35 (type -> typeModifiers optype .)
    CROSSINLINE     reduce using rule 35 (type -> typeModifiers optype .)
    IMPORT          reduce using rule 35 (type -> typeModifiers optype .)
    INIT            reduce using rule 35 (type -> typeModifiers optype .)
    NOINLINE        reduce using rule 35 (type -> typeModifiers optype .)
    OUT             reduce using rule 35 (type -> typeModifiers optype .)
    VARARG          reduce using rule 35 (type -> typeModifiers optype .)
    WHERE           reduce using rule 35 (type -> typeModifiers optype .)
    OPERATOR        reduce using rule 35 (type -> typeModifiers optype .)
    FUN             reduce using rule 35 (type -> typeModifiers optype .)
    $end            reduce using rule 35 (type -> typeModifiers optype .)
    FOR             reduce using rule 35 (type -> typeModifiers optype .)
    WHILE           reduce using rule 35 (type -> typeModifiers optype .)
    DO              reduce using rule 35 (type -> typeModifiers optype .)
    VAR             reduce using rule 35 (type -> typeModifiers optype .)
    VAL             reduce using rule 35 (type -> typeModifiers optype .)
    LPAREN          reduce using rule 35 (type -> typeModifiers optype .)
    LITERAL_STRING  reduce using rule 35 (type -> typeModifiers optype .)
    NUMBER          reduce using rule 35 (type -> typeModifiers optype .)
    COLONCOLON      reduce using rule 35 (type -> typeModifiers optype .)
    LCCT            reduce using rule 35 (type -> typeModifiers optype .)
    IF              reduce using rule 35 (type -> typeModifiers optype .)
    RETURN          reduce using rule 35 (type -> typeModifiers optype .)
    RETURN_AT       reduce using rule 35 (type -> typeModifiers optype .)
    CONTINUE        reduce using rule 35 (type -> typeModifiers optype .)
    CONTINUE_AT     reduce using rule 35 (type -> typeModifiers optype .)
    BREAK           reduce using rule 35 (type -> typeModifiers optype .)
    BREAK_AT        reduce using rule 35 (type -> typeModifiers optype .)
    INCREMENTO      reduce using rule 35 (type -> typeModifiers optype .)
    DECREMENTO      reduce using rule 35 (type -> typeModifiers optype .)
    MINUS           reduce using rule 35 (type -> typeModifiers optype .)
    PLUS            reduce using rule 35 (type -> typeModifiers optype .)
    NOT             reduce using rule 35 (type -> typeModifiers optype .)
    SUSPEND         reduce using rule 35 (type -> typeModifiers optype .)
    RCHAVE          reduce using rule 35 (type -> typeModifiers optype .)
    PV              reduce using rule 35 (type -> typeModifiers optype .)
    ELSE            reduce using rule 35 (type -> typeModifiers optype .)
    MENOR           reduce using rule 35 (type -> typeModifiers optype .)
    PONTO           reduce using rule 35 (type -> typeModifiers optype .)
    AS              reduce using rule 35 (type -> typeModifiers optype .)
    MULT            reduce using rule 35 (type -> typeModifiers optype .)
    DIVIDE          reduce using rule 35 (type -> typeModifiers optype .)
    MOD             reduce using rule 35 (type -> typeModifiers optype .)
    PONTOPONTO      reduce using rule 35 (type -> typeModifiers optype .)
    ELVIS           reduce using rule 35 (type -> typeModifiers optype .)
    IN              reduce using rule 35 (type -> typeModifiers optype .)
    NOT_IN          reduce using rule 35 (type -> typeModifiers optype .)
    IS              reduce using rule 35 (type -> typeModifiers optype .)
    NOT_IS          reduce using rule 35 (type -> typeModifiers optype .)
    MAIOR           reduce using rule 35 (type -> typeModifiers optype .)
    MENORIGUAL      reduce using rule 35 (type -> typeModifiers optype .)
    MAIORIGUAL      reduce using rule 35 (type -> typeModifiers optype .)
    DIFERENTE       reduce using rule 35 (type -> typeModifiers optype .)
    IDENTIDADE      reduce using rule 35 (type -> typeModifiers optype .)
    IGUALDADE       reduce using rule 35 (type -> typeModifiers optype .)
    SEMIDENTIDADE   reduce using rule 35 (type -> typeModifiers optype .)
    AND             reduce using rule 35 (type -> typeModifiers optype .)
    OR              reduce using rule 35 (type -> typeModifiers optype .)
    MAISIGUAL       reduce using rule 35 (type -> typeModifiers optype .)
    MENOSIGUAL      reduce using rule 35 (type -> typeModifiers optype .)
    MULTIGUAL       reduce using rule 35 (type -> typeModifiers optype .)
    DIVIGUAL        reduce using rule 35 (type -> typeModifiers optype .)
    MODIGUAL        reduce using rule 35 (type -> typeModifiers optype .)
    RCCT            reduce using rule 35 (type -> typeModifiers optype .)


state 202

    (40) typeModifiers -> typeModifier .
    (41) typeModifiers -> typeModifier . typeModifiers
    (40) typeModifiers -> . typeModifier
    (41) typeModifiers -> . typeModifier typeModifiers
    (42) typeModifier -> . SUSPEND

  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 40 (typeModifiers -> typeModifier .)
    ID              reduce using rule 40 (typeModifiers -> typeModifier .)
    CROSSINLINE     reduce using rule 40 (typeModifiers -> typeModifier .)
    IMPORT          reduce using rule 40 (typeModifiers -> typeModifier .)
    INIT            reduce using rule 40 (typeModifiers -> typeModifier .)
    NOINLINE        reduce using rule 40 (typeModifiers -> typeModifier .)
    OUT             reduce using rule 40 (typeModifiers -> typeModifier .)
    VARARG          reduce using rule 40 (typeModifiers -> typeModifier .)
    WHERE           reduce using rule 40 (typeModifiers -> typeModifier .)
    OPERATOR        reduce using rule 40 (typeModifiers -> typeModifier .)
    SUSPEND         shift and go to state 78

  ! SUSPEND         [ reduce using rule 40 (typeModifiers -> typeModifier .) ]

    typeModifier                   shift and go to state 202
    typeModifiers                  shift and go to state 203

state 203

    (41) typeModifiers -> typeModifier typeModifiers .

    LPAREN          reduce using rule 41 (typeModifiers -> typeModifier typeModifiers .)
    SUSPEND         reduce using rule 41 (typeModifiers -> typeModifier typeModifiers .)
    ID              reduce using rule 41 (typeModifiers -> typeModifier typeModifiers .)
    CROSSINLINE     reduce using rule 41 (typeModifiers -> typeModifier typeModifiers .)
    IMPORT          reduce using rule 41 (typeModifiers -> typeModifier typeModifiers .)
    INIT            reduce using rule 41 (typeModifiers -> typeModifier typeModifiers .)
    NOINLINE        reduce using rule 41 (typeModifiers -> typeModifier typeModifiers .)
    OUT             reduce using rule 41 (typeModifiers -> typeModifier typeModifiers .)
    VARARG          reduce using rule 41 (typeModifiers -> typeModifier typeModifiers .)
    WHERE           reduce using rule 41 (typeModifiers -> typeModifier typeModifiers .)
    OPERATOR        reduce using rule 41 (typeModifiers -> typeModifier typeModifiers .)


state 204

    (60) parenthesizedType -> LPAREN type . RPAREN
    (56) parameterOrType -> type .

    RPAREN          shift and go to state 313
    COMMA           reduce using rule 56 (parameterOrType -> type .)


state 205

    (59) functionTypeParameters -> LPAREN parameterOrType . parameterOrTypeRecursive RPAREN
    (57) parameterOrTypeRecursive -> . COMMA parameterOrType
    (58) parameterOrTypeRecursive -> . COMMA parameterOrType parameterOrTypeRecursive

    COMMA           shift and go to state 315

    parameterOrTypeRecursive       shift and go to state 314

state 206

    (55) parameterOrType -> parameter .

    COMMA           reduce using rule 55 (parameterOrType -> parameter .)
    RPAREN          reduce using rule 55 (parameterOrType -> parameter .)


state 207

    (34) parameter -> simpleIdentifier . optionalType
    (47) simpleUserType -> simpleIdentifier . typeArguments
    (48) simpleUserType -> simpleIdentifier .
    (3) optionalType -> . DOISP type
    (153) typeArguments -> . MENOR typeArgumentsRecursive MAIOR
    (154) typeArguments -> . MENOR MAIOR

    RPAREN          reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    COMMA           reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    DOISP           shift and go to state 21
    MENOR           shift and go to state 165

    optionalType                   shift and go to state 119
    typeArguments                  shift and go to state 210

state 208

    (53) functionType -> receiverType PONTO . functionTypeParameters SETA type
    (59) functionTypeParameters -> . LPAREN parameterOrType parameterOrTypeRecursive RPAREN

    LPAREN          shift and go to state 317

    functionTypeParameters         shift and go to state 316

state 209

    (54) functionType -> functionTypeParameters SETA . type
    (35) type -> . typeModifiers optype
    (36) type -> . optype
    (40) typeModifiers -> . typeModifier
    (41) typeModifiers -> . typeModifier typeModifiers
    (37) optype -> . parenthesizedType
    (38) optype -> . functionType
    (39) optype -> . userType
    (42) typeModifier -> . SUSPEND
    (60) parenthesizedType -> . LPAREN type RPAREN
    (53) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (54) functionType -> . functionTypeParameters SETA type
    (46) userType -> . simpleUserType
    (61) receiverType -> . typeModifier parenthesizedType
    (59) functionTypeParameters -> . LPAREN parameterOrType parameterOrTypeRecursive RPAREN
    (47) simpleUserType -> . simpleIdentifier typeArguments
    (48) simpleUserType -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    SUSPEND         shift and go to state 78
    LPAREN          shift and go to state 86
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    functionTypeParameters         shift and go to state 88
    type                           shift and go to state 318
    typeModifiers                  shift and go to state 80
    optype                         shift and go to state 81
    typeModifier                   shift and go to state 82
    parenthesizedType              shift and go to state 83
    functionType                   shift and go to state 84
    userType                       shift and go to state 85
    receiverType                   shift and go to state 87
    simpleUserType                 shift and go to state 89
    simpleIdentifier               shift and go to state 90

state 210

    (47) simpleUserType -> simpleIdentifier typeArguments .

    ATRIBUICAO      reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    LCHAVE          reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    COMMA           reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    RPAREN          reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    SETA            reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    ID              reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    CROSSINLINE     reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    IMPORT          reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    INIT            reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    NOINLINE        reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    OUT             reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    VARARG          reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    WHERE           reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    OPERATOR        reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    FUN             reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    $end            reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    FOR             reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    WHILE           reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    DO              reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    VAR             reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    VAL             reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    LPAREN          reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    LITERAL_STRING  reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    NUMBER          reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    COLONCOLON      reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    LCCT            reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    IF              reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    RETURN          reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    RETURN_AT       reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    CONTINUE        reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    CONTINUE_AT     reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    BREAK           reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    BREAK_AT        reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    INCREMENTO      reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    DECREMENTO      reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    MINUS           reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    PLUS            reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    NOT             reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    SUSPEND         reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    RCHAVE          reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    PV              reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    ELSE            reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    MENOR           reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    PONTO           reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    AS              reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    MULT            reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    DIVIDE          reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    MOD             reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    PONTOPONTO      reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    ELVIS           reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    IN              reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    NOT_IN          reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    IS              reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    NOT_IS          reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    MAIOR           reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    MENORIGUAL      reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    MAIORIGUAL      reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    DIFERENTE       reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    IDENTIDADE      reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    IGUALDADE       reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    SEMIDENTIDADE   reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    AND             reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    OR              reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    MAISIGUAL       reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    MENOSIGUAL      reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    MULTIGUAL       reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    DIVIGUAL        reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    MODIGUAL        reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)
    RCCT            reduce using rule 47 (simpleUserType -> simpleIdentifier typeArguments .)


state 211

    (72) block -> LCHAVE statements RCHAVE .

    FUN             reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    $end            reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    ID              reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    FOR             reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    WHILE           reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    DO              reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    VAR             reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    VAL             reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    CROSSINLINE     reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    IMPORT          reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    INIT            reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    NOINLINE        reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    OUT             reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    VARARG          reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    WHERE           reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    OPERATOR        reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    LPAREN          reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    LITERAL_STRING  reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    NUMBER          reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    COLONCOLON      reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    LCCT            reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    IF              reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    RETURN          reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    RETURN_AT       reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    CONTINUE        reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    CONTINUE_AT     reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    BREAK           reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    BREAK_AT        reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    LCHAVE          reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    INCREMENTO      reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    DECREMENTO      reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    MINUS           reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    PLUS            reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    NOT             reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    SUSPEND         reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    RCHAVE          reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    PV              reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    ELSE            reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    MENOR           reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    PONTO           reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    AS              reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    MULT            reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    DIVIDE          reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    MOD             reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    PONTOPONTO      reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    ELVIS           reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    IN              reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    NOT_IN          reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    IS              reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    NOT_IS          reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    MAIOR           reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    MENORIGUAL      reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    MAIORIGUAL      reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    DIFERENTE       reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    IDENTIDADE      reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    IGUALDADE       reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    SEMIDENTIDADE   reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    AND             reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    OR              reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    MAISIGUAL       reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    MENOSIGUAL      reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    MULTIGUAL       reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    DIVIGUAL        reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    MODIGUAL        reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    RPAREN          reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    COMMA           reduce using rule 72 (block -> LCHAVE statements RCHAVE .)
    RCCT            reduce using rule 72 (block -> LCHAVE statements RCHAVE .)


state 212

    (63) statements -> statement statements .

    RCHAVE          reduce using rule 63 (statements -> statement statements .)


state 213

    (4) functionDeclaration -> FUN simpleIdentifier . functionValueParameters functionBody
    (5) functionDeclaration -> FUN simpleIdentifier . functionValueParameters optionalType functionBody
    (47) simpleUserType -> simpleIdentifier . typeArguments
    (48) simpleUserType -> simpleIdentifier .
    (22) functionValueParameters -> . LPAREN functionValueParametersRecursive RPAREN
    (23) functionValueParameters -> . LPAREN RPAREN
    (153) typeArguments -> . MENOR typeArgumentsRecursive MAIOR
    (154) typeArguments -> . MENOR MAIOR

    PONTO           reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    LPAREN          shift and go to state 16
    MENOR           shift and go to state 165

    functionValueParameters        shift and go to state 15
    typeArguments                  shift and go to state 210

state 214

    (86) assignment -> directlyAssignableExpression ATRIBUICAO . expression
    (8) expression -> . disjunction
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    expression                     shift and go to state 319
    disjunction                    shift and go to state 30
    conjunction                    shift and go to state 31
    equality                       shift and go to state 32
    comparison                     shift and go to state 33
    infixOperation                 shift and go to state 34
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    simpleIdentifier               shift and go to state 38
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 215

    (87) assignment -> asExpression assignmentAndOperator . expression
    (8) expression -> . disjunction
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    asExpression                   shift and go to state 41
    expression                     shift and go to state 320
    disjunction                    shift and go to state 30
    conjunction                    shift and go to state 31
    equality                       shift and go to state 32
    comparison                     shift and go to state 33
    infixOperation                 shift and go to state 34
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    simpleIdentifier               shift and go to state 38
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 216

    (234) assignmentAndOperator -> MAISIGUAL .

    LITERAL_STRING  reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    NUMBER          reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    INCREMENTO      reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    DECREMENTO      reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    MINUS           reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    PLUS            reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    NOT             reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    LPAREN          reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    ID              reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    CROSSINLINE     reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    IMPORT          reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    INIT            reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    NOINLINE        reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    OUT             reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    VARARG          reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    WHERE           reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    OPERATOR        reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    COLONCOLON      reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    LCCT            reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    IF              reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    RETURN          reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    RETURN_AT       reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    CONTINUE        reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    CONTINUE_AT     reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    BREAK           reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    BREAK_AT        reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    LCHAVE          reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    FUN             reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    SUSPEND         reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)


state 217

    (235) assignmentAndOperator -> MENOSIGUAL .

    LITERAL_STRING  reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    NUMBER          reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    INCREMENTO      reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    DECREMENTO      reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    MINUS           reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    PLUS            reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    NOT             reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    LPAREN          reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    ID              reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    CROSSINLINE     reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    IMPORT          reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    INIT            reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    NOINLINE        reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    OUT             reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    VARARG          reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    WHERE           reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    OPERATOR        reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    COLONCOLON      reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    LCCT            reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    IF              reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    RETURN          reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    RETURN_AT       reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    CONTINUE        reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    CONTINUE_AT     reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    BREAK           reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    BREAK_AT        reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    LCHAVE          reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    FUN             reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    SUSPEND         reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)


state 218

    (236) assignmentAndOperator -> MULTIGUAL .

    LITERAL_STRING  reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    NUMBER          reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    INCREMENTO      reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    DECREMENTO      reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    MINUS           reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    PLUS            reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    NOT             reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    LPAREN          reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    ID              reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    CROSSINLINE     reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    IMPORT          reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    INIT            reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    NOINLINE        reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    OUT             reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    VARARG          reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    WHERE           reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    OPERATOR        reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    COLONCOLON      reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    LCCT            reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    IF              reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    RETURN          reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    RETURN_AT       reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    CONTINUE        reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    CONTINUE_AT     reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    BREAK           reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    BREAK_AT        reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    LCHAVE          reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    FUN             reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    SUSPEND         reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)


state 219

    (237) assignmentAndOperator -> DIVIGUAL .

    LITERAL_STRING  reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    NUMBER          reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    INCREMENTO      reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    DECREMENTO      reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    MINUS           reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    PLUS            reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    NOT             reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    LPAREN          reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    ID              reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    CROSSINLINE     reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    IMPORT          reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    INIT            reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    NOINLINE        reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    OUT             reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    VARARG          reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    WHERE           reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    OPERATOR        reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    COLONCOLON      reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    LCCT            reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    IF              reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    RETURN          reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    RETURN_AT       reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    CONTINUE        reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    CONTINUE_AT     reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    BREAK           reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    BREAK_AT        reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    LCHAVE          reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    FUN             reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    SUSPEND         reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)


state 220

    (238) assignmentAndOperator -> MODIGUAL .

    LITERAL_STRING  reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    NUMBER          reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    INCREMENTO      reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    DECREMENTO      reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    MINUS           reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    PLUS            reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    NOT             reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    LPAREN          reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    ID              reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    CROSSINLINE     reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    IMPORT          reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    INIT            reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    NOINLINE        reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    OUT             reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    VARARG          reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    WHERE           reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    OPERATOR        reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    COLONCOLON      reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    LCCT            reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    IF              reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    RETURN          reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    RETURN_AT       reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    CONTINUE        reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    CONTINUE_AT     reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    BREAK           reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    BREAK_AT        reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    LCHAVE          reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    FUN             reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    SUSPEND         reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)


state 221

    (11) propertyDeclaration -> varOrVal typeParameters . genericVariableDeclaration ATRIBUICAO expression PV
    (14) propertyDeclaration -> varOrVal typeParameters . genericVariableDeclaration ATRIBUICAO expression
    (6) genericVariableDeclaration -> . multiVariableDeclaration
    (7) genericVariableDeclaration -> . variableDeclaration
    (30) multiVariableDeclaration -> . LPAREN multiVariableDeclarationRecursive RPAREN
    (31) multiVariableDeclaration -> . LPAREN RPAREN
    (28) variableDeclaration -> . simpleIdentifier DOISP type
    (29) variableDeclaration -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    LPAREN          shift and go to state 226
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    genericVariableDeclaration     shift and go to state 321
    multiVariableDeclaration       shift and go to state 224
    variableDeclaration            shift and go to state 225
    simpleIdentifier               shift and go to state 227

state 222

    (12) propertyDeclaration -> varOrVal genericVariableDeclaration . ATRIBUICAO expression PV
    (13) propertyDeclaration -> varOrVal genericVariableDeclaration . ATRIBUICAO expression

    ATRIBUICAO      shift and go to state 322


state 223

    (15) typeParameters -> MENOR . typeParameter typeParametersRecursive MAIOR
    (18) typeParameter -> . simpleIdentifier
    (19) typeParameter -> . simpleIdentifier DOISP type
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    typeParameter                  shift and go to state 323
    simpleIdentifier               shift and go to state 324

state 224

    (6) genericVariableDeclaration -> multiVariableDeclaration .

    ATRIBUICAO      reduce using rule 6 (genericVariableDeclaration -> multiVariableDeclaration .)
    IN              reduce using rule 6 (genericVariableDeclaration -> multiVariableDeclaration .)


state 225

    (7) genericVariableDeclaration -> variableDeclaration .

    ATRIBUICAO      reduce using rule 7 (genericVariableDeclaration -> variableDeclaration .)
    IN              reduce using rule 7 (genericVariableDeclaration -> variableDeclaration .)


state 226

    (30) multiVariableDeclaration -> LPAREN . multiVariableDeclarationRecursive RPAREN
    (31) multiVariableDeclaration -> LPAREN . RPAREN
    (32) multiVariableDeclarationRecursive -> . variableDeclaration
    (33) multiVariableDeclarationRecursive -> . variableDeclaration COMMA multiVariableDeclarationRecursive
    (28) variableDeclaration -> . simpleIdentifier DOISP type
    (29) variableDeclaration -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    RPAREN          shift and go to state 295
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    multiVariableDeclarationRecursive shift and go to state 294
    variableDeclaration            shift and go to state 296
    simpleIdentifier               shift and go to state 227

state 227

    (28) variableDeclaration -> simpleIdentifier . DOISP type
    (29) variableDeclaration -> simpleIdentifier .

    DOISP           shift and go to state 293
    ATRIBUICAO      reduce using rule 29 (variableDeclaration -> simpleIdentifier .)
    COMMA           reduce using rule 29 (variableDeclaration -> simpleIdentifier .)
    RPAREN          reduce using rule 29 (variableDeclaration -> simpleIdentifier .)
    IN              reduce using rule 29 (variableDeclaration -> simpleIdentifier .)
    SETA            reduce using rule 29 (variableDeclaration -> simpleIdentifier .)


state 228

    (84) chamadaDeFuncao -> ID LPAREN . RPAREN
    (85) chamadaDeFuncao -> ID LPAREN . parametersFunction RPAREN
    (82) parametersFunction -> . primaryExpression
    (83) parametersFunction -> . primaryExpression COMMA parametersFunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    RPAREN          shift and go to state 325
    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    parametersFunction             shift and go to state 326
    primaryExpression              shift and go to state 327
    parenthesizedExpression        shift and go to state 49
    simpleIdentifier               shift and go to state 153
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 229

    (134) parenthesizedDirectlyAssignableExpression -> LPAREN directlyAssignableExpression . RPAREN

    RPAREN          shift and go to state 328


state 230

    (131) directlyAssignableExpression -> postfixUnaryExpression assignableSuffix .

    ATRIBUICAO      reduce using rule 131 (directlyAssignableExpression -> postfixUnaryExpression assignableSuffix .)
    RPAREN          reduce using rule 131 (directlyAssignableExpression -> postfixUnaryExpression assignableSuffix .)


state 231

    (138) assignableSuffix -> typeArguments .

    ATRIBUICAO      reduce using rule 138 (assignableSuffix -> typeArguments .)
    RPAREN          reduce using rule 138 (assignableSuffix -> typeArguments .)


state 232

    (139) assignableSuffix -> indexingSuffix .

    ATRIBUICAO      reduce using rule 139 (assignableSuffix -> indexingSuffix .)
    RPAREN          reduce using rule 139 (assignableSuffix -> indexingSuffix .)


state 233

    (140) assignableSuffix -> navigationSuffix .

    ATRIBUICAO      reduce using rule 140 (assignableSuffix -> navigationSuffix .)
    RPAREN          reduce using rule 140 (assignableSuffix -> navigationSuffix .)


state 234

    (76) forStatement -> FOR LPAREN . genericVariableDeclaration IN expression RPAREN controlStructureBody
    (77) forStatement -> FOR LPAREN . genericVariableDeclaration IN expression RPAREN
    (6) genericVariableDeclaration -> . multiVariableDeclaration
    (7) genericVariableDeclaration -> . variableDeclaration
    (30) multiVariableDeclaration -> . LPAREN multiVariableDeclarationRecursive RPAREN
    (31) multiVariableDeclaration -> . LPAREN RPAREN
    (28) variableDeclaration -> . simpleIdentifier DOISP type
    (29) variableDeclaration -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    LPAREN          shift and go to state 226
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    genericVariableDeclaration     shift and go to state 329
    multiVariableDeclaration       shift and go to state 224
    variableDeclaration            shift and go to state 225
    simpleIdentifier               shift and go to state 227

state 235

    (78) whileStatement -> WHILE LPAREN . expression RPAREN controlStructureBody
    (79) whileStatement -> WHILE LPAREN . expression RPAREN PV
    (8) expression -> . disjunction
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    expression                     shift and go to state 330
    disjunction                    shift and go to state 30
    conjunction                    shift and go to state 31
    equality                       shift and go to state 32
    comparison                     shift and go to state 33
    infixOperation                 shift and go to state 34
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    simpleIdentifier               shift and go to state 38
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 236

    (80) doWhileStatement -> DO controlStructureBody . WHILE LPAREN expression RPAREN

    WHILE           shift and go to state 331


state 237

    (81) doWhileStatement -> DO WHILE . LPAREN expression RPAREN
    (78) whileStatement -> WHILE . LPAREN expression RPAREN controlStructureBody
    (79) whileStatement -> WHILE . LPAREN expression RPAREN PV

    LPAREN          shift and go to state 332


state 238

    (70) controlStructureBody -> block .

    WHILE           reduce using rule 70 (controlStructureBody -> block .)
    FUN             reduce using rule 70 (controlStructureBody -> block .)
    $end            reduce using rule 70 (controlStructureBody -> block .)
    ID              reduce using rule 70 (controlStructureBody -> block .)
    FOR             reduce using rule 70 (controlStructureBody -> block .)
    DO              reduce using rule 70 (controlStructureBody -> block .)
    VAR             reduce using rule 70 (controlStructureBody -> block .)
    VAL             reduce using rule 70 (controlStructureBody -> block .)
    CROSSINLINE     reduce using rule 70 (controlStructureBody -> block .)
    IMPORT          reduce using rule 70 (controlStructureBody -> block .)
    INIT            reduce using rule 70 (controlStructureBody -> block .)
    NOINLINE        reduce using rule 70 (controlStructureBody -> block .)
    OUT             reduce using rule 70 (controlStructureBody -> block .)
    VARARG          reduce using rule 70 (controlStructureBody -> block .)
    WHERE           reduce using rule 70 (controlStructureBody -> block .)
    OPERATOR        reduce using rule 70 (controlStructureBody -> block .)
    LPAREN          reduce using rule 70 (controlStructureBody -> block .)
    LITERAL_STRING  reduce using rule 70 (controlStructureBody -> block .)
    NUMBER          reduce using rule 70 (controlStructureBody -> block .)
    COLONCOLON      reduce using rule 70 (controlStructureBody -> block .)
    LCCT            reduce using rule 70 (controlStructureBody -> block .)
    IF              reduce using rule 70 (controlStructureBody -> block .)
    RETURN          reduce using rule 70 (controlStructureBody -> block .)
    RETURN_AT       reduce using rule 70 (controlStructureBody -> block .)
    CONTINUE        reduce using rule 70 (controlStructureBody -> block .)
    CONTINUE_AT     reduce using rule 70 (controlStructureBody -> block .)
    BREAK           reduce using rule 70 (controlStructureBody -> block .)
    BREAK_AT        reduce using rule 70 (controlStructureBody -> block .)
    LCHAVE          reduce using rule 70 (controlStructureBody -> block .)
    INCREMENTO      reduce using rule 70 (controlStructureBody -> block .)
    DECREMENTO      reduce using rule 70 (controlStructureBody -> block .)
    MINUS           reduce using rule 70 (controlStructureBody -> block .)
    PLUS            reduce using rule 70 (controlStructureBody -> block .)
    NOT             reduce using rule 70 (controlStructureBody -> block .)
    SUSPEND         reduce using rule 70 (controlStructureBody -> block .)
    RCHAVE          reduce using rule 70 (controlStructureBody -> block .)
    PV              reduce using rule 70 (controlStructureBody -> block .)
    ELSE            reduce using rule 70 (controlStructureBody -> block .)
    MENOR           reduce using rule 70 (controlStructureBody -> block .)
    PONTO           reduce using rule 70 (controlStructureBody -> block .)
    AS              reduce using rule 70 (controlStructureBody -> block .)
    MULT            reduce using rule 70 (controlStructureBody -> block .)
    DIVIDE          reduce using rule 70 (controlStructureBody -> block .)
    MOD             reduce using rule 70 (controlStructureBody -> block .)
    PONTOPONTO      reduce using rule 70 (controlStructureBody -> block .)
    ELVIS           reduce using rule 70 (controlStructureBody -> block .)
    IN              reduce using rule 70 (controlStructureBody -> block .)
    NOT_IN          reduce using rule 70 (controlStructureBody -> block .)
    IS              reduce using rule 70 (controlStructureBody -> block .)
    NOT_IS          reduce using rule 70 (controlStructureBody -> block .)
    MAIOR           reduce using rule 70 (controlStructureBody -> block .)
    MENORIGUAL      reduce using rule 70 (controlStructureBody -> block .)
    MAIORIGUAL      reduce using rule 70 (controlStructureBody -> block .)
    DIFERENTE       reduce using rule 70 (controlStructureBody -> block .)
    IDENTIDADE      reduce using rule 70 (controlStructureBody -> block .)
    IGUALDADE       reduce using rule 70 (controlStructureBody -> block .)
    SEMIDENTIDADE   reduce using rule 70 (controlStructureBody -> block .)
    AND             reduce using rule 70 (controlStructureBody -> block .)
    OR              reduce using rule 70 (controlStructureBody -> block .)
    MAISIGUAL       reduce using rule 70 (controlStructureBody -> block .)
    MENOSIGUAL      reduce using rule 70 (controlStructureBody -> block .)
    MULTIGUAL       reduce using rule 70 (controlStructureBody -> block .)
    DIVIGUAL        reduce using rule 70 (controlStructureBody -> block .)
    MODIGUAL        reduce using rule 70 (controlStructureBody -> block .)
    RPAREN          reduce using rule 70 (controlStructureBody -> block .)
    COMMA           reduce using rule 70 (controlStructureBody -> block .)
    RCCT            reduce using rule 70 (controlStructureBody -> block .)


state 239

    (71) controlStructureBody -> statement .

    WHILE           reduce using rule 71 (controlStructureBody -> statement .)
    FUN             reduce using rule 71 (controlStructureBody -> statement .)
    $end            reduce using rule 71 (controlStructureBody -> statement .)
    ID              reduce using rule 71 (controlStructureBody -> statement .)
    FOR             reduce using rule 71 (controlStructureBody -> statement .)
    DO              reduce using rule 71 (controlStructureBody -> statement .)
    VAR             reduce using rule 71 (controlStructureBody -> statement .)
    VAL             reduce using rule 71 (controlStructureBody -> statement .)
    CROSSINLINE     reduce using rule 71 (controlStructureBody -> statement .)
    IMPORT          reduce using rule 71 (controlStructureBody -> statement .)
    INIT            reduce using rule 71 (controlStructureBody -> statement .)
    NOINLINE        reduce using rule 71 (controlStructureBody -> statement .)
    OUT             reduce using rule 71 (controlStructureBody -> statement .)
    VARARG          reduce using rule 71 (controlStructureBody -> statement .)
    WHERE           reduce using rule 71 (controlStructureBody -> statement .)
    OPERATOR        reduce using rule 71 (controlStructureBody -> statement .)
    LPAREN          reduce using rule 71 (controlStructureBody -> statement .)
    LITERAL_STRING  reduce using rule 71 (controlStructureBody -> statement .)
    NUMBER          reduce using rule 71 (controlStructureBody -> statement .)
    COLONCOLON      reduce using rule 71 (controlStructureBody -> statement .)
    LCCT            reduce using rule 71 (controlStructureBody -> statement .)
    IF              reduce using rule 71 (controlStructureBody -> statement .)
    RETURN          reduce using rule 71 (controlStructureBody -> statement .)
    RETURN_AT       reduce using rule 71 (controlStructureBody -> statement .)
    CONTINUE        reduce using rule 71 (controlStructureBody -> statement .)
    CONTINUE_AT     reduce using rule 71 (controlStructureBody -> statement .)
    BREAK           reduce using rule 71 (controlStructureBody -> statement .)
    BREAK_AT        reduce using rule 71 (controlStructureBody -> statement .)
    LCHAVE          reduce using rule 71 (controlStructureBody -> statement .)
    INCREMENTO      reduce using rule 71 (controlStructureBody -> statement .)
    DECREMENTO      reduce using rule 71 (controlStructureBody -> statement .)
    MINUS           reduce using rule 71 (controlStructureBody -> statement .)
    PLUS            reduce using rule 71 (controlStructureBody -> statement .)
    NOT             reduce using rule 71 (controlStructureBody -> statement .)
    SUSPEND         reduce using rule 71 (controlStructureBody -> statement .)
    RCHAVE          reduce using rule 71 (controlStructureBody -> statement .)
    PV              reduce using rule 71 (controlStructureBody -> statement .)
    ELSE            reduce using rule 71 (controlStructureBody -> statement .)
    MENOR           reduce using rule 71 (controlStructureBody -> statement .)
    PONTO           reduce using rule 71 (controlStructureBody -> statement .)
    AS              reduce using rule 71 (controlStructureBody -> statement .)
    MULT            reduce using rule 71 (controlStructureBody -> statement .)
    DIVIDE          reduce using rule 71 (controlStructureBody -> statement .)
    MOD             reduce using rule 71 (controlStructureBody -> statement .)
    PONTOPONTO      reduce using rule 71 (controlStructureBody -> statement .)
    ELVIS           reduce using rule 71 (controlStructureBody -> statement .)
    IN              reduce using rule 71 (controlStructureBody -> statement .)
    NOT_IN          reduce using rule 71 (controlStructureBody -> statement .)
    IS              reduce using rule 71 (controlStructureBody -> statement .)
    NOT_IS          reduce using rule 71 (controlStructureBody -> statement .)
    MAIOR           reduce using rule 71 (controlStructureBody -> statement .)
    MENORIGUAL      reduce using rule 71 (controlStructureBody -> statement .)
    MAIORIGUAL      reduce using rule 71 (controlStructureBody -> statement .)
    DIFERENTE       reduce using rule 71 (controlStructureBody -> statement .)
    IDENTIDADE      reduce using rule 71 (controlStructureBody -> statement .)
    IGUALDADE       reduce using rule 71 (controlStructureBody -> statement .)
    SEMIDENTIDADE   reduce using rule 71 (controlStructureBody -> statement .)
    AND             reduce using rule 71 (controlStructureBody -> statement .)
    OR              reduce using rule 71 (controlStructureBody -> statement .)
    MAISIGUAL       reduce using rule 71 (controlStructureBody -> statement .)
    MENOSIGUAL      reduce using rule 71 (controlStructureBody -> statement .)
    MULTIGUAL       reduce using rule 71 (controlStructureBody -> statement .)
    DIVIGUAL        reduce using rule 71 (controlStructureBody -> statement .)
    MODIGUAL        reduce using rule 71 (controlStructureBody -> statement .)
    RPAREN          reduce using rule 71 (controlStructureBody -> statement .)
    COMMA           reduce using rule 71 (controlStructureBody -> statement .)
    RCCT            reduce using rule 71 (controlStructureBody -> statement .)


state 240

    (72) block -> LCHAVE . statements RCHAVE
    (189) lambdaLiteral -> LCHAVE . optionsLambdaLiteral RCHAVE
    (62) statements -> . statement
    (63) statements -> . statement statements
    (190) optionsLambdaLiteral -> . statements
    (191) optionsLambdaLiteral -> . lambdaParameters SETA statements
    (192) optionsLambdaLiteral -> . SETA statements
    (64) statement -> . functionDeclaration
    (65) statement -> . assignment
    (66) statement -> . loopStatement
    (67) statement -> . expression
    (68) statement -> . propertyDeclaration
    (69) statement -> . chamadaDeFuncao
    (193) lambdaParameters -> . lambdaParameter
    (194) lambdaParameters -> . lambdaParameter COMMA lambdaParameters
    (4) functionDeclaration -> . FUN simpleIdentifier functionValueParameters functionBody
    (5) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType functionBody
    (86) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (87) assignment -> . asExpression assignmentAndOperator expression
    (73) loopStatement -> . forStatement
    (74) loopStatement -> . whileStatement
    (75) loopStatement -> . doWhileStatement
    (8) expression -> . disjunction
    (11) propertyDeclaration -> . varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV
    (12) propertyDeclaration -> . varOrVal genericVariableDeclaration ATRIBUICAO expression PV
    (13) propertyDeclaration -> . varOrVal genericVariableDeclaration ATRIBUICAO expression
    (14) propertyDeclaration -> . varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression
    (84) chamadaDeFuncao -> . ID LPAREN RPAREN
    (85) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (195) lambdaParameter -> . variableDeclaration
    (196) lambdaParameter -> . multiVariableDeclaration optionalType
    (197) lambdaParameter -> . multiVariableDeclaration
    (131) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (132) directlyAssignableExpression -> . simpleIdentifier
    (133) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (76) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody
    (77) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN
    (78) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (79) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (80) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (81) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (9) varOrVal -> . VAR
    (10) varOrVal -> . VAL
    (28) variableDeclaration -> . simpleIdentifier DOISP type
    (29) variableDeclaration -> . simpleIdentifier
    (30) multiVariableDeclaration -> . LPAREN multiVariableDeclarationRecursive RPAREN
    (31) multiVariableDeclaration -> . LPAREN RPAREN
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (134) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (42) typeModifier -> . SUSPEND
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression

    SETA            shift and go to state 191
    FUN             shift and go to state 99
    ID              shift and go to state 107
    FOR             shift and go to state 111
    WHILE           shift and go to state 112
    DO              shift and go to state 113
    VAR             shift and go to state 114
    VAL             shift and go to state 115
    LPAREN          shift and go to state 196
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    SUSPEND         shift and go to state 78

    statements                     shift and go to state 333
    optionsLambdaLiteral           shift and go to state 188
    statement                      shift and go to state 92
    lambdaParameters               shift and go to state 190
    functionDeclaration            shift and go to state 93
    assignment                     shift and go to state 94
    loopStatement                  shift and go to state 95
    expression                     shift and go to state 96
    propertyDeclaration            shift and go to state 97
    chamadaDeFuncao                shift and go to state 98
    lambdaParameter                shift and go to state 192
    simpleIdentifier               shift and go to state 297
    directlyAssignableExpression   shift and go to state 101
    asExpression                   shift and go to state 102
    forStatement                   shift and go to state 103
    whileStatement                 shift and go to state 104
    doWhileStatement               shift and go to state 105
    disjunction                    shift and go to state 30
    varOrVal                       shift and go to state 106
    variableDeclaration            shift and go to state 193
    multiVariableDeclaration       shift and go to state 194
    postfixUnaryExpression         shift and go to state 109
    parenthesizedDirectlyAssignableExpression shift and go to state 110
    prefixUnaryExpression          shift and go to state 42
    conjunction                    shift and go to state 31
    primaryExpression              shift and go to state 46
    prefixUnaryExpressionRecursive shift and go to state 43
    equality                       shift and go to state 32
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    unaryPrefix                    shift and go to state 45
    comparison                     shift and go to state 33
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    infixOperation                 shift and go to state 34
    typeModifier                   shift and go to state 75
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40

state 241

    (25) functionValueParametersRecursive -> functionValueParameter COMMA functionValueParametersRecursive .

    RPAREN          reduce using rule 25 (functionValueParametersRecursive -> functionValueParameter COMMA functionValueParametersRecursive .)


state 242

    (26) functionValueParameter -> parameter ATRIBUICAO expression .

    COMMA           reduce using rule 26 (functionValueParameter -> parameter ATRIBUICAO expression .)
    RPAREN          reduce using rule 26 (functionValueParameter -> parameter ATRIBUICAO expression .)


state 243

    (89) disjunction -> conjunction OR disjunction .

    FUN             reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    $end            reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    ID              reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    FOR             reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    WHILE           reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    DO              reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    VAR             reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    VAL             reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    CROSSINLINE     reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    IMPORT          reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    INIT            reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    NOINLINE        reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    OUT             reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    VARARG          reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    WHERE           reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    OPERATOR        reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    LPAREN          reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    LITERAL_STRING  reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    NUMBER          reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    COLONCOLON      reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    LCCT            reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    IF              reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    RETURN          reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    RETURN_AT       reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    CONTINUE        reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    CONTINUE_AT     reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    BREAK           reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    BREAK_AT        reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    LCHAVE          reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    INCREMENTO      reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    DECREMENTO      reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    MINUS           reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    PLUS            reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    NOT             reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    SUSPEND         reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    RCHAVE          reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    PV              reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    ELSE            reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    MENOR           reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    PONTO           reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    AS              reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    MULT            reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    DIVIDE          reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    MOD             reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    PONTOPONTO      reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    ELVIS           reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    IN              reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    NOT_IN          reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    IS              reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    NOT_IS          reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    MAIOR           reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    MENORIGUAL      reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    MAIORIGUAL      reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    DIFERENTE       reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    IDENTIDADE      reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    IGUALDADE       reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    SEMIDENTIDADE   reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    AND             reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    OR              reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    MAISIGUAL       reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    MENOSIGUAL      reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    MULTIGUAL       reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    DIVIGUAL        reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    MODIGUAL        reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    RPAREN          reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    COMMA           reduce using rule 89 (disjunction -> conjunction OR disjunction .)
    RCCT            reduce using rule 89 (disjunction -> conjunction OR disjunction .)


state 244

    (91) conjunction -> equality AND conjunction .

    FUN             reduce using rule 91 (conjunction -> equality AND conjunction .)
    $end            reduce using rule 91 (conjunction -> equality AND conjunction .)
    ID              reduce using rule 91 (conjunction -> equality AND conjunction .)
    FOR             reduce using rule 91 (conjunction -> equality AND conjunction .)
    WHILE           reduce using rule 91 (conjunction -> equality AND conjunction .)
    DO              reduce using rule 91 (conjunction -> equality AND conjunction .)
    VAR             reduce using rule 91 (conjunction -> equality AND conjunction .)
    VAL             reduce using rule 91 (conjunction -> equality AND conjunction .)
    CROSSINLINE     reduce using rule 91 (conjunction -> equality AND conjunction .)
    IMPORT          reduce using rule 91 (conjunction -> equality AND conjunction .)
    INIT            reduce using rule 91 (conjunction -> equality AND conjunction .)
    NOINLINE        reduce using rule 91 (conjunction -> equality AND conjunction .)
    OUT             reduce using rule 91 (conjunction -> equality AND conjunction .)
    VARARG          reduce using rule 91 (conjunction -> equality AND conjunction .)
    WHERE           reduce using rule 91 (conjunction -> equality AND conjunction .)
    OPERATOR        reduce using rule 91 (conjunction -> equality AND conjunction .)
    LPAREN          reduce using rule 91 (conjunction -> equality AND conjunction .)
    LITERAL_STRING  reduce using rule 91 (conjunction -> equality AND conjunction .)
    NUMBER          reduce using rule 91 (conjunction -> equality AND conjunction .)
    COLONCOLON      reduce using rule 91 (conjunction -> equality AND conjunction .)
    LCCT            reduce using rule 91 (conjunction -> equality AND conjunction .)
    IF              reduce using rule 91 (conjunction -> equality AND conjunction .)
    RETURN          reduce using rule 91 (conjunction -> equality AND conjunction .)
    RETURN_AT       reduce using rule 91 (conjunction -> equality AND conjunction .)
    CONTINUE        reduce using rule 91 (conjunction -> equality AND conjunction .)
    CONTINUE_AT     reduce using rule 91 (conjunction -> equality AND conjunction .)
    BREAK           reduce using rule 91 (conjunction -> equality AND conjunction .)
    BREAK_AT        reduce using rule 91 (conjunction -> equality AND conjunction .)
    LCHAVE          reduce using rule 91 (conjunction -> equality AND conjunction .)
    INCREMENTO      reduce using rule 91 (conjunction -> equality AND conjunction .)
    DECREMENTO      reduce using rule 91 (conjunction -> equality AND conjunction .)
    MINUS           reduce using rule 91 (conjunction -> equality AND conjunction .)
    PLUS            reduce using rule 91 (conjunction -> equality AND conjunction .)
    NOT             reduce using rule 91 (conjunction -> equality AND conjunction .)
    SUSPEND         reduce using rule 91 (conjunction -> equality AND conjunction .)
    RCHAVE          reduce using rule 91 (conjunction -> equality AND conjunction .)
    PV              reduce using rule 91 (conjunction -> equality AND conjunction .)
    ELSE            reduce using rule 91 (conjunction -> equality AND conjunction .)
    MENOR           reduce using rule 91 (conjunction -> equality AND conjunction .)
    PONTO           reduce using rule 91 (conjunction -> equality AND conjunction .)
    AS              reduce using rule 91 (conjunction -> equality AND conjunction .)
    MULT            reduce using rule 91 (conjunction -> equality AND conjunction .)
    DIVIDE          reduce using rule 91 (conjunction -> equality AND conjunction .)
    MOD             reduce using rule 91 (conjunction -> equality AND conjunction .)
    PONTOPONTO      reduce using rule 91 (conjunction -> equality AND conjunction .)
    ELVIS           reduce using rule 91 (conjunction -> equality AND conjunction .)
    IN              reduce using rule 91 (conjunction -> equality AND conjunction .)
    NOT_IN          reduce using rule 91 (conjunction -> equality AND conjunction .)
    IS              reduce using rule 91 (conjunction -> equality AND conjunction .)
    NOT_IS          reduce using rule 91 (conjunction -> equality AND conjunction .)
    MAIOR           reduce using rule 91 (conjunction -> equality AND conjunction .)
    MENORIGUAL      reduce using rule 91 (conjunction -> equality AND conjunction .)
    MAIORIGUAL      reduce using rule 91 (conjunction -> equality AND conjunction .)
    DIFERENTE       reduce using rule 91 (conjunction -> equality AND conjunction .)
    IDENTIDADE      reduce using rule 91 (conjunction -> equality AND conjunction .)
    IGUALDADE       reduce using rule 91 (conjunction -> equality AND conjunction .)
    SEMIDENTIDADE   reduce using rule 91 (conjunction -> equality AND conjunction .)
    AND             reduce using rule 91 (conjunction -> equality AND conjunction .)
    OR              reduce using rule 91 (conjunction -> equality AND conjunction .)
    MAISIGUAL       reduce using rule 91 (conjunction -> equality AND conjunction .)
    MENOSIGUAL      reduce using rule 91 (conjunction -> equality AND conjunction .)
    MULTIGUAL       reduce using rule 91 (conjunction -> equality AND conjunction .)
    DIVIGUAL        reduce using rule 91 (conjunction -> equality AND conjunction .)
    MODIGUAL        reduce using rule 91 (conjunction -> equality AND conjunction .)
    RPAREN          reduce using rule 91 (conjunction -> equality AND conjunction .)
    COMMA           reduce using rule 91 (conjunction -> equality AND conjunction .)
    RCCT            reduce using rule 91 (conjunction -> equality AND conjunction .)


state 245

    (93) equality -> comparison equalityOperator equality .

    FUN             reduce using rule 93 (equality -> comparison equalityOperator equality .)
    $end            reduce using rule 93 (equality -> comparison equalityOperator equality .)
    ID              reduce using rule 93 (equality -> comparison equalityOperator equality .)
    FOR             reduce using rule 93 (equality -> comparison equalityOperator equality .)
    WHILE           reduce using rule 93 (equality -> comparison equalityOperator equality .)
    DO              reduce using rule 93 (equality -> comparison equalityOperator equality .)
    VAR             reduce using rule 93 (equality -> comparison equalityOperator equality .)
    VAL             reduce using rule 93 (equality -> comparison equalityOperator equality .)
    CROSSINLINE     reduce using rule 93 (equality -> comparison equalityOperator equality .)
    IMPORT          reduce using rule 93 (equality -> comparison equalityOperator equality .)
    INIT            reduce using rule 93 (equality -> comparison equalityOperator equality .)
    NOINLINE        reduce using rule 93 (equality -> comparison equalityOperator equality .)
    OUT             reduce using rule 93 (equality -> comparison equalityOperator equality .)
    VARARG          reduce using rule 93 (equality -> comparison equalityOperator equality .)
    WHERE           reduce using rule 93 (equality -> comparison equalityOperator equality .)
    OPERATOR        reduce using rule 93 (equality -> comparison equalityOperator equality .)
    LPAREN          reduce using rule 93 (equality -> comparison equalityOperator equality .)
    LITERAL_STRING  reduce using rule 93 (equality -> comparison equalityOperator equality .)
    NUMBER          reduce using rule 93 (equality -> comparison equalityOperator equality .)
    COLONCOLON      reduce using rule 93 (equality -> comparison equalityOperator equality .)
    LCCT            reduce using rule 93 (equality -> comparison equalityOperator equality .)
    IF              reduce using rule 93 (equality -> comparison equalityOperator equality .)
    RETURN          reduce using rule 93 (equality -> comparison equalityOperator equality .)
    RETURN_AT       reduce using rule 93 (equality -> comparison equalityOperator equality .)
    CONTINUE        reduce using rule 93 (equality -> comparison equalityOperator equality .)
    CONTINUE_AT     reduce using rule 93 (equality -> comparison equalityOperator equality .)
    BREAK           reduce using rule 93 (equality -> comparison equalityOperator equality .)
    BREAK_AT        reduce using rule 93 (equality -> comparison equalityOperator equality .)
    LCHAVE          reduce using rule 93 (equality -> comparison equalityOperator equality .)
    INCREMENTO      reduce using rule 93 (equality -> comparison equalityOperator equality .)
    DECREMENTO      reduce using rule 93 (equality -> comparison equalityOperator equality .)
    MINUS           reduce using rule 93 (equality -> comparison equalityOperator equality .)
    PLUS            reduce using rule 93 (equality -> comparison equalityOperator equality .)
    NOT             reduce using rule 93 (equality -> comparison equalityOperator equality .)
    SUSPEND         reduce using rule 93 (equality -> comparison equalityOperator equality .)
    RCHAVE          reduce using rule 93 (equality -> comparison equalityOperator equality .)
    PV              reduce using rule 93 (equality -> comparison equalityOperator equality .)
    ELSE            reduce using rule 93 (equality -> comparison equalityOperator equality .)
    MENOR           reduce using rule 93 (equality -> comparison equalityOperator equality .)
    PONTO           reduce using rule 93 (equality -> comparison equalityOperator equality .)
    AS              reduce using rule 93 (equality -> comparison equalityOperator equality .)
    MULT            reduce using rule 93 (equality -> comparison equalityOperator equality .)
    DIVIDE          reduce using rule 93 (equality -> comparison equalityOperator equality .)
    MOD             reduce using rule 93 (equality -> comparison equalityOperator equality .)
    PONTOPONTO      reduce using rule 93 (equality -> comparison equalityOperator equality .)
    ELVIS           reduce using rule 93 (equality -> comparison equalityOperator equality .)
    IN              reduce using rule 93 (equality -> comparison equalityOperator equality .)
    NOT_IN          reduce using rule 93 (equality -> comparison equalityOperator equality .)
    IS              reduce using rule 93 (equality -> comparison equalityOperator equality .)
    NOT_IS          reduce using rule 93 (equality -> comparison equalityOperator equality .)
    MAIOR           reduce using rule 93 (equality -> comparison equalityOperator equality .)
    MENORIGUAL      reduce using rule 93 (equality -> comparison equalityOperator equality .)
    MAIORIGUAL      reduce using rule 93 (equality -> comparison equalityOperator equality .)
    DIFERENTE       reduce using rule 93 (equality -> comparison equalityOperator equality .)
    IDENTIDADE      reduce using rule 93 (equality -> comparison equalityOperator equality .)
    IGUALDADE       reduce using rule 93 (equality -> comparison equalityOperator equality .)
    SEMIDENTIDADE   reduce using rule 93 (equality -> comparison equalityOperator equality .)
    AND             reduce using rule 93 (equality -> comparison equalityOperator equality .)
    OR              reduce using rule 93 (equality -> comparison equalityOperator equality .)
    MAISIGUAL       reduce using rule 93 (equality -> comparison equalityOperator equality .)
    MENOSIGUAL      reduce using rule 93 (equality -> comparison equalityOperator equality .)
    MULTIGUAL       reduce using rule 93 (equality -> comparison equalityOperator equality .)
    DIVIGUAL        reduce using rule 93 (equality -> comparison equalityOperator equality .)
    MODIGUAL        reduce using rule 93 (equality -> comparison equalityOperator equality .)
    RPAREN          reduce using rule 93 (equality -> comparison equalityOperator equality .)
    COMMA           reduce using rule 93 (equality -> comparison equalityOperator equality .)
    RCCT            reduce using rule 93 (equality -> comparison equalityOperator equality .)


state 246

    (95) comparison -> infixOperation comparisonOperator infixOperation .

    FUN             reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    $end            reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    ID              reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    FOR             reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    WHILE           reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    DO              reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    VAR             reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    VAL             reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    CROSSINLINE     reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    IMPORT          reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    INIT            reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    NOINLINE        reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    OUT             reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    VARARG          reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    WHERE           reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    OPERATOR        reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    LPAREN          reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    LITERAL_STRING  reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    NUMBER          reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    COLONCOLON      reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    LCCT            reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    IF              reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    RETURN          reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    RETURN_AT       reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    CONTINUE        reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    CONTINUE_AT     reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    BREAK           reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    BREAK_AT        reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    LCHAVE          reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    INCREMENTO      reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    DECREMENTO      reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    MINUS           reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    PLUS            reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    NOT             reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    SUSPEND         reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    RCHAVE          reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    PV              reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    ELSE            reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    MENOR           reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    PONTO           reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    AS              reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    MULT            reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    DIVIDE          reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    MOD             reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    PONTOPONTO      reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    ELVIS           reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    IN              reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    NOT_IN          reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    IS              reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    NOT_IS          reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    MAIOR           reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    MENORIGUAL      reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    MAIORIGUAL      reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    DIFERENTE       reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    IDENTIDADE      reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    IGUALDADE       reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    SEMIDENTIDADE   reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    AND             reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    OR              reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    MAISIGUAL       reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    MENOSIGUAL      reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    MULTIGUAL       reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    DIVIGUAL        reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    MODIGUAL        reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    RPAREN          reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    COMMA           reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)
    RCCT            reduce using rule 95 (comparison -> infixOperation comparisonOperator infixOperation .)


state 247

    (98) infixOperationRecursive -> inOrIs elvisOrType .
    (99) infixOperationRecursive -> inOrIs elvisOrType . infixOperationRecursive
    (98) infixOperationRecursive -> . inOrIs elvisOrType
    (99) infixOperationRecursive -> . inOrIs elvisOrType infixOperationRecursive
    (100) inOrIs -> . inOperator
    (101) inOrIs -> . isOperator
    (247) inOperator -> . IN
    (248) inOperator -> . NOT_IN
    (249) isOperator -> . IS
    (250) isOperator -> . NOT_IS

  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT_IN resolved as shift
  ! shift/reduce conflict for IS resolved as shift
  ! shift/reduce conflict for NOT_IS resolved as shift
    FUN             reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    $end            reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    ID              reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    FOR             reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    WHILE           reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    DO              reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    VAR             reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    VAL             reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    CROSSINLINE     reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    IMPORT          reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    INIT            reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    NOINLINE        reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    OUT             reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    VARARG          reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    WHERE           reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    OPERATOR        reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    LPAREN          reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    LITERAL_STRING  reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    NUMBER          reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    COLONCOLON      reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    LCCT            reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    IF              reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    RETURN          reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    RETURN_AT       reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    CONTINUE        reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    CONTINUE_AT     reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    BREAK           reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    BREAK_AT        reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    LCHAVE          reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    INCREMENTO      reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    DECREMENTO      reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    MINUS           reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    PLUS            reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    NOT             reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    SUSPEND         reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    RCHAVE          reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    PV              reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    ELSE            reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    MENOR           reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    PONTO           reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    AS              reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    MULT            reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    DIVIDE          reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    MOD             reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    PONTOPONTO      reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    ELVIS           reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    MAIOR           reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    MENORIGUAL      reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    MAIORIGUAL      reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    DIFERENTE       reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    IDENTIDADE      reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    IGUALDADE       reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    SEMIDENTIDADE   reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    AND             reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    OR              reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    MAISIGUAL       reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    MENOSIGUAL      reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    MULTIGUAL       reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    DIVIGUAL        reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    MODIGUAL        reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    RPAREN          reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    COMMA           reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    RCCT            reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .)
    IN              shift and go to state 136
    NOT_IN          shift and go to state 137
    IS              shift and go to state 138
    NOT_IS          shift and go to state 139

  ! IN              [ reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .) ]
  ! NOT_IN          [ reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .) ]
  ! IS              [ reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .) ]
  ! NOT_IS          [ reduce using rule 98 (infixOperationRecursive -> inOrIs elvisOrType .) ]

    inOrIs                         shift and go to state 133
    infixOperationRecursive        shift and go to state 334
    inOperator                     shift and go to state 134
    isOperator                     shift and go to state 135

state 248

    (102) elvisOrType -> elvisExpression .

    FUN             reduce using rule 102 (elvisOrType -> elvisExpression .)
    $end            reduce using rule 102 (elvisOrType -> elvisExpression .)
    ID              reduce using rule 102 (elvisOrType -> elvisExpression .)
    FOR             reduce using rule 102 (elvisOrType -> elvisExpression .)
    WHILE           reduce using rule 102 (elvisOrType -> elvisExpression .)
    DO              reduce using rule 102 (elvisOrType -> elvisExpression .)
    VAR             reduce using rule 102 (elvisOrType -> elvisExpression .)
    VAL             reduce using rule 102 (elvisOrType -> elvisExpression .)
    CROSSINLINE     reduce using rule 102 (elvisOrType -> elvisExpression .)
    IMPORT          reduce using rule 102 (elvisOrType -> elvisExpression .)
    INIT            reduce using rule 102 (elvisOrType -> elvisExpression .)
    NOINLINE        reduce using rule 102 (elvisOrType -> elvisExpression .)
    OUT             reduce using rule 102 (elvisOrType -> elvisExpression .)
    VARARG          reduce using rule 102 (elvisOrType -> elvisExpression .)
    WHERE           reduce using rule 102 (elvisOrType -> elvisExpression .)
    OPERATOR        reduce using rule 102 (elvisOrType -> elvisExpression .)
    LPAREN          reduce using rule 102 (elvisOrType -> elvisExpression .)
    LITERAL_STRING  reduce using rule 102 (elvisOrType -> elvisExpression .)
    NUMBER          reduce using rule 102 (elvisOrType -> elvisExpression .)
    COLONCOLON      reduce using rule 102 (elvisOrType -> elvisExpression .)
    LCCT            reduce using rule 102 (elvisOrType -> elvisExpression .)
    IF              reduce using rule 102 (elvisOrType -> elvisExpression .)
    RETURN          reduce using rule 102 (elvisOrType -> elvisExpression .)
    RETURN_AT       reduce using rule 102 (elvisOrType -> elvisExpression .)
    CONTINUE        reduce using rule 102 (elvisOrType -> elvisExpression .)
    CONTINUE_AT     reduce using rule 102 (elvisOrType -> elvisExpression .)
    BREAK           reduce using rule 102 (elvisOrType -> elvisExpression .)
    BREAK_AT        reduce using rule 102 (elvisOrType -> elvisExpression .)
    LCHAVE          reduce using rule 102 (elvisOrType -> elvisExpression .)
    INCREMENTO      reduce using rule 102 (elvisOrType -> elvisExpression .)
    DECREMENTO      reduce using rule 102 (elvisOrType -> elvisExpression .)
    MINUS           reduce using rule 102 (elvisOrType -> elvisExpression .)
    PLUS            reduce using rule 102 (elvisOrType -> elvisExpression .)
    NOT             reduce using rule 102 (elvisOrType -> elvisExpression .)
    SUSPEND         reduce using rule 102 (elvisOrType -> elvisExpression .)
    RCHAVE          reduce using rule 102 (elvisOrType -> elvisExpression .)
    PV              reduce using rule 102 (elvisOrType -> elvisExpression .)
    ELSE            reduce using rule 102 (elvisOrType -> elvisExpression .)
    MENOR           reduce using rule 102 (elvisOrType -> elvisExpression .)
    PONTO           reduce using rule 102 (elvisOrType -> elvisExpression .)
    AS              reduce using rule 102 (elvisOrType -> elvisExpression .)
    MULT            reduce using rule 102 (elvisOrType -> elvisExpression .)
    DIVIDE          reduce using rule 102 (elvisOrType -> elvisExpression .)
    MOD             reduce using rule 102 (elvisOrType -> elvisExpression .)
    PONTOPONTO      reduce using rule 102 (elvisOrType -> elvisExpression .)
    ELVIS           reduce using rule 102 (elvisOrType -> elvisExpression .)
    IN              reduce using rule 102 (elvisOrType -> elvisExpression .)
    NOT_IN          reduce using rule 102 (elvisOrType -> elvisExpression .)
    IS              reduce using rule 102 (elvisOrType -> elvisExpression .)
    NOT_IS          reduce using rule 102 (elvisOrType -> elvisExpression .)
    MAIOR           reduce using rule 102 (elvisOrType -> elvisExpression .)
    MENORIGUAL      reduce using rule 102 (elvisOrType -> elvisExpression .)
    MAIORIGUAL      reduce using rule 102 (elvisOrType -> elvisExpression .)
    DIFERENTE       reduce using rule 102 (elvisOrType -> elvisExpression .)
    IDENTIDADE      reduce using rule 102 (elvisOrType -> elvisExpression .)
    IGUALDADE       reduce using rule 102 (elvisOrType -> elvisExpression .)
    SEMIDENTIDADE   reduce using rule 102 (elvisOrType -> elvisExpression .)
    AND             reduce using rule 102 (elvisOrType -> elvisExpression .)
    OR              reduce using rule 102 (elvisOrType -> elvisExpression .)
    MAISIGUAL       reduce using rule 102 (elvisOrType -> elvisExpression .)
    MENOSIGUAL      reduce using rule 102 (elvisOrType -> elvisExpression .)
    MULTIGUAL       reduce using rule 102 (elvisOrType -> elvisExpression .)
    DIVIGUAL        reduce using rule 102 (elvisOrType -> elvisExpression .)
    MODIGUAL        reduce using rule 102 (elvisOrType -> elvisExpression .)
    RPAREN          reduce using rule 102 (elvisOrType -> elvisExpression .)
    COMMA           reduce using rule 102 (elvisOrType -> elvisExpression .)
    RCCT            reduce using rule 102 (elvisOrType -> elvisExpression .)


state 249

    (103) elvisOrType -> type .

    FUN             reduce using rule 103 (elvisOrType -> type .)
    $end            reduce using rule 103 (elvisOrType -> type .)
    ID              reduce using rule 103 (elvisOrType -> type .)
    FOR             reduce using rule 103 (elvisOrType -> type .)
    WHILE           reduce using rule 103 (elvisOrType -> type .)
    DO              reduce using rule 103 (elvisOrType -> type .)
    VAR             reduce using rule 103 (elvisOrType -> type .)
    VAL             reduce using rule 103 (elvisOrType -> type .)
    CROSSINLINE     reduce using rule 103 (elvisOrType -> type .)
    IMPORT          reduce using rule 103 (elvisOrType -> type .)
    INIT            reduce using rule 103 (elvisOrType -> type .)
    NOINLINE        reduce using rule 103 (elvisOrType -> type .)
    OUT             reduce using rule 103 (elvisOrType -> type .)
    VARARG          reduce using rule 103 (elvisOrType -> type .)
    WHERE           reduce using rule 103 (elvisOrType -> type .)
    OPERATOR        reduce using rule 103 (elvisOrType -> type .)
    LPAREN          reduce using rule 103 (elvisOrType -> type .)
    LITERAL_STRING  reduce using rule 103 (elvisOrType -> type .)
    NUMBER          reduce using rule 103 (elvisOrType -> type .)
    COLONCOLON      reduce using rule 103 (elvisOrType -> type .)
    LCCT            reduce using rule 103 (elvisOrType -> type .)
    IF              reduce using rule 103 (elvisOrType -> type .)
    RETURN          reduce using rule 103 (elvisOrType -> type .)
    RETURN_AT       reduce using rule 103 (elvisOrType -> type .)
    CONTINUE        reduce using rule 103 (elvisOrType -> type .)
    CONTINUE_AT     reduce using rule 103 (elvisOrType -> type .)
    BREAK           reduce using rule 103 (elvisOrType -> type .)
    BREAK_AT        reduce using rule 103 (elvisOrType -> type .)
    LCHAVE          reduce using rule 103 (elvisOrType -> type .)
    INCREMENTO      reduce using rule 103 (elvisOrType -> type .)
    DECREMENTO      reduce using rule 103 (elvisOrType -> type .)
    MINUS           reduce using rule 103 (elvisOrType -> type .)
    PLUS            reduce using rule 103 (elvisOrType -> type .)
    NOT             reduce using rule 103 (elvisOrType -> type .)
    SUSPEND         reduce using rule 103 (elvisOrType -> type .)
    RCHAVE          reduce using rule 103 (elvisOrType -> type .)
    PV              reduce using rule 103 (elvisOrType -> type .)
    ELSE            reduce using rule 103 (elvisOrType -> type .)
    MENOR           reduce using rule 103 (elvisOrType -> type .)
    PONTO           reduce using rule 103 (elvisOrType -> type .)
    AS              reduce using rule 103 (elvisOrType -> type .)
    MULT            reduce using rule 103 (elvisOrType -> type .)
    DIVIDE          reduce using rule 103 (elvisOrType -> type .)
    MOD             reduce using rule 103 (elvisOrType -> type .)
    PONTOPONTO      reduce using rule 103 (elvisOrType -> type .)
    ELVIS           reduce using rule 103 (elvisOrType -> type .)
    IN              reduce using rule 103 (elvisOrType -> type .)
    NOT_IN          reduce using rule 103 (elvisOrType -> type .)
    IS              reduce using rule 103 (elvisOrType -> type .)
    NOT_IS          reduce using rule 103 (elvisOrType -> type .)
    MAIOR           reduce using rule 103 (elvisOrType -> type .)
    MENORIGUAL      reduce using rule 103 (elvisOrType -> type .)
    MAIORIGUAL      reduce using rule 103 (elvisOrType -> type .)
    DIFERENTE       reduce using rule 103 (elvisOrType -> type .)
    IDENTIDADE      reduce using rule 103 (elvisOrType -> type .)
    IGUALDADE       reduce using rule 103 (elvisOrType -> type .)
    SEMIDENTIDADE   reduce using rule 103 (elvisOrType -> type .)
    AND             reduce using rule 103 (elvisOrType -> type .)
    OR              reduce using rule 103 (elvisOrType -> type .)
    MAISIGUAL       reduce using rule 103 (elvisOrType -> type .)
    MENOSIGUAL      reduce using rule 103 (elvisOrType -> type .)
    MULTIGUAL       reduce using rule 103 (elvisOrType -> type .)
    DIVIGUAL        reduce using rule 103 (elvisOrType -> type .)
    MODIGUAL        reduce using rule 103 (elvisOrType -> type .)
    RPAREN          reduce using rule 103 (elvisOrType -> type .)
    COMMA           reduce using rule 103 (elvisOrType -> type .)
    RCCT            reduce using rule 103 (elvisOrType -> type .)


state 250

    (47) simpleUserType -> simpleIdentifier . typeArguments
    (48) simpleUserType -> simpleIdentifier .
    (165) primaryExpression -> simpleIdentifier .
    (268) label -> simpleIdentifier .
    (153) typeArguments -> . MENOR typeArgumentsRecursive MAIOR
    (154) typeArguments -> . MENOR MAIOR

  ! reduce/reduce conflict for FUN resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for $end resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for FOR resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for WHILE resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for DO resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for VAR resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for VAL resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for NUMBER resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for IF resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for NOT resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for PV resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for ELSE resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for MENOR resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for PONTO resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for AS resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for MULT resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for MOD resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for ELVIS resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for IN resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for IS resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for MAIOR resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for AND resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for OR resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for RCCT resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for NOT resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for NUMBER resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for IF resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for FUN resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! shift/reduce conflict for MENOR resolved as shift
    FUN             reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    $end            reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    ID              reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    FOR             reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    WHILE           reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    DO              reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    VAR             reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    VAL             reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    IMPORT          reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    INIT            reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    NOINLINE        reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    OUT             reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    VARARG          reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    WHERE           reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    OPERATOR        reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    LPAREN          reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    NUMBER          reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    COLONCOLON      reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    LCCT            reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    IF              reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    RETURN          reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    RETURN_AT       reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    CONTINUE        reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    BREAK           reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    BREAK_AT        reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    LCHAVE          reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    INCREMENTO      reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    DECREMENTO      reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    MINUS           reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    PLUS            reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    NOT             reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    SUSPEND         reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    RCHAVE          reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    PV              reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    ELSE            reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    PONTO           reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    AS              reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    MULT            reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    DIVIDE          reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    MOD             reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    ELVIS           reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    IN              reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    NOT_IN          reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    IS              reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    NOT_IS          reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    MAIOR           reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    DIFERENTE       reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    IGUALDADE       reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    AND             reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    OR              reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    MAISIGUAL       reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    MENOSIGUAL      reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    MODIGUAL        reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    RPAREN          reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    COMMA           reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    RCCT            reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    MENOR           shift and go to state 165

  ! MENOR           [ reduce using rule 48 (simpleUserType -> simpleIdentifier .) ]
  ! FUN             [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! $end            [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! FOR             [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! WHILE           [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! DO              [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! VAR             [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! VAL             [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! OPERATOR        [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! LITERAL_STRING  [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! NUMBER          [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! IF              [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! RETURN          [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! RETURN_AT       [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! CONTINUE        [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! CONTINUE_AT     [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! BREAK           [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! BREAK_AT        [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! LCHAVE          [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! INCREMENTO      [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! PLUS            [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! NOT             [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! SUSPEND         [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! RCHAVE          [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! PV              [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! ELSE            [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! MENOR           [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! PONTO           [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! AS              [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! MULT            [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! DIVIDE          [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! MOD             [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! PONTOPONTO      [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! ELVIS           [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! IN              [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! NOT_IN          [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! IS              [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! NOT_IS          [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! MAIOR           [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! MENORIGUAL      [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! MAIORIGUAL      [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! DIFERENTE       [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! IDENTIDADE      [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! IGUALDADE       [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! SEMIDENTIDADE   [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! AND             [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! OR              [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! MAISIGUAL       [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! MENOSIGUAL      [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! MULTIGUAL       [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! DIVIGUAL        [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! MODIGUAL        [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! RPAREN          [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! COMMA           [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! RCCT            [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! INCREMENTO      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! PLUS            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NOT             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! OPERATOR        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LITERAL_STRING  [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NUMBER          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! IF              [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! RETURN          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! RETURN_AT       [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CONTINUE        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CONTINUE_AT     [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! BREAK           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! BREAK_AT        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LCHAVE          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! FUN             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! SUSPEND         [ reduce using rule 268 (label -> simpleIdentifier .) ]

    typeArguments                  shift and go to state 210

state 251

    (60) parenthesizedType -> LPAREN . type RPAREN
    (59) functionTypeParameters -> LPAREN . parameterOrType parameterOrTypeRecursive RPAREN
    (173) parenthesizedExpression -> LPAREN . expression RPAREN
    (35) type -> . typeModifiers optype
    (36) type -> . optype
    (55) parameterOrType -> . parameter
    (56) parameterOrType -> . type
    (8) expression -> . disjunction
    (40) typeModifiers -> . typeModifier
    (41) typeModifiers -> . typeModifier typeModifiers
    (37) optype -> . parenthesizedType
    (38) optype -> . functionType
    (39) optype -> . userType
    (34) parameter -> . simpleIdentifier optionalType
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (42) typeModifier -> . SUSPEND
    (60) parenthesizedType -> . LPAREN type RPAREN
    (53) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (54) functionType -> . functionTypeParameters SETA type
    (46) userType -> . simpleUserType
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (61) receiverType -> . typeModifier parenthesizedType
    (59) functionTypeParameters -> . LPAREN parameterOrType parameterOrTypeRecursive RPAREN
    (47) simpleUserType -> . simpleIdentifier typeArguments
    (48) simpleUserType -> . simpleIdentifier
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType

    SUSPEND         shift and go to state 78
    LPAREN          shift and go to state 251
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77

    type                           shift and go to state 204
    parameterOrType                shift and go to state 205
    expression                     shift and go to state 175
    typeModifiers                  shift and go to state 80
    optype                         shift and go to state 81
    parameter                      shift and go to state 206
    disjunction                    shift and go to state 30
    typeModifier                   shift and go to state 82
    parenthesizedType              shift and go to state 83
    functionType                   shift and go to state 84
    userType                       shift and go to state 85
    simpleIdentifier               shift and go to state 335
    conjunction                    shift and go to state 31
    receiverType                   shift and go to state 252
    functionTypeParameters         shift and go to state 88
    simpleUserType                 shift and go to state 89
    equality                       shift and go to state 32
    comparison                     shift and go to state 33
    infixOperation                 shift and go to state 34
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66

state 252

    (53) functionType -> receiverType . PONTO functionTypeParameters SETA type
    (230) callableReference -> receiverType . COLONCOLON simpleIdentifierOrClass

    PONTO           shift and go to state 208
    COLONCOLON      shift and go to state 176


state 253

    (105) elvisExpression -> infixFunctionCall ELVIS elvisExpression .

    FUN             reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    $end            reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    ID              reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    FOR             reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    WHILE           reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    DO              reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    VAR             reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    VAL             reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    CROSSINLINE     reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    IMPORT          reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    INIT            reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    NOINLINE        reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    OUT             reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    VARARG          reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    WHERE           reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    OPERATOR        reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    LPAREN          reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    LITERAL_STRING  reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    NUMBER          reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    COLONCOLON      reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    LCCT            reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    IF              reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    RETURN          reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    RETURN_AT       reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    CONTINUE        reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    CONTINUE_AT     reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    BREAK           reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    BREAK_AT        reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    LCHAVE          reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    INCREMENTO      reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    DECREMENTO      reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    MINUS           reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    PLUS            reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    NOT             reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    SUSPEND         reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    RCHAVE          reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    PV              reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    ELSE            reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    MENOR           reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    PONTO           reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    AS              reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    MULT            reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    DIVIDE          reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    MOD             reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    PONTOPONTO      reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    ELVIS           reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    IN              reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    NOT_IN          reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    IS              reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    NOT_IS          reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    MAIOR           reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    MENORIGUAL      reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    MAIORIGUAL      reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    DIFERENTE       reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    IDENTIDADE      reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    IGUALDADE       reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    SEMIDENTIDADE   reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    AND             reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    OR              reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    MAISIGUAL       reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    MENOSIGUAL      reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    MULTIGUAL       reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    DIVIGUAL        reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    MODIGUAL        reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    RPAREN          reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    COMMA           reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    RCCT            reduce using rule 105 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)


state 254

    (107) infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .

    FUN             reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    $end            reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    ID              reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    FOR             reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    WHILE           reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    DO              reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    VAR             reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    VAL             reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    CROSSINLINE     reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    IMPORT          reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    INIT            reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    NOINLINE        reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    OUT             reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    VARARG          reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    WHERE           reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    OPERATOR        reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    LPAREN          reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    LITERAL_STRING  reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    NUMBER          reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    COLONCOLON      reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    LCCT            reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    IF              reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    RETURN          reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    RETURN_AT       reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    CONTINUE        reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    CONTINUE_AT     reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    BREAK           reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    BREAK_AT        reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    LCHAVE          reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    INCREMENTO      reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    DECREMENTO      reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    MINUS           reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    PLUS            reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    NOT             reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    SUSPEND         reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    RCHAVE          reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    PV              reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    ELSE            reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    MENOR           reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    PONTO           reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    AS              reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    MULT            reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    DIVIDE          reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    MOD             reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    PONTOPONTO      reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    ELVIS           reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    IN              reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    NOT_IN          reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    IS              reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    NOT_IS          reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    MAIOR           reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    MENORIGUAL      reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    MAIORIGUAL      reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    DIFERENTE       reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    IDENTIDADE      reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    IGUALDADE       reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    SEMIDENTIDADE   reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    AND             reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    OR              reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    MAISIGUAL       reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    MENOSIGUAL      reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    MULTIGUAL       reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    DIVIGUAL        reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    MODIGUAL        reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    RPAREN          reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    COMMA           reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    RCCT            reduce using rule 107 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)


state 255

    (109) rangeExpression -> additiveExpression PONTOPONTO rangeExpression .

    FUN             reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    $end            reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    ID              reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    FOR             reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    WHILE           reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    DO              reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    VAR             reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    VAL             reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    CROSSINLINE     reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    IMPORT          reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    INIT            reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    NOINLINE        reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    OUT             reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    VARARG          reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    WHERE           reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    OPERATOR        reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    LPAREN          reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    LITERAL_STRING  reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    NUMBER          reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    COLONCOLON      reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    LCCT            reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    IF              reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    RETURN          reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    RETURN_AT       reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    CONTINUE        reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    CONTINUE_AT     reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    BREAK           reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    BREAK_AT        reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    LCHAVE          reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    INCREMENTO      reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    DECREMENTO      reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    MINUS           reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    PLUS            reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    NOT             reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    SUSPEND         reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    RCHAVE          reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    PV              reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    ELSE            reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    MENOR           reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    PONTO           reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    AS              reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    MULT            reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    DIVIDE          reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    MOD             reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    PONTOPONTO      reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    ELVIS           reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    IN              reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    NOT_IN          reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    IS              reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    NOT_IS          reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    MAIOR           reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    MENORIGUAL      reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    MAIORIGUAL      reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    DIFERENTE       reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    IDENTIDADE      reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    IGUALDADE       reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    SEMIDENTIDADE   reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    AND             reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    OR              reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    MAISIGUAL       reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    MENOSIGUAL      reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    MULTIGUAL       reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    DIVIGUAL        reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    MODIGUAL        reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    RPAREN          reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    COMMA           reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    RCCT            reduce using rule 109 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)


state 256

    (111) additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .

    FUN             reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    $end            reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    ID              reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    FOR             reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    WHILE           reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    DO              reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    VAR             reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    VAL             reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    CROSSINLINE     reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    IMPORT          reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    INIT            reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    NOINLINE        reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    OUT             reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    VARARG          reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    WHERE           reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    OPERATOR        reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    LPAREN          reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    LITERAL_STRING  reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    NUMBER          reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    COLONCOLON      reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    LCCT            reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    IF              reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    RETURN          reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    RETURN_AT       reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    CONTINUE        reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    CONTINUE_AT     reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    BREAK           reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    BREAK_AT        reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    LCHAVE          reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    INCREMENTO      reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    DECREMENTO      reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    MINUS           reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    PLUS            reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    NOT             reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    SUSPEND         reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    RCHAVE          reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    PV              reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    ELSE            reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    MENOR           reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    PONTO           reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    AS              reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    MULT            reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    DIVIDE          reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    MOD             reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    PONTOPONTO      reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    ELVIS           reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    IN              reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    NOT_IN          reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    IS              reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    NOT_IS          reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    MAIOR           reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    MENORIGUAL      reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    MAIORIGUAL      reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    DIFERENTE       reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    IDENTIDADE      reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    IGUALDADE       reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    SEMIDENTIDADE   reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    AND             reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    OR              reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    MAISIGUAL       reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    MENOSIGUAL      reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    MULTIGUAL       reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    DIVIGUAL        reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    MODIGUAL        reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    RPAREN          reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    COMMA           reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    RCCT            reduce using rule 111 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)


state 257

    (113) multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .

    FUN             reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    $end            reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    ID              reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    FOR             reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    WHILE           reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    DO              reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    VAR             reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    VAL             reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    CROSSINLINE     reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    IMPORT          reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    INIT            reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    NOINLINE        reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    OUT             reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    VARARG          reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    WHERE           reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    OPERATOR        reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    LPAREN          reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    LITERAL_STRING  reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    NUMBER          reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    COLONCOLON      reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    LCCT            reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    IF              reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    RETURN          reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    RETURN_AT       reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    CONTINUE        reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    CONTINUE_AT     reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    BREAK           reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    BREAK_AT        reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    LCHAVE          reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    INCREMENTO      reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    DECREMENTO      reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    MINUS           reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    PLUS            reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    NOT             reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    SUSPEND         reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    RCHAVE          reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    PV              reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    ELSE            reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    MENOR           reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    PONTO           reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    AS              reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    MULT            reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    DIVIDE          reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    MOD             reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    PONTOPONTO      reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    ELVIS           reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    IN              reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    NOT_IN          reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    IS              reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    NOT_IS          reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    MAIOR           reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    MENORIGUAL      reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    MAIORIGUAL      reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    DIFERENTE       reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    IDENTIDADE      reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    IGUALDADE       reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    SEMIDENTIDADE   reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    AND             reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    OR              reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    MAISIGUAL       reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    MENOSIGUAL      reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    MULTIGUAL       reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    DIVIGUAL        reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    MODIGUAL        reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    RPAREN          reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    COMMA           reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    RCCT            reduce using rule 113 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)


state 258

    (115) asExpression -> prefixUnaryExpression asOperator type .

    FUN             reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    $end            reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    ID              reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    FOR             reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    WHILE           reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    DO              reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    VAR             reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    VAL             reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    CROSSINLINE     reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    IMPORT          reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    INIT            reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    NOINLINE        reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    OUT             reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    VARARG          reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    WHERE           reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    OPERATOR        reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    LPAREN          reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    LITERAL_STRING  reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    NUMBER          reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    COLONCOLON      reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    LCCT            reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    IF              reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    RETURN          reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    RETURN_AT       reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    CONTINUE        reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    CONTINUE_AT     reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    BREAK           reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    BREAK_AT        reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    LCHAVE          reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    INCREMENTO      reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    DECREMENTO      reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    MINUS           reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    PLUS            reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    NOT             reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    SUSPEND         reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    RCHAVE          reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    PV              reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    ELSE            reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    MENOR           reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    PONTO           reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    AS              reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    MULT            reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    DIVIDE          reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    MOD             reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    PONTOPONTO      reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    ELVIS           reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    IN              reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    NOT_IN          reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    IS              reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    NOT_IS          reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    MAIOR           reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    MENORIGUAL      reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    MAIORIGUAL      reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    DIFERENTE       reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    IDENTIDADE      reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    IGUALDADE       reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    SEMIDENTIDADE   reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    AND             reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    OR              reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    MAISIGUAL       reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    MENOSIGUAL      reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    MULTIGUAL       reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    DIVIGUAL        reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    MODIGUAL        reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    RPAREN          reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    COMMA           reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)
    RCCT            reduce using rule 115 (asExpression -> prefixUnaryExpression asOperator type .)


state 259

    (257) asOperator -> AS asOperator .

    SUSPEND         reduce using rule 257 (asOperator -> AS asOperator .)
    LPAREN          reduce using rule 257 (asOperator -> AS asOperator .)
    ID              reduce using rule 257 (asOperator -> AS asOperator .)
    CROSSINLINE     reduce using rule 257 (asOperator -> AS asOperator .)
    IMPORT          reduce using rule 257 (asOperator -> AS asOperator .)
    INIT            reduce using rule 257 (asOperator -> AS asOperator .)
    NOINLINE        reduce using rule 257 (asOperator -> AS asOperator .)
    OUT             reduce using rule 257 (asOperator -> AS asOperator .)
    VARARG          reduce using rule 257 (asOperator -> AS asOperator .)
    WHERE           reduce using rule 257 (asOperator -> AS asOperator .)
    OPERATOR        reduce using rule 257 (asOperator -> AS asOperator .)


state 260

    (123) postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .

    FUN             reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    $end            reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    ID              reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    FOR             reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    WHILE           reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    DO              reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    VAR             reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    VAL             reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    CROSSINLINE     reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    IMPORT          reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    INIT            reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    NOINLINE        reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    OUT             reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    VARARG          reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    WHERE           reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    OPERATOR        reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    LPAREN          reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    LITERAL_STRING  reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    NUMBER          reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    COLONCOLON      reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    LCCT            reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    IF              reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    RETURN          reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    RETURN_AT       reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    CONTINUE        reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    CONTINUE_AT     reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    BREAK           reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    BREAK_AT        reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    LCHAVE          reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    INCREMENTO      reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    DECREMENTO      reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MINUS           reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    PLUS            reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    NOT             reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    SUSPEND         reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    RCHAVE          reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    PV              reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    ELSE            reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MENOR           reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    PONTO           reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    AS              reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MULT            reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    DIVIDE          reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MOD             reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    PONTOPONTO      reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    ELVIS           reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    IN              reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    NOT_IN          reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    IS              reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    NOT_IS          reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MAIOR           reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MENORIGUAL      reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MAIORIGUAL      reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    DIFERENTE       reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    IDENTIDADE      reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    IGUALDADE       reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    SEMIDENTIDADE   reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    AND             reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    OR              reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MAISIGUAL       reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MENOSIGUAL      reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MULTIGUAL       reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    DIVIGUAL        reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MODIGUAL        reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    RPAREN          reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    COMMA           reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    RCCT            reduce using rule 123 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)


state 261

    (147) callSuffix -> typeArguments valueArguments . annotatedLambda
    (148) callSuffix -> typeArguments valueArguments .
    (152) annotatedLambda -> . lambdaLiteral
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE

  ! shift/reduce conflict for LCHAVE resolved as shift
    INCREMENTO      reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    DECREMENTO      reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    MENOR           reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    LCCT            reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    LPAREN          reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    COLONCOLON      reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    PONTO           reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    FUN             reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    $end            reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    ID              reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    FOR             reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    WHILE           reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    DO              reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    VAR             reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    VAL             reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    CROSSINLINE     reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    IMPORT          reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    INIT            reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    NOINLINE        reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    OUT             reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    VARARG          reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    WHERE           reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    OPERATOR        reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    LITERAL_STRING  reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    NUMBER          reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    IF              reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    RETURN          reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    RETURN_AT       reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    CONTINUE        reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    CONTINUE_AT     reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    BREAK           reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    BREAK_AT        reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    MINUS           reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    PLUS            reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    NOT             reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    SUSPEND         reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    RCHAVE          reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    PV              reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    ELSE            reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    AS              reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    MULT            reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    DIVIDE          reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    MOD             reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    PONTOPONTO      reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    ELVIS           reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    IN              reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    NOT_IN          reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    IS              reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    NOT_IS          reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    MAIOR           reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    MENORIGUAL      reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    MAIORIGUAL      reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    DIFERENTE       reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    IDENTIDADE      reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    IGUALDADE       reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    SEMIDENTIDADE   reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    AND             reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    OR              reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    MAISIGUAL       reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    MENOSIGUAL      reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    MULTIGUAL       reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    DIVIGUAL        reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    MODIGUAL        reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    RPAREN          reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    COMMA           reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    RCCT            reduce using rule 148 (callSuffix -> typeArguments valueArguments .)
    LCHAVE          shift and go to state 76

  ! LCHAVE          [ reduce using rule 148 (callSuffix -> typeArguments valueArguments .) ]

    annotatedLambda                shift and go to state 336
    lambdaLiteral                  shift and go to state 170

state 262

    (153) typeArguments -> MENOR typeArgumentsRecursive . MAIOR

    MAIOR           shift and go to state 337


state 263

    (154) typeArguments -> MENOR MAIOR .

    LPAREN          reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    INCREMENTO      reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    DECREMENTO      reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    MENOR           reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    LCCT            reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    COLONCOLON      reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    LCHAVE          reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    PONTO           reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    FUN             reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    $end            reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    ID              reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    FOR             reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    WHILE           reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    DO              reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    VAR             reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    VAL             reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    CROSSINLINE     reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    IMPORT          reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    INIT            reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    NOINLINE        reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    OUT             reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    VARARG          reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    WHERE           reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    OPERATOR        reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    LITERAL_STRING  reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    NUMBER          reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    IF              reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    RETURN          reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    RETURN_AT       reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    CONTINUE        reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    CONTINUE_AT     reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    BREAK           reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    BREAK_AT        reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    MINUS           reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    PLUS            reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    NOT             reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    SUSPEND         reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    RCHAVE          reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    PV              reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    ELSE            reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    AS              reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    MULT            reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    DIVIDE          reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    MOD             reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    PONTOPONTO      reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    ELVIS           reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    IN              reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    NOT_IN          reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    IS              reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    NOT_IS          reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    MAIOR           reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    MENORIGUAL      reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    MAIORIGUAL      reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    DIFERENTE       reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    IDENTIDADE      reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    IGUALDADE       reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    SEMIDENTIDADE   reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    AND             reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    OR              reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    MAISIGUAL       reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    MENOSIGUAL      reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    MULTIGUAL       reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    DIVIGUAL        reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    MODIGUAL        reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    RPAREN          reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    COMMA           reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    RCCT            reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    ATRIBUICAO      reduce using rule 154 (typeArguments -> MENOR MAIOR .)
    SETA            reduce using rule 154 (typeArguments -> MENOR MAIOR .)


state 264

    (155) typeArgumentsRecursive -> typeProjection .
    (156) typeArgumentsRecursive -> typeProjection . COMMA typeArgumentsRecursive
    (51) typeProjectionModifiers -> typeProjection .

    MAIOR           reduce using rule 155 (typeArgumentsRecursive -> typeProjection .)
    COMMA           shift and go to state 338
    SUSPEND         reduce using rule 51 (typeProjectionModifiers -> typeProjection .)
    LPAREN          reduce using rule 51 (typeProjectionModifiers -> typeProjection .)
    ID              reduce using rule 51 (typeProjectionModifiers -> typeProjection .)
    CROSSINLINE     reduce using rule 51 (typeProjectionModifiers -> typeProjection .)
    IMPORT          reduce using rule 51 (typeProjectionModifiers -> typeProjection .)
    INIT            reduce using rule 51 (typeProjectionModifiers -> typeProjection .)
    NOINLINE        reduce using rule 51 (typeProjectionModifiers -> typeProjection .)
    OUT             reduce using rule 51 (typeProjectionModifiers -> typeProjection .)
    VARARG          reduce using rule 51 (typeProjectionModifiers -> typeProjection .)
    WHERE           reduce using rule 51 (typeProjectionModifiers -> typeProjection .)
    OPERATOR        reduce using rule 51 (typeProjectionModifiers -> typeProjection .)


state 265

    (49) typeProjection -> typeProjectionModifiers . type
    (35) type -> . typeModifiers optype
    (36) type -> . optype
    (40) typeModifiers -> . typeModifier
    (41) typeModifiers -> . typeModifier typeModifiers
    (37) optype -> . parenthesizedType
    (38) optype -> . functionType
    (39) optype -> . userType
    (42) typeModifier -> . SUSPEND
    (60) parenthesizedType -> . LPAREN type RPAREN
    (53) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (54) functionType -> . functionTypeParameters SETA type
    (46) userType -> . simpleUserType
    (61) receiverType -> . typeModifier parenthesizedType
    (59) functionTypeParameters -> . LPAREN parameterOrType parameterOrTypeRecursive RPAREN
    (47) simpleUserType -> . simpleIdentifier typeArguments
    (48) simpleUserType -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    SUSPEND         shift and go to state 78
    LPAREN          shift and go to state 86
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    type                           shift and go to state 339
    typeModifiers                  shift and go to state 80
    optype                         shift and go to state 81
    typeModifier                   shift and go to state 82
    parenthesizedType              shift and go to state 83
    functionType                   shift and go to state 84
    userType                       shift and go to state 85
    receiverType                   shift and go to state 87
    functionTypeParameters         shift and go to state 88
    simpleUserType                 shift and go to state 89
    simpleIdentifier               shift and go to state 90

state 266

    (50) typeProjection -> type .

    COMMA           reduce using rule 50 (typeProjection -> type .)
    MAIOR           reduce using rule 50 (typeProjection -> type .)
    SUSPEND         reduce using rule 50 (typeProjection -> type .)
    LPAREN          reduce using rule 50 (typeProjection -> type .)
    ID              reduce using rule 50 (typeProjection -> type .)
    CROSSINLINE     reduce using rule 50 (typeProjection -> type .)
    IMPORT          reduce using rule 50 (typeProjection -> type .)
    INIT            reduce using rule 50 (typeProjection -> type .)
    NOINLINE        reduce using rule 50 (typeProjection -> type .)
    OUT             reduce using rule 50 (typeProjection -> type .)
    VARARG          reduce using rule 50 (typeProjection -> type .)
    WHERE           reduce using rule 50 (typeProjection -> type .)
    OPERATOR        reduce using rule 50 (typeProjection -> type .)


state 267

    (52) typeProjectionModifiers -> typeProjectionModifier . typeProjectionModifiers
    (51) typeProjectionModifiers -> . typeProjection
    (52) typeProjectionModifiers -> . typeProjectionModifier typeProjectionModifiers
    (49) typeProjection -> . typeProjectionModifiers type
    (50) typeProjection -> . type
    (43) typeProjectionModifier -> . varianceModifier
    (35) type -> . typeModifiers optype
    (36) type -> . optype
    (44) varianceModifier -> . IN
    (45) varianceModifier -> . OUT
    (40) typeModifiers -> . typeModifier
    (41) typeModifiers -> . typeModifier typeModifiers
    (37) optype -> . parenthesizedType
    (38) optype -> . functionType
    (39) optype -> . userType
    (42) typeModifier -> . SUSPEND
    (60) parenthesizedType -> . LPAREN type RPAREN
    (53) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (54) functionType -> . functionTypeParameters SETA type
    (46) userType -> . simpleUserType
    (61) receiverType -> . typeModifier parenthesizedType
    (59) functionTypeParameters -> . LPAREN parameterOrType parameterOrTypeRecursive RPAREN
    (47) simpleUserType -> . simpleIdentifier typeArguments
    (48) simpleUserType -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    IN              shift and go to state 269
    OUT             shift and go to state 270
    SUSPEND         shift and go to state 78
    LPAREN          shift and go to state 86
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    typeProjectionModifier         shift and go to state 267
    typeProjectionModifiers        shift and go to state 340
    typeProjection                 shift and go to state 341
    type                           shift and go to state 266
    varianceModifier               shift and go to state 268
    typeModifiers                  shift and go to state 80
    optype                         shift and go to state 81
    typeModifier                   shift and go to state 82
    parenthesizedType              shift and go to state 83
    functionType                   shift and go to state 84
    userType                       shift and go to state 85
    receiverType                   shift and go to state 87
    functionTypeParameters         shift and go to state 88
    simpleUserType                 shift and go to state 89
    simpleIdentifier               shift and go to state 90

state 268

    (43) typeProjectionModifier -> varianceModifier .

    IN              reduce using rule 43 (typeProjectionModifier -> varianceModifier .)
    OUT             reduce using rule 43 (typeProjectionModifier -> varianceModifier .)
    SUSPEND         reduce using rule 43 (typeProjectionModifier -> varianceModifier .)
    LPAREN          reduce using rule 43 (typeProjectionModifier -> varianceModifier .)
    ID              reduce using rule 43 (typeProjectionModifier -> varianceModifier .)
    CROSSINLINE     reduce using rule 43 (typeProjectionModifier -> varianceModifier .)
    IMPORT          reduce using rule 43 (typeProjectionModifier -> varianceModifier .)
    INIT            reduce using rule 43 (typeProjectionModifier -> varianceModifier .)
    NOINLINE        reduce using rule 43 (typeProjectionModifier -> varianceModifier .)
    VARARG          reduce using rule 43 (typeProjectionModifier -> varianceModifier .)
    WHERE           reduce using rule 43 (typeProjectionModifier -> varianceModifier .)
    OPERATOR        reduce using rule 43 (typeProjectionModifier -> varianceModifier .)


state 269

    (44) varianceModifier -> IN .

    IN              reduce using rule 44 (varianceModifier -> IN .)
    OUT             reduce using rule 44 (varianceModifier -> IN .)
    SUSPEND         reduce using rule 44 (varianceModifier -> IN .)
    LPAREN          reduce using rule 44 (varianceModifier -> IN .)
    ID              reduce using rule 44 (varianceModifier -> IN .)
    CROSSINLINE     reduce using rule 44 (varianceModifier -> IN .)
    IMPORT          reduce using rule 44 (varianceModifier -> IN .)
    INIT            reduce using rule 44 (varianceModifier -> IN .)
    NOINLINE        reduce using rule 44 (varianceModifier -> IN .)
    VARARG          reduce using rule 44 (varianceModifier -> IN .)
    WHERE           reduce using rule 44 (varianceModifier -> IN .)
    OPERATOR        reduce using rule 44 (varianceModifier -> IN .)


state 270

    (45) varianceModifier -> OUT .
    (274) simpleIdentifier -> OUT .

  ! reduce/reduce conflict for SUSPEND resolved using rule 45 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for LPAREN resolved using rule 45 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for ID resolved using rule 45 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 45 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for IMPORT resolved using rule 45 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for INIT resolved using rule 45 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 45 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for OUT resolved using rule 45 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for VARARG resolved using rule 45 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for WHERE resolved using rule 45 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 45 (varianceModifier -> OUT .)
    IN              reduce using rule 45 (varianceModifier -> OUT .)
    OUT             reduce using rule 45 (varianceModifier -> OUT .)
    SUSPEND         reduce using rule 45 (varianceModifier -> OUT .)
    LPAREN          reduce using rule 45 (varianceModifier -> OUT .)
    ID              reduce using rule 45 (varianceModifier -> OUT .)
    CROSSINLINE     reduce using rule 45 (varianceModifier -> OUT .)
    IMPORT          reduce using rule 45 (varianceModifier -> OUT .)
    INIT            reduce using rule 45 (varianceModifier -> OUT .)
    NOINLINE        reduce using rule 45 (varianceModifier -> OUT .)
    VARARG          reduce using rule 45 (varianceModifier -> OUT .)
    WHERE           reduce using rule 45 (varianceModifier -> OUT .)
    OPERATOR        reduce using rule 45 (varianceModifier -> OUT .)
    MENOR           reduce using rule 274 (simpleIdentifier -> OUT .)
    COMMA           reduce using rule 274 (simpleIdentifier -> OUT .)
    MAIOR           reduce using rule 274 (simpleIdentifier -> OUT .)

  ! SUSPEND         [ reduce using rule 274 (simpleIdentifier -> OUT .) ]
  ! LPAREN          [ reduce using rule 274 (simpleIdentifier -> OUT .) ]
  ! ID              [ reduce using rule 274 (simpleIdentifier -> OUT .) ]
  ! CROSSINLINE     [ reduce using rule 274 (simpleIdentifier -> OUT .) ]
  ! IMPORT          [ reduce using rule 274 (simpleIdentifier -> OUT .) ]
  ! INIT            [ reduce using rule 274 (simpleIdentifier -> OUT .) ]
  ! NOINLINE        [ reduce using rule 274 (simpleIdentifier -> OUT .) ]
  ! OUT             [ reduce using rule 274 (simpleIdentifier -> OUT .) ]
  ! VARARG          [ reduce using rule 274 (simpleIdentifier -> OUT .) ]
  ! WHERE           [ reduce using rule 274 (simpleIdentifier -> OUT .) ]
  ! OPERATOR        [ reduce using rule 274 (simpleIdentifier -> OUT .) ]


state 271

    (150) callSuffix -> valueArguments annotatedLambda .

    INCREMENTO      reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    DECREMENTO      reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    MENOR           reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    LCCT            reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    LPAREN          reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    COLONCOLON      reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    LCHAVE          reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    PONTO           reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    FUN             reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    $end            reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    ID              reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    FOR             reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    WHILE           reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    DO              reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    VAR             reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    VAL             reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    CROSSINLINE     reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    IMPORT          reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    INIT            reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    NOINLINE        reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    OUT             reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    VARARG          reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    WHERE           reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    OPERATOR        reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    LITERAL_STRING  reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    NUMBER          reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    IF              reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    RETURN          reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    RETURN_AT       reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    CONTINUE        reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    CONTINUE_AT     reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    BREAK           reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    BREAK_AT        reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    MINUS           reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    PLUS            reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    NOT             reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    SUSPEND         reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    RCHAVE          reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    PV              reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    ELSE            reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    AS              reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    MULT            reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    DIVIDE          reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    MOD             reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    PONTOPONTO      reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    ELVIS           reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    IN              reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    NOT_IN          reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    IS              reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    NOT_IS          reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    MAIOR           reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    MENORIGUAL      reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    MAIORIGUAL      reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    DIFERENTE       reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    IDENTIDADE      reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    IGUALDADE       reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    SEMIDENTIDADE   reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    AND             reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    OR              reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    MAISIGUAL       reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    MENOSIGUAL      reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    MULTIGUAL       reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    DIVIGUAL        reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    MODIGUAL        reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    RPAREN          reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    COMMA           reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)
    RCCT            reduce using rule 150 (callSuffix -> valueArguments annotatedLambda .)


state 272

    (141) indexingSuffix -> LCCT indexingSuffixRecursive . RCCT

    RCCT            shift and go to state 342


state 273

    (142) indexingSuffix -> LCCT RCCT .

    INCREMENTO      reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    DECREMENTO      reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    MENOR           reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    LCCT            reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    LPAREN          reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    COLONCOLON      reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    LCHAVE          reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    PONTO           reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    FUN             reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    $end            reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    ID              reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    FOR             reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    WHILE           reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    DO              reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    VAR             reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    VAL             reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    CROSSINLINE     reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    IMPORT          reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    INIT            reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    NOINLINE        reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    OUT             reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    VARARG          reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    WHERE           reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    OPERATOR        reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    LITERAL_STRING  reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    NUMBER          reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    IF              reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    RETURN          reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    RETURN_AT       reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    CONTINUE        reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    CONTINUE_AT     reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    BREAK           reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    BREAK_AT        reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    MINUS           reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    PLUS            reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    NOT             reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    SUSPEND         reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    RCHAVE          reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    PV              reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    ELSE            reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    AS              reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    MULT            reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    DIVIDE          reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    MOD             reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    PONTOPONTO      reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    ELVIS           reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    IN              reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    NOT_IN          reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    IS              reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    NOT_IS          reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    MAIOR           reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    MENORIGUAL      reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    MAIORIGUAL      reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    DIFERENTE       reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    IDENTIDADE      reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    IGUALDADE       reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    SEMIDENTIDADE   reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    AND             reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    OR              reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    MAISIGUAL       reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    MENOSIGUAL      reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    MULTIGUAL       reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    DIVIGUAL        reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    MODIGUAL        reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    RPAREN          reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    COMMA           reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    RCCT            reduce using rule 142 (indexingSuffix -> LCCT RCCT .)
    ATRIBUICAO      reduce using rule 142 (indexingSuffix -> LCCT RCCT .)


state 274

    (143) indexingSuffixRecursive -> expression .
    (144) indexingSuffixRecursive -> expression . COMMA indexingSuffixRecursive

    RCCT            reduce using rule 143 (indexingSuffixRecursive -> expression .)
    COMMA           shift and go to state 343


state 275

    (145) navigationSuffix -> memberAccessOperator simpleIdentifier . CLASS

    CLASS           shift and go to state 344


state 276

    (146) navigationSuffix -> memberAccessOperator parenthesizedExpression . CLASS

    CLASS           shift and go to state 345


state 277

    (159) valueArguments -> LPAREN RPAREN .

    LCHAVE          reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    INCREMENTO      reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    DECREMENTO      reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    MENOR           reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    LCCT            reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    LPAREN          reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    COLONCOLON      reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    PONTO           reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    FUN             reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    $end            reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    ID              reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    FOR             reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    WHILE           reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    DO              reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    VAR             reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    VAL             reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    CROSSINLINE     reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    IMPORT          reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    INIT            reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    NOINLINE        reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    OUT             reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    VARARG          reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    WHERE           reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    OPERATOR        reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    LITERAL_STRING  reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    NUMBER          reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    IF              reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    RETURN          reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    RETURN_AT       reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    CONTINUE        reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    CONTINUE_AT     reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    BREAK           reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    BREAK_AT        reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    MINUS           reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    PLUS            reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    NOT             reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    SUSPEND         reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    RCHAVE          reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    PV              reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    ELSE            reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    AS              reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    MULT            reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    MOD             reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    PONTOPONTO      reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    ELVIS           reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    IN              reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    NOT_IN          reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    IS              reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    NOT_IS          reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    MAIOR           reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    MENORIGUAL      reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    MAIORIGUAL      reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    DIFERENTE       reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    IDENTIDADE      reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    IGUALDADE       reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    SEMIDENTIDADE   reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    AND             reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    OR              reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    MAISIGUAL       reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    MENOSIGUAL      reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    MULTIGUAL       reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    DIVIGUAL        reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    MODIGUAL        reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    RPAREN          reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    COMMA           reduce using rule 159 (valueArguments -> LPAREN RPAREN .)
    RCCT            reduce using rule 159 (valueArguments -> LPAREN RPAREN .)


state 278

    (160) valueArguments -> LPAREN valueArgumentsRecursive . RPAREN

    RPAREN          shift and go to state 346


state 279

    (157) valueArgumentsRecursive -> valueArgument .
    (158) valueArgumentsRecursive -> valueArgument . COMMA valueArgumentsRecursive

    RPAREN          reduce using rule 157 (valueArgumentsRecursive -> valueArgument .)
    COMMA           shift and go to state 347


state 280

    (161) valueArgument -> simpleIdentifier . ATRIBUICAO MULT expression
    (162) valueArgument -> simpleIdentifier . ATRIBUICAO expression
    (165) primaryExpression -> simpleIdentifier .
    (268) label -> simpleIdentifier .

  ! reduce/reduce conflict for INCREMENTO resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 165 (primaryExpression -> simpleIdentifier .)
    ATRIBUICAO      shift and go to state 348
    INCREMENTO      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    DECREMENTO      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MENOR           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    LCCT            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    LPAREN          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    COLONCOLON      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    LCHAVE          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    PONTO           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    AS              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MULT            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    DIVIDE          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MOD             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    PLUS            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MINUS           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    ID              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IMPORT          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    INIT            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NOINLINE        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    OUT             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    VARARG          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    WHERE           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    OPERATOR        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    ELVIS           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IN              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NOT_IN          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IS              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NOT_IS          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MAIOR           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    DIFERENTE       reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IGUALDADE       reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    AND             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    OR              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    COMMA           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    RPAREN          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NOT             reduce using rule 268 (label -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 268 (label -> simpleIdentifier .)
    NUMBER          reduce using rule 268 (label -> simpleIdentifier .)
    IF              reduce using rule 268 (label -> simpleIdentifier .)
    RETURN          reduce using rule 268 (label -> simpleIdentifier .)
    RETURN_AT       reduce using rule 268 (label -> simpleIdentifier .)
    CONTINUE        reduce using rule 268 (label -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 268 (label -> simpleIdentifier .)
    BREAK           reduce using rule 268 (label -> simpleIdentifier .)
    BREAK_AT        reduce using rule 268 (label -> simpleIdentifier .)
    FUN             reduce using rule 268 (label -> simpleIdentifier .)
    SUSPEND         reduce using rule 268 (label -> simpleIdentifier .)

  ! INCREMENTO      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! PLUS            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! OPERATOR        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LCHAVE          [ reduce using rule 268 (label -> simpleIdentifier .) ]


state 281

    (163) valueArgument -> expression .

    COMMA           reduce using rule 163 (valueArgument -> expression .)
    RPAREN          reduce using rule 163 (valueArgument -> expression .)


state 282

    (173) parenthesizedExpression -> LPAREN expression RPAREN .

    FUN             reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    $end            reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    ID              reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DO              reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    VAL             reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CROSSINLINE     reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IMPORT          reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    INIT            reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NOINLINE        reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    OUT             reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    VARARG          reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    WHERE           reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    OPERATOR        reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    LITERAL_STRING  reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    COLONCOLON      reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    LCCT            reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IF              reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RETURN_AT       reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CONTINUE_AT     reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    BREAK_AT        reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    LCHAVE          reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    INCREMENTO      reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DECREMENTO      reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NOT             reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    SUSPEND         reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RCHAVE          reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    PV              reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MENOR           reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    PONTO           reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    AS              reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MULT            reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    PONTOPONTO      reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    ELVIS           reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IN              reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NOT_IN          reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IS              reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NOT_IS          reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MAIOR           reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MENORIGUAL      reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MAIORIGUAL      reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DIFERENTE       reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IDENTIDADE      reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IGUALDADE       reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    SEMIDENTIDADE   reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    AND             reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    OR              reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MAISIGUAL       reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MENOSIGUAL      reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MULTIGUAL       reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DIVIGUAL        reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MODIGUAL        reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RCCT            reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CLASS           reduce using rule 173 (parenthesizedExpression -> LPAREN expression RPAREN .)


state 283

    (230) callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .

    FUN             reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    $end            reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    ID              reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    FOR             reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    WHILE           reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    DO              reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    VAR             reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    VAL             reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    CROSSINLINE     reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    IMPORT          reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    INIT            reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    NOINLINE        reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    OUT             reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    VARARG          reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    WHERE           reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    OPERATOR        reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    LPAREN          reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    LITERAL_STRING  reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    NUMBER          reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    COLONCOLON      reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    LCCT            reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    IF              reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    RETURN          reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    RETURN_AT       reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    CONTINUE        reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    CONTINUE_AT     reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    BREAK           reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    BREAK_AT        reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    LCHAVE          reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    INCREMENTO      reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    DECREMENTO      reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    MINUS           reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    PLUS            reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    NOT             reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    SUSPEND         reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    RCHAVE          reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    PV              reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    ELSE            reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    MENOR           reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    PONTO           reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    AS              reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    MULT            reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    DIVIDE          reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    MOD             reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    PONTOPONTO      reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    ELVIS           reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    IN              reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    NOT_IN          reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    IS              reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    NOT_IS          reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    MAIOR           reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    MENORIGUAL      reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    MAIORIGUAL      reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    DIFERENTE       reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    IDENTIDADE      reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    IGUALDADE       reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    SEMIDENTIDADE   reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    AND             reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    OR              reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    MAISIGUAL       reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    MENOSIGUAL      reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    MULTIGUAL       reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    DIVIGUAL        reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    MODIGUAL        reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    RPAREN          reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    COMMA           reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)
    RCCT            reduce using rule 230 (callableReference -> receiverType COLONCOLON simpleIdentifierOrClass .)


state 284

    (174) collectionLiteral -> LCCT collectionLiteralRecursive RCCT .

    FUN             reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    $end            reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    ID              reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    FOR             reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    WHILE           reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    DO              reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    VAR             reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    VAL             reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    CROSSINLINE     reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    IMPORT          reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    INIT            reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    NOINLINE        reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    OUT             reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    VARARG          reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    WHERE           reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    OPERATOR        reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    LPAREN          reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    LITERAL_STRING  reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    NUMBER          reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    COLONCOLON      reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    LCCT            reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    IF              reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    RETURN          reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    RETURN_AT       reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    CONTINUE        reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    CONTINUE_AT     reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    BREAK           reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    BREAK_AT        reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    LCHAVE          reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    INCREMENTO      reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    DECREMENTO      reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MINUS           reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    PLUS            reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    NOT             reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    SUSPEND         reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    RCHAVE          reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    PV              reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    ELSE            reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MENOR           reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    PONTO           reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    AS              reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MULT            reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    DIVIDE          reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MOD             reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    PONTOPONTO      reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    ELVIS           reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    IN              reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    NOT_IN          reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    IS              reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    NOT_IS          reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MAIOR           reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MENORIGUAL      reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MAIORIGUAL      reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    DIFERENTE       reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    IDENTIDADE      reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    IGUALDADE       reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    SEMIDENTIDADE   reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    AND             reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    OR              reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MAISIGUAL       reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MENOSIGUAL      reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MULTIGUAL       reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    DIVIGUAL        reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MODIGUAL        reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    RPAREN          reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    COMMA           reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    RCCT            reduce using rule 174 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)


state 285

    (177) collectionLiteralRecursive -> expression COMMA . collectionLiteralRecursive
    (176) collectionLiteralRecursive -> . expression
    (177) collectionLiteralRecursive -> . expression COMMA collectionLiteralRecursive
    (8) expression -> . disjunction
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    expression                     shift and go to state 182
    collectionLiteralRecursive     shift and go to state 349
    disjunction                    shift and go to state 30
    conjunction                    shift and go to state 31
    equality                       shift and go to state 32
    comparison                     shift and go to state 33
    infixOperation                 shift and go to state 34
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    simpleIdentifier               shift and go to state 38
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 286

    (218) ifExpression -> IF LPAREN expression . RPAREN controlStructureBodyOrPV
    (219) ifExpression -> IF LPAREN expression . RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> IF LPAREN expression . RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> IF LPAREN expression . RPAREN controlStructureBody ELSE controlStructureBodyOrPV

    RPAREN          shift and go to state 350


state 287

    (60) parenthesizedType -> LPAREN type . RPAREN

    RPAREN          shift and go to state 313


state 288

    (189) lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .

    FUN             reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    $end            reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    ID              reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    FOR             reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    WHILE           reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    DO              reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    VAR             reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    VAL             reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    CROSSINLINE     reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    IMPORT          reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    INIT            reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    NOINLINE        reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    OUT             reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    VARARG          reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    WHERE           reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    OPERATOR        reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    LPAREN          reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    LITERAL_STRING  reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    NUMBER          reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    COLONCOLON      reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    LCCT            reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    IF              reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    RETURN          reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    RETURN_AT       reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    CONTINUE        reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    CONTINUE_AT     reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    BREAK           reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    BREAK_AT        reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    LCHAVE          reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    INCREMENTO      reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    DECREMENTO      reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    MINUS           reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    PLUS            reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    NOT             reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    SUSPEND         reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    RCHAVE          reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    PV              reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    ELSE            reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    MENOR           reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    PONTO           reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    AS              reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    MULT            reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    DIVIDE          reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    MOD             reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    PONTOPONTO      reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    ELVIS           reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    IN              reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    NOT_IN          reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    IS              reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    NOT_IS          reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    MAIOR           reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    MENORIGUAL      reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    MAIORIGUAL      reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    DIFERENTE       reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    IDENTIDADE      reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    IGUALDADE       reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    SEMIDENTIDADE   reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    AND             reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    OR              reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    MAISIGUAL       reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    MENOSIGUAL      reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    MULTIGUAL       reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    DIVIGUAL        reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    MODIGUAL        reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    RPAREN          reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    COMMA           reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    RCCT            reduce using rule 189 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)


state 289

    (191) optionsLambdaLiteral -> lambdaParameters SETA . statements
    (62) statements -> . statement
    (63) statements -> . statement statements
    (64) statement -> . functionDeclaration
    (65) statement -> . assignment
    (66) statement -> . loopStatement
    (67) statement -> . expression
    (68) statement -> . propertyDeclaration
    (69) statement -> . chamadaDeFuncao
    (4) functionDeclaration -> . FUN simpleIdentifier functionValueParameters functionBody
    (5) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType functionBody
    (86) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (87) assignment -> . asExpression assignmentAndOperator expression
    (73) loopStatement -> . forStatement
    (74) loopStatement -> . whileStatement
    (75) loopStatement -> . doWhileStatement
    (8) expression -> . disjunction
    (11) propertyDeclaration -> . varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV
    (12) propertyDeclaration -> . varOrVal genericVariableDeclaration ATRIBUICAO expression PV
    (13) propertyDeclaration -> . varOrVal genericVariableDeclaration ATRIBUICAO expression
    (14) propertyDeclaration -> . varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression
    (84) chamadaDeFuncao -> . ID LPAREN RPAREN
    (85) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (131) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (132) directlyAssignableExpression -> . simpleIdentifier
    (133) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (76) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody
    (77) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN
    (78) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (79) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (80) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (81) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (9) varOrVal -> . VAR
    (10) varOrVal -> . VAL
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (134) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (42) typeModifier -> . SUSPEND
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression

    FUN             shift and go to state 99
    ID              shift and go to state 107
    FOR             shift and go to state 111
    WHILE           shift and go to state 112
    DO              shift and go to state 113
    VAR             shift and go to state 114
    VAL             shift and go to state 115
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LPAREN          shift and go to state 108
    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    SUSPEND         shift and go to state 78

    statements                     shift and go to state 351
    statement                      shift and go to state 92
    functionDeclaration            shift and go to state 93
    assignment                     shift and go to state 94
    loopStatement                  shift and go to state 95
    expression                     shift and go to state 96
    propertyDeclaration            shift and go to state 97
    chamadaDeFuncao                shift and go to state 98
    simpleIdentifier               shift and go to state 100
    directlyAssignableExpression   shift and go to state 101
    asExpression                   shift and go to state 102
    forStatement                   shift and go to state 103
    whileStatement                 shift and go to state 104
    doWhileStatement               shift and go to state 105
    disjunction                    shift and go to state 30
    varOrVal                       shift and go to state 106
    postfixUnaryExpression         shift and go to state 109
    parenthesizedDirectlyAssignableExpression shift and go to state 110
    prefixUnaryExpression          shift and go to state 42
    conjunction                    shift and go to state 31
    primaryExpression              shift and go to state 46
    prefixUnaryExpressionRecursive shift and go to state 43
    equality                       shift and go to state 32
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    unaryPrefix                    shift and go to state 45
    comparison                     shift and go to state 33
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    infixOperation                 shift and go to state 34
    typeModifier                   shift and go to state 75
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40

state 290

    (192) optionsLambdaLiteral -> SETA statements .

    RCHAVE          reduce using rule 192 (optionsLambdaLiteral -> SETA statements .)


state 291

    (194) lambdaParameters -> lambdaParameter COMMA . lambdaParameters
    (193) lambdaParameters -> . lambdaParameter
    (194) lambdaParameters -> . lambdaParameter COMMA lambdaParameters
    (195) lambdaParameter -> . variableDeclaration
    (196) lambdaParameter -> . multiVariableDeclaration optionalType
    (197) lambdaParameter -> . multiVariableDeclaration
    (28) variableDeclaration -> . simpleIdentifier DOISP type
    (29) variableDeclaration -> . simpleIdentifier
    (30) multiVariableDeclaration -> . LPAREN multiVariableDeclarationRecursive RPAREN
    (31) multiVariableDeclaration -> . LPAREN RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    LPAREN          shift and go to state 226
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    lambdaParameter                shift and go to state 192
    lambdaParameters               shift and go to state 352
    variableDeclaration            shift and go to state 193
    multiVariableDeclaration       shift and go to state 194
    simpleIdentifier               shift and go to state 227

state 292

    (196) lambdaParameter -> multiVariableDeclaration optionalType .

    COMMA           reduce using rule 196 (lambdaParameter -> multiVariableDeclaration optionalType .)
    SETA            reduce using rule 196 (lambdaParameter -> multiVariableDeclaration optionalType .)


state 293

    (28) variableDeclaration -> simpleIdentifier DOISP . type
    (35) type -> . typeModifiers optype
    (36) type -> . optype
    (40) typeModifiers -> . typeModifier
    (41) typeModifiers -> . typeModifier typeModifiers
    (37) optype -> . parenthesizedType
    (38) optype -> . functionType
    (39) optype -> . userType
    (42) typeModifier -> . SUSPEND
    (60) parenthesizedType -> . LPAREN type RPAREN
    (53) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (54) functionType -> . functionTypeParameters SETA type
    (46) userType -> . simpleUserType
    (61) receiverType -> . typeModifier parenthesizedType
    (59) functionTypeParameters -> . LPAREN parameterOrType parameterOrTypeRecursive RPAREN
    (47) simpleUserType -> . simpleIdentifier typeArguments
    (48) simpleUserType -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    SUSPEND         shift and go to state 78
    LPAREN          shift and go to state 86
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    simpleIdentifier               shift and go to state 90
    type                           shift and go to state 353
    typeModifiers                  shift and go to state 80
    optype                         shift and go to state 81
    typeModifier                   shift and go to state 82
    parenthesizedType              shift and go to state 83
    functionType                   shift and go to state 84
    userType                       shift and go to state 85
    receiverType                   shift and go to state 87
    functionTypeParameters         shift and go to state 88
    simpleUserType                 shift and go to state 89

state 294

    (30) multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive . RPAREN

    RPAREN          shift and go to state 354


state 295

    (31) multiVariableDeclaration -> LPAREN RPAREN .

    DOISP           reduce using rule 31 (multiVariableDeclaration -> LPAREN RPAREN .)
    COMMA           reduce using rule 31 (multiVariableDeclaration -> LPAREN RPAREN .)
    SETA            reduce using rule 31 (multiVariableDeclaration -> LPAREN RPAREN .)
    ATRIBUICAO      reduce using rule 31 (multiVariableDeclaration -> LPAREN RPAREN .)
    IN              reduce using rule 31 (multiVariableDeclaration -> LPAREN RPAREN .)


state 296

    (32) multiVariableDeclarationRecursive -> variableDeclaration .
    (33) multiVariableDeclarationRecursive -> variableDeclaration . COMMA multiVariableDeclarationRecursive

    RPAREN          reduce using rule 32 (multiVariableDeclarationRecursive -> variableDeclaration .)
    COMMA           shift and go to state 355


state 297

    (132) directlyAssignableExpression -> simpleIdentifier .
    (28) variableDeclaration -> simpleIdentifier . DOISP type
    (29) variableDeclaration -> simpleIdentifier .
    (165) primaryExpression -> simpleIdentifier .
    (268) label -> simpleIdentifier .

  ! reduce/reduce conflict for RPAREN resolved using rule 29 (variableDeclaration -> simpleIdentifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 29 (variableDeclaration -> simpleIdentifier .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for NOT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for NUMBER resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for IF resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for FUN resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 165 (primaryExpression -> simpleIdentifier .)
    ATRIBUICAO      reduce using rule 132 (directlyAssignableExpression -> simpleIdentifier .)
    DOISP           shift and go to state 293
    COMMA           reduce using rule 29 (variableDeclaration -> simpleIdentifier .)
    RPAREN          reduce using rule 29 (variableDeclaration -> simpleIdentifier .)
    SETA            reduce using rule 29 (variableDeclaration -> simpleIdentifier .)
    INCREMENTO      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    DECREMENTO      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MENOR           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    LCCT            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    LPAREN          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    COLONCOLON      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    LCHAVE          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    PONTO           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    AS              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MULT            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    DIVIDE          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MOD             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    PLUS            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MINUS           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    ID              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IMPORT          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    INIT            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NOINLINE        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    OUT             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    VARARG          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    WHERE           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    OPERATOR        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    ELVIS           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IN              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NOT_IN          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IS              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NOT_IS          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MAIOR           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    DIFERENTE       reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IGUALDADE       reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    AND             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    OR              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MAISIGUAL       reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MENOSIGUAL      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MODIGUAL        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    FUN             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    FOR             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    WHILE           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    DO              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    VAR             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    VAL             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NUMBER          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IF              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    RETURN          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    RETURN_AT       reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    CONTINUE        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    BREAK           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    BREAK_AT        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NOT             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    SUSPEND         reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    RCHAVE          reduce using rule 165 (primaryExpression -> simpleIdentifier .)

  ! RPAREN          [ reduce using rule 132 (directlyAssignableExpression -> simpleIdentifier .) ]
  ! RPAREN          [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! INCREMENTO      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! PLUS            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NOT             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! OPERATOR        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LITERAL_STRING  [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NUMBER          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! IF              [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! RETURN          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! RETURN_AT       [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CONTINUE        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CONTINUE_AT     [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! BREAK           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! BREAK_AT        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LCHAVE          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! FUN             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! SUSPEND         [ reduce using rule 268 (label -> simpleIdentifier .) ]


state 298

    (199) anonymousFunction -> FUN typePonto parametersWithOptionalType . optionalType typeConstraints functionBody
    (201) anonymousFunction -> FUN typePonto parametersWithOptionalType . typeConstraints functionBody
    (202) anonymousFunction -> FUN typePonto parametersWithOptionalType . optionalType functionBody
    (203) anonymousFunction -> FUN typePonto parametersWithOptionalType . optionalType typeConstraints
    (207) anonymousFunction -> FUN typePonto parametersWithOptionalType . functionBody
    (208) anonymousFunction -> FUN typePonto parametersWithOptionalType . typeConstraints
    (209) anonymousFunction -> FUN typePonto parametersWithOptionalType . optionalType
    (210) anonymousFunction -> FUN typePonto parametersWithOptionalType .
    (3) optionalType -> . DOISP type
    (217) typeConstraints -> . simpleIdentifier DOISP type
    (20) functionBody -> . block
    (21) functionBody -> . ATRIBUICAO expression
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (72) block -> . LCHAVE statements RCHAVE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for LCHAVE resolved as shift
    FUN             reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    $end            reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    FOR             reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    WHILE           reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    DO              reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    VAR             reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    VAL             reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    LPAREN          reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    LITERAL_STRING  reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    NUMBER          reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    COLONCOLON      reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    LCCT            reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    IF              reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    RETURN          reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    RETURN_AT       reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    CONTINUE        reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    CONTINUE_AT     reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    BREAK           reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    BREAK_AT        reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    INCREMENTO      reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    DECREMENTO      reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    MINUS           reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    PLUS            reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    NOT             reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    SUSPEND         reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    RCHAVE          reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    PV              reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    ELSE            reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    MENOR           reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    PONTO           reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    AS              reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    MULT            reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    DIVIDE          reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    MOD             reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    PONTOPONTO      reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    ELVIS           reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    IN              reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    NOT_IN          reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    IS              reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    NOT_IS          reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    MAIOR           reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    MENORIGUAL      reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    MAIORIGUAL      reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    DIFERENTE       reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    IDENTIDADE      reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    IGUALDADE       reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    SEMIDENTIDADE   reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    AND             reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    OR              reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    MAISIGUAL       reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    MENOSIGUAL      reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    MULTIGUAL       reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    DIVIGUAL        reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    MODIGUAL        reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    RPAREN          reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    COMMA           reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    RCCT            reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .)
    DOISP           shift and go to state 21
    ATRIBUICAO      shift and go to state 20
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCHAVE          shift and go to state 22

  ! ID              [ reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .) ]
  ! CROSSINLINE     [ reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .) ]
  ! IMPORT          [ reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .) ]
  ! INIT            [ reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .) ]
  ! NOINLINE        [ reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .) ]
  ! OUT             [ reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .) ]
  ! VARARG          [ reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .) ]
  ! WHERE           [ reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .) ]
  ! OPERATOR        [ reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .) ]
  ! LCHAVE          [ reduce using rule 210 (anonymousFunction -> FUN typePonto parametersWithOptionalType .) ]

    optionalType                   shift and go to state 356
    typeConstraints                shift and go to state 357
    functionBody                   shift and go to state 358
    simpleIdentifier               shift and go to state 303
    block                          shift and go to state 19

state 299

    (178) parametersWithOptionalType -> LPAREN . parametersWithOptionalTypeRecursive RPAREN
    (179) parametersWithOptionalType -> LPAREN . RPAREN
    (180) parametersWithOptionalTypeRecursive -> . parameterWithOptionalType
    (181) parametersWithOptionalTypeRecursive -> . parameterWithOptionalType COMMA parametersWithOptionalTypeRecursive
    (182) parameterWithOptionalType -> . parameterModifiers simpleIdentifier optionalType
    (183) parameterWithOptionalType -> . parameterModifiers simpleIdentifier
    (184) parameterWithOptionalType -> . simpleIdentifier optionalType
    (185) parameterWithOptionalType -> . simpleIdentifier
    (186) parameterModifiers -> . VARARG
    (187) parameterModifiers -> . NOINLINE
    (188) parameterModifiers -> . CROSSINLINE
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    RPAREN          shift and go to state 306
    VARARG          shift and go to state 310
    NOINLINE        shift and go to state 311
    CROSSINLINE     shift and go to state 312
    ID              shift and go to state 6
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    OUT             shift and go to state 11
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    parametersWithOptionalTypeRecursive shift and go to state 305
    parameterWithOptionalType      shift and go to state 307
    parameterModifiers             shift and go to state 308
    simpleIdentifier               shift and go to state 359

state 300

    (200) anonymousFunction -> FUN parametersWithOptionalType optionalType . typeConstraints functionBody
    (205) anonymousFunction -> FUN parametersWithOptionalType optionalType . functionBody
    (206) anonymousFunction -> FUN parametersWithOptionalType optionalType . typeConstraints
    (212) anonymousFunction -> FUN parametersWithOptionalType optionalType .
    (217) typeConstraints -> . simpleIdentifier DOISP type
    (20) functionBody -> . block
    (21) functionBody -> . ATRIBUICAO expression
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (72) block -> . LCHAVE statements RCHAVE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for LCHAVE resolved as shift
    FUN             reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    $end            reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    FOR             reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    WHILE           reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    DO              reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    VAR             reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    VAL             reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    LPAREN          reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    LITERAL_STRING  reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    NUMBER          reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    COLONCOLON      reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    LCCT            reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    IF              reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    RETURN          reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    RETURN_AT       reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    CONTINUE        reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    CONTINUE_AT     reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    BREAK           reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    BREAK_AT        reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    INCREMENTO      reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    DECREMENTO      reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    MINUS           reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    PLUS            reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    NOT             reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    SUSPEND         reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    RCHAVE          reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    PV              reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    ELSE            reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    MENOR           reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    PONTO           reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    AS              reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    MULT            reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    DIVIDE          reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    MOD             reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    PONTOPONTO      reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    ELVIS           reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    IN              reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    NOT_IN          reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    IS              reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    NOT_IS          reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    MAIOR           reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    MENORIGUAL      reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    MAIORIGUAL      reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    DIFERENTE       reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    IDENTIDADE      reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    IGUALDADE       reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    SEMIDENTIDADE   reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    AND             reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    OR              reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    MAISIGUAL       reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    MENOSIGUAL      reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    MULTIGUAL       reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    DIVIGUAL        reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    MODIGUAL        reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    RPAREN          reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    COMMA           reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    RCCT            reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .)
    ATRIBUICAO      shift and go to state 20
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCHAVE          shift and go to state 22

  ! ID              [ reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .) ]
  ! CROSSINLINE     [ reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .) ]
  ! IMPORT          [ reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .) ]
  ! INIT            [ reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .) ]
  ! NOINLINE        [ reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .) ]
  ! OUT             [ reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .) ]
  ! VARARG          [ reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .) ]
  ! WHERE           [ reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .) ]
  ! OPERATOR        [ reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .) ]
  ! LCHAVE          [ reduce using rule 212 (anonymousFunction -> FUN parametersWithOptionalType optionalType .) ]

    typeConstraints                shift and go to state 360
    functionBody                   shift and go to state 361
    simpleIdentifier               shift and go to state 303
    block                          shift and go to state 19

state 301

    (204) anonymousFunction -> FUN parametersWithOptionalType typeConstraints . functionBody
    (213) anonymousFunction -> FUN parametersWithOptionalType typeConstraints .
    (20) functionBody -> . block
    (21) functionBody -> . ATRIBUICAO expression
    (72) block -> . LCHAVE statements RCHAVE

  ! shift/reduce conflict for LCHAVE resolved as shift
    FUN             reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    $end            reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    ID              reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    FOR             reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    WHILE           reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    DO              reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    VAR             reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    VAL             reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    CROSSINLINE     reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    IMPORT          reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    INIT            reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    NOINLINE        reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    OUT             reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    VARARG          reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    WHERE           reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    OPERATOR        reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    LPAREN          reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    LITERAL_STRING  reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    NUMBER          reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    COLONCOLON      reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    LCCT            reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    IF              reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    RETURN          reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    RETURN_AT       reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    CONTINUE        reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    CONTINUE_AT     reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    BREAK           reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    BREAK_AT        reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    INCREMENTO      reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    DECREMENTO      reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    MINUS           reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    PLUS            reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    NOT             reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    SUSPEND         reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    RCHAVE          reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    PV              reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    ELSE            reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    MENOR           reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    PONTO           reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    AS              reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    MULT            reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    DIVIDE          reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    MOD             reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    PONTOPONTO      reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    ELVIS           reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    IN              reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    NOT_IN          reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    IS              reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    NOT_IS          reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    MAIOR           reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    MENORIGUAL      reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    MAIORIGUAL      reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    DIFERENTE       reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    IDENTIDADE      reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    IGUALDADE       reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    SEMIDENTIDADE   reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    AND             reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    OR              reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    MAISIGUAL       reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    MENOSIGUAL      reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    MULTIGUAL       reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    DIVIGUAL        reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    MODIGUAL        reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    RPAREN          reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    COMMA           reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    RCCT            reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .)
    ATRIBUICAO      shift and go to state 20
    LCHAVE          shift and go to state 22

  ! LCHAVE          [ reduce using rule 213 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints .) ]

    functionBody                   shift and go to state 362
    block                          shift and go to state 19

state 302

    (211) anonymousFunction -> FUN parametersWithOptionalType functionBody .

    FUN             reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    $end            reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    ID              reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    FOR             reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    WHILE           reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    DO              reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    VAR             reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    VAL             reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    CROSSINLINE     reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    IMPORT          reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    INIT            reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    NOINLINE        reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    OUT             reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    VARARG          reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    WHERE           reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    OPERATOR        reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    LPAREN          reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    LITERAL_STRING  reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    NUMBER          reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    COLONCOLON      reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    LCCT            reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    IF              reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    RETURN          reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    RETURN_AT       reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    CONTINUE        reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    CONTINUE_AT     reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    BREAK           reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    BREAK_AT        reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    LCHAVE          reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    INCREMENTO      reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    DECREMENTO      reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    MINUS           reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    PLUS            reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    NOT             reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    SUSPEND         reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    RCHAVE          reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    PV              reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    ELSE            reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    MENOR           reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    PONTO           reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    AS              reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    MULT            reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    DIVIDE          reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    MOD             reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    PONTOPONTO      reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    ELVIS           reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    IN              reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    NOT_IN          reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    IS              reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    NOT_IS          reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    MAIOR           reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    MENORIGUAL      reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    MAIORIGUAL      reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    DIFERENTE       reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    IDENTIDADE      reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    IGUALDADE       reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    SEMIDENTIDADE   reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    AND             reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    OR              reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    MAISIGUAL       reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    MENOSIGUAL      reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    MULTIGUAL       reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    DIVIGUAL        reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    MODIGUAL        reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    RPAREN          reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    COMMA           reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)
    RCCT            reduce using rule 211 (anonymousFunction -> FUN parametersWithOptionalType functionBody .)


state 303

    (217) typeConstraints -> simpleIdentifier . DOISP type

    DOISP           shift and go to state 363


state 304

    (198) typePonto -> type PONTO .

    LPAREN          reduce using rule 198 (typePonto -> type PONTO .)


state 305

    (178) parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive . RPAREN

    RPAREN          shift and go to state 364


state 306

    (179) parametersWithOptionalType -> LPAREN RPAREN .

    DOISP           reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    ATRIBUICAO      reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    ID              reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    CROSSINLINE     reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    IMPORT          reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    INIT            reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    NOINLINE        reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    OUT             reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    VARARG          reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    WHERE           reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    OPERATOR        reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    LCHAVE          reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    FUN             reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    $end            reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    FOR             reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    WHILE           reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    DO              reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    VAR             reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    VAL             reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    LPAREN          reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    LITERAL_STRING  reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    NUMBER          reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    COLONCOLON      reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    LCCT            reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    IF              reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    RETURN          reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    RETURN_AT       reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    CONTINUE        reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    CONTINUE_AT     reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    BREAK           reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    BREAK_AT        reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    INCREMENTO      reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    DECREMENTO      reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    MINUS           reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    PLUS            reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    NOT             reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    SUSPEND         reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    RCHAVE          reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    PV              reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    ELSE            reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    MENOR           reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    PONTO           reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    AS              reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    MULT            reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    MOD             reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    PONTOPONTO      reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    ELVIS           reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    IN              reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    NOT_IN          reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    IS              reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    NOT_IS          reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    MAIOR           reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    MENORIGUAL      reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    MAIORIGUAL      reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    DIFERENTE       reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    IDENTIDADE      reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    IGUALDADE       reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    SEMIDENTIDADE   reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    AND             reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    OR              reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    MAISIGUAL       reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    MENOSIGUAL      reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    MULTIGUAL       reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    DIVIGUAL        reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    MODIGUAL        reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    RPAREN          reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    COMMA           reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)
    RCCT            reduce using rule 179 (parametersWithOptionalType -> LPAREN RPAREN .)


state 307

    (180) parametersWithOptionalTypeRecursive -> parameterWithOptionalType .
    (181) parametersWithOptionalTypeRecursive -> parameterWithOptionalType . COMMA parametersWithOptionalTypeRecursive

    RPAREN          reduce using rule 180 (parametersWithOptionalTypeRecursive -> parameterWithOptionalType .)
    COMMA           shift and go to state 365


state 308

    (182) parameterWithOptionalType -> parameterModifiers . simpleIdentifier optionalType
    (183) parameterWithOptionalType -> parameterModifiers . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    simpleIdentifier               shift and go to state 366

state 309

    (184) parameterWithOptionalType -> simpleIdentifier . optionalType
    (185) parameterWithOptionalType -> simpleIdentifier .
    (34) parameter -> simpleIdentifier . optionalType
    (47) simpleUserType -> simpleIdentifier . typeArguments
    (48) simpleUserType -> simpleIdentifier .
    (3) optionalType -> . DOISP type
    (153) typeArguments -> . MENOR typeArgumentsRecursive MAIOR
    (154) typeArguments -> . MENOR MAIOR

  ! reduce/reduce conflict for RPAREN resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 48 (simpleUserType -> simpleIdentifier .)
    RPAREN          reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    COMMA           reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    DOISP           shift and go to state 21
    MENOR           shift and go to state 165

  ! COMMA           [ reduce using rule 185 (parameterWithOptionalType -> simpleIdentifier .) ]
  ! RPAREN          [ reduce using rule 185 (parameterWithOptionalType -> simpleIdentifier .) ]

    optionalType                   shift and go to state 367
    typeArguments                  shift and go to state 210

state 310

    (186) parameterModifiers -> VARARG .
    (275) simpleIdentifier -> VARARG .

    ID              reduce using rule 186 (parameterModifiers -> VARARG .)
    CROSSINLINE     reduce using rule 186 (parameterModifiers -> VARARG .)
    IMPORT          reduce using rule 186 (parameterModifiers -> VARARG .)
    INIT            reduce using rule 186 (parameterModifiers -> VARARG .)
    NOINLINE        reduce using rule 186 (parameterModifiers -> VARARG .)
    OUT             reduce using rule 186 (parameterModifiers -> VARARG .)
    VARARG          reduce using rule 186 (parameterModifiers -> VARARG .)
    WHERE           reduce using rule 186 (parameterModifiers -> VARARG .)
    OPERATOR        reduce using rule 186 (parameterModifiers -> VARARG .)
    DOISP           reduce using rule 275 (simpleIdentifier -> VARARG .)
    MENOR           reduce using rule 275 (simpleIdentifier -> VARARG .)
    COMMA           reduce using rule 275 (simpleIdentifier -> VARARG .)
    RPAREN          reduce using rule 275 (simpleIdentifier -> VARARG .)


state 311

    (187) parameterModifiers -> NOINLINE .
    (273) simpleIdentifier -> NOINLINE .

    ID              reduce using rule 187 (parameterModifiers -> NOINLINE .)
    CROSSINLINE     reduce using rule 187 (parameterModifiers -> NOINLINE .)
    IMPORT          reduce using rule 187 (parameterModifiers -> NOINLINE .)
    INIT            reduce using rule 187 (parameterModifiers -> NOINLINE .)
    NOINLINE        reduce using rule 187 (parameterModifiers -> NOINLINE .)
    OUT             reduce using rule 187 (parameterModifiers -> NOINLINE .)
    VARARG          reduce using rule 187 (parameterModifiers -> NOINLINE .)
    WHERE           reduce using rule 187 (parameterModifiers -> NOINLINE .)
    OPERATOR        reduce using rule 187 (parameterModifiers -> NOINLINE .)
    DOISP           reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    MENOR           reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    COMMA           reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    RPAREN          reduce using rule 273 (simpleIdentifier -> NOINLINE .)


state 312

    (188) parameterModifiers -> CROSSINLINE .
    (270) simpleIdentifier -> CROSSINLINE .

    ID              reduce using rule 188 (parameterModifiers -> CROSSINLINE .)
    CROSSINLINE     reduce using rule 188 (parameterModifiers -> CROSSINLINE .)
    IMPORT          reduce using rule 188 (parameterModifiers -> CROSSINLINE .)
    INIT            reduce using rule 188 (parameterModifiers -> CROSSINLINE .)
    NOINLINE        reduce using rule 188 (parameterModifiers -> CROSSINLINE .)
    OUT             reduce using rule 188 (parameterModifiers -> CROSSINLINE .)
    VARARG          reduce using rule 188 (parameterModifiers -> CROSSINLINE .)
    WHERE           reduce using rule 188 (parameterModifiers -> CROSSINLINE .)
    OPERATOR        reduce using rule 188 (parameterModifiers -> CROSSINLINE .)
    DOISP           reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    MENOR           reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    COMMA           reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    RPAREN          reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)


state 313

    (60) parenthesizedType -> LPAREN type RPAREN .

    ATRIBUICAO      reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    LCHAVE          reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    COMMA           reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    RPAREN          reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    SETA            reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    ID              reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    CROSSINLINE     reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    IMPORT          reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    INIT            reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    NOINLINE        reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    OUT             reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    VARARG          reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    WHERE           reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    OPERATOR        reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    FUN             reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    $end            reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    FOR             reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    WHILE           reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    DO              reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    VAR             reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    VAL             reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    LPAREN          reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    LITERAL_STRING  reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    NUMBER          reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    COLONCOLON      reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    LCCT            reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    IF              reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    RETURN          reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    RETURN_AT       reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    CONTINUE        reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    CONTINUE_AT     reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    BREAK           reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    BREAK_AT        reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    INCREMENTO      reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    DECREMENTO      reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    MINUS           reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    PLUS            reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    NOT             reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    SUSPEND         reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    RCHAVE          reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    PV              reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    ELSE            reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    MENOR           reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    PONTO           reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    AS              reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    MULT            reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    DIVIDE          reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    MOD             reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    PONTOPONTO      reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    ELVIS           reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    IN              reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    NOT_IN          reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    IS              reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    NOT_IS          reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    MAIOR           reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    MENORIGUAL      reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    MAIORIGUAL      reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    DIFERENTE       reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    IDENTIDADE      reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    IGUALDADE       reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    SEMIDENTIDADE   reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    AND             reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    OR              reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    MAISIGUAL       reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    MENOSIGUAL      reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    MULTIGUAL       reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    DIVIGUAL        reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    MODIGUAL        reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)
    RCCT            reduce using rule 60 (parenthesizedType -> LPAREN type RPAREN .)


state 314

    (59) functionTypeParameters -> LPAREN parameterOrType parameterOrTypeRecursive . RPAREN

    RPAREN          shift and go to state 368


state 315

    (57) parameterOrTypeRecursive -> COMMA . parameterOrType
    (58) parameterOrTypeRecursive -> COMMA . parameterOrType parameterOrTypeRecursive
    (55) parameterOrType -> . parameter
    (56) parameterOrType -> . type
    (34) parameter -> . simpleIdentifier optionalType
    (35) type -> . typeModifiers optype
    (36) type -> . optype
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (40) typeModifiers -> . typeModifier
    (41) typeModifiers -> . typeModifier typeModifiers
    (37) optype -> . parenthesizedType
    (38) optype -> . functionType
    (39) optype -> . userType
    (42) typeModifier -> . SUSPEND
    (60) parenthesizedType -> . LPAREN type RPAREN
    (53) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (54) functionType -> . functionTypeParameters SETA type
    (46) userType -> . simpleUserType
    (61) receiverType -> . typeModifier parenthesizedType
    (59) functionTypeParameters -> . LPAREN parameterOrType parameterOrTypeRecursive RPAREN
    (47) simpleUserType -> . simpleIdentifier typeArguments
    (48) simpleUserType -> . simpleIdentifier

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    SUSPEND         shift and go to state 78
    LPAREN          shift and go to state 86

    parameterOrType                shift and go to state 369
    parameter                      shift and go to state 206
    type                           shift and go to state 370
    simpleIdentifier               shift and go to state 207
    typeModifiers                  shift and go to state 80
    optype                         shift and go to state 81
    typeModifier                   shift and go to state 82
    parenthesizedType              shift and go to state 83
    functionType                   shift and go to state 84
    userType                       shift and go to state 85
    receiverType                   shift and go to state 87
    functionTypeParameters         shift and go to state 88
    simpleUserType                 shift and go to state 89

state 316

    (53) functionType -> receiverType PONTO functionTypeParameters . SETA type

    SETA            shift and go to state 371


state 317

    (59) functionTypeParameters -> LPAREN . parameterOrType parameterOrTypeRecursive RPAREN
    (55) parameterOrType -> . parameter
    (56) parameterOrType -> . type
    (34) parameter -> . simpleIdentifier optionalType
    (35) type -> . typeModifiers optype
    (36) type -> . optype
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (40) typeModifiers -> . typeModifier
    (41) typeModifiers -> . typeModifier typeModifiers
    (37) optype -> . parenthesizedType
    (38) optype -> . functionType
    (39) optype -> . userType
    (42) typeModifier -> . SUSPEND
    (60) parenthesizedType -> . LPAREN type RPAREN
    (53) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (54) functionType -> . functionTypeParameters SETA type
    (46) userType -> . simpleUserType
    (61) receiverType -> . typeModifier parenthesizedType
    (59) functionTypeParameters -> . LPAREN parameterOrType parameterOrTypeRecursive RPAREN
    (47) simpleUserType -> . simpleIdentifier typeArguments
    (48) simpleUserType -> . simpleIdentifier

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    SUSPEND         shift and go to state 78
    LPAREN          shift and go to state 86

    parameterOrType                shift and go to state 205
    parameter                      shift and go to state 206
    type                           shift and go to state 370
    simpleIdentifier               shift and go to state 207
    typeModifiers                  shift and go to state 80
    optype                         shift and go to state 81
    typeModifier                   shift and go to state 82
    parenthesizedType              shift and go to state 83
    functionType                   shift and go to state 84
    userType                       shift and go to state 85
    receiverType                   shift and go to state 87
    functionTypeParameters         shift and go to state 88
    simpleUserType                 shift and go to state 89

state 318

    (54) functionType -> functionTypeParameters SETA type .

    ATRIBUICAO      reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    LCHAVE          reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    COMMA           reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    RPAREN          reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    SETA            reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    ID              reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    CROSSINLINE     reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    IMPORT          reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    INIT            reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    NOINLINE        reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    OUT             reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    VARARG          reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    WHERE           reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    OPERATOR        reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    FUN             reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    $end            reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    FOR             reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    WHILE           reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    DO              reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    VAR             reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    VAL             reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    LPAREN          reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    LITERAL_STRING  reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    NUMBER          reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    COLONCOLON      reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    LCCT            reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    IF              reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    RETURN          reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    RETURN_AT       reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    CONTINUE        reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    CONTINUE_AT     reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    BREAK           reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    BREAK_AT        reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    INCREMENTO      reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    DECREMENTO      reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    MINUS           reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    PLUS            reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    NOT             reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    SUSPEND         reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    RCHAVE          reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    PV              reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    ELSE            reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    MENOR           reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    PONTO           reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    AS              reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    MULT            reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    DIVIDE          reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    MOD             reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    PONTOPONTO      reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    ELVIS           reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    IN              reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    NOT_IN          reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    IS              reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    NOT_IS          reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    MAIOR           reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    MENORIGUAL      reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    MAIORIGUAL      reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    DIFERENTE       reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    IDENTIDADE      reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    IGUALDADE       reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    SEMIDENTIDADE   reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    AND             reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    OR              reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    MAISIGUAL       reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    MENOSIGUAL      reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    MULTIGUAL       reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    DIVIGUAL        reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    MODIGUAL        reduce using rule 54 (functionType -> functionTypeParameters SETA type .)
    RCCT            reduce using rule 54 (functionType -> functionTypeParameters SETA type .)


state 319

    (86) assignment -> directlyAssignableExpression ATRIBUICAO expression .

    FUN             reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    ID              reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    FOR             reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    WHILE           reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    DO              reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    VAR             reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    VAL             reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    CROSSINLINE     reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    IMPORT          reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    INIT            reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    NOINLINE        reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    OUT             reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    VARARG          reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    WHERE           reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    OPERATOR        reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    LPAREN          reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    LITERAL_STRING  reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    NUMBER          reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    COLONCOLON      reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    LCCT            reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    IF              reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    RETURN          reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    RETURN_AT       reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    CONTINUE        reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    CONTINUE_AT     reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    BREAK           reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    BREAK_AT        reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    LCHAVE          reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    INCREMENTO      reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    DECREMENTO      reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MINUS           reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    PLUS            reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    NOT             reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    SUSPEND         reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    RCHAVE          reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    $end            reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    PV              reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    ELSE            reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MENOR           reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    PONTO           reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    AS              reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MULT            reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    DIVIDE          reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MOD             reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    PONTOPONTO      reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    ELVIS           reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    IN              reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    NOT_IN          reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    IS              reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    NOT_IS          reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MAIOR           reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MENORIGUAL      reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MAIORIGUAL      reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    DIFERENTE       reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    IDENTIDADE      reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    IGUALDADE       reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    SEMIDENTIDADE   reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    AND             reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    OR              reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MAISIGUAL       reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MENOSIGUAL      reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MULTIGUAL       reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    DIVIGUAL        reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MODIGUAL        reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    RPAREN          reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    COMMA           reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    RCCT            reduce using rule 86 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)


state 320

    (87) assignment -> asExpression assignmentAndOperator expression .

    FUN             reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    ID              reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    FOR             reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    WHILE           reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    DO              reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    VAR             reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    VAL             reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    CROSSINLINE     reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    IMPORT          reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    INIT            reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    NOINLINE        reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    OUT             reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    VARARG          reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    WHERE           reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    OPERATOR        reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    LPAREN          reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    LITERAL_STRING  reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    NUMBER          reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    COLONCOLON      reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    LCCT            reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    IF              reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    RETURN          reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    RETURN_AT       reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    CONTINUE        reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    CONTINUE_AT     reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    BREAK           reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    BREAK_AT        reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    LCHAVE          reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    INCREMENTO      reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    DECREMENTO      reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    MINUS           reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    PLUS            reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    NOT             reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    SUSPEND         reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    RCHAVE          reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    $end            reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    PV              reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    ELSE            reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    MENOR           reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    PONTO           reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    AS              reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    MULT            reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    DIVIDE          reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    MOD             reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    PONTOPONTO      reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    ELVIS           reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    IN              reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    NOT_IN          reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    IS              reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    NOT_IS          reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    MAIOR           reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    MENORIGUAL      reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    MAIORIGUAL      reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    DIFERENTE       reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    IDENTIDADE      reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    IGUALDADE       reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    SEMIDENTIDADE   reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    AND             reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    OR              reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    MAISIGUAL       reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    MENOSIGUAL      reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    MULTIGUAL       reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    DIVIGUAL        reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    MODIGUAL        reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    RPAREN          reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    COMMA           reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)
    RCCT            reduce using rule 87 (assignment -> asExpression assignmentAndOperator expression .)


state 321

    (11) propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration . ATRIBUICAO expression PV
    (14) propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration . ATRIBUICAO expression

    ATRIBUICAO      shift and go to state 372


state 322

    (12) propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO . expression PV
    (13) propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO . expression
    (8) expression -> . disjunction
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    expression                     shift and go to state 373
    disjunction                    shift and go to state 30
    conjunction                    shift and go to state 31
    equality                       shift and go to state 32
    comparison                     shift and go to state 33
    infixOperation                 shift and go to state 34
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    simpleIdentifier               shift and go to state 38
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 323

    (15) typeParameters -> MENOR typeParameter . typeParametersRecursive MAIOR
    (16) typeParametersRecursive -> . COMMA typeParameter
    (17) typeParametersRecursive -> . COMMA typeParameter typeParametersRecursive

    COMMA           shift and go to state 375

    typeParametersRecursive        shift and go to state 374

state 324

    (18) typeParameter -> simpleIdentifier .
    (19) typeParameter -> simpleIdentifier . DOISP type

    COMMA           reduce using rule 18 (typeParameter -> simpleIdentifier .)
    MAIOR           reduce using rule 18 (typeParameter -> simpleIdentifier .)
    DOISP           shift and go to state 376


state 325

    (84) chamadaDeFuncao -> ID LPAREN RPAREN .

    FUN             reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    ID              reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    FOR             reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    WHILE           reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    DO              reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    VAR             reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    VAL             reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    CROSSINLINE     reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    IMPORT          reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    INIT            reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    NOINLINE        reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    OUT             reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    VARARG          reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    WHERE           reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    OPERATOR        reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    LPAREN          reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    LITERAL_STRING  reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    NUMBER          reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    COLONCOLON      reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    LCCT            reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    IF              reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    RETURN          reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    RETURN_AT       reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    CONTINUE        reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    CONTINUE_AT     reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    BREAK           reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    BREAK_AT        reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    LCHAVE          reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    INCREMENTO      reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    DECREMENTO      reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    NOT             reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    SUSPEND         reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    RCHAVE          reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    $end            reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    PV              reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    MENOR           reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    PONTO           reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    AS              reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    MULT            reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    MOD             reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    PONTOPONTO      reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    ELVIS           reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    IN              reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    NOT_IN          reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    IS              reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    NOT_IS          reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    MAIOR           reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    MENORIGUAL      reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    MAIORIGUAL      reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    DIFERENTE       reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    IDENTIDADE      reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    IGUALDADE       reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    SEMIDENTIDADE   reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    AND             reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    OR              reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    MAISIGUAL       reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    MENOSIGUAL      reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    MULTIGUAL       reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    DIVIGUAL        reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    MODIGUAL        reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)
    RCCT            reduce using rule 84 (chamadaDeFuncao -> ID LPAREN RPAREN .)


state 326

    (85) chamadaDeFuncao -> ID LPAREN parametersFunction . RPAREN

    RPAREN          shift and go to state 377


state 327

    (82) parametersFunction -> primaryExpression .
    (83) parametersFunction -> primaryExpression . COMMA parametersFunction

    RPAREN          reduce using rule 82 (parametersFunction -> primaryExpression .)
    COMMA           shift and go to state 378


state 328

    (134) parenthesizedDirectlyAssignableExpression -> LPAREN directlyAssignableExpression RPAREN .

    ATRIBUICAO      reduce using rule 134 (parenthesizedDirectlyAssignableExpression -> LPAREN directlyAssignableExpression RPAREN .)
    RPAREN          reduce using rule 134 (parenthesizedDirectlyAssignableExpression -> LPAREN directlyAssignableExpression RPAREN .)


state 329

    (76) forStatement -> FOR LPAREN genericVariableDeclaration . IN expression RPAREN controlStructureBody
    (77) forStatement -> FOR LPAREN genericVariableDeclaration . IN expression RPAREN

    IN              shift and go to state 379


state 330

    (78) whileStatement -> WHILE LPAREN expression . RPAREN controlStructureBody
    (79) whileStatement -> WHILE LPAREN expression . RPAREN PV

    RPAREN          shift and go to state 380


state 331

    (80) doWhileStatement -> DO controlStructureBody WHILE . LPAREN expression RPAREN

    LPAREN          shift and go to state 381


state 332

    (81) doWhileStatement -> DO WHILE LPAREN . expression RPAREN
    (78) whileStatement -> WHILE LPAREN . expression RPAREN controlStructureBody
    (79) whileStatement -> WHILE LPAREN . expression RPAREN PV
    (8) expression -> . disjunction
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    expression                     shift and go to state 382
    disjunction                    shift and go to state 30
    conjunction                    shift and go to state 31
    equality                       shift and go to state 32
    comparison                     shift and go to state 33
    infixOperation                 shift and go to state 34
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    simpleIdentifier               shift and go to state 38
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 333

    (72) block -> LCHAVE statements . RCHAVE
    (190) optionsLambdaLiteral -> statements .

  ! shift/reduce conflict for RCHAVE resolved as shift
    RCHAVE          shift and go to state 211

  ! RCHAVE          [ reduce using rule 190 (optionsLambdaLiteral -> statements .) ]


state 334

    (99) infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .

    FUN             reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    $end            reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    ID              reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    FOR             reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    WHILE           reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    DO              reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    VAR             reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    VAL             reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    CROSSINLINE     reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    IMPORT          reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    INIT            reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    NOINLINE        reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    OUT             reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    VARARG          reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    WHERE           reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    OPERATOR        reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    LPAREN          reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    LITERAL_STRING  reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    NUMBER          reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    COLONCOLON      reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    LCCT            reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    IF              reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    RETURN          reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    RETURN_AT       reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    CONTINUE        reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    CONTINUE_AT     reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    BREAK           reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    BREAK_AT        reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    LCHAVE          reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    INCREMENTO      reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    DECREMENTO      reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MINUS           reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    PLUS            reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    NOT             reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    SUSPEND         reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    RCHAVE          reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    PV              reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    ELSE            reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MENOR           reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    PONTO           reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    AS              reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MULT            reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    DIVIDE          reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MOD             reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    PONTOPONTO      reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    ELVIS           reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    IN              reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    NOT_IN          reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    IS              reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    NOT_IS          reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MAIOR           reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MENORIGUAL      reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MAIORIGUAL      reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    DIFERENTE       reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    IDENTIDADE      reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    IGUALDADE       reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    SEMIDENTIDADE   reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    AND             reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    OR              reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MAISIGUAL       reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MENOSIGUAL      reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MULTIGUAL       reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    DIVIGUAL        reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MODIGUAL        reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    RPAREN          reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    COMMA           reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    RCCT            reduce using rule 99 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)


state 335

    (34) parameter -> simpleIdentifier . optionalType
    (47) simpleUserType -> simpleIdentifier . typeArguments
    (48) simpleUserType -> simpleIdentifier .
    (165) primaryExpression -> simpleIdentifier .
    (268) label -> simpleIdentifier .
    (3) optionalType -> . DOISP type
    (153) typeArguments -> . MENOR typeArgumentsRecursive MAIOR
    (154) typeArguments -> . MENOR MAIOR

  ! reduce/reduce conflict for RPAREN resolved using rule 48 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 165 (primaryExpression -> simpleIdentifier .)
  ! shift/reduce conflict for MENOR resolved as shift
    RPAREN          reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    COMMA           reduce using rule 48 (simpleUserType -> simpleIdentifier .)
    INCREMENTO      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    DECREMENTO      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    LCCT            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    LPAREN          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    COLONCOLON      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    LCHAVE          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    PONTO           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    AS              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MULT            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    DIVIDE          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MOD             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    PLUS            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MINUS           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    ID              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IMPORT          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    INIT            reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NOINLINE        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    OUT             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    VARARG          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    WHERE           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    OPERATOR        reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    ELVIS           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IN              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NOT_IN          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IS              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NOT_IS          reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MAIOR           reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    DIFERENTE       reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    IGUALDADE       reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    AND             reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    OR              reduce using rule 165 (primaryExpression -> simpleIdentifier .)
    NOT             reduce using rule 268 (label -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 268 (label -> simpleIdentifier .)
    NUMBER          reduce using rule 268 (label -> simpleIdentifier .)
    IF              reduce using rule 268 (label -> simpleIdentifier .)
    RETURN          reduce using rule 268 (label -> simpleIdentifier .)
    RETURN_AT       reduce using rule 268 (label -> simpleIdentifier .)
    CONTINUE        reduce using rule 268 (label -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 268 (label -> simpleIdentifier .)
    BREAK           reduce using rule 268 (label -> simpleIdentifier .)
    BREAK_AT        reduce using rule 268 (label -> simpleIdentifier .)
    FUN             reduce using rule 268 (label -> simpleIdentifier .)
    SUSPEND         reduce using rule 268 (label -> simpleIdentifier .)
    DOISP           shift and go to state 21
    MENOR           shift and go to state 165

  ! MENOR           [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! RPAREN          [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! INCREMENTO      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! PLUS            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! OPERATOR        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LCHAVE          [ reduce using rule 268 (label -> simpleIdentifier .) ]

    optionalType                   shift and go to state 119
    typeArguments                  shift and go to state 210

state 336

    (147) callSuffix -> typeArguments valueArguments annotatedLambda .

    INCREMENTO      reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    DECREMENTO      reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    MENOR           reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    LCCT            reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    LPAREN          reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    COLONCOLON      reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    LCHAVE          reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    PONTO           reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    FUN             reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    $end            reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    ID              reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    FOR             reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    WHILE           reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    DO              reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    VAR             reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    VAL             reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    CROSSINLINE     reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    IMPORT          reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    INIT            reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    NOINLINE        reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    OUT             reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    VARARG          reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    WHERE           reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    OPERATOR        reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    LITERAL_STRING  reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    NUMBER          reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    IF              reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    RETURN          reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    RETURN_AT       reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    CONTINUE        reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    CONTINUE_AT     reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    BREAK           reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    BREAK_AT        reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    MINUS           reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    PLUS            reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    NOT             reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    SUSPEND         reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    RCHAVE          reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    PV              reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    ELSE            reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    AS              reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    MULT            reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    DIVIDE          reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    MOD             reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    PONTOPONTO      reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    ELVIS           reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    IN              reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    NOT_IN          reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    IS              reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    NOT_IS          reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    MAIOR           reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    MENORIGUAL      reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    MAIORIGUAL      reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    DIFERENTE       reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    IDENTIDADE      reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    IGUALDADE       reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    SEMIDENTIDADE   reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    AND             reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    OR              reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    MAISIGUAL       reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    MENOSIGUAL      reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    MULTIGUAL       reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    DIVIGUAL        reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    MODIGUAL        reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    RPAREN          reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    COMMA           reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    RCCT            reduce using rule 147 (callSuffix -> typeArguments valueArguments annotatedLambda .)


state 337

    (153) typeArguments -> MENOR typeArgumentsRecursive MAIOR .

    LPAREN          reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    INCREMENTO      reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    DECREMENTO      reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MENOR           reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    LCCT            reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    COLONCOLON      reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    LCHAVE          reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    PONTO           reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    FUN             reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    $end            reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    ID              reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    FOR             reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    WHILE           reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    DO              reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    VAR             reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    VAL             reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    CROSSINLINE     reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    IMPORT          reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    INIT            reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    NOINLINE        reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    OUT             reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    VARARG          reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    WHERE           reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    OPERATOR        reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    LITERAL_STRING  reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    NUMBER          reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    IF              reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    RETURN          reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    RETURN_AT       reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    CONTINUE        reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    CONTINUE_AT     reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    BREAK           reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    BREAK_AT        reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MINUS           reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    PLUS            reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    NOT             reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    SUSPEND         reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    RCHAVE          reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    PV              reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    ELSE            reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    AS              reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MULT            reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    DIVIDE          reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MOD             reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    PONTOPONTO      reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    ELVIS           reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    IN              reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    NOT_IN          reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    IS              reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    NOT_IS          reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MAIOR           reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MENORIGUAL      reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MAIORIGUAL      reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    DIFERENTE       reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    IDENTIDADE      reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    IGUALDADE       reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    SEMIDENTIDADE   reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    AND             reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    OR              reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MAISIGUAL       reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MENOSIGUAL      reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MULTIGUAL       reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    DIVIGUAL        reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MODIGUAL        reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    RPAREN          reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    COMMA           reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    RCCT            reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    ATRIBUICAO      reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    SETA            reduce using rule 153 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)


state 338

    (156) typeArgumentsRecursive -> typeProjection COMMA . typeArgumentsRecursive
    (155) typeArgumentsRecursive -> . typeProjection
    (156) typeArgumentsRecursive -> . typeProjection COMMA typeArgumentsRecursive
    (49) typeProjection -> . typeProjectionModifiers type
    (50) typeProjection -> . type
    (51) typeProjectionModifiers -> . typeProjection
    (52) typeProjectionModifiers -> . typeProjectionModifier typeProjectionModifiers
    (35) type -> . typeModifiers optype
    (36) type -> . optype
    (43) typeProjectionModifier -> . varianceModifier
    (40) typeModifiers -> . typeModifier
    (41) typeModifiers -> . typeModifier typeModifiers
    (37) optype -> . parenthesizedType
    (38) optype -> . functionType
    (39) optype -> . userType
    (44) varianceModifier -> . IN
    (45) varianceModifier -> . OUT
    (42) typeModifier -> . SUSPEND
    (60) parenthesizedType -> . LPAREN type RPAREN
    (53) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (54) functionType -> . functionTypeParameters SETA type
    (46) userType -> . simpleUserType
    (61) receiverType -> . typeModifier parenthesizedType
    (59) functionTypeParameters -> . LPAREN parameterOrType parameterOrTypeRecursive RPAREN
    (47) simpleUserType -> . simpleIdentifier typeArguments
    (48) simpleUserType -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    IN              shift and go to state 269
    OUT             shift and go to state 270
    SUSPEND         shift and go to state 78
    LPAREN          shift and go to state 86
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    typeProjection                 shift and go to state 264
    typeArgumentsRecursive         shift and go to state 383
    typeProjectionModifiers        shift and go to state 265
    type                           shift and go to state 266
    typeProjectionModifier         shift and go to state 267
    typeModifiers                  shift and go to state 80
    optype                         shift and go to state 81
    varianceModifier               shift and go to state 268
    typeModifier                   shift and go to state 82
    parenthesizedType              shift and go to state 83
    functionType                   shift and go to state 84
    userType                       shift and go to state 85
    receiverType                   shift and go to state 87
    functionTypeParameters         shift and go to state 88
    simpleUserType                 shift and go to state 89
    simpleIdentifier               shift and go to state 90

state 339

    (49) typeProjection -> typeProjectionModifiers type .

    COMMA           reduce using rule 49 (typeProjection -> typeProjectionModifiers type .)
    MAIOR           reduce using rule 49 (typeProjection -> typeProjectionModifiers type .)
    SUSPEND         reduce using rule 49 (typeProjection -> typeProjectionModifiers type .)
    LPAREN          reduce using rule 49 (typeProjection -> typeProjectionModifiers type .)
    ID              reduce using rule 49 (typeProjection -> typeProjectionModifiers type .)
    CROSSINLINE     reduce using rule 49 (typeProjection -> typeProjectionModifiers type .)
    IMPORT          reduce using rule 49 (typeProjection -> typeProjectionModifiers type .)
    INIT            reduce using rule 49 (typeProjection -> typeProjectionModifiers type .)
    NOINLINE        reduce using rule 49 (typeProjection -> typeProjectionModifiers type .)
    OUT             reduce using rule 49 (typeProjection -> typeProjectionModifiers type .)
    VARARG          reduce using rule 49 (typeProjection -> typeProjectionModifiers type .)
    WHERE           reduce using rule 49 (typeProjection -> typeProjectionModifiers type .)
    OPERATOR        reduce using rule 49 (typeProjection -> typeProjectionModifiers type .)


state 340

    (52) typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .
    (49) typeProjection -> typeProjectionModifiers . type
    (35) type -> . typeModifiers optype
    (36) type -> . optype
    (40) typeModifiers -> . typeModifier
    (41) typeModifiers -> . typeModifier typeModifiers
    (37) optype -> . parenthesizedType
    (38) optype -> . functionType
    (39) optype -> . userType
    (42) typeModifier -> . SUSPEND
    (60) parenthesizedType -> . LPAREN type RPAREN
    (53) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (54) functionType -> . functionTypeParameters SETA type
    (46) userType -> . simpleUserType
    (61) receiverType -> . typeModifier parenthesizedType
    (59) functionTypeParameters -> . LPAREN parameterOrType parameterOrTypeRecursive RPAREN
    (47) simpleUserType -> . simpleIdentifier typeArguments
    (48) simpleUserType -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

  ! shift/reduce conflict for SUSPEND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
    SUSPEND         shift and go to state 78
    LPAREN          shift and go to state 86
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

  ! SUSPEND         [ reduce using rule 52 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! LPAREN          [ reduce using rule 52 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! ID              [ reduce using rule 52 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! CROSSINLINE     [ reduce using rule 52 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! IMPORT          [ reduce using rule 52 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! INIT            [ reduce using rule 52 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! NOINLINE        [ reduce using rule 52 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! OUT             [ reduce using rule 52 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! VARARG          [ reduce using rule 52 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! WHERE           [ reduce using rule 52 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! OPERATOR        [ reduce using rule 52 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]

    type                           shift and go to state 339
    typeModifiers                  shift and go to state 80
    optype                         shift and go to state 81
    typeModifier                   shift and go to state 82
    parenthesizedType              shift and go to state 83
    functionType                   shift and go to state 84
    userType                       shift and go to state 85
    receiverType                   shift and go to state 87
    functionTypeParameters         shift and go to state 88
    simpleUserType                 shift and go to state 89
    simpleIdentifier               shift and go to state 90

state 341

    (51) typeProjectionModifiers -> typeProjection .

    SUSPEND         reduce using rule 51 (typeProjectionModifiers -> typeProjection .)
    LPAREN          reduce using rule 51 (typeProjectionModifiers -> typeProjection .)
    ID              reduce using rule 51 (typeProjectionModifiers -> typeProjection .)
    CROSSINLINE     reduce using rule 51 (typeProjectionModifiers -> typeProjection .)
    IMPORT          reduce using rule 51 (typeProjectionModifiers -> typeProjection .)
    INIT            reduce using rule 51 (typeProjectionModifiers -> typeProjection .)
    NOINLINE        reduce using rule 51 (typeProjectionModifiers -> typeProjection .)
    OUT             reduce using rule 51 (typeProjectionModifiers -> typeProjection .)
    VARARG          reduce using rule 51 (typeProjectionModifiers -> typeProjection .)
    WHERE           reduce using rule 51 (typeProjectionModifiers -> typeProjection .)
    OPERATOR        reduce using rule 51 (typeProjectionModifiers -> typeProjection .)


state 342

    (141) indexingSuffix -> LCCT indexingSuffixRecursive RCCT .

    INCREMENTO      reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    DECREMENTO      reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MENOR           reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    LCCT            reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    LPAREN          reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    COLONCOLON      reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    LCHAVE          reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    PONTO           reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    FUN             reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    $end            reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    ID              reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    FOR             reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    WHILE           reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    DO              reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    VAR             reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    VAL             reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    CROSSINLINE     reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    IMPORT          reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    INIT            reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    NOINLINE        reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    OUT             reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    VARARG          reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    WHERE           reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    OPERATOR        reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    LITERAL_STRING  reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    NUMBER          reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    IF              reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    RETURN          reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    RETURN_AT       reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    CONTINUE        reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    CONTINUE_AT     reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    BREAK           reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    BREAK_AT        reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MINUS           reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    PLUS            reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    NOT             reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    SUSPEND         reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    RCHAVE          reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    PV              reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    ELSE            reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    AS              reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MULT            reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    DIVIDE          reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MOD             reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    PONTOPONTO      reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    ELVIS           reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    IN              reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    NOT_IN          reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    IS              reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    NOT_IS          reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MAIOR           reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MENORIGUAL      reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MAIORIGUAL      reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    DIFERENTE       reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    IDENTIDADE      reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    IGUALDADE       reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    SEMIDENTIDADE   reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    AND             reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    OR              reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MAISIGUAL       reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MENOSIGUAL      reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MULTIGUAL       reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    DIVIGUAL        reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MODIGUAL        reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    RPAREN          reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    COMMA           reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    RCCT            reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    ATRIBUICAO      reduce using rule 141 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)


state 343

    (144) indexingSuffixRecursive -> expression COMMA . indexingSuffixRecursive
    (143) indexingSuffixRecursive -> . expression
    (144) indexingSuffixRecursive -> . expression COMMA indexingSuffixRecursive
    (8) expression -> . disjunction
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    expression                     shift and go to state 274
    indexingSuffixRecursive        shift and go to state 384
    disjunction                    shift and go to state 30
    conjunction                    shift and go to state 31
    equality                       shift and go to state 32
    comparison                     shift and go to state 33
    infixOperation                 shift and go to state 34
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    simpleIdentifier               shift and go to state 38
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 344

    (145) navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .

    INCREMENTO      reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DECREMENTO      reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MENOR           reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    LCCT            reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    LPAREN          reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    COLONCOLON      reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    LCHAVE          reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    PONTO           reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    FUN             reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    $end            reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    ID              reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    FOR             reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    WHILE           reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DO              reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    VAR             reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    VAL             reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    CROSSINLINE     reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IMPORT          reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    INIT            reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NOINLINE        reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    OUT             reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    VARARG          reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    WHERE           reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    OPERATOR        reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    LITERAL_STRING  reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NUMBER          reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IF              reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    RETURN          reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    RETURN_AT       reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    CONTINUE        reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    CONTINUE_AT     reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    BREAK           reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    BREAK_AT        reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MINUS           reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    PLUS            reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NOT             reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    SUSPEND         reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    RCHAVE          reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    PV              reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    ELSE            reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    AS              reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MULT            reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DIVIDE          reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MOD             reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    PONTOPONTO      reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    ELVIS           reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IN              reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NOT_IN          reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IS              reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NOT_IS          reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MAIOR           reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MENORIGUAL      reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MAIORIGUAL      reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DIFERENTE       reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IDENTIDADE      reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IGUALDADE       reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    SEMIDENTIDADE   reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    AND             reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    OR              reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MAISIGUAL       reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MENOSIGUAL      reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MULTIGUAL       reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DIVIGUAL        reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MODIGUAL        reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    RPAREN          reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    COMMA           reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    RCCT            reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    ATRIBUICAO      reduce using rule 145 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)


state 345

    (146) navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .

    INCREMENTO      reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DECREMENTO      reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MENOR           reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    LCCT            reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    LPAREN          reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    COLONCOLON      reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    LCHAVE          reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    PONTO           reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    FUN             reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    $end            reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    ID              reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    FOR             reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    WHILE           reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DO              reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    VAR             reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    VAL             reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    CROSSINLINE     reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IMPORT          reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    INIT            reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NOINLINE        reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    OUT             reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    VARARG          reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    WHERE           reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    OPERATOR        reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    LITERAL_STRING  reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NUMBER          reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IF              reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    RETURN          reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    RETURN_AT       reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    CONTINUE        reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    CONTINUE_AT     reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    BREAK           reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    BREAK_AT        reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MINUS           reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    PLUS            reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NOT             reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    SUSPEND         reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    RCHAVE          reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    PV              reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    ELSE            reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    AS              reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MULT            reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DIVIDE          reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MOD             reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    PONTOPONTO      reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    ELVIS           reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IN              reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NOT_IN          reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IS              reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NOT_IS          reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MAIOR           reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MENORIGUAL      reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MAIORIGUAL      reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DIFERENTE       reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IDENTIDADE      reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IGUALDADE       reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    SEMIDENTIDADE   reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    AND             reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    OR              reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MAISIGUAL       reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MENOSIGUAL      reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MULTIGUAL       reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DIVIGUAL        reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MODIGUAL        reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    RPAREN          reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    COMMA           reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    RCCT            reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    ATRIBUICAO      reduce using rule 146 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)


state 346

    (160) valueArguments -> LPAREN valueArgumentsRecursive RPAREN .

    LCHAVE          reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    INCREMENTO      reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    DECREMENTO      reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MENOR           reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    LCCT            reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    LPAREN          reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    COLONCOLON      reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    PONTO           reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    FUN             reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    $end            reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    ID              reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    FOR             reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    WHILE           reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    DO              reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    VAR             reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    VAL             reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    CROSSINLINE     reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    IMPORT          reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    INIT            reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    NOINLINE        reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    OUT             reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    VARARG          reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    WHERE           reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    OPERATOR        reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    LITERAL_STRING  reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    NUMBER          reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    IF              reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    RETURN          reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    RETURN_AT       reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    CONTINUE        reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    CONTINUE_AT     reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    BREAK           reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    BREAK_AT        reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MINUS           reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    PLUS            reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    NOT             reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    SUSPEND         reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    RCHAVE          reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    PV              reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    ELSE            reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    AS              reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MULT            reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    DIVIDE          reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MOD             reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    PONTOPONTO      reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    ELVIS           reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    IN              reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    NOT_IN          reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    IS              reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    NOT_IS          reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MAIOR           reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MENORIGUAL      reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MAIORIGUAL      reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    DIFERENTE       reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    IDENTIDADE      reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    IGUALDADE       reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    SEMIDENTIDADE   reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    AND             reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    OR              reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MAISIGUAL       reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MENOSIGUAL      reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MULTIGUAL       reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    DIVIGUAL        reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MODIGUAL        reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    RPAREN          reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    COMMA           reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    RCCT            reduce using rule 160 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)


state 347

    (158) valueArgumentsRecursive -> valueArgument COMMA . valueArgumentsRecursive
    (157) valueArgumentsRecursive -> . valueArgument
    (158) valueArgumentsRecursive -> . valueArgument COMMA valueArgumentsRecursive
    (161) valueArgument -> . simpleIdentifier ATRIBUICAO MULT expression
    (162) valueArgument -> . simpleIdentifier ATRIBUICAO expression
    (163) valueArgument -> . expression
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (8) expression -> . disjunction
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    LPAREN          shift and go to state 62
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    valueArgument                  shift and go to state 279
    valueArgumentsRecursive        shift and go to state 385
    simpleIdentifier               shift and go to state 280
    expression                     shift and go to state 281
    disjunction                    shift and go to state 30
    conjunction                    shift and go to state 31
    equality                       shift and go to state 32
    comparison                     shift and go to state 33
    infixOperation                 shift and go to state 34
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 348

    (161) valueArgument -> simpleIdentifier ATRIBUICAO . MULT expression
    (162) valueArgument -> simpleIdentifier ATRIBUICAO . expression
    (8) expression -> . disjunction
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    MULT            shift and go to state 386
    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    simpleIdentifier               shift and go to state 38
    expression                     shift and go to state 387
    disjunction                    shift and go to state 30
    conjunction                    shift and go to state 31
    equality                       shift and go to state 32
    comparison                     shift and go to state 33
    infixOperation                 shift and go to state 34
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 349

    (177) collectionLiteralRecursive -> expression COMMA collectionLiteralRecursive .

    RCCT            reduce using rule 177 (collectionLiteralRecursive -> expression COMMA collectionLiteralRecursive .)


state 350

    (218) ifExpression -> IF LPAREN expression RPAREN . controlStructureBodyOrPV
    (219) ifExpression -> IF LPAREN expression RPAREN . controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> IF LPAREN expression RPAREN . PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> IF LPAREN expression RPAREN . controlStructureBody ELSE controlStructureBodyOrPV
    (222) controlStructureBodyOrPV -> . controlStructureBody
    (223) controlStructureBodyOrPV -> . PV
    (70) controlStructureBody -> . block
    (71) controlStructureBody -> . statement
    (72) block -> . LCHAVE statements RCHAVE
    (64) statement -> . functionDeclaration
    (65) statement -> . assignment
    (66) statement -> . loopStatement
    (67) statement -> . expression
    (68) statement -> . propertyDeclaration
    (69) statement -> . chamadaDeFuncao
    (4) functionDeclaration -> . FUN simpleIdentifier functionValueParameters functionBody
    (5) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType functionBody
    (86) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (87) assignment -> . asExpression assignmentAndOperator expression
    (73) loopStatement -> . forStatement
    (74) loopStatement -> . whileStatement
    (75) loopStatement -> . doWhileStatement
    (8) expression -> . disjunction
    (11) propertyDeclaration -> . varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV
    (12) propertyDeclaration -> . varOrVal genericVariableDeclaration ATRIBUICAO expression PV
    (13) propertyDeclaration -> . varOrVal genericVariableDeclaration ATRIBUICAO expression
    (14) propertyDeclaration -> . varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression
    (84) chamadaDeFuncao -> . ID LPAREN RPAREN
    (85) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (131) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (132) directlyAssignableExpression -> . simpleIdentifier
    (133) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (76) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody
    (77) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN
    (78) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (79) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (80) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (81) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (9) varOrVal -> . VAR
    (10) varOrVal -> . VAL
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (134) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (42) typeModifier -> . SUSPEND
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression

    PV              shift and go to state 390
    LCHAVE          shift and go to state 240
    FUN             shift and go to state 99
    ID              shift and go to state 107
    FOR             shift and go to state 111
    WHILE           shift and go to state 112
    DO              shift and go to state 113
    VAR             shift and go to state 114
    VAL             shift and go to state 115
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LPAREN          shift and go to state 108
    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    SUSPEND         shift and go to state 78

    expression                     shift and go to state 96
    controlStructureBodyOrPV       shift and go to state 388
    controlStructureBody           shift and go to state 389
    block                          shift and go to state 238
    statement                      shift and go to state 239
    functionDeclaration            shift and go to state 93
    assignment                     shift and go to state 94
    loopStatement                  shift and go to state 95
    propertyDeclaration            shift and go to state 97
    chamadaDeFuncao                shift and go to state 98
    simpleIdentifier               shift and go to state 100
    directlyAssignableExpression   shift and go to state 101
    asExpression                   shift and go to state 102
    forStatement                   shift and go to state 103
    whileStatement                 shift and go to state 104
    doWhileStatement               shift and go to state 105
    disjunction                    shift and go to state 30
    varOrVal                       shift and go to state 106
    postfixUnaryExpression         shift and go to state 109
    parenthesizedDirectlyAssignableExpression shift and go to state 110
    prefixUnaryExpression          shift and go to state 42
    conjunction                    shift and go to state 31
    primaryExpression              shift and go to state 46
    prefixUnaryExpressionRecursive shift and go to state 43
    equality                       shift and go to state 32
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    unaryPrefix                    shift and go to state 45
    comparison                     shift and go to state 33
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    infixOperation                 shift and go to state 34
    typeModifier                   shift and go to state 75
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40

state 351

    (191) optionsLambdaLiteral -> lambdaParameters SETA statements .

    RCHAVE          reduce using rule 191 (optionsLambdaLiteral -> lambdaParameters SETA statements .)


state 352

    (194) lambdaParameters -> lambdaParameter COMMA lambdaParameters .

    SETA            reduce using rule 194 (lambdaParameters -> lambdaParameter COMMA lambdaParameters .)


state 353

    (28) variableDeclaration -> simpleIdentifier DOISP type .

    COMMA           reduce using rule 28 (variableDeclaration -> simpleIdentifier DOISP type .)
    SETA            reduce using rule 28 (variableDeclaration -> simpleIdentifier DOISP type .)
    ATRIBUICAO      reduce using rule 28 (variableDeclaration -> simpleIdentifier DOISP type .)
    RPAREN          reduce using rule 28 (variableDeclaration -> simpleIdentifier DOISP type .)
    IN              reduce using rule 28 (variableDeclaration -> simpleIdentifier DOISP type .)


state 354

    (30) multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive RPAREN .

    DOISP           reduce using rule 30 (multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive RPAREN .)
    COMMA           reduce using rule 30 (multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive RPAREN .)
    SETA            reduce using rule 30 (multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive RPAREN .)
    ATRIBUICAO      reduce using rule 30 (multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive RPAREN .)
    IN              reduce using rule 30 (multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive RPAREN .)


state 355

    (33) multiVariableDeclarationRecursive -> variableDeclaration COMMA . multiVariableDeclarationRecursive
    (32) multiVariableDeclarationRecursive -> . variableDeclaration
    (33) multiVariableDeclarationRecursive -> . variableDeclaration COMMA multiVariableDeclarationRecursive
    (28) variableDeclaration -> . simpleIdentifier DOISP type
    (29) variableDeclaration -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    variableDeclaration            shift and go to state 296
    multiVariableDeclarationRecursive shift and go to state 391
    simpleIdentifier               shift and go to state 227

state 356

    (199) anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType . typeConstraints functionBody
    (202) anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType . functionBody
    (203) anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType . typeConstraints
    (209) anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .
    (217) typeConstraints -> . simpleIdentifier DOISP type
    (20) functionBody -> . block
    (21) functionBody -> . ATRIBUICAO expression
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (72) block -> . LCHAVE statements RCHAVE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for LCHAVE resolved as shift
    FUN             reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    $end            reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    FOR             reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    WHILE           reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    DO              reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    VAR             reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    VAL             reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    LPAREN          reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    LITERAL_STRING  reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    NUMBER          reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    COLONCOLON      reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    LCCT            reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    IF              reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    RETURN          reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    RETURN_AT       reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    CONTINUE        reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    CONTINUE_AT     reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    BREAK           reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    BREAK_AT        reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    INCREMENTO      reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    DECREMENTO      reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    MINUS           reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    PLUS            reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    NOT             reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    SUSPEND         reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    RCHAVE          reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    PV              reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    ELSE            reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    MENOR           reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    PONTO           reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    AS              reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    MULT            reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    DIVIDE          reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    MOD             reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    PONTOPONTO      reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    ELVIS           reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    IN              reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    NOT_IN          reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    IS              reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    NOT_IS          reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    MAIOR           reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    MENORIGUAL      reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    MAIORIGUAL      reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    DIFERENTE       reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    IDENTIDADE      reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    IGUALDADE       reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    SEMIDENTIDADE   reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    AND             reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    OR              reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    MAISIGUAL       reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    MENOSIGUAL      reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    MULTIGUAL       reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    DIVIGUAL        reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    MODIGUAL        reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    RPAREN          reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    COMMA           reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    RCCT            reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .)
    ATRIBUICAO      shift and go to state 20
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCHAVE          shift and go to state 22

  ! ID              [ reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .) ]
  ! CROSSINLINE     [ reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .) ]
  ! IMPORT          [ reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .) ]
  ! INIT            [ reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .) ]
  ! NOINLINE        [ reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .) ]
  ! OUT             [ reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .) ]
  ! VARARG          [ reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .) ]
  ! WHERE           [ reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .) ]
  ! OPERATOR        [ reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .) ]
  ! LCHAVE          [ reduce using rule 209 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType .) ]

    typeConstraints                shift and go to state 392
    functionBody                   shift and go to state 393
    simpleIdentifier               shift and go to state 303
    block                          shift and go to state 19

state 357

    (201) anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints . functionBody
    (208) anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .
    (20) functionBody -> . block
    (21) functionBody -> . ATRIBUICAO expression
    (72) block -> . LCHAVE statements RCHAVE

  ! shift/reduce conflict for LCHAVE resolved as shift
    FUN             reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    $end            reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    ID              reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    FOR             reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    WHILE           reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    DO              reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    VAR             reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    VAL             reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    CROSSINLINE     reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    IMPORT          reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    INIT            reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    NOINLINE        reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    OUT             reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    VARARG          reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    WHERE           reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    OPERATOR        reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    LPAREN          reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    LITERAL_STRING  reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    NUMBER          reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    COLONCOLON      reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    LCCT            reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    IF              reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    RETURN          reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    RETURN_AT       reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    CONTINUE        reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    CONTINUE_AT     reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    BREAK           reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    BREAK_AT        reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    INCREMENTO      reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    DECREMENTO      reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    MINUS           reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    PLUS            reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    NOT             reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    SUSPEND         reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    RCHAVE          reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    PV              reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    ELSE            reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    MENOR           reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    PONTO           reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    AS              reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    MULT            reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    DIVIDE          reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    MOD             reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    PONTOPONTO      reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    ELVIS           reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    IN              reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    NOT_IN          reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    IS              reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    NOT_IS          reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    MAIOR           reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    MENORIGUAL      reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    MAIORIGUAL      reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    DIFERENTE       reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    IDENTIDADE      reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    IGUALDADE       reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    SEMIDENTIDADE   reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    AND             reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    OR              reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    MAISIGUAL       reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    MENOSIGUAL      reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    MULTIGUAL       reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    DIVIGUAL        reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    MODIGUAL        reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    RPAREN          reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    COMMA           reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    RCCT            reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .)
    ATRIBUICAO      shift and go to state 20
    LCHAVE          shift and go to state 22

  ! LCHAVE          [ reduce using rule 208 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints .) ]

    functionBody                   shift and go to state 394
    block                          shift and go to state 19

state 358

    (207) anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .

    FUN             reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    $end            reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    ID              reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    FOR             reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    WHILE           reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    DO              reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    VAR             reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    VAL             reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    CROSSINLINE     reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    IMPORT          reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    INIT            reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    NOINLINE        reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    OUT             reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    VARARG          reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    WHERE           reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    OPERATOR        reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    LPAREN          reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    LITERAL_STRING  reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    NUMBER          reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    COLONCOLON      reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    LCCT            reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    IF              reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    RETURN          reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    RETURN_AT       reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    CONTINUE        reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    CONTINUE_AT     reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    BREAK           reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    BREAK_AT        reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    LCHAVE          reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    INCREMENTO      reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    DECREMENTO      reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    MINUS           reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    PLUS            reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    NOT             reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    SUSPEND         reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    RCHAVE          reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    PV              reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    ELSE            reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    MENOR           reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    PONTO           reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    AS              reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    MULT            reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    DIVIDE          reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    MOD             reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    PONTOPONTO      reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    ELVIS           reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    IN              reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    NOT_IN          reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    IS              reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    NOT_IS          reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    MAIOR           reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    MENORIGUAL      reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    MAIORIGUAL      reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    DIFERENTE       reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    IDENTIDADE      reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    IGUALDADE       reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    SEMIDENTIDADE   reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    AND             reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    OR              reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    MAISIGUAL       reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    MENOSIGUAL      reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    MULTIGUAL       reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    DIVIGUAL        reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    MODIGUAL        reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    RPAREN          reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    COMMA           reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)
    RCCT            reduce using rule 207 (anonymousFunction -> FUN typePonto parametersWithOptionalType functionBody .)


state 359

    (184) parameterWithOptionalType -> simpleIdentifier . optionalType
    (185) parameterWithOptionalType -> simpleIdentifier .
    (3) optionalType -> . DOISP type

    COMMA           reduce using rule 185 (parameterWithOptionalType -> simpleIdentifier .)
    RPAREN          reduce using rule 185 (parameterWithOptionalType -> simpleIdentifier .)
    DOISP           shift and go to state 21

    optionalType                   shift and go to state 395

state 360

    (200) anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints . functionBody
    (206) anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .
    (20) functionBody -> . block
    (21) functionBody -> . ATRIBUICAO expression
    (72) block -> . LCHAVE statements RCHAVE

  ! shift/reduce conflict for LCHAVE resolved as shift
    FUN             reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    $end            reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    ID              reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    FOR             reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    WHILE           reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    DO              reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    VAR             reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    VAL             reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    CROSSINLINE     reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    IMPORT          reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    INIT            reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    NOINLINE        reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    OUT             reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    VARARG          reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    WHERE           reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    OPERATOR        reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    LPAREN          reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    LITERAL_STRING  reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    NUMBER          reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    COLONCOLON      reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    LCCT            reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    IF              reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    RETURN          reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    RETURN_AT       reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    CONTINUE        reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    CONTINUE_AT     reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    BREAK           reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    BREAK_AT        reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    INCREMENTO      reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    DECREMENTO      reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    MINUS           reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    PLUS            reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    NOT             reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    SUSPEND         reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    RCHAVE          reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    PV              reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    ELSE            reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    MENOR           reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    PONTO           reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    AS              reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    MULT            reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    DIVIDE          reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    MOD             reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    PONTOPONTO      reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    ELVIS           reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    IN              reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    NOT_IN          reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    IS              reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    NOT_IS          reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    MAIOR           reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    MENORIGUAL      reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    MAIORIGUAL      reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    DIFERENTE       reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    IDENTIDADE      reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    IGUALDADE       reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    SEMIDENTIDADE   reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    AND             reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    OR              reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    MAISIGUAL       reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    MENOSIGUAL      reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    MULTIGUAL       reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    DIVIGUAL        reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    MODIGUAL        reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    RPAREN          reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    COMMA           reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    RCCT            reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .)
    ATRIBUICAO      shift and go to state 20
    LCHAVE          shift and go to state 22

  ! LCHAVE          [ reduce using rule 206 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints .) ]

    functionBody                   shift and go to state 396
    block                          shift and go to state 19

state 361

    (205) anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .

    FUN             reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    $end            reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    ID              reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    FOR             reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    WHILE           reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    DO              reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    VAR             reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    VAL             reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    CROSSINLINE     reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    IMPORT          reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    INIT            reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    NOINLINE        reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    OUT             reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    VARARG          reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    WHERE           reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    OPERATOR        reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    LPAREN          reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    LITERAL_STRING  reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    NUMBER          reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    COLONCOLON      reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    LCCT            reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    IF              reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    RETURN          reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    RETURN_AT       reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    CONTINUE        reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    CONTINUE_AT     reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    BREAK           reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    BREAK_AT        reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    LCHAVE          reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    INCREMENTO      reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    DECREMENTO      reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    MINUS           reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    PLUS            reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    NOT             reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    SUSPEND         reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    RCHAVE          reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    PV              reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    ELSE            reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    MENOR           reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    PONTO           reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    AS              reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    MULT            reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    DIVIDE          reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    MOD             reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    PONTOPONTO      reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    ELVIS           reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    IN              reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    NOT_IN          reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    IS              reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    NOT_IS          reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    MAIOR           reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    MENORIGUAL      reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    MAIORIGUAL      reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    DIFERENTE       reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    IDENTIDADE      reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    IGUALDADE       reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    SEMIDENTIDADE   reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    AND             reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    OR              reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    MAISIGUAL       reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    MENOSIGUAL      reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    MULTIGUAL       reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    DIVIGUAL        reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    MODIGUAL        reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    RPAREN          reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    COMMA           reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)
    RCCT            reduce using rule 205 (anonymousFunction -> FUN parametersWithOptionalType optionalType functionBody .)


state 362

    (204) anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .

    FUN             reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    $end            reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    ID              reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    FOR             reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    WHILE           reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    DO              reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    VAR             reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    VAL             reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    CROSSINLINE     reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    IMPORT          reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    INIT            reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    NOINLINE        reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    OUT             reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    VARARG          reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    WHERE           reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    OPERATOR        reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    LPAREN          reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    LITERAL_STRING  reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    NUMBER          reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    COLONCOLON      reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    LCCT            reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    IF              reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    RETURN          reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    RETURN_AT       reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    CONTINUE        reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    CONTINUE_AT     reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    BREAK           reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    BREAK_AT        reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    LCHAVE          reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    INCREMENTO      reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    DECREMENTO      reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    MINUS           reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    PLUS            reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    NOT             reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    SUSPEND         reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    RCHAVE          reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    PV              reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    ELSE            reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    MENOR           reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    PONTO           reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    AS              reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    MULT            reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    DIVIDE          reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    MOD             reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    PONTOPONTO      reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    ELVIS           reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    IN              reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    NOT_IN          reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    IS              reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    NOT_IS          reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    MAIOR           reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    MENORIGUAL      reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    MAIORIGUAL      reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    DIFERENTE       reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    IDENTIDADE      reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    IGUALDADE       reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    SEMIDENTIDADE   reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    AND             reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    OR              reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    MAISIGUAL       reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    MENOSIGUAL      reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    MULTIGUAL       reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    DIVIGUAL        reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    MODIGUAL        reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    RPAREN          reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    COMMA           reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)
    RCCT            reduce using rule 204 (anonymousFunction -> FUN parametersWithOptionalType typeConstraints functionBody .)


state 363

    (217) typeConstraints -> simpleIdentifier DOISP . type
    (35) type -> . typeModifiers optype
    (36) type -> . optype
    (40) typeModifiers -> . typeModifier
    (41) typeModifiers -> . typeModifier typeModifiers
    (37) optype -> . parenthesizedType
    (38) optype -> . functionType
    (39) optype -> . userType
    (42) typeModifier -> . SUSPEND
    (60) parenthesizedType -> . LPAREN type RPAREN
    (53) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (54) functionType -> . functionTypeParameters SETA type
    (46) userType -> . simpleUserType
    (61) receiverType -> . typeModifier parenthesizedType
    (59) functionTypeParameters -> . LPAREN parameterOrType parameterOrTypeRecursive RPAREN
    (47) simpleUserType -> . simpleIdentifier typeArguments
    (48) simpleUserType -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    SUSPEND         shift and go to state 78
    LPAREN          shift and go to state 86
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    simpleIdentifier               shift and go to state 90
    type                           shift and go to state 397
    typeModifiers                  shift and go to state 80
    optype                         shift and go to state 81
    typeModifier                   shift and go to state 82
    parenthesizedType              shift and go to state 83
    functionType                   shift and go to state 84
    userType                       shift and go to state 85
    receiverType                   shift and go to state 87
    functionTypeParameters         shift and go to state 88
    simpleUserType                 shift and go to state 89

state 364

    (178) parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .

    DOISP           reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    ATRIBUICAO      reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    ID              reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    CROSSINLINE     reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    IMPORT          reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    INIT            reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    NOINLINE        reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    OUT             reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    VARARG          reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    WHERE           reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    OPERATOR        reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    LCHAVE          reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    FUN             reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    $end            reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    FOR             reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    WHILE           reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    DO              reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    VAR             reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    VAL             reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    LPAREN          reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    LITERAL_STRING  reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    NUMBER          reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    COLONCOLON      reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    LCCT            reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    IF              reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    RETURN          reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    RETURN_AT       reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    CONTINUE        reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    CONTINUE_AT     reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    BREAK           reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    BREAK_AT        reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    INCREMENTO      reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    DECREMENTO      reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MINUS           reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    PLUS            reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    NOT             reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    SUSPEND         reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    RCHAVE          reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    PV              reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    ELSE            reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MENOR           reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    PONTO           reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    AS              reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MULT            reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    DIVIDE          reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MOD             reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    PONTOPONTO      reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    ELVIS           reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    IN              reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    NOT_IN          reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    IS              reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    NOT_IS          reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MAIOR           reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MENORIGUAL      reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MAIORIGUAL      reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    DIFERENTE       reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    IDENTIDADE      reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    IGUALDADE       reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    SEMIDENTIDADE   reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    AND             reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    OR              reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MAISIGUAL       reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MENOSIGUAL      reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MULTIGUAL       reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    DIVIGUAL        reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MODIGUAL        reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    RPAREN          reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    COMMA           reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    RCCT            reduce using rule 178 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)


state 365

    (181) parametersWithOptionalTypeRecursive -> parameterWithOptionalType COMMA . parametersWithOptionalTypeRecursive
    (180) parametersWithOptionalTypeRecursive -> . parameterWithOptionalType
    (181) parametersWithOptionalTypeRecursive -> . parameterWithOptionalType COMMA parametersWithOptionalTypeRecursive
    (182) parameterWithOptionalType -> . parameterModifiers simpleIdentifier optionalType
    (183) parameterWithOptionalType -> . parameterModifiers simpleIdentifier
    (184) parameterWithOptionalType -> . simpleIdentifier optionalType
    (185) parameterWithOptionalType -> . simpleIdentifier
    (186) parameterModifiers -> . VARARG
    (187) parameterModifiers -> . NOINLINE
    (188) parameterModifiers -> . CROSSINLINE
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    VARARG          shift and go to state 310
    NOINLINE        shift and go to state 311
    CROSSINLINE     shift and go to state 312
    ID              shift and go to state 6
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    OUT             shift and go to state 11
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    parameterWithOptionalType      shift and go to state 307
    parametersWithOptionalTypeRecursive shift and go to state 398
    parameterModifiers             shift and go to state 308
    simpleIdentifier               shift and go to state 359

state 366

    (182) parameterWithOptionalType -> parameterModifiers simpleIdentifier . optionalType
    (183) parameterWithOptionalType -> parameterModifiers simpleIdentifier .
    (3) optionalType -> . DOISP type

    COMMA           reduce using rule 183 (parameterWithOptionalType -> parameterModifiers simpleIdentifier .)
    RPAREN          reduce using rule 183 (parameterWithOptionalType -> parameterModifiers simpleIdentifier .)
    DOISP           shift and go to state 21

    optionalType                   shift and go to state 399

state 367

    (184) parameterWithOptionalType -> simpleIdentifier optionalType .
    (34) parameter -> simpleIdentifier optionalType .

  ! reduce/reduce conflict for COMMA resolved using rule 34 (parameter -> simpleIdentifier optionalType .)
    RPAREN          reduce using rule 184 (parameterWithOptionalType -> simpleIdentifier optionalType .)
    COMMA           reduce using rule 34 (parameter -> simpleIdentifier optionalType .)

  ! COMMA           [ reduce using rule 184 (parameterWithOptionalType -> simpleIdentifier optionalType .) ]


state 368

    (59) functionTypeParameters -> LPAREN parameterOrType parameterOrTypeRecursive RPAREN .

    SETA            reduce using rule 59 (functionTypeParameters -> LPAREN parameterOrType parameterOrTypeRecursive RPAREN .)


state 369

    (57) parameterOrTypeRecursive -> COMMA parameterOrType .
    (58) parameterOrTypeRecursive -> COMMA parameterOrType . parameterOrTypeRecursive
    (57) parameterOrTypeRecursive -> . COMMA parameterOrType
    (58) parameterOrTypeRecursive -> . COMMA parameterOrType parameterOrTypeRecursive

    RPAREN          reduce using rule 57 (parameterOrTypeRecursive -> COMMA parameterOrType .)
    COMMA           shift and go to state 315

    parameterOrTypeRecursive       shift and go to state 400

state 370

    (56) parameterOrType -> type .

    COMMA           reduce using rule 56 (parameterOrType -> type .)
    RPAREN          reduce using rule 56 (parameterOrType -> type .)


state 371

    (53) functionType -> receiverType PONTO functionTypeParameters SETA . type
    (35) type -> . typeModifiers optype
    (36) type -> . optype
    (40) typeModifiers -> . typeModifier
    (41) typeModifiers -> . typeModifier typeModifiers
    (37) optype -> . parenthesizedType
    (38) optype -> . functionType
    (39) optype -> . userType
    (42) typeModifier -> . SUSPEND
    (60) parenthesizedType -> . LPAREN type RPAREN
    (53) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (54) functionType -> . functionTypeParameters SETA type
    (46) userType -> . simpleUserType
    (61) receiverType -> . typeModifier parenthesizedType
    (59) functionTypeParameters -> . LPAREN parameterOrType parameterOrTypeRecursive RPAREN
    (47) simpleUserType -> . simpleIdentifier typeArguments
    (48) simpleUserType -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    SUSPEND         shift and go to state 78
    LPAREN          shift and go to state 86
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    receiverType                   shift and go to state 87
    functionTypeParameters         shift and go to state 88
    type                           shift and go to state 401
    typeModifiers                  shift and go to state 80
    optype                         shift and go to state 81
    typeModifier                   shift and go to state 82
    parenthesizedType              shift and go to state 83
    functionType                   shift and go to state 84
    userType                       shift and go to state 85
    simpleUserType                 shift and go to state 89
    simpleIdentifier               shift and go to state 90

state 372

    (11) propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO . expression PV
    (14) propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO . expression
    (8) expression -> . disjunction
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    expression                     shift and go to state 402
    disjunction                    shift and go to state 30
    conjunction                    shift and go to state 31
    equality                       shift and go to state 32
    comparison                     shift and go to state 33
    infixOperation                 shift and go to state 34
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    simpleIdentifier               shift and go to state 38
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 373

    (12) propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression . PV
    (13) propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .

  ! shift/reduce conflict for PV resolved as shift
    PV              shift and go to state 403
    FUN             reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    ID              reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    FOR             reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    WHILE           reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    DO              reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    VAR             reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    VAL             reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    CROSSINLINE     reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    IMPORT          reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    INIT            reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    NOINLINE        reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    OUT             reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    VARARG          reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    WHERE           reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    OPERATOR        reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    LPAREN          reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    LITERAL_STRING  reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    NUMBER          reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    COLONCOLON      reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    LCCT            reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    IF              reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    RETURN          reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    RETURN_AT       reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    CONTINUE        reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    CONTINUE_AT     reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    BREAK           reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    BREAK_AT        reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    LCHAVE          reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    INCREMENTO      reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    DECREMENTO      reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    MINUS           reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    PLUS            reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    NOT             reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    SUSPEND         reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    RCHAVE          reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    $end            reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    ELSE            reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    MENOR           reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    PONTO           reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    AS              reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    MULT            reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    DIVIDE          reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    MOD             reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    PONTOPONTO      reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    ELVIS           reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    IN              reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    NOT_IN          reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    IS              reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    NOT_IS          reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    MAIOR           reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    MENORIGUAL      reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    MAIORIGUAL      reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    DIFERENTE       reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    IDENTIDADE      reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    IGUALDADE       reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    SEMIDENTIDADE   reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    AND             reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    OR              reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    MAISIGUAL       reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    MENOSIGUAL      reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    MULTIGUAL       reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    DIVIGUAL        reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    MODIGUAL        reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    RPAREN          reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    COMMA           reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)
    RCCT            reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .)

  ! PV              [ reduce using rule 13 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression .) ]


state 374

    (15) typeParameters -> MENOR typeParameter typeParametersRecursive . MAIOR

    MAIOR           shift and go to state 404


state 375

    (16) typeParametersRecursive -> COMMA . typeParameter
    (17) typeParametersRecursive -> COMMA . typeParameter typeParametersRecursive
    (18) typeParameter -> . simpleIdentifier
    (19) typeParameter -> . simpleIdentifier DOISP type
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    typeParameter                  shift and go to state 405
    simpleIdentifier               shift and go to state 324

state 376

    (19) typeParameter -> simpleIdentifier DOISP . type
    (35) type -> . typeModifiers optype
    (36) type -> . optype
    (40) typeModifiers -> . typeModifier
    (41) typeModifiers -> . typeModifier typeModifiers
    (37) optype -> . parenthesizedType
    (38) optype -> . functionType
    (39) optype -> . userType
    (42) typeModifier -> . SUSPEND
    (60) parenthesizedType -> . LPAREN type RPAREN
    (53) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (54) functionType -> . functionTypeParameters SETA type
    (46) userType -> . simpleUserType
    (61) receiverType -> . typeModifier parenthesizedType
    (59) functionTypeParameters -> . LPAREN parameterOrType parameterOrTypeRecursive RPAREN
    (47) simpleUserType -> . simpleIdentifier typeArguments
    (48) simpleUserType -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    SUSPEND         shift and go to state 78
    LPAREN          shift and go to state 86
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    simpleIdentifier               shift and go to state 90
    type                           shift and go to state 406
    typeModifiers                  shift and go to state 80
    optype                         shift and go to state 81
    typeModifier                   shift and go to state 82
    parenthesizedType              shift and go to state 83
    functionType                   shift and go to state 84
    userType                       shift and go to state 85
    receiverType                   shift and go to state 87
    functionTypeParameters         shift and go to state 88
    simpleUserType                 shift and go to state 89

state 377

    (85) chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .

    FUN             reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    ID              reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    FOR             reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    WHILE           reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    DO              reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    VAR             reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    VAL             reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    CROSSINLINE     reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    IMPORT          reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    INIT            reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    NOINLINE        reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    OUT             reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    VARARG          reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    WHERE           reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    OPERATOR        reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    LPAREN          reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    LITERAL_STRING  reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    NUMBER          reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    COLONCOLON      reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    LCCT            reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    IF              reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    RETURN          reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    RETURN_AT       reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    CONTINUE        reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    CONTINUE_AT     reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    BREAK           reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    BREAK_AT        reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    LCHAVE          reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    INCREMENTO      reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    DECREMENTO      reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    MINUS           reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    PLUS            reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    NOT             reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    SUSPEND         reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    RCHAVE          reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    $end            reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    PV              reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    ELSE            reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    MENOR           reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    PONTO           reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    AS              reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    MULT            reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    DIVIDE          reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    MOD             reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    PONTOPONTO      reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    ELVIS           reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    IN              reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    NOT_IN          reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    IS              reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    NOT_IS          reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    MAIOR           reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    MENORIGUAL      reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    MAIORIGUAL      reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    DIFERENTE       reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    IDENTIDADE      reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    IGUALDADE       reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    SEMIDENTIDADE   reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    AND             reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    OR              reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    MAISIGUAL       reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    MENOSIGUAL      reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    MULTIGUAL       reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    DIVIGUAL        reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    MODIGUAL        reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    RPAREN          reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    COMMA           reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)
    RCCT            reduce using rule 85 (chamadaDeFuncao -> ID LPAREN parametersFunction RPAREN .)


state 378

    (83) parametersFunction -> primaryExpression COMMA . parametersFunction
    (82) parametersFunction -> . primaryExpression
    (83) parametersFunction -> . primaryExpression COMMA parametersFunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    primaryExpression              shift and go to state 327
    parametersFunction             shift and go to state 407
    parenthesizedExpression        shift and go to state 49
    simpleIdentifier               shift and go to state 153
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 379

    (76) forStatement -> FOR LPAREN genericVariableDeclaration IN . expression RPAREN controlStructureBody
    (77) forStatement -> FOR LPAREN genericVariableDeclaration IN . expression RPAREN
    (8) expression -> . disjunction
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    expression                     shift and go to state 408
    disjunction                    shift and go to state 30
    conjunction                    shift and go to state 31
    equality                       shift and go to state 32
    comparison                     shift and go to state 33
    infixOperation                 shift and go to state 34
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    simpleIdentifier               shift and go to state 38
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 380

    (78) whileStatement -> WHILE LPAREN expression RPAREN . controlStructureBody
    (79) whileStatement -> WHILE LPAREN expression RPAREN . PV
    (70) controlStructureBody -> . block
    (71) controlStructureBody -> . statement
    (72) block -> . LCHAVE statements RCHAVE
    (64) statement -> . functionDeclaration
    (65) statement -> . assignment
    (66) statement -> . loopStatement
    (67) statement -> . expression
    (68) statement -> . propertyDeclaration
    (69) statement -> . chamadaDeFuncao
    (4) functionDeclaration -> . FUN simpleIdentifier functionValueParameters functionBody
    (5) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType functionBody
    (86) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (87) assignment -> . asExpression assignmentAndOperator expression
    (73) loopStatement -> . forStatement
    (74) loopStatement -> . whileStatement
    (75) loopStatement -> . doWhileStatement
    (8) expression -> . disjunction
    (11) propertyDeclaration -> . varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV
    (12) propertyDeclaration -> . varOrVal genericVariableDeclaration ATRIBUICAO expression PV
    (13) propertyDeclaration -> . varOrVal genericVariableDeclaration ATRIBUICAO expression
    (14) propertyDeclaration -> . varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression
    (84) chamadaDeFuncao -> . ID LPAREN RPAREN
    (85) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (131) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (132) directlyAssignableExpression -> . simpleIdentifier
    (133) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (76) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody
    (77) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN
    (78) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (79) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (80) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (81) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (9) varOrVal -> . VAR
    (10) varOrVal -> . VAL
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (134) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (42) typeModifier -> . SUSPEND
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression

    PV              shift and go to state 410
    LCHAVE          shift and go to state 240
    FUN             shift and go to state 99
    ID              shift and go to state 107
    FOR             shift and go to state 111
    WHILE           shift and go to state 112
    DO              shift and go to state 113
    VAR             shift and go to state 114
    VAL             shift and go to state 115
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LPAREN          shift and go to state 108
    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    SUSPEND         shift and go to state 78

    expression                     shift and go to state 96
    controlStructureBody           shift and go to state 409
    block                          shift and go to state 238
    statement                      shift and go to state 239
    functionDeclaration            shift and go to state 93
    assignment                     shift and go to state 94
    loopStatement                  shift and go to state 95
    propertyDeclaration            shift and go to state 97
    chamadaDeFuncao                shift and go to state 98
    simpleIdentifier               shift and go to state 100
    directlyAssignableExpression   shift and go to state 101
    asExpression                   shift and go to state 102
    forStatement                   shift and go to state 103
    whileStatement                 shift and go to state 104
    doWhileStatement               shift and go to state 105
    disjunction                    shift and go to state 30
    varOrVal                       shift and go to state 106
    postfixUnaryExpression         shift and go to state 109
    parenthesizedDirectlyAssignableExpression shift and go to state 110
    prefixUnaryExpression          shift and go to state 42
    conjunction                    shift and go to state 31
    primaryExpression              shift and go to state 46
    prefixUnaryExpressionRecursive shift and go to state 43
    equality                       shift and go to state 32
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    unaryPrefix                    shift and go to state 45
    comparison                     shift and go to state 33
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    infixOperation                 shift and go to state 34
    typeModifier                   shift and go to state 75
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40

state 381

    (80) doWhileStatement -> DO controlStructureBody WHILE LPAREN . expression RPAREN
    (8) expression -> . disjunction
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    expression                     shift and go to state 411
    disjunction                    shift and go to state 30
    conjunction                    shift and go to state 31
    equality                       shift and go to state 32
    comparison                     shift and go to state 33
    infixOperation                 shift and go to state 34
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    simpleIdentifier               shift and go to state 38
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 382

    (81) doWhileStatement -> DO WHILE LPAREN expression . RPAREN
    (78) whileStatement -> WHILE LPAREN expression . RPAREN controlStructureBody
    (79) whileStatement -> WHILE LPAREN expression . RPAREN PV

    RPAREN          shift and go to state 412


state 383

    (156) typeArgumentsRecursive -> typeProjection COMMA typeArgumentsRecursive .

    MAIOR           reduce using rule 156 (typeArgumentsRecursive -> typeProjection COMMA typeArgumentsRecursive .)


state 384

    (144) indexingSuffixRecursive -> expression COMMA indexingSuffixRecursive .

    RCCT            reduce using rule 144 (indexingSuffixRecursive -> expression COMMA indexingSuffixRecursive .)


state 385

    (158) valueArgumentsRecursive -> valueArgument COMMA valueArgumentsRecursive .

    RPAREN          reduce using rule 158 (valueArgumentsRecursive -> valueArgument COMMA valueArgumentsRecursive .)


state 386

    (161) valueArgument -> simpleIdentifier ATRIBUICAO MULT . expression
    (8) expression -> . disjunction
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (42) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    LPAREN          shift and go to state 62
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    LCHAVE          shift and go to state 76
    FUN             shift and go to state 77
    SUSPEND         shift and go to state 78

    simpleIdentifier               shift and go to state 38
    expression                     shift and go to state 413
    disjunction                    shift and go to state 30
    conjunction                    shift and go to state 31
    equality                       shift and go to state 32
    comparison                     shift and go to state 33
    infixOperation                 shift and go to state 34
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40
    asExpression                   shift and go to state 41
    prefixUnaryExpression          shift and go to state 42
    prefixUnaryExpressionRecursive shift and go to state 43
    postfixUnaryExpression         shift and go to state 44
    unaryPrefix                    shift and go to state 45
    primaryExpression              shift and go to state 46
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    typeModifier                   shift and go to state 75

state 387

    (162) valueArgument -> simpleIdentifier ATRIBUICAO expression .

    COMMA           reduce using rule 162 (valueArgument -> simpleIdentifier ATRIBUICAO expression .)
    RPAREN          reduce using rule 162 (valueArgument -> simpleIdentifier ATRIBUICAO expression .)


state 388

    (218) ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .

    FUN             reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    $end            reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    ID              reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    FOR             reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    WHILE           reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    DO              reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    VAR             reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    VAL             reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    CROSSINLINE     reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    IMPORT          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    INIT            reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    NOINLINE        reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    OUT             reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    VARARG          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    WHERE           reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    OPERATOR        reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    LPAREN          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    LITERAL_STRING  reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    NUMBER          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    COLONCOLON      reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    LCCT            reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    IF              reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    RETURN          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    RETURN_AT       reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    CONTINUE        reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    CONTINUE_AT     reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    BREAK           reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    BREAK_AT        reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    LCHAVE          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    INCREMENTO      reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    DECREMENTO      reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MINUS           reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    PLUS            reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    NOT             reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    SUSPEND         reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    RCHAVE          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    PV              reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    ELSE            reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MENOR           reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    PONTO           reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    AS              reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MULT            reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    DIVIDE          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MOD             reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    PONTOPONTO      reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    ELVIS           reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    IN              reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    NOT_IN          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    IS              reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    NOT_IS          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MAIOR           reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MENORIGUAL      reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MAIORIGUAL      reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    DIFERENTE       reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    IDENTIDADE      reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    IGUALDADE       reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    SEMIDENTIDADE   reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    AND             reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    OR              reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MAISIGUAL       reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MENOSIGUAL      reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MULTIGUAL       reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    DIVIGUAL        reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MODIGUAL        reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    RPAREN          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    COMMA           reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    RCCT            reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)


state 389

    (219) ifExpression -> IF LPAREN expression RPAREN controlStructureBody . PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> IF LPAREN expression RPAREN controlStructureBody . ELSE controlStructureBodyOrPV
    (222) controlStructureBodyOrPV -> controlStructureBody .

  ! shift/reduce conflict for PV resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
    PV              shift and go to state 414
    ELSE            shift and go to state 415
    FUN             reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    $end            reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    ID              reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    FOR             reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    WHILE           reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    DO              reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    VAR             reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    VAL             reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    CROSSINLINE     reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    IMPORT          reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    INIT            reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    NOINLINE        reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    OUT             reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    VARARG          reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    WHERE           reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    OPERATOR        reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    LPAREN          reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    LITERAL_STRING  reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    NUMBER          reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    COLONCOLON      reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    LCCT            reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    IF              reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    RETURN          reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    RETURN_AT       reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    CONTINUE        reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    CONTINUE_AT     reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    BREAK           reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    BREAK_AT        reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    LCHAVE          reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    INCREMENTO      reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    DECREMENTO      reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    MINUS           reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    PLUS            reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    NOT             reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    SUSPEND         reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    RCHAVE          reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    MENOR           reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    PONTO           reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    AS              reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    MULT            reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    DIVIDE          reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    MOD             reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    PONTOPONTO      reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    ELVIS           reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    IN              reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    NOT_IN          reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    IS              reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    NOT_IS          reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    MAIOR           reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    MENORIGUAL      reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    MAIORIGUAL      reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    DIFERENTE       reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    IDENTIDADE      reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    IGUALDADE       reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    SEMIDENTIDADE   reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    AND             reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    OR              reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    MAISIGUAL       reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    MENOSIGUAL      reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    MULTIGUAL       reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    DIVIGUAL        reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    MODIGUAL        reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    RPAREN          reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    COMMA           reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    RCCT            reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)

  ! PV              [ reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .) ]
  ! ELSE            [ reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .) ]


state 390

    (220) ifExpression -> IF LPAREN expression RPAREN PV . ELSE controlStructureBodyOrPV
    (223) controlStructureBodyOrPV -> PV .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 416
    FUN             reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    $end            reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    ID              reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    FOR             reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    WHILE           reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    DO              reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    VAR             reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    VAL             reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    CROSSINLINE     reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    IMPORT          reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    INIT            reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    NOINLINE        reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    OUT             reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    VARARG          reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    WHERE           reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    OPERATOR        reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    LPAREN          reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    LITERAL_STRING  reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    NUMBER          reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    COLONCOLON      reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    LCCT            reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    IF              reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    RETURN          reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    RETURN_AT       reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    CONTINUE        reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    CONTINUE_AT     reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    BREAK           reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    BREAK_AT        reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    LCHAVE          reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    INCREMENTO      reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    DECREMENTO      reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    MINUS           reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    PLUS            reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    NOT             reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    SUSPEND         reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    RCHAVE          reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    PV              reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    MENOR           reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    PONTO           reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    AS              reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    MULT            reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    DIVIDE          reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    MOD             reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    PONTOPONTO      reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    ELVIS           reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    IN              reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    NOT_IN          reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    IS              reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    NOT_IS          reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    MAIOR           reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    MENORIGUAL      reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    MAIORIGUAL      reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    DIFERENTE       reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    IDENTIDADE      reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    IGUALDADE       reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    SEMIDENTIDADE   reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    AND             reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    OR              reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    MAISIGUAL       reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    MENOSIGUAL      reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    MULTIGUAL       reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    DIVIGUAL        reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    MODIGUAL        reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    RPAREN          reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    COMMA           reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    RCCT            reduce using rule 223 (controlStructureBodyOrPV -> PV .)

  ! ELSE            [ reduce using rule 223 (controlStructureBodyOrPV -> PV .) ]


state 391

    (33) multiVariableDeclarationRecursive -> variableDeclaration COMMA multiVariableDeclarationRecursive .

    RPAREN          reduce using rule 33 (multiVariableDeclarationRecursive -> variableDeclaration COMMA multiVariableDeclarationRecursive .)


state 392

    (199) anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints . functionBody
    (203) anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .
    (20) functionBody -> . block
    (21) functionBody -> . ATRIBUICAO expression
    (72) block -> . LCHAVE statements RCHAVE

  ! shift/reduce conflict for LCHAVE resolved as shift
    FUN             reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    $end            reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    ID              reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    FOR             reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    WHILE           reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    DO              reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    VAR             reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    VAL             reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    CROSSINLINE     reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    IMPORT          reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    INIT            reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    NOINLINE        reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    OUT             reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    VARARG          reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    WHERE           reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    OPERATOR        reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    LPAREN          reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    LITERAL_STRING  reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    NUMBER          reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    COLONCOLON      reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    LCCT            reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    IF              reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    RETURN          reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    RETURN_AT       reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    CONTINUE        reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    CONTINUE_AT     reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    BREAK           reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    BREAK_AT        reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    INCREMENTO      reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    DECREMENTO      reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    MINUS           reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    PLUS            reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    NOT             reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    SUSPEND         reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    RCHAVE          reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    PV              reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    ELSE            reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    MENOR           reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    PONTO           reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    AS              reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    MULT            reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    DIVIDE          reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    MOD             reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    PONTOPONTO      reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    ELVIS           reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    IN              reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    NOT_IN          reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    IS              reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    NOT_IS          reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    MAIOR           reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    MENORIGUAL      reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    MAIORIGUAL      reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    DIFERENTE       reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    IDENTIDADE      reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    IGUALDADE       reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    SEMIDENTIDADE   reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    AND             reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    OR              reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    MAISIGUAL       reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    MENOSIGUAL      reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    MULTIGUAL       reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    DIVIGUAL        reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    MODIGUAL        reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    RPAREN          reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    COMMA           reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    RCCT            reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .)
    ATRIBUICAO      shift and go to state 20
    LCHAVE          shift and go to state 22

  ! LCHAVE          [ reduce using rule 203 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints .) ]

    functionBody                   shift and go to state 417
    block                          shift and go to state 19

state 393

    (202) anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .

    FUN             reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    $end            reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    ID              reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    FOR             reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    WHILE           reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    DO              reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    VAR             reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    VAL             reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    CROSSINLINE     reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    IMPORT          reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    INIT            reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    NOINLINE        reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    OUT             reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    VARARG          reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    WHERE           reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    OPERATOR        reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    LPAREN          reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    LITERAL_STRING  reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    NUMBER          reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    COLONCOLON      reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    LCCT            reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    IF              reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    RETURN          reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    RETURN_AT       reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    CONTINUE        reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    CONTINUE_AT     reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    BREAK           reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    BREAK_AT        reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    LCHAVE          reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    INCREMENTO      reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    DECREMENTO      reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    MINUS           reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    PLUS            reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    NOT             reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    SUSPEND         reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    RCHAVE          reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    PV              reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    ELSE            reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    MENOR           reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    PONTO           reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    AS              reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    MULT            reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    DIVIDE          reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    MOD             reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    PONTOPONTO      reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    ELVIS           reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    IN              reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    NOT_IN          reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    IS              reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    NOT_IS          reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    MAIOR           reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    MENORIGUAL      reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    MAIORIGUAL      reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    DIFERENTE       reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    IDENTIDADE      reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    IGUALDADE       reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    SEMIDENTIDADE   reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    AND             reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    OR              reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    MAISIGUAL       reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    MENOSIGUAL      reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    MULTIGUAL       reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    DIVIGUAL        reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    MODIGUAL        reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    RPAREN          reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    COMMA           reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)
    RCCT            reduce using rule 202 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType functionBody .)


state 394

    (201) anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .

    FUN             reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    $end            reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    ID              reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    FOR             reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    WHILE           reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    DO              reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    VAR             reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    VAL             reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    CROSSINLINE     reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    IMPORT          reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    INIT            reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    NOINLINE        reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    OUT             reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    VARARG          reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    WHERE           reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    OPERATOR        reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    LPAREN          reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    LITERAL_STRING  reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    NUMBER          reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    COLONCOLON      reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    LCCT            reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    IF              reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    RETURN          reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    RETURN_AT       reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    CONTINUE        reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    CONTINUE_AT     reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    BREAK           reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    BREAK_AT        reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    LCHAVE          reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    INCREMENTO      reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    DECREMENTO      reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    MINUS           reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    PLUS            reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    NOT             reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    SUSPEND         reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    RCHAVE          reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    PV              reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    ELSE            reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    MENOR           reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    PONTO           reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    AS              reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    MULT            reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    DIVIDE          reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    MOD             reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    PONTOPONTO      reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    ELVIS           reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    IN              reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    NOT_IN          reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    IS              reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    NOT_IS          reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    MAIOR           reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    MENORIGUAL      reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    MAIORIGUAL      reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    DIFERENTE       reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    IDENTIDADE      reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    IGUALDADE       reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    SEMIDENTIDADE   reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    AND             reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    OR              reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    MAISIGUAL       reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    MENOSIGUAL      reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    MULTIGUAL       reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    DIVIGUAL        reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    MODIGUAL        reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    RPAREN          reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    COMMA           reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)
    RCCT            reduce using rule 201 (anonymousFunction -> FUN typePonto parametersWithOptionalType typeConstraints functionBody .)


state 395

    (184) parameterWithOptionalType -> simpleIdentifier optionalType .

    COMMA           reduce using rule 184 (parameterWithOptionalType -> simpleIdentifier optionalType .)
    RPAREN          reduce using rule 184 (parameterWithOptionalType -> simpleIdentifier optionalType .)


state 396

    (200) anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .

    FUN             reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    $end            reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    ID              reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    FOR             reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    WHILE           reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    DO              reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    VAR             reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    VAL             reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    CROSSINLINE     reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    IMPORT          reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    INIT            reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    NOINLINE        reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    OUT             reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    VARARG          reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    WHERE           reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    OPERATOR        reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    LPAREN          reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    LITERAL_STRING  reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    NUMBER          reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    COLONCOLON      reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    LCCT            reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    IF              reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    RETURN          reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    RETURN_AT       reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    CONTINUE        reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    CONTINUE_AT     reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    BREAK           reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    BREAK_AT        reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    LCHAVE          reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    INCREMENTO      reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    DECREMENTO      reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    MINUS           reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    PLUS            reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    NOT             reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    SUSPEND         reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    RCHAVE          reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    PV              reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    ELSE            reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    MENOR           reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    PONTO           reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    AS              reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    MULT            reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    DIVIDE          reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    MOD             reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    PONTOPONTO      reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    ELVIS           reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    IN              reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    NOT_IN          reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    IS              reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    NOT_IS          reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    MAIOR           reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    MENORIGUAL      reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    MAIORIGUAL      reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    DIFERENTE       reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    IDENTIDADE      reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    IGUALDADE       reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    SEMIDENTIDADE   reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    AND             reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    OR              reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    MAISIGUAL       reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    MENOSIGUAL      reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    MULTIGUAL       reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    DIVIGUAL        reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    MODIGUAL        reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    RPAREN          reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    COMMA           reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)
    RCCT            reduce using rule 200 (anonymousFunction -> FUN parametersWithOptionalType optionalType typeConstraints functionBody .)


state 397

    (217) typeConstraints -> simpleIdentifier DOISP type .

    ATRIBUICAO      reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    LCHAVE          reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    FUN             reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    $end            reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    ID              reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    FOR             reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    WHILE           reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    DO              reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    VAR             reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    VAL             reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    CROSSINLINE     reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    IMPORT          reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    INIT            reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    NOINLINE        reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    OUT             reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    VARARG          reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    WHERE           reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    OPERATOR        reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    LPAREN          reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    LITERAL_STRING  reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    NUMBER          reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    COLONCOLON      reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    LCCT            reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    IF              reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    RETURN          reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    RETURN_AT       reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    CONTINUE        reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    CONTINUE_AT     reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    BREAK           reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    BREAK_AT        reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    INCREMENTO      reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    DECREMENTO      reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    MINUS           reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    PLUS            reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    NOT             reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    SUSPEND         reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    RCHAVE          reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    PV              reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    ELSE            reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    MENOR           reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    PONTO           reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    AS              reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    MULT            reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    DIVIDE          reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    MOD             reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    PONTOPONTO      reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    ELVIS           reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    IN              reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    NOT_IN          reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    IS              reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    NOT_IS          reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    MAIOR           reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    MENORIGUAL      reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    MAIORIGUAL      reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    DIFERENTE       reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    IDENTIDADE      reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    IGUALDADE       reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    SEMIDENTIDADE   reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    AND             reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    OR              reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    MAISIGUAL       reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    MENOSIGUAL      reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    MULTIGUAL       reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    DIVIGUAL        reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    MODIGUAL        reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    RPAREN          reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    COMMA           reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)
    RCCT            reduce using rule 217 (typeConstraints -> simpleIdentifier DOISP type .)


state 398

    (181) parametersWithOptionalTypeRecursive -> parameterWithOptionalType COMMA parametersWithOptionalTypeRecursive .

    RPAREN          reduce using rule 181 (parametersWithOptionalTypeRecursive -> parameterWithOptionalType COMMA parametersWithOptionalTypeRecursive .)


state 399

    (182) parameterWithOptionalType -> parameterModifiers simpleIdentifier optionalType .

    COMMA           reduce using rule 182 (parameterWithOptionalType -> parameterModifiers simpleIdentifier optionalType .)
    RPAREN          reduce using rule 182 (parameterWithOptionalType -> parameterModifiers simpleIdentifier optionalType .)


state 400

    (58) parameterOrTypeRecursive -> COMMA parameterOrType parameterOrTypeRecursive .

    RPAREN          reduce using rule 58 (parameterOrTypeRecursive -> COMMA parameterOrType parameterOrTypeRecursive .)


state 401

    (53) functionType -> receiverType PONTO functionTypeParameters SETA type .

    ATRIBUICAO      reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    LCHAVE          reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    COMMA           reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    RPAREN          reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    SETA            reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    ID              reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    CROSSINLINE     reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IMPORT          reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    INIT            reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NOINLINE        reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    OUT             reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    VARARG          reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    WHERE           reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    OPERATOR        reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    FUN             reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    $end            reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    FOR             reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    WHILE           reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DO              reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    VAR             reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    VAL             reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    LPAREN          reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    LITERAL_STRING  reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NUMBER          reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    COLONCOLON      reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    LCCT            reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IF              reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    RETURN          reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    RETURN_AT       reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    CONTINUE        reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    CONTINUE_AT     reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    BREAK           reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    BREAK_AT        reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    INCREMENTO      reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DECREMENTO      reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MINUS           reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    PLUS            reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NOT             reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    SUSPEND         reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    RCHAVE          reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    PV              reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    ELSE            reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MENOR           reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    PONTO           reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    AS              reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MULT            reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DIVIDE          reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MOD             reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    PONTOPONTO      reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    ELVIS           reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IN              reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NOT_IN          reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IS              reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NOT_IS          reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MAIOR           reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MENORIGUAL      reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MAIORIGUAL      reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DIFERENTE       reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IDENTIDADE      reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IGUALDADE       reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    SEMIDENTIDADE   reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    AND             reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    OR              reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MAISIGUAL       reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MENOSIGUAL      reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MULTIGUAL       reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DIVIGUAL        reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MODIGUAL        reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    RCCT            reduce using rule 53 (functionType -> receiverType PONTO functionTypeParameters SETA type .)


state 402

    (11) propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression . PV
    (14) propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .

  ! shift/reduce conflict for PV resolved as shift
    PV              shift and go to state 418
    FUN             reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    ID              reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    FOR             reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    WHILE           reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    DO              reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    VAR             reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    VAL             reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    CROSSINLINE     reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    IMPORT          reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    INIT            reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    NOINLINE        reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    OUT             reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    VARARG          reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    WHERE           reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    OPERATOR        reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    LPAREN          reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    LITERAL_STRING  reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    NUMBER          reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    COLONCOLON      reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    LCCT            reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    IF              reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    RETURN          reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    RETURN_AT       reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    CONTINUE        reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    CONTINUE_AT     reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    BREAK           reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    BREAK_AT        reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    LCHAVE          reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    INCREMENTO      reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    DECREMENTO      reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    MINUS           reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    PLUS            reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    NOT             reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    SUSPEND         reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    RCHAVE          reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    $end            reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    ELSE            reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    MENOR           reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    PONTO           reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    AS              reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    MULT            reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    DIVIDE          reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    MOD             reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    PONTOPONTO      reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    ELVIS           reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    IN              reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    NOT_IN          reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    IS              reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    NOT_IS          reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    MAIOR           reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    MENORIGUAL      reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    MAIORIGUAL      reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    DIFERENTE       reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    IDENTIDADE      reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    IGUALDADE       reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    SEMIDENTIDADE   reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    AND             reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    OR              reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    MAISIGUAL       reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    MENOSIGUAL      reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    MULTIGUAL       reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    DIVIGUAL        reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    MODIGUAL        reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    RPAREN          reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    COMMA           reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)
    RCCT            reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .)

  ! PV              [ reduce using rule 14 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression .) ]


state 403

    (12) propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .

    FUN             reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    ID              reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    FOR             reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    WHILE           reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    DO              reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    VAR             reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    VAL             reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    CROSSINLINE     reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    IMPORT          reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    INIT            reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    NOINLINE        reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    OUT             reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    VARARG          reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    WHERE           reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    OPERATOR        reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    LPAREN          reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    LITERAL_STRING  reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    NUMBER          reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    COLONCOLON      reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    LCCT            reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    IF              reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    RETURN          reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    RETURN_AT       reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    CONTINUE        reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    CONTINUE_AT     reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    BREAK           reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    BREAK_AT        reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    LCHAVE          reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    INCREMENTO      reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    DECREMENTO      reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    MINUS           reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    PLUS            reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    NOT             reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    SUSPEND         reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    RCHAVE          reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    $end            reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    PV              reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    ELSE            reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    MENOR           reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    PONTO           reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    AS              reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    MULT            reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    DIVIDE          reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    MOD             reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    PONTOPONTO      reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    ELVIS           reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    IN              reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    NOT_IN          reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    IS              reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    NOT_IS          reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    MAIOR           reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    MENORIGUAL      reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    MAIORIGUAL      reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    DIFERENTE       reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    IDENTIDADE      reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    IGUALDADE       reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    SEMIDENTIDADE   reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    AND             reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    OR              reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    MAISIGUAL       reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    MENOSIGUAL      reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    MULTIGUAL       reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    DIVIGUAL        reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    MODIGUAL        reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    RPAREN          reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    COMMA           reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)
    RCCT            reduce using rule 12 (propertyDeclaration -> varOrVal genericVariableDeclaration ATRIBUICAO expression PV .)


state 404

    (15) typeParameters -> MENOR typeParameter typeParametersRecursive MAIOR .

    LPAREN          reduce using rule 15 (typeParameters -> MENOR typeParameter typeParametersRecursive MAIOR .)
    ID              reduce using rule 15 (typeParameters -> MENOR typeParameter typeParametersRecursive MAIOR .)
    CROSSINLINE     reduce using rule 15 (typeParameters -> MENOR typeParameter typeParametersRecursive MAIOR .)
    IMPORT          reduce using rule 15 (typeParameters -> MENOR typeParameter typeParametersRecursive MAIOR .)
    INIT            reduce using rule 15 (typeParameters -> MENOR typeParameter typeParametersRecursive MAIOR .)
    NOINLINE        reduce using rule 15 (typeParameters -> MENOR typeParameter typeParametersRecursive MAIOR .)
    OUT             reduce using rule 15 (typeParameters -> MENOR typeParameter typeParametersRecursive MAIOR .)
    VARARG          reduce using rule 15 (typeParameters -> MENOR typeParameter typeParametersRecursive MAIOR .)
    WHERE           reduce using rule 15 (typeParameters -> MENOR typeParameter typeParametersRecursive MAIOR .)
    OPERATOR        reduce using rule 15 (typeParameters -> MENOR typeParameter typeParametersRecursive MAIOR .)


state 405

    (16) typeParametersRecursive -> COMMA typeParameter .
    (17) typeParametersRecursive -> COMMA typeParameter . typeParametersRecursive
    (16) typeParametersRecursive -> . COMMA typeParameter
    (17) typeParametersRecursive -> . COMMA typeParameter typeParametersRecursive

    MAIOR           reduce using rule 16 (typeParametersRecursive -> COMMA typeParameter .)
    COMMA           shift and go to state 375

    typeParametersRecursive        shift and go to state 419

state 406

    (19) typeParameter -> simpleIdentifier DOISP type .

    COMMA           reduce using rule 19 (typeParameter -> simpleIdentifier DOISP type .)
    MAIOR           reduce using rule 19 (typeParameter -> simpleIdentifier DOISP type .)


state 407

    (83) parametersFunction -> primaryExpression COMMA parametersFunction .

    RPAREN          reduce using rule 83 (parametersFunction -> primaryExpression COMMA parametersFunction .)


state 408

    (76) forStatement -> FOR LPAREN genericVariableDeclaration IN expression . RPAREN controlStructureBody
    (77) forStatement -> FOR LPAREN genericVariableDeclaration IN expression . RPAREN

    RPAREN          shift and go to state 420


state 409

    (78) whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .

    FUN             reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    ID              reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    FOR             reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    WHILE           reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DO              reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    VAR             reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    VAL             reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    CROSSINLINE     reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IMPORT          reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    INIT            reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NOINLINE        reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    OUT             reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    VARARG          reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    WHERE           reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    OPERATOR        reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    LPAREN          reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    LITERAL_STRING  reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NUMBER          reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    COLONCOLON      reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    LCCT            reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IF              reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    RETURN          reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    RETURN_AT       reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    CONTINUE        reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    CONTINUE_AT     reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    BREAK           reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    BREAK_AT        reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    LCHAVE          reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    INCREMENTO      reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DECREMENTO      reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MINUS           reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    PLUS            reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NOT             reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    SUSPEND         reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    RCHAVE          reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    $end            reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    PV              reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    ELSE            reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MENOR           reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    PONTO           reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    AS              reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MULT            reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DIVIDE          reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MOD             reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    PONTOPONTO      reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    ELVIS           reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IN              reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NOT_IN          reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IS              reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NOT_IS          reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MAIOR           reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MENORIGUAL      reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MAIORIGUAL      reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DIFERENTE       reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IDENTIDADE      reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IGUALDADE       reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    SEMIDENTIDADE   reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    AND             reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    OR              reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MAISIGUAL       reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MENOSIGUAL      reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MULTIGUAL       reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DIVIGUAL        reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MODIGUAL        reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    RPAREN          reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    COMMA           reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    RCCT            reduce using rule 78 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)


state 410

    (79) whileStatement -> WHILE LPAREN expression RPAREN PV .

    FUN             reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    ID              reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    FOR             reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    WHILE           reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DO              reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    VAR             reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    VAL             reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    CROSSINLINE     reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IMPORT          reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    INIT            reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NOINLINE        reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    OUT             reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    VARARG          reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    WHERE           reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    OPERATOR        reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    LPAREN          reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    LITERAL_STRING  reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NUMBER          reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    COLONCOLON      reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    LCCT            reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IF              reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    RETURN          reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    RETURN_AT       reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    CONTINUE        reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    CONTINUE_AT     reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    BREAK           reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    BREAK_AT        reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    LCHAVE          reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    INCREMENTO      reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DECREMENTO      reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MINUS           reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    PLUS            reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NOT             reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    SUSPEND         reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    RCHAVE          reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    $end            reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    PV              reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    ELSE            reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MENOR           reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    PONTO           reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    AS              reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MULT            reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DIVIDE          reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MOD             reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    PONTOPONTO      reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    ELVIS           reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IN              reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NOT_IN          reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IS              reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NOT_IS          reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MAIOR           reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MENORIGUAL      reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MAIORIGUAL      reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DIFERENTE       reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IDENTIDADE      reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IGUALDADE       reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    SEMIDENTIDADE   reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    AND             reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    OR              reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MAISIGUAL       reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MENOSIGUAL      reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MULTIGUAL       reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DIVIGUAL        reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MODIGUAL        reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    RPAREN          reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    COMMA           reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    RCCT            reduce using rule 79 (whileStatement -> WHILE LPAREN expression RPAREN PV .)


state 411

    (80) doWhileStatement -> DO controlStructureBody WHILE LPAREN expression . RPAREN

    RPAREN          shift and go to state 421


state 412

    (81) doWhileStatement -> DO WHILE LPAREN expression RPAREN .
    (78) whileStatement -> WHILE LPAREN expression RPAREN . controlStructureBody
    (79) whileStatement -> WHILE LPAREN expression RPAREN . PV
    (70) controlStructureBody -> . block
    (71) controlStructureBody -> . statement
    (72) block -> . LCHAVE statements RCHAVE
    (64) statement -> . functionDeclaration
    (65) statement -> . assignment
    (66) statement -> . loopStatement
    (67) statement -> . expression
    (68) statement -> . propertyDeclaration
    (69) statement -> . chamadaDeFuncao
    (4) functionDeclaration -> . FUN simpleIdentifier functionValueParameters functionBody
    (5) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType functionBody
    (86) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (87) assignment -> . asExpression assignmentAndOperator expression
    (73) loopStatement -> . forStatement
    (74) loopStatement -> . whileStatement
    (75) loopStatement -> . doWhileStatement
    (8) expression -> . disjunction
    (11) propertyDeclaration -> . varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV
    (12) propertyDeclaration -> . varOrVal genericVariableDeclaration ATRIBUICAO expression PV
    (13) propertyDeclaration -> . varOrVal genericVariableDeclaration ATRIBUICAO expression
    (14) propertyDeclaration -> . varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression
    (84) chamadaDeFuncao -> . ID LPAREN RPAREN
    (85) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (131) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (132) directlyAssignableExpression -> . simpleIdentifier
    (133) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (76) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody
    (77) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN
    (78) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (79) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (80) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (81) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (9) varOrVal -> . VAR
    (10) varOrVal -> . VAL
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (134) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (42) typeModifier -> . SUSPEND
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression

  ! shift/reduce conflict for PV resolved as shift
  ! shift/reduce conflict for LCHAVE resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for COLONCOLON resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
    RCHAVE          reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    $end            reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    ELSE            reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MENOR           reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    PONTO           reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    AS              reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MULT            reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MOD             reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    PONTOPONTO      reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    ELVIS           reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    IN              reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    NOT_IN          reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    IS              reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    NOT_IS          reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MAIOR           reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MENORIGUAL      reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MAIORIGUAL      reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    DIFERENTE       reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    IDENTIDADE      reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    IGUALDADE       reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    SEMIDENTIDADE   reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    AND             reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    OR              reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MAISIGUAL       reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MENOSIGUAL      reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MULTIGUAL       reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    DIVIGUAL        reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MODIGUAL        reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    RPAREN          reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    COMMA           reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    RCCT            reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    PV              shift and go to state 410
    LCHAVE          shift and go to state 240
    FUN             shift and go to state 99
    ID              shift and go to state 107
    FOR             shift and go to state 111
    WHILE           shift and go to state 112
    DO              shift and go to state 113
    VAR             shift and go to state 114
    VAL             shift and go to state 115
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LPAREN          shift and go to state 108
    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    SUSPEND         shift and go to state 78

  ! FUN             [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! ID              [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! FOR             [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! WHILE           [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! DO              [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! VAR             [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! VAL             [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! CROSSINLINE     [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! IMPORT          [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! INIT            [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! NOINLINE        [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! OUT             [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! VARARG          [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! WHERE           [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! OPERATOR        [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! LPAREN          [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! LITERAL_STRING  [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! NUMBER          [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! COLONCOLON      [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! LCCT            [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! IF              [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! RETURN          [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! RETURN_AT       [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! CONTINUE        [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! CONTINUE_AT     [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! BREAK           [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! BREAK_AT        [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! LCHAVE          [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! INCREMENTO      [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! DECREMENTO      [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! MINUS           [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! PLUS            [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! NOT             [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! SUSPEND         [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! PV              [ reduce using rule 81 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]

    expression                     shift and go to state 96
    controlStructureBody           shift and go to state 409
    block                          shift and go to state 238
    statement                      shift and go to state 239
    functionDeclaration            shift and go to state 93
    assignment                     shift and go to state 94
    loopStatement                  shift and go to state 95
    propertyDeclaration            shift and go to state 97
    chamadaDeFuncao                shift and go to state 98
    simpleIdentifier               shift and go to state 100
    directlyAssignableExpression   shift and go to state 101
    asExpression                   shift and go to state 102
    forStatement                   shift and go to state 103
    whileStatement                 shift and go to state 104
    doWhileStatement               shift and go to state 105
    disjunction                    shift and go to state 30
    varOrVal                       shift and go to state 106
    postfixUnaryExpression         shift and go to state 109
    parenthesizedDirectlyAssignableExpression shift and go to state 110
    prefixUnaryExpression          shift and go to state 42
    conjunction                    shift and go to state 31
    primaryExpression              shift and go to state 46
    prefixUnaryExpressionRecursive shift and go to state 43
    equality                       shift and go to state 32
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    unaryPrefix                    shift and go to state 45
    comparison                     shift and go to state 33
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    infixOperation                 shift and go to state 34
    typeModifier                   shift and go to state 75
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40

state 413

    (161) valueArgument -> simpleIdentifier ATRIBUICAO MULT expression .

    COMMA           reduce using rule 161 (valueArgument -> simpleIdentifier ATRIBUICAO MULT expression .)
    RPAREN          reduce using rule 161 (valueArgument -> simpleIdentifier ATRIBUICAO MULT expression .)


state 414

    (219) ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV . ELSE controlStructureBodyOrPV

    ELSE            shift and go to state 422


state 415

    (221) ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE . controlStructureBodyOrPV
    (222) controlStructureBodyOrPV -> . controlStructureBody
    (223) controlStructureBodyOrPV -> . PV
    (70) controlStructureBody -> . block
    (71) controlStructureBody -> . statement
    (72) block -> . LCHAVE statements RCHAVE
    (64) statement -> . functionDeclaration
    (65) statement -> . assignment
    (66) statement -> . loopStatement
    (67) statement -> . expression
    (68) statement -> . propertyDeclaration
    (69) statement -> . chamadaDeFuncao
    (4) functionDeclaration -> . FUN simpleIdentifier functionValueParameters functionBody
    (5) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType functionBody
    (86) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (87) assignment -> . asExpression assignmentAndOperator expression
    (73) loopStatement -> . forStatement
    (74) loopStatement -> . whileStatement
    (75) loopStatement -> . doWhileStatement
    (8) expression -> . disjunction
    (11) propertyDeclaration -> . varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV
    (12) propertyDeclaration -> . varOrVal genericVariableDeclaration ATRIBUICAO expression PV
    (13) propertyDeclaration -> . varOrVal genericVariableDeclaration ATRIBUICAO expression
    (14) propertyDeclaration -> . varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression
    (84) chamadaDeFuncao -> . ID LPAREN RPAREN
    (85) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (131) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (132) directlyAssignableExpression -> . simpleIdentifier
    (133) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (76) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody
    (77) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN
    (78) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (79) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (80) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (81) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (9) varOrVal -> . VAR
    (10) varOrVal -> . VAL
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (134) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (42) typeModifier -> . SUSPEND
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression

    PV              shift and go to state 425
    LCHAVE          shift and go to state 240
    FUN             shift and go to state 99
    ID              shift and go to state 107
    FOR             shift and go to state 111
    WHILE           shift and go to state 112
    DO              shift and go to state 113
    VAR             shift and go to state 114
    VAL             shift and go to state 115
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LPAREN          shift and go to state 108
    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    SUSPEND         shift and go to state 78

    expression                     shift and go to state 96
    controlStructureBody           shift and go to state 423
    controlStructureBodyOrPV       shift and go to state 424
    block                          shift and go to state 238
    statement                      shift and go to state 239
    functionDeclaration            shift and go to state 93
    assignment                     shift and go to state 94
    loopStatement                  shift and go to state 95
    propertyDeclaration            shift and go to state 97
    chamadaDeFuncao                shift and go to state 98
    simpleIdentifier               shift and go to state 100
    directlyAssignableExpression   shift and go to state 101
    asExpression                   shift and go to state 102
    forStatement                   shift and go to state 103
    whileStatement                 shift and go to state 104
    doWhileStatement               shift and go to state 105
    disjunction                    shift and go to state 30
    varOrVal                       shift and go to state 106
    postfixUnaryExpression         shift and go to state 109
    parenthesizedDirectlyAssignableExpression shift and go to state 110
    prefixUnaryExpression          shift and go to state 42
    conjunction                    shift and go to state 31
    primaryExpression              shift and go to state 46
    prefixUnaryExpressionRecursive shift and go to state 43
    equality                       shift and go to state 32
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    unaryPrefix                    shift and go to state 45
    comparison                     shift and go to state 33
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    infixOperation                 shift and go to state 34
    typeModifier                   shift and go to state 75
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40

state 416

    (220) ifExpression -> IF LPAREN expression RPAREN PV ELSE . controlStructureBodyOrPV
    (222) controlStructureBodyOrPV -> . controlStructureBody
    (223) controlStructureBodyOrPV -> . PV
    (70) controlStructureBody -> . block
    (71) controlStructureBody -> . statement
    (72) block -> . LCHAVE statements RCHAVE
    (64) statement -> . functionDeclaration
    (65) statement -> . assignment
    (66) statement -> . loopStatement
    (67) statement -> . expression
    (68) statement -> . propertyDeclaration
    (69) statement -> . chamadaDeFuncao
    (4) functionDeclaration -> . FUN simpleIdentifier functionValueParameters functionBody
    (5) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType functionBody
    (86) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (87) assignment -> . asExpression assignmentAndOperator expression
    (73) loopStatement -> . forStatement
    (74) loopStatement -> . whileStatement
    (75) loopStatement -> . doWhileStatement
    (8) expression -> . disjunction
    (11) propertyDeclaration -> . varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV
    (12) propertyDeclaration -> . varOrVal genericVariableDeclaration ATRIBUICAO expression PV
    (13) propertyDeclaration -> . varOrVal genericVariableDeclaration ATRIBUICAO expression
    (14) propertyDeclaration -> . varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression
    (84) chamadaDeFuncao -> . ID LPAREN RPAREN
    (85) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (131) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (132) directlyAssignableExpression -> . simpleIdentifier
    (133) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (76) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody
    (77) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN
    (78) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (79) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (80) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (81) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (9) varOrVal -> . VAR
    (10) varOrVal -> . VAL
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (134) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (42) typeModifier -> . SUSPEND
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression

    PV              shift and go to state 425
    LCHAVE          shift and go to state 240
    FUN             shift and go to state 99
    ID              shift and go to state 107
    FOR             shift and go to state 111
    WHILE           shift and go to state 112
    DO              shift and go to state 113
    VAR             shift and go to state 114
    VAL             shift and go to state 115
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LPAREN          shift and go to state 108
    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    SUSPEND         shift and go to state 78

    expression                     shift and go to state 96
    controlStructureBodyOrPV       shift and go to state 426
    controlStructureBody           shift and go to state 423
    block                          shift and go to state 238
    statement                      shift and go to state 239
    functionDeclaration            shift and go to state 93
    assignment                     shift and go to state 94
    loopStatement                  shift and go to state 95
    propertyDeclaration            shift and go to state 97
    chamadaDeFuncao                shift and go to state 98
    simpleIdentifier               shift and go to state 100
    directlyAssignableExpression   shift and go to state 101
    asExpression                   shift and go to state 102
    forStatement                   shift and go to state 103
    whileStatement                 shift and go to state 104
    doWhileStatement               shift and go to state 105
    disjunction                    shift and go to state 30
    varOrVal                       shift and go to state 106
    postfixUnaryExpression         shift and go to state 109
    parenthesizedDirectlyAssignableExpression shift and go to state 110
    prefixUnaryExpression          shift and go to state 42
    conjunction                    shift and go to state 31
    primaryExpression              shift and go to state 46
    prefixUnaryExpressionRecursive shift and go to state 43
    equality                       shift and go to state 32
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    unaryPrefix                    shift and go to state 45
    comparison                     shift and go to state 33
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    infixOperation                 shift and go to state 34
    typeModifier                   shift and go to state 75
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40

state 417

    (199) anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .

    FUN             reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    $end            reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    ID              reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    FOR             reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    WHILE           reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    DO              reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    VAR             reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    VAL             reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    CROSSINLINE     reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    IMPORT          reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    INIT            reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    NOINLINE        reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    OUT             reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    VARARG          reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    WHERE           reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    OPERATOR        reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    LPAREN          reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    LITERAL_STRING  reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    NUMBER          reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    COLONCOLON      reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    LCCT            reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    IF              reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    RETURN          reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    RETURN_AT       reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    CONTINUE        reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    CONTINUE_AT     reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    BREAK           reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    BREAK_AT        reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    LCHAVE          reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    INCREMENTO      reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    DECREMENTO      reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    MINUS           reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    PLUS            reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    NOT             reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    SUSPEND         reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    RCHAVE          reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    PV              reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    ELSE            reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    MENOR           reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    PONTO           reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    AS              reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    MULT            reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    DIVIDE          reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    MOD             reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    PONTOPONTO      reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    ELVIS           reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    IN              reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    NOT_IN          reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    IS              reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    NOT_IS          reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    MAIOR           reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    MENORIGUAL      reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    MAIORIGUAL      reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    DIFERENTE       reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    IDENTIDADE      reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    IGUALDADE       reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    SEMIDENTIDADE   reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    AND             reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    OR              reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    MAISIGUAL       reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    MENOSIGUAL      reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    MULTIGUAL       reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    DIVIGUAL        reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    MODIGUAL        reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    RPAREN          reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    COMMA           reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)
    RCCT            reduce using rule 199 (anonymousFunction -> FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody .)


state 418

    (11) propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .

    FUN             reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    ID              reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    FOR             reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    WHILE           reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    DO              reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    VAR             reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    VAL             reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    CROSSINLINE     reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    IMPORT          reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    INIT            reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    NOINLINE        reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    OUT             reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    VARARG          reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    WHERE           reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    OPERATOR        reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    LPAREN          reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    LITERAL_STRING  reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    NUMBER          reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    COLONCOLON      reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    LCCT            reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    IF              reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    RETURN          reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    RETURN_AT       reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    CONTINUE        reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    CONTINUE_AT     reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    BREAK           reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    BREAK_AT        reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    LCHAVE          reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    INCREMENTO      reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    DECREMENTO      reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    MINUS           reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    PLUS            reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    NOT             reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    SUSPEND         reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    RCHAVE          reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    $end            reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    PV              reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    ELSE            reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    MENOR           reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    PONTO           reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    AS              reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    MULT            reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    DIVIDE          reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    MOD             reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    PONTOPONTO      reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    ELVIS           reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    IN              reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    NOT_IN          reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    IS              reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    NOT_IS          reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    MAIOR           reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    MENORIGUAL      reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    MAIORIGUAL      reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    DIFERENTE       reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    IDENTIDADE      reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    IGUALDADE       reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    SEMIDENTIDADE   reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    AND             reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    OR              reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    MAISIGUAL       reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    MENOSIGUAL      reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    MULTIGUAL       reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    DIVIGUAL        reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    MODIGUAL        reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    RPAREN          reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    COMMA           reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)
    RCCT            reduce using rule 11 (propertyDeclaration -> varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV .)


state 419

    (17) typeParametersRecursive -> COMMA typeParameter typeParametersRecursive .

    MAIOR           reduce using rule 17 (typeParametersRecursive -> COMMA typeParameter typeParametersRecursive .)


state 420

    (76) forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN . controlStructureBody
    (77) forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .
    (70) controlStructureBody -> . block
    (71) controlStructureBody -> . statement
    (72) block -> . LCHAVE statements RCHAVE
    (64) statement -> . functionDeclaration
    (65) statement -> . assignment
    (66) statement -> . loopStatement
    (67) statement -> . expression
    (68) statement -> . propertyDeclaration
    (69) statement -> . chamadaDeFuncao
    (4) functionDeclaration -> . FUN simpleIdentifier functionValueParameters functionBody
    (5) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType functionBody
    (86) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (87) assignment -> . asExpression assignmentAndOperator expression
    (73) loopStatement -> . forStatement
    (74) loopStatement -> . whileStatement
    (75) loopStatement -> . doWhileStatement
    (8) expression -> . disjunction
    (11) propertyDeclaration -> . varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV
    (12) propertyDeclaration -> . varOrVal genericVariableDeclaration ATRIBUICAO expression PV
    (13) propertyDeclaration -> . varOrVal genericVariableDeclaration ATRIBUICAO expression
    (14) propertyDeclaration -> . varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression
    (84) chamadaDeFuncao -> . ID LPAREN RPAREN
    (85) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (131) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (132) directlyAssignableExpression -> . simpleIdentifier
    (133) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (76) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody
    (77) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN
    (78) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (79) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (80) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (81) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (9) varOrVal -> . VAR
    (10) varOrVal -> . VAL
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (134) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (42) typeModifier -> . SUSPEND
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression

  ! shift/reduce conflict for LCHAVE resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for COLONCOLON resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
    RCHAVE          reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    $end            reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    PV              reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    ELSE            reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    MENOR           reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    PONTO           reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    AS              reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    MULT            reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    DIVIDE          reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    MOD             reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    PONTOPONTO      reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    ELVIS           reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    IN              reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    NOT_IN          reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    IS              reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    NOT_IS          reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    MAIOR           reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    MENORIGUAL      reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    MAIORIGUAL      reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    DIFERENTE       reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    IDENTIDADE      reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    IGUALDADE       reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    SEMIDENTIDADE   reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    AND             reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    OR              reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    MAISIGUAL       reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    MENOSIGUAL      reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    MULTIGUAL       reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    DIVIGUAL        reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    MODIGUAL        reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    RPAREN          reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    COMMA           reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    RCCT            reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    LCHAVE          shift and go to state 240
    FUN             shift and go to state 99
    ID              shift and go to state 107
    FOR             shift and go to state 111
    WHILE           shift and go to state 112
    DO              shift and go to state 113
    VAR             shift and go to state 114
    VAL             shift and go to state 115
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LPAREN          shift and go to state 108
    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    SUSPEND         shift and go to state 78

  ! FUN             [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! ID              [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! FOR             [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! WHILE           [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! DO              [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! VAR             [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! VAL             [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! CROSSINLINE     [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! IMPORT          [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! INIT            [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! NOINLINE        [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! OUT             [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! VARARG          [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! WHERE           [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! OPERATOR        [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! LPAREN          [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! LITERAL_STRING  [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! NUMBER          [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! COLONCOLON      [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! LCCT            [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! IF              [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! RETURN          [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! RETURN_AT       [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! CONTINUE        [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! CONTINUE_AT     [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! BREAK           [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! BREAK_AT        [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! LCHAVE          [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! INCREMENTO      [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! DECREMENTO      [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! MINUS           [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! PLUS            [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! NOT             [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! SUSPEND         [ reduce using rule 77 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]

    expression                     shift and go to state 96
    controlStructureBody           shift and go to state 427
    block                          shift and go to state 238
    statement                      shift and go to state 239
    functionDeclaration            shift and go to state 93
    assignment                     shift and go to state 94
    loopStatement                  shift and go to state 95
    propertyDeclaration            shift and go to state 97
    chamadaDeFuncao                shift and go to state 98
    simpleIdentifier               shift and go to state 100
    directlyAssignableExpression   shift and go to state 101
    asExpression                   shift and go to state 102
    forStatement                   shift and go to state 103
    whileStatement                 shift and go to state 104
    doWhileStatement               shift and go to state 105
    disjunction                    shift and go to state 30
    varOrVal                       shift and go to state 106
    postfixUnaryExpression         shift and go to state 109
    parenthesizedDirectlyAssignableExpression shift and go to state 110
    prefixUnaryExpression          shift and go to state 42
    conjunction                    shift and go to state 31
    primaryExpression              shift and go to state 46
    prefixUnaryExpressionRecursive shift and go to state 43
    equality                       shift and go to state 32
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    unaryPrefix                    shift and go to state 45
    comparison                     shift and go to state 33
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    infixOperation                 shift and go to state 34
    typeModifier                   shift and go to state 75
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40

state 421

    (80) doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .

    FUN             reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    ID              reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    FOR             reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    WHILE           reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DO              reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    VAR             reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    VAL             reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    CROSSINLINE     reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IMPORT          reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    INIT            reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NOINLINE        reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    OUT             reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    VARARG          reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    WHERE           reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    OPERATOR        reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    LPAREN          reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    LITERAL_STRING  reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NUMBER          reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    COLONCOLON      reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    LCCT            reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IF              reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    RETURN          reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    RETURN_AT       reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    CONTINUE_AT     reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    BREAK           reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    BREAK_AT        reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    LCHAVE          reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    INCREMENTO      reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DECREMENTO      reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MINUS           reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    PLUS            reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NOT             reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    SUSPEND         reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    RCHAVE          reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    $end            reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    PV              reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    ELSE            reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MENOR           reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    PONTO           reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    AS              reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MULT            reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MOD             reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    PONTOPONTO      reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    ELVIS           reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IN              reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NOT_IN          reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IS              reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NOT_IS          reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MAIOR           reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MENORIGUAL      reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MAIORIGUAL      reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DIFERENTE       reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IDENTIDADE      reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IGUALDADE       reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    SEMIDENTIDADE   reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    AND             reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    OR              reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MAISIGUAL       reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MENOSIGUAL      reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MULTIGUAL       reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DIVIGUAL        reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MODIGUAL        reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    RPAREN          reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    COMMA           reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    RCCT            reduce using rule 80 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)


state 422

    (219) ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE . controlStructureBodyOrPV
    (222) controlStructureBodyOrPV -> . controlStructureBody
    (223) controlStructureBodyOrPV -> . PV
    (70) controlStructureBody -> . block
    (71) controlStructureBody -> . statement
    (72) block -> . LCHAVE statements RCHAVE
    (64) statement -> . functionDeclaration
    (65) statement -> . assignment
    (66) statement -> . loopStatement
    (67) statement -> . expression
    (68) statement -> . propertyDeclaration
    (69) statement -> . chamadaDeFuncao
    (4) functionDeclaration -> . FUN simpleIdentifier functionValueParameters functionBody
    (5) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType functionBody
    (86) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (87) assignment -> . asExpression assignmentAndOperator expression
    (73) loopStatement -> . forStatement
    (74) loopStatement -> . whileStatement
    (75) loopStatement -> . doWhileStatement
    (8) expression -> . disjunction
    (11) propertyDeclaration -> . varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression PV
    (12) propertyDeclaration -> . varOrVal genericVariableDeclaration ATRIBUICAO expression PV
    (13) propertyDeclaration -> . varOrVal genericVariableDeclaration ATRIBUICAO expression
    (14) propertyDeclaration -> . varOrVal typeParameters genericVariableDeclaration ATRIBUICAO expression
    (84) chamadaDeFuncao -> . ID LPAREN RPAREN
    (85) chamadaDeFuncao -> . ID LPAREN parametersFunction RPAREN
    (131) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (132) directlyAssignableExpression -> . simpleIdentifier
    (133) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (114) asExpression -> . prefixUnaryExpression
    (115) asExpression -> . prefixUnaryExpression asOperator type
    (76) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody
    (77) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN
    (78) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (79) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (80) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (81) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (88) disjunction -> . conjunction
    (89) disjunction -> . conjunction OR disjunction
    (9) varOrVal -> . VAR
    (10) varOrVal -> . VAL
    (124) postfixUnaryExpression -> . primaryExpression
    (125) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (134) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (116) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (117) prefixUnaryExpression -> . postfixUnaryExpression
    (90) conjunction -> . equality
    (91) conjunction -> . equality AND conjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . NUMBER
    (168) primaryExpression -> . callableReference
    (169) primaryExpression -> . functionLiteral
    (170) primaryExpression -> . collectionLiteral
    (171) primaryExpression -> . ifExpression
    (172) primaryExpression -> . jumpExpression
    (120) prefixUnaryExpressionRecursive -> . unaryPrefix
    (121) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (92) equality -> . comparison
    (93) equality -> . comparison equalityOperator equality
    (173) parenthesizedExpression -> . LPAREN expression RPAREN
    (230) callableReference -> . receiverType COLONCOLON simpleIdentifierOrClass
    (231) callableReference -> . COLONCOLON simpleIdentifierOrClass
    (215) functionLiteral -> . lambdaLiteral
    (216) functionLiteral -> . anonymousFunction
    (174) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (175) collectionLiteral -> . LCCT RCCT
    (218) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (219) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV
    (220) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV
    (221) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV
    (224) jumpExpression -> . RETURN expression
    (225) jumpExpression -> . RETURN_AT expression
    (226) jumpExpression -> . CONTINUE
    (227) jumpExpression -> . CONTINUE_AT
    (228) jumpExpression -> . BREAK
    (229) jumpExpression -> . BREAK_AT
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (94) comparison -> . infixOperation
    (95) comparison -> . infixOperation comparisonOperator infixOperation
    (61) receiverType -> . typeModifier parenthesizedType
    (189) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (199) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints functionBody
    (200) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints functionBody
    (201) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints functionBody
    (202) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType functionBody
    (203) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType typeConstraints
    (204) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints functionBody
    (205) anonymousFunction -> . FUN parametersWithOptionalType optionalType functionBody
    (206) anonymousFunction -> . FUN parametersWithOptionalType optionalType typeConstraints
    (207) anonymousFunction -> . FUN typePonto parametersWithOptionalType functionBody
    (208) anonymousFunction -> . FUN typePonto parametersWithOptionalType typeConstraints
    (209) anonymousFunction -> . FUN typePonto parametersWithOptionalType optionalType
    (210) anonymousFunction -> . FUN typePonto parametersWithOptionalType
    (211) anonymousFunction -> . FUN parametersWithOptionalType functionBody
    (212) anonymousFunction -> . FUN parametersWithOptionalType optionalType
    (213) anonymousFunction -> . FUN parametersWithOptionalType typeConstraints
    (214) anonymousFunction -> . FUN parametersWithOptionalType
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (96) infixOperation -> . elvisExpression infixOperationRecursive
    (97) infixOperation -> . elvisExpression
    (42) typeModifier -> . SUSPEND
    (104) elvisExpression -> . infixFunctionCall
    (105) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (106) infixFunctionCall -> . rangeExpression
    (107) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (108) rangeExpression -> . additiveExpression
    (109) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (110) additiveExpression -> . multiplicativeExpression
    (111) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (112) multiplicativeExpression -> . asExpression
    (113) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression

    PV              shift and go to state 425
    LCHAVE          shift and go to state 240
    FUN             shift and go to state 99
    ID              shift and go to state 107
    FOR             shift and go to state 111
    WHILE           shift and go to state 112
    DO              shift and go to state 113
    VAR             shift and go to state 114
    VAL             shift and go to state 115
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LPAREN          shift and go to state 108
    LITERAL_STRING  shift and go to state 50
    NUMBER          shift and go to state 51
    COLONCOLON      shift and go to state 64
    LCCT            shift and go to state 67
    IF              shift and go to state 68
    RETURN          shift and go to state 69
    RETURN_AT       shift and go to state 70
    CONTINUE        shift and go to state 71
    CONTINUE_AT     shift and go to state 72
    BREAK           shift and go to state 73
    BREAK_AT        shift and go to state 74
    INCREMENTO      shift and go to state 57
    DECREMENTO      shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    NOT             shift and go to state 61
    SUSPEND         shift and go to state 78

    expression                     shift and go to state 96
    controlStructureBody           shift and go to state 423
    controlStructureBodyOrPV       shift and go to state 428
    block                          shift and go to state 238
    statement                      shift and go to state 239
    functionDeclaration            shift and go to state 93
    assignment                     shift and go to state 94
    loopStatement                  shift and go to state 95
    propertyDeclaration            shift and go to state 97
    chamadaDeFuncao                shift and go to state 98
    simpleIdentifier               shift and go to state 100
    directlyAssignableExpression   shift and go to state 101
    asExpression                   shift and go to state 102
    forStatement                   shift and go to state 103
    whileStatement                 shift and go to state 104
    doWhileStatement               shift and go to state 105
    disjunction                    shift and go to state 30
    varOrVal                       shift and go to state 106
    postfixUnaryExpression         shift and go to state 109
    parenthesizedDirectlyAssignableExpression shift and go to state 110
    prefixUnaryExpression          shift and go to state 42
    conjunction                    shift and go to state 31
    primaryExpression              shift and go to state 46
    prefixUnaryExpressionRecursive shift and go to state 43
    equality                       shift and go to state 32
    parenthesizedExpression        shift and go to state 49
    callableReference              shift and go to state 52
    functionLiteral                shift and go to state 53
    collectionLiteral              shift and go to state 54
    ifExpression                   shift and go to state 55
    jumpExpression                 shift and go to state 56
    unaryPrefix                    shift and go to state 45
    comparison                     shift and go to state 33
    receiverType                   shift and go to state 63
    lambdaLiteral                  shift and go to state 65
    anonymousFunction              shift and go to state 66
    label                          shift and go to state 47
    prefixUnaryOperator            shift and go to state 48
    infixOperation                 shift and go to state 34
    typeModifier                   shift and go to state 75
    elvisExpression                shift and go to state 35
    infixFunctionCall              shift and go to state 36
    rangeExpression                shift and go to state 37
    additiveExpression             shift and go to state 39
    multiplicativeExpression       shift and go to state 40

state 423

    (222) controlStructureBodyOrPV -> controlStructureBody .

    FUN             reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    $end            reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    ID              reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    FOR             reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    WHILE           reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    DO              reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    VAR             reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    VAL             reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    CROSSINLINE     reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    IMPORT          reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    INIT            reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    NOINLINE        reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    OUT             reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    VARARG          reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    WHERE           reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    OPERATOR        reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    LPAREN          reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    LITERAL_STRING  reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    NUMBER          reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    COLONCOLON      reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    LCCT            reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    IF              reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    RETURN          reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    RETURN_AT       reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    CONTINUE        reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    CONTINUE_AT     reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    BREAK           reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    BREAK_AT        reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    LCHAVE          reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    INCREMENTO      reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    DECREMENTO      reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    MINUS           reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    PLUS            reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    NOT             reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    SUSPEND         reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    RCHAVE          reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    PV              reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    ELSE            reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    MENOR           reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    PONTO           reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    AS              reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    MULT            reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    DIVIDE          reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    MOD             reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    PONTOPONTO      reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    ELVIS           reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    IN              reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    NOT_IN          reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    IS              reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    NOT_IS          reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    MAIOR           reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    MENORIGUAL      reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    MAIORIGUAL      reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    DIFERENTE       reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    IDENTIDADE      reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    IGUALDADE       reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    SEMIDENTIDADE   reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    AND             reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    OR              reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    MAISIGUAL       reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    MENOSIGUAL      reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    MULTIGUAL       reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    DIVIGUAL        reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    MODIGUAL        reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    RPAREN          reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    COMMA           reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)
    RCCT            reduce using rule 222 (controlStructureBodyOrPV -> controlStructureBody .)


state 424

    (221) ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .

    FUN             reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    $end            reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    ID              reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    FOR             reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    WHILE           reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    DO              reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    VAR             reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    VAL             reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    CROSSINLINE     reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    IMPORT          reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    INIT            reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    NOINLINE        reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    OUT             reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    VARARG          reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    WHERE           reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    OPERATOR        reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    LPAREN          reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    LITERAL_STRING  reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    NUMBER          reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    COLONCOLON      reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    LCCT            reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    IF              reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    RETURN          reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    RETURN_AT       reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    CONTINUE        reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    CONTINUE_AT     reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    BREAK           reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    BREAK_AT        reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    LCHAVE          reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    INCREMENTO      reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    DECREMENTO      reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    MINUS           reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    PLUS            reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    NOT             reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    SUSPEND         reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    RCHAVE          reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    PV              reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    ELSE            reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    MENOR           reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    PONTO           reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    AS              reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    MULT            reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    DIVIDE          reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    MOD             reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    PONTOPONTO      reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    ELVIS           reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    IN              reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    NOT_IN          reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    IS              reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    NOT_IS          reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    MAIOR           reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    MENORIGUAL      reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    MAIORIGUAL      reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    DIFERENTE       reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    IDENTIDADE      reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    IGUALDADE       reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    SEMIDENTIDADE   reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    AND             reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    OR              reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    MAISIGUAL       reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    MENOSIGUAL      reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    MULTIGUAL       reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    DIVIGUAL        reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    MODIGUAL        reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    RPAREN          reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    COMMA           reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)
    RCCT            reduce using rule 221 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBodyOrPV .)


state 425

    (223) controlStructureBodyOrPV -> PV .

    FUN             reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    $end            reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    ID              reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    FOR             reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    WHILE           reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    DO              reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    VAR             reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    VAL             reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    CROSSINLINE     reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    IMPORT          reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    INIT            reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    NOINLINE        reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    OUT             reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    VARARG          reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    WHERE           reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    OPERATOR        reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    LPAREN          reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    LITERAL_STRING  reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    NUMBER          reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    COLONCOLON      reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    LCCT            reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    IF              reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    RETURN          reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    RETURN_AT       reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    CONTINUE        reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    CONTINUE_AT     reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    BREAK           reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    BREAK_AT        reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    LCHAVE          reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    INCREMENTO      reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    DECREMENTO      reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    MINUS           reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    PLUS            reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    NOT             reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    SUSPEND         reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    RCHAVE          reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    PV              reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    ELSE            reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    MENOR           reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    PONTO           reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    AS              reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    MULT            reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    DIVIDE          reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    MOD             reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    PONTOPONTO      reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    ELVIS           reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    IN              reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    NOT_IN          reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    IS              reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    NOT_IS          reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    MAIOR           reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    MENORIGUAL      reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    MAIORIGUAL      reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    DIFERENTE       reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    IDENTIDADE      reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    IGUALDADE       reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    SEMIDENTIDADE   reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    AND             reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    OR              reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    MAISIGUAL       reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    MENOSIGUAL      reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    MULTIGUAL       reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    DIVIGUAL        reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    MODIGUAL        reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    RPAREN          reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    COMMA           reduce using rule 223 (controlStructureBodyOrPV -> PV .)
    RCCT            reduce using rule 223 (controlStructureBodyOrPV -> PV .)


state 426

    (220) ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .

    FUN             reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    $end            reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    ID              reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    FOR             reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    WHILE           reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    DO              reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    VAR             reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    VAL             reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    CROSSINLINE     reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    IMPORT          reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    INIT            reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    NOINLINE        reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    OUT             reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    VARARG          reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    WHERE           reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    OPERATOR        reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    LPAREN          reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    LITERAL_STRING  reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    NUMBER          reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    COLONCOLON      reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    LCCT            reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    IF              reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    RETURN          reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    RETURN_AT       reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    CONTINUE        reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    CONTINUE_AT     reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    BREAK           reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    BREAK_AT        reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    LCHAVE          reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    INCREMENTO      reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    DECREMENTO      reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    MINUS           reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    PLUS            reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    NOT             reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    SUSPEND         reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    RCHAVE          reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    PV              reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    ELSE            reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    MENOR           reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    PONTO           reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    AS              reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    MULT            reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    DIVIDE          reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    MOD             reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    PONTOPONTO      reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    ELVIS           reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    IN              reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    NOT_IN          reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    IS              reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    NOT_IS          reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    MAIOR           reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    MENORIGUAL      reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    MAIORIGUAL      reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    DIFERENTE       reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    IDENTIDADE      reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    IGUALDADE       reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    SEMIDENTIDADE   reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    AND             reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    OR              reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    MAISIGUAL       reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    MENOSIGUAL      reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    MULTIGUAL       reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    DIVIGUAL        reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    MODIGUAL        reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    RPAREN          reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    COMMA           reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)
    RCCT            reduce using rule 220 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBodyOrPV .)


state 427

    (76) forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .

    FUN             reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    ID              reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    FOR             reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    WHILE           reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    DO              reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    VAR             reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    VAL             reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    CROSSINLINE     reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    IMPORT          reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    INIT            reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    NOINLINE        reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    OUT             reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    VARARG          reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    WHERE           reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    OPERATOR        reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    LPAREN          reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    LITERAL_STRING  reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    NUMBER          reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    COLONCOLON      reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    LCCT            reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    IF              reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    RETURN          reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    RETURN_AT       reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    CONTINUE        reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    CONTINUE_AT     reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    BREAK           reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    BREAK_AT        reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    LCHAVE          reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    INCREMENTO      reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    DECREMENTO      reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    MINUS           reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    PLUS            reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    NOT             reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    SUSPEND         reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    RCHAVE          reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    $end            reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    PV              reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    ELSE            reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    MENOR           reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    PONTO           reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    AS              reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    MULT            reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    DIVIDE          reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    MOD             reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    PONTOPONTO      reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    ELVIS           reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    IN              reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    NOT_IN          reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    IS              reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    NOT_IS          reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    MAIOR           reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    MENORIGUAL      reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    MAIORIGUAL      reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    DIFERENTE       reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    IDENTIDADE      reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    IGUALDADE       reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    SEMIDENTIDADE   reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    AND             reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    OR              reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    MAISIGUAL       reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    MENOSIGUAL      reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    MULTIGUAL       reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    DIVIGUAL        reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    MODIGUAL        reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    RPAREN          reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    COMMA           reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    RCCT            reduce using rule 76 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)


state 428

    (219) ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .

    FUN             reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    $end            reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    ID              reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    FOR             reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    WHILE           reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    DO              reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    VAR             reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    VAL             reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    CROSSINLINE     reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    IMPORT          reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    INIT            reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    NOINLINE        reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    OUT             reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    VARARG          reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    WHERE           reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    OPERATOR        reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    LPAREN          reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    LITERAL_STRING  reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    NUMBER          reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    COLONCOLON      reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    LCCT            reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    IF              reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    RETURN          reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    RETURN_AT       reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    CONTINUE        reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    CONTINUE_AT     reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    BREAK           reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    BREAK_AT        reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    LCHAVE          reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    INCREMENTO      reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    DECREMENTO      reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    MINUS           reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    PLUS            reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    NOT             reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    SUSPEND         reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    RCHAVE          reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    PV              reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    ELSE            reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    MENOR           reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    PONTO           reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    AS              reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    MULT            reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    DIVIDE          reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    MOD             reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    PONTOPONTO      reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    ELVIS           reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    IN              reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    NOT_IN          reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    IS              reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    NOT_IS          reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    MAIOR           reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    MENORIGUAL      reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    MAIORIGUAL      reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    DIFERENTE       reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    IDENTIDADE      reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    IGUALDADE       reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    SEMIDENTIDADE   reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    AND             reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    OR              reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    MAISIGUAL       reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    MENOSIGUAL      reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    MULTIGUAL       reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    DIVIGUAL        reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    MODIGUAL        reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    RPAREN          reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    COMMA           reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)
    RCCT            reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBodyOrPV .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OR in state 31 resolved as shift
WARNING: shift/reduce conflict for AND in state 32 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 33 resolved as shift
WARNING: shift/reduce conflict for IDENTIDADE in state 33 resolved as shift
WARNING: shift/reduce conflict for IGUALDADE in state 33 resolved as shift
WARNING: shift/reduce conflict for SEMIDENTIDADE in state 33 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 34 resolved as shift
WARNING: shift/reduce conflict for MAIOR in state 34 resolved as shift
WARNING: shift/reduce conflict for MENORIGUAL in state 34 resolved as shift
WARNING: shift/reduce conflict for MAIORIGUAL in state 34 resolved as shift
WARNING: shift/reduce conflict for IN in state 35 resolved as shift
WARNING: shift/reduce conflict for NOT_IN in state 35 resolved as shift
WARNING: shift/reduce conflict for IS in state 35 resolved as shift
WARNING: shift/reduce conflict for NOT_IS in state 35 resolved as shift
WARNING: shift/reduce conflict for ELVIS in state 36 resolved as shift
WARNING: shift/reduce conflict for ID in state 37 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 37 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 37 resolved as shift
WARNING: shift/reduce conflict for INIT in state 37 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 37 resolved as shift
WARNING: shift/reduce conflict for OUT in state 37 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 37 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 37 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 37 resolved as shift
WARNING: shift/reduce conflict for PONTOPONTO in state 39 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 40 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 40 resolved as shift
WARNING: shift/reduce conflict for MULT in state 41 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 41 resolved as shift
WARNING: shift/reduce conflict for MOD in state 41 resolved as shift
WARNING: shift/reduce conflict for AS in state 42 resolved as shift
WARNING: shift/reduce conflict for ID in state 45 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 45 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 45 resolved as shift
WARNING: shift/reduce conflict for INIT in state 45 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 45 resolved as shift
WARNING: shift/reduce conflict for OUT in state 45 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 45 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 45 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 45 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 46 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 46 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 46 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 46 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 46 resolved as shift
WARNING: shift/reduce conflict for COLONCOLON in state 46 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 46 resolved as shift
WARNING: shift/reduce conflict for PONTO in state 46 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 82 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 82 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 90 resolved as shift
WARNING: shift/reduce conflict for MAISIGUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for MENOSIGUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for MULTIGUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for DIVIGUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for MODIGUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for MULT in state 102 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 102 resolved as shift
WARNING: shift/reduce conflict for MOD in state 102 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 107 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 109 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 109 resolved as shift
WARNING: shift/reduce conflict for COLONCOLON in state 109 resolved as shift
WARNING: shift/reduce conflict for PONTO in state 109 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 157 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 157 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 157 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 157 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 157 resolved as shift
WARNING: shift/reduce conflict for COLONCOLON in state 157 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 157 resolved as shift
WARNING: shift/reduce conflict for PONTO in state 157 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 159 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 166 resolved as shift
WARNING: shift/reduce conflict for ID in state 198 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 198 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 198 resolved as shift
WARNING: shift/reduce conflict for INIT in state 198 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 198 resolved as shift
WARNING: shift/reduce conflict for OUT in state 198 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 198 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 198 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 198 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 198 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 202 resolved as shift
WARNING: shift/reduce conflict for IN in state 247 resolved as shift
WARNING: shift/reduce conflict for NOT_IN in state 247 resolved as shift
WARNING: shift/reduce conflict for IS in state 247 resolved as shift
WARNING: shift/reduce conflict for NOT_IS in state 247 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 250 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 261 resolved as shift
WARNING: shift/reduce conflict for ID in state 298 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 298 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 298 resolved as shift
WARNING: shift/reduce conflict for INIT in state 298 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 298 resolved as shift
WARNING: shift/reduce conflict for OUT in state 298 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 298 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 298 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 298 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 298 resolved as shift
WARNING: shift/reduce conflict for ID in state 300 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 300 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 300 resolved as shift
WARNING: shift/reduce conflict for INIT in state 300 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 300 resolved as shift
WARNING: shift/reduce conflict for OUT in state 300 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 300 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 300 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 300 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 300 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 301 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 333 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 335 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 340 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 340 resolved as shift
WARNING: shift/reduce conflict for ID in state 340 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 340 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 340 resolved as shift
WARNING: shift/reduce conflict for INIT in state 340 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 340 resolved as shift
WARNING: shift/reduce conflict for OUT in state 340 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 340 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 340 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 340 resolved as shift
WARNING: shift/reduce conflict for ID in state 356 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 356 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 356 resolved as shift
WARNING: shift/reduce conflict for INIT in state 356 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 356 resolved as shift
WARNING: shift/reduce conflict for OUT in state 356 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 356 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 356 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 356 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 356 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 357 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 360 resolved as shift
WARNING: shift/reduce conflict for PV in state 373 resolved as shift
WARNING: shift/reduce conflict for PV in state 389 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 389 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 390 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 392 resolved as shift
WARNING: shift/reduce conflict for PV in state 402 resolved as shift
WARNING: shift/reduce conflict for PV in state 412 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 412 resolved as shift
WARNING: shift/reduce conflict for FUN in state 412 resolved as shift
WARNING: shift/reduce conflict for ID in state 412 resolved as shift
WARNING: shift/reduce conflict for FOR in state 412 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 412 resolved as shift
WARNING: shift/reduce conflict for DO in state 412 resolved as shift
WARNING: shift/reduce conflict for VAR in state 412 resolved as shift
WARNING: shift/reduce conflict for VAL in state 412 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 412 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 412 resolved as shift
WARNING: shift/reduce conflict for INIT in state 412 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 412 resolved as shift
WARNING: shift/reduce conflict for OUT in state 412 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 412 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 412 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 412 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 412 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 412 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 412 resolved as shift
WARNING: shift/reduce conflict for COLONCOLON in state 412 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 412 resolved as shift
WARNING: shift/reduce conflict for IF in state 412 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 412 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 412 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 412 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 412 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 412 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 412 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 412 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 412 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 412 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 412 resolved as shift
WARNING: shift/reduce conflict for NOT in state 412 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 412 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 420 resolved as shift
WARNING: shift/reduce conflict for FUN in state 420 resolved as shift
WARNING: shift/reduce conflict for ID in state 420 resolved as shift
WARNING: shift/reduce conflict for FOR in state 420 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 420 resolved as shift
WARNING: shift/reduce conflict for DO in state 420 resolved as shift
WARNING: shift/reduce conflict for VAR in state 420 resolved as shift
WARNING: shift/reduce conflict for VAL in state 420 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 420 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 420 resolved as shift
WARNING: shift/reduce conflict for INIT in state 420 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 420 resolved as shift
WARNING: shift/reduce conflict for OUT in state 420 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 420 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 420 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 420 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 420 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 420 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 420 resolved as shift
WARNING: shift/reduce conflict for COLONCOLON in state 420 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 420 resolved as shift
WARNING: shift/reduce conflict for IF in state 420 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 420 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 420 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 420 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 420 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 420 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 420 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 420 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 420 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 420 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 420 resolved as shift
WARNING: shift/reduce conflict for NOT in state 420 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 420 resolved as shift
WARNING: reduce/reduce conflict in state 38 resolved using rule (primaryExpression -> simpleIdentifier)
WARNING: rejected rule (label -> simpleIdentifier) in state 38
WARNING: reduce/reduce conflict in state 100 resolved using rule (directlyAssignableExpression -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 100
WARNING: reduce/reduce conflict in state 100 resolved using rule (primaryExpression -> simpleIdentifier)
WARNING: rejected rule (label -> simpleIdentifier) in state 100
WARNING: reduce/reduce conflict in state 195 resolved using rule (primaryExpression -> simpleIdentifier)
WARNING: rejected rule (label -> simpleIdentifier) in state 195
WARNING: reduce/reduce conflict in state 250 resolved using rule (simpleUserType -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 250
WARNING: reduce/reduce conflict in state 250 resolved using rule (simpleUserType -> simpleIdentifier)
WARNING: rejected rule (label -> simpleIdentifier) in state 250
WARNING: reduce/reduce conflict in state 270 resolved using rule (varianceModifier -> OUT)
WARNING: rejected rule (simpleIdentifier -> OUT) in state 270
WARNING: reduce/reduce conflict in state 280 resolved using rule (primaryExpression -> simpleIdentifier)
WARNING: rejected rule (label -> simpleIdentifier) in state 280
WARNING: reduce/reduce conflict in state 297 resolved using rule (variableDeclaration -> simpleIdentifier)
WARNING: rejected rule (directlyAssignableExpression -> simpleIdentifier) in state 297
WARNING: reduce/reduce conflict in state 297 resolved using rule (variableDeclaration -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 297
WARNING: reduce/reduce conflict in state 297 resolved using rule (primaryExpression -> simpleIdentifier)
WARNING: rejected rule (label -> simpleIdentifier) in state 297
WARNING: reduce/reduce conflict in state 309 resolved using rule (simpleUserType -> simpleIdentifier)
WARNING: rejected rule (parameterWithOptionalType -> simpleIdentifier) in state 309
WARNING: reduce/reduce conflict in state 335 resolved using rule (simpleUserType -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 335
WARNING: reduce/reduce conflict in state 335 resolved using rule (primaryExpression -> simpleIdentifier)
WARNING: rejected rule (label -> simpleIdentifier) in state 335
WARNING: reduce/reduce conflict in state 367 resolved using rule (parameter -> simpleIdentifier optionalType)
WARNING: rejected rule (parameterWithOptionalType -> simpleIdentifier optionalType) in state 367
